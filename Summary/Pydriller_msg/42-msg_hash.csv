commit_id,msg
aef2ab453a8b11984c4fe64ba27612a1308ee490,"Initial import.  Needs to:
* rename packages
* update license information"
f812cde87f959243015bedae65de2bf5c2276b5d,Updated NOTICE.txt and added COPYRIGHT.txt following the JBoss.org guideline
1bc79ea2a41845133c5b97a66ba104bab80b95ab,"* Updated all license headers
* Added missing license headers
* Updated mailing list address and my e-mail address"
0202a01cf1e7fd383afa36756c34d1443f6b50cb,"* Changed all package names to org.jboss.netty.*
* Added .classpath, .project and target to svn:ignore"
94c91ee52921569086eb3a033350444a74fb6b18,* Added .settings to svn:ignore
796379090d6e2259b08d985e5a1e19e9ef7a28ca,Added COPYRIGHT.* to the assembly
53cc66142c9cf1a59d096423d4a4514cd4f25037,Fixed APIviz tag errors
fbf8ab5ea7bea54b1370c77f344d50f834bdf430,Removed links to the source code in JavaDoc
44c5860d255505550dcb7314ae2c2df2d5141934,Renamed ChannelBuffer.writePlaceholder to writeNul
aff7cd89823d4c687df7c6b3546984d82dc74142,More concise package description for org.jboss.netty.logging
1eab02881ee8864e1e289bf07f83c1701ced51b0,"* Renamed ChannelBuffer.writeNul() to writeZero();
* Added ChannelBuffer.setZero()"
7acc333dd9ca933623944c02577b8d4dd888fc42,"* Added string conversion methods to ChannelBuffer
* Added string wrapper methods to ChannelBuffers"
2740da7c70d6d47d6d0670c1bb903e974330b320,Fixed wrong name
d5d92ae04d97b91987f2ad8b75b05aa893e93618,Renamed Logger and LoggerFactory to InternalLogger and InternalLoggerFactory to state that these classes for internal use only explicitly
e50a736c29c6af71d59a14465f985f991b6e557d,"* Moved all factory methods in InternalLogger to InternalLoggerFactory
* Made InternalLogger an interface"
7c2934c15f4f53e256a13433018265641cd6757e,Fixed StackOverflowError in InternalLoggerFactory.getInstance()
88b7cf3e36ddb84451fbe8ae1f60a496a2e118c5,Renamed InternalLoggerFactory.get/setDefault to get/setDefaultFactory to clarify its meaning.
b33bbf7da77219df2773711fc8e08e528acde949,Removed ChannelBuffer.readBytes() which is useless
289e84d69cebc9d292e247358b3e28d30dee9f7c,Added ChannelBuffer.readSlice() methods in case a user doesn't want to copy at the risk of modified content
19fcbac57544096a98558cb07705502f31873230,Added unsigned integer access methods
58599fe343d637c3722ff6a5bf8c8bd11d563d59,Added more toString() variants to ChannelBuffer - makes ChannelBuffer more convenient to decode a NUL-terminated string.
4710fb93deae14601a91a2d6737edfc5ba191bc3,Indentation
5590fe913d0d3350fccd76627ccc7ccc473bcb9a,More JavaDoc in ChannelBuffer
cb88eb0aefa94a8919b7cbef75d593ad5adef4a6,More JavaDoc
80ab091c6e101892e65285c7f51a0be80afacf81,More JavaDoc
ee62e8bbc0e1ccac8cd5befca27ec3ac59adc663,More JavaDoc
0c8361e21fd524a0e0c39361cd1753c31244bf64,"Renamed ChannelBuffers.wrappedBuffer(String, String) to ChannelBuffers.copiedBuffer which is correct"
df5b82beb4e235a9d3dcfd4cebfaa5eac7b601d6,"* Added ChannelBuffers.copiedBuffer(ByteOrder, String, String)
* More JavaDoc"
2d49a467aa428862d3c120b2c82fc28826492f99,More JavaDoc
b3519dec05cfd3310c9a6819a00ff9d76c20ee97,Typo
aa2616ccce08068eb1091d0841ee0a753b7b2003,JavaDoc for the logging package
fdde3ff7f1c610097f6763c416bd505981afaee2,Added the package-info for the util package just in case someone wants to figure out what this package is for.
1ad95d7433f67e1b888f521e27a0293b1d9c5288,"* Fixed wrong parameters in AbstractChannelBuffer.getBytes(ChannelBuffer)
* Added variants of getBytes and setBytes to AbstractChannelBuffer"
c58e224b7e63d94d9bd801c708c2b0215a8c33bf,Added even more JavaDoc
a1c07e91228f01e88c1ae68f5db6fa557e58f5c1,"* Updated ChannelBuffer JavaDoc (fixes and additions)
* Changed ReplayingDecoderBuffer to reject more potentially dangerous operations"
6f30a4a748afced35b10f7d42290977a6eb56df2,Fixed a bug where Channel.getBytes and setBytes don't update the argument's reader/writerIndex when relative indexing is used.
e7e22321d01601a487729ba43d6b76b4edf67369,Renamed writable space to writable bytes to avoid ambiguity
c7da1869f86c8d39d473ff7d04b9f00301b0fdf7,More JavaDoc
5cd1d72571ccf2ddf3a8836b9b0938d8cfc758e7,"* Removed a unused method in ConvertUtil
* More JavaDoc"
f34a0182184d3b3cb046064c0dd32196182c31ad,More JavaDoc
298c9eda57694e9487aac14d5c290214a21ff7f1,Removed a unnecessary period
d882e4f27cb175c0a0c66ddc9e340075f746a37c,"* JavaDoc cleanup
* Fixed contract violation in AbstractChannelBuffer.get/setBytes()"
0a594a27d5584f174abd1545aed9f273c208ac81,Fixed another two contract violations in AbstractChannelBuffer
b2cc6c264cd24fe3ef3c274b5467e044e6176585,More JavaDoc
ad805a1f703eeaa64f7af2a9be1c4994f657950a,Fixed a JavaDoc error in ChannelBuffer
24b4db3f5773cb739531f82eb6662dad9df2fe80,JavaDoc for the bootstrap package
0d5657b923e589ac2e2d48a3deb9e8ee86261695,Removed an empty line
e5def24c8bd470984e44d30d88e49c06a81ae937,Added JavaDoc for ChannelFuture and its related types
27827068cdafc63e664c4371ed602bc956576c64,Fixed wrong explanation in ServerBootstrap
31aa46874164916fd371a84948b04d2a2e45f99c,Polished JavaDoc
7de02097d0e71f301126c9312189deb47027b6f7,Added APIviz tags to the logging package
5e99787df64efa8b10dbb4d0266bfe564d5f2357,Split DiscardHandler into DiscardClientHandler and DiscardServerHandler for easier understanding
93f76ce594cb2953f22d072190537f0bd32eeccd,"* More comments on examples
* Added JavaDoc for ChannelPipelineCoverage which is somewhat difficult to understand."
12dd5a35b33733dca1776c963da6d6e0bb729536,More JavaDoc for ChannelPipelineCoverage
af2bcd291fb15ed68a179d2c463a9b59d25d6414,[maven-release-plugin] prepare release netty-3.0.0.CR1
c92d4f72dd950426b97d06006688d3d13bf57ba9,[maven-release-plugin] prepare for next development iteration
5f14fdd3481e4340adfc9778512805bd20e45813,[maven-release-plugin] rollback the release of netty-3.0.0.CR1
1b40d714b5f44cac5ca8890ff0d0bf94312ca3a8,Fixed last-minute problem with OSGi bundle packaging
807f69eaec608836d30b70dc20e09b3901fc7fb3,[maven-release-plugin] prepare release netty-3.0.0.CR1
1163a0eaf9eef8cdb9df95786aa0fc80b01e4eb8,[maven-release-plugin] prepare for next development iteration
166363d438860b03f5915ac23826f7e644768bbd,Fixed deployment problem
7e0ac9123163a238ef3102b66b703bd2a47be9ab,Added easymock to the test scope dependency
8e9b51a412b2e99d0456dc91c633651b2e9c361e,"Fixed issue: NETTY-9 (DefaultChannelPipline.getFirst() and getLast() throws NullPointerException if the pipeline is empty.)
* Added null check code in getFirst() and getLast()"
866a74305c4b64eb5ffb177d7cee43638579c6f3,"Fixed issue: NETTY-10 (DefaultChannelPipeline.removeFirst() and removeLast() throws NullPointerException)
* Made sure NoSuchElementException is thrown when the pipeline is empty
* Made sure NullPointerException is not thrown when the pipeline contains only one handler"
82f4d193b11de75a30512e34ec00a7e63b55d7d1,Added test cases for Bootstrap
a421f94909a1f98095dd707002b4cdf3c084d815,A couple more test cases for Bootstrap
bd51f12fb7d1b47af301f56e918dca5445005166,More test cases for Bootstrap
a2eed846b4a1ebd1b4c623e22cbff299ed19bc6a,Fixed NETTY-10 (Bootstrap.getPipeline() shold throw an IllegalStateException if pipelineFactory property is in use.) and NETTY-12 (Bootstrap.setPipeline() doesn't update the pipeline property at all.)
4fe7536dbfc213c82adb4027c4c3c2412e4c16a9,Added reports directory to svn:ignore
a05905f64a8f0c93e4e05804ecfcae119bbaa264,Removed PMD and Cobertura plugin from the pom.xml - IDE will take care of them
a7c73d2e52535abe93e40daccbdb133bb41014fc,"Fixed issue: NETTY-13 (Stack overflow when an exception is thrown while processing ExceptionEvent)
* Renamed notifyException to notifyHandlerException
* Prevented infinite recursion caused by failure on exceptionCaught"
2d6cfe9af6a8ed85c4ee43c435c791a0a261bb08,"Fixed an issue: Netty-14 (IllegalArgumentException when creating a dynamic buffer with 0 estimatedLength)
* Allowed zero initial capacity
* Made the exception message more specific"
49bac1aa73e0c83f1d6526c95954ed3b8bcb7485,"Fixed an issue: NETTY-15 (NullPointerException in SslHandler if handshake() method is not called explicitly.)
* Modified SslHandler.setHandshakeSuccess/Failure(..) to create a new handshakeFuture if not created yet."
1837b200512031991c963e935705a0447673c3be,"Fixed an issue: NETTY-16 (SSL handshake failure should be reported to the ChannelPipeline.)
* Added SslHandler.newHandshakeFuture() and replaced all handshake future creation code with it"
094a4aaa8db5bbae6aa475fadabce0a933b5286a,"Fixed issue: NETTY-17 (NioSocketChannelConfig.setWriteSpinCount() does nothing.)
* Added an assignment statement"
4d17646743238dc456f99a2bd697b2a4c814327b,"NETTY-19 Investigate if there's any copyright issue related with MINA
* Replaced NamePreservingRunnable with a new ThreadRenamingRunnable"
6460f2a70f1a2e4db294564aa787fa39a88d3f96,Runnable should be declared first as declared in the constructor
c76451b874dcf22962b09c3d538d978a0ae2c723,ObjectEncoder should allow zero estimated length as we did in DynamicChannelBuffer
65eda0902d61438898fb15acc5828ff68fc2160e,Fixed an issue: NETTY-20 (Incorrect object length constraint in ObjectEncoder and ObjectEncoderOutputStream)
07e0bf9413d08a29ab1a865a16381ede7ded8b82,Removed unused code in DefaultChannelFuture
3828b3754a54310fcf3f2fe0940e1bdb43041309,"Relates issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
* The bottleneck was too frequent wakeups.  I found that recent NIO implementations don't require wakeups to get / set interestOps."
795b14a7b116111574d019bd38aaaa7e33f61120,"Relates issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
* Extracted NioWorker.WAKEUP_REQUIREMENT_LEVEL to NioProviderMetadata"
e53b802def234b863ca4258fb270d0f398964b67,"Relates issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
* Allowed a user to specify the NIO provider constraint level using the system property
* Added detectConstraintLevel() method to implement the constraint level autodetection"
4247232f51a883d8ba26ff9662a2768238ea826f,Updated error message
1ec42526d5fb2afb4627872dce163c4c526a0a44,"Related issue: NETTY-18 (Performance degradation when Channel.write() is called from outside an I/O thread (NIO transport)
* More precise constraint level detection."
96e1cf0385ef2015c87d836ee60ba20d57d6c3fe,Fixed a problem with NIO constraint level detection in JRE 1.5
e9e1b0ebe6ba19f922db5a8141eec09d7a3cc6e9,Even more optimization in NioWorker.write()
edd969b384583e63aa8e463cd8edbb4dd1380514,Fixed slow write performance on some circumstance
66f7d5a800517dcb788c736c2ef482e669c7de15,"Fixed NETTY-21 and NETTY-22:
* ChannelBuffer.setBytes() and writeBytes() doesn't work when a NIO channel is specified.
* ChannelBuffer.setBytes() and writeBytes() should return -1 if the connection is closed.
* Changed NioWorker.read() to use ChannelBuffer.writeBytes()"
07f17cfd4f51a397ebd058bd047ec330f8d4b572,Fixed silly NPE in SslHandler
84ea01693116dc3dada13f28e10ad7b2158027a7,Forgot to check in ...
5ac5611e5179b89c9440f3bcc3f95597dabf0610,"Resolved issue: NETTY-23 (Simplify an exception stack trace.)
* Added DebugUtil and StackTraceSimplifier
* DefaultExceptionEvent and InternalLoggerFactory simplifies the stack trace unless Netty debug mode is enabled."
ff8f148990a594c8d66c5f0403ae77511317face,"Made sure debug mode is turned off if no, false, or 0 is specified."
9dd9b00851f77b9b35ca724ab785fdc29b79e492,Fixed issue: NETTY-24 (Move ChannelBuffer.EMPTY_BUFFER to ChannelBuffers.)
71d876d0ddf78a42b953daa898cbf0d8e9829e62,[maven-release-plugin] prepare release netty-3.0.0.CR2
abdefea7032455624699b588d00d40b636a05675,[maven-release-plugin] prepare for next development iteration
b4c6d82be736baf971ed9c7bc1896413a0577d1e,"Fixed issue: NETTY-25 (Unnecessarily logged exception in the blocking I/O server socket)
* Suppressed the expected exception logging"
a0d9a59206ffd6fa96c26aa0f07170531f6f6fdc,"Fixed issue: NETTY-26 (Infinite blocking in old blocking I/O transport.)
* Added a proper interrupt() call in OioWorker.close() to wake the worker thread up"
c95b219a56311c72b8ee8bb4b6b916cad898df23,"* Extracted Bootstrap.isOrderedMap into util.MapUtil
* More test coverage for Bootstrap"
6b995456fecab57823d71ebfe9d3e6d41db4c3a9,Added a test case for TimeBasedUuidGenerator
d2c157d32d41f501f9a6ff88cb4f2c81618911b4,Added one more minimal test case to TimeBasedUuidGeneratorTest
c84b1bc139839af5bafb5d5313f8858cc00f2a2f,"* Added MapUtilTest
* Added SilentLoggerFactory for a testing purpose"
ca249684a6de8f214b2e6f2f3a1f364780bbedaa,"* Renamed ConvertUtil to ConversionUtil
* Added ConversionUtilTest"
1a5ccaf98dc81f05a7dbb8ec4900da49b0b3483c,Added DebugUtilTest
7b8d48304451b3f97d65bd39cf407bf665a9f843,Added ImmediateExecutorTest
5a63b91c490de20444572e710b9486ef34fe2a39,Removed unused constructor in MapBackedSet
1194ac0f39e2830b7e6eef2c6727533158d8c3c4,Added MapBackedSetTest
60f08c5d9fa9414bf27f2f7327420b9c7fea3eb9,Added SwitchableInputStreamTest
4d55da5c7e0ec262c7ea2fdd8cd99bbe6a36367f,Added StackTraceSimplifierTest
3dbe9737357844b4201ac70ef6e97801225d7c3d,"* Simplified the SecurityManager implementation in DebugUtilTest
* Added ThreadRenamingRunnableTest"
6ff5a87d01b3af3c441983a60b7e9a4c46d46106,"* Removed SilentLoggerFactory which is not so useful
* Added ClientBootstrapTest
* Added ServerBootstrapTest
* Fixed a unexpected behavior when null localAddress or remoteAddress is specified"
b4d84ce73b3209b3165b3934ca9f0ca98ff35e89,"Fixed issue: NETTY-28 (Channel.compareTo() can return 0 for different channels.)
* Changed AbstractChannel.compareTo(Channel) to use the id of the channels instead of the identity hash codes"
4f276cf52ebe159044fdd7b85172ec75a1485a36,Moved inner classes out to top level classes for easier testing
f22f07ec5172ee81b4b16160c1a71ecdca1a8edc,More test coverage
9dabeb4e473d0590cef1ff5c1edaa51d18d36b3b,Added test cases for the logging package
4d13ccc1092b83d79980419e04392dd239b01676,Fixed failing tests
a8c5f840bda6206c164f77ec269f8c9c13d527de,Fixed a problem where an executor shuts down too early
e2262e135a082122b80430d7fbe77c0685ad0db9,"* Forgot to update the pom.xml
* Added CompleteChannelFutureTest"
a4edbd444e3cb1afb981eef3de5b96d7f74cff3d,"* Added SucceededChannelFutureTest
* Added FailedChannelFutureTest"
88833d9ded6949e03de3a98ccff67c67b2c6e551,"Fixed issue: NETTY-29 (ChannelBufferInputStream.readFully(byte[], int, int) should throw IndexOutOfBoundsException.)
* ChannelBufferInputstream.checkAvailable() throws IndexOutOfBoundsException instead of IllegalArgumentException now."
10bc616b4b5599becbcbcc4b76d95fb2a8a4106c,"Fixed issue: NETTY-30 (JDK Logging is slow.)
* Used logp instead of log"
e5f1639f241213d45b354753a721c1600edc1fde,"* JdkLogger passes null method name now - it's allowed in the specification explicitly.
* Better failure tracking in ServerBootStrapTest (still not sure if it's reproduceable)"
db1ee352283de31472caa2b1a7e266d2e0a13678,Can't reproduce anymore (!?)
1ae53127777ee7da5fafe466658c443b25219ebb,Fixed compilation errors in JDK 1.6 and 1.5 - was using 1.7 :-(
6801298956af84fe8d611bb9ed6d2f72e27506cc,More test coverage
8f3799c02e1026bc4f5f4bb9958fb94b57a72490,"* More tests
* Fixed bugs related with bulk byte transfer"
57551914af578f4d4615440828394b769338ce7f,"* More tests
* Fixed bulk transfer bugs in the CompositeChannelBuffer"
48929afd60aab28574b2356773ab24f80dfa193b,Fixed a bug where DuplicateChannelBufferTest doesn't test DuplicateChannelBuffer
f4165b10e907eb8c69f221a7a201f70f46ef7bfe,"Fixed issue: NETTY-31 (ChannelBuffers.equals() fails to compare the buffers with different endianness)
* Made sure to swap the order if the two buffers have different orders"
834b373a9626e558c1a554a1f3ec757c49588d0f,"Fixed issue: NETTY-31 (ChannelBuffers.equals() fails to compare the buffers with different endianness)
* Same fix to compareTo"
a57e21aee738d0d4eea7c9efced510bc6f2cd907,More test cases
3b69dd7ddb72c2708cf4ae804a8fa9afcc4a2ebc,Fixed issue: NETTY-32 (ChannelBuffer.duplicate() sometimes doesn't copy all properties)
6f34eca0b66eb42e0579674337fd46e09c14caf9,More test cases
a7c181072efaa18d12c75de7c09beca4443e6ae5,"Fixed issue: NETTY-33 (CompositeChannelBuffer.copy() does not respect the byte order.)
* More test cases.."
2878a47222e91520064c73fed7603fc744f9c268,Added author and version tags
94831112eea349d43675aa782144cbd9e5b79ff4,More test cases
98f533db965d3752732971db57f9ca5d14348322,Improved Client/ServerBootstrapTest to run with both oio and nio socket transport
deb5760801e65bb110f80a2420a373a7cfbefa21,Added a test case for ChannelBufferIndexFinder
77419346011466427d129d42127b26d00f167f4a,More test cases..
4144017b7547ed64a02426cc5cb5d88fdd632a82,"* Fixed a bug where CompositeChannelBuffer.order() returns a wrong order
* Fixed a bug where ChannelBuffer.wrappedBuffer() can generate a non-EMPTY_BUFFER when the buffer is actually empty"
c7a2e05ef23016558d7876965d8bcd5cc6bb11f8,Typo
ddbabc98ef08505146d9fde2f723621de2d0a589,Integration tests (echo test)
605ac3d35aba0cd165d9f2a34b4fb9a452eca7bb,"* Improved socket echo integration test to check the state more strictly.
* Fixed issue NETTY-35 (ChannelFuture returned by Channel.close() is not notified if SslHandler is in the pipeline.)"
7d1ec117878b63aa610410432fd713523790b0c4,"* Fixed issue: NETTY-36 DelimiterBasedFrameDecoder can choose a wrong delimiter when more than one delimiter are specified.
* A bunch of integration tests (78% test coverage)"
ec8f441ea6b62f30ef1011b91af76fff6eda3277,Improved selector loop shutdown time
ea784b00b5029a6ecce3d2358a1739115c58688e,Fixed unnecessary exception notification on AsynchronousCloseException
e03ce3e6613c8522f9af6139198647f6ff3d8486,Decreased the test loop count
506b7aeb0577238b66bef26bf068543a0d95bf59,Package renaming... (forgot to add 'codec')
07fba7f8593822dc1b18eaad98537b03c6b56be7,Suppressed unnecessary warning message .. (was not fixed in the previous fix)
921ec38d0cde165f8fb8f84c2bf601641227f5a9,Trying to avoid redundant deployment on release
02ec93b33a43d6c979e3923ff23466241788e5e1,[maven-release-plugin] prepare release netty-3.0.0.CR3
57c76d348dec3ac97afeed9a52988ea35747f583,[maven-release-plugin] prepare for next development iteration
8da05713fe08b226dbb6d1ee4bf6066954e29fce,"Fixed issue: NETTY-40 (SslHandler dead lock on Oio-Oio communication)
* More fine-grained lock acquisition"
79743b0528aab02bab662d284a37610b98e42492,Tiny micro optimization on test data generation
90e35cfc14c71d428dd1711f7d77019aff47c511,Typo
fd4de999bbe1210fc9230ac2f917ddd3416f05b9,Decreased the number of wakeup() calls even when then constraint level is greater than 0
93c1dd58ba5d5bf9f857a4d9b494406cbfce0efe,Improved NIO constraint level detection - should start up faster with Sun JVM
d2a07463ef5b2ce9be151ce1598c46c21183e366,Added SystemPropertyUtil
c0b5d93b0a68d65f1732546b73cb026593fbad46,Added system property detection for Mac OS X
243264efb0adb7e1b4924c160820843d9c188376,"NioWorker optimization
* Use of read write lock
* Split write into two versions (fair and unfair)"
b8c2051407f30cdf6cc3eed83e8025e106143e45,Added quick autodetection support for IBM JDK
7a503f15192f258e8541caf11c7f2439ffe3a9ea,"* Added support for JRockit VMs
* Fixed incorrect test result on Windows and Solaris for Sun VMs"
e11e0f7ed584fa4868ea09ee63db2048d0123605,Grammar
e5f88b536b3e1fd65ce359ed037995498e43c47e,Added missing JavaDoc for the classes in org.jboss.netty.util
781a93bd43e1f919e83c76d1ebac724a1376012d,Added missing JavaDoc for the classes in org.jboss.netty.logging
fefe10f2dd80df11240dacbaae0e99586acbecf5,JavaDoc
3e3162da1a047717cd1d31a224cf970354815fb3,Added support for IBM AIX 1.5 VM
47d141ed91c0e66326105511593b0dc1ab3cb1a3,Shortened the first statement of ChannelHandler description
4865bb7d451b923f355035b9d4005835af7d8993,JavaDoc
9cc8c284918b0cb801c391acedcb44c9f7ab4c17,JavaDoc
08e828c4fbaa5ada30aea35ee9f284e2ba10bc6e,More links to ChannelEvent and ChannelHandler in ChannelPipeline JavaDoc
f4ce86a12d6390f60924685d19125e7686d77f15,Disambiguation in ChannelPipelineCoverage
f203cf4e22e4f774e362559278d0385ea9e0ac22,More JavaDoc in the buffer package
b3c76b8cbf9e0871bf1df0ddfa4727ea5599585a,JavaDoc...
fe7e2ea4bb11a2f7075d66ba33b99736abc89156,"Typo, grammar, duplication ..."
c344058a6ff84b42721455b791549f71b88d6912,"* Interpretation -> Meaning
* Added more explanation to ChannelState"
d1be3feefc417f6ebac8f07cbf1ddb3c276db2bf,"* Fixed a problem Channel.bind/connect allows null parameter
* More JavaDoc"
ed8651701d8a694c295666820604ef441f870c08,More JavaDoc
f9778a8dad13e395a6b9beaba66b1597086b4bd1,"* Reorganized JavaDoc content
* Added more missing JavaDoc"
eef1c1d84d536b9762a3c415469f3eb2f7329be6,More cross-referencing
658b40c42e9ab53a2a26297f6a9416fab7cf5e87,"* Simpler sentences
* More cross references
* Fixed incorrect explanation related with attaching a pipeline to a channel"
cb5a3752828dcd1d591c6164b63f56104473b9a1,Shorter enum link
92ec297756b07b3e5573c45766b74271d4fb465e,Emphasis on new expressions
c05a337d7475e4a66da6563ebb339addc5a10356,Added some links into the example code
6c8acb25076048537bcb5d24aa48ba7468058cb0,More JavaDoc for Channels
82e677591c1548210e2d95d2b081bdce6f2ccc85,Fixed incorrect description
a145d578cc8b5656f7b42cd6066e23e948d0874f,common -> recommended
6c8adf3198f2669063e8bc080c5e4aef24cffe45,Added a link to ChannelConfig in Channel
a8155f6b7f2185e0da4d688038156ac1c7036927,Reordering the sections in ChannelPipeline
b88674e43730258b97d4ecb2cbd6208ed5d3ccdc,Simplified the pipeline diagram
a73cdb1a4ae2484a81529e4906c7f897877a13e6,Easier example for ChannelConfig downcasting
78075ad7fc82e6297e42217be0c7eaa9a9f1789a,Improved ChannelPipeline documentation
b06323011dea3e34ce6a900930458dd27b1c46c2,"* Added JavaDoc for Channels
* Improved the diagram in ChannelPipeline"
80d14bbb0ebf3e6a7f501ef30933ae0abeb14e48,* Improved the diagram in ChannelPipeline
b23b9dd03b0d5ca9898cc3f63cec8f849e7004a5,More explanation + more links
3e699b7f4a52aa0d51cd8978eea27c603981eab0,More JavaDoc on ChannelEvent
3e21792b12ee61b2ed3fddd4c01d29c79fa95619,Simplified a sentence in ChannelPipeline explanation
267a8cb1d7b58a1b1faf702cb2ab593e01fa4a24,Added event name column to the table in ChannelDownstreamHandler
62fc6b211e3f7342c9fb4370aa63a558e6ace58e,Added more hint to additional resources
76c9d8eb3cd53a610a7e4248dd3e53b02621f669,Rewrote the ChannelHandlerContext explanation
c2f38fb6d3299cf9c479164f6f18e1e18fee6b5d,More story in ChannelPipelineFactory
38b3f4fa9804f4ce14a92795047a16f01c4d859f,"* Added DefaultChannelPipeline.toString()
* Filled in JavaDoc for trivial methods"
6b004f861b6accb211e64a3b82cd0609fcad6c66,Filled in JavaDoc for trivial methods
bb5c59e8166a5bf8d6e5e5c9d4ba0cf1344945ad,s/propagation //
54e81bde7291fa8c073cfb301a350b18a98c0dbe,JavaDoc for channel.socket package
48497ce1fd6770013b422b754dc91d763411958f,Added proper author / version tags
fd261b1044ce0caa62aa12ca4bd2f0149158ab20,Added proper author / version tags
9e3973415eaf5aef8b3ee311c5bc696319bed604,> -> >=
7e491614cb6e0c8420840f9ac14493e3e4c80de5,Added JavaDoc for channel.socket.nio and oio
1ed7741a968003de3cf58a559cbf2acfd09d2517,Added the limitation section to oio factories
101124f8b8b32529876d967796ef26e1a03c81fa,Explicitly mentioned that the nio worker threads run in a non-blocking mode
d96b633b5f1048ca6ef9b032d956b0be77a11e66,"* Added missing constructor JavaDoc
* Fixed description of workerCount parameter"
036abda6015d1dd3724921bac69d930d70f02727,Calculated -> Obtained
97b252afe359fb93d999f13fc79c8180c5bc32ae,Added a link to ChannelEvent in Channel JavaDoc
5cde160df69171042a39aef2c45d740e6e559ad6,link -> linkplain
f86a7d224bfb39f506e71c367a80aa37a6052fa8,Added JavaDoc for FrameDecoder
a79f3ff15942069858cb63a81f78fabaa2ec3662,Extracted some important comments in the example code to a new section
26a1d6e429364575ff0f2c8bb989c8c4791b58b8,Added JavaDoc for handler.codec.frame package.
49e62cd000e6d359403a1f36201d28b568397c9c,Added JavaDoc for handler.codec.string
5a1f62f41915080686900869043751a015ec32f6,Updated the package description for handler.codec.string
f0c2c95c32bd2b6913ed523ad855a2b05554e4e4,Added JavaDoc to handler.ssl package
f744de9d851d20e5b5334bae7cb1f0b86c287e5d,"* Added JavaDoc for the handler.codec.serialization package
* Improved JavaDoc for handler.codec.string and handler.ssl"
35678cdf7337f5d240a864f2170b25398fd4c291,Added JavaDoc for handler.codec.replay
a0b75a705e4011a5c983e4ded8fe94378d23cb69,Added JavaDoc to the handler.execution package
384e08209e58d1a5a632a168448046f30cff213b,Mismatching arrow length
8b9f63e578133664df86b8a734f70fb27ec067d5,"Fixed issue: NETTY-43 (channelBound event can be fired more than once for NIO client socket)
* Fixed NioWorker.register() to check NioClientSocketChannel.boundManually flag"
f2267eb39ccff3604ddadcfafb6528e1d48198cf,Removed unnecessary warning logs related with ClientBootstrap
486eff6378c512f8f6f4c812353a9c1289bb4ee1,Suppressed a warning log caused by AbstractSocketServerBootstrapTest
1d1e88397ea4acd548fd58b28b15a0bc492e810e,Fixed a potential race condition in AbstractSocketStringEchoTest
d9a37093e2b24cd6d5dc09bde5ac596402e6226c,More test cases and trivial fixes
79499476c119e53b4b8afe0a231cafc7e1629496,"* Added ReadOnlyChannelBufferTest
* Added ReadOnlyChannelBuffer.toByteBuffers"
500f972367ef2d1d24af24a0730f68659df2432a,Missing empty line between methods
a056b9af633042738afbc06fe267f7c9e447e68b,"* Fixed randomly failing ChannelBuffers.compareTo test
* Used shutdownNow instead of shutdown to shorten the test running time
* Added a test case that checks shutdown time"
e1709c8e4bd901409f30dd2a55b4adc064b703c3,"* Added another test case that checks shutdown time
* Optimized the hex dump table generation in ChannelBuffers"
ab4d7f766066421eef7b3c6362bc59fe1fff6a74,Fixed an instruction about graceful shutdown - should use shutdownNow instead of shutdown for faster shutdown (and it's safe yet)
27cc323dcebc7b79f6498152b4a456c279c0b3c9,Made sure flushPendingEncryptedWrites are called only when necessary
ef6404ae0cdf32cb420dfa4cf493cc63b724a517,Fixed ClosedChannelException in various integration tests
6c0f7b68931b4d3efd975ec43fffcf84be508f7e,Added COPYRIGHT.txt to the JARs
5e767254eabaf5381560a8837704c071626ec072,Tabs to spaces
b8c14720034d905c81c6675aa61874262c22d992,Cosmetic changes related with apiviz
08f006c764120dc6215986b1579482e55eea1de7,Cosmetic changes related with apiviz
985d260c8b518b9633601d20c0e5290716a2428d,Cosmetic changes related with apiviz
b7e9fa38ece29766b12062dc87dc5ee9cadba7df,Upgraded to APIviz 1.2.0.GA
33a4a9f8e17e736f82c0a7d8fb0f303b3468db51,It's more correct to remove the connector handler in ClientBootstrap
e34d49449664a2a35da20d0e111c8f9c050a9938,Fixed a bug where AbstractChannelBuffer.writeBytes() decreases the writerIndex when the specified channel is closed.
beb0fb0d6f486f155d6de579194f41928cd621d1,"* Added DummyHandler for testing
* Suppressed unnecessary warning messages"
d39fd30f098e4d7f051c5791afc47886d9f59416,Suppressed more warnings
482e2c46ee5607020393c24afe5a892297128122,Upgraded to APIviz 1.2.1.GA
57bd9373b21a7be702b1ed3cd90406d9f62240e9,Upgraded to APIviz 1.2.2.GA
e57cf78af2a5e2dd90f99651769724c53f98f94a,Specified the sourceclasspath option explicitly
1a196f3cc60c5228ed4e60b41fcd2cc05e1e37a9,Added svn:externals that checks out docbook-support
a94661c2fcbf7dad2070910eed1432089ef23b52,Added a skeletal docbook generation
5b08a8c2b55678ec9884534297e0602a9512c85e,Fixed a problem where tarball doesn't include a guide
20718a2b6407adaec6ff87365426e19fa6147731,Fixed indentation
084efdde6de434092d20f22dc7f50af8850bf007,Resurrected lost comments and section ordering caused by Q4E
3a991d33d8d9c5437f2061e3fc1eef563ca32bb5,Upgraded to APIviz 1.2.3.GA
20bbd3e38f74ad1d719d08d1eda946f91b99cec7,Workaround for blocking I/O transport write-write dead lock
9d4e51c7e0d0ffeefcd1d99e5e9c342ea368b9f4,shutdown() should be OK too
b14b4c8714702ea09e8bbb44ad290bf358fa7ee2,Incorrect option name
77b23c97e24733fc6db0c8df55c2d5297dc1e4ac,Preparing to write some real guide ...
794bd98ae63fa0d360c45c0e0ba803eab5352a7a,Updated dtd definition
107937d5ae566cee7deaae562ea5873c6d950bac,Fixed typo
caa5c34cbef91fe378c479bd796cd5747f1e5d82,"* Proper DTD declaration
* Use of XInclude
* Fixed incorrect document version"
989674fac9cc6cc77b4cde5a920a3deb7027f7a5,"* More compact distribution files
* JavaDoc is not deployed anymore (major bandwidth / space hog)
* Renamed docbook/image to docbook/images to avoid having to image directories"
38b4da7f3be6d659ec5133b91442200a3d4c8695,"* Added cross reference to the distribution
* Tarball and zip distribution are not attached to save deployment time"
3759a9b0d61504f8156da3c8725e9876187f0280,A little bit of comments on how version.txt is generated
a668e5066a5e5f627afe4fb27ca8d57027fee122,"* Added 'State Management' chapter (just a placeholder for now)
* Wrote the preface"
0caeb69ae6bc0fca2220ed63607eeff98dfea3c8,Added a link to the project
d52b238d6260382d650ae8afcdac49f825d60a7c,"* Fixed issue: NETTY-46 Excessive exception creation overhead when there are many pending write requests in a closed channel
  * Added NioWorker.cleanUpWriteBuffer()
* Fixed issue: NETTY-47 Channel is not closed immediately when write operation fails due to closure.
  * Made sure to call NioWorker.close() in NioWorker.write(Un)Fair() and to call NioWorker.cleanUpWriteBuffer() in NioWorker.close();"
ac5a2a2f03490ae119271dbe45873072202d667b,Renamed introduction to getting started
b571bdc0e2cc31e7bdc7fef4ea9648f9b33329b5,"* Updated to the latest version of jdocbook plugin and jbossorg styles
* Writing the getting started chapter..."
032226521dc7af4f28a746cdbe3b11d81112e406,Fixed incorrect docbook location
0547b35559846247f9cb550e9fbfb8fff6553f07,Defined four entities related with Netty
3c0d4a5c400b8f8f90a61fea0f7abc0b9f9aec92,"* Extracted common entities into custom.dtd
* Keep writing the getting started chapter"
6e696ffc518b23a2c60b60c5dc1dd6e052753081,* Added more shortcut entities
0f3edc8cd8ef10e1afddfc996848677a00be962f,Fixed cosmetic errors by overriding the default stylesheets
ea7c7e769cce94cf44e2b95da36171ce672be169,"* Replaced callout-bug with simple co tags
* Stylesheet update"
bacabc9a123355081f48ae60cda4f238488602e9,"* Reformatted XSL files
* A little bit of tweaking in PDF stylesheet"
da8fa65aca5669e6e6a56e1ef312569a7a017e39,More tweak for PDF guide
d3f24589a40bf38e79deefe289a8dc6845ed7017,"* Fixed too frequent plugin update
* Keep writing the guide..."
8d8c7c02274cf87c4d6592a2374b17ce5bb02d80,"* Updated PDF XSL
* proven approach for -> proven approach to
* Keep writing the guide..."
f206c5359bd255405f314b0d6a73774d1ecebb09,Finished the first chapter
95a5af17071cf6e4735a4356c8a2a71a0ac2c448,Slight rephrasing
a85c3688a82539d17e7498213d17a39553fbce5d,Another rephrasing
45b6c74b84f876c8fedd9a7a24e103d969ec85e4,Another rephrasing
7f8def862ac6c0dec2a8d3f4cec98fe2494021dc,[maven-release-plugin] prepare release netty-3.0.0.CR4
c8ff6718677c92d3bc20dc9e81dcad82c4411db3,[maven-release-plugin] prepare for next development iteration
8c2f314154a1633b76271b484e6979eb33d11115,Better explanation of what Netty is
48bf1d543ac40f2c5d4d79bc14e1f35e7479b6b1,Better description
705d4f183c29f14ff96949835797e923bfd48380,Excluded unwritten chapters temporarilly
891751b396d3099cf8b861d5a40cb4b817b006e5,Updated XSLT to make the documentation point the correct URL
880a093c9f80d417cd320077e83136236e247ffb,Added the architecture diagram
ec06cbf57a50227d6f5c8931d53e55bf3bd8bbc7,Made the diagram more compact
6a759f0c63e4a632edde2cec3d6df123e8b6ce9c,"Fixed grammar, typo, and brevity in Javadoc comments"
aaa6efcda4e3feabe0e9f5dd9025f4b815565062,Fires -> Sends
008f7c394ef2a0f267bf43b6d4906e07b8cbaa9e,Added the PNG version of the architecture diagram
0b8687cdeb2c00205d1a6670b185a3c3e80d95a7,More explanation on the characteristics of bootstraps
60eec52dabbc2093d530a2c57b4bc1d210e786a2,Typo
92be78df4934f42cf2576e6ea12f2322c47cbc07,Rephrased the description of ChannelHandlerContext
320b7133a2c3eb49cec2a1e95c190feeffe49a51,More clarification on ChannelHandlerContext
d0d99ff6bc8f93831ac28ed1e4f5a9571086f57a,More detailed explanation on ChannelFuture
274fa4aac58eb48c20f1bfc712107bafe90444c2,A little bit of duplication to help understanding of asynchronous operation
87390319c89be93b9b9f1087c0dd8901ca521e1c,Added the list of available options
9c0b5d194966fc7d7429739eb5ef21f2932f68fd,Better table L&F
bc60f01b582c22057e8287e12f344d17fa9a94ac,section -> chapter
33c19323532658941862665d9c12bcd6153e9a48,Dunno why but SocketChannel.accept() sometimes returns null.
e1f4053d41164429df037a751a27388555b7c530,At last but not least
824e0034c48d9afcc9cce69924a0bebdb46fce31,A little bit of optimization
ebdcb21421b10b55875f5ddc5ae8d0e680775f22,Made sure StackTraceSimplifier is always loaded
5f1ecc9022cd62d64cc715d25b8fe714ed43d7f4,Fixed throughput issue when messages are written from different threads than I/O worker threads
9f5468f7a717a145efc757f2394d6255b4c51c86,Made sure NioWorker.taskQueue doesn't contain the same WriteTask
22d79a501d85a1a0d6e22859c335fa09c0a11c9b,Replaced ConcurrentLinkedQueue with LinkedBlockingQueue in NioSocketChannel
0241120ace01c73d18b441a91945b7abed39eebd,Optimization.. (reduced volatiles)
39086edae6afa6da9f45af9e894adfd4ab0b2f7e,Introduced an intermediary write buffer to reduce the contention
362ecf640bf449334ccda8361776045e08e8860f,Fixed a bug where DiscardClient didn't work since the last optimization
90ea9aa047cc3224ab574e042459a9fa6254bc73,Formatting
f2c1734636b2efb2c77ae91bdb63c43ea13fe4d6,Reduced contention between I/O thread and writer
a0d132a4d8a3ce3435270eb745cf3cb1639c3fa4,Moved WriteMessageQueue to the util package
b64124efd6aaadb7bea478d8dcb74af26cf9ebea,"* Renamed WriteMessageQueue to FastQueue, made it generic and optimized it
* Added ConcurrentFastQueue (proof of concept yet - slow)"
5170838e795e008330966030b584a9b2b12d5c62,Added direct buffer support (disabled by default and can't be enabled without recompilation for now - should be fixed in 3.1.)
6611563c8c350815dab782229f82ebccccdcd264,Fixed a race condition in FastQueue
597cbd870c994bf868bfb6b44903d1716c8cc174,Isolated unchecked cast warning from FastQueue.poll()
40b1f26c34b3520778f95ca28e024d75bed0ecae,Made sure all segments are evaluated on poll for potentially better throughput (still proof-of-concept - getting better)
4d17db6eb1569709c81529b54adc2ffe65e53157,Using LinkedList seems to yield same or better performance
dccc9f86652e32f7bd36e2888edce53534d0280f,"* Improved the throughput of the server-side accept operation
* Added FastQueue.isEmpty()"
8fb2f7c7891baad75b9ada315484372264351128,It's actually enough with a simple shutdown lock because we have only one acceptor thread.
d7c53437e90f27639fe2e69838d8c45964e04c80,Fixed errors in JavaDoc about OIO-based transport shutdown
50f043fa3eb1266df9c80d211c3064b5f081110d,"Fixed issue NETTY-50 (Dead lock in MemoryAwareThreadPoolExecutor)
* Fixed incorrect release condition"
6f18c940dd255419893a99cdc26f2df09201f533,"Fixed issue NETTY-50 (Dead lock in MemoryAwareThreadPoolExecutor)
* Made sure that the max memory size properties become immutable"
8c15102bc34a454da8ab421a430715f4c90fe3ad,Fixed issue NETTY-51 (MemoryAwareThreadPoolExecutor and its subtypes should use long instead of int to store the counters)
85dc8f93f568a62fb8e7506d6acf4418441ad27e,Fixed a bug where per-channel memory limitation didn't work correctly
7de92967c2a3f924b4bff16b0d51d9b9aa1ad58c,Made MemoryAwareThreadPoolExecutor.shouldCount() extensible
950a386d3f1bd884350ffe27dd0cd47255c4c409,Code cleanup
0831b3209001e28438589297320a8c27086cbf91,Decreased the default maximum receive buffer size to 64KiB - it's enough for more cases.
44c409ca24bdb1721747686525ed08df7588b5d5,More accurate default receive buffer size predictor implementation
2f4e20ce7afb4da2bdc53c08630cce9cae8e26e9,Made more generic
6d372c367b400be5455744e184eb3858e5048781,Added LinkedTransferQueue
dae3b05ebb6c5ebd188c2dcb5d485967504c0900,Replaced FastQueue with LinkedTransferQueue
731ab2a0eb933208202c73056d24824e9d4038e5,Updated copyright information
cfa679429232bf4d049269467949246315e32f47,Potential fix for NETTY-52 (IllegalArgumentException when trying to change the current interestOps)
8d5d8fd1724d0d02c084658e7cf2bcaf0a7dfeb8,Fixed another race condition which occurs when OP_WRITE and OP_READ flags are set/cleared at the same time
4376cd5a913798e539696b1dc61d556a4569fccc,"Fixed a bug: NETTY-53 (ClassNotFoundException when an ObjectDecoder with no ClassLoader specified tries to decode an object.)
* Explicitly acquired the current thread's context class loader if a user specified no or null class loader."
6c2230aac25d42fa6a7398ca826fd648ed2a4f67,Swallow AsynchronousCloseException
da04e2cae996492d112cc60ded80d19e07674f42,"Fixed issue: NETTY-54 (Improve SimpleChannelHandler to implement ChannelDownstreamHandler)
Fixed issue: NETTY-55 (Channel.unbind() method is missing.)"
ca1f11ff67c67077b186b55d2a1fb88d0fa61feb,Forgot to add the 'throws' clause
5120c1172c749591a674ecec74d791997007273d,Simplfied the factorial example using the new SimpleChannelHandler
b6d9755ba561e8a89bfceb21dab45a75a70a9dd6,Updated the getting started guide which is simpler thanks to the recent changes in SimpleChannelHandler
8f9769f8e9bb3a6ef00d9f2f00210be0c0dec11c,Removed unnecessary links
b378c083ec730eba0b3068f521081ae8f7bde305,A little bit of rephrasing
dddf14f79afac0e0083809c17b64112238f4e8d3,Fixed a bug: NETTY-56 (The ChannFuture returned by SslHandler.handshake() is not completed when the associated Channel is closed during handshake.)
29ad164e5c17527188b3b795866075db0972348a,[maven-release-plugin] prepare release netty-3.0.0.CR5
7a004aa4210fdd223d228f93de71575b6619744b,[maven-release-plugin] prepare for next development iteration
87b4f886a67e0a80a031802e3d2f1d726ae24927,Code cleanup
d3f41232f9ce98023d5c84cd04bf1e80e097788c,Upgraded to APIviz 1.2.4.GA
0a149027e672352839e39cb5225a34c73ced539b,[maven-release-plugin] prepare release netty-3.0.0.GA
4a8bd6a1e9e35126e6b704afed4c5f9cb0cd03ea,[maven-release-plugin] prepare for next development iteration
b15fe51e958c7ab311920856a89717a5dacee052,RegisterTask should be a static class.
486218ab2843547da8962810a5dbf9bffbf789cd,Potential fix for NPE during SocketChannel.register(..)
7f1ff668f760ab2a3977abee2847296baee0c5ea,Fixed a bug where NioWorker.register() hangs up with high CPU consumption when it failed to open a selector.
00ec5be6ddca2985dce561ae8ce9a8fd1cbb94cd,Fixed a bug where NioWorker.register() hangs up with high CPU consumption when it failed to open a selector.
59abaa1657e8fb0c1b0e50d79397d731574075c3,Tiny code cleanup
85e63a2c98884bbaee249b010bdb7e036439c149,Potential fix for NPE during SocketChannel.register(..)
22f33539c1f977d098d24bc7c978bdb1c5691d99,Fixed a problem where NPE is thrown when NioWorker.write() is called too early
7db3eacbb4f22b1eed1a2ad4a577a20412a602cd,Potential fix for OIO-OIO SSL echo test
79fe2324c9167a74df45be5c254b2e254b265962,Fixed RejectedExecutionException in the OIO-OIO SSL echo test
ea1a68cb8334ed8ede2c13d9aa2e44cf15d452f4,Made sure that NioWorker.wakenUp is set to true only when its selector is really waken up
b50cc2b025cdf72de1a25506f748c5fc4b448d75,Removed an unused import
3a2a7a3a3c3584c9bbd20f892e4ab666a29f4820,Made sure NioWorker.cleanUpWriteBuffer() is called even if the worker thread is not running.
33187d0285e1c48f1fb4953f1199a53e123da6a6,Fixed issue: NETTY-62 ChannelBuffers.EMPTY_BUFFER is not final
d8cd49c1b725a5e0a9355a25d6fa7ce887774138,Fixed a warning reported by FindBugs in CompositeChannelBuffer
9d350888019dce40a37c4723600a94a2a06da6ef,& -> &&
81d29bafc29049f5f5094ac6cd553eef60b5dee6,Fixed warnings reported by FindBugs
34b9b00723765dab8ed6cf50137931be13dd19c9,"Fixed a potential concurrency issue in DefaultChannelFuture.notifyListeners(), as advised by FindBugs"
f73de01a687c0848d4175565a3a29cf9aad5de90,Doesn't need to reject ReplayingDecoderBuffer.equals()
cee920f3b818957d3425e4afe11517da9418cb29,Workaround for the bogus FindBugs warning in ReplayingDecoderBuffer
7fe42c4c4ff70b1732799589a177fdda5deeb497,Increased test timeout to avoid Hudson false alarm
de2ff34dc2937d476b1fdf0126aacf2ebf2808a5,Replaced System.currentTimeMillis() with System.nanoTime()
b8af182e8c75ab781a39833d10ec231bb26ed3a2,Fixed issue: NETTY-64  Duplicate Channel IDs are generated.
87dd4adbc723c4dc53a65b7dba1fd582718bedd4,Adjusted regression test duration
fcc0087eb28661d928e02198d461d34a7b66fc05,Reverted temporary code which was mistakenly checked in
288c693f62549de9d7144c8482a8fa6bad7a9f89,Code cleanup
14a49ed04286cb325f9a21ac9b9514001a80e8f7,Made NIO constraint detector much more robust against indefinite blocking by enabling timeout (7 secs)
0976673ac23e1978a8bbdf5e6b960f41d950e5fc,Potention fix for NPE in NioWorker.RegisterTask.run()
cd3acef9e12dcf03f1ddabb1e36977a080cbaab7,Potention fix for NPE in NioWorker.RegisterTask.run()
9aed1addb18430e64b11afdf541013e0ab955890,Potential fix for NPE in NioWorker.RegisterTask.run()
c5a211e07a648cf3e822e8e9afc5fa61a5e84d69,Used ExpectedError instead of Exception to tell that the failure is expected obviously
59e15efbbeb7f3aac7d96a05eb5ac701d9093be5,Simplified NioWorker.register() - it was too complex
dc350cb7c78c6fe400fdd97935d416ca12b00e19,Will release 3.0.1.GA first and then 3.1.0.Alpha1
58e727f238e7373add60772e6c2824e7d2a96268,Typo
12d653551a8eeca23ec43e9a081e8150bcd981ea,[maven-release-plugin] prepare release netty-3.0.1.GA
92bbc4acec49d5805ed86ce894e7b90d6966aa64,[maven-release-plugin] prepare for next development iteration
b876bd8cec3d6f403a577e0094e992b8ab0a9687,Added a potential fix for infinite loop in LinkedTransferQueue.clean()
8b3956b238ab16bee6174f42a54d5c7b85954ed0,Typo in StringDecoder Javadoc
3d837680392d70329d43e93bbd03ade4d24ac020,Documentation cleanup
927aaf8d1241ef916429d14024e8efb465239bf8,Documentation cleanup
09ef8e8964b0232403c38f6ec3f524eaed32382d,Comment clean up as advised
712358103878c5244c68bda4c10e85a265b2bce6,Comment clean up as advised
3b5c36782daf2a49dc21d3aa3d39a6d37f02b319,"Fixed issue: NETTY-64 (Dead lock during SSL handshake)
* Acquired handshakeLock explicitly when sending handshake messages and executing delegated tasks"
90045fd487e4e81b2a6312cbd811b2a3404435e9,Reverted my patch and applied Doug Lea's patch
c0a3f3383b6ee815c9b33993aa853b6fe9c88b20,Removed an unused static final field
7896ec05f6b7451ed3e019611157bcc6bc228b47,"Fixed issue: NETTY-66 (MapUtil.isOrderedMap() blocks for a long time on a certain platform.)
* Replaced random number generation with a pre-populated sample table"
b3f39c1bb3057f0a18ea5b019dd24c4965b0947e,Additional debug information in AbstractSocketSslEchoTest
c848b8cc582756a8d023b958439d9adb1079cb13,Fixed incorrect timing test due to slow MD5 algorithm initialization
834277a9ebaec7e53e85e7c37888891d1199d020,Potential fix for intermittent SSL test failures
ea94ea850bb4eb236ef85aea6512f0940877eebe,Fixed a problem where not all exceptions are logged immediately in AbstractSocketSslEchoTest
b29b5a8289a35fb6846e53f2a38b611f9d3b9e1a,"* Reverted previous SslHandler fix that doesn't work
* More strict handshake status check"
4cd9105eeb120890d51d05f015feb5ac6bc7aaae,Made sure all exceptions are printed (2nd try)
9aec8119cbf8bd2a185277534aacb9d9fc7e5a65,Used logger instead of syserr
630473bf84ba548456c92b8a8cd7c0e2f534425e,Fixed issue: NETTY-67 (ChannelBuffer.writeBytes() and setBytes() should not throw ClosedChannelException)
72ab3f04b05b56b710623327908d1ca53de9c620,"* Removed output to stderr
* Made sure SSLEngine is cleaned up when a handler in the downstream raises an exception."
333f45ccd5f65bf64aa6e52dfa0ed080cfd17486,Made sure events are propagated somehow.
dce019966ece078e11da357f0d3019d417fdb53d,A workaround for 'missing algorithm' error during handshake
62ed58a2be1c92bb5d56e910a8a36387eb454e6e,Made sure unwrap is called for all NEED_UNWRAP handshake status
5df6229d2aae5ec20c7380249e722de18c5a12e9,A workaround for 'missing algorithm' error during handshake
feac0d6a3da6c3ee27ae83d31aa320d3ed3da5f6,Fixed a problem where AbstractSocketSslEchoTest doesn't close all channels when handshake fails.
0e3679e919ff6b8eb25e87486f5b2c1143d8462b,Fixed a problem where AbstractSocketSslEchoTest doesn't close all channels when a connection attempt fails.
d0964a4b46ecbd6146ce56c04a0384d8bf0974d0,Additional synchronization condition to avoid 'missing algorithm' error
87cd22b5fd563f8367156b6709d1995297bd169f,More synchronization to avoid 'missing algorithm' error (not sure ..)
580f6f22847c8fb96e70a1be7313e476e7a14527,"* Another workaround for 'missing algorithm' error in SSLEngine
* Made handshaking non-volatile"
57b2d9a443d52a20777d92998af81f25281010c4,"Fixed issue: NETTY-65 (Intermittent high CPU consumption in LinkedTransferQueue)
* Applied the latest upstream fix"
4df4b6517da13a126fd8000d489c44bd9eb9371c,[maven-release-plugin] prepare release netty-3.0.2.GA
e29ba2eed5d4ce1671abf5fa112bafae4f7438b9,[maven-release-plugin] prepare for next development iteration
4ac032c65752d1822ab8e15551a032f05286aece,Merged the HTTP branch into the trunk
c6ce2c3984a22a70e2c8a5afefdaa2c5bba6a5b3,Fixed the issues that FindBugs raised
678137b638cd84ab303c4db22991e273b4ba9618,Removed a TODO mark which is not going to be fixed (it just works and is not reusable at this moment.)
70151828dcccb5d9923e274195959ee03319a85c,Resolved issue: NETTY-68 (Make MemoryAwareThreadPoolExecutor.objectSizeEstimator property mutable)
8ac3b2905df3cddb36d6f76227bfa959692116e8,StringBuffer -> StringBuilder
c979563dcd64507e92ee2a9a86def61918a4c7c9,Trying to figure out who is failing NioServerSocketShutdownTimeTest ..
5c494dd045fadea588359c7a1d79663dead3ee08,More precise shutdown time test
be88a53b3bfadaaf216502cc62eb57d30817cd14,Replaced HttpClient example with more generic wget style one
2b0ee3862f9eb3efb24e4b1d00620e9281fd5d2d,Renamed HttpWebserverClient to HttpClient
1ff2b7bbc944eb76a2780f4555fb66f00f5bf291,FIXMEs in HTTP QueryStringEncoder/Decoder
796238d929c0388e385e483929715c48d4c417b8,"* Renamed HttpVersion.getProtocol() to decode()
* A little bit of code clean up"
09e8a73bf2bd14dd09cac7fe128dbd9461274650,Removed unimplemented method (I think whether to keep-alive or not should be determined in the higher level)
6947ba086306c7b48dea4eaa1de284802638c780,Added package-info.java for the http package
6e40f62574eb8d7fcf3d3e316de94fd466ec8858,"* Added Channel.getCloseFuture()
* Changed ChannelFuture.setSuccess() and setFailure() to return a boolean value"
0886c11645c25ab750cebcfd4d9ee068eea53ed3,More Javadoc on the return value of ChannelFuture.setSuccess and setFailure
5a4e0e4d47838f7df8c31b0df354a99069a157bb,"Resolved NETTY-82 (Provide a convenient way to shut down a service)
* Added ChannelFactoryResource
* Added ChannelFactory.getExternalResource()
* Updated all client examples to use getExternalResource().release()"
96c98f636ab0afff7b1ff1c639165789da88a33a,Simplified some test code using ChannelFactoryResource.release()
0b9b2aca0bcfe80d313b2f04efc1710b11732927,Excluded ChannelFactoryExecutorResource from the diagram
6df482b0749ca93b86a9b82779c4276b56ef1f63,Added documentation to-dos
78f86b2d3a2a3c9196a0a8ad30981dbdb26639d7,Added documentation to-dos
fa7ebe2cce81c2a635ef17a36f286586b1e53ce2,[maven-release-plugin] prepare release netty-3.1.0.ALPHA1
9645ccb69e8245bed880d932f0a721977810f847,[maven-release-plugin] prepare for next development iteration
7a8754302089c3996b8d43dbfbe01d1f5bf29ac8,3.0 -> 3.1
00fbf2a2f34469884597c8eee6e8a94edb930f2a,Resource should be released in HttpClient example
e7d5048440899e6f3f1d5814f0076c24a7ab0423,Fixed svn properties
044fd23b0ba34bf06c7a178e5387184e4c41e8df,Fixed a bug where channelUnbound/channelDisconnected/channelClosed event is sometimes not fired
18ac6f925f0e577794cccdee2746963e92a4d59e,Fixed test failure
893cab5ce84ea05f92315ab59d29a6b87d6dd7ad,Initial implementation of high/low water mark based write overflow prevention mechanism
e0e282770f1ccf49367efd9fe003193ea630f062,Code cleanup
70b87f84dfbfe710a2171bc4e2270f9f553d559c,Elegant shutdown for DiscardClient
38943f3d231caac2d3e4bac36160c693029bd854,Code cleanup
4e7852e29e602e6f5a2c6ded1213ee92814ad9cf,Fixed stack overflow error
3e09a4ee604029ee796f6102cf65004b052d0f9c,allowed low water mark to be same with high water mark
0830444fc869fac107349ab4404f6ab6a2baf815,Resolved issue: NETTY-84 Replace ChannelFactory.getExternalResource() with ChannelFactory.releaseExternalResources()
440fdc4e7fe0e6ca888749b7bf482e25d6c4b5a0,Graceful shutdown for EchoClient
27cd263b6aab93d3d5882bf1a46126b2fe3eec81,Improved Javadoc for ReplayingDecoder as requested
1b2dfc1dd599080cbbf5ee47f9deecd8d4c1b8b0,Fixed typo and ambiguous expression
d20d338a3a3a9323330100a5e913e76ed3217514,Clarification on the overhead of throwing an error
aab28d36d92049d2edf1d71663d793bf298142ed,"* Added ConcurrentReferenceHashMap (will be used to implement NETTY-85 Global Channel registry)
* Updated copyright notice"
d4348ab4d75c2db7befbe59b050a98f8a70a27fd,Fixed NETTY-86 (HttpResponseDecoder decodes the initial line incorrectly.)
7b69bf371bcd0569f4c1c631f451c3201d750702,ReplayingDecoder should not complain when the state has been changed
e213b54b71921c658aafbf631a1cfd154beea72a,Fixed a problem where HttpMessageDecoder doesn't finish decoding immediately when content-length is 0 (or there's no content)
d95f4efc4dc208b0250e73cdafb9d0111220e6d9,Updated diagram
2d92771ae6bf9f4cb89d8b723d9b6b1a0b898ff3,Resolved NETTY-88 (Change the HTTP codec to use String instead of URI)
7d37a2f78b9b880c950adb1a4f3cd62579a19bd3,Added QueryStringEncoder.toString()
22b23938b8f3d29b172974045695d65efe02e73e,Channel should implement Comparable<Channel>
722458ef343bc59fa404d88b7a72d5bc373cea8b,"Resolved issue: NETTY-85 (Global Channel registry)
* Initial implementation"
00c7fe36f45f91f0d25f7160ad359e1e0d62d168,Tiny cleanup
969effde28fc614270ce2d1b1bbaf8605cd80ea7,Strict check
ec33095eb71f3c5e3ae1f1324844c0157e125364,Added package-info for the group package
5bed9f4bc4ac77bd508842249efc3d1bba3ba136,Added HttpMessage.removeHeader()
e8b1a2862e0760aeddf6b0953ca9e186bae8712a,Added get/setState() to ReplayingDecoder
49a0b8dbdbe81c0fff74217fa3a08a59d6f39486,Resolved issue: NETTY-90 (Add life cycle listener methods to ChannelHandler)
b97a26d17601cd97cb71f8230b4a3338c6249b98,Fixed a silly bug in ChannelGroupFactory.getGroup()
271c41d7322c2f62a42a839730641b255f91aadf,"Resolved issue: NETTY-93 (ChannelLocal (as a counterpart of ThreadLocal))
* Added ChannelLocal
* Added ConcurrentWeakHashMap"
05b326a6e60722eddec22de5681de4cbb2760767,Added ChannelLocal.<init>
493aad614dc0528baffc914856bf3d8861daa304,Added ServerChannel tag interface
e5c42ba3f19990b0982c17292ae302d39404ebed,Made sure DefaultChannelGroup performs blocking I/O operations on server channels before performing non-blocking I/O operations on non-server channels.
f6b23a000b5dfc18dbb6b45c99230446e9dd02c2,Added ChannelPipeline.isAttached()
bb137dd5eccc474790d43e1abbf8380b56a44cbc,Made sure life cycle handlers are called only when the pipeline is attached to a channel
d1f0d7fb5e5acc10395417657b084218350d4bc0,One condition is enough to check if a pipeline is attached or not
a0a713309ecc9fc04912f456b030080d8b1e54a6,Explicitly documented the case where life cycler handlers are not called.
c15d930bef281716b759c292fba5ed85ae7e7607,is -> has been
40ebf2b710214ee7343c195389739cc0945e8d83,Added the initial implementation of codec embedder
017dfff5273a2a37eca36f0c6e91a56fdc3a9e4b,Fixed incorrect conditional statements
f04d8ae99ad443cfa708b1a60f385a795b00f364,Made a serious design mistake - rewrote partially
2bf7467726fa246466dd331742c5209167bbe869,Fixed a bug where decoder embedder doesn't work
e6594822158cfe795739e0928c1d5a0efcbf1306,"* Code clean up
* Codec embedded now supports multiple handler combinations"
cd3c0d25c8b8f825bca09bab2fd87f143b1cf581,Added ChannelHandlerContext.getChannel()
144c6d3da790bf9433f26da7ccf4174c25c542a1,Added the group package to Misc Javadoc group
deb8f2b4c04d5eca20809431bf8520e9106ba17b,Made AbstractCodecEmbedder public
748c169ee2efd834b70e52e53728564621e3bfdc,"Fixed pom error
Added APIviz markups"
a30c36d8e2ae7ad3ea5d7577c2c1e806e24ad560,"* APIviz tagging
* Added missing @version tags"
a1bac0c843cc9ea5acae720418d19ecd9e4a966b,APIviz tagging
4691c5e2403b0cdd0394a267935013c62e5afe76,Moved org.jboss.netty.group to Bootstrapping utilities group
10cc5c6384f683c51c7f97aef0c178bf59bb5735,"* Upgraded APIviz 1.2.5.GA
* Replaced the package diagram with the overview.html"
5512550389894abae7806ae068c22d8d4fba1ac9,[maven-release-plugin] prepare release netty-3.1.0.ALPHA2
f183b3d9655d028d1c3c9fd15a74c58fe2dcbd25,[maven-release-plugin] prepare for next development iteration
cd5f5732a246ecd13ad1280fbf3b5fe4b7122217,"Added HttpMessage.setHeader(String, String)"
5b69f0f5acaab837fe5cff819f7161f8e3496218,Made HttpVersion extensible
48c28185a3685441d0aaeb131728083fa548389f,Removed broken Javadoc tags
5075ac9d3a636d25b62694e4730a876a301a3b8c,Optimized imports in HttpVersion
978bc83730b0989a4c2f5f07907b6c3b01e1b9e8,Made HttpMethod extensible
df2f9d9d50510eeffdc1e29fce74172edd2beef5,Removed System.out.printlns
549145687e2d5f1b5a3e4f536849082cf85e274b,Fixed a problem where AbstractChannelBuffer.readBytes(int) does not respect the endianness of the original buffer
414e02cb3e01ea90bc1dd46bfbbfaba785ca1b37,Fixed a problem where ReplayingDecoderBuffer.readBytes/readSlice() and AbstractChannelBuffer.readSlice() doesn't work properly.
f7e7d8f52417eac4b379df67daaa925de9a91c97,Workaround for NPE on ExecutorService.shutdownNow()
43de025c7c9ecbd242ab06b046b7c7d9aa426c00,More accurate client shutdown time test
fe98713cba04ee76bed85564694d00b631aa68af,"* Added ChannelBufferFactory and its implementations
* Made sure ChannelBuffer implementations respect the associated ChannelBufferFactory"
799a95774cb30225ba069e43d472f44cc60991ff,Added another fixme
22b3885fe58b5a6055fac98b17f422a769b7c259,Automatic code cleanup
1fa791c4a41689a72a2c7bb9dbfad631a19cc366,Made sure all out-of-the-box encoders and decoders respect the ChannelBufferFactory configuration
95d3b145e20dd40b28024510860cbb813bd3022f,Deprecated receive size predictor
6e08f035892b67153cea7c536a9611a9b2be794a,endianness -> defaultEndianness
18e745e2a17526e13481793f50881cfe2e59262d,buffer.discardReadBytes() should not be called too often
7cbd2a272e61379399e88c2e722645c16f82c245,Small comment
cd24a10d2045399e14f09124acf7a5604bc5d51c,"* Added FIXME
* Fixed potential selection key leak"
f7ebba7ce47819d222cf4cb66e65458a7ac3eb9d,Removed unnecessary duplicate cancellation
f2807aaf510daa761043b2b02a55fde26f9f6fa7,Changed the interruption interval of ExecutorShutdownUtil just in case the I/O thread is not interrupted on time (this sometimes happens on IBM JDK)
878eda0d26f0272e2502bca479d45dd32fa3e760,Fixed an infinite loop in NioClientSocketPipelineSink.register() when Selector fails to open
afe9c3c57795bcf001970182a5c7bb4a0b5feff8,Fixed a findbugs warning
6329cbe94080df5e72a398e61b3733a026be8390,Fixed some findbugs warnings
891821788a2e5626005bbf4588cc8ba7316c816f,Removed OP_WRITE event which is fired when a connection is closed - totally unnecessary not that we use different write prevention mechanism
5eec9ac58cb4f2fe2518ef21b07845c7cf4c7b99,Fixed a silly mistake - LifeCycleAwareChannelHandler should implement ChannelHandler instead of ChannelHandlerContext
f5fb85a0afc2b1dcaeaaf64e734f921bf9b725f9,"* Fixed compilation errors
* Made sure cumulative buffers are initialized as early as possible"
7fddc9ddfa7c90def211eaa3ce7930b2b350891c,"* Added OneToOneEncoder and OneToOneDecoder
  * Removed most duplicate code by extending them"
49fb59fe32677a1d40c4f787f392c71b14d9f53a,StringDecoder.decode() should be protected
f996be932a5a80861493c8b1cced3d360d48cd39,Updated Javadoc
c3e72364cee2bd8d6d24eedb098622ae9fdf6a2b,"Resolved issue: NETTY-94 (Base64 codec)
* Added org.jboss.netty.handler.codec.base64"
6602f1332959d916738587983dcfb0b733d28dea,Fixed a bug where DefaultChannelGroupFuture is never completed when the specified future map is empty
c42494b252b7765341bc808793f7ed29560efe23,Updated the license information
b368d097856a47d859557ac73a5dc0665559ca13,Typo
2f1f190e92009aa4be105c05337db0aa34bd7940,Explicitly specified minimum LGPL version in COPYRIGHT.txt
2cc2124653dce4e9cd688a6c441b3391478f14a4,Added missing SVN properties
afcd2b83154828878a6c2a13a6b3c53f4f10d5a4,"Resolved issue: NETTY-95 Length-prefixed frame decoder
* Added LengthFieldBasedFrameDecoder
* Added CorruptedFrameException"
051a6d0a07ab0f55fa47052c4d03ed15a501ba8c,"* Modified Base64 to use ChannelBuffer instead of byte[] in most cases
* Added a bunch of overloaded methods to Base64"
ac82b9fe0b5141c44c6db8d2da645ab918eda69f,Inserted an empty line
54828269e48adfb0f5917eb66c1d319c1ffdc3da,grammar
5d7ec6134637a049fe0bbd3cb287c1788af23e08,"Resolved issue: NETTY-97 Google Protocol Buffer codec
* Added ProtobufEncoder and ProtobufDecoder
* TODO: Need to write an example"
2e6b091ce9bf49436b9eb993da275dbc02e16d11,Updated license information
026fc520bb773c7a5db2809aa410c70a616ec911,"* Moved all third party license filed into the 'license' directory
* Beautified NOTICE.txt"
61731817928420fbe9229c2797a9b2fc32fc0ee4,Fixed a typo in the User Guide code
4032940e514521c854ce17a19e5cf5af80729e42,Resolved issue: NETTY-100 Add ExecutionHandler.terminateExecutor()
e9b841757acd3fef28dc417ed8fbff994eec001c,"* Replaced duplicate executor shutdown code with ExecutorShutdownUtil.shutdown()
* Applied the same workaround which was applied to ExecutorShutdownUtil.shutdown() to NioProviderMetadata"
c460c90dea8a4d3b23fedc75b4c22347e3b35b18,"Fixed NETTY-101: ObjectDecoderInputStream.readObject() discards data and throws a StreamCorruptedException.
* Removed unnecessary readFully call in readObject()"
7ea187df899f70986d3ce47d8ca0f0b1e3791590,"Resolved issue: NETTY-102: Allow DelimiterBasedFrameDecoder to include the delimiter in the frame.
* Added stripDelimiter option
* Much more efficient and accurate handling of discarding the frame that exceeds maxFrameLength"
7fa20dcb07efed2c8adbb0b32c6f17e1a1b60b27,Made sure corrupted frame data is skipped
247251420a3fbaa15bbd98f2bd3f81c4f204e3d4,More robust exception handling for incorrect length and too large frames
5d6ef046cdfe06ed4e3345a4f0f9988ed0a1fa91,Removed unnecessary 'else'
73a6716c4b97425895ae5bf3d92efd80bb8afe71,Added LengthPrefixedFrameDecoder
8bba7ccb5b68157d5467df97ff4a7c6277ffe334,Merged LengthPrefixedFrameDecoder into LengthFieldBasedFrameDecoder by introducing initialBytesToStrip option
75234e4cea3e2e93f770d6f81519fc17485ac6f5,Updated protobuf example in javadoc
8ef1f9571a0cc7e8ad47f43c95ec02cb2c58bf3a,"Resolved issue: NETTY-103 - Support the Android platform
* Made sure TimeBasedUuidGenerator runs without statically importing java.lang.management package"
0357cdf985ec7e0c9aca41628cfe53d5e6b6db8b,Implementing a new example - localtime
b92357550249d3b16141f7fe58f8a6f06b61c8e5,Added license header
c9551fea141ad0b31f4989427e2cd4f36e84f5b2,svn properties
8e94c0cd604053168e17bb1d7a5059a5b9e04c7d,Fixed wrong encoder setup in protobuf javadoc
5f15d91c4158897a55a860878e67b7a4ca17bc9a,Added LengthFieldPrepender to prepend a length field easily
d1838f4af799190ae45d79db8f8d7d086515f137,Added ChannelPipelineCoverage annotation to LengthFieldPretender
b0f39dc687b78302c7ef757852a047a04bbb8de8,Implemented the localtime client/server example - yay
66b1960979106b148623dc5a9ff016c9965f9308,Fixed incorrect event order on channel closure when OrderedMemoryAwareThreadPoolExecutor is in a pipeline.
8d320112759645ae0a91e6bfc1737edba65342b8,Prettier toString()
1912930e01b418d4d156875cf6c358a2c5705203,Fixed a problem where channelInterestOps event is fired too often
a59862e8d182c113d6c37258dd8fc156bca4cbfe,Commented out unnecessary configuration
a865090d7a1c503590c4b5726cf9ee56b3cf20aa,Fixed an incorrect hour calculation in localtime server example
e62c9c1aec2c5866251b58d436d9884e21f96440,Simplified the protobuf example in javadoc using LengthFieldPrepender
3d5a35e45f75b2876925a25afabe62d0522d6528,Added lengthIncludesLengthFieldLength option
fc2b456b98beafc47339a97c9ca155e293bd513c,Oops - silly mistake
5a9d99743d86587b8699c2798bc746d47ddc6575,Sanity check
bd403bdb98db5f845255fd52d878d320b0e3d408,Fixed incorrect exception messages
7a9c72fd7670adbe172bd40f3e732341759bc0dd,The state value of channelInterestChanged event is useless - added the event triggering method which doesn't require a state value and deprecated the old ones
d88246fbdad5a7238a0380c967b9abf1cb8fea10,Suppressed all compiler warnings in the generated code
148483d0b932f1bf90ba5fc7789d335a8bb190ff,Updated Javadoc regarding previous deprecation of interestOps value in channelInterestChanged event
027b8b7f7352512b874852b6716dd5746e5fbd75,Added dependencies for container integrations
c043e2bf1ce13fdc45002be25dbcb38925677408,Removed cyclic dependencies
5b3cb391e0830384032bcfd14818f19faaa67a67,Renamed org.jboss.netty.group org.jboss.netty.channel.group
61fb78c65f41d12c3ff17b65fcb4f21491b1065d,Updated Javadoc group list
8979bbbe390797ff0767c6017e9fcd4a892574f2,Created rooms for IoC/DI container integration
10e447d25dd0d27f07df021218204e32d12f0697,Fixed apiviz errors
0368aaed3f75b6f6e01a7c59204cc835d6e9ea90,"* Fixed OSGi manifest file
* Added BundleActivator implementation for easier OSGi integration"
9645ffd2517d1551e076abb50d9240e58aa400dd,Renamed the OSGi bundle activator implementation
18fec46a400fc0a3b94e5bdf05607ddb63f22ff6,Added more registrations
7de8dce654554101c10c7172babb82e461e194d6,Clean-up
b5b7be11b1b005ce5a6cf0357f6e54730b5e1fee,Finished Google Guice integration
184c7cbd5d3ff8451cdbbfeb0213fc637c05f20e,ChannelFactoryResource annotation is documented to help a user figure out how it is used
6f728177f862a67fbb7fa92c70dc18bcbc9a1031,line-wrap
3cf57afd3d25013f02e1583c57dd0b226d0a209b,Merged ChannelFactoryModule and ExecutorModule into NettyModule - advanced users can still assemble providers by themselves
d7256bc737b3a70b762bb479824caa0e7e738e42,"Related issue: NETTY-69 IoC container integration
* Added JBoss Microcontainer integration (needs more testing and refinement)"
5c02a13be01a4f82b2a48fbb09dffb5e889aaa59,Better OSGi integration - Netty will use OSGi LogService when it's running on top of an OSGi framework
6e264f3bd0d0a70378b1041709a6523d9afecd0b,Made sure the OSGi bundle is loaded even when there's no LogService available
04af4356efa0854af66df68494b6560589e680ff,Removed unnecessary annotation implementations
587d6237893fc679230cc54f4c66398f1ef7af68,"* Removed an unnecessary log statement in the OSGi BundleActivator impl
* Added UnterminatableExecutor
* Prohibited an attempt to release the shared resources when initialized via containers"
733feddebb66bde3367f04292c2ec89589a4b3d7,Made sure NettyResourceFactory.create() returns silently if called multiple times
a4f7c30a2b7638674cc735633a248f0a6c7e258a,Renamed org.jboss.netty.internal.ChannelFactoryResources to org.jboss.netty.internal.ResourceFactory
8aa1ed3dc2a91e6b0917e7e3491e0c59f92f3e0c,Related issue: NETTY-69 IoC container integration
9f37748b6345b58fe510704329806d20c3c23134,Added comments to XML files
93cdc6562fa0400516e89722685f00e5967fb76f,Added a Javadoc group for the container package
7e3651c8034f8e660144c379a5bf005deba70711,Added -link options to Javadoc plugin
592a15aaf1b7cf65786d24d7dd0147fd98b5f631,No more annoying daily plugin version check (hopefully)
0124da2eea1964dff95677bcc17f246a10e7e03d,Updated links to the API doc and xref in the user guide
93cec1c6d59a01af0d2cc924b3075843c894c119,Fixed Javadoc generation
6bd89335324eadae6b62e8d5e5eced43f0b88fff,"* POM cleanup
* Made sure OSGi logger looks up the LogService dynamically"
dec9074e7350d4f4f10993a221f36bf2a7d3ed60,Excluded unnecessary dependencies
41191dc6da8610d3590426f3776c4f1d1878368c,[maven-release-plugin] prepare release netty-3.1.0.ALPHA3
6cac5c1fc8913d2d2184c8081ac2bc193c12c2d8,[maven-release-plugin] prepare for next development iteration
d24de31206d07eecc7f212554c0f9587d1974d40,Found a design flaw - marking as fixme
80237f3074c1334334771bab586fe53b3467460c,Fixed issue: NETTY-105 Update the project description in pom.xml
01bfefa6a4e0d33cbe0e7fdf9143f927ef59f5b7,"* Un-deprecated NioSocketChannelConfig.receiveBufferSizePredictor to resolve the FIXME related with buffer creation
* Removed the usage of pre-allocated buffers (reverted back to old behavior)"
ad595a3a5baed419ce93a658d2d0795a2fef5b36,* NioClientSocketChannel.worker doesn't need to be volatile - simplified overall code
6e1fb9c664047eca2464ea8c21d151bb5827e12c,"* Removed unreachable code blocks
* Split large methods into smaller ones"
e8a18dbd123e1acc806c16adabca667d5bddc6ff,Added .gitignore
5a2491576cba2f4f9fac69869c628d823fd2478f,"* Introduced a common interface 'ExternalResourceReleasable' 
* All types that depend on an external resource (e.g. Executor specified in the constructor) implements ExternalResourceReleasable now
* EmbeddedChannelFactory.releaseExternalResources() shouldn't throw an exception."
c4b1e5a011a73d483ab510353967e202acfbf317,"* Renamed ExecutorShutdownUtil to ExecutorUtil
* Added ExternalResourceUtil"
bcbd0f92387e4f07eb453aa68b2db8798e94b0fe,Unfinished yet mostly working implementation of HashedWheelTimer based on Hashed Timing Wheels data structure
1924e30482861bbfd3c9a5d97b1be655777e9ed7,Fixed (?) an annoying FindBugs warning in TimeBasedUuidGenerator
473e765f788106a473fa31f18a60c48ece8558fa,"* Replaced TimeoutListener with TimerTask
* Prettier Timeout.toString() implementation
* Removed HashedWheelTimer.main()"
ff1a08c412de9862416dde6f6691949abbc4bff7,"* Forgot to remove HashedWheelTimer.main()
* More information in HashedWheelTimeout.toString()"
69b4817415fdc5399c64f717ff6173b689082c58,Moved timer classes to org.jboss.netty.handler.timeout
546ac3260ced42eb55b205c10bdcf050b538327c,Proper logging when TimerTask fails
b2d27d3b69e6d9d879ec7922128be49abdf8347c,"* Added alternative implementations of ConcurrentHashMap and replaced existing references to java.util.concurrent.ConcurrentHashMap with them
* Added ReusableIterator to avoid Iterator creation overhead
* Optimized HashedWheelTimer"
a176ae4f3cad3d817e632d626a94ee2f880104f4,Replaced ConcurrentHashMap with ConcurrentIdentityHashMap wherever possible
11aba2161589c765073424f1038a38381e58461e,A little bit more comments for easier understanding
e4f23c16d6546a32cbeddbf7b5913b83b39d629a,Added missing initialization statement
3e0d1f69b0ccca55d6feaaaa19a39e4c313a78f7,Minimized the number of rewind() calls
11f7606b6d0114a2cd9a82709301486fbc4ce860,Fixed excessive CPU consumption
84c943573be52627d8b63d4d1cbf534341bc7ea4,* Forgot to remove HashedWheelTimer.main()
78f8e5b0c921a32d1856c9a3d00f5b6c61206ac6,"* Changed HashedWheelTimer to accept ThreadFactory instead of Executor - this change simplifies the code significantly
* Added Timer.stop() method
* Timer does not implement ExternalResourceReleasable anymore"
75d9358c03d354d3efa404fc50734eba56369aa6,Removed unnecessary synchronized modifier
5249c47da799b161a86f1f182e92c7435ef6cf13,Better thread name
6894b0f2770ab2bd6030dde5483a186b1de02899,Improved HashedWheelTimer.stop() to return a set of unprocessed timeouts
941de5b8679ff51919af9fc08047bdc47161399d,More constructors and sanity check
700c21d5637a6dceb78b1f23fc97f1d89ceefe21,Fixed indentation
b4b04130712cdada1a49fcb2c7493410fc444a91,typo
5b27576494d86af8fecb5eeafd9ac14dc50336b2,Forgot to set the cancelled flag in cancel()
48bb75b7dc1ae418709af6f2193afde4a3c0f6ba,Fixed a problem where calling Timeout.extend() generates multiple timeouts when the timeout is not expired
9b36a40a28b4148d598f0e8e924bebd5ca031722,Forgot to remove main() ... :-(
9959cdd7058a6e6132ab5cc98be5b15ac590e3e7,Fixed a problem where Android application dies during NIO constraint level auto-detection
d2427cac7ad30228512e4ef5b96546441d8d5373,"First fix for: NETTY-114 Selectors of the NIO transport are sometimes not waken up
* Made sure Selector.wakeup() is called, but it can be called more than once if unlucky. Excessive wakeups are still suppressed though."
baea5f7a00bd9b9ba40a746007bb40ccb12ae065,"Second fix for: NETTY-114 Selectors of the NIO transport are sometimes not waken up
* ServerSocket timeout didn't work as expected."
60befc196f2270c343c37bcae193e5217913f04b,Removed Timeout.extend() operation - a user can just create a new timeout
9da8f78bb1adbcef73273bd658f287e796afaf78,Added SimpleChannelUpstreamHandler and SimpleChannelDownstreamHandler
90c4999c744f7ed794062288e076078f651bd089,Removed unnecessary parameters of the convenient methods in org.jboss.netty.channel.Channels and deprecated old ones.
a0e2c470b76107ea9f6bf51d7d5b54674574cc02,* Added ReadTimeoutHandler and its related exceptions
67d90615e142c6b9af487cf47b6f0f375c66c836,"Wishful fix for NETTY-115 AccessControlException when running Netty from an Applet
* AtomicReferenceFieldUpdater is used only when it's permitted to be used."
42afa85e53a00ba46d30bea01f086ed2ba52a8a5,Refactoring that is likely to help JVM optimize QNode more aggressively
2d8b3b0a4e7fe1c831b51fab6bb90feba22df217,Made sure channel registration doesn't fail in Windows unexpectedly
95584f5c34d9821577c5797c86bf1b4ade9c3406,Forgot to close the channel
b4b7a8c48f0abdb42e6c74c39c0af13f942fdb74,Suppressed the usage of the Temporary Selector in Sun JDK to work around a weird race condition in Windows
4d84b0e4c6fcbb6b236d72af3fd355067b18bb71,Updated JavaDoc for ChildChannelStateEvent to prevent misinterpretation
b6ecccb4931df1e5e27bfbc90ff4ce09cc476d16,"* Added TrafficMonitor
* Added AbstractChannelFactory that provides support methods for managing and notifying TrafficMonitors
* Added Channels.notifyInflow/Outflow()
* Modified all transports to notify TrafficMonitors"
2625d10e580831777a3443c9f866b57a830b974e,Moved org.jboss.netty.handler.timeout to org.jboss.netty.channel.timeout because timeout detection will be implemented as a TrafficMonitor
29d227e69e6b9c48faadcf18971f11142fc3d84f,Put simplistic channel lifecycle handler method to TrafficMonitor
e365f483bb6bf3eb742484467ca3472294213b42,Added ChannelWriteTimeoutException
acfa2b1ce0f40c04f105677c7d6b55a9b99d1dac,Fixed compilation errors
44ccfa44b08464e4f1b2189ccb1578822517533e,* Added more handler methods to TrafficMonitor for more precise monitoring
d93d74677e1fdee4a8b008bd5e40ddba534aa10e,Reverting back recent changes related with TrafficMonitor
eb522dcd56ed72bed95556fba497d4238a782e1c,Reverted back recent changes related with TrafficMonitor
0ea4c19c5cca57449ce141d06ce459d9dd33755e,"* Added WriteCompletionEvent
* Added SimpleChannelHandler.writeComplete
* Added SimpleUpstreamChannelHandler.writeComplete"
ebcf1b84e04aa1c91a32fd420d5cddce19cf53ca,Documentation on writeComplete event type
8f92cfb80ad0b7eb21f3d034ef54a050d35ce5cf,Optimized event implementation to reduce memory footprint and improve performance somewhat
c79bbd063f11f99504756a6e391fbffa832a3125,Reduced the amount of the heap allocated for hexdump generation (512KiB -> 2KiB)
dde0232e1919bcbe2c1eee1aa3539290875900bc,"* Added WriteTimeoutHandler
* Improved HashWheelTimeout.cancel()"
874fc7db77a4597d391acd7f14142f9bdb03f3ce,Deprecated ChannelConfig.writeTimeoutMillis in favor of WriteTimeoutHandler
b36872ae2f2c2f68a52bce9c3bbbfb3789c3ccf1,Added getTimeoutNanos() so that a user can extend the behavior of WriteTimeoutHandler
206e3a90815bdc9eada2c4e10dace2618440a1a0,"Resolved issue: NETTY-112 LoggingHandler request
* Added LoggingHandler"
63e586586b250e029c3edcde7584d1eef5a107f8,"WriteTimeoutHandler's pipeline coverage is actually ""all"""
188c7f94aa6aca2c8c7cd857b7ee72faa9762516,Fixed a bug where channelClosed event is not propagated in ReadTimeoutHandler
c46be1c7f9facaacbb7916cce4af26b9ccdb1ded,Made sure HashedWheelTimer.newTimeout does not throw an IllegalArgumentException for small delay
fff170b71e7054f9457a68745c425f6e84a1b433,Removed unused code from HashedWheelTimer
52e42889640c417128beca975359d1ce4b9643bf,Prettier string representation of ChannelEvent implementations
dd971b5f793ee7c1fe77037da187d5f4ef91a8e9,Prettier string representation of ChannelEvent implementations
8cab65d1e8fd34606cd89b8ecbec0eaa742f595e,Fixed a warning message when LoggingHAndler is used
0f5d16def8d92852f19be04dbdf28957d0ccf3e3,Improved LoggingHandler to log the hex dump of a ChannelBuffer if necessary
9445fd1b6fc6fb02536adfeb9a76d39833cc4158,"Fixed issue: NETTY-123 couple of errors in ReplayingDecoderBuffer.java
* Fixed a problem where ReplayingDecoderBuffer.indexOf ignores the specified parameters"
e7aeffe14dd1b743cd59568e79fa1d18e2e7f9a0,"* Merged Andy's Local transport
* Merged Andy's HTTP tunnel
* Both needs some tidying up, but seems to work OK"
8622b885b6eeabbcc560b9c15d2521d6b2eefdc7,Code cleanup
16583e398651ae8ab15a2660ee351a60da56f5c3,"* Added ConcurrentWeakHashMap
* Updated serialVersionUID"
5e37b18f235ceb7d5986fb676f6502b7de3f7d66,Fixed Javadoc
632fb01beeeb73cded3a735f03d52f1026040eed,"* Made sure there's only one LocalAddress instance with same id
* Added ephemeral port to LocalAddress"
a4c491498b96adc7b26507850628a099010b2338,Made LocalAddress final
73e8954239647aae59bbfc33cfc5729e539d9997,Proper Java serialization support for LocalAddress
0fc8977bf23d736d4a5c993a902cf79bba2428c0,Fixed ephemeral port duplication which might be caused by deserialization
202b53c13298a0fbd5f407806ef338eb7a39a13e,"* nextEphemeralPort is an integer now (still 4G ports)
* Used hexadecimal representation
* Made sure newEphemeralInstance() doesn't fall into an infinite loop (extreme case)"
35730de7cb11f68e5a45cc556d0fda5ea07f0a8e,Made LocalChannelConfig invisible to users
233e85f63c087124f0c495b1ccdc56632d2db86c,Made LocalChannelConfig invisible to users
5af89d19857f3eb88dd84663ebf06cf3b72959a1,Removed unused line
9410fd155e4612149f3e8b50bd77ca73f8325503,"* Improved the local transport to behave more closely to real transports
* Changed how ChannelFactory is instantiated"
a0e57b44281e57b9ece0c33112884a80e4b4796d,Access control
ce7ca53bdf10434767f65fb52733402fe381195d,Fixed a problem where LocalChannel.getParent() always returns null
3569e869a95c1157a34d4fd5b68e510cad6ed4c9,Fixed a bug where LocalChannel.isConnected() returns a wrong value
d50322f27fd99d594d58c4025b27a0edb4d6eb44,Fixed a problem where AbstractChannel.toString() returns dirty cache value
a698db26c9cffed01ab7024c715813845e99b814,Reduced the number of isConnected() calls in AbstractChannel.toString()
78963bef7d1f477b2a2e13e002ce217bc23a1d96,Typo
7e1dae813fed7d6043787aadd7685484c1f91a44,Fixed a problem where the local transport does not fire a writeComplete event
198fbe3e7e163a828e7d11de0f725bc4428cf761,DefaultWriteCompletionEvent.toString() should not specify the unit of the amount explicitly
ddf8cad09c1f8ab79081d92ef44e83ef6f20cb1d,"* Added LocalAcceptedChannel and LocalClientChannel to distinguish two channel types easily
* Less visibility"
78cdc91acd5ec3da7c47f1d1f5e4b6ce9be80254,"* Added missing svn properties
* Updated @author tags"
ab306bb7502eead344cef00c368f8f8cbf7efc62,Updated Javadoc tags
f513e0d6ae64141fa70c3c97acbf98b3f6bcf6b9,Added a link to the Servlet API Documentation
f7cc2c971dc0a7530c9319d6df24da4d8550a7d9,Fixed NPE in LocalChannel.closeNow()
e7571355834f68275bbf0b5dcc3f5eab6dde1642,Fixed a problem where a channel is closed when a user tries to write a message when a connection attempt is in progress
03de679b1789d7f3d3b3acde5f23bb5f77133cc5,Removed unnecessary 'if' condition
2b222b4994bfab0eeeb0a08cfac633f2383f5178,Made sure MessageEvents are fired after both channels are fully connected
bdc37294d92f89553efee9ff3db8dc60f6437754,System.nanoTime() doesn't seem to work very well with HashedWheelTimer and multi-core system
6d917ca7ebd0329f0ac8e2f38d18884d4c128079,Fixed errors in comments
bb898265b9fc3b0883dd9d4eec90d5c1769a3d90,Fixed incorrent time unit conversion
4ea1d640c2973a8940956fc1e855afddca831f5c,Fixed a bug where ChannelReadTimeoutException and ChannelWriteTimeoutException can be raised after a channel is closed.
cb46aec1eba765dff6c7bc855c66edcfe21a5c12,"* Proper synchronization and state management for HashedWheelTimer
* Removed an unnecessary synchronization on a timer instance"
25bef2d0d27485be1064b8551729256ec9160d59,Changed the time unit of WriteTimeoutHandler to milliseconds
bd0c55caede48dd8e618ed01dd6dfec51d8072dc,Added a convenience constructor
8431db04079fec7f91514b4a555fa36019c1d82c,Added a convenience constructor
10a07b054e54bc54c0d0f31154e9e5ca002eb831,Made inner classes final
d966ae57fc0d24494c7a296ad618f322270ba490,Typo in comments
6e4f6b164c2da43a51ab53198c6112413fcd5346,"* Renamed ChannelTimeoutException to TimeoutException
* Renamed ChannelReadTimeoutException to ReadTimeoutException
* Renamed ChannelWriteTimeoutException to WriteTimeoutException"
2ee72abaafaed53b35624f5759638c6ceaec29f5,Added ChannelState.EXTENDED to support custom channel state like channel idleness
51b33c367809fbdf94ee1a8f6f6df9cb71d6607b,Reverting back the latest change in ChannelState - not a good idea
587c0ac27f69b7b4b63a21a04d61bd41683deb71,"Added IdlenessHandler, IdlenessEvent, and DefaultIdlenessEvent"
859f9a37a2027ddaffb0e300b1a5571d79662c1f,ChannelEvent implementations don't need to be public - package private is just enough because all events can be fired and created using Channels.
f44d9eced8c26a96c12cb4614e23c14450322c7e,Added a TODO item
3f009da45380573101f881be03f5733cf07a4833,"Resolved issue: NETTY-124 Clean the constants in HttpHeaders
* Reorganized HttpHeaders and added a bunch of constants"
3acbe08eac83453aef5c4fce387cd6709fa22200,Code clean up
a09303785e08ee86fe4f2d256cf9c1a2ab7db4bc,Removed unnecessary exception triggering
665db389945f0bdd8816c2360c6644cf7f0af8f1,Removed unused field
84aa72a70fd21cf5f5ce45511c691c7ce06d7525,Made sure all timeout and idle time can be disabled with the non-positive constructor parameters
2030411759ae3b400efda53e9d3c222d9542262c,Reverted r825 which doesn't make much sense
73cb4463104318b0645f039e9279c1343d4ddef1,Removed the usage of Channels.messageEvent() which is obsolete
2b5a00e8b8a470c95f92d94d2b5af800ca09ed3f,Removed unused code block
334ea6f6e63e2694275fa61bbe039f6ae714380b,"Now that there are two MessageEvent implementation, there's no point of having Channels.messageEvent() - a user could just create a new instance by calling the respective implementation's constructor"
32738273e07e56d755334adaf91795f83474a2d1,"Related issue: NETTY-116 HTTP issues including chunked request / response patch
* Applied Dave's patch for HttpMessageDecoder"
0198da7b6c394f7377c75e802d1ecd37f45c04c0,"Related issue: NETTY-116 HTTP issues including chunked request / response patch
* Applied Dave's patch for QueryStringDecoder"
9cdc4a959e913b823d59a65368ab1238e5386549,Better white space handling in HTTP
1243baa05b420762870aadfb84d2da623847c53e,More robust HTTP message decoding
01b0beab50de912296b70a9090d46527b2cbad31,Typo
44498e067ff021e144c87d58417c5803f19f9171,"* Improved the detection of chunked encoding
* Fixed broken chunk length parser"
66423e0c1db1542bb3aab0fa7465d28add7d03e1,More robust chunk size parser
fb74832dc8cb350fbd3f375c8a71d48434ae7187,"* Removed the usage of unnecessary state variable
* Renamed READ_CRLF to READ_END_OF_CHUNK"
9125ff5616d5bb5c42996f0e4b58b0058d9f303a,Fixed more issues related with chunked encoding
a4fe52559b70c111968b70081ac4c93c0ad0e00e,More robust CR/LF handling in chunked encoding
b6c992de8b7e9bd77a7c5bc9590ebe382c7c0e54,More optimistic initial line buffer size
44d56d2c1a002f98939ba73249bc4ae4e5bf4a35,Added HttpChunk message for users who want to receive the content chunk by chunk
2ac8d11a343bbfeade6ff19c4b11800e6c37ab62,Fixed a problem where DefaultHttpChunk.isLast returns a wrong value
5ee6da38927b22df9f058ea990e27bbec596a52e,Fixed a bug where HttpRequest message is decoded twice
ebe77cef211a76fa8653437bd7a40f3fdb5b0ee4,Fixed a 'shouldn't reach here' error
602c99c53200a10b76e8a5a93b1e4dbd86f03c09,Fixed a problem where the last chunk is decoded too early
2a555082bb7c9dd002a8a15fb21698062508234e,Implemented chunked encoding support for the HTTP encoder
cf1b915340ca8a5687492ea93276d812cd7d1683,Improved the HttpServer example to demonstrate chunked encoding support
912c66b9310bc44c900aadbe907e1813524f9cf9,Forgot to encode the last chunk correctly
e787378024963afbf7a7021ed9fa9d0d382ff461,US-ASCII -> ASCII
5faa7e9ea89e7261f00bcea0fb088f6084c65fca,Removed unnecessary boxing / unboxing
2d682dc2a3ecd32a179d4455c1b7a0e675768945,"Fixed NETTY-107 HttpMessageDecoder can not handle the content with no 'Content-Length' header.
* Added HttpMessage.getContentLength(int defaultValue)
* Renamed state enum values"
431151b8e59458fbc0fef506f682e9c0b0d89b39,Fixed issue: NETTY-107 - HttpMessageDecoder can not handle the content with no 'Content-Length' header.
2ebce4c98715113f942aea77db50d2170845815f,Better keep-alive behavior
59b67420bf09d32e321e96b191d902bf82977649,Prettier output
0e5f798889a5c09df4160612bca8b0b3de76f765,"* Removed the getter methods in IdlenedssEvent and replaced them with subtypes
** Added ReaderIdlenessEvent and WriterIdlenessEvent
* Added protected methods which enables a user to override what to do on idleness / timeout"
eab8623f4aab0d0a22aadf4c9171e350a80f0fb7,Added the missing class
ed69d8bc1510b987c2901ce028b5122cd7a17914,Added another missing class
2c3e7565fa5f86c42032f2e88e5b28de113f4bb6,Implemented both idleness event roughly (needs some fix)
cbd2dec0fde996a3991af317d12a372e63d60474,"* Reverted back recent changes
* Renamed IdlenessHandler to IdleStateHandler
* Renamed IdlenessEvent to IdleStateEvent
* Added IdleState enum"
2c8f6690305b4479e39ebb0411ee40f9c0591588,Added IdleState.ALL_IDLE - was able to simplify even more
7f16fa352a516e1a79cf34a261bf355c69af87c2,Removed unnecessary variable in IdleStateHandler
b06e33f5ee73d5d480c52c9f548a83cb8288223b,Changed the default time unit to SECONDS
b49f8d8353d283afc706dd7ac83053d486b2eb7d,"* Renamed the callback methods for Read/WriteTimeoutHandler
* More convenient exception handling"
11478edb5b653b136705f5005d52e9277fb95ba7,Fixed NPE
789bfd32213c07fd3d1044d0075a614e604794d5,Changed the type of second unit timeout from long to int
bf6a7db90ac51762c5c4aa52127b368b02c63f39,Added more convenience constructors to HashedWheelTimer
fa8890580eb017f90924f82a2f61a3dacff9de69,Indentation
7b721ef1d45f57ec56f0dcf41d4585d4ed32453f,Prettier LocalAddress.toString()
8aff5914d9b012ddb7051011a7af1964cada30c1,Added IdleState-aware ChannelHandler implementations
91d7a329d4362fc65bc78123fb9f1b9b6b4cd7e4,"* Renamed Concurrent*Weak*HashMap to Concurrent*WeakKey*HashMap to avoid confusion
* Added some FIXMEs related with potential memory leak"
65048c930f458705bc32d659f05182d4e646d467,Made DirectChannelBufferFactory's preallocatedBufferCapacity configurable
1b28c126c5870bac052b9bed31c9b1b9d43625b7,Fixed a problem where DefaultNioSocketChannelConfig allowed incorrect configuration of write buffer watermark values
395fcbbd290145023ac9e6dc62f73c9fc3f99002,Simplified LocalAddress implementation - no more global reference map that causes memory leak
e8665ea867faaa1bac224f32c2965c22e5996f13,Added a convenience constructor to LocalAddress
1896c902073388fd3f4e779e308e191d7a070101,"* Removed ChannelGroupFactory that causes memory leak
* Added the default constructor for DefaultChannelGroup"
b22a578538598d7dba332295b7a44eae9322f7a3,Prettier DefaultChannelGroup.toString()
d9c0befe2422eb77c476a2c4b53a99c42ac13844,Fixed equality comparison methods of DefaultChannelGroup
7e8a1cd9c221de5f759c594b3bbd67dd7755af6d,Code cleanup
ae004b5331c5c847c0b102c28587bf14d0af05c0,Fixed some problems reported by Find Bugs (mostly to shut it up)
fb64aa94b519ccc925d397dc23efa2c21054f425,Fixed a bug found by Find Bugs
db18337762c54b0753fe6b8585011bef7504be4a,"* Fixed most Find Bugs warnings
* Added UnreplayableOperationException"
c153fd5bd099ed2490a9914b7379661fb24078b3,Fixed an infinite recursion in Base64
5f2f072d694275f750d1ee139386cc64a0670f4f,"Fixed a couple bugs in IdleStateHandler, caused by blind copy and paste"
06d5f5264ee315e573148cf92daf158fcf13aba7,LocalChannelREgistry should use ConcurrentHashMap
065218fd10b3b69882f5ac02c6d7216459b00d62,Forgot to mark one more volatile member transient
3d355eb48a93399404c23c7378b1c86cfb15a1ac,"Added misuse detection to MemoryAwareThreadPoolExecutor and HashedWheelTimer, where a user can create too many instances"
6370d06fb36bd244fa3790714522084c5be9f8c9,Lowered the shared resource explosion detection threshold and changed the log level from warn to debug just in case it's false positive
7860e999a752529eec0f154b3ba44b5abd89b992,Updated license information (NETTY-106 Add missing license files to the distribution)
4f391f5bbc6a80ee48cec046aae0b1ec86e5ed0a,ReplayingDecoder should not throw an IllegalStateException even if a decoder implementation returns null when state transition occurred at least.
1a96b48026488696ec35055532efb5f658615689,added ClientSocketChannelFactory to ServletClientSocketChannelFactory constructor
2b7427de4fc5435e2cd62cf0baae9b02e6d23f94,renamed to HttpTunnel.....
9e60db4078aba484860ffaee1ba00e59ea36211f,added TunnelAddress
149d97d0137f55ea9c14e3822e01f8796a34ffa6,"* Fixed issue: NETTY-125 (Backward incompatible) Use an integer as a Channel ID instead of UUID
* More concise Channel.toString() and ChannelEvent.toString() implementations"
121c88d7e21f6b33187515fc52ff4042688ba29f,"* Removed TimeBasedUuidGenerator
* Fixed a bug where DefaultChannelGroup doesn't recognize the new Integer ID"
e977bbf9feca737e6ce3c9d8a7c48762767d63c0,renamed servlets
c05f70bdcfb5324c96257deb58ecece049f77509,renamed servlets
b174d2f2e03b7ab5d744e08d42d967a70e96ce08,Padding for ID string
5eb3a748c2c6000102f80629cf9267600c2d8599,"Fixed compiler warnings
Renamed reConnect to reconnect"
a77664bf8f760b7c550dac14fdfe72b8f597520e,"* Fixed compiler warnings
* HttpTunnelAddress should have proper hashCode, equals, and compareTo"
5281ef6aa77c30c3e1e5a507fe347776230e2150,Added HttpTunnelAddress.toString()
4bd06dfdb12c20351930e2f8ee8b348f66639143,Fixed indentation
5699f2e18e5a08273998e7b9bc82c3fd39959083,Removed an empty package
3922fb8a442f5d530d1ca31c6d140f0b58b890c4,"HttpTunnelClientSocket -> HttpTunnelingClientSocket
HttpTunnelSocket -> HttpTunnelingSocket"
6671cd34fa22c17af8204dfdb32eaa79c341b5f7,"Indentation
Made HttpTunnelingSocketChannelConfig invisible to a user"
1f9c8256d8f78fb02981c548179de8f9b4abb0b0,HttpMessageEncoder.getCookieHeaderName() must be protected
aa36f446f5b254e0a52fd0c74e04fa67218ff530,Forgot to commit
e424c5f87d0d082ad47e13f22d0375d038f8a658,"* Added XNIO dependency (optional)
* Updated license files for XNIO"
fea082e68914a686b6f33322b66af3bfb16a1100,fixed cookie support
df05ba3733faca5bb08e3facbbb82b9733b71c93,"* Made CaseIgnoringComparator a singleton
* Changed HttpCookieDecoder to return a Map instead of a Set
* Optimized imports"
d550109796b6d6ab0ed1880a4a314f045c1712bb,"Implemented Comparable, hashCode, equals, and toString for HttpCookie"
10cf64acd5b3bf3e5991c577d5a047d406420ebc,Added missing SVN properties
95b6558068e987f9415af682f7c8e0ec73229cda,Fixed author tags
8872294728225a253a73b9a7f3ff468688148246,FIXME
874b04329720fbc259d5403a100f48d477f7992f,Added more TODOs
2ab02caa6758dbcf3d797b464ae1528a6f627dc7,Implemented two more methods in AbstractServerChannel
e1b58065601f8960878a0e904feb11615930eb95,"* Removed AbstractServerChannel.getLocalAddress() to enforce the use of covariant return types in its subclasses
* Renamed LocalChannel to AbstractLocalChannel"
fdd74f252b0cd09bd98c4f31bae3a30c1aaeb11b,"* Renamed AbstractLocalChannel to DefaultLocalChannel
* Removed unnecessary subclasses of DefaultLocalChannel
* Added LocalChannel interface"
cd6fce50bce396501cbd3de452ac6bd3855e5b07,* Extracted common code from various ChannelConfig implementations to DefaultChannelConfig and DefaultServerChannelConfig
0e443c3a02ee7fbf2d733392cd93a23c3faa78a0,Added ThreadLocalBoolean and replaced unnecessary anonymous classes
3d7214ba613f0755d57b5577bcda326a6356a692,"* Renamed LocalServerChannel to DefaultLocalServerChannel
* Added LocalServerChannel interface
* Covariant return types for Local*ChannelFactory"
b56bdd89ddea1c31feca933df3105dffb9e094b7,Marked some classes as final in the http tunneling socket transport
cd341609fa398392a48d3adbbb7247a822e2ccc9,"* Renamed Local*ChannelFactory to DefaultLocal*ChannelFactory
* Local*ChannelFactories are now interfaces"
f6ee08090aa81ffb05b057b44cbee8c6bdfc71d5,"* Added ServerChannelFactory
* All ChannelFactories that creates a ServerChannel now implements ServerChannelFactory"
547af08bc65b24315867fcd8176bbe14dd313176,"* Made sure ServerBootstrap accepts only ServerChannelFactory
* Validation first, state check later"
ae22b0aaa104ca6de6ac4ebac479ad9249dc1f42,Fixed failing tests
0c27f015bf3455ffdbc3cfa252a5e3f8192a5c5d,"* Better exception handling on bind failure in ServerBootstrap
* Fixed a problem where UnfailingChannelFuture doesn't tell what exception cause the IllegalStateException"
9043fdb62293cbaf07522d2f7edda7d1e44a9a38,"Related issue: NETTY-75 XNIO transport
* The preliminary initial implementation of the XNIO transport"
c3bd292f73f009b7f9a07e34fe1a7a137ffec941,Fixed a problem where XnioChannelRegistry fails to find a server channel if IPv6 local address is specified
214a26b529e99fdd87193248156e097250aa0321,Fixed a problem where XNIO transport doesn't work for the serverside
fe220d42ec33605cd57812801e066ca5337d412f,
94e8f31bfad682c96b873862515995efada4f51d,Added more todo for the xnio transport
988fff225f6f925bbbcedc42f4254d2468dcae57,Better exception handling on a connection attempt
13c68c76432de168e892bcf18a3c2713ebbc4e0b,* Made ChannelConfig.setOption() public
d2274f75daa9c45acb359a831f08b64147bec55d,Introduced more interfaces to the XNIO transport
23b13eeafec0f3c74e83bdff6e7570f3f1283460,More interfaces for the XNIO transport
49c0f334611ab2c72f7f10e897ba3d1794076c1e,Improved AbstractXnioChannelHandler to use ReceiveBufferSizePredictor
63cb4a023f0613d30425af7b428eb3a07facdc59,Implemented AbstractXnioChannels.handleWritable() properly (needs cleanup and optimization though)
29b0af4f07e8a266262a135a8979fcffdb248412,"* Fixed a problem where query parameter components are not correctly encoded / decoded
* Changed the default charset of the query parameters to UTF-8
* Allowed a user to specify the charset of QueryStringEncoder/Decoder"
b8bc78a7d089a27d30af68aef4efd4d2eb2a2308,"* Renamed HttpCookie to Cookie
* Split Cookie into an interface and its implementation (DefaultCookie)
* Renamed HttpCookieEncoder/Decoder to CookieEncoderDecoder
* Added all optional fields to Cookie
* Made Cookie.value mutable
* Revised DefaultCookie.toString"
b71d2d3d7f90712046c0aad95137a1b7f4a3955e,Updated fixmes for ataylor regarding cookie encoding/decoding
9550c0759d8efae55ff9aa73a1bef4500b5ee3aa,Strict cookie name validation
5e64bb66e88c4e6ce28444f38da1c9ce254bd6b5,"* Fixed a problem where CookieEncoder trims the value (it should not)
* Made sure the cookie values follow the URI encoding"
a8d51cfad8c8428521a9822248606114a9e63d4d,"* Forgot to check in the http example code which was affected by the recent refactoring on Cookies
* Removed a FIXME in LocalTransportRegister - it's just an example."
0132b000912fba6865b0489b0d7ad1ccdd707a2d,Fixed a couple findbugs warnings
6200d39bdd0023922204d9da70caf728510fc67d,Reverted the unnecessary changes related with shutting FindBug up
5fdce1990295b3420b5d70f655cefbb62df4a1d1,Reverted the unnecessary changes related with shutting FindBug up
284fc4db44240c8a63f35bafcfcb2cd8e1b869aa,Removed println
ae7fb55d62c42b7d9ec9d987d1414ba2aed19385,Removed printlns
1ff58978a287bf28c5eef96cac1d21a638056c16,Fixed a bug where DefaultChannelFuture.isSuccess() returns true even if the future is not done yet
903c530ae074cfb8d261c6fb01c2c568c8b7c8f2,"Fixed a problem where NioWorker.writeNow() doesn't work when it's called recursively
* Added a boolean thread local variable to check if writeNow() has been called by itself"
2321499c8cc2aa28a31b065717bd61122ce11629,There was no need to introduce a thread local to avoid event recursion
86bc09159d344d138ff28b5374e7e40a4c0d7dc5,Fixed APIviz errors
720b6cdf8fc4ce45503bbc3dcbda2dec62733cba,Added dav: prefix to the distribution url
8d75e7e323ac555badcc55c1d64f768620a06e11,Added FindBugs preferences
2665c5cea54ad33e49be869c3e6b410f7e89b943,[maven-release-plugin] prepare release netty-3.1.0.ALPHA4
fabe3a36c9e6c364849a08b4e5f95f6d289d452c,[maven-release-plugin] prepare for next development iteration
9bbce4a223fd0496e65abee46471b6dfbbf19ada,Fixed a bug where a dynamic buffer's readerIndex goes out of sync on expansion
2dc5463e93600b4123d4707a7e4674cc98748216,Fixed issue: NETTY-128 Unable to run netty client with a Security Manager
39cc4bc3fb0b8ea78067028d377dad641e9adb38,Better exception handling
7d00231a60e91b988ecea2a1d53a1d04c60f19c1,Fixed inconsistent synchronization
9e623c9cb121353e3624042afde411b321e10999,Fixed inconsistent synchronization
3a8b92929ef558929b19581f81f4f4ec15545532,Reduced too broad catch block
bca4c3abb2df407aed1392a639a076f055965d80,Updated Find Bugs configuration
39ec19078c74974ea3775f9a041da64337d58f33,Code clean up
f04ca5b970ebb9dba411a033a168bb59d0f912ae,Shut eclipse compiler up
4d95e233bc3b48b70fdd8e473200791e1f10b2b8,"* Removed an unnecessary override in MemoryAwareThreadPoolExecutor
* Updated Find Bugs filter"
cd3859b002aa743d0094e1d7b7fa682ee3084c73,proper handling of cancelled keys
35ac9ef38e0ebf8c9abb718e66d0206a1c943260,"Fixed a bug: NETTY-129 CompositeChannelBuffer.getBytes(offset, GatheringByteChannel, length) doesn't respect offset and length parameter"
0847720e41011bc4b351366c8d0c313dd30ca391,Took care of the case where a message implements both HttpMessage and HttpChunk
b6761758824bb618b6354dba89e068b6c821bf5f,Actually it was being taken care of.. reverted back
4979cb6a219abc529850c1b451c0b0e221574b1d,A little bit of code clean up
fbfebb1fd999e7a8499cc47b1a9b22a706e33de1,Code cleanup
b9f604ca1d9ee8afb25126a31f4855074710e96b,Code cleanup
392900e4b6fa8898b9f05a11b19a7e578f4f3c17,More cleanup
f93c240a7c30da4e5cca76832c0571d654076db0,Fixed find bugs warnings
7044f9a586f67c28810d69f130a8056f0a4c0052,Fixed find bugs warnings
6ce3eebc55cb36b87dd584b42956470f8daeefcf,Fixed find bugs warnings
1781e0e1dd271e7935a621e6a037551a51d083c5,Fixed find bugs warnings
dfd9669797d859cc8a2e5791a89d1c1533fefc69,Code cleanup
07c720ad2c4dbe4a3d0e744cb437feaccc516cc0,Typo
666c943b66ce8d9723ef0a37c50a79efc41f75c1,"* Added ChannelFutureListener.CLOSE_ON_FAILURE
* Reduced code duplication
* Fixed warnings by FindBugs"
019f5f029218c09e39d5d5916683daa8a952389f,Fixed a problem where *SocketServerBootstrapTest fails when an O/S doesn't allow modifying the buffer size.
f3149fafc1de2680c013fa48b5a064f8e0b51dfd,More explanation on event ordering of OrderedMemoryAwareThreadPool
7985fa94a959311783824aa746f739e177352255,Fixed NPE in the HTTP example
832ed0c19839472364f84761055b1351d340ac64,"Fixed NETTY-130 (Chunked encoding emulation for a large non-chunked HTTP request)
* Replaced mergeChunks option with maxChunkSize
* if maxChunkSize is greater than 0 and any content or chunk larger than maxChunkSize is received, it's split into multiple chunks as if a chunked request is received.
* Added unfold option to FrameDecoder and ReplayingDecoder"
0a72ffeacd74906bc9e8070399af62db8f419d87,Added an option to exclude timing tests
a5a7181615207c20b546977a24eeb4819af1b689,Renamed TimingTestUtil to TestOptions
e6cc8fb5eb2479b4b79ed2fa8d8bddae5faaa95f,Printed a warning message when timing tests are disabled
ddd756b276c257f7e74028b19b30a7b1b8ad95fd,Better option handling
ebe5ad3ef24d7ac355f4826930e68647d34f889e,JUnit should ignore TestOptions
c9b3122b6ca1e7f487c0f79df24f4bac0b9f6817,More strict validation on HTTP headers to defend against HTTP response splitting atack
4a72aafd567489304824b89d8ab3e0765b76a4d8,"Resolved issue: NETTY-133 Limit the length of HTTP header lines.
* Added maxHeaderSize option
* Added maxInitialLineLength option
* Overall HTTP code cleanup"
a5ebbfb1114d648e4ce9a199f795618fe9d9bf99,"* all limit parameters are mandatory to create HTTP decoders now for better security
* chunks are not merged anymore for better security
* modified HTTP client example to handle HTTP chunks"
94544193bd8f426e3d970689409d1ea921cd6d51,Better formatting
3235c154a31ad7e682a48ad575f6c14c8aa38689,"Implemented hashCode, compareTo, equals, and toString for HttpResponseStatus"
445be963ae861e5e2474422ff54db4272fb39a3e,Oops.  Silly mistake when creating a new string builder
23a73f20d697a435448cdec375d5724fa589ad5a,Fixed a bug where HttpMessage's content becomes an EMPTY_BUFFER after messageReceive event is already fired to process chunked encoding
4e989e20d4c12ce08b00aca4610e72ac3cf84cbe,Added HttpChunkAggregator
e523b8ec0f2f07d8dcd9874b915fdeb0f914ff91,Added default constructors with sensible default values
521f220aaaa285d4e7802482b406cad52b73bde4,"* Excluded non-unit test
* Changed the forkMode to never"
368c34ace942e498be0b3dd371cdf82b1e04ff26,"Renamed DefaultReceiveBufferSizePredictor to AdaptiveReceiveBufferSizePredictor
Added FixedReceiveBufferSizePredictor"
f4dd29c70f3ae7945d88c3e8c189214ce9f96038,Fixed code style in DefaultChannelPipeline
d2c4a1143efd6d61785d648b40c43f5a8963fd39,Added ChannelHandlerContext.get/setAttachment() - NETTY-134
0edc9abb0fa59f20312fae8ea4af246237fa97a9,Made sure MemoryAwareThreadPoolExecutor and ExecutionHandler get along well with other traffic controlling handlers
ebdfec8ec0863071e3d9b347b520a3e471380183,Reduced the number of InetAddress.getLocalHost() calls in test cases
bd184cc665b32b06005d7a917155247c90d1ed5a,Renamed TestOptions to TestUtil
3a65234df5fb20ba0007cbf040078a5333bfa099,Simplified HttpTunnelAddress.compareTo
2627751a444bb2948fd141e832696ed5b84420b5,Anonymous class to nested class
1895864d387894802699c4b0ba2c29977941b125,Code style
35b08df70a0b7106e44a568716a141697468240d,"* ChannelBuffer.writeBytes(InputStream, ...) must return an integer
* Fixed a problem where DynamicChannelBuffer doesn't expand itself for some writeBytes() calls"
937ee06d9d87880367d5e532b4af5ceb99561d35,Simplified stream I/O in HttpTunnelingServlet using dynamic channel buffer
5f1dd20d74cd33765b6e9cd69e73314fb348a097,"* Made sure ChannelFutures are notified when no lock is acquired in HttpTunnelingChannelHandler
* Reduced the visibility of some methods in HttpTunnelingChannelHandler"
a91f3e4acf3e18c4f10d989d47398b3baedc6dbc,Tiny code cleanup
c58568e0948615d9b137ea92c5cb84b33745c38b,cleanup
6c5796934891a9a6de96d6adf835ed61e278ad90,Updated find bugs filter to ignore more false positives
731c0d94f36e96d5b3d3e03c0a3eb197ecdb4457,Local transport doesn't need to support setInterestOps
7023c0599c5a550c5591d5a440beb1964f221d52,A small rant
469258a8629d9e846a95d1e50017f1f6e55b830a,Added datagram channel interfaces
1931ba6cebe369bb35f94d8461683802f53076f1,Switched from tar.gz to tar.bz2
d33e38e6265e3a657879c09dc2768287b6e145d2,Added DefaultDatagramChannelConfig
5754d9d87fd4379b5b75855df058dbaabe10dbae,"* Added receiveBufferSizePredictor property to DatagramChannelConfig
* The default predictor for DatagramChannel is FixedReceiveSizePredictor(768) which should work for most cases"
dbbd7ed3f500dee85e6abd650f8030bdebe3f8be,"* Implemented old blocking I/O based UDP transport - supports multicast, too
* Added Quote of the Moment example to show how to use the UDP transport"
8eb3e57add8f6070ba4a0d0b66fb3ae7af216a18,A little bit more Javadoc
83301cd183be06e77af813f1ef132530a15646cc,Added a link to the Java tutorial which inspired the QOTM example
395d57b6ebf560f869f0037723ca95037511d64b,added cookie v1 and v2 encoding support
df3ac447ff3b8b4ad67fb79e332185e5ac5a5358,"* Replaced Cookie.setPortList(int[]) with Cookie.setPortList(int...)
* Improved DefaultCooke.setPortList() integrity check
* DefaultCookie.getPortList() returns a copy"
b8f03d60e4bbb73ae5e4e9d33863e3d69f25cd7b,added cookie v1 and v2 decoding support
b796a1d97bdb7483dfc62143e7fca080c39cee3b,"* Renamed Cookie.portList to Cookie.ports and its type from int[] to Set<Integer>
* Renamed CookieHeaderNames.PORTLIST to CookieHeaderNames.PORT"
9c8106948e9c48b28f64bc50e22e405d09f574c1,Made CookieHeaderNames package private
ede831664207868e4a47907e2a65a1ba0ad7c60a,Fixed a problem where the value of commentURL and port is not double-quoted
1912bfc81dfee9e274f03b7a966811c212ad9d5a,Fixed test failures
a26d1e4392777f38d1fe7e84c514469b97e4b70a,Fixed a problem where CookieDecoder doesn't strip surrounding quotes for certain values
199088a7c5e88105fb9016d713921ac74e9cbdea,Two FIXMEs
0da3fcbe51a07c9aba516f0e69fe733cfaabdff6,Fixed a bug where CookieEncoder generates a cookie with 'version=2'
f04003abbe60d863a7a02212d722283078104801,CookieEncoder / CookieDecoder should not urlencode/urldecode attributes except for the value
22eac299d55dac2dfb38c21d97fe04eb79c6e2de,Added missing svn properties
32ddc4541d95740661f0a6b4e96d94d1fa1c5cb4,Updated author tags
d1bafbc65fb5fc725288317ca8b030fe9a4fbe99,"* Fixed a problem where 'Expires' cookie attribute is misinterpreted
* CookieEncoder now uses Cookie.getVersion() to determine the cookie version instead of constructor parameter"
7677aafc1e00a4718a84a983ba576ea1a4baa187,"* CookieDecoder is more tolerant to quoted values
* CookieDecoder now understands the first $Version attribute"
e3f3e8ce5a9f482e425e9cea56e60744d4922385,Cookies can have the same name but different paths or domains - updated DefaultCookie.equals and compareTo
510a270cb4b7366b0835aaf669c096e2f88f95f9,CookieEncoder should not use a Map but use a Set because cookie name might be duplicate
b6cfc2412766c634941b6f1166f0929efdf703eb,Handles client-side cookie much better now
efd5af9313b9638af3aa4e1d8cc0bc56d3afae32,Brought back the encode() method of CookieEncoder
3e6f6384491e7513ded63064424b83724e27ddef,Removed the unnecessary last semicolon
bbf32cae515ec8845f4fa24f467e11194f638d08,"* Prettier cookie attribute names
* Removed an unused method"
dc61906620068c5b49f417b5beba5ce35c2386a9,Fixed test failures
611364e47c8b05145fa4a1697b36d0530adb4e9f,Suppressed unnecessary autoboxing
9e0e310ffe7b3aff8e8e154de47afe090ad0ee9c,"* Improved CookieDecoder to be more tolerant
* Added a test case for comma delimited cookies"
e4c283fb89e31ba944cfcaa79b252fff1fb69b95,Avoid timing errors
f78ac1f29aa738b14ed547ec168ba8c097bf7c24,A little bit more tolerance
3e2bf2e1635523ada4de0412564e952238740cf4,A little bit more tolerance
eaca45eb8af135b6cfb823a1ec3092c4e02965e1,* Reimplemented CookieDecoder to understand quoted-strings
701d8a8aaa08a20e1619e5766b4e3d78ee0c74d8,Made sure the encoded cookie conforms to the RFC
a074c0a95da608355a83fd015327fdd3320fb799,"* Optimized QueryStringDecoder
* Moved DEFAULT_CHARSET to HttpCodecUtil"
5f676a83afde69be89d9ec5b4774e3c736052ad3,Added a build option 'attach-distribution'
d020ffe44c86c4ca9ecd5630ee7d1ef15659f9e7,CookieDateFormat doesn't always use en_US locale
c4269c1697262d6cf769cee0216543891a2db783,Changed ImmediateExecutorTest to use nanoTime
6d4adea536502eb1c7db83680e84597f79356fa2,Fixed incorrect parameter name
566f72abe65d56f80e408a303793896d7db3765d,A little bit more explanation on the usage of HttpChunkAggregator
9b0bf6814816897512e8de39af0fb6089dcae390,Made sure DefaultCookie doesn't accept reserved names
880241366bd48a0032c31c9a2dd1286e2f7f4421,Removed unnecessary System.out.println
4fa8e3adfc1e2f7a8260be0d7966de44c5234a5e,Reduced code duplication of AbstractXnioChannelHandler
7a1963249df455fb075c80b824e1a0120155660b,Ported high-low watermark to xnio
279bd7f0b99a6241373e23cff439c8c66900e64e,Implemented ReplayingDecoderBuffer.toString() properly
a5ab271dc7eece7cf9e9eaa00003a54fbfc46177,Deprecated CompatibleObjectDecoder
7115cf29352dcebfd3bec6e9d8cf2f73107b36c9,[maven-release-plugin] prepare release netty-3.1.0.BETA1
1afcc06ba091e4a41aa8b67e77169a7ec4c25996,[maven-release-plugin] prepare for next development iteration
7565be76e749489595bf9a448b4ca09bc38536ae,Now supports UDP :)
ff9d27ddf8a813e70f3a61374a3679e1659cb33b,Updating user guide
4cad3dc940de52e9ad5459d3ba943221b3566cd0,"* Added a section about shutting down a netty application
* Revised a section about fragmentation"
ac198791e9222188b96cfefe0248085fbefd5778,Forgot to check in the dtd
f777482a9768388698452851fe2f347cbef69aec,Fixed a problem where DefaultChannelGroup.write() doesn't recognize ChannelBuffers
4d61f6bda633eabf24accab08bfb5636dbed2c9e,TrafficShaping v1
cb6269ca4c6867dae667ba6649c6d67ee4c8d00f,Fix according to standard in Netty Coding
8db746d3fd7dd483e28757c08b127563ba4fc9b9,small optimization on channelPC creation
eb4e6bd5567385cfb1c63386a1ac460b6a9b6031,Last but not least coding conventions
66f645cd55ef17587c47490434dada8b4d7dab36,Fix doc
b3f9f91f6a2026df2c937b0815b2abb24656f409,Fix doc
eb80f86204b4c4723c78fe1fb9455de98fb6ca54,
cceab617b007aad3c6d2dc88b61c0b8fe9f7f20d,
acf7a9d46f7b4b45c7ffc9440ea5e67e0966a43c,Made sure the sleeping Runnable in ImmediateExecutorTest sleeps more than 1 sec
0aa58036320e4b0072b8ba1465a43ed9daed4285,0.9 sec -> 1.0 sec
f736fff68769138236136752410e6b9bd1e3c15f,Better null check
9e25ac599a0ee4887655093109aa5ce5233a6c30,started to write the second chapter finally
5960fa30a9ea20874260791dd2855c605922c790,Wrote the first section of the architecture chapter
a52ce24f68a12d111888b49bcebbcfebf17d9633,Added the second chapter to the master
c511ff9872f23d7674d0e8bfc8dc58be76623015,"Fixed issue: NETTY-134 HttpChunkAggregator should not wait for content when the response status code implies empty content.
* Added HttpChunkAggregator.isContentAlwaysEmpty() and implemented it with default behavior (i.e. return true when status code is < 200, 204, 205, or 304)"
c6b707c442b9116b26a99fac16cd067c27628ae2,"Fixed issue: NETTY-137 HttpChunkAggregator should not wait for content when the response status code implies empty content.
* Applied the same fix to HttpMessageDecoder"
4a27c83c04191796113c29ecff151da41646e142,Removed code duplication
4794030eab27bbae8f749541406eb025e62bf024,Fixed NETTY-148 OioDatagramChannel does not fire an channelOpen event.
f0b5bbacf9651ce385aa72c3774193c63ce7c741,Fixed race condition in the HTTP example
c24077cab5c319f6ed1385d069f5c917dd0cb628,
e80c7dbe0eb920d9a0944cbdfa392ff5e51f815d,Excluded container integration packages from apiviz view
27095ce2b430921a01a3d5737de0e7dce5e39bea,Fixed documentation error in Client / Server Bootstrap
5b9963f44ec874cf374ac4057f62dcfdb5b8d1d7,Fixed documentation error
2bd880e94901ce7c27e289ddc2b0b14f3f919f53,Fixed documentation errors
4d6255d4eac9c8ed81cf6e21cde3f7061f72b046,"* Simplified DefaultObjectSizeEstimator as suggested by Stefan
* Made sure HttpMessage.getContent() does not return null at any case
* Improved TelnetServerHandler to send DOS style line delimiter so that it does not look bad in Windows"
f5e42348c71c82a16c9817ee2720013e8f9c5f0b,Updated the eclipse plugin
ec0b3fe3f20871eaff2932a6edf0cf4a41fa7564,"* Moved internal utility classes to org.jboss.netty.util.internal
* Made org.jboss.netty.util public
* Moved ObjectSizeEstimator and its implementation to org.jboss.netty.util"
db6725dcbd32e45e7945c9eb73de2cc0c5a5b3b9,Added FIXME (will be fixed in 3.2 or later)
a96de7590bdf8e1dba970e29934d12e52eb306ea,Updated the package description
7e65f8a9bacd61a7763141bc2f549a34ff58a193,Removed utility package from the dependency diagram
c91b98e2545e9fa9f0ce45ab5ad1bfbeb2e12204,Fixed build failure
5a96ed21950ca8df60603a3f79dd6e33d33846ee,Moved timer utility classes to org.jboss.netty.util
c86bf34b307baa288938aafa6f31b335a7d8236f,Update from comments on ML
5c97c7fd1c3784bcf1ad2e0b9fb5d5fc66d82f1a,"Resolved issue: NETTY-140 ChannelFuture.await*() should throw an IllegalStateException if dead lock is expected
* Added IoWorkerRunnable which maintains a thread local boolean variable
* Improved DefaultChannelFuture to check IoWorkerRunnable.IN_IO_THREAD to detect possible dead lock
* All I/O worker runnables are wrapped by IoWorkerRunnable."
138e521b2274e474c4fd1307957354b690a3f6fb,typo
b22363b728a609cc711b3aef17cd3e8c00cac39e,Wrote another section of the second chapter
1e00b56a70e1cba1c97d9643bf6ac9a06d6edde3,Fixed overflow in the example
67edb9d69d6e585f22a120c497127a66d7b360d2,Update on the previous documentation effort
3970d5c9a9fcc5871e7d074df20e49c398a12c81,Documentation fix
5c95161bf5a061ee3d6b1fbd0ae089b47ad4e0e1,Documentation fix
8ed510e94a419bff59e8f630cd030abc0d85cfbb,"Fixed NETTY-141 Codec embedder does not rethrow the exceptions raised by codec
* Made DefaultChannelPipeline.notifyHandlerException() protected so that AbstractCodecEmbedder can intercept all exceptions."
c55c25291a0ea045f6e6ddb63a03997b499e2ab4,Removed unused member variable
d0ee16781a214f8470462334346519b762c5b72b,"Fixed issue: NETTY-142 ReplayingDecoder calls decodeLast with unreplayable buffer
* decodeLast is now provided with replayable instead of cumulative
* Renamed fireMessageReceived to unfoldAndFireMessageReceived to avoid confusion"
e3fc229b0306db01f94f15108de0c82c957f247a,A test case for NETTY-142  ReplayingDecoder calls decodeLast with unreplayable buffer
cc181204c0e7ddf44cb6af4f2180111a85df7fd9,Various renames on TrafficCounter methods
5442ca360040b8883651ccd8c847a098b82cd548,Made another method in TrafficCounter package-private
079252700b28f56b208d7fa5ac5806e1c6ce3c52,Made another method in TrafficCounter package-private
df1fc4556c83dd5c3ff885b475c2b3ffd4089645,Made more methods in TrafficCounter package-private
70c41e53cce69da19123809643d11ad50406ef34,Improved documentation of LifeCycleAwareChannelHandler
945d2ea3cd30e4744fa2b0db9e6abf04f8114031,Improved documentation of LifeCycleAwareChannelHandler
415702217b191d5fe7967f8278eec70b27d6a9c3,Improved documentation on how an event is processed in ChannelPipeline
248125505de8b59c76755200032022e97f9a4c95,Improved documentation of ChannelPipeline
91d26f5abc635f713e90857cd3a859b99e728bf9,Fixed Javadoc of OioDatagramChannelFactory
b5917ce5763535070499ae7471f1e3d208f5f3f6,"Remove abstract from TrafficShapingHandler
Add method resetCumulativeTime and its attribute to reset cumulative counters if needed"
ce30409da8bc703315e4c28a90a0db7c0e21d441,Improved ChannelFuture documentation
763d0cf809d2623dee7a294a56686c9dd29fe4bb,An experimental workaround for infinite blocking SSLEngine
25a2ade13058f862c99ae80de4655104bcd4fa33,An experimental workaround for infinite blocking SSLEngine
bd7f8a561aa9570ec5dc5d4a26b93195116e4c06,"More example and explanation on ChannelPipelineCoverage(""one"")"
6170cf8cc6f6f1c5ebd195541f38d57008893f23,Upgraded to APIviz 1.3.0
a18a070b60c35ca59ff0776a38db9f3924fac080,ReadTimeoutException and WriteTimeoutException must extend TimeoutException
f1b6534aafca95dccf91eeeaf673ebbde499842f,Reverted back the experimental workaround for SslHandler that did not work
7de2d0c0dff52f0c30d2d394b017836b15456706,Potential fix for infinite loop in SslHandler.unwrap()
bcd3fd5fe55d7f38c3428828e1562ede33379d8a,Removed unnecessary dots in the example
87fd349c66df328a9542cc864a80cf65e32828d8,"* Split the buffer section to a separate chapter
* More stuff in the second chapter"
2e88f7a1088b68cc9320ccfe9733f78704935286,More stuff in the user guide
5d008304cfa0b34442aa7decc5eeaeb67f74b7cf,
638ef60b336c5cd6752738f31a31c8dc0e17c9ee,fundamental - basic
5e00e14e17107a74ec1519d9f5c220c212ce4316,Removed unnecessary sanity check
a579dabe25c41fa4f4641687a45210a2d01834e0,Finished writing the chapter 2
2fe0891f4ffe38de21ce5bce065481892006ebf7,Updated Docbook DTD
90a0796d8d7f92c2a25f0398ed35e4abdea30ec5,* Added the new shiny architecture diagram
29d56ff9753a77f658d4f6680da373b1aac83f95,Updated the overview section of the Javadoc
d01c7e05f93c2fb9c045a63a248cbde6cc0e0ab8,Another experimental fix for SslHandler closure issue on handshake failure
b6ff3a4cad6fdce371cb2e35dea2fe3a1cc9bb27,Added container support for OioDatagramChannelFactory
4d88c5348a0df3f4637e9c5c1c0c09fc6ed98c2a,Added container support for DefaultLocal(Client|Server)ChannelFactory
7376367973540ec4a2117234259bb7f3daf983f3,Renamed LimitRead/Write to Read/WriteLimit
48e258c8107bfd9baacf77f9815ebb781431a45e,"* Renamed following the general naming convention used in Netty
* Renamed 'delay' to 'checkInterval'
* Added some design ideas, TODOs, and FIXMEs"
3065a00d81204ec0134fb5af38d2699e27075f1d,Grammar
e9793ee244466ab71146a9a2bb9ba8f567ad37cc,Added toString() to DefaultHttpRequest/Response
bd1d184d69e1c1d125f5259286aa48e8693fdd4d,Change according to ML discussion
40c4d8447799bfd7bfd1e6d6a3b5621692422958,Fixed NPE on interruption
bb6db4baf886df82f3d7b711a993ea60c1c6e3b7,Removed printStackTrace
5966c93cfeb9c2c5641d418fdb83ac6aaf13d3d3,Removed the traffic shaper from 3.1 - rescheduled to 3.2.
09b2a101bdf6ea4d34897e8b435eef3cc08a5380,Made sure the close futures which are hold by SslHandler are notified when the connection is closed.
b67523ab1c4a5b0780e18750e83086d3615182d8,Typo
8c172a5a1d71701e731635def01cbcfd72b8a8f1,More diagnosis message for AbstractSocketSslEchoTest
9252f449bdb947e079253ec2ce9b406dc7fe7abf,Better diagnosis message for AbstractSocketSslEchoTest
e323b221d7fc88edb1cf824ab92c61be15416fe0,Fixed a problem where SslHandler does not notify close futures when partial SSL frame is received.
1262c45ab3f3c68955b4b24654be6bb17e9a9983,Fixed a problem where ClosedChannelException is raised when SslHandler sends a closure_notify
1e568be9cb77d424258f111021871b03e478df15,"* Exception handling in HttpRequestHandler
* HttpRequestHandler prints the protocol version now"
d425ec761e03f01c79bfc23732e93b36b34923ad,Simplistic HTTPS example in the comment
d8bc5f07f2c46a50e0c10b0bb3ff021a2697f09f,Broken pipe error is reported instead of Connection reset in HPUX
86a2c0c0ceae7408968e36829a3fe96702ed4d27,Used non-capturing group
7d8d924f6b31c84b3fb9a00244c84d0351fc2451,Renamed CONNECTION_RESET to IGNORABLE_ERROR_MESSAGE
7d3fde9b145f315bf28b173adff6e9b668a76ba3,SslHandler now swallows ClosedChannelException for all written non-app data
a6fb8708cad3ecbf825b7f4167984bd1f52afe2e,A little bit more accuracy in swallowing ClosedChannelException
fb8e337293a6d3da781c13fbd031f191cebd78a4,Converted 'SocketException: Socket closed' to ClosedChannelException (OIO sucks)
4bab7516d56c0a19e0ac98b5b8802e4cee2b1590,More tolerance in error message matching
5127313e9781a2652a45b0e0d1c8968fb920b7e1,Updated FindBugs filter
f2f09e66aacd7d4513f644c5041db75ca1565801,Converted an inner class to a nested class
f61412c8289ceb16ac9203aeb743514c1561fcc0,More tolerance in CookieEncoderTest
5a67c13279187d3da168d3491a301a9345ee704b,A newline between methods
c0f82cb3854a25c0a693d2170b6fd6d73985eb52,Typo
c8480941ced3915eec69fa697117ce12db6c5453,Clearer error message for Bootstrap.getPipeline()
71ad5126b67ae327016c01a586895fca503f1dce,Suppressed unnecessary event object creation in OneToOneEncoder
2c8055c9ca57cbbd3d3ac01208530d7225aacc9a,Suppressed unnecessary event object creation in OneToOneDecoder
69ac7d174c85cbd57ef725c77545d420ee5997d6,Replaced the usage of SimpleChannelHandler with SimpleChannelUpstreamHandler whereever possible
14c7e67a0b1c313fc8df7e44f5736d15fc22e290,Better explanation when ChannelPipelineCoverage is missing
f670bb238d6cf398637b82a701303ac792f81691,More documentation on ReplayingDecoder
19cff0c04e8c06a3df52c124e030c14aff36db7f,Tiny Javadoc improvement in ReplayingDecoder
2440a1aabf7cfea8fe7dd810ea462eb12d5e04e7,More constructors to LoggingHandlers
10fc8fb398583996857623e8ed66512d2d6b76f9,Will release a couple more BETA before CR
249b88dc1f32278d86f0aef5cb5c73a2e2cf3b8a,[maven-release-plugin] prepare release netty-3.1.0.BETA2
c5af24045f5e275700b00822449452f5c656caf4,[maven-release-plugin] prepare for next development iteration
106c7e8978329e88efb0480bd9f7c061f97da680,Update license and pom (still Netty out of sync since branch TrafficShaping is not yet part of the official release)
4511a10d5807f6f434c2b6a6414fd08e0a7a3d33,bad commit
58ef4d1cc247563d24b369a9405ee8501703348f,More timing tolerance to CookieDecoderTest
55ed37d82c78c29024f44f5893ac4b34378619f6,Fixed documentation errors (thanks Stefan)
5a18c9143544829c0ddf7d8563d8c42b1b2671e8,Fixed a problem where HttpTunnelingChannelHandler does not log caught exceptions
d2b6078eaa6846dc64936d8b2f35d94552f5977b,Fixed broken chunked encoding in HttpTunnelingClientSocketChannel
212be9327dd572fdadb6bfd610531470b9469b53,Fixed incorrect exception handling
75cf84c5dae405719ab63e2530badcf6990269dc,Exception logging
726ab5236b5404848d823ec47079a62353ba4fab,Fixed NotYetConnectedException
a24959b9ea4251b3b029a333a7de1510bb2be2bb,"Fixed issue NETTY-148: ChannelLocal.initialValue() must return non-null
* Made ChannelLocal.initialValue() abstract
* Null check in ChannelLocal"
c3f3e005d915de39874b7631c0bcd2c8e0901df7,More null check in ChannelLocal
59956be36981cd906efa1788665e27134d85cd98,Bootstrap now implements ExternalResourceReleasable
967bd4d06d4125842bf946401ae3790778331fdb,Made sure OioDatagramChannel.joinGroup() is allowed only when the channel is bound.
5cd9b6722a8d748a5db873f6435df1393a22026f,Fixed memory leak in OrderedMemoryAwareThreadPoolExecutor
a9e3951adbbab5429eeb56250900f3e125ccdc63,Fixed a NotYetConnectedException in closeOutboundAndChannel
67818b4a53d4651370b477bb1ca313c6470653ed,Reduce memory footprint by resurrecting the removal of ChildChannelExecutor
3d568d449b586bf7938b1e3d7d2eb256b96f813b,Fixed OSGi descriptor
563fd2c2864151785388565675dd292d21e7e715,Made HttpTunnelingServlet conform to the good Servlet guide line :)
c4ba12e8d44a23c9456a3abcefa396a44b80553a,Ported the dead lock detector in DefaultChannelFuture to DefaultChannelGroupFuture.
bb8f4da30c76cf4f3d8455215c150f4a16020910,More friendly dead lock error message
4ee657cd0b8b29c2444244f9d6cdbdbe51131173,More friendly dead lock error message
20aecc928fab5116bb1283a1d75189feb283cf14,Updated JavaDoc of the org.jboss.netty.channel.group package
f958d1958cfb0a4746d80570864eb11bd2866e63,DefaultChannelGroup should be seen in the package diagram
22a9d0473c90df45af6b5d04b9f705ae08048365,typo
abf5c76737b758813d5067d2345fc45870382c43,Improved Javadoc as suggested by Frederic
7bdc627b8e318789c2bdb7105a9218acbf3b294e,Improved Javadoc as suggested by Frederic
e489f2e0edcf6d0cfae4e2ab8fa833b4ecfef7b6,REphrasing
120db66aca6e1f597645fa4601837937e405d877,More documentation on ChannelBuffer
cd35c1d1300d78c08f2e45f80533f624157544bb,"* Fixed a potential issue where ClosedChannelException is thrown unnecessarilly
* Fixed a potential performance issue where an unused exception is created when a channel is closed"
f8f1f2ca632d2df7c93643e18b4ee88b294e6fab,ServerBootstrap cannot be used with UDP/IP
f69cb45ff9098b6226451ff2701e2e0d2c416422,Added ConnectionlessBootstrap for UDP transports
ef5fc808a2647c25760d6925d65c3cfb28f3180a,Added ConnectionlessBootstrap.connect()
f3e910bd466217bfcd747c967e489944fd5c6ce0,Member reordering
91c0f5ed56b41a788e385b592d0575f0e06ccd84,Javadoc
e8b186eb4a584ba0a2f5dd5a3f581dcb37c03a57,Moved the chapter 3 to the package description of org.jboss.netty.buffer.  User guide will focus on bigger pictures
942298c537166b81da3503533db86f878bbd8b3b,Cleaned up the class diagram in the buffer package
553796fd751900127e532b2e9e2c590dc6ecd74b,Fixed an incorrect relationship in a class diagram
b01f484b7911ccaff3b9ccbe6881e25e27949897,Javadoc
3cd84789126d62e817661821bba6cc040c5e4909,APIviz diagram cleanup
7ad38e8c8c69bb0dea3b27d06b0f6a8ffa32e77a,Javadoc
d56c90fef56d24551b460de61213bac4085042e2,Wrong tag
14f735438cf56693ce6a3de1293694c88bb6b380,Javadoc
e8aba5ae5a68be8dd64ebedd1c9c207b20db475a,Javadoc
48912c03ac74410489024d6f00a87311e86ea955,Fixed ChannelHandlerContext example and added more explanation
4c564066eb7f923a058ef3761797d8636d39d74d,Typo
d3eae2a5117627bdad7bfef09dbd55b70504b050,Javadoc
7661bcec2d8e8165f17385b8c2faaaf84fd74f8a,Adjusted the access modifiers of HttpTunnleingClientSocketChannel methods
fee1515818448d4210459df10e031a3d5ff7d993,Fixed a bug where HttpTunnelingClientSocketChannel does not send the end mark
d809046987a3bc5d3e7899d966b7263dfcbac099,Fixed ClosedChannelException caused by previous 'chunk end mark' fix
d185a4b8d0f1b823377949ec501ec9d1e56a38ba,Fixed wrong thread name
429e9a22883c14202bb2bc5839035ab2124e4304,Made sure to disconnect on reconnection
da6f2ac96820ab57a233f9c8112d94b7c98963eb,Updated Javadoc of OrderedMemoryAwareThreadPoolExecutor
3ee287bf4981d8c0b337f49458410670bc0c56c9,Updated Javadoc of OrderedMemoryAwareThreadPoolExecutor
6a570765d4a987d489484e487e3f9a26c273b6fb,Workaround for NPE in Tomcat on undeploy
24ec8eeff6ea3652d2df84cbabd0a8897b853de9,Fixed the documentation error reported by Stefan
4877a2e73e4eb693e59c91971d56f167dd90be24,"Changed the pipeline coverage of HttpMessageEncoder to ""all"""
3c79744064a14a8f2bebbbe07b85b4cfec00d3df,"Fixed issue: NETTY-151 HTTP Content-Length
* HttpMessage.getLength() now returns a long integer"
23d922fab26dd2c2030521049d1a8773c2b73cd2,Fix for NETTY-150 CompactObjectInputStream web start (applet) Class.forName issue
4eee24dc2cb838f5ddeba4789add49b8e60ad0d7,Fixed a dead lock in SslHandler
7e3ecf6b469de1a840dd928541339e59e5325766,Better fix for the SslHandler dead lock
06586a6bfc3cf08e23cdafd9bbe6a400954aacc7,More explanation on how dead lock can be produced
64bfa6cfdaf949a267ef91a5df34424fd63da01a,Better handling of InterruptedIOException in OIO Datagram
b2eea97036686a9875ebd24b38b694e8a5c1602e,"Fix for NETTY-150 CompactObjectInputStream web start (applet) Class.forName issue
* Refactored to reduce code duplication in CompactObjectInputStream
* Made sure that class loading doesn't incur security check unnecessarily"
92b336814f169ee03fcba7c4f14eec83df4826eb,Made CompactObjectInputStream.loadClass() protected just in case a user wants to override it
678be7866cea72cfac01051855d2bb4d772050d9,"NETTY-154 channelOpen / channelBound / channelConnected needs to be called from the boss thread in NIO Socket transport.
* Boss thread now calls channelOpen channelBound and channelConnected
* to avoid a race condition when channel.setInterestOps() in the three handler methods above, interestOpsLock is acquired properly"
f92a0fe53795310d3cce770192c7fa167a416fce,Fixed some warnings revealed by Eclipse 3.5 RC1 - previous Eclipse versions might complain this annotation is unnecessary.
4d81a66e26c510b1b231f64e86b8dd1082948e5a,"* Upgraded Maven plugins
* Specified the resource encoding explicitly"
77742f5cf9f2580682b27536ed911621e7bc082d,"Resolved issue: NETTY-156 Improve NIO worker performance by removing unnecessary SelectionKey access
* Applied patch by Wade Poziombka
* Reduced the call to SelectionKey.readyOps() even more"
ad6888a635f0490ac5f4b63208f4fb911eaabeb5,"Fixed issue: NETTY-157 NioServerSocketChannel.close() does not trigger a channelUnbound event.
* Fixed a case where channelUnbound event is not fired if the specified future is the close future actually"
25eee122cbf083eee1ffeb226418bd40afb0d9ca,More comprehensive exception message
031c26482ca049b2fdfa2d9f9decc8ea30e2a2da,"Fixed issue: NETTY-158 Can't set the default byte order to little endian on the client side if FrameDecoder or ReplayingDecoder is used.
* FrameDecoder and ReplayingDecoder now create their internal buffers only on demand so that a user has a chance to decide what ChannelBufferFactory FrameDecoder and ReplayingDecoder will use."
f0a96e7417002b0c786ce837a8711bee5e1e0895,Tiny optimization - no need to create a string when there's nothing to log
55cf5d67af2d9d9f12d211b664486c448f8669c9,"Fixed issue: NETTY-157 Channel.close() does not trigger a channelUnbound event in some transports
* Made sure the specified future is not marked as done before setClosed() is called.  The specified future can be the closeFuture of the channel, consequently making setClosed() always fail."
1f6591feb2bbbae660e03b4e0a5973e9e26ef08e,"Suppressed error log which occurs only in Windows on connection attempt failure, because it can mislead the developer to think there's a bug in the test / impl"
6da3fb5a90dace40e4403672164f71e78a0f1779,Fixed FindBugs warnings
7b87b1b23c4d7673ea50f45d734009daea4ee049,Made LoggingHandler more extensible
903fde7704c582365309a6065d27af25ec80dbe9,Method ordering
7452e139c1d1450a0bf5b8401f315d863590c44e,Method ordering
96a751d9b0879a62fdfb9ca3d7851eae2ec5a7a9,Javadoc for LoggingHandler
1116ae4733d10ffd791851841b02fdd970087503,Previous improvement on LoggingHandler was not logically correct - stepping back a little bit
c5c3fbcb20eeeefd3e44edc93f3d8696cbb07f84,Updated Javadoc
63c94a4edcc250a1003acbb6c4208af50a6d9871,Fixed build failure in Windows
4bdf2ad00ec12a0a25e08548c488d2fb66f57a1d,[maven-release-plugin] prepare release netty-3.1.0.BETA3
af3cd875f09ff382d4a77547f9356ca7889b2939,[maven-release-plugin] prepare for next development iteration
382099fae2ad7f7502f129ef7aa079061d7d2f1f,Fixed issue: NETTY-160 Make ChannelLocal non-abstract
d4c2b7d70d0bbd0114014fa6f0ccbb4a60d2a63c,ChannelLocal shouldn't be abstract
ffe2831502c36fbf17b6e5a2b96c0633833bd838,"Fixed issue: NETTY-162  directBuffer cannot create buffer with LITTLE_ENDIAN endianness
* Added test case for little endian direct buffer
* Fixed a problem where the sliced buffer's endianness is not set"
151bf08095137c7e19b174ae7e0a1f330f62cf65,"Fixed issue: NETTY-163 OioDatagramChannel.connect() hangs if called on a bound channel
* Set SO_TIMEOUT of DatagramSocket to 100ms"
3c29ccfdb56635bce9d45ee15bef7da5e57346ff,HttpClient should use HTTP 1.1
5f27babff4d3e11f9b38aa85b71800891fda0a9d,"Resolved issue: NETTY-161 Provide a way to get notified when all I/O workers of a ChannelFactory are terminated.
* Added VirtualExecutorService"
21004622351a83647c80b0dc74839307e70639e8,Fixed compilation errors in VirtualExecutorService
3acda248c1ebdea704ba9aba0ee113389222d3fa,"Fixed issue: NETTY-164 ReplayingDecoderBuffer.readableBytes() and capacity() should not return Integer.MAX_VALUE if the connection is closed. 
* Added ReplayingDecoderBuffer.terminate(), which makes readableBytes() and capacity() to return an ordinary value instead of Integer.MAX_VALUE"
1609e1c3478fbdab7140060e8c6267eeec3e0ecb,"Fixed issue: NETTY-164 - ReplayingDecoderBuffer.readableBytes() and capacity() should not return Integer.MAX_VALUE if the connection is closed.
* Fixed a problem where ReplayingDecoderBuffer.readable() does not respect 'terminated' flag."
3aa91b0904e53c086b2aa54c67b09a61faccd1ba,Modified HttpResponseHandler to print the 'end of chunk' marker
ee3440567c4241a0653648783e031c163e10db30,Prettier output
553c4d2df877ea33777b69b98870a65d0a3ce73c,"* There's no need to send content-length header if HttpRequestHandler is going to close the connection right after a response.
* HttpClient sets 'Connection' to 'close' so that the HTTP server closes the connection"
c4bfb451833e04442197e442b65288b2d802691e,"Fixed issue: NETTY-165 FrameDecoder and ReplayingDecoder must call decodeLast even if there's no data in the buffer.
* Made sure decodeLast() is called even if the cumulative buffer is empty so that a decoder implementation always get notified when the connection is closed
* Updated Javadoc to explain that the buffer can be empty"
02ba3b553a835a052afce2a9dcb82523ea352b7f,Removed an unnecessary empty line
df06536818d05f65055929108da09dd8b18159d3,Fixed test failure
7739f0242383137c1b95a4ed76faa325d08e9d26,Removed System.println
d4071e87ef3a6bc826fc01331e3c23e2b1f1a6bc,Added more exception message pattern to detect the exception related with the closed connection in SslHandler
345a5512ab257ea3e5ad70f5b150d6324e3660cc,Made sure to clean up the cumulative buffer on channelDisconnected or channelClosed
76777b74b49a379cf780316a5155722a429d1a7c,Fixed a problem in the examples where the client process does not shut itself down when a user typed the 'bye' command.
5273e274de8e8e4beda5ee8185532c2b446f4561,Made sure interestOps is updated before OIO thread is interrupted
663fe81af2a3ec9d226aa673bd527b2d8a41b284,Made sure interestOps is updated before OIO thread is interrupted
7339e172e090321e6251fda158e4b63da8854f3b,"Fixed issue: NETTY-166  Dead lock triggered by OIO transport and MemoryAwareThreadPoolExecutor when WriteCompletionEvent reaches memory limit
* MemoryAwareThreadPoolExecutor does not count WriteCompletionEvent anymore to avoid dead lock"
bb6f5a6104d663f66fa52e1e93da431b94e797f2,Fixed issue: NETTY-167 resumeRead() sometimes does not work in OIO transport.
afb7e511ada4c1c95ce7e84a66cc096a9cc7359c,Fixed a case where HashedWheelTimer notifies a timeout one round later
645ba6d3b9ed4bb8e522f706191b7c01e2b2650e,Potential fix for AIX close freeze issue
be12a1bdf1e5e85e7c08ca58b6598fd04385712b,Disabled NIO constraint level autodetection for IBM JDK 1.6
583ddfe992ff5a885bc9d71c182af6df7457fe98,Fixed compiler warnings
c0deea647ed2ef03146a128eb77adb9a8757465a,Ignore IntelliJ project files
734a5a46d481040ebda476feec3680de9d2593b8,"Fixed issue: NETTY-172 Let user choose the I/O thread names
* Added ThreadNameDeterminer
* Moved ThreadRenamingRunnable from org.jboss.netty.util.internal to org.jboss.netty.util because it should be accessible by user"
effbe32fdb21ce7b0faa4a7f491c77b612c01488,Merged Daniel's NIO UDP transport into trunk - needs more review and cleanup but looks OK in general
c01e997a4597446ea3c9a112d4b7d23378abca70,Added some javadocs and removed unsed code and excessive comments.
d202db83f0fdcb5440ac4146ab1b6550643234ae,Updated license headers
4b263dfb0ed282b2715611e9db969b2ada34bc98,Updated license headers
3473135c7b862b6d5a7515067df207dc261213d7,Updated @author tags
1a309bff3492a121d11c89ac0276377f395cc619,Updated @author tags
e4871f84601ed766743d2266e1fd8cfbaa57678b,Removed predictor from DefaultNioDatagramChannelConfig because it's already implemented in its superclass
899b16678f4a86354736c444b9c214b8ae055a4b,"* Merged recent changes in the trunk to the NIO UDP transport
* Other miscellaneous modifications like typo fix"
fa3eb52f4e0f5265750fb49e6302d4363092aef2,Fixed NotYetConnectedException on setInterestOps by backporting the fix applied to NioWorker
8f4e0b524cb105aa36fc452884ab390367ad98a4,NioUdpWorker.read() now honors buffer factory's default byte order
e9d07c3c2eaad9ddb73673795c3ded6ff2c8b414,OioDatagramWorker now honors buffer factory's default byte order
0a5019385c1bec0ea41350b508798433c6ab5743,* Added detailed explanation on NETTY-114 (not to forget why I woke up selector again)
d42ea03799b3df4fb87cd9476673e9132fe61106,Fixed incorrect or missing event order in Bootstraps and NIO UDP transport
01d8de26cf6cd55cbcb698922a8eb29dd87947ea,Fixed NPE in NioUdpWorker.writeNow()
ee3ae043dce864e37b44f4e69813f89c1e6f7071,Fixed NPE in OioDatagramWorker.writeNow()
08107683b3e2625bde9ac2e8892f62a48193ee45,Less memory copy for OIO datagram transport
7a4f00201aa4efed3cd27bafc432db6f02bd8b88,Renamed NioUdpWorker to NioDatagramWork
0067371e247cf93cfe671ebe5626530377404b19,Organized imports
ef40ba79417c5e33da6cc626855f50d46713c37f,Added a proxy example which is asked pretty often
ad8bb7eaf63a952daaf7a21cdae26a687b329d80,Removed an unnecessary empty line
666f57a35e04790d33e72978105d4c7488e4db18,Fixed a bug where a wrong channel is closed on connection failure
40bf0a63f169188251ea2651ecb899413238bf34,Unittest and javadoc.
f22f0b2035ec4fe3bfc3a261e1613bd4f45bf6ef,CompositeChannelBuffer.toByteBuffer() should return the ByteBuffer with the same order
a979433f918f569a13890bd9f2485385c29690e2,Tiny optimization in HttpMessageDecoder.readHeaders()
8debedf6b6092161b5f14fdad33c39d5a700ca29,Removed the slow Class.isArray() call by returning Object[] instead of HttpChunk[]
5fb8e8069b54fb214a8132c9e990662733209de3,Tiny optimization that makes header addition faster in most cases
5ae0adbfaa56d49f62fba97c9ff88ed7b27f13e1,Made sure composite buffer consolidation happens only once by converting CompositeChannelBuffer to an ordinary buffer
e410abed0296fb084ee6e612ef52e215748501c7,"Fixed issue: NETTY-173 Do not use Class.isArray() in ReplayingDecoder and FrameDecoder
* Modified FrameDecoder and ReplayingDecoder not to use Class.isArray() anymore."
160866e1a009a52ec37a8023f9e5aa1c68b04a3a,HttpMessageDecoder does not use regular expressions to decode the initial line and headers anymore so that it performs better
e39d8720d286bdd62d7aa977afc0c0925c9e045f,Applied composite buffer consolidation to NioDatagramWorker too
d76bfe72b5831f7681c807dc498c0aa79fcb363b,Fixed issue: NETTY-174  Always use 'ASCII' charset when encoding HTTP messages.
f059f91ff4b6f4f5e556a09dbb41426969da82fb,Code simplification / optimization
12acb2cf093c7fde7afcf3297735084628f3574c,Fixed a NPE in HttpMessageDecoder.readHeaders() on a particular malformed header
aeb7903be8f287e8096d5221092a126019748855,Fixed a mistake during optimization
bda2f0a852f01a25211fc3837dcfbd28d4639224,Fixed incorrect state management for HTTP header size
ee8ffec2657e0fc365fab5b8fc9a9272df1fc0a7,Optimized HttpMessageDecoder.readHeader()
c08e7dd397fd65402ba0df17b67035e38b9eca5e,"Issue NETTY-175 - Large data transfer
* Added ChunkStream and FileChunkStream
* Added ChunkStreamWriteHandler"
c2169f2b73b7dad4ca18956c7af423242d4eb17d,"Renamed ChunkStream to ChunkedInput
Renamed ChunkStreamWriteHandler to ChunkedWriteHandler
Renamed FileChunkStream to ChunkedFile"
bba5b7bd429c6bf9d21cc9c04a4bbc9c794e2f10,More validation
b19d488312f1c9a46a73bdfb534f39f0f90239c5,"Related issue: NETTY-175 Large Data Transfer
* Added ChunkedStream
* Moved ChunkedFile.DEFAULT_CHUNK_SIZE to ChunkedStream"
f9c38bb76b57141196d4d5dc5cc40995320c75f0,"* Reorganized HTTP examples (will add file server example later)
* Fixed configuration errors in the HTTP tunneling transport example"
e8d42cbc4644fb0e460ee7528c54ea3163b5eb63,Updated author tags and version tags
6fbd8a080ba5f64dea60a434b40a5c73dd05448c,Updated the copyright information
6e4331d9f7fa254ae6b10356ebf3767b510c3e9d,Added a static file web server example
aec7fe1704f08615c5d4ac37dd5d8aa31b45cb9c,Update offset sooner (Before getting any exceptions)
887e0b6de7b02204f1002675c5f8a5e10d2f4056,Oops wrong variable
575973863f3b32b9de114d4c18c27cd89d4c24a3,Added missing exit condition
51b6e05b0d09064b34009d4b12580c1b8f83d3a0,Added missing return in the example
4f4cf07760f52d2b7e285b87fcc741a9717c6c48,Removed duplicate file separator replacement
373cd520127ff033c57e8d54635fc63885246e88,Fixed a problem in ChunkedWriteHandler where channelInterestOpsChanged event is not propagated properly
89439266251ea8180b848a27776f4f97a33d0cf1,Javadoc
10a110c564aab4e383e18f8e65916389988e2d47,Javadoc
262fd48e28ab8001cc0bbdc316dcc460e0b562bd,Typo
1826b88622e71dc89b5a92e3928f3a9a16a7f145,Javadoc
73853f1b04186557c7170cfc08ad3906e7b4e91a,Javadoc
28511fcb9e430fd88c9305eafe4808dba401c7de,"* Javadoc
* Added EstimatableObjectWrapper and make ChannelEventRunnable implement it to avoid an evil circular dependency"
8b5a652883b55006a859b1f26df329bc56b1b823,Javadoc
e04d8e9de128be87bd9ff80cf3c8d3fdb923e922,Javadoc
b9cd9de5ed58df8a6b5fea6cec6a5839e26fec9d,Fixed issue: NETTY-176 ByteBufferBackedBuffer.toByteBuffer() and slice() do not respect byte order
70e90fc85eadb235f7eb7c44d388d6ccf718832f,"Fixed issue: NETTY-176 toByteBuffer() and slice() sometimes do not respect byte order
* Added tests to make sure all ChannelBuffer implementations are fixed
* Fixed the byte order problem in HeapChannelBuffer"
c838c2aea3400072a5a49b034718c2b1cba280de,Javadoc
ca11f9027056c91a25358532ed3d8ef308ab6820,"* Added ChannelBufferOutputStream.writtenBytes()
* Javadoc"
48a5d95dac5faaa7873b0b43556130be835c4d48,Javadoc
9092d51b046644566109817aaac91b06f2a872ae,Javadoc
35eac01e40b4c391113c4b7ac2407ec4348e5bc1,Javadoc
843b530c64ed27ed72e5af7cae6102ac99d4d723,Javadoc
29da4301834f9df46504c0962fef7f2a805dcde7,Javadoc
d16639d3ea81d3822c0a4cd6204cac5ab963cdd9,Javadoc
f40bb1d522c5c567672ba9a5af44aff23a0bf2fc,Javadoc
0f8c1be14245f1d7457e367c846471794274b9d9,Better explanation on what the local transport is
48634e3d3000205914d155cba2202babccd964ba,Fixed typo and a compiler warning
2b33c26e7204c06807ac7c70bb27a225a54862c1,Javadoc
e1abd56c1d07ee7af134d27fe03878c1868aa191,"* Javadoc
* Backported fixes applied to OioWorker"
fae990021116e13e2a2f4e4c6a22d22241e0d229,Javadoc
a0adcf8dc806f3e1c7c55a4fde0859ae2e72746b,Javadoc
d2e91d2a459121fb29ddc1d40635252e042ca58c,Javadoc
f8bba65b28c9222cd3e820495d5e1ecf63f79c29,Javadoc
418557248a1cc0fa6da84a72cfc4bdd98fbc21ed,Added NioDatagramChannelFactory support to Guice integration
bcc697110fa128ec763bed787a12ae86271a7fb9,Added NioDatagramChannelFactory support to OSGi integration
1146c7072d83c04bafecfc64ac1cae61eb4e8b86,Added NioDatagramChannelFactory support to JBossMC integration
ce3bf8fbab9de05771bdcfe39b501b0ec68da154,Added NioDatagramChannelFactory support to Spring integration
8c1335dac1ce6cb9f00e01858cced69c1575aec0,Added missing bindings in Guice integration
fc294510c1c079e38ac75981d90158eef661f9d4,Javadoc
fe025091a76b1723bb5a24160c273966fe7ac4bd,Javadoc
bf6bc95c6315afb0991b58bcf4a06e447b705a7f,Javadoc
e79d45727de270c62eedbae53004d0ce52c7d0cf,Javadoc
a56d3306c1f909eefc120dd36d8961294b3975bc,"* Javadoc
* Made AbstractXnioChannelHandler package-private because it's not necessary to expose it to the user"
ff5ebb0a157753c0e4b3f5bd9fb8357d81d53d27,Fixed bad tags
4c9ae49bf817cd4fab5e814974e773432fb00d0c,Fixed bad tags
c898a55dad735ade16e627a0d28e6f062b76f127,Added Javadoc linkage to XNIO
8657220bf4ae74f1139b2736d181a582f7ef54ab,Custom stylesheet for prettier Javadoc
cb5b1a7612a0d8d66bfdbaf979f3ab329510cbc1,Improved the custom Javadoc stylesheet
2729f88bdf81b62b9e58b28f4cfb32a647b9ae4d,Improved the custom Javadoc stylesheet
eabc83fb920fe9e7aa957593532676cc37c06add,Improved the custom Javadoc stylesheet
192af44253d808ff0e56f73a7c5dd3377eaa643f,Better monospace font precedence
d784a684789b69b244938c1abb619c4e56b78432,New organization name
72f1162729a6bc7bfc256e3e27c1fa3d8878ad4c,Javadoc
cad86962efb9940d8e79e4d38798f0eed3738956,Javadoc
230113c0c64c0ef868067cd4872753c7f362f123,Javadoc
4d0facee9f0f2fba990500afec368639ebe1f055,Javadoc
d4a8631e6256ef63d308edaff70a15baf28ca7b7,Javadoc
f38fb2b7426f6f094f5b895d14d19c06a9133220,Typo
a26ebc2bc1a2a85ed748296c12e997ef017f78e5,Javadoc
10009a05fbd218a8912a21a67beae7323fcf800a,Javadoc
2b0ec506ecd2fbd536d1d5ec7051d1d3184aec0f,Javadoc
46a7f6ff5fc7acf61a791e576a9c423819274ba3,"Fixed issue: NETTY-178 ObjectEncoder encodes array fields incorrectly.
* Made sure CompactObjectOutputStream encodes the class descriptor of an array type correctly."
d14de97a72078b369c4022c6245318a83f628f32,Javadoc
bf767a8f6c8a110576fc7211b777488053c09235,Javadoc
91c497f1e0d787b39a81363ec2180c3356e5e835,Javadoc
d5c4cd3df7d4af2b05f18efb07a76e9bc25c8c83,Javadoc
8f2096a040c0011cb7532346e151f4b9a4c25b71,Javadoc
cd23da084afcdc291eaeae9958fca052f1dd8887,Javadoc
cc0e6020d1db41e9edb875da50f64edbeeb8f0b9,"Renamed ChunkedInput.available to hasNextChunk
Renamed ChunkedInput.readChunk to nextChunk"
9207f35b14fa7a1133729062b3ce79fe1046fa69,"* Hid AbstractCodecEmbedder from user
* Added @see tags to the CodecEmbedder implementations"
82c55287a2ab159c08ee6032754208c67d198e8a,Javadoc
f7b2b3b1c3628ed72f8641c3d6dba420221d4d37,Javadoc
40ce9194885103488f5da3961bcfcae466039b4a,"* Added InternalLogLevel
* Added InternalLogger.log() and isEnabled()"
a902cbf970c21fd94c43ff69dc454927d653fc91,Allowed LoggingHandler to log in a different level
369a363855bb62f338695744eec411a7e4560945,Added LoggingHandler.getLevel()
81bd15f8e9ebfe4080918284c8fb263ca181c5ef,Javadoc
592e62573f4d3f861c07dd0722bec5cf69cb082e,Javadoc
f19cfb45e9abec3415b8bfcb7b2fbde097fec313,Javadoc
c630a6ea65b2552689dbe016d748f8856a02bb94,Javadoc
dba344bd8e54ab101d613750079c5032a1f46ceb,Prettier Javadoc stylesheet
629ae769d7d21740ac723d08088e25bcb04c889f,Javadoc
eaf931ac92becf7f8ad697253b84e237c11d031a,Javadoc
120eeabc79aa14377b64a71d6c06ddf78723661b,Javadoc
aa0a8f17c83104f99cbc2033e4445f5ed0655bdc,"* Added HttpMessage.isKeepAlive()
* Javadoc"
673312b22e96ab358da092f6f903a25930c0935e,Javadoc
997dc9081a5657b28038314eec4e3c363925b90e,Javadoc
2aa6f3e48db90b5a2f2723c5725c8982794027ba,Javadoc
7accf4d29d3d9de51b0c5566918290a97a2b9564,Javadoc
0047563eb584445a2dbeaaa6a8dee0e9812b158d,Javadoc
44c7818ae864dade3cb10fe388953f37001738cb,Javadoc
6058cf3981dc4cf8bfb4df9422a4624b6b23e8df,Javadoc
4e2be133067d4b7c8be5d0569305d60b011476b8,Javadoc
85f1db74597cdda059e3a31c920d2d3b132ad41b,Javadoc
54dd31c449f465cd4db8f2e800e5618962750088,Javadoc
f65b53917d291a5899877e6d25f596f71c5400e3,Javadoc
a7c2914163a2a52d40b0652dcd4422525b62d8b6,Javadoc
1b56a56c2f12b5c7258291558c9e9a9e451b6ec1,Beautified JXR report
82e826440c424e4d174e9194f9cfcd8af2e48c5a,Added missing license headers
caf0a97ba3c13d9585e10177cdda614fbac4c51d,Fixed license headers
6fbd3871a335d2c04425ca28c5638ecb301351e5,Fixed license headers
9939012684f9cbc837c97139e3114aee00c6e26d,Preparing to release Netty 3.1.0.CR1
d6d8cd3ff2038a59f3307df7fa7260b03ac5d738,[maven-release-plugin] prepare release netty-3.1.0.CR1
1ba36a6cd1d803c849114e9a3247cfa000f077d9,[maven-release-plugin] prepare for next development iteration
27ef64f54932e2bb616e0f7e680770dc87eef6c6,Removed an empty directory
8448188706b3d8ee9bef3d05e8cfe76cf81b58c0,"Related issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline.
* AbstractChannel.toString() does not use isConnected() or isBound() because it can lead to inconsistent string representation when ExecutionHandler is in the pipeline."
5698904374b1815c537e77e2b6255b66ba0b156e,"Fixed issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline.
* All Channel implementations but DatagramChannel now cache localAddress and remoteAddress so that they do not return null even after the connection has been closed."
590ebcc39485c912cf829571e6acee303fcc5a06,"Fixed issue: NETTY-180 Channel.getRemoteAddress() can return null for a received MessageEvent when ExecutionHandler is in the pipeline.
* DatagramChannel implementations cache localAddresses now
* DatagramChannel implementations don't cache remoteAddress because a user can disconnect and then connect again.  However, MessageEvent.getRemoteAddress() will always have correct remoteAddress value, so it shouldn't be a problem at all."
d963f4c0467d6a5f059365e1d7735c05de499c14,Backported upstream updates for LinkedTransferQueue (NETTY-181)
fa51403eb28df51e78f25518579e450d562a587b,"NETTY-182 NIO server socket sometimes does not shut down 
* Swallow ClosedSelectorException
* channel.isBound() check for each loop"
8dd55b0368b432853992ca3bfe5e6fad4c0eb0f5,"NETTY-182 NIO server socket sometimes does not shut down 
* Should not break the loop after swallowing exceptions in Boss."
3a2350158deb828626653713882cb9bd1cdd15f0,"Fix for NETTY-183 Client-side HTTP tunneling transport logs and swallows an exceptionCaught event.
* HttpTunnelingClientSocketChannel.ServletChannelHandler does not log the caught exception anymore. The exception is propagated to the HttpTunnelingClientSocketChannel's pipeline.
* More comprehensive log message on the server side"
cfa4e5e4ee75662b98ba069c1af5934a204bd6c6,"Fixed NETTY-184 Provide NIO equivalent for ChunkedFile and ChunkedStream
* Added ChunkedNioFile and ChunkedNioStream
* Added another convenience constructor to ChunkedFile"
fb8cc156f33447c29bd32ba6e022d9af42703be7,Fixed NPE in OioWorker.write when the socket is closed already
dde115525b497f9ecc019563b1737e703b142bb4,Added SSL support to the HTTP tunneling client socket channel
1cff6738bed5f9bfb7c2443088e8b00f7d4d7491,Made HttpTunnelingSocketChannelConfig public to allow an access to the SslContext property
147173e56d873ee8e5e2036be105ea775b36caa4,"* Fixed potential concurrency issues
* message queue should be final"
de717916beb07b973042e98fd90071da19e4af7d,Added more configuration parameters for SSLEngine
2997b5b40a4f03e851b873e310badc4ea1fb7e38,Fixed incorrect option handling
1c954d2902bf65282cc4fad3b345e5bf55dd5673,Javadoc
6765d097e53c68c85c867466e1bcd4c01bbec160,Fixed a timing issue with SSL handshake
c2fe9778af631c6ca54e88c94af4c145c485682e,Fixed a bug where datagram channel configurations are not reflected correctly when set via Bootstrap
e9d2c503f3bedad1affa49e9533bab610a806ef9,Removed unnecessary if statement in setOption
959e72a6b04aef3818fbb37e629a3c51a40c9277,Removed unnecessary SuppressWarnings annotations
c0267a9e4f29d51edb3579f145076df1c6166306,Store datagram channel's remoteAddress as much as possible within the extent that does not cause a race condition
c8a9142ec7c325d821edac29aab903c5b76b0ceb,Put some notes about the current issues with HTTP tunneling transport implementation
6158f7772fd321783ea0fffaf3df052f05c2e2bf,Added more HTTP header constants useful for MIME representation
281b4507df17a7355ace0133e5c364e112390655,HttpMessage.getHeaders() never returns null for convenience
9ef9b3753eddf3a7877aa5270bb3ca80dcb12750,Added Set-Cookie2 to HttpHeaders.Names
cc13dba4981959d810d0c41ffe7e2e507a745205,Traceable exception message
307c00e0739bf56bf3779b85440fae45fb3b1f15,Traceable exception message
012066cfa92896c794d1182c843c413e8f223407,Used org.jboss.netty.handler.codec.http instead of custom decoder for maximum compatibility
d35a8d29b1bbdc555660b26a8238c9fe4968bfe7,Eliminated unnecessary use of thread pool in the HTTP tunneling transport
78dbbe76619662b9bd8b824f81f2c4011116b384,Fixed bugs caused by today's refactoring
0d263b85e5275490014b1da27b5e9434a7ac6a83,No more awaitUninterruptible
f0233fc1b87400e71f262662fcac4f2e042f3814,Removed a resolved issue marker
6805ea719be0930f867c2c4736e7dabd1ddfe490,Fixed a problem where HttpTunnelingClientSocketChannel.setInterestOps() returns a wrong future
81cb42f37e69b2b82548e72743382bc8090e2895,Indentation
142bce45600b6bbd24b88d65710c99aac2b5f084,"Fixed issue: NETTY-187 Subsitute ReplayingDecoder with FrameDecoder without losing stored buffer
* Added ReplayingDecoder.actualReadableBytes()"
53beb9c7e68ef114fee3efd1405ad9fbf045a827,"Fixed issue: NETTY-188 ClosedChannelException in the proxy example
* Made sure all write requests are flushed before closing a channel"
31ec36f3bbe83a8360725a1ae6ded44564d0ee68,Optimized accept throughput by removing the usage of a temporary selector
580a6e491a91fe4d53b43630440f952e376f7156,Fixed indefinite blocking
4497d9362a4347a82acc9d611df544eb64e2ca18,"Fixed issue: NETTY-189 ConnectException: connection refused in Local transport
* Made sure local address is unregistered only when necessary"
f414e425e7185761def750e78f0c5499944ca8ea,Set daemon thread flag for NIO constraint level autodetector thread
14e8f0a75e939730f0409587d1b6ca016190174d,Some system calls can be called later to improve accept() performance
050c2c793fa81043244a020dd176387ce7b9e71b,Calling accept() many times doesn't seem to help at all
d7d0877ede2f59ced2e5639d212883e0b6690b15,Forgot to revert the experimental change
cae3010d6e9a3588b6aebb38adfe3382aa5913b8,Fixed performance regression which occurs when a user tries to write something in channelConnected()
75688a719dd2ff1c7cfd5b5c352da311aade6d62,Allow 0 (use default) for backlog value
0fa25a96a0cc86b63b6f5368bec34c7227649504,Accurate NIO constraint level determination for IBM JDK 6
7c78539cd54e687b0d6ca585e3b1d95e70f3ff08,Commented out debugging purpose printlns
fecfadb853cc1c4dabc58a1a680c224873f97445,Fixed issue: NETTY-191 Raise ChannelClosedException only once when many queued write requests failed.
2ff93e8705d268557cf87a4b9cd522aaeb2e9543,Removed unnecessary member variables in IdleStateHandler
f59f480fb7ae2e13023a05fa9e234063a757da23,Code clean up
f9c2f66f19af207c157b51b3b41578399f885919,exceptionCaught event should be triggered on connection attempt failure
25d50232672521a1ef0826241f279d46f3280b8b,"* Revamped the HTTP tunneling transport
** One HTTP request/response corresponds to one socket connection now
** No more reconnection
** HTTP server should not disconnect the connection or close the request or response prematurely
** Added related documentation and updated the example"
f90f701a8dd0a38ee52f420472648cb60bc6d622,Added a link to the package summary for HttpTunnelingServlet and HttpTunnelingClientSocketChannelFactory
cb1c079380ba574ca29f0609e11a1a5ad76407d2,Typo
5fa73d2af5e9ff641649f41af631cf73036f39da,Example sync between package-info.java
28c64f147717ce09c8adccf3086545e7a4741b93,Documentation cleanup
8351d6d4d0892034ea2982ba564786719cbe682a,Make sure HttpServlet returns from service() when the channel has been closed.
a53388b85967f69e77a6226cb83d8981faa7b0fc,Removed the test code which was added temporarily
44110a281e4f541b6544c06a5744bbbaca701262,More convenience constructors in LoggingHandler
99261232a0a1fcba8ef52cdee69648b91e65a35a,"* Optimized HttpTunnelingServlet.read()
* Do not strip \r\n in HttpTunnelingServlet.read()"
046aae6ff8a0d3b37645d7df89d72d6d8121acd3,Do not expose the server-side exception message to the client
5b8f9b73ec7650faac063ff99f0f9806f53feb76,Regenerated serialVersionUID
bfaa647bba22ef82196580be614aaa02f8ebc3d0,"* Fixed a bug in HttpTunnelingClientSocketChannel where the HTTP request is not sent if the scheme is HTTPS
* Fixed a bug where HttpTunnelingServlet does not catch EOFException
* Added HTTPS support to the HttpTunnelingClientExample"
43d2fb47bdc7c24081254a1e415810d415d56e7b,Fixed a bug where Channel.write(emptyBuffer) does not complete when SslHandler is in the pipeline
cf57e4c42bf694828f1efbbbd102a78b9bd159e5,Simplified HTTP tunneling example
7b61bdc08fb3f30b56a1a80e9a1acb6a2cb88403,Fixed a bug where WriteCompletionEvent is not fired for HttpTunnelingClientSocketChannel
f4cdf3c3f81a5b5fbce4c8d9345bbfedb24a2cd8,"* Upgraded dependencies
* Re-generated Protobuf classes"
01dffb1ad862c78072d1b70c3e5231656cdbbc0f,Updated maven-jdocbook-plugin
ea81870a28503b8d09e2cdfa8b4a045f65675f71,"Font embedding
Bigger program listing text"
827effe4e28a687c99b3676f4c7486e9b6bf4893,Fixed another dead lock in SslHandler
4021ef46929a62148b148a0ab97292713f18c77f,Improved SslHandler Javadoc
3d0ed106fc22c338457f714b78a2d2544f0a1390,"* LocalServerChannel is not a LocalChannel
* LocalChannel.getConfig() is not necessary"
c74fe22de3e18dbb8770361fa0aa7ebc60f1e6f8,Javadoc & null check
37cf2553fb3b24ac8045f9e2a3d76723a16113f8,Fixed a broken link
8ec352de7adc57c4b21c1b288f0437506ebe94d1,Added ArgoUML project (work in progress)
89a4bd9d4e5726f20f366ae0b306c447fd16d1b3,Added a global flag that disables the dead lock checker (use at your own risk)
90329ef978589a61428fd3afe80c727ae348e2f7,Updated APIviz tags (work in progress)
17bbe5d3eef71b52579efdec9903d3190968dc85,Improved Javadoc of Channel.getRemoteAddress()
7be842be05f5ec32f96b3fafd2515a05ba29fa65,"* MessageEvent.getRemoteAddress() does not return null anymore
* Improved the String representation of MessageEvent implementations"
3610fa9608c25914cb46081d48a082a5d6ed5cb4,"* Updated the Javadoc of MessageEvent
* Improved how getRemoteAddress() works in DownstreamMessageEvent and UpstreamMessageEvent"
2cf78169031c35ce3589ce879ee87368e7b32a1e,Reverted back to the previous MessageEvent implementation that should perform better in most cases
5c49cae981cd82e8146177d6d5aad41e3311abbd,Reverted back to the previous MessageEvent.toString() implementation that is more correct
f15db3a65e7ed57c4401afe33607f0113019362c,Updated APIviz tags and improved Javadoc of the HTTP codec
0277a68c4920413d0a89f8d2adedbda4d70091e0,Updated APIviz tags
f671fd38adb25017d56e3f805a360439543afc24,Updated APIviz tags
2d4dfeffaa6c87a3de7b278188112d38182246ea,Stylesheet that is easier on eyes
96aee007cc72e51df12c61855dd2c90574d25bc8,Fixed unnecessary duplicate handshake exception
a28d08936ddcca975a04d10a6b4c5c0b95b4f5a9,Send a response even when I wrote something in SecureChat
8ed89dbd8f13cb78c7b2ed0ed2f2fe257d0dbee8,Fixed a race condition in HttpTunnelingServlet which caused data corruption and duplicate write
ca19f4cdde81e0ad08cd6561a74c138f7b5465b3,More documentation on Channel.write() and connectionless channels
23bece222ac3e0f23804ef42a4f68dc5bacb01a4,Made OrderedMemoryAwareThreadPoolExecutor extensible so that a user can use a different key to maintain the event order
82a84d822deb4f9f802743193d098a6306869587,"* Added guide on extension
* Added OMATPE.getChildExecutorKeySet()"
dc06648005b5fdd2e8e852590834a81cef2c088f,Better example
1a54f32a770a480049dc75fa687ab010739a3177,Less indentation
a92142e493017527e1f72a7406a85a63e13f1e9c,More advice on extending OMATPE
865705e79bb45635aa12f0b07de792efe842463c,More correct explanation on OMATPE extension
5de3114ccb5bcfc1ef739652fa6b7a98318a52e0,Improved OMATPE javadoc
c4449a170dbb133dbe12bd719e366966373231a2,More Javadoc in ChannelPipeline
338a5cba4a6cf364bbaecb2d7a163c9b199a1283,Added documentation on how to implement protocol multiplexer
31bf9fd7064c58da92b1834331e305f6892b321c,"Added SCM revision to MANIFEST.MF, user guide, Javadoc, and Xref"
6321bb406fda0a44bb7e372b8921e31a4c521183,More Javadoc
3920158bc0c50fdce81d4db7012338b89af514bd,Polished all examples
0d5fc90dc5e004a7f60c70a67b60abd676267837,Log the warning only once
3cf2d83f3f94625cbdb65c0bf9c873e315a60d13,Removed a unused exception class in the factorial example
3185a49a502ddd94d2e5bdd7cfeb65f33541bd6e,Will release GA
7ea7d5bfcdff5739a48cdc3d2e16100d8ab8544b,[maven-release-plugin] prepare release netty-3.1.0.GA
68b54c9dde565669c6661429a9cb8fedb1366ae3,[maven-release-plugin] prepare for next development iteration
8a35a9aad3d5a985ee1becb723f960ae1c7ba079,"Fixed issue: NETTY-205 Unnecessary exception log on early disconnection
* Do not log ClosedChannelException in RegisterTask.run()"
57ed3c1ee884e1fd3b9dffd68c53b6602955ac85,Removed unnecessary String.valueOf() call in StringEncoder
7c828fc87d925acf1b15d66fb24aa7992dfc1382,Javadoc not to receive a question about messy data transfer anymore
2ab6e4b5b072fb2b6f954db375f4d5692e1282ab,Another fix for NETTY-206 Unnecessary exception log on early disconnection
0879d2bbbea772ee5c3bcc1bbdecf58c31e8f308,"Fixed issue: NETTY-207 The default datagram broadcast flag is different between transports
* Set the default broadcast flag of OioDatagramChannel to 'false'"
ad4ba5f0f4cfd74bd4f557a6e5a2da549b12263d,Updated Javadoc of SslHandler
05ddfdab4694aca428580967d3bb73e347f1f0f2,Remove unused method in NioProviderMetadata
7ffd228cbf2c2fca408ecb125dabce68e77edf2a,"Fixed issue: NETTY-204 Connection timeout does not work with the NIO socket transport.
* implemented connection timeout for NioClientSocketChannel"
adc1969d6c9eb006e1cbf31ea9d0b0e237e11760,"Fixed issue: NETTY-204 Connection timeout does not work with the NIO socket transport.
* DefaultChannelConfig.setOption() does not handle connectTimeoutMillis"
7a0ff7d1ea83ae9a12f1bc3de4417a11e9ee53a2,[maven-release-plugin] prepare release netty-3.1.1.GA
b0bdef67bedc1e06f1e952b14ee8c1232418e0ee,[maven-release-plugin] prepare for next development iteration
c861adf6e02b14d90716364a91a3b67c731fdf80,Fixed a test failure where OioSocketServerBootstrapTest blocks indefinitely
d8425331356effb4806e94b47a92cd09a85c2df8,Fixed a failing test
0628bde12fb64c98871324ddf5df6687bd25b638,Fixed intermittent connection attempt failure due to a bug in connect timeout handler code
38dc4e0a966533423a9d792d75d083be78792d88,Will release 3.1.2.GA as a critical issue has been found
f4591f1559914b6f5df86c0801e2d67c1398aa54,[maven-release-plugin] prepare release netty-3.1.2.GA
5d81dfc495f143705cb6e257956b832d384a4231,[maven-release-plugin] prepare for next development iteration
9b20a1453c5b3a16fc83907c18919452ff574811,Better description of interestOps
b4f0b7360d1b967c76415032d1618207bd9e61bd,better term
aee966287d4fb3055437dfd974e207ad77079149,Added org.jboss.netty.util.Version for easier runtime version identification
cc386efd62e9631f6a26286e6d4dc4fe476c9d09,Added Version.main() for easier version identification
4c42b49ebd31a1f39682f7a37e9da5983ad1ef15,Workaround for Maven build problem in some M2 versions
29cf4f83a3663d22280d18628f9c47ae50881c8b,Fixed build error that version.txt is not generated
be32586d501417ce47423ec7d6e639ba55e8723f,Build property cleanup
1574fc3188bf4c0fc0cc1cdbd494e9826c14467d,"Fixed issue: NETTY-214 NIO socket / datagram transport sometimes does not shut down
* Fixed a race condition in NioWorker.close() and NioDatagramWorker.close()"
a09b750c2f3084140aa84d592155309bd99b377d,Fixed issue: NETTY-215 ChunkedWriteHandler stops handling write queue when ChunkedInput.nextChunk() fails.
6dc0b1202064d7d065916cb54b0f600166e7b916,"Fixed issue: NETTY-215 ChunkedWriteHandler stops handling write queue when ChunkedInput.nextChunk() fails.
* Fixed related infinite event loop"
347131e0fa4cdf9340a27d1e5500d985e30657a7,"Fixed issue: NETTY-215 ChunkedWriteHandler stops handling write queue when ChunkedInput.nextChunk() fails.
* Fixed a bad file descriptor error"
925a99a572b984b26d18cc1f4ad6e2c46be583b1,Simplified Chunked resource management
32d9d026a1528c4c15091cdfb4f4befa2b5e440a,Release ChunkedInput immediately on partial failure
df72c4b7eeb3e1c88b49e75098de3460a69e5a41,Better comment
b083f9eb2efebdd69da53196aea9066a288677e1,Removed unnecessary printStackTrace
7388b961a6425c0cd0c98abd976c5c0c9027d9be,Fixed indentation
b29d55aa383a3ddce24cef9f300c87645e9eb411,"Fixed issue: NETTY-216 HTTP Cookie missing HTTPOnly property
* Added Cookie.httpOnly property
* Added support for HTTPOnly to CookieEncoder and CookieDecoder"
1509f64db122d9967651e7edf58b27ecc074aa10,Relaxed assertion in discardReadBytes test
7851e84a2c1e919f30cba12c9770a0883e7d1662,More explanation on ChannelBuffer.discardReadBytes()
b11ef6ca9b9476f70aaf10bf1ba28ec28efc5587,Relicensed to Apache License v2
48a0140c0de380fa082f51c816335811e014f902,Updated the license information in the POM.xml
829afeb993cb0343f81aebf03c6462edbed226fe,file -> product
2fa19ff8451e00ed4feec183ce5333be23a31ac6,"* Updated NOTICE.txt (file -> product)
* Relicensing the benchmark program under ALv2"
404abfd198a775f09c78a5f4b32465fec62694c9,Added the comment as suggested by Thomas Bocek
676ad42cea5f503dfca84dcc27dafcaae7876074,Wrong class name
94a1633ec9572c19f8a35c6072795330a2b7bfd7,Fixed a documentation error in Channel.isWritable()
e0bef12e2cb2aa8df9f43e37da26e6b6eb5702a2,Fixed a bug where AsynchronousCloseException causes IndexOutOfBoundsException during write
072ee8a5c5584b0242a03e47a3e2f7a063bdcac7,More explanation on how event flows in a pipeline
5814ec65a4ac7bf92140cff0487dd708deea68ba,Fixed incorrect thread name
b9c8675cf1c5818985b7bec834bd8995de551527,Revised the documentation about event flow
edd056d3deb35b7f5b35ec3504ff0ce1e7863203,Fixed a bug where an invalid upstream channel state event goes downstream
8a0f8e9d784cf2d65dfdeced671f78c3478f6afb,"Fixed issue: NETTY-224 CancelledKeyException on Channel.setReadable() in NIO transport
* Handled CancelledKeyException properly"
5345c7f5099506bd9a8269f2e725a9f4a37405b2,Added ThreadNameDeterminer.CURRENT and PROPOSED
f79fd584d1906e3a0697c51a887bd543ec184ecd,Made the echo example easier to understand by splitting EchoHandler into EchoClientHandler and EchoServerHandler
65e7a351bd87e14415c4135c399c5645df17f6b1,More explanation
219647385ab87ee13107a9f4e571964f5527ebf5,"* Added examples for timeout handlers
* Fixed a problem where the handler methods in IdleStateAwareChannel*Handler was not declared with 'throws Exeception' unlike other handlers."
16124dc14cf7a9680725d2a5f647f10e176771dd,"Fixed issue: NETTY-217 If catching InterruptedException, set back interrupt status of the thread
* Handle interruption state properly as advised"
8cf237f7f0f15248ec02522a87602dd9d6edfc88,"Fixed issue: NETTY-225 ReadTimeoutHandler, WriteTimeoutHandler, and IdleStateHandler handles sub-millisecond time unit incorrectly
* Unless the specified timeout is 0, the converted millisecond timeout should never be 0."
a43604669294d4f1825c2d1cc28a0874055f4780,Backward compatibility
b67688fd0f7e2281af16c8d613c2708e7a992b99,Fixed documentation error
d99b9834809e2ba93c340186f6eb88610440e0a0,[maven-release-plugin] prepare release netty-3.1.3.GA
85fcfc7f19d15d1f2896fd180f0cc736d7e039cb,[maven-release-plugin] prepare for next development iteration
3b2720e7bb4684b4b9374ee3fc8f6364d56d0ef0,More Javadoc for ThreadRenamingRunnable
64a1b4189106a7459a10c857bf4449a69c38afdc,Too many 'new's
26e9b4e7a812cd668788171f1f0a512f332cb94f,More javadoc based on user feed back
15b3317df554ef10dcd07c732f444da480df0db2,your full thread dump -> the full thread dump
3d2579b8cbf0e7117fcca1e52cdf89aa87f9c74a,More documentation on state management
c36812d55dfe2bac227f9c0257c15cda1828308b,More documentation on state management
1b5a02a949ba5e1be607a8bec8540b1a0ac0eac0,Added the uptime client example
794f805a30ce02edd5c4701a36cd0d41f972928e,better explanation of what uptime example does
3179d8094ed773167efafeb955d9fb73a8b3d5d8,"Fixed issue: NETTY-226  IndexOutOfBoundsException on empty HTTP header value.
* Skipped substring operation for an HTTP header value if there's nothing after a colon (:)."
e67e99a8475aadaeecafbdf2a7a6508423102415,Fixed issue: NETTY-229 CookieDecoder throws IllegalArgumentException if the day of week string in 'expires' attribute is not abbreviated.
588cfa851896440f9d1208654e33ed480a33e7da,"Fixed issue: NETTY-228 Method ""ChannelBuffers.wrappedBuffer(ByteBuffer buffer)"" does not always honor ByteOrder"
80b6a5b7ae7e2c0b135ccc7e21ea759d838e59e0,Reduced unnecessary system calls triggered by Channel.isConnected()
dcdb1c5c187d7af6fd14ca82a19ef51e3d4f85f9,A potential fix for 'bad handshake MAC' error
e31dd0ebcada3953927399ecadafa0b809e5a544,Reverted back wrong fix
3011d52e457c9244cc7c055a16c4e061c0c752f3,A fix for 'bad handshake MAC' error
5795ab9d86a74a7c24005cf2bbb63661bb3ed12e,Simplified code
c729e34603b7160a990b3eb1bdffa541e6a0f27d,Explanation of the latest fix on SslHandler's 'bad handshake MAC' exception
50012fd8e64a3311be24f64e5d096da779a17dbc,Improved Javadoc of LengthFieldBasedFrameDecoder
e069c7c958d6761c1ca2f9ea5926db2a578794b3,Wrong number
0180db1c2c0978b0651f5068aaf98f810d319851,Improved javadoc
3352eb4cf7a9dab7fb92636319da1f9836b4aac1,Javadoc
59eb656112f87655432af02a223a176e1fa0268e,[maven-release-plugin] prepare release netty-3.1.4.GA
21f1779e5092bd4d15e5fdda3a73f3a81e623459,[maven-release-plugin] prepare for next development iteration
31185897afc709a83e3e6cf320b89c2a26b7f7cb,Fix for recent regression on infinite ClosedChannelException
4132804793fe587c4a6bcc29506410e565f234f2,Break the loop on connection closure
6e68d6ba4f7bfc671155cb8802a75ce94c3516be,Reduced the exception creation overhead on ClosedChannelException
9791a0327febb355f4ddc9257d94ed2412fe23f5,Fixed a bug where the future of the write request is sometimes not notified
596e62398fe3a08a41858eaf08fdc43ff6cee659,Fixed a bug where the future of the write request is sometimes not notified
5e4ca0d94a2e8b6caccbd24f2380751a9f458232,Removed unnecessary assignment
346d7022cdc69fe5c8c21af45a05c473add28499,Removed incorrect boolean assignment
c600c8f9f163164c61dba82e0c1f392b26daf75c,"* Reverted back the optimization applied between 3.1.4 and 3.1.3
* Removed unnecessary break statement in NioWorker.writeNow()"
c6c9bc471c54820a77dc88f4f84d7682647a6135,Removed unnecessary indirect call in NioSocketChannel.isConnected()
ab2283ee9862c8f516db814a6b329670e001c8b6,Removed unnecessary indirect call in NioSocketChannel.isConnected()
6886a8b765ab7d98a07824228a24a767d7071eef,"Fixed issue: NETTY-234 ChunkedStream usage fails with NegativeArraySize error
* Worked around an interesting JDK issue where InputStream.available() returns a negative value"
37574965fd238dce507a026eb529e104300d948e,Made ChunkedNioStream final
852a89220a8999157987ee747a372a8550529d52,"Fixed issue: NETTY-232 NoSuchMethodError when decoding Google Protocol Buffers 2.2.0 messages
* Upgraded to protobuf-java 2.2.0"
a4172500d5c439043c9d133f7295539fe54b4193,"Fixed issue: NETTY-233 Missing translation method 'HttpResponseStatus org.jboss.netty.handler.codec.http.HttpResponseStatus.valueOf(int)'
* Added HttpResponseStatus.valueOf(int)"
ccecb0af2cc8d2dcb1608b9d7ebc9e8bc2e177e5,Appended some distinguishable text to the generic reason phrase returned by HttpResponseStatus.valueOf(int)
6b53303bd73db942ac1f5503752523f2a5f1df57,* Fixed incorrect Javadoc of ChannelBuffers.wrappedBuffer(ByteBuffer)
3537dfe47c46c84bf03d60dc473c87e770b6f524,A temporary workaround for MPJDOCBOOK-36 (https://jira.jboss.org/jira/browse/MPJDOCBOOK-36)
68fdf17d342770721c3f2919405f527f5ede7dae,[maven-release-plugin] prepare release netty-3.1.5.GA
e88dd98cf14e461d3b3a0520c1896dcf67bce14f,[maven-release-plugin] prepare for next development iteration
1ed1d63dd6c77cffce99efbb23e5f2eb3b33efc9,Better Javadoc based on Frederic's modification at the 'aggregate' branch
ca4c32df680406de79bb42df4f51af541ea86ed5,"* Merged Frederic's 'aggregate' branch
* Refactored Frederic's test cases
* Code clean up"
3b9d1a9dab2c914687a9a19c0632134549243327,Code cleanup
85712a72b89b33f3512d174cefe1b5f4a2fdd2fd,Code cleanup
ed27ca19ea6f65562f4f13a3030c4714fd88b718,Renamed setFromList to setComponents
d3488a1852227cc1f01790b5c77c0766e04eae35,Fixed a bug where the newly added padding has wrong writeIndex
01120b6a2b91c0bbfa76d3b1ccf9eb3d39ce450e,"Fixed issue: NETTY-237 java.lang.IllegalArgumentException when passing HTTP 1.1 spec compliant LWS separated HTTP header values
* Relaxed HTTP header value validation"
42df101341cb82354796b7286ca6bda1b3b383b3,Added missing header
c3b06d4a67d7e2ef4a168ef59c106cb08457c8bd,Updated author
eca6033456b4f3cf5002a793801818928f8a1840,Updated author information. I want to get messages about Netty in my gmail account.
8eba49c0cd8393855cefe5264834ae687990833c,"Resolved issue: NETTY-203 Encoding frames as Google Protocol Buffer base 128 varints (32-bit)
* Applied Tomasz's patch
* Renamed ProtobufVariant32FieldPrepender to ProtobufVariant32LengthFieldPrepender
* Code cleanup"
972620d4311715488104a98b191f1ac8ace8afaa,Resolved issue: NETTY-241 Add more ChannelBufferFactory.getBuffer() methods for less memory bandwidth consumption
127851df31d861e24794ae14711d69c44b72f9a6,Typo
abfae49a7c6d353bcf7938c2ee4f04a45a1a0866,DirectChannelBufferFactory.getBuffer(ByteBuffer) must not return a read only buffer
7a06c352388478009a7af79fc7221a385e7dc46b,Use proper buffer factory in NioDatagramWroekr
c7c2c71935a684a7148c3736417d5b5861b91f38,Use proper buffer factory in OioDatagramWorker
b859f120d8c43494a1503767a7920ed7a7488b90,"Use proper buffer factory in OioWorker
Removed unnecessary local variables in OioDatagramWorker"
2b2d53ff62436c20604ec4e900889cd5bbbae0dc,"* Correct byte order
* All encoders should ignore the message whose type is unknown to the encoder"
a7132ee08e5a37e94903c85e920dfd8604120d00,"Relates issue: NETTY-80 Compression codec
* Initial implementation of jzlib based zlib compression handler"
ab6a869825aea35af87593ac0de970f785e28090,"* Fixed a bug where ZlibDecoder fails to recognize Z_STREAM_END result code
* Fixed a bug where ZlibEncoder does not finish the compressed stream with the ADLER32 checksum"
f355d74eb03e65e8aa53020feeedd61eff73ebaf,"* Added preset dictionary support to ZlibDecoder (likewise I did in the previous revision of ZlibEncoder)
* ZlibEncoder.fail() and exception() package-private so that ZlibDecoder can use it"
b646071570d1f5af9d5df0acab696b4e1cf4eab2,Extracted the utility methods in ZlibEncoder to a new utility class 'ZlibUtil'
5cfaf7333c17b6f7d8bb740969ede2c23e4da401,"* Proper handling of Z_STREAM_END result code in ZlibDecoder
* Added ZlibDecoder.isClosed()"
c3a88d0c48e6fc6377d7ada879b1ad69bfdafb58,"* Fixed incorrect SslHandler.context() implementation
* Added some FIXMEs"
6022f207ab283cc4747d4dff333ff8103ff9ff3c,"* Thread safety
* Proper destruction of deflater and inflater"
e3b37958c4cf4c15ba38c36b6ffa3aa128c920e5,"* Added LZMA compression handler to the TODO list
* Removed a link to unimplemented compression algorithms"
3f8cf952d2ec44d97966e92a64a18d2b6831d6fd,"* Added ZlibWrapper (not being used yet though)
* Removed completed todo item in ZlibEncoder"
25fefa16e83ff64014a16686f2daab23542020c6,Improved Javadoc of OneToOneDecoder
b78d357bad5953ee7f6d5c74b0947f05a87a7370,More Javadoc in OneToOne(Encoder|Decoder)
57c0600b90c7adb8c9ae499dfb11021c6a7796b6,OneToOneDecoder now understands null - improve ZlibDecoder
eeb98c5f97090fd16116d7830994706a4495e649,"* Forked JZlib to support GZIP format
* Added CompressionException to hide ZStreamException
* Better javadoc on compression level
* Better compression level validation"
a7e7d124439c56d10c9883b46d1cd055feefd797,JZlib code cleanup
d8119d65fe521f5d1b1eb525d6ba70d71411cc24,Updated the copyright header
96d3726a389929c037ef515ad77d39914896f458,Removed unnecessary memory bandwidth consumption
1b178477d662248d27b6cdf707239d7d587cba9d,Refactored jzlib to support more wrapper types.  zlib is the only wrapper at the moment though
9cab17effe8bdf4a3db65f8bec310ae98cff3973,Preliminary GZIP implementation (no CRC32 and ISIZE checksum yet)
a5ae29df26b50b127164c1387d09431e3fb795f3,Constant reordering
8e6e996392cd639551b75e9f2cab9c57f276c6a7,Added complete GZIP wrapper support to JZlib
96cb5759869be3e02f011e3d81294576c6e265ad,"Complete support for DEFLATE based wrappers - zlib, gzip, no wrapper"
e10cc133f582eaa131b0319989094c9e48c3d024,Fix for compilation error
05525065b2098f17217c31298a156d6ee44494fb,Fixed a bug where FNAME and FCOMMENT fields are not decoded correctly
8b7efa5db4f9ab69cd6fcf8768822040afc4aefd,Fixed wrong byte order in gzip crc32 and isize field
1dc34f0bfd81d111b930dd28bd83d0e9c89aeb33,Use GZIP in the Factorial example
df216c2b676d51348604fa0fbd557b0d937a93a8,Fixed wrong byte order in the gzip xlen field
6505a4e2855b4d7187a13e9236c254d90ba9530f,Fail when unsupported flags are set
2fea789309243083410152b3628fada1d1249c70,Rephrased the comments on compression handlers
2ac4719faebcad82bf310db1af37493b930cb45c,The asynchronous operations should not throw an exception directly
bf3da2d0e36054a0487da6733a7d57a93288d182,Fixed compilation error
b4d2056f28235e86b4edf6444f3bfe07738f6740,Set the 'handshaking' flag before calling beginHandshake() so that any failed handshake attempt can make SslHandler.handshake(Channel) return a failed future immediately.
11a1e9ae3954bd39d7ace787d6009cc1e79c81ad,A preliminary implementation of HttpDecompressionHandler
dabea9dfff9011a7edd69a9f95b0cef8bac5a9c3,Update the example to utilize the new HttpDecompressionHandler
52221931d50c00b06bd43114856bbd0fafc68403,"A workaround for 100% CPU consumption issue in NIO selectors, suggested by David M. Lloyd"
c079291012043b029fcbc1e3ce949e125a3820bb,Added a test case that makes sure the workaround for the 'spinning selector' bug works.
d0890c1af0ef07c27d8014e925c11c7a8e31ac8f,Wrong author
72a35e3e24650fcea4009a958cdec075ee2fdb29,"A workaround for 100% CPU consumption issue in NIO selectors, suggested by David M. Lloyd"
20798ee42956244479bd35f4e0f8a819f01dc6bb,This test case cannot reproduce the problem - removing
f4a71f92ce873d30e1422f0435e836dc39216ce0,Preliminary fix for the file descriptor starvation problem
5edf0242e830f9ef35317f1985e79e232415be6f,Removed unncessary parenthesis
ff6cf1787e877d2e3ffad13081a27eb434848ab0,* Fixed failing shutdown time test
7f052753051904f7a425a5d24460f02d79e3f1a0,The thread that calls NioWorker.close() might not be in the selector loop
698f8d54eb909f820bed6166ce8db0863b6d68f9,Applied the same fix for 'too many open files' to NioDatagramWorker
2663f85936c4fc5af0daeba22c85a384a884e2bd,Removed unnecessary conditional statement
4ec06f7c78680558232786c8d574c10b6cf5dc55,Fixed ConcurrentModificationException
692c278cf99ad1c73d5ee46b6aa0c10467119392,Comments
e06ab750cb5cf59fda9ee0d8ca64eab63d96609b,Secondary fix for the file descriptor starvation problem
988089ed104b7b135d4be463de331a57bec335ea,tab -> spaces
bf1fc6bc237de7cc9c4a967434f91c11af47fee1,Added a FIXME as a reminder for API redesign
db823d904193b2a4e2ab3de43925bf57aa3846d0,Set 'Content-Encoding' to 'identity' if necessary
d0f67f97fc3d5c4b093049113059a4763e1f9dd0,Fixed unmatching quote in the hyperlink tag
0f8ae7923df9aa6a64cb3671ae26cd6c1b1f4d32,Typo
075229ab10e6f6dc880c435d68e7e603cf7de90c,Better Javadoc for beginners
a3c2efaff15ad00a37ab1cee16fa56aaf7c0629e,Wrong pointer - those tables were moved to ChannelEvent
f7bf2932d997ab8928dd2784edee3b35ab3bb244,Wrong pointer - those tables were moved to ChannelEvent
42c9242286ba3de513d5eb773f8bf3c2b94c092d,"Resolved issue: NETTY-244 ReceiveBufferSizePredictorFactory
* Added ReceiveBufferSizePredictorFactory
* Added AdaptiveReceiveBufferSizePredictorFactory
* Added FixedReceiveBufferSizePredictorFactory
* Added get/setReceiveBufferSizePredictorFactory() to all related ChannelConfig interfaces and implementations
* More accurate documentation on the default predictors
* the default predictors are null internally and created lazily on demand to reduce footprint"
e92e10d6b0bc964fbe18f864882f7fbdcf9e492b,Updated the QOTM example so that people do not ask questions about truncated packets
f0e766dcb3515d87d63313e1ad58192c5e65ca2b,Updated the QOTM example so that people do not ask questions about truncated packets
b105461383f761dd48a2aaf8b111c629c24d8ef4,Split HttpDecompressionHandler into HttpContentDecoder and HttpContentDecompressor
cdf1474059a2ad45c565c9ffc5c8b781dcfea9d9,"* Slight code clean up
* Raised the default cancelled key clean up interval from 128 to 256"
d450f0a228e3c7af10b10bf5d3aeb1c0801108f1,Renamed beginDecode() to newDecoder()
bc6b84e58bf3887fcb0fcfd2e3c950b1aa422f47,Added HttpContentDecoder.getTargetEncoding
6cb1a504fb0ffe05ab5732574f875d461f4dc21b,"Resolved issue: NETTY-245 More convenience methods in CodecEmbedder
* Added CodecEmbedder.size()
* Added CodecEmbedder.pollAll()"
ec80daae014cb8c11997f611403f3f285afd2ea4,Better pollAll implementation
5eb56831e80991ff8e13de4950b9b215ac05136c,Optimized CompositeChannelBuffer creation
26cdadda9ea46c8fe4e87770360976480fd751ed,Simplified HttpContentDecoder using the new methods in CodecEmbedder
6e510842168aa171a4454265f37b67a0ca15ce2c,Changed constructor parameter order
b31f1429b62c5cd116758e276b18d04c38e4ca59,"* Better method naming
* Added HttpContentEncoder and HttpContentCompressor (needs javadoc update)"
e0132d58858a9244185a33caec6fc8f39ee41af9,Updated the HTTP snoop example to fully utilize the compression handlers
b3e938924cca90763ec6955c4b6b5806c0358b64,tlee@redhat.com -> trustin@gmail.com
ed3500373f5c1fc76267420540c8789dc76df2c4,Improved Javadoc
464ea90492f2fc7aa4892cb6e1c65d998caa11a2,Fixed some non-sense code as advised by FindBugs
1f2d65ce54b52b5da78bae70768732592cf994d3,Added missing annotation
f8aea1547e4b59d8f34f78e67b48b44fbf51cf02,"* Removed the calls to SelectionKey.cancel() which takes places before calling Channel.close(), according to SelectableChannel Javadoc
* Fixed a bug where connect future is not notified if the channel is closed during the connection attempt"
9c5a14b0c262becf69fa1165d5f7bdbc1825bd38,Should close the channel explicitly on connection attempt failure
32a0bed729e32801098c9f16a27759432917f07d,[maven-release-plugin] prepare release netty-3.2.0.ALPHA1
eaa5da5aebf2baa57db317e09652388040517991,[maven-release-plugin] prepare for next development iteration
74bbc819b92c426c63419ecc792d6b05ef184bb3,"Updated the dependencies and build plugins to the latest version except for XNIO, which needs additional work"
6075c50cf77ac0fdc9ba8f1f5b9af2dc7a35854c,Resolved issue: NETTY-252 Remove the deprecated types and methods
2e47058fc77dedee0e123a3021dc2679917a1848,typo
ebb10d3267363958951e854718d963871b71a634,"Related issue: NETTY-251 Add support for HTTP trailing headers
* Added the preliminary support - the trailing headers are simply merged to the HttpMessage.  The last chunk type should be added, too."
e12d04da7454e79557ba29938441a60eba23127c,Optimized HttpChunk.LAST_CHUNK
960bbe3879e9d1435021d0e743ab6cb36cdf1d0c,Typo
e0ea707e92b7409e3075920eb74d6b7b7ab66250,"Related issue: NETTY-251 Add support for HTTP trailing headers
* Added HttpChunkTrailer interface - need to write the default implementation
* HttpChunk.LAST_CHUNK implements HttpChunkTrailer"
e81d0e54149b473bc9c14d01450601a03cb0d483,"Related issue: NETTY-251 Add support for HTTP trailing headers
* Added DefaultHttpChunkTrailer
* Moved header validation logic to HttpCodecUtil"
4ce65f36212e7a97b902958ad6c56611091c83f5,"Resolved issue: NETTY-251 Add support for HTTP trailing headers
* Modified HttpMessageDecoder to generate HttpChunkTrailer with trailing headers
* Trailing headers are not merged into HttpMessage anymore for correctness"
ce48ab00582bdc2cd1e0f61684e19dc2b3f54585,"* Changed the semantic of HttpMessage.isChunked()
* updated the Javadoc of HttpMessageDecoder"
40597002e9d4a3e53f8e19df712a9e5652281ddb,"resolved issue: NETTY-250 HttpMessageDecoder violates HTTP/1.0 by converting a message into chunked encoding
* HttpMessageDecoder does not add the 'Transfer-Encoding' header anymore
* Added HttpMessage.setChunked()
* The semantic of the HttpMessage.chunked has been changed"
cfd34212343d58e02a4cec5ce25470f2592ffe76,Fixed a bug where trailing headers are not written
2dab4843728ed25c9803ebb1fcc0a8a168bacd8e,Fixed a bug where trailing headers are not written
8c39e2823ecdc3c423132971269315e5a73158dd,* HttpMessage.isChunked() checks the 'Transfer-Encoding' header
96bbbbb7f103d4f7a696317df7051d269531ff6e,More Javadoc
902ab48820e78efc61b77fa1292b0d25c5355160,"* Rewrote FrameDecoder by utilizing the latest improvement in CompositeChannelBuffer
** A user doesn't need to make a copy of the cumulative buffer anymore.
*** Modified all FrameDecoder subtypes to use slice() instead of readBytes()
* Reduced the maximum length of the random writes in AbstractSocketFixedLengthEchoTest to increase the probability of composite buffer occurances"
8eeb72cbbf79496d317462a8bdf63e461ba42717,Reverted the previous optimization because it might perform very bad as the number of components in the composite buffer increases
2dde687e85d638f144feb3246a1b783dc3ed8280,''
6795fc0627619ade92b5121c686edf486838f4cc,updated version string in docbook
9e44dbada5fdc2d338e10855589a187181e9ac1a,"Resolved issue: NETTY-254 Do not do lazy-initialization in dynamic buffer
* No lazy initialization anymore for DynamicChannelBuffer - it just causes confusion to users!"
abe2a88d60bf1d11151dc646dd86e1bb113e61a6,"Resolved issue: NETTY-255 (Make CookieDecoder more robust)
* Modified CookieDecoder not to recognize commas and semicolons as attribute separators if it's impossible to decode the next entry.
* Added a test case for decoding Google Analytics cookie which raised this issue initially"
4649d57097ed672d1758c62a5b39f89f0b8979d7,More strict testing
cf5ef8cf5e9db0663483f97df81ac83b4fb21cd2,"Resolved issue: NETTY-247 Make HttpMessage, HttpChunk and their default implementation completely mutable"
44ab3dd94a62f8b3eb8c4ebd16c747328589d0da,HttpMessageDecoder.message doesn't need to be 'protected'
f17d05311f7e4ae046afae42961f7e3210ce8005,Removed a tab
015724a527a0f237726f46f28a5dbb3e0d1087ab,Set svn properties
a6184725ba5db1e29e4049f64544eb84886baee9,Removed a tab
885ef30dfc86430697abf7ec48769654abadfab1,Set svn properties
f534c2ac534bccda21ee75edd2bf2fb2f6728d78,Set svn properties
2b425a78c7cd383d00431c1418b816e95ed67825,Set svn properties
2c3ab480a2e67a9ceec363b4a6a349ad8df46372,"Related issue: NETTY-253 (Add several useful getters and setters to ChannelBuffer class)
* Added getters and setters for char, float, and double"
1688569758f1ac2e298c89aa4bc17f036a064477,"Related issue: NETTY-253 (Add several useful getters and setters to ChannelBuffer class)
* Added ChannelBuffer.hasArray/array/arrayOffset()"
42d2f79239e8b15ed77ea95b760633df87ad1828,"Resolved issue: NETTY-256 (A race condition during the recommended server shutdown procedure)
* Fixed a bug in the socket transport implementations where a new connection can be accepted after the ChannelFuture of ServerSocketChannel.close() is complete.
* Introduced a lock to ensure that the boss thread is terminated before notifying the future"
f7a0a4db110a36c84e4c65031b447903d1994fa9,"Related issue: NETTY-256 (A race condition during the recommended server shutdown procedure)
* Fixed a failing test (NioServerSocketShutdownTimeTest) by waking up the selector explicitly"
2685d03d8f6c9f95ad9ecab214c587ff95e69437,"Resolved issue: NETTY-208 (Blocking read handler)
* Added BlockingReadHandler and its exception"
7894784ea9c27cc2a862315996181dbf216844fe,BlockingReadTimeoutException should extend InterruptedIOException just like SocketTimeoutException does
45d36f96b9dfad015256f45a2d12babb5795c96a,Shorted package description
47498eb15904ebdf16d5931ed7bf8dec09f5707d,"Resolved issue: NETTY-258 (Make DynamicChannelBuffer.ensureWritableBytes() public)
* Added ChannelBuffer.ensureWritableBytes(int)"
38c60ef8072456dbfcfff28722211b6c6b03febd,More straightforward description
bab9af2b52b8f4880e4c3dc316751865cf77c2bb,"* Fixed a problem where BlockingReadHandler does not handle exceptions properly
* Added BlockingReadHandler.readEvent()"
d87408936f15e7d61e8b813326f23edb2ff87e25,BlockingReadHandler does not need to implement LifeCycleAwareChannelHandler
feac8bb5fad18e1a778642b7fe75def3d0898139,"Related issue: NETTY-259 (Add constants and enums for HTTP PATCH method)
* Added HttpMethod.PATCH
* Added HttpHeaders.Names.ACCEPT_PATCH
* Added all known HTTP response code to HttpResponseStatus"
c35231ae95d107e4c69023113d63802b9f01d1c6,"Resolved issue: NETTY-209 (Batch Write Handler)
* Added BufferedWriteHandler"
29580239506446a0ba02710126a2a2b2e2ded73b,Documented the possibility of thread safety issues in BufferedWriteHandler due to wrong queue implementation
3275f74ef9738a4312dea10b9c7f185db79ab2a9,"Fixed issue: NETTY-260 ZlibEncoder.close() and SslHandler.handshake/close() methods do not require a parameter
* ZlibEncoder implements LifeCycleAwareChannelHandler to retrieve its context
* ZlibEncoder.close() does not need an argument anymore"
578def7a9b6c8949dbce5dec305e43429ffe1813,"Fixed issue: NETTY-260 ZlibEncoder.close() and SslHandler.handshake/close() methods do not require a parameter
* SslHandler implements LifeCycleAwareChannelHandler to retrieve its context
* SslHandler.handshake() and close() do not need an argument anymore
* Deprecated the old methods"
d6facc0b9efa348838532e2767f13ed979f7065f,Removed the Javadoc links to the deprecated methods
f7606ffc315eca1af8576aa28dfa1587ad275e07,Fixed a bug where the first handler's life cycle listener is not called
7048c5189815e4c20a1182e86c12909d7daacd55,"Fixed Javadoc of LifeCycleAwareChannelHandler
* Some handlers (e.g. SslHandler, ZlibEncoder) need to store its context somewhere, and they needed to implement both beforeAdd() and channelOpen() because beforeAdd() is not called if pipeline is not attached.  This led to code duplication.  To address this issue, ChannelPipeline now always calls the life cycle listeners whether it is attached or not"
ba17621c0104c31548e87d33a059fea789b7e337,IdleStateHandler and ReadTimeoutHandler don't need to override channelOpen anymore because the contract of LifeCycleAwareChannelHandler has been changed.
fd3bcedbbf6ee0483a10acfec58d1db55faf39e0,At least timestamps must be updated on channelOpen
d06a6285ea1c481b52746fd94265895767ae24ae,Fixed a broken Javadoc link
2bf4dfcfb9652e03f2a660152194543f567842af,More Javadoc for LifeCycleAwareChannelHandler
3fcfc910e1bda3db14db56612edb5581b60e94cf,IdleStateHandler.initialize() and ReadTimeoutHandler.initialize() must not be called if their pipeline is not attached yet.  Otherwise the timeout might occur even before the connection is established.
65634bda11cf81e2287700dd4cdd6fd947060034,"* Better documentation for developers
* Fixed a bug where a channelOpen event is swallowed"
15aded0df78cb63317d622c302214ed76905e7b0,* More documentation for developers
9951e195731881b4bb710decab7bc350b339c78f,Null check
553f8cf1e956576dc19d484f31d8e53a92ae4892,"Resolved issue: NETTY-262 Static ChannelPipeline implementation
* Added StaticChannelPipeline
* Changed all Bootstrap implementations to work with StaticChannelPipeline
* Changed ServerBootstrap and AbstractCodecEmbedder to leverage StaticChannelPipeline
* StackTraceSimplifier should recognize StaticChannelPipeline"
64f0a931a4a9813d5009d64400bf7d2f4f36a949,Reverting back the previous change - some codecs might manipulate the pipeline dynamically
eb575430c2ac3b2c997c7878870ae5b1bb50ea40,"If parentHandler is specified, ServerBootstrap should not use StaticChannelPipeline because the parentHandler might want to manipulate the pipeline"
3c0119c8fb3368a70e403ed4fefabfab736495a3,[maven-release-plugin] prepare release netty-3.2.0.ALPHA2
807e80145386439312be8a0c30627be733d6ddd1,[maven-release-plugin] prepare for next development iteration
ad4d99c764c4d217b1610c9baad682717d55f2f2,"Fixed NETTY-263 (Build fails with unzipped distribution)
* Configured buildnumber-maven-plugin not to fail even if svn up fails"
974a18568ab5f5680da376c5ea109a5a39054739,Backported the changes (~ 1.44) in LinkedTransferQueue from the upstream
c7e2562f1c0d80356c561bac895a022c4f6d5de7,Fixed issue: NETTY-265 NIO datagram transport should not close the channel on write failure
3ff8cd46c99f92beca4573111293a22e32ef65bf,"* Backported LinkedTransferQueue from the latest upstream revision (1.71)
** Replaced the use of sun.misc.Unsafe with Atomic*FieldUpdater
** Added ThreadLocalRandom"
437cc0211cd1e1fdda575e3a2190053a2bfcb541,"'\n' -> ""\r\n"""
0314234a41b5dcf08f853bf11bf9a69fff221a9c,Spacing
a07d24ec3ecb9d5d43e7f329bdd772a381f90fa3,"Fixed issue: NETTY-267 ChannelGroupFuture.iterator() should iterate in the order where the I/O actually occurred.
* Replaced HashMap with LinkedHashMap in DefaultChannelGroup and DefaultChannelGroupFuture"
55078d87bd7cc7f560c99f04f6e08dce977a0087,Documentation
24b59bbfa901f738dfb6e9c3640b5ebead19d069,"Resolved issue: NETTY-268 (Use Charset instead of String to represent a character set.)
* Replaced String charsetName with Charset
* Added o.j.n.util.CharsetUtil"
33766a1f4ff767dfd580ba3397c1f49d1ebabadd,Removed the deprecated tests
7036654647969571d35b650bd379f4e3133e87a6,"* Resolved issue: NETTY-269 (Add ChannelBuffers.copiedBuffer() that accepts char[], CharBuffer, and CharSequence)
* Rewrote toString() and copiedBuffer() implementation
* Removed unnecessary methods in CharsetUtil"
aae6dce04667f2d369cb9ea5204667e518286b8d,Indentation
6dcc714704265e9d719d03f3a06e51a5bdfee6a2,Indentation
96da66960a679366f16030c6940403edb4d2f223,"Fixed a bug: NETTY-270 DatagramChannelConfig.setOption(""receiveBufferSizePredictorFactory"",..) does not work.
* Added a missing if statement"
bfc3b3999db88586cb8b69f8e5a00e67830bff7e,Educational information about UDP packet length limitation
0596aaac48bb11a44157353042e017e9f5bdf8b2,Extracted int-to-string conversion to ConversionUtil
d26dc2791f5e27b5e63472097ed1f94c591aeba0,Added a FIXME marker for StaticChannelPipeline
bda588723862416e1f8e45563e9c25e5ba3d5292,Added Channels.pipeline(ChannelHandler...)
491baa0c7bd323eb4be226469a0f4fc420dd4b5c,Added the header constants related with WebSocket
661acd24c8281bb338ed8b66839b3b7e2d93bcc6,"Fixed issue: NETTY-272 HttpMessageEncoder should not prepend/append extra data around HttpChunk content if Transfer-Encoding is not chunked.
* HttpMessageEncoder now does not add any extra data around HttpChunk content if Transfer-Encoding is not 'chunked'
* Moved the utility code that checks the existance of 'Transfer-Encoding: chunked' to HttpCodecUtil so that both HttpMessageEncoder and DefaultHttpMessage can use it"
46e9fe364a56628787856a8ad9777f94997523b1,"Fixed issue: NETTY-272 HttpMessageEncoder should not prepend/append extra data around HttpChunk content if Transfer-Encoding is not chunked.
* OneToOneEncoder should ignore null because HttpMessageEncoder returns null when HttpChunk.isLast() is true."
58086a865f1b5592578392006c3efb6aafd2c884,Code clean up
4ede085edcd6ef4113945954ef2e54a8be8b0c59,"* Replaced TreeMap with custom linked hash map for storing HTTP headers
* Added HttpMessage.getHeaders() and HttpChunkTrailer.getHeaders()"
f926c0adc08556aa614bce87990da5b51bf2f3f6,Use HttpRequest.isKeepAlive() instead of long conditionals
9f8fa65a14f4162990530b4a77f5ccf25adbee2e,"* Use HttpRequest.isKeepAlive() instead of long conditionals
* Use HttpChunkAggregator because we don't want to complicate the example"
d7be7be5525a7ad2fd55eed290e46f6f3aacad74,Initial check-in of the WebSocket implementation and its example
4999fabbcc6b3c210b352e27a998cadebc7366ed,NPE check
a8d9e044d27e379fee6f9736385f4c60c505516e,17 -> BUCKET_SIZE
6e228216b4eae1806021853895c4b46108bb1794,better documentation
a1d7a75ff4a8f731758522bd705807d7613e838c,Line wrap at 80
9c0e9e17804ac7b6ab3a9c6ed934b13b4e81f598,Workaround for a compiler bug (unsorted switch cases)
d9244393309eecff89d13d8dd2bc14a2a9425556,Sorted cases in switch statements just in case compiler makes a mistake
e2086cb754b4cb13095bc4873921ea27fd89d3b4,Fixed a potential bug where close future might not be notified
c8fc3a113597b3982f745b8128c1dc6322cc95de,"* Fixed a bug where a user can break Netty when he or she calls setSuccess() on AbstractChannel.closeFuture
* UnfailingChannelFuture is not used anymore - deleting"
60d3502ba143d26d0dd69f1599bb4eb9fe938f1a,"Removed the lock aquisition against SocketChannel when isConnected() and isBound() is called, because it causes unnecessary contention"
4668cb792e739e692daef709c7ca741c93b01610,Update the state flag if read or write fails
0acffadd2918731e0982d432737ed840692948a0,Replaced flag update methods with simple assignment
4ef936bea1346b10d9fd77943287dac2a70458b5,"Reverted back previous check-in related with state update, which seems unnecessary"
41af2d111ef093ed419d70d666736ddb3f4981ba,Added assertion message
052a109bc94355744f563b01e2fa63d863251570,Fixed an assertion error where NioSocketChannel.setConnected() is called on a closed channel
9f123980731de93b45edcbfce6a67ec616db8fad,Fixed NotYetConnectedException
1142a1aa062ec85ca3d2f3465afdaee56fff586b,"Fixed a cosmetic problem in NioDatagramWorker.read() - In some platform, ClosedChannelException is raised on DatagramChannel.receive() depending on timing, and it's safe to ignore."
95257174756718fcebe7ac3e8895bed13ad9bec8,Package description
f67de2321481ba9caeb59ce647692a2d0bb4ce20,Javadoc
4ab3e248e7f1287f498d3ad2886a2c8f4b8f5899,A little bit of documentation
a0e3cc6510eb1925634a15e563f075f2245e7768,[maven-release-plugin] prepare release netty-3.2.0.ALPHA3
149a6cef7177860c0bda9770a16efdc830ed104c,[maven-release-plugin] prepare for next development iteration
f67b06a931c773ed246e56129ec4fa8ea13eca3d,Updated Javadoc about Bootstrap.pipeline / pipelineFactory properties so that users don't make mistake
48f74e7cd6acfc93552c494de617affbd1862952,Updated all examples to use ChannelPipelineFactory instead of the default pipeline
3b5dd3676e2d4614f9c5e5a8bae36ad5269d410c,More red tapes in the documentations
1313ca5b17f2a33edef8ec78395a5352625f6af9,Updated the getting started guide to avoid user confusion on pipeline configuration
e1c2c453c5efeaaa68d15992c7417710620561de,Removed unnecessary empty lines in the program listing
8a574a7eb6444b9b1691c59d3ff8b2c69d3b373a,Removed the two unnecessary methods - CharBuffer implements CharSequence already
55b0bc2c2c4a7e406db87d34921e6376f83bd433,"Related issue: NETTY-257 Add the getters and setters for a String and a char[] to ChannelBuffer
* Added getString() and readString()
* Renamed toString(int, int, Charset) to getString(...)
* Removed some toString() methods which were added in the previous alpha releases - I will add an alternative method later"
397107adc0ee34c07df76003033244e5168c7e52,"* Removed unused methods in ThreadLocalRandom
* Hide ThreadLocalRandom because it's used by LinkedTransferQueue only"
f8de47e2dafadc48e91da78e2fc8a4ef65f94877,Moved CaseIgnoringComparator to org.jboss.nety.handler.codec.http because it is used only by the classes there
be2991c586e8eb988d77ae766e13db3907bf890d,Moved CombinedIterator to org.jboss.netty.channel.group because it's only used there
0dbea6f162f17157c4f534d55ecc43c51ba8c231,"* SecureChatServerHandler should use ChannelGroup where possible
* Moved MapBackedSet and its test class to org.jboss.netty.util becuase it's used only there"
23943ac256c795f6764e9d68850a49b4f05f968b,Moved MapUtil and its test class to org.jboss.netty.bootstrap because it's used only there
4d9b3346c58bc79354900d3290f5022280163a42,"Moved ImmediateExecutor and its test class to org.jboss.netty.handler.ssl because it's used only there.  Actually there was another unrelated reference, so I simply forked."
a36ea0f3a4d9deacb0a49683f046db11559b5c6b,Moved SwitchableInputStream and its test class to org.jboss.netty.handler.codec.serialization because it's used only there.
4ba7ae374963a0292b5369e1700378e0c705b6e1,Merged MapUtil to Bootstrap
3ee7604591049208b0e3bc40a983e3001b36f065,CaseIgnoringComparator.INSTANCE should not be public
238bdc90b82efa2349b26847cc54df1bbc47b172,Fixed failing test
7d40d47270eff29c06c2c086b51a4335c0286b70,Explicitly stated that a user can create many bootstraps with the same ChannelFactory
57bdb3a4a597fe7dc85e4b5160fb949bba149c31,"Related issue: NETTY-257 Add the getters and setters for a String and a char[] to ChannelBuffer
* Reverted the previous addition of get/readString(...)"
8a8d1d1da669bfb5251f622f6ad6b3b32e22fbc3,Fixed failing test
ebc2459bc7c720679a1171e3955555d6fcd290d2,Removed code duplication
fe73de34973d607e5700c628d5e3ae5f4f22acc1,Fixed a failing test
5a897af28dd3d00d44d9febf0dd0e5aa6eea2dd9,"Resolved issue: NETTY-278 ChannelBuffer.bytesBefore() as an alternative to indexOf()
* Added various bytesBefore() methods to ChannelBuffer
* Deprecated the methods that could be replaced by bytesBefore()"
d216e321c8c89f23c8c7853a04af599edd139085,Relax throws clause restriction
2dde1e9bacd4ed280e65299297f3177cb263eb38,HttpResponseStatus.valueOf shoud not be final so that derived protocols can have the factory method with the same name
1c2796983e689e65cdc0e7647846e9fe6112052d,"* Added Values.MIN_FRESH
* Made Names and Values extensible"
129a54446c47e8abb0134a123965a4d64a94b5bc,Initial RTSP implementation which extended HTTP
a6f3a4f10fc6e1dd277bca5a3d7cd952f1f917ef,"RtspHeaders.Names should be non-final just in case someone extends it to add more constants, like we did with HttpHeaders.Names"
2e477b87c27067ee8de55586d9fcd9028802f3e6,Added an instruction to generate a certificate when it expires (maybe in 98 years?)
d5ad5a47ac55adb5a93334c40166e5aec85ec74f,Use default parameters wherever possible to initialize SSLContexts
a8eda60857b8ad118327db0687b4b95a38f8f9f5,Explanation on implementing client cert auth
e8f3c3534c5ef009c8863cee7674df0aa604a913,Some warning message to confirm that certificate authentication really took place
f0431bb98d78c2de4f0c4262514c1b37d75a0648,Added a reference to SecureChatSslContextFactory for those who wants client cert auth
125ae30d04f8f5bb0ae8dd8471159c13a085a54f,Documentation TODO
6849ea2f4b01f4abb4f98fde3f33486935c1491a,the the -> the
7b6fb53fc17437d18878924d131e7cb793cb2857,Use yield instead of sleep
eeb4e8f7b1dc2f9ee15774d4fa957ec650c4be05,Potential fix for failing timing tests
d87d81e3988151e7f721142bc8b7b94c7af22ef3,Removed TestUtil.timingTestEnabled because it's not used in the CI servers
d0e886c344cb4c5b6f4e05bf0b85d911b371b2e6,"Resolved issues: NETTY-280 Add convenient getters and setters for HTTP headers
Resolved issues: NETTY-281 Allow non-string values for HTTP header values"
e50e46425a09598b0c11fba05b24e23d4f129dc4,Improved DefaultHttpMessage.toString() for easier debugging
140aabef68c76aa98041966fa4eebd0717b0a7b2,Fixed a bug where HttpMessage.removeHeader() leads to a dangling pointer in the internal data structure
98ccc7a7848464daad19ae715f2b6cef3be7c5b5,Simplified HTTP snoop example
fddfd4e7cf539a4bc4f88196fe697b389bf63633,Cleaned HTTP example using static imports
2ad21ec84d459d50189259279ccdaea3484c5ee1,Updated Javadoc of HttpHeaders
19cb90d73c38c72b4009be00657f17cb529b35c7,Added TODO
1ad9579e6e61918f8a78a4cc8070fe9524e590af,Javadoc for the RTSP package
ea4692e967a9da6a49dc65b7d975e3f13e1a9983,RtspMethod does not need to extend HttpMethod at all - it does not add anything to HttpMethod
f632925e63d967556d4795e91154b5400187dd46,Typo (what a shame)
d389be442fe8762c9d518b566184150238fd6698,RstpResponseStatus does not need to extend HttpResponseStatus at all - it does not add anything to HttpResposneStatus
07b6e791b518fadb08085c4e0c8e5036f5331f0a,RtspVersion does not need to extend HttpVersion at all - it does not add anything to HttpVersion
0e57f6d004b53812f1ded34310fe98b02bbcb09f,Made RtspMethods and RtspResponseStatuses final
39023c2c7e65b8a7017f87994ec4f0e1393dbca7,Fixed JAvadoc
573f8207a30e9f89cad6494e93a24c3bf3933d91,Removed wrong header value - max-fresh does not exist
9de5df705a5899642b74398d34a711c44f41e558,Added HttpHeaders.Names.CONTENT_BASE
c2465826fd7cc424c1349e8ee4f55fafc8eaaf97,RtspHeaders and its inner classes do not extend HttpHeaders anymore because RTSP user should not see non-RTSP header constants when he or she static-imported RtspHeaders.
3362114248215c7d88c8d21d3c7adf5da5d6879d,"* Replaced e-mail addresses into homepage/blog URL anywhere possible
* Added Amit to COPYRIGHT.txt"
edfc15424ebd5b03710805fb63b08e68f729c9a8,Fixed Javadoc error
4ac906d41700768cce166b2f5baf3d1d8fff8968,enum -> static enum
2df22f8f36e38dd72f4ad8b6a412b27e0df97e50,Removed an empty line
a8205a9545ac2e7d57afdf7ef75a997a8d40c089,"Related issue: NETTY-240 Upgrade the dependencies to the latest versions
* Applied David Dabbs's patch with some minor modification (version bump)"
514586b917ef06cb5d0484eba2793de425ed346f,Reverting back to Guice 1.0 due to compilation issue with JDK 1.5
9d2fcd6ff38018dbe4615dde2a579cce1d1febba,Fixed compilation error resulted by the recent dependency upgrade
aff9af5af25776f258b6bbc099dc35a98d4cf03f,Fixed a bug where DefaultNioSocketChannelConfig does not recognize 'receiveBufferSizePredictorFactory' option
a85635f74c9574efd5d98e6cb717c1635bcc6831,"* Added HttpVersion.isKeepAliveDefault() to handle the 'Connection' header in a more robust manner
* Added HttpVersion constructors with the default keep alive flag - old constructors were deprecated due to ambiguity
* Moved HttpMessage.is/setKeepAlive() to HttpHeaders and deprecated the original method"
cb9f90d6d50d0c1ec1d888614db0e9b676a7b08a,parameter description
030ece5bf9b9fede389a0ecc39253d97bef4347d,Removed redundant conditional
36e804bbec47711aaa7e7387e207b3fce2641ea4,"Resolved issue: NETTY-282 Reduce memory copy between heap buffers and direct buffers in NIO transport
* Replaced JDK's internal direct buffer pool with a custom pool optimized for Netty
* Added ChannelBuffer.isDirect()
* Cleaned up NioWorker.writeNow() and NioDatagramWorker.writeNow()"
c4a230a5825cc62a3e16f4621d58753ecc0141fb,Removed unused method
966004332b0d1074631e52fe9cc2a2c89f59450f,Small optimizations on DirectBufferPool
aa80596b33bc55ef38004d11e5fb26f17d94865a,Fixed documentation errors in HttpMessageDecoder's subclasses
bddfdba415b3730a7043b7a619db5e909936719f,Use DirectBufferPool for NIO socket reads
e9b8f6b2d7cf3abf5a4a04f09bf3980890259c05,Allowed access to DirectBufferPool.acquire(int)
c8d5f1ab4a67923fb55429200507e2ac9d6645ac,For an unknown reason a different exception is raised in NioWorker.read()
2b786116b5613b57375973d8b6984b9e53f28a4b,No need to copy if bufferFactory created a direct buffer
832fe2906337d774db83922e78e6b5cdc27c8e94,"Even if no copy was made, writerIndex should be advanced"
73c81acdfa893fa6e3045197b5087c95804ebb43,comment
c59da2dfe6a88cb6cf6bbbc06f5940a5cbe5c4f5,Tiny optimization
b74cd608153301e42c237c914966e162df095955,"Overhaul on NIO socket writes
* Write operation is made in the caller thread opportunistically
* DirectBufferPool became thread safe due to this change
* This modification still requires more performance analysis and testing"
4bf4d5f814a4eee0ff16aa108ce513be71c72834,"Overhaul on NIO datagram writes
* Write operation is made in the caller thread opportunistically 
* QOTM example uses NIO datagram transport now
* This modification still requires more performance analysis and testing"
84cf41890c16903fcd4fc3089b380c99ba6fdfcf,DirectBufferPool should be static because it uses thread local now
102b69d14f93e1eb0fc4a1e232389d2abc2ad290,"* Fixed a bug where write requests are allowed to be reentrant
* Fixed a bug where writeLock is not used properly - what a dumb mistake"
eed6e6cc3a30ff498b0bcc20872fa9c2e4ee1e28,Fixed a bug where DiscardClientHandler.transferredBytes are always zero
9b1d9b0c61ef82284ef84c0c6e0e3994e12a83ba,Reduced unnecessary duplicate calls on NioSocketChannel
c4b5248f68d9dbaccd9f82e6b6ee453d21b85262,Reduced unnecessary duplicate calls on NioDatagramChannel
e0c14e096a3f80d81e5267ade52d1da3da029bd3,Removed unnecessary attachment() calls
2e363ee91895b3a97e55389c52e16cc1cc24a97e,Inlined too trivial write() method
686ef795f904da5ec4a8be063852ceaf9b099b86,"* Added NonReentrantLock
* Replaced ReentrantLock or monitor object with NonReentrantLock"
829114c37fe41386fcbd44abc28c34302456a5b8,Organized imports
bb0c1e139f7feb8a8f5b583047956ef01074fa04,"* Disabled chunked encoding for RTSP
* Added RTSP encoders"
7e3358f0f339a5b861596634c640928dc14d0bff,CRLF -> CR + LF
901b1f099a6d167744beadb5992f209278325fc1,"* Deprecated ChannelPipelineCoverage (Will be replaced with something I will introduce later)
* Revised JavaDoc so that a user can learn how to manage handler states
* Revised JavaDoc about using ExecutionHandler"
2f7c758fe6c4890390b88a0ab3fab33aea8e3887,"Removed the reference to ChannelPipelineCoverage in the getting started guide.  Beginners should simply start from creating a new instance for every new connection, as shown in the guide and all examples which were revised to avoid confusion.
Shared instances are more advanced topic, which will be addressed in another chapter."
4a3495b1c829b8bd0af9a1c7f07048512fc2a473,"* Added @Sharable annotation which replaces @ChannelPipelineCoverage
* Removed annotations from the examples because it's not essential part of learning the framework - User guide will explain about it later"
a61d5b2e6bb53e27cdf644864a912780e81b0b2d,
a6761fb4c94ad5fa1b3d2ce779c9199b4a16e3e9,Fixed broken Javadoc link
ce0d9838255df2a42844212a6088796207a5c8dc,* APIviz tag tweak
0b16006fd74bbef93d984db3cf8f653fa455d1d1,Added a magic number to the factorial protocol
deb1c1b03860a868821705f295d1462885130e4d,Resolved issue: NETTY-261 Write a port unification example
6f2897a37b6d32524a894f51a127fe0f683c0667,Javadoc
3f6c564090f931519ce79ecf9f066baf1d89867a,Discard the buffer if the protocol is unknown
df82ff6a2cbe9f62139567499a8fbb1e638da167,Comments
51f9ca047a017675734a46123379b59a28c54bc7,[maven-release-plugin] prepare release netty-3.2.0.ALPHA4
5269e645981091315a731db51479b5d82702eb56,[maven-release-plugin] prepare for next development iteration
dd5354858e325bd3f6fa9cc0443d0e5470076c51,Reduced unnecessary Thread.currentThread() calls
77f1b2b4a097e413ce36e3ca4f7ff64d05e7a1d5,Potential fix for performance degradation introduced during NIO write optimization
8e82a1621addb9f4bec6602ec5d83308e24fb089,Reverted back the opportunistic write optimization due to unstability
ffeb1bfb9c44fb87212127b4f7bb0e3136cecc22,Typo
9e72a7f3b1856fab65b1dbec700c28dfb43f9339,Replaced the call to deprecated method
926fdcc7aa685c720bdad0f6d6046027aafe6d84,"Resolved issue: NETTY-289 Disable SSL renegotiation by default
* Added SslHandler.enableRenegotiation
* Disabled renegotiation by default"
ee2ba2629e6f221283d4e180ec17aa5b8dc404d5,Javadoc
0496368055d14aadad09d7806b2b9c939f788dcc,New Javadoc/xref stylesheet
a3f33851de823ac648671f0cdd95587b56ce0643,Copy the Javadoc resources
e247a282b1cd5d8ebb9c3ec779766acc3867effa,Fixed wrong plugin order
194fd79c6b69c16312e2f760e97d7cee459897f6,Better code font
0857f398e001ad856c0c089f04f761adfbb8f8ba,Improved write performance by reducing the lame write attempts on the channel whose send buffer is full already
739e656963d6aac48057d64efd6a20d044da4546,More explanation on how ChannelPipelineFactory works
e1d9627113dda57e4902002112d6d65dc271b521,More code font defaults
bf721614aca5ac07643ba5a7a2d702834967ff2e,"* Removed tabs from css
* Unified indentation to 2 spaces per tab
* Re-added the Apache License header
* Show HR line"
dd7f588916c3598bb3a1227b0b89526bd1869f9f,"* Removed a solved question from the comment
* Applied the same optimization applied to the TCP transport to the UDP transport"
28fe7c67cbe701645d34f1e976b5a16b0e64f9f6,Implemented consolidate-on-flush in BufferedWriteHandler
08597e6f86dfc8a43e66be7ca5cf1535adec8b21,Javadoc
39e91028ebfd8a6c03b80828db0e034da7514a59,Typo
8841f6897f6209d40b3d0379adf32f348ac1100e,Updated documentation
49f548bc5df84a37b9f78334dca38c1815267ce2,Updated documentation
fe36292c943e182a4a3128b80d6172fe1fd5bfe6,Refine the documentation a little bit more
696b5a1f45876fb2bfc0f8e2f0e699a3bfce6b80,Reorder sections in Javadoc
ab1a598534f7bb9fd552af6e853d9f2342427527,Better example that does not use attachment
2b6b49920ce7fc4f83f226e4e9246f7c970196fe,Refine the documentation a little bit more
c64f83fb470daadeeb74116649e10b902a760408,added scm.url
e50192c312387c4c2dc5eeb51108cc1c0b8bf7fb,Added developers section
f650a8bcee075e20dc9573b6310eb83fcbb6fe2d,Rewrote DirectBufferPool using preallocation strategy (like DirectChannelBufferFactory does)
a58c7c4364e06efa41a5f6f56baea880a7944f13,"* Made the preallocated buffer capacity configurable
* Added an integer getter for SystemPropertyUtil"
3ae533815c5665add1737fac40e183307d0eb1a7,"Renamed the system property for NIO constraintLevel
Simpler log message"
3e21c7a7555a3173b2bdcd6b0de8ad07d007c72a,Catch CancelledKeyException from Selector.select()
3b0d843e599db95854e12d2d211405350f0c0399,Increased the default preallocation size for higher out of the box throughput
23b543c4baf2a303b05e41ef96a8348ac967162f,Added more header getters and setters to HttpHeaders
4ef4a92281d02be58e2e6785e1e0b25eba02b9b1,* Added ChunkedInput.isEndOfInput() and changed the contract of ChunkedInput.nextChunk() and hasNextChunk() to support slow streams
3412003bc25c253fbad0085cdbcf55e595f6d94e,Fixed an infinite loop
e7c329cc4edb6f09923dd86e828d7b3c84702d3f,Documentation
263e1ed6015f02bf86e5e8593f039212bebce12f,It seems like using buffer pool during read doesn't seem to help performance at all.
a9c90d0e4af85f8ef131fe089456a5416233a630,Reverted back the changes about direct buffer pool - it doesn't seem to improve the performance as much as additional memory consumption and the latest one often led to OOME during testing
545acfdf42d1098ed2fdce0795ade2ab93949ba9,Resurrected the good old direct buffer pool as a read buffer pool instead of using it both for reads and writes.  (write buffer pool needs different treatment.)
cee5f945dc4a29872591c7762dae9bfe4d100f7f,Tiny code clean up
f4d7f573a1298c99d52beb3c6530280c274d72bf,Upgraded to Google Protobuf 2.3.0
558c02b0df17285d8abba415758a6bc1e52379db,Tiny optimization
4be652ad0443cec7f835deac5dcfc13eca8f2134,Removed an unused method in ReadBufferPool
2f601dcbaf0075ace8c0916d99cfce5a30523561,WriteBuffer -> WriteRequestQueue
1a04586b54717cd7ea06562721838dc2245b586e,Tiny optimization
32ef9e3e52e0266171fcdd1d584962169917b4b2,"* Implemented send buffer pooling
* Renamed ReadBufferPool to SocketReceiveBufferPool"
d9de1675d0eaa243b507c2f841d590ca2bb94e1a,Applied send buffer pool to nio datagram transport
c7179aa28a6cb6c683e36e6177ace1dc84567eac,Renamed ChunkedFile to ChunkedOioFile.  ChunkedFile will be added again as an interface
d1c6ed6531828e171240480db485c0e5af2a6204,Added ChunkedFile interface
81d019e76a26bf8dd7ca3bc8c4a75d8f1dc27929,Reverted back for backward compatibility
9980a25f7b60a0a499d624e8ac3b7e9e2fd85c7f,Reverted back for backward compatibility
baf09787098e0270b3311ecc371fd3ccc62d6591,Fixed documentation
de8671df9307c5ef1c6a95cb2559a7a41f022ee2,Documentation fix
e8c320c6c31237d0c930ea1c6d77d4bd5f691e4f,"* Removed 'volatile' from the member variables that are protected by synchronized (this) block
* Updated comments regarding thread safety"
aa8e48df9ff26ff5b81bdbdb53b29f80494b288b,Removed 'volatile' from the member variables that are protected by ThreadPoolExecutor's BlockingQueue operations
a462d0e85e9f0712fc750856bf3946900505d0eb,"Removed volatile from some internal state member variables in decoders because they are always either:
1) modified from the same threads or
2) protected by happens-before condition that is met by Executor's internal synchronization constructs"
0066f9c3ff3018b952d582cf556e1a2e7703c055,Removed unnecessary volatiles from the examples
28bac1978fd2e0f8ec659481747a8c1b70f50c1e,This should be volatile anyhow
b97648f95e8894b59b2701718dbfbfa98727f0e1,Comment fix
59052be709741a3f3b594818be3774d63598061c,"Related issue: NETTY-293 sendfile() support for NIO TCP transport
Support for progress notification of time-consuming I/O operations
* Added FileRegion
* Added ChannelFutureProgressListener
* Added ChannelFuture.setProgress()
* Performance seems to stay same as before fortunately"
9ecd5739379970d618989eaf7a06334ff0e9407f,Fixed Eclipse compiler warnings
cc3b07c655c7ef0163e79d52676c5fe02e4475e7,Removed FileRegion since a FileChannel can be mapped into a ChannelBuffer.  What a lovely abstraction.
03268034c71a8d928585708bf11f874fa6a60bc8,Removed unnecessary conditional
43a603cfde0cc45ca71fe64655b1fb3c2db1822a,"* Removed unnecessary conditional
* Optimized the use of memory bandwidth in NioWorker.read"
b010cd15a569f08000675efd36b7deee0d2fa06e,Imlemented progress notification for NIO writes
69450ee6ec61ed312bc8b60ea81e7990feae2e83,Doubled the default number of I/O threads which seems to be more sensible better performing default
1989bd037bf8489ba4970dd0cb07d22536418998,Collection -> List
aa4b8a2a6cee441712cdf0f9710179d5d03bbf14,"* Changed the type of WriteCompletionEvent.amount from int to long
* Added back FileRegion since mapped buffer does not outperform transferTo()
* Refactored SocketSendBufferPool to support FileRegion"
049e97f03b786ffd9dac9d2617c39620c320cfcb,Modified HTTP file server to utilize FileRegion support properly
52ef2a5330304ed42d4aa31e5cf6c34519105128,Upgrade your JDK to use FileRegion
a3bae359bd6da059199f1bbe7ca9ce87b4469832,Javadoc clean up
5558f020033a911b14a2fb5c2cce08ab1d3160d3,Resolved issue: NETTY-298 Make ChannelBuffer setter/writer methods to accept int for narrower types
3bbad77075afa7195e57c4ec0c09cb9fe1091199,"Resolved issue: NETTY-297 Non-ssl clients connecting to ssl server should be able to fail fast
* More strict SSL packet validation in SslHandler"
6aa66948229ec062d7527d27c4b7562ceec0e931,"Related issue: NETTY-297 Non-ssl clients connecting to ssl server should be able to fail fast
* More strict SSL packet validation in SslHandler"
8c81a1c8d8d7fde61ba459e532c4d7c57e222e65,"Oops, wrong validation"
1695e32b0fdbd8eafc42b0a1199e832daea84200,Removed unnecessary methods
605d2969d2b803f2a94b9a31dadbaaac4cf49980,Added @Deprecated annotation to the implementations of deprecated methods in ChannelBuffer (basically to silence nagging compiler)
45a0372179a2b6a8fccdee559c067eeeb123a6ad,Upgraded to APIviz 1.3.1
74018249422c9b12668ae19e8fb243894e7ffd6f,[maven-release-plugin] prepare release netty-3.2.0.BETA1
08090968c581486720eb1ac3fd1709f8545b42bd,[maven-release-plugin] prepare for next development iteration
fa6f7a4e6d2cb00394f7089977f2fce6a3116490,Fixed a bug where the pooled send buffer is not released on a failed write
5d361094646faecaf7343142623054a4b834b1d8,Fixed Javadoc errors
0d3389ee5203e4beab769cbb67e6e5399ab78a83,Updated Javadoc / xref css
807291a2dbb813fb34196908e544efd45b83e749,Removed outdated XNIO transport - it needs to be rewritten in the next major feature release.
1612dd848f87caf80dd813c6e0183d0007b28079,Removed unnecessary dependencies
bd1c366afc2926422ee974a07ed7ee316b72fc91,"* NETTY-240 Upgrade the dependencies to the latest versions
* Release plugin should use dav:svn instead of dav."
4a4f129381dbf1e303c07dbad9cf0817d5d5f0ad,Better documentation
1f20d1b98140b9302f6a3d13c4f7275cfb2d000f,"Resolved issue: NETTY-300 Conform to JBoss project version convention
* Red Hat -> Red Hat, Inc."
c1b1db276d3eec817263ea305f9e864ce52697d1,More useful Javadoc
7c139cf1b78cbd9f103965d256046df8e8448082,"* Added HttpClientCodec and HttpServerCodec
* Additional Javadoc about handling HEAD and CONNECT requests and their responses"
c1a70b3579b02ed2e75f7db64915b97cf6d7f6fe,HTTPS support
745b8300f0f67ab359bc9a0caef8bdaa92f7c45c,Do not decode when the content is empty
b210c36ef941daf658e80ca1f9fd76c21544c719,Do not remove 'Content-Length' header even for a message with empty content - HEAD requires that
8eb353eb5d3d9b5d6070ebce45877e467a23bc6d,HttpChunk is mutable so no need to create a new chunk
3f7fff3fa5cee1b02bb2109004dd1f0561a956b6,HttpChunk is mutable so no need to create a new chunk
1ae76562b7cb8cc6d2093b8373723a4c79fea277,Simplified container integration by removing unused features
88f1332179ae6a5f6b03b44d48e1c45aa3c97cec,Excluded container integration classes from Javadoc
11e5e2ba568ecc74f14b2135384e4ea79551850c,Fixed issue: NETTY-306 bug in passing large nonchunked data through ChunketWriteHandler
8474026c922093d6b2bdc92d21366176c18dcbb9,"* Misuse warnings are logged at WARN level now (with higher threshold)
* Extracted duplicate code into SharedResourceMisuseDetector"
cac77a47b265e4fd2e39fc469d0abb6d32704b72,Fixed a wrong usage of ExecutionHandler in the example
d0d25198716e23bb206e278f35ee4eeb6d00ba2c,Fixed issue: NETTY-308 ChunkedInput implementations send only the first chunk
2fc539a9bc7ce04b1f106e6339ea68851dff1b2c,Proper LocalAddress.compareTo() implementation
17a222e3972bfb52d567e61c444575f8bcdf49be,"* Changed the sort order of LocalAddress.compareTo()
* Added a FIXME to LocalAddress.compareTo()
* Modified LocalAddress.compareTo() to throw an Error when impacted by the known bug in compareTo() - will fix this bug in the next major feature release since it will break the backward compatibility"
318a4d901fb6c952d65ba8c09be7bf2d9d791838,Fixed a silly bug in file transfer - There's no way to specify the start offset in FileRegion.transferTo()
4e69cfe2819a6588f6930f14c4b78e80c3ed4143,Exception should be raised even if count is 0
48696d909f82558eb9f43f06ee7b1e8c5741f21c,Updated APIviz tags
ba08d11356d6057d9e3c5842a3e971c46b3fe09f,"* Code clean-up
* More strict sanity check"
66882ae70887ca45ef408d76d30918940c31f224,"* Updated APIviz tags
* More help on file transfer"
3aa3b07a95e48ebc48b30084941e48ad540ed99f,Hint on downcasting and multicasting
640fae79636135fa417eeede2563feb7c60fcb91,Updated architecture diagram
d38219a85cf50d65656efa499e2933d94670f2dd,Fixed a bug where non-successful HEAD response is assumed to have a message body
f1bba73b22478eef7b42340fa1cc58d793e4a8e3,Typo in the comment
2ac79dcb74eb8afd772a7d7e7000ae777b56f066,A little optimization
5741721f71f185872aa3d4860644d31df22ace1b,Fixed a bug where HEAD response is not read completely if it's transfer encoding is 'chunked'.
2cef582f07a84bc495b57842db81b6dde3fa9357,Inherited jboss-parent / Used maven-resources-plugin instead of maven-antrun-plugin
b4e183a9fe026dfacb6f3f2e47376e58e2d70d72,Removed the license files for unused dependencies
e5ccdee14e46f3f22a8ebc5ec1023d9dc87b8569,Removed the license files for unused dependencies
3dd2224da58c78090ccd4ed5801ddadf536f4e00,copy license info to target/classes
37fca96a059f41ce35d91f58206ec737fd150367,Wrong outputDirectory
0d4bba0a0930067a3c88789762d9f4624d9c1ab7,reverting back to the older jdocbook plugin due to weird build problem
34b2ed1a8d9d3249c5ae60263137556931c8946e,Fixed a build problem where the resulting artifact does not contain the legal stuff.
b2f550cb3b1aa213798e391057d36f13158d13c5,Fixed a bug where RtspResponseDecoder generates a request object instead of a response object
d4049710bb22987767c7dcc1121f5f73760106a0,"* Fixed dangling HTTP header entries in the linked list
* Added a test case"
8c490ed6e57ded52f8976892d7076bdff3c24e20,Wrong inception year
b134bfb97449190279650d0ef8ddc92f85b78aa0,Comment
6269d21712213d741e58c56aac78c38ff198d7ec,Fixed the oversized architecture diagram in the PDF
58f8dd89421aa1fb721ec6656c95578b8a0454f4,Updated the broken first statement in the preface.
66cbce8f239b1306b94a5da1c30452347141666d,Removed the first paragraph
13d83171fbb39217d6e293cb3d61f4c608697a5b,Updated 'before getting started'
1793c659caf2e6a02b9577adb06726bef6c4af3f,Fixed indentation
56cdf73cb98c3b080e354eacec5c527cd3f1b265,Fixed issue: NETTY-314  ProtobufEncoder and ProtobufDecoder should accept MessageLite as well as Message.
5edc4e16aae9196bd02a645b12c236060491cc5c,"* StaticChannelPipeline's constructor should stop when a null is encountered
* Added a test case for StaticChannelPipeline"
8bb9ad26ade6967d435c1224a9114ba772030d3b,Updated Javadoc
2c887daabe0f212b9f3e88c4b0ebd63a409b2f4c,Added missing Javadoc
bdd213ec85f467f3dd39b2fd1074667a4340ac65,"* Added missing Javadoc
* Proper getIntHeader() behavior"
14d27eb7c90f3dd13b5e66e200cd36080b9981f9,Removed the unused dependencies from NOTICE.txt
7620360e1f2dcd8a125e719363c494c825a779e3,[maven-release-plugin] prepare release netty-3.2.0.CR1
4fc22e1a264bcbc7eeb938758ed307ee88954b84,[maven-release-plugin] prepare for next development iteration
65ee3d5579409795eaf5d6ac6e4be29dcc2c798c,Inserted Google Analytics code
23dfc0306072afccabcea49661fc407dfd5fa600,migrating to docs.jboss.org
688ec9d927594b12dae384c91cbeeec3d05a6b1e,removed google analytics
d19aa4924e2018772474752c1244d9965ce2a514,Simplified and hardened ObjectDecoder by extending LengthFieldBasedFrameDecoder
93f9c4a2d69592e96d3b640dee66b4223cf92a2f,"* Added LengthFieldBasedFrameDecoder.extractFrame()
* ObjectDecoder overrides extractFrame() to avoid memory copy"
3847fb00e52cf3a6b297d748e66c21e28ef3f476,"Fixed issue: NETTY-310 Memory leak in netty-3.2.0.BETA1.jar
* Added a special internal use only constructor to AbstractChannel, which bypasses ID allocation
* EmbeddedChannel calls the special purpose constructor to avoid leak"
0c9202ab75bc4ca9c8129f7e6bc98afc4da6ba44,Fixed a bug where RtspResponseDecoder does not decode a response with no 'Content-Length' header properly
d51ccd221119bb81e40c83ea403cc5129465e6c5,The fix for RtspResponseDecoder should be applied to all RTSP decoders
c64e6866f62490fdbfd3037abd1053b71aa0c09d,Added a FIXME for later releases
be544fa8993ab6df0bda91583e81487c847adff2,Added a TODO for 4.0 (or 3.3?)
d65cd371e7456f8acbf8af5dcb2166cce0e87b50,Fixed a bug where HttpTunnelingClientSocketChannel's closeFuture is not notified if the connection is closed by the client
7d11a5369fe4a7d02531f3ad115057cb9e069705,Proper validation for HttpResponseStatus
0d0b0c56c33bd801f3f82f5c450be77f5012ccfa,"Fixed NETTY-319 HttpMessageDecoder incorrect parsing status line
* Specified an empty reason phrase if no reason phrase was specified"
11705c991554cc81683654de216f5cfe0771b110,Removed System.out
a2ef43cf3dea5c555a4c709932bee5b8766a5fbb,Streamline LinkedTransferQueue.isEmpty()
e2ac42975c620acd0f4985b2319c5a3b29e3d052,[maven-release-plugin] prepare release netty-3.2.0.Final
62746e3e5e2fe8d9c0c8b9385bacf96817b022c5,[maven-release-plugin] prepare for next development iteration
a55a1c6e7293e3ae0d64aefa54667ee57a9e7cf7,Removed unnecessary lock
3a92fb8a9e5f332a17ee6089e67583f7a5214a3a,"Fixed NETTY-320 ReplayingDecoderBuffer.toByteBuffer(int, int) throws java.lang.IndexOutOfBoundsException
* Added missing checkIndex() call"
4a390a1983cce591fb0f6e7b8b4ebc75813d5958,More Javadoc
659eedb970b42e01222709b2de374773e4df60b1,Better package description
c032708ed75306a56394d85a0b384a4cfdd7f1e0,Updated Javadoc
5097009f8c35e11a77294c3a8b3abb309ad39427,"* Fixed an infiniloop in NioDatagramWorker which is triggered when a user writes an empty buffer.
* Reduced system calls on empty buffer"
6d0fb256c611ab7e3c05d143c21e0fcad3498017,"Fixed issue: NETTY-325 (QueryStringDecoder doesn't properly handle missing query string values and other corner cases)
* Rewrote QueryStringDecoder based on Benoit's work
* Added a test case for QueryStringDecoder"
800fcd0ca2794c29ceb8de489539fbd6358bfe49,More tests
2571564eb2307f27620a2682df71776b5d630d07,"* Updated the author tag
* Added svn:keywords property"
cbe26db0e46c8f6df28abb8319f777f0a02af1a1,Replaced email with homepage url
4b0219ee9bdb5c1a1e5c1809ce40b8d0031a773b,"Potential fix for rare failure:
javax.net.ssl.SSLException: renegotiation attempted by peer; closing the connection
	at org.jboss.netty.handler.ssl.SslHandler.handleRenegotiation(SslHandler.java:967)
	at org.jboss.netty.handler.ssl.SslHandler.wrapNonAppData(SslHandler.java:810)
	at org.jboss.netty.handler.ssl.SslHandler.handshake(SslHandler.java:347)"
f2d490ef9f7bdaf19466ba28e0495488b99458fd,Suppress system calls when a user attempts to write an empty buffer
f753dc2b834886302c58c7cee19e65874378bcaf,Replaced SslHandler.pendingEncryptedWrites with the thread-safe one
752e60a7237790c6ab6dbafcc521ccaf8b801b46,Suppress system calls when a user attempts to write an empty buffer
de90cd6a3c6517bac0564c8552fdd09bd37fc7fc,System call needs to be made at least once so that it can fail when a user attempts to write on a closed channel
575b7fb073a2f5b8d30ea8b07cc56c19c2abefa2,More Javadoc based on community feed back
f88108e8767eee810276ff8935d48197b3de9b4b,"Fixed a bug: NETTY-329 ChannelBuffer.slice(index, length) returns a slice with wrong reader/writerIndex
* HeapChannelBuffer.slice(index, length) and ByteBufferBackedChannelBuffer.slice(index, length) should update indexes when they created a slice using duplicate()
* Added relevant test cases"
5f3fe473926e72bece19f927251560f9bf0f23ec,Excluded examples from the JAR
c35c9eb1c315d73f3f57564ee6bff52365cd592f,Mention WebSocket
e0545ba58359599a5beb7b69726530369412dda5,"Fixed issue: NETTY-330 HttpMessageDecoder cannot decode new handshake messages
* HttpHeaders.getContentLength() returns 10 and 18 for WebSocket handshake messages
* Updated the WebSocket server example to support the new handshake method"
7df28adfe32361be1a4d69a3282f8c8f197ac278,Fixed wrong content length for websocket handshake messages
685153663e5ff2599e6d70172039d44ea0b7a1f0,Fixed wrong content length for websocket handshake messages
b2ebe26a25d1dbd2c20b6979c81c16c7cb2492c6,"* Improved protocol buffers integration javadoc
* Changed the localtime example to use the base128 variant length header which is popular among protobuf users"
c9555d01bf34a8405908e92235658e2839be3b90,Added a TODO to ProtobufVariant32FrameDecoder
ce2736b4efdc7660df6bc6b1881bd694a04a2a42,[maven-release-plugin] prepare release netty-3.2.1.Final
14a82cb6df0a94ca3fc9321f70e4a3294bd6e30c,[maven-release-plugin] prepare for next development iteration
bae46eca4917466cda8ae6eec68d7bfc4da48f75,Discard too long frame in a more robust manner
ab0facdee593d611445c9cbafbba27b0374c41c0,* Discard too long frame in a more robust manner (i.e. should continue decoding after raising TooLongFrameException)
674af6ae12f51d24c6b0d5d033758ce37821c27a,Fixed infinite loop in ProtobufVarint32FrameDecoder when too large varint length is received
56c0e6da07854449d0a7e050e16c62cf50c86013,larger -> wider
e3a5a8eea2f027e1d407cc95b18db911ee05322e,Do not change the readerIndex
f4e83e04213420f7cb5b1d5ac4a825b6c09589a5,Begin 4.0
5518344bc38e66862085e0288d3205301f1c9a82,NETTY-335 Remove deprecated elements
5c790b5e8a2fd1ddcd288a1104b0eaa6b3d0e51c,Fixed a documentation error
cd6e7f0c3e84c8a872c6f0c2c49372e951bd4b5c,Missing dots
9d89ad08371a7ef905c6e24589ef8d4456211a40,"* Resolved issue: NETTY-336 Fine-grained control over thread renaming
** Redefined ThreadNameDeterminer
* Improved caching in AbstractChannel.toString()
* Improved overall OIO thread naming (thread ID number is a large number which doesn't look good though.  will fix it later)"
6bebbdad559eb9b2af9a68c3a24e85588a6b6adb,Javadoc
8216a3fa5e651a31fbd2d5a1b7955f5b3d29950b,Commented out System.out.println
d32e7ff865306eac8e20400d8bef1ac36757afea,Fixed wrong comment
35351701ffaa6724779ae22e858ca9a9d324d485,More compact binary frame length encoding in WebSockets
3156ed5dd51f69a0732546e67aaea74710164495,"* Added WebSocketFrame.CLOSING_HANDSHAKE
* WebSocketFrameDecoder discards data if closing handshake was received before"
1c6813a06d85178c56bae1894a76199b49b3e8a3,Fixed issue: NETTY-337 Multi-line headers truncated
e36d2dc3de7316d4196ac263400e29ed82ef220d,"Fixed issue: NETTY-331 (Regression NETTY-262: Server bootstrap bound channel pipeline has become immutable)
* ServerBootstrap now always uses the default pipeline instead of the static one"
21db320f0eec1e081127ab55c0df55565816a474,Fixed issue: NETTY-342 Small typo in the user guide
4680cd0bb3e0bd1029e2c3d434bdd651dd9ed9ce,Improved performance of ProtobufDecoder using array directly when possible (Thanks Ian - iswett@yahoo.com)
36598478593d17d1be07edfbe1ba58530855d18f,More strict thread naming rule
d68c5160edb4a54a533c0560f5875f7b7dc9f686,Added parentId to ThreadNamingRunnable
1c13d8c9f3567276540f49673097197a2e37b27e,Fixed a bug where HttpMessage.chunked flag is not cleared by HttpChunkAggregator
30d5136973ebfc1d650b659b5f5833613b2b8ded,Fixed a dead lock where MemoryAwareThreadPoolExecutor does not release its semaphore completely
e8fcbd4e75ce594042f393a5cf18db01ee512628,Fixed a bug where some ChannelPipelineSinks do not always release its shutdownLock on an Error
ffccf71fa53541f657bc48ff471a194a6d9300cb,Fixed issue: NETTY-350 Copy/paste error in org.jboss.netty.handler.codec.http.HttpMessageDecoder constructor
d223c2905dea8177dcc7e3d25b0fd4b0ffb5861e,"Fixed issue: NETTY-345 HttpChunkAggregator doesn't support retrieving trailing headers
* Merge the trailing headers into the aggregated message"
2eb2901c1ce15d0562367d82c313272be377953a,Fixed a bug where the CodecEmbedder implementations do not generate the close request - this issue prevented some encoders like ZlibEncoder from generating the footer
d4438170c9cbfd5183ab9ad84584f5cb4125b8e0,Fixed a buffer rewrite trap which occurs when DirectChannelBufferFactory is used
0cc728a9f0b60ef1133304e6f0063081209292d4,"Resolved issue: NETTY-346 ReplayingDecoderBuffer doesn't support array()
* Added ReplayingDecoder.internalBuffer() so that a brave user accesses the internal buffer directly at one's own risk"
13a1b73cd18f566dfb30ac7e778c5349dede1d03,"Fixed issue: NETTY-356 WebSocket encoder regression
* Fixed a bug where WebSocketFrameEncoder does not set MSB of the length field"
04430cd6d3acea80a43e64ee3988548854476713,"Fixed issue: NETTY-359 Missing support for HTTP 'Expect: 100-continue' header.
* Added HttpHeaders.is/set100ContinueExpected()
* HttpMessageDecoder converts unchunked messages into chunked ones if Expect: 100-continue header exists."
4fd034ab5d28ac96d2ab59f33753d6b4d4c025b1,"Fixed issue: NETTY-359 Missing support for HTTP 'Expect: 100-continue' header.
* Improved the snoop example to support the 100-continue header
* Fixed a problem in HttpClientCodec, HTtpContentDecoder and HttpContentEncoder where 100-continue response causes incorrect behavior"
d093ed4a546da835da40ae385cd2dd664ce62c51,Fixed a potential thread safety issue in SslHandler.handleRenegotiation() - it seems to cause the first handshake attempt to fail rarely on some platform (Solaris SPARC?)
57dc0b3bc8ba21a262d3549f17da796106aa1036,"Fixed issue: NETTY-359 Missing support for HTTP 'Expect: 100-continue' header.
* Improved HttpHeaders.is100ContinueExpected() to conform to the RFC
* HttpChunkAggregator now sends ""HTTP/1.1 100 Continue"" response automatically.
* Added some TODO items which should be done in 4.0."
4399c1e90b6372cddb4b8af829cb240059d416e7,Removed nagging compiler warnings introduced by Eclipse Helios
35a2326e82a832f95277b0e9dc930a4225bbda40,Fixed compilation errors in some compilers
b85731e59f13d9d907188f925eeec16ba406a8da,Sync with upstream
f13e7053feb95f0b53de8749f5000bd34948fbc9,Fixed an OOME in the HexDumpProxy example
d9dba0d75425091f55f6f12a424798bfd535b16f,Fixed wrong license file name
1f2285f57e98ec286b4fc1505fdf46f0a6847376,"Fixed issue: NETTY-360 Changing Channel.interestOps sometimes does not work under heavy write traffic in NIO transport
* Made sure all setRawInterestOps() calls are protected by interestOpsLock
Fixed a race condition in the HexDumpProxy example"
f700f9b14fead7ca6c3bed67005a7d5ea16ce1b8,Fixed misleading Javadoc in ReplayingDecoder
d3fb52e11da269896731138fb0f453ba15e2ebdc,4.0 requires Java 6 or above
0dbdbcdb968dadb5f009f93de945b0aeb539b6d9,Added @Override annotations which were disallowed in Java 5 but not anymore in Java 6.
c0c9f689f6bd39b02471e2411a699a2d2b0bff4e,"NETTY-333 Support File Uploading in Netty HTTP Server
* Merged the Frederic's HttpPost patch (still needs some design and naming review + documentation)"
96ba5819cc504815a34b5ee970bdf11614db65f4,Added Version.java to .gitignore because it's generated during the build
34b181236a86421e44843ff9339afe7f4bb0a0c1,"NETTY-363 Traffic shaper
* Merged Frederic's traffic shaper patch (needs some review and documentation)"
1ffb1aea75c36def56b709bd0892b19df78d9249,"NETTY-364 Application level IP filter
* Merged Frederic's ipfilter patch (needs some review and documentation)"
cd133919d3d0ed628d04be008d40b3c9e0709fcb,Added IntelliJ specific files to .gitignore
e83b5503daef3b9bef98202a97e12cf62b900813,Fixed NETTY-376 Manifest not present in the first entry of the zip
3d85d56631cba678c0779efc5685fb7635102dc4,Correct variable name in code samples.
1f1b8d83259398f236bc4bb99676243192f6dedd,"Add a new faster, memory efficient URL decoder.

Query string parameters need to be decoded as per RFC 3986, Section 2.
The implementation of the URLDecoder in the JDK is slow because it takes
long and inefficient code paths, and it generates a lot more garbage
than necessary.  This decoder is about 2x faster and doesn't allocate
any memory in the easy case where the decoded string is unchanged.
When the string needs to be changed, only one buffer is allocated for
the decoded string."
4f9e6dcb130afd4528f5937436c7a55dc59be8d9,"Fix for NETTY-370 - documentation updated to reflect the correct behaviour of
high / low water marks on the interest ops of nio channels."
7866282d5246964446f8416c6eebf51957435f15,Fixed indentation
c5a29f00a49346e67ea5f1a70eaa2d92da15af62,"Fixed build issues

* Replaced the buildnumber plugin with antrun exec tag to generate the build number correctly.
* Fixed a problem where MANIFEST.MF is lost"
1c067a5c2184f5f4a2e04f0c7f58b4e39603b20d,Changed SCM URLs
23de6d53612125317623a35ae82045a72f8c1a18,"Fixed build issues

* Replaced the buildnumber plugin with antrun exec tag to generate the build number correctly.
* Fixed a problem where MANIFEST.MF is lost"
941c437b9c3da1c7bb2a5c7820c29e2386084a13,Changed SCM URLs
a28702c9e9d41b70a4743618d372b5d680c9cca6,Merge branch 'master' of git://github.com/netty/netty
8ad04dc6cac8739a9662aebe83218d9d05fc91c3,"Fixed issue: NETTY-377 messageReceived could happen before
channelConnected when using local channels

More precise LocalChannel state management to avoid incorrect event
order"
6bfd2d6cec36aa887f507574c3ab20bcc7305b5f,"Fixed issue: NETTY-374 ChunkedWriteHandler and handling messages after
channel close

Fixed a bug where a write requests made after closure are not
discarded"
a719e88856014c766f0784f30fbcec575ef07b1b,"Fixed issue: NETTY-371 OSGi Manifest requires Bundle-BuddyPolicy for
object deserialization

Added proper BuddyPolicy properties to the manifest"
23c100190c480438cd9bb8cd7fbcac6b42ffe1fc,Set buildNumber to 'unknown' when built out of git repository
d7c27d1b71887767d905d81dbff2038dbd2c5ea7,Fixed Javadoc warnings
9f558348234ce929658226b98eba84c48a5405aa,"Fixed incorrect usage of ByteBuffer.arrayOffset()

* NETTY-368 Wrappedbuffer does not honour posiiton()
* and similar mistakes found during a review"
23f33629cab8c7773365ec19f4a8133071007cff,"Fixed a race condition in MemoryAwareThreadPoolExecutor

Replaced a semaphore with a custom concurrency construct to fix a
known race condition in MemoryAwareThreadPoolExecutor"
ad320f6cae80df35d016907bb4bcd016abf046ee,"Fixed NETTY-365 HashedWheelTimer.stop() enters an infinite loop when
called from TimerTask
Fixed NETTY-379 Intermittent slippery task timeout in HashedWheelTimer
* Throw an IllegalStateException if HashedWheelTimer.stop() is called
from TimerTask
* Reschedule the slipped task accurately instead of delaying it by one
round"
8eb2d8eb43777acde58423e6341ca6a9edd2c649,ChannelGroup.write() should not write to a server channel
dfe960855fec0fc053194f6da5a9cd912565c292,"Fixed issue: NETTY-380 releaseExternalResources() hang indefinitely
when called from a handler

* Replaced IoWorkerRunnable with DeadLockProofWorker
* ExecutorUtil now checks dead lock"
d8ff1806103d1e6e50fe9eaeefcb16039f41f654,"NioDatagramWorker should reject the write attempt on an unbound
socket, raising NotYetBoundException."
a5aef71218e24908ed1994ba5cd9663c57119e32,"Fixed issue: NETTY-373 Deadlock in ChunkedWriteHandler on channel
close.

* channelInterestChanged event is not fired anymore when a socket is
closing because it is unnecessary"
4c9b4329f2e63b456af57cabcc5c2daa660c149c,Fixed issue: NETTY-372 NullPointerException in ChunkedWriteHandler
d786a38139d075623ea46bb12e51e97f35081396,"Fixed NETTY-381 channelDisconnected event is sometimes not triggered when Channel.close() is called by multiple threads.

* Internal state variable should never be set to ST_CLOSED until the close channel future is set"
eb02c57619fa66d40f5c0e79ee1564088ec3bc72,Fixed Javadoc error
b53742e36601cd7a3d80b23b29d841d3272d01f7,Added Main-Class property to the manifest for easier version check
4d6581fe3d6161bb55197040b3363273249b610e,"* Fixed a documentation error in ChannelBuffer javadoc
* Clearly specified that FrameDecoder is an implementation of ChannelHandler"
420431cabb7fc4cb80c8c44bd65e490b19afcae7,Added missing @Overrides annotations
195df8bec454f92e92f19a836c6c05750c58d3d9,Fixed wrong comment
098eacc1350f6568da46c90d76fdfdc7851352cf,Updated the dependency and plugin versions
1dd30c8abed7e4271b751cc0c69073d34b4be6f4,Upgraded the enforcer plugin and updated the rule
93d9461ff53cdaa1049b5f235350db847d0edda2,Fixed broken SCM URL in pom.xml
429d3987dc98fc37c3fbd1a44baf4a29eba1b975,"Fixed issue: NETTY-382 ChannelLocal.remove() should return the return
value of initialValue() instead of null when no value was set."
7ab5ec5f74b97635de235b99c490a8854edecd33,"NETTY-383 deflate-raw support for HttpContentDecompressor

* Added ZlibWrapperType.ZLIB_OR_NONE for auto-detection and updated
the relevant Zlib implementation"
4144b437355bbbc99f4021f734e9fd48553662fc,"NETTY-386 Support for serial connections using RXTX

Contributed by Daniel Bimschas and Dennis Pfisterer
Initial import after fixing compiler warnings and removing log
messages and shut-down hooks"
a5e9f633ef259e26744fdb8217035e2477dd301b,Better variable naming / Fixed potential stall
98b2b6d8dc0642155c588325c27c0730d395d2f4,"Do not write an empty buffer unnecessarily when nextChunk() returned
null"
0382538548eaddf53b2556600e53c88fed7b19a9,Removed unused ChunkedInput.hasNextChunk()
ec6b34a307d97c75670c8ec0e4e6b8dca138da26,Updated Javadoc
6707aa751c7f120f9d2ed78fa60ccf2997810990,Fixed a typo
f3899e8d5801d34c8c1aae1b8d20e2dda48d7787,Fixed an infinite loop on a certain NIO impl
d1919d0e142208f7251815bdf06b188697fa4efd,"Fixed NETTY-336 Fine-grained control over thread renaming

Removed ThreadNameDeterminer and ThreadRenamingRunnable completely and let user specify the Executor with one's own ThreadFactory"
83bc3e794a4a2be0c788adc7ea47713fc6b6da0e,"Fixed NETTY-336 Fine-grained control over thread renaming

Added NamedThreadFactory so that a user can customize I/O thread names easily"
89de2e4b95ed28d72d7fba17752e2ab8fe872c4f,"Fixed NETTY-336 Fine-grained control over thread renaming

NamedThreadFactory now can set the daemon flag and the thread priority"
10e2fc44e5e8be36ad1583b7adf95257c1f38c34,"Fixed NETTY-336 Fine-grained control over thread renaming

Fixed exception message"
94ac810f2eb49afce4ae03d964f731fb24bac88f,"NETTY-393: SslHandler infinite loop on Apache Harmony with large payload

Increased the SSL buffer size by 1024 as advised"
6f7e2606a1b68fbf1875928d8accf3ef82e54ace,Merge branch 'master' of github.com:trustin/netty
16750ffc2802e6098e624df56ea6fbbe5c1055c3,"NETTY-394 SslHandler does not work with a little endian buffer

Added SslHandler.getShort() which replaces ChannelBuffer.getShort() calls"
b26f13d3b9dd255817d669a4bc37699cbb37eea5,Fixed compilation and removed unused fields
98db0d390814b0738b876d1f62e9145c9bcba819,"Added a timeout for the UdpClient so that the test cannot hang.
I noticed the build ""hanging/halting"" on the test when running the cobertura code coverage Eclipse plugin."
e00e9bb8fa6bd0cb4b4f4e8de515deb9dba4bad5,fix typo in exception message
a85249ced80fc3b556e5e54ed0f84d639786c1f2,Added handing of HTTP headers with respect to browser caching and cache validation.
eb6ec29b14bc39f6a9ca59a2c977b0d9bf42bd6d,"Fixed SimpleDateFormat bug. Should use new SimpleDateFormat(HTTP_DATE_FORMAT, Locale.US), otherwise when running on for example Japanese OS, the resulting date would contains Japanese characters, and the browser would not be able to parse!"
4aef19e947cdb7fb31be2af222e6940889887904,Updated the initial Javadoc written by Veebs w/ a little formatting
12d2c8ad2e0ac301e8bd12b00aa6c21c5d8ab2a7,"NETTY-246: adding implementation to netty trunk for the 4.0.0 release. In order to get the tests to pass,
I had to change the surefire fork policy from ""never"" to ""once"", as it seems the classloader settings used
by the maven process were preventing jmock from mocking package private interfaces."
f7729bc8bb4cf6e0ee914bf2893b80cd02af9f28,"Moved http tunnel implementation into org.jboss.netty.channel.socket.http package, replacing the original implementation.
Existing usage example has been deleted and should be replaced by an updated example using the new API."
a617bd32902aa04036e3a58934598cf63b28bea0,Fixed formatting to conform to project standards
39a6baf380dc4c5b29e18764874a811c9e293c0b,"fixing formatting for NioSocketChannelConfig, which I had incorrectly merged earlier."
a722f649912384a2379e9c4f298cb42b83a37053,Fixed indentation
1b6dff997556310c0dcb9ce59eb0fb5e010134af,added sctp package dir with initial classes copied from nio tcp
92ccd2fbfa480006153a7d272323f68a90b608b5,fixed sctp package compilation errors
dad06d539c746caf314c251d2c44830559d5389c,added initial version of sctp transport
e1869db9130ec7b28074ae7ac70c2f256ca8ad03,"Fixed various compiler warnings

* Missing @Override annotations
* Indirect access to a private member from inner classes
* Incorrect @see javadoc tags (should not use the @link tag)
* .."
aca290096be10a85bc9dbcd68b2d6a63469ad010,Close bold tag.
45a4b5b7c451e9829c410ca7589fc3cc00e6de49,"Fixed a bug in the uptime example where uptime is reset even when it
shouldn't be."
f22a55d6e24c4a3c12d35aeb07f03f6cacadb3e1,"NETTY-401 - NullPointerException when ReadTimeoutHandler is
concurrently initialized and destroyed

* Made ReadTimeoutHandler @Sharable
* Updated the UptimeClient again
** no static fields for global state - just reuse the handlers."
fd7b5769f71293cbf80009375c8636dc1fb761f1,"Made IdleStateHandler @Sharable and removed unnecessary lazy
initialization in ReadTimeoutHandler"
94cff9d041dc5abe3892d29900e72ce2eded7cb7,"NETTY-295 - HTTP header getters and setters for date headers

* Merged CookieDateFormat into HttpHeaderDateFormat, which can parse all
known date format variants related with HTTP
* Added HttpHeaders.get/setDate()"
9db6bba9132c0f69eeb2caf272c6061d8877a4e4,"NETTY-295 HTTP header getters/setters for date headers

* Added get/setDateHeader() methods that works with custom date
headers
* Removed get/setDateInMilliseconds() methods because they can be
simply represented with a chained getTime() call
* Fixed the inconsistent behavior & contract of
HttpHeaders.getContentLength() which does not throw an exception when
the header is missing or ill-formatted unless a default value is
specified
* Added clearHeaders() and removeHeader() to HttpHeaders
* Tabs to spaces"
15792da16754b0cec64497065aec349b46a8cb4b,Tabs to spaces
dd1ff8d9cc7a4a2644fc63d1809d93f13f93a5bf,Handle chunked encoding properly for non-200 responses
45a7692f0749eb623796b90241fa0133fc54287a,"Fixed NETTY-397, NETTY-398, NETTY-399, NETTY-403"
0062cb743c75e1733d0ade692bfafcfd5f66b1a8,Added FIXME
65fc361eeceb195e126559e1eee6bc58dea67e0e,"* Fixed the bug in CookieEncoder if there are no cookie's set while
calling encode(). Without the fix, it ended up in calling the
exception ""java.lang.StringIndexOutOfBoundsException"".
* Also added test case to verify the patch

Change-Id: Ib96425e07ab50be027ade7be0748cceb6438a586"
ccc155e96fe498a62e302609d0bd65aa3abecb04,Fixed code format
8982838ab2a1341f9a8c5b0e7a39d3ee15b6dfd3,Small fix to the http tunnel to prevent null pointer is attempt is made to close channel twice
2acd74db83df1bf54832b749ed92b13866caa7a3,"NETTY-410 NioWorker write deadlock

Applied the patch provided by Greg Dhuse."
e2655f3c3834af8c68fc470987a5cabc6eb03ae0,"NETTY-389 java.lang.ClassCastException: org.jboss.netty.channel.FileRegion cannot be cast to org.jboss.netty.buffer.ChannelBuffer

* Updated JavaDoc to let users know that not all transports support FileRegion
* Added FIXME for future improvement"
b9ef785b5be33306028aa34be07c4847031f2ce1,"NETTY-406 ProtobufEncoder should also support Message.Builder

* Added support for Message.Builder"
4bf26c31e97790d89d312edfdd9022bf07c952be,"NETTY-410 NioWorker write deadlock

Applied the patch provided by Greg Dhuse."
dfd7b0d6c3ecfcf7a44463899383d7390b905d0e,"NETTY-426 Prevent a user from reusing an upstream MessageEvent to write
something

Modified the pipeline implementations so that it rejects the attempt to
send an UpstreamMessageEvent to downstream"
acb1ac84e6e737ac934dcc148f247dc02ffcc796,"NETTY-425 ChannelBuffers.compare does not handle unsigned bytes correctly

* Fixed a bug where signed comparison is made where unsigned comparison is expected"
95f3af0a02c664f4a73c7ba4f1a32c11aecd28f0,"NETTY-418 isCompleteFailure() and isCompleteSuccess() are both true at the same time

* Fixed incorrect isPartialSuccess(), isPartialFailure(), isCompleteFailure() implementation"
07803b3e2c463b9ad5c1b82c747cb04e7bffb4c0,Updated version of netty-iostream channels
5579a91e1d83d6a9f43b11978e6af6fad26395d3,"NETTY-415 ChannelFuture.setFailure() not called when exception thrown handling Channel.close()

* Made sure the ChannelFuture associated with a downstream event is marked as failure when an exception is raised before it reaches at ChannelSink."
46c9a5f094725b49e36dc1a39d5a756ece106722,do not encode if empty content
e85996ea466f635391c7d4e72f829bd1644ef093,"Fixed a bug where the future associated with the close request is not notified when the channel was closed already when SslHandler attempts to send a closure_notify.

This shouldn't be a problem to most applications because they usually do not specify their own future object for the close request."
c6fa82729c0d956a3df8971f37bf6a369b355aee,"NETTY-417 client channel still open after close and wait

* Fixed a race condition where NioSocketChannel's state variable is updated *after* its close future is notified
* Removed unnecessary use of ChannelFutureListeners in NioSocketChannel and AbstractChannel"
6f7d2f4e236a082c32a4610f99892d8b04e0ef10,"NETTY-417 client channel still open after close and wait

* Fixed a bug in SslHandler where a write attempt made after SSLEngine is closed result in unnotified future.  Fixed by respecting the case where SslEngineResult.Status == CLOSED"
bdeed00bbb52b9f733d289cfe0ef2ed45ff2d99e,"NETTY-419 ObjectEncoder/ObjectDecoder fails with NPE when deserializing the java.lang.Class instance of an interface type

* Fixed a bug where deserializing an interface class fails due to wrong lookup.
* Implemented class lookup caching"
5c62d54c677a94e0e8a1e48ab4aab04eaa775d09,"NETTY-420 HttpClientCodec doesn't handle HEAD requests with Transfer-Encoding: chunked responses

* Reverted back the workaround for servers that sends unnecessary zero-byte chunk in a HEAD response because it actually breaks the codec when the server that conforms to the RFC."
59a349031afdad36edc1e8635435bdb97a21a7b5,NETTY-423 Add ChannelPipeline.getNames()
d72b89db218d64e0115ab9491009f0d2dc7e7535,NETTY-422 Add getPipeline() to CodecEmbedder so that a user can modify the pipeline dynamically.
73d1f3fe02982fa243f8afe55ab0ea92057690c4,"NETTY-384 Another deadlock in ChunkedWriteHandler

ChunkedWriteHandler.discard() do not issue write requests to trigger exceptionCaught events and to notify write futures anymore.  Instead, it triggers exceptionCaught events and notifies write futures by itself.  Therefore, no write lock is involved during discard(), avoiding the reported dead lock.

However, this is a temporary solution, and eventually Netty must introduce more robust event thread model."
dc0498d82bf059fb503936a7b4e8a163d75ea851,"NETTY-408 ChunkedStream generates 1-byte chunks for wrapped input streams that does have sane implementation of available() method

* Updated JavaDoc so that users don't specify an InputStream with poor available() implementation."
21269fa073a0587a75de83c0705985f98dac6128,SSLEngine.beginHandshake() can throw a RuntimeException.
88d84c537c15c7e3e6154ac7ed18b792d0b4d3c8,"NETTY-428 SslHandler does not trigger an exceptionCaught event for some handshake failure cases.

* Made sure SslHandler.handshake() and SslHandler.close() trigger an exceptionCaught event when failed"
6156922ad6d8d2c4965dbdd10f4f2b65b13b9e76,"NETTY-429 IllegalArgumentException when an HTTP server sends a '100 Continue' response to HttpContentDecoder.

* Fixed a silly coding mistake where I sent the event in the opposite direction"
35258a5393cc7840bc9af0d1dcd3c47ea58e2fa0,NETTY-430 ChunkedWriteHandler NPE
dbb239203460253f84b0f848b8f05e3b6e11a2fd,"NETTY-431 HashedWheelTimer's TimerTask may execute after call to Timeout.cancel()

* Replaced a volatile boolean flag and system date access with an atomic integer flag."
6b3b3b74265c97c33186440d10b97822adc662c7,Fix of NPE when non chunked large variable is created
d6ea072ccc75c42030a1b8a380d7bbf32b6e1e52,Fix NPE when non chunked message with a large variable
83ad5fb07ebb19ae1e47a3e157a5eb146cfeba22,Fixed a compilation error
f4ebcf7aed4ffff825beec67b47d3a8d99712936,"NETTY-435 LengthFieldBasedFrameDecoder fails to recover from TooLongFrameException

* Fixed a bug where TooLongFrameException is not raised immediately when the large frame was fully decoded at the first attempt
* Fixed a bug where LengthFieldBasedFrameDecoder does not reset its state completely after raising TooLongFrameException"
2fc18a00f6ac61a365b73dd498dd2e38f1efa823,Added a TooLongFrameException recovery test for DelimiterBasedFrameDecoder
f474fc609af1d401b601d2370ba0756b64654b1d,Add failImmediatelyOnTooLongFrameOption.
c2417c253c48bac942decfe923743d2b09d63a5f,"Cleanup failIfNecessary, fix comment."
9f1c39469787d53a4071b661622a72902156e313,Fixed a compilation error in the example
aa72c987e73827687b9c5921c20afabccc9c03e8,WebSocket hybi 10 support
33f548a8ae2b988c8d316de8b4d3e6957c32b446,Added example ping/pong and closing frame.
094834d9bfe128945612f3e84a0aa8e2e9a56f07,1)added sctp echo example 2)refactored sctp channel impl classes
a6d16daa0837d1cc8c324c7edebf2a8640eaa86f,1)added sctp echo example 2)refactored sctp channel impl classes
7b09f85d84a54010cac0e7e850d4e750f2c4da0a,Merge branch 'master' of github.com:jestan/netty
60f5b426930d60d815acc0308f22e437ecd759ef,Merge branch 'master' of github.com:jestan/netty
2fe247b4aca07cd17d55e7e49e14ab72711f7131,Merge branch 'master' of github.com:jestan/netty
8f25312be8adc7aac81104b2699a5cc67aef7285,Merge remote branch 'upstream/master'
0d6a5e004dec4cca2d3fee2c521c64f6a608ad0f,"Fix wording in ""Rich Buffer Data Structure"" section."
4ea375362f0783608be99e573e9a8e59d07499ce,"Fix wording in ""Universal Asynchronous I/O API"" section."
490fc249f8fe659b79514f96158f87702eed837f,"Fix wording in ""Interceptor Chain Pattern"" section."
79d660ca91592cf758203986aabf44a206617b36,"Fix wording in ""Advanced Components for More Rapid Development"" section."
6ee328678444db0da52c9b29e03f8875dd608de6,"Fix wording in ""Summary"" section."
509edd86f405fc749bdafad8ea86d9866bf7a102,"Add patch of NETTY-434 to the mix to fix Deadlock in
ChunkedWriteHandler. This patch was not written by me..."
9dac941544268fee707294b7a3018dc4167f20c0,"NETTY-438 Re-enable SSL re-negotiation by default

* Re-enabled renegotiation
* Updated Javadoc"
a20a2c1e171b1fe5d1135a9b08e1eb86475a658e,"1)implemented sctp socket options 2)refactored SctpChannel,SctpServerChannel & sctp factory impls"
f8b96fe6b818048e233eccc571736430dfe967ea,Support for FireFox websockets. They use window.MozWebSocket rather than window.WebSocket.
7057c59f3d56210dfb9267c8c0a7275e8c647463,Fixed bug in static file server timestamp comparision before sending back a 304 Not Modified. Only compare upto seconds.
b22c7e4a08ea3d2a0f50a1b6f1bba26af8afdc52,1)refactored sctp server channel config 2)removed unsupported sctp socket options
6f9a886a36854af8f9e0761b81001a2fad0e7ad3,Test against AutoBahn WebSocket testsuite. Work in progress
91796814ebb043958c9d100de166ecefea7a7556,Used codec implementation of Base64 encoding. Thanks to Steven Osborn (steve918)
234952a516636af734a40180423cce352df903ec,WIP. AutoBahn tests 1-5 working. Some tests in 6 and 9 still failing.
beb56878e415daa73132726662ec17381e1759ed,WIP. AutoBahn tests 6 working. Needed to check if final string is UTF-8 compliant.
10b88ceaa0035502453a53fad6c0b3a4958490bd,AutoBahn tests 9 working. All done :-)
c60b1e28cbd8ff65ef2c4b611ca43f7892e23ec2,Forgot to checkin AutoBahn echo server for testing.
12d93cca292cb97d4b5e8ee7a7ada0b6ba840961,Fixed web service client. Added more package documentation.
b4b3d98f3787eb212b45f0e6f4e089e38fc67e54,Added more example package documentation.
7328cfe58f1f08b89eadda84ac6ce59d6501f1c9,Commit javadocs update which was previous committed to the 3.2 branch
783e7562c7621e673a11f4bc39fea0a3e0482919,Fire ChannelConnected events in a Worker Thread. See NETTY-439
c6e0162887e7652f7ff4bffebfa288d7d78333b0,"Make sure FileRegion.releaseExternalResources() is called after the
write was done. See NETTY-440"
6dd77331ed3364aedcb6da627e6919f2ede232a7,Add support for FileRegion in OIOWorker. See NETTY-441
8fb34a4717a477675d86778a94474a9f624a865f,"Merge pull request #32 from normanmaurer/master

Push fixes from 3.2 branch to master"
68c9b0feeb64c1f45b38c18fd8e48cab1f27aed1,"Fix NETTY-445 Memory leak in SslHandler

* Ensure SSLEngine.closeInbound() and closeOutbound() is called on
handshake failure.
* Ensure connection is closed when a closure request is issued and
handshake failed."
0d78c0508da9babeb6825a9d6335535e15cf716d,"NETTY-439 Call channelBound/Connected from worker

* Move channelBound() to RegisterTask
* Simplify the if block in RegisterTask"
c641f24e8f947f4b17854f984693bdf0462bce74,"Only release FileRegion after transfer was done if its configured to do
so. The default is true in the master branch. See NETTY-440"
c8271a2e1d0f8f746150df55e0d1d71ee1fd7a4b,"Merge pull request #33 from normanmaurer/master

Only release FileRegion if configured to do so. See NETTY-440"
ce3240d3a4dc6830f88f673c14108175c2136918,Testing e-mail notification
3b7f55dc355d1c77134e813382e348d7bbea2d81,Testing e-mail notification (2)
114ddd9a62acd30577af5283316edc1280641b5f,"Clean up FileRegion and its implementation changes

* Fix broken javadoc tags
* Remove unnecessary public modifier
* Reorder method
* Make releaseAfterTransfer immutable"
b944531b5e2ff68cbd26a73455b20e4e4a61ee9d,Simpler constructor form should appear first
579ddf72fc7c02373584e8729e8fc77474ae25ad,"Fix NETTY-432 HttpContentEncoder should not encode if Content-Encoding is set already and it is not 'identity'

* Replace getTargetContentEncoding() and newEncoder() with beginEncode() to avoid duplicate content detection and to provide a more flexible way to reject an encoding request"
0fbe65b0763ff2f835a38825fff98d995a8946fb,"Add the StreamHandler which can be used to adapt old blocking io network
code to netty. See NETTY-307"
a2f440454521c6e58396fa99a8edc4531616a9b6,Fix authors
6dce4098d71247a226a8a763ddc06e6ac0af08e8,"ChannelLocal nows removes Channel instances from itself once the Channel
was closed. This is configurable via a constructor parameter to allow
the
user to choose the old behavior. The default is the new one. See
NETTY-447"
e9f97d66624d8bd07ff6e51069cc5582166e79bb,Fix formatting
2ae095f92cf856193debdf355a98144bf2c36059,Fix some unused imports and warnings
a67e5502078f7dc03b0faa53d2965d5c257e0399,"Merge changes back from 3.2 branch which fixes a deadlock in the
SslHandler. See NETTY-443"
e79d5720d394bc2a0f0669367bbe36568ee54a0b,Added webbit license and credits
c7886a59522ad88eaba6ade07706e3f224187752,"Merge pull request #26 from veebs/master

Web Socket HyBi 10 support"
a01796116818af22c21a95e26813b4df3f3dcec9,"Merge pull request #22 from pfisterer/master

UPDATED: Channel(Sink) implementation for connecting to InputStream and OutputStream objects"
aa5510e3b289a8044593bfd173a0f762bf1842ef,Remove in favor of IOStreamChannelFactory
bdc31e160354fa219c4d6019fe16d9a59f4f912d,Merge branch 'master' of ssh://git@github.com/netty/netty.git
418df7e9bf7a61f6d950ed46265d127174de1b32,Added webbit in NOTICE
69d16c0382026074fc3449f2ba403454fc84abc1,"Merge pull request #36 from veebs/master

Added webbit to NOTICE file"
6766513157ed267ba262fbe09968320b756e8b2b,Merge remote branch 'upstream/master'
08b509b2094f565ce03c5ef92760ff5646d101a0,"1)refactored sctp socket option implementation
2)tested sample sctp program under 20,000 msg per sec"
bb5bbdc99e6f68e59aec6215f12a5f7774f10012,Upgrade to JUnit 4.10
72427716882ee4166d9186a0570922184e92d827,Merge branch 'master' of github.com:netty/netty
56462ef91a6481c2926dbebadebc114c08a81a8b,"Encoder and Decoder that wrap and unwraps the array of bytes. See
NETTY-357"
84ed71d42dd951d7be5b14d37bcf56f383ecb965,"Use safe-construction when calling fireChannelOpen() etc. This code is
based on the code of the following pull request:
https://github.com/netty/netty/pull/18

It just make it apply again to current master"
31b319a5dc531d8c02c400d312ab9e85e90e614b,"Release the cumulation buffer after firing upstream so we don't end up
with a ""leak"" because of a very big ChannelBuffer. This patch is
extracted of the pull request 39. Thanks to arya for the patch"
220d95fe0d396821f08329fffd96edc1b47c37c1,"Merge pull request #37 from normanmaurer/master

Safe construction via factory method"
57a6d390144e3653a3c7f11da40603a6d251432d,Replace tabs by spaces
2449f0354077bcf18a0f7f4c012d51093c579cef,Remove not used SerialVersionUID fields
b82ee7341c200ef430f04efe8260419b45279519,IOStreamAddress is Serializable so add SerialVersionUID field
5094bdc0cc302e2702525c40dfe1f735549f5a52,Replace tabs with spaces
d176f4ae83fd4fd50bffaec50e28c46314a1009c,Replace tabs with spaces
cc758aa3b638459272dc64031389bd02d60a2001,Fix event firing in OioAcceptedSocketChanel which I broke before
942b746d730566001301f8edc774d571bcbbf175,add an option in LengthFieldBasedFrameDecoder for whether to count the length field into frame length.
8df2524bb0661d3f99a5552af297e5e47ce5d715,Small fix for LocalAddress.compareTo when both this and o are ephermal
47a3783d6cb0c09ee6c78c2e461bcb58fe879387,"Merge pull request #42 from CruzBishop/LocalAddressCompareFix

Small fix for LocalAddress.compareTo"
c27af721b0c6d4416feed191526c5f14a966bc49,Remove unnecessary interface modifiers.
1f3d35bd348511ddf0d7014f883afa38312eae65,release replaying decoder cumulation buffer after firing upstream
9aa81cd08385702fd684e7bb1cc447617ff51247,fix typo
53b055fc1006b35320a5cba626980d101e78da6e,"Merge pull request #44 from motlin/master

Remove unnecessary interface modifiers."
507b9d0b701b6e3c4b6ff7a27c51e0f20a8670cf,"Boolean operations in channel buffers
Adds getBoolean(index), readBoolean(), writeBoolean(value), setBoolean(index, value)
Fixes https://issues.jboss.org/browse/NETTY-344"
dab76e266c935635b8ac22e017edd87b55b8ed59,Added tests
cc472c55ebf81119c54a99f8a43b8c7a58f65024,"Merge pull request #46 from CruzBishop/channelbuffer-boolean

Boolean operations in channel buffers (fix for NETTY-344)"
fae46dabf19c13fc784776dd4f1f95cee5d2c87b,ignore HttpOnly as a cookie name instead of throwing exception
152ea47d48a77beeb9bdc6a8595509af6707bf96,make cookie decoder behavior configurable via a constructor argument
7820731a16c19e7ed4c24ab9a9cf3053813569a7,"Merge pull request #47 from jpinner/ignore_httponly_cookies

ignore HttpOnly as a cookie name instead of throwing exception"
5e925677c469507f1c94be32d659dc0d823b571e,Declare field final
b38cb5c081d2c2c28c5ba23bc8c27d5507b1d39f,Fix problems in Javadoc references.
13eb416b0645211e1ad3727f599db56cd5208afc,Remove redundant 'final' modifier from private methods.
8d6d2f038ec6d936b935357a7d65a6e2697d4095,Remove redundant no-arg constructors.
1fdab7bb956dab560dcc07a1f6ac3ffa4f41c13c,Make fields final where possible.
85119dd2fb5e1beded86d31ea302b6c1eaf08e9f,"Merge pull request #49 from motlin/master

Fixes from static-analysis tools."
b3b096834cafc7f348583786d71567e9fa001b55,"Merge pull request #45 from sunng87/master

Fix NETTY-452, add an option for whether to count length field into packet length or not"
193acdb36cd3da9bfc62dd69c4208dff3f0a2b1b,"Merge pull request #25 from aaronriekenberg/master

Add failImmediatelyOnTooLongFrame option to DelimiterBasedFrameDecoder and LengthFieldBasedFrameDecoder"
3856f99c03fe75e3e574d70058e4f427d007f428,Make failImmediatelyOnTooLongFrame configurable via a constructor
d760b4cffe7ec818cc94009ecf2788ab01b0e7c2,Remove empty method which I forgot to remove before
1a6f8369ea63beb44ed27f56dece954ddba1e4b5,Revert changes of pull request #45
f84a9e1c52d72df240975ab0a9832c14d69eb458,Add missing @Override annotations.
6f857d271c4afd8388da9c3231b718be849e639e,Make fields static where possible.
1c698494bba63a9365751e5f1c1be99fa74ade20,Make inner classes static where possible.
1213dc5acea07ac2de3b3994a13476cda95a237e,Remove unnecessary enum modifier.
f78a60df7d6409aa42875a25caa78aacf48f6ac9,Remove redundant 'final' method in 'final' class.
f641e25735a2c6c939d2b4be94ede83b6ea993fd,Remove redundant 'final' from static methods.
0b3a685f9540bd691f8fe3b8a3085608e19412fb,"Merge pull request #51 from motlin/master

Fixes from static-analysis tools."
41d488419472d7bdc96150c7c75a503272148f62,Remove redundant array creations.
f9a19517d5333a07faa05d21d3385bbd3e830738,Remove redundant type arguments.
e84571a5f2f3f3f410a8ff510490b52a29c8c40a,Remove unnecessary semicolons.
d073e1d14dd9f89b61d502ce372c565c23487e8d,Replace constant array creation expression with array initializer.
9b9ee79f27f1019d7e3f1a29cc311e312c933cc1,Remove unnecessary 'return' statements.
f0520dad20e82ddd0d8a80e24e34d7d2a35f0151,Remove unnecessary calls to 'super()'.
ab6109057252055aa7800ca9cfe15274f55aea5f,Simplify redundant 'if' statements.
b6dc30b37ba27490be767da972a666274ec7e1c9,Inline redundant local variables.
2e3971953bf34cd42a59370cb784330b71382324,"Merge pull request #52 from motlin/master

Fixes from static-analysis tools."
3b0eb64f1c3160c2029c4cb3defa5953241bbf28,WebSocket Server with SSL example app
6adeda249357c4ea6f20e541274ff3595f0e0cc0,"Merge pull request #53 from veebs/WebSocketSSL

Added WebSocket Server with SSL example app"
9461b31edd6d60207a7cf2a050f6f7028430e803,Added checks to make sure expected system properties are present.
1e0dee3e9b52a1861ead11c3dfaada8cbedd16fd,"Merge pull request #54 from veebs/WebSocketSSL

Added checks to make sure expected system properties are present for WebSocket SSL example"
319ca93330ddce10e8512f601c333c0151e4457a,1)refactored sctp server channel config classes 2)added sctp server channel buffer size setter/getters 3)updated sctp examples
cb41cf293fd8af88dac71e6c2855917d9e957f4a,minor refactoring
0d0764d082b35b1b9bf3aac555abd1e18bf31957,Allow for multiple client boss threads.
e8766c4ba6f40dec8f5b03392ac4881dad757d24,Added default num bosses const.
5c2c8d9d1d0e3df6e01ad776ede9692ab294e913,"Merge pull request #70 from jeffgriffith/master

Modification to allow multiple boss threads in client"
1ac6c75d39114a89dcc13cd712eb907b9938c2d8,"Clean up

* Static variables should come before member fields
* Removed unused members"
0850449b096218c1bf1c5de5e9603ff490f8efcb,"Consistent fail-fast property

* DelimiterBasedFrameDecoder and LengthFieldBasedFrameDecoder must
expose the fail-fast option consistently
* Renamed failImmediatelyOnTooLongFrame to failFast"
b858fab8d7cd58971dc22f9b4b1d86c260054339,"loadClass() already queries the cache, so no point in redoing it in resolveClass()"
dd567e059f6d45361c4cf2734bbf670daf6f6d32,there's a more general exception in the throws list already
c7cea76d2fb550507f87fd350bd731cbb6929f08,moving classLoader selection to constructor
deb61aa0219af6693c18b702d93a0ed57d4cd4ed,extracting class resolving role to separate interface
99e9da1e75188bf78f71d5b89e627c8372212cde,"sharing classResolver cache across all CompactObjectInputStream's in the same way, as we did in ObjectDecoder"
7e6d07afaf057df683a48901f23aff55a117588e,"use weak cache as default cache - it doesn't break class unloading
providing multiple implementations for caching, each good for its own specific use-case"
3ecb93eadeaaf4df065862709dc4b456bd5a7f66,Include the name which was the cause of the IllegalArgumentException while try to add a handler to the pipeline
c9a24729bdde00e2bbd0bed5e307af16db71e1c3,Fix #72
cdbaeb86b07580858f6006207c5313dc573591fe,"adding class resolver with disabled cache, fixing unit tests"
01c45650aa834b19f362367a3fd558e6df1b0679,"Add a missing close(SelectionKey) call

* Without calling close(SelectionKey), the client boss loop can fall
into an infinite loop."
1daf3c80c667d4779bd6e5b47d92fd13deb86289,Merge branch 'master' of github.com:netty/netty
2dafb3d91bb8c113c38997c9b61812240afc197e,Add a missing colon
b5f8ff300398a959feca80ffc99910ad27fa02cc,"Merge pull request #73 from ngocdaothanh/master

QueryStringDecoder should also support ; Fix for #72"
800a9fc20d7258275f687b29ef8eddea3f944192,"making interface public, so that others can implement it jic"
cee5ee5679de2a8900afe9bbf05f973ace08ce71,now able to resolve array types to classes
971a7364f6ed0de95865e42bd42342d3e7504916,"Merge pull request #75 from alepar/master

ObjectDecoder performance optimization"
946d4be69ebe607ae4488087cd515759b3c724a1,"Add constructors to make it possible to backport it to 3.2 without
breaking the api"
b6f8b5871c6092a42edce07a543da6f6d352e38b,Rename ClassloaderClassResolver to ClassLoaderClassResolver
8debdb59e42f46b09616686173b57f0c2afc8012,Fix weird repo mess
e015456ae103d4add48c3297c25432f8cd3d26dd,Add missing license headers
5abd23d3baf1f3c5be2b92c267df926c4bc46877,"Upgrade depepdencies to the latest versions

* Regenerate LocalTimeProtocol.java with the latest protoc
* Add an instruction on how to generate LocalTimeProtocol.java
* Not upgrading maven-bundle-plugin, which has a regression in 2.3.5:
  * https://issues.apache.org/jira/browse/FELIX-3058

Conflicts:

	src/main/java/org/jboss/netty/example/localtime/LocalTimeProtocol.java"
bbd251baed34001bdf8590811dba70f231e6c732,Fix build errors
caa925198e8eca352d5b679e38311d6c3ba33aef,Make OrderedMemoryAwareThreadPoolExecutor lock free
9f712e3291565fa357a959b26dbe77da59691aa8,Replace synchronization with an lock free approach
2686dc99b42046eb6f5fbe08ff628bef7da612a2,Add some TODO
a382149bba690626e8f64c67d87f4f293525b8bc,Catch InterruptedException and interrupt the current Thread so we at least give someone the chance todo something about it.
263f2fe98ba9dd72dc618ddba57b7d141920fc22,"Make it easier to issue the handshake when SslHandler is used in a
client. See #84"
24f5379ee4963df8d94df9526602a4bdcdc19a6e,Merge branch 'master' of ssh://git@github.com/netty/netty.git
6b7b822f721e7f8f72cef71bf2aa01d5d1002ee3,"Revert ""Make OrderedMemoryAwareThreadPoolExecutor lock free""

This reverts commit caa925198e8eca352d5b679e38311d6c3ba33aef."
e68aa06dfa374c52270555ec62d695b565dd927d,Revert committed change which I added by mistake
1bb3322268b26a2efb0a965e5982b12ce5510cb1,"Catch InterruptedException and interrupt the current Thread so we
at least give someone the chance todo something about it."
ccbe3dd2f86fb312be5bb6216f04517378303183,1)tested sctp with IBM JDK 7 2)fixed NPE on sctp notification event constructor 3)added maven exec plugin
8efe131eb0881e8c39eca1e537006224be1ef6da,Fix closing handshake and run against Autobahn V0.4.3
48addae927fa38fe6fb13392be95545b8488a0f2,Added support for Hybi V17 and run against Autobahn V0.4.3
181355665be56f8c52e871ff0561de770abaa9e8,Fixed formatting.
6fbc168cbf0f682c722b728ef9d1d091506c909f,Update example websocket client to use V17
f6baf157dfd49d655ba7285b788648d77d8f481b,"Remove ""isEmpty()"" check as this may be really expensive (need to
traverse all elements in the queue)"
ce1e48dc746fbb16e6d5b34c18ef55f09fb89824,"Remove reflection code which is not needed anymore because the next
major version of netty will require java6"
2ab42e5bde64d9695cf5602989bcf44fe9122f0b,Replace tab by spaces
da3a52778b2b19138431914f1fc53aaf0dd959dd,"Add FileRegionEncoder which will take care of encode the FileRegion to
ChannelBuffer if necessary. See #89"
d2278a7d53b14680f56fbe37921c613ffeedabe1,"Make sure ChannelFutureAggregator is thread-safe and only hold the lock
as short as possible. This also change it to lazy init the HashSet that
holds the ChannelFuture's. See #90"
9d3828bbe91d7bc7aad6e34c719c4591593be84d,Use LinkedTransferQueue for OMATPE
7ddf1b1ae132fe2581ca948d2f122ee5e8096c66,Remove unnecessary 'return' statement.
461837e14b59092c6cb1b746275fa5c4ace8dafa,Remove unnecessary concatenation with empty strings.
7b71d43688bcfea3a951134c7903f0211b75016f,"Merge pull request #85 from veebs/WebSocketV17

Support for WebSocket Hybi V17 and Autobahn test V.0.4.3"
040b74f7641c91dc6e299e932234fb787167e0b1,"Merge pull request #92 from motlin/master

Fixes from static-analysis tools"
62f28766945e5bffae9e86e89127d2baeaab5873,"Ignore ""geany"" files

These files are generated by the IDE that I use now"
73b89a2b1f06d51b6fde74add3f256fd36592457,"Merge pull request #80 from netty/OMATPE-refactoring

Replace synchronization with an lock free approach"
47af6bc9e8962c638d4aa37c41f928841731222c,"Encode FileRegion to ChannelBuffer's everytime the handler is called.
The user should add/remove it on the fly for better performance. See #89"
2a0a63e1bb4627c2f503c43cf524c68565c0b205,"Remove the usage of AtomicLong as this only confuse users. The Handler
is not suited for re-use anyway. See #93"
ec9bcbd5531775a74e114c56d4cd341195edf2c9,"Removed @version tags and did some documentation

Some test classes are now documented"
18344fbc9060c35ad0ae2c60006d8893316711b1,Merge branch 'master' of https://github.com/netty/netty into task-61
55e7a85160e3702f9f3a46f31268797f896bb8dc,"Merge pull request #95 from CruzBishop/task-61

.gitignore update, some task documentation, removal of @version tags"
0d5c7d3d2e8a0de5aa48ecfc3bb761e90c633026,"Make sure the cumulation Buffer is only created if really needed. See
#88"
460237d3f3bae4290817b96466047a15906c4ea9,"changed the visibility of ctx, event in channel event runnable, so execution handler implementers can have a down stream execution handler for SEDA"
78c949f282f0eedff079a41f222834ac42457548,Merge remote branch 'upstream/master'
55940f500e1f8c7cb160429dada416c2c776dfe2,"Added fix for m2eclipse error ""Plugin execution not covered by lifecycle configuration""  in pom.xml.  See issue #87."
e3fdab81ed00f2391dccc18c8a441b6e32ca3497,"Merge pull request #98 from veebs/MasterPOM

Added fix for m2eclipse error ""Plugin execution not covered by lifecycle configuration""  in pom.xml."
4a4e46b83babb7426d9e8bce482c1edc682e92d2,Separate the user guide out of the project.
a9a713ddcf85b728dcf24f814d7f37fb133c563f,Remove DocBook from build
3379a4c25dd0c0ee757c2d9ece1ca7f8c824e55e,1)replaced all netty link transfer queue by java 7 link transfer queue to avoid high cpu usage 2)optimized selector loop
cc761ae786a2050380e3f88a7ba045fff2490114,"Allow to set/get an attachment on a Channel without the need of
ChannelLocal. See #101"
51f69877a6728deb39cc3b6d2592fc5b79a5e834,Fix compile errors
766525431dc34cc5634ad76412b0780f5051addf,"Rename the old LinkedTransferQueue to LegacyLinkedTransferQueue and fork
the ""current"" implementation of LinkedTransferQueue (from Doug Lea).
Introduce a QueueFactory which will load the right implementation
depending on the JVM version. This will make sure that the one with the
best performance is choosen and the code also works with java 5. See
#102"
5cb865c4ce265b0a573965315a2b0c37ff024145,Use AtomicInteger.class ClassLoader for Unsafe dection. See #102
40e6a73e94d26b83f1b4d4209d206fa7f60c1791,Merge branch 'master' of github.com:jestan/netty
724ca7a913d0206fa109ed0382588bbf6d13740c,merged with master
68379140c49a7fcb94fe6e85014e6816ac75d50f,removed svn rev headers from sctp classes
84f6f7d6178b0ecee9160aa6fbabf1ece87ab7a9,updated license in sctp classes
2f5f149b5295df9a0c77d5be5c238b947e9820bd,1)added some documentaion comments 2)minor refactoring
f62bb850ec83df1c9b3e7c799c2f7869619ee420,fixed a typo in a getter method
0a99e8bb57fcf7f6cf09548a06c32d050b63c409,prepared merge with upstream
2f6c4383d67b59fc28ae863a41632a0d2a872d2b,"Merge pull request #31 from jestan/master

merged the sctp transport implementation with upstream master"
49c797fb3eaec7a4557aab0d17b54f2c1d2d38f1,"ReplayingDecoder: keep explicit track of cleanup state.

This fixes a bug introduced by 1f3d35bd whereby cleanup() won't get
run if the cumulation buffer was emptied.  This is important for
codecs like HTTP: In particular, empty 200 OK responses without a
Content-Length header would fail to decode."
27f9a0cee22a79324b04af98c6c32d85174f9a63,"Merge pull request #105 from mariusaeriksen/master

Always cleanup() in ReplayingDecoder if we have received any messages at all."
229c8734ed7ac4517dc49b41c7957c1f40f661bc,Fields in ReplayingDecoder does not need atomic nature. See #108
7d9879d5cc2a380ac1ac9ac81e52e2d5d97065aa,Only create UnsafeDynamicChannelBuffer if really needed. See #108
2a764d9d9fce2bb29ca8f2d494ad480e1a0b513c,Make build independent from JBoss.org M2 repository
57b5c204333bcc9bdab7b6b10029b0ef261c8673,Change groupId to io.netty / inherit Sonatype OSS
6d307734f1d93a646d92ec50c055d0b3109ef7ac,Update enforcer rules and project URL
84902a6e7a15356f37e0d66f4ec7d254d7c206fd,Update compiler options
6fdb7d91165f7e82c5608c07ee911bc9b6fcdf5a,org.jboss.netty -> io.netty
7518e9852501ed5cda45f88ce0d3671eeb866631,org.jboss.netty -> io.netty
015daec3fa565bf28471fcf8f382e4471e651155,http://jboss.org/netty/ to http://netty.io/
59f39cae756aac25c711b293f2f0b987fce09245,"Remove @author and @version / Remove COPYRIGHT.txt

* The new copyright header replaces @author
* COPYRIGHT.txt is irrelevant to us now."
7f25d9d81a9fb3462f5254c169cfee768799cb23,"Remove outdated UML / Fix image URL / etc

* Instead of UML diagrams, we will focus on netty-book project
* We are moving to SLF4J so we don't need jboss-beans.xml"
a254bf41e747649f311844ce2475889fd349e215,Fewer JBoss reference
31cff01b712dfd9ba2c02aa46e6feb3dde64cb64,Moving to SLF4J
9f41a5a1f8d62c3810eb7266948b0273c838ef84,Update license header / Remove JBoss style
69346bff47d65549b05603305aa1dd84c4c9e088,Build tarball only
be64e2531fc16cebfb707318a02786ca874bdc2f,Regenerate LocalTimeProtocol
679f33a986a7a0563da624c245b244fcc8daaf1b,More copyright updates
54b8b501ee600bb3b7f91e5e04dcd8df3af183e6,Remove old websocket package
91681b5150abece6d7c252a0f97a607d366fe1eb,Do not expose @author and @version
82aa0969e2e4a3b3ab916004e1050a1c1921cc5d,Add organization info
07f2c2e7da1e96504c541d3785dc3d3913e57027,Better handshaker naming / Remove deprecated example / Hide UTF8 classes from users
2efed0d6b1555040595fb0e51da5164d13dadcf2,No need to specify a default value
5351bdcdff6cbb0b8c548e50709a453f72585cf8,Add developers section to pom.xml
c07a9846711e26899ae84028a9c161f5c59eb893,Add maven-gpg-plugin to sync with the central repo
85d94a0c4fa57881c89b3db70ab87ea1497a8447,Attach Javadoc to sync with the central repo
37f9d16b89ce3cbfcb4efcf1ee18040f9928fae0,Attach Javadoc
c5917075921b393f9af86e9ca81354149b1e0338,Attach Javadoc (it really works this time)
5c4702245c5c5eb4aca27595fb077627324e7e66,"Start to add handler for simple SEDA support. This handler supports to
offload upstream and downstream events. The SedaExecutor is responsible
for offload the events to different Executors. See #111"
a225fdeea5a087b30628ca4916b41ad460da150c,Use channel instead of context and cleanup unused method argument
0f0f7b7fa92a7c194effb1e2c800838ea507d3da,Fix #116
427b784c6e9acd658024dc86b7906482b0dd2d71,"DefaultChannelPipeline.replace() does not correctly replace a
ChannelHandler if name is preserved. See #113"
209ad9278f4403f9b35d07e8923e8951537a676a,Use channel instead of context and cleanup unused method argument
5b9aa76efd2530c4ea1ac417966ec9374fbae516,Fix #116
e4642f557f92301032a195c677b03a6ecf9e0ebb,"Merge pull request #115 from ngocdaothanh/master

Use channel instead of context and cleanup unused method argument"
7438a9ac87ee6a8a1007931ccb65bc166af2c53b,Merge remote-tracking branch 'upstream/master'
dc1655890edb1573ac65630d6cfb8b930f5defae,"Removed io.netty.example.http.websocket because
io.netty.codec.http.websocket has been removed."
5be24a0943200098c011d2d5a39319131a6a8341,"Improve encoder/decoder ""replace"" in Web Socket Client handshake."
7397bba454f6879e7423edaa6a7cce29586a4c77,"Merge pull request #117 from veebs/WSTidyUp

WebSocket tidy up"
34152857ce1ffc6232ddcbc9e79939112e49ddb1,merged with upstream master
b9e869545cffbe2f2ff259085205fbcb5f25aa2d,"Add special subclasses of MemoryAwareThreadPoolExecutor and
OrderedMemoryAwareThreadPoolExecutor which should be used for SEDA
processing. See #111"
75a641463922a15e54471bb760b2ed8c190f155f,"Add FineGrainedSedaExecutor which makes it easy to use different
Executors for different events. The idea is the same is in
SimpleChannelHandler. See #111"
4092fd0efc9c0ecbec538c4a9a72047600b30876,"Test WebSocketServerHandshaker17

Tests that the HTTP headers (SEC_WEBSOCKET_ACCEPT,
SEC_WEBSOCKET_PROTOCOL) are ok in this version of the websocket
protocol."
a4bfc4011db5d1a2d4488db0355dffec9b9d2c13,"Some cleanup and javadocs for the SEDA implementation. Also fixes a bug
in the ExecutionHandler which I introduces while working on SEDA. See
#111"
86d39274c6c8fee6b1a9bb46ed552be4c659a3ae,"Exclude scpt from the build for now until it is moved to an extra
sub-module. See #120"
8e78bd9db62cbebde8c884617841da992e677686,"Merge pull request #119 from palmerabollo/master

Test WebSocketServerHandshaker17"
d9b14a0b3735ef7bb60ea3048bcfbbf3318a3804,Removed compile warnings.
5398a5274afbeec894080cea147c785fbd417ece,"Merge pull request #121 from veebs/MasterEasyMockTidyUp

Removed compile warnings as displayed in Eclipse"
7037d995c9f2ed447eb3f1286b3784fa1f858262,Added support for custom headers to be added to websocket client connections
f01d8a484113681230bbe95d13484812ce9a5c42,"Merge pull request #123 from rshelley/master

Added support for custom headers on websocket client connections"
812a79fd526e6d7319371af46a9006520015f1b2,Use websocket wire protocol version rather than specification version
9978d999e794d45765f2de0f4c8e2a52b1895a21,"Merge pull request #126 from veebs/WebSocketVersion

Use websocket wire protocol version rather than specification version"
16bf84dac1ecaf5c5a893e056f1626e274ca165b,Use WebSocketVersion enum rather than string literal
f38bf74f3ecd3c2ba29c39240dce573fa5083429,"Merge pull request #128 from veebs/WebSocketVersion

Use WebSocketVersion enum rather than string literal"
f779a4415cedcfa445777b186c8fe1d6341278df,"Do not use ObjectStreamClass.lookupAny() to resolve interfaces

Fixes #130"
62446827df079c8fc57d5c5dea915bca476eeb61,Fix #129: Memory leak when setOptions() fails while accepting a new connection
a6f5985aceba5942fdd547d592cb991521c97f6a,Do not call setPipelineFactory() unnecessarilly
af730c11f97d0baa321ea8fa782adfab577e5a59,"Merge seda implementation with ""generic"" Executor. See #111"
b0898646501aebb34608ad0cd372fab858b2a5d1,Add missing classes. See #111
f977f476cfdacaef624997b360ed8ff4a08f4a5c,Use ChannelEventRunnable where possible. #111
073521d37d1bf1eb0ae81b53ba66954f9cb1bb20,Change tabs to spaces. Damn you auto code format!
c5d21f4cefa756932562a0c129bf4d74c7c2d9b3,Some more conversion of tab to spaces and doc update.
f05b7b0b7efe17d8eaeb6386f482c4b302588d8c,"Merge pull request #132 from veebs/WebSocketVersion

Changed tabs to spaces and added some docs for websocket packages."
f7be7ba735a205b57b4b59c5220451b7290310a1,"HttpPostRequestDecoder should handle ""a&b=c"" in
application/x-www-form-urlencoded content. See #134"
7be8d054612b224e56ea1b2c300a8296cd8bdf88,Remove comment
8791376d8888e47c23ad90f4e540dfa73930b4a8,"Tests for web sockets hybi-00 and hybi-10

Add tests for websockets specifications
draft-ietf-hybi-thewebsocketprotocol-00 and
draft-ietf-hybi-thewebsocketprotocol-10.

Minor changes in javadoc."
132367539243b26b4cf86a01e6b9a164420dd6df,"Merge branch 'master' of https://github.com/palmerabollo/netty into WsTests

Conflicts:
	src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java"
0e449ed70401c66701bf4f9d021486d0e99fc140,Change test names to web socket wire version
8ad4cd0528ff0dffd91ff2777ddcbb79869a5928,"Merge pull request #136 from veebs/WsTests

More Web Socket tests from palmerabollo"
8663716d38040537f6660cf2b81ee74549e0ab6d,"Issue #60: Make the project multi-module

Split the project into the following modules:
* common
* buffer
* codec
* codec-http
* transport
* transport-*
* handler
* example
* testsuite (integration tests that involve 2+ modules)
* all (does nothing yet, but will make it generate netty.jar)

This commit also fixes the compilation errors with transport-sctp on
non-Linux systems.  It will at least compile without complaints."
521bf83d0f39896f3c87c54bebd1e8c06e86b60b,"Issue #141: hashdos security vulnerability in QueryStringDecoder and possibly other components

* Limited maximum number of parameters to 1024 by default and made the
limitation configurable
* QueryStringDecoder is now able to handle an HTTP POST content"
7c412848eff742c42c7aeccb69a172b3d716f7ca,"Fix NPE which is triggered if the destory method is called
before channelOpen(..). See #143"
999343e8cf9f01c1f9ce926907b49534b1e6dff5,"Fix possible JavaDoc error in QueryStringEncoder. Type mismatch. See
#139"
c38e6c77c2bfc652e02032dec6ffc87d80d0af04,Generate all-in-one JAR
ebfc4513e0ba619592af3ba946bd1974d1becb55,"Apply checkstyle to the build

Please note that the build will fail at the moment due to various checkstyle
violations which should be fixed soon"
32dda06da35e3df0e1667133cf9b2b3a12ea74bc,Fix a compilation error
099e689338f3dea97fee51ef7b411b0250b78a88,Make build success with checkstyle violations temporarilly
ca4b2ed800075639d13752efda062a73f2c42e66,"Make netty-build independent from netty-parent

* Also remove a unused file"
26bb9576da2e23f74f27dcf83843199051a14aab,Use a separate netty-build release
e714ec12b882e1e112b1f175818a316152d73ca5,"Remove close(..) call which gave us troubles with
ClosedChannelException. See #142 and #138"
303c1b5f79c5cd335a4f90535d42c56b107c0261,Overall cleanup / Add lost old jzlib headers
958ffa50e363580b3e33b02fe100170674f3aef2,Make ChannelUp/DownstreamEventRunnable non-final / Move the classes in execution.filter to execution
fde6789f411b8f15c2e840103c4f18f898312c2e,Cleanup / Modify MATPE to reject a downstream event
b9386e7be83bc568e8283087c792e20eb248b82f,"Do not count a ChannelDownstreamEventRunnable

* MATPE is only for upstream events."
36bba6b29d1b8633d6ba951e33c54e035826377f,Reverting the previous commit which makes no sense
1b02743367a045916f0d644a1fd50c1d2b7d38e7,"Overall code cleanup

* Fixes based on checkstyle feed back
* Simplify WebSocket client example (needs more work)
* Rename Autobahn test server classes"
b7cfc6b7f0a7f1c360961d1c22aee28fc2066a7a,Rename HTTP snoop example classes for disambiguation
4cff6b56ffc09390c104d572bb7b4590b574f5a4,Rename HTTP upload example classes for disambiguation
d40bd5e7f21a2d424a73f69d56e4dce77060b9dc,Rename IOStream example / Code cleanup
a3efcaf04388b30a2d0b907b306f4c190b3abfcc,Add missing package-info.java
b9b23663618bbf7eb27393a4f278f1ee0a0f6406,Fix checkstyle violations / Renaming RXTX -> Rxtx
0007e919233ff86a3fbf8080029f5fe2d8e4a02e,RXTX -> Rxtx for consistent naming convention
783a7e5f9a58a5d7583e70389fe32673940041ce,Fix all remaining checkstyle violations
2fff088480d05b8432fa9813478cd61bce8cf626,fix for issue #149
e9490dcaa4b97bdd899db7f337f587f4a37f644d,"Merge pull request #151 from zhen9ao/zhen9ao_fix

Fix for issue #149"
8533edc30d04d82f2264fde59f6183110bc26c75,ignore .idea/ folder
3ca0705c59ebe25c212d963258fca71a8fdffc74,"Merge pull request #152 from zhen9ao/gitignore

ignore .idea folder"
59e5f2f2623a0bb4af8012bc18aef3a47bb9704c,Upgrade to netty-build-4
c1aa8b4c7bc3e4286e666b20f0ba3a6e939421fa,Clean up the new WebSocket package
40ef4d2ccf6c05adeab111bc869eb59f36582213,Fix #153: Add ChannelFuture.rethrowIfFailed()
fbb1432e8e545e4e739352a26e2886870146a7d7,UnsafeDetectUtil also checks that the Unsafe class has the field theUnsafe to make it work on Android platform.
b96768c9a6e305c0000242d67b9ced3e24b8e067,"Merge pull request #155 from jrask/android_unsafe_fix

UnsafeDetectUtil checks that the Unsafe class has the field theUnsafe"
3822e8b49ec69b4ab969572b6491144b56c603c5,Fix #157: ZlibDecoder does not support preset dictionary
245342d202524624dfe78e526addfcb9b5397cc7,"Merge pull request #159 from jpinner/zlib_decoder_preset_dict

ZlibDecoder preset dictionary"
6c68773ad40c822eb5b6388dc94a3fc84aebe36d,Remove not-needed call of ByteBuffer.clear(). See #161
4396b421f1ae3f6b25fc62e84672d6c0cc72d5ed,Fix style check error for UnsafeDetectUtil.java
dbc37c1e198c94e05a887a48d11a15e23c27bb58,"Merge pull request #162 from ngocdaothanh/master

Fix style check error for UnsafeDetectUtil.java"
8c6820be6403aff807932063682b602b0807eb29,Fix possible NPE which will be thrown if the Buffer was set to null and after that Exception was thrown. See #166
fda1524953b1299030b328964b08c3b04597ab27,Remove unused import
28a8bb8b2ea49fed4f18a0aa9d1de9957bc83899,Remove StaticChannelPipeline. See #168
5a91bd36c41e57a21d24d6024035283c2388a1ec,Fix small typo
02f49af3a1046ed1ab5d5d19e88962fcfc71da0b,Allow to @override the cumulative ChannelBuffer creation. See #169
9c0aa0cf13f6591b5ac96cc1cd9517e0dbf8c73f,"FixedLengthFrameDecoder should used a optimizated initialSize when
creating the cumulative ChannelBuffer. See #170"
cd69bd4e2cc2be18b4aaa91cf7fe024c3a6a3135,Backport the pull request #174 to fix #163
1f6e96ed150c42be5484691675bf19c44ea67814,Forward-port the pull request #172 to fix #164
6689063eef49e013e47d63ff0d81d8b13def9491,"HttpMessageEncoder should add Header ""Transfer-Encoding: chunked""
if HttpMessage.isChunked(). See #171"
549546f944a6cdb0cfe03b1d7fa8aad0dafd7e15,"Remove the child Executor with the right method so it will also work
when the channel is not the key.See #175"
f7a4a646f878e69532cbce5a21a3236c67014232,Don't require HttpChunkAggregator to be present in pipeline for Web Sockets.
58e6bec3b1a85fb745012e0310cb366e72203c08,Merge SPDY support from 3.2 branch. See #176
bad9e83121c14b32e8fa2776239da0c68de9dd7c,"Merge pull request #177 from cgbystrom/websocketx-chunkaggregator-fix

Don't require HttpChunkAggregator to be present in pipeline for WS. See #177"
ae3e3e5abe40bcd24001c1937bdb0d5f55dbd1e9,Fix a problem with M2E plugin
3b31daf8a357b2e8b39e680538d2636f4282c528,Fix missing copyright headers
29cafcf842f79d2dee7eee9359bd7f7c23e93d3b,Upgrade to netty-build v6
dd27cd510aa6999d691956326d3bc5c54f61b75b,Use getHeader() instead of getHeaders()
fd610f2f28eb7f53131cb71b981ed1b841d3feae,Merge remote branch 'upstream/master'
a07a7e6e7283cee7b54bf93ff81e5dafff8003b3,1)merge with upstream master multi module build 2)deleted outdated src dir
af943b7502f91aaa61a08f4df1c09fbe5f747702,fixed sctp write buffer watermark count
71fd0231da45dde42636f6647ba2d6ec18e4da0e,cleanedup the sctp notification handler
9b563c8a2829a43de19734b92a7eedd764a750d2,SPDY Protocol HTTP Layer. See #184
a29d887c34537a49043d468f2eca64646c8dfecc,corrected sctp channel exception messages
fe3a480fb9ebfbb6698a9ddc4636943e7f4533d9,"1)renamed sctp payload to sctp frame 2)added sctp codec, handler classes"
a29839863064e3facec0aac323f9cd908f54e572,added test timeout for SPDY echo test
22a37e548e63b9f1996093971ffcded631942cbe,1)implemented defragmenting sctp frame decoder 2)implemented sctp netty testsuite
46363095970e1bd8f6046414fcf15b41a9c25452,Fix HttpSnoopClient. See #183
c46b083c1f0eb0f5e42baeb98f2cfc308c1bfb2a,Correctly decode URI in QueryStringDecoder. See #189
1b099acde0231c6e2ae163f9c119e1b2f143283a,"Introduce a new interface that specify methods for ChannelConfig that
are used in the scope of NIO. This allows to share some code and make it
easier later to cast. See #186"
97a38872f591a40c18c8e532aeb9772e01c749fd,"added separate bind method in client bootstrap, to support multi homing in sctp"
4b99c4f4f74f236bad80fdbcc48ccac122c8c063,"1)set the selector select timout values equals to tcp nio transport
2)removed unsupported sctp socket options from SctpChannelConfig classes
3)added testcases for sctp multi homing and multi streaming"
6d7ab72479ba2144a806988caa79c08c402923d0,Corrected protocol identifier in SCTP test cases
479def20bdbba61f8ae0d2fb6c46e935761932da,Check if logging level is enabled before log. See #192
65be9ebd44bb60b4921e11493f208407f64982e3,Start to refactor oio transport to share more code. See #186
812a9026b88244ffb6f8c24ea827cc4454973f55,Start to refactor nio transport to share more code. See #186
5557137dc033ea16e7b833d7d074e38c7fb400d8,Fix checkstyle
6d8daabefe0b3ac874e3e50c546e9ac5deadef2a,Fix checkstyle warning
f3c1e143c1d1303392e613a3a89a264e53fd8da9,Fix checkstyle warning
20d7379c535326cd6ea94699be687853de04c82e,merge upstream master
7dbb8d2b8f5dfc232875bb37774e63eadfaf1021,fixed checkstyle build failures
0148658bccfb2af89b140f5d520298c2071a0432,Merge branch 'master' of github.com:jestan/netty
0bb1fe26565b5edc53a1bf34f418a35c9c81fbe7,Skipped SCTP Transport tests in the build (Java SCTP is only available for Linux and Solaris)
fe1d51f1d50c61c502fe28b7795d3f6b20da97a3,"Merge pull request #185 from jestan/master

Merge SCTP Transport Testsuite with netty/master."
ebc7ae809000d0edef4cecc825e5d306041ec983,"Merge pull request #193 from jabley/patch-1

Fix checkstyle warning"
c5582a14b8b3d9700cf156baa277f008179ef24d,"Merge pull request #194 from jabley/patch-2

Fix checkstyle warning"
eafd8343ebc66c4d71b678d456b080449b5a42d9,Remove some casting. See #186
6eabd343c4251880f4e0c3a17ff6dc98d3309658,SCTP association shutdown cleanup
bb6d1402200506db2145c52719fbc0bf769a21e2,"Fix compilation issue due to jdk bug Inference fails for type variable return constraint, see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954"
7bf049b1d41d5b96053f0ba41c68e29537043ab8,"Merge pull request #197 from echarles/master

Fix compilation issue due to jdk bug in older jdk versions"
97b4876c08207ba8f7c16bcb7c1bae7864c88898,Fix build errors with m2e
a715220556128b0bfee09ffcbf06ea19222a4ee9,Fix a compilation error with the SCTP module in Mac
b3cc3055784c783f706a6277c18db299bc316415,Organized imports.
aa3b3d4a5b84c7bd0ccaee00ce1d71cfa224fc9d,"Merge pull request #198 from boldt/code-cleaning

Organized imports."
2e369320970a7531ec1ff94688d3d43045f0a814,"Merge branch 'master' into remove_duplication

Conflicts:
	transport/src/main/java/io/netty/channel/socket/nio/NioDatagramWorker.java
	transport/src/main/java/io/netty/channel/socket/nio/NioWorker.java"
2304913341ef3f239e5509a46921a5c65bbbe360,Merge branch 'master' of github.com:netty/netty
5fdd2dea12e4eb4f3254886335509449796e087b,"Make it possible to schedule upstream events to get fired later in the
io-thread. This is the first part of #140 and #187"
c2bc463d611ee2f15ce6205cf7fecd0c4c69cb2b,"Optimize the handling of fireEventLater if the current thread is the
worker thread. See #187 and #140"
301a17c029dd9f0a6539342ac8494781c4efd028,"Rename method to better reflect its usage and update some javadocs. See
#187 and #140"
04a6ff92afe2c590a465065135798c438d3f5511,"Add static helper methods to fire upstream events later. See #187 and
#140"
c4a437e16b42e88eb9947c65d3dd2413bd9ef5ac,Fix later sending of exceptionCaught events. See #187 and #140
ef64e8c332717257642583d48ccca6be82aa575e,"oio and nio transport now make sure that a upstream event get only
executed from an io thread. See #140 and #187"
f2d1f1e8ad00ad2c6f81b8c63ec1d37a0d9bdbb2,"Also fix the exception handling if a ChannelHandler throws an Exception
based of if its a io thread or not. See #187 and #140"
68066c5e4b53df40a35d439a3f0b49d51a449738,"Make sure that ChannelDownstreamHandler impl fire exception caughts
later via the io-worker. See #140 and #187"
cfe7b4959475f8690a5a0b3357230a6a539a916d,"Cleaner impl of AbstractNioChannelSink and AbstractOioChannelSink. See
#140 and #187"
5e43e879f276d2f2e75d16c936063d932bdcf420,"Add OrderedDownstreamThreadPoolExecutor which can be used when using the
new feature of ExecutionHandler to also handle downstream events. This
is mainly useful for SEDA like stuff. See #173"
16fada5c233fa7f5e6d534f960d55eb19a244e0c,Remove bogus constructor. See #173
d0a962422ea0a620c41bb2d3971fc9ecccdc26b3,Add back missing HttpTunnelingServlet. See #148
03cb43140c70287e6b454d0d6561e0699eddfefb,Only log if loglevel is enabled.
2b9df060dd916abb7774b65ce43e2d60fde0052e,"Add support to wrap primitives via ChannelBuffers.wrap*(..) easily. See
#167"
0beaa107b4be5e68928349c4131d01a655003641,Fix assert usage. Thanks Trustin for review
b6700fbe58894c59f1caae1fe97cf962ac066016,Fix naming of class. Thanks Trustin for review
46125686874f5b69bcdb6f4c9bef3f900a7057c6,"Fix #204 - Increate the granularity of connect timeout in NIO

* Changed the Selector timeout from 500 to 10 so that the timeout is checked every 10 milliseconds"
2984f26f978bc6fd74bb3c31a7e66b034798017a,"Decreased all selector timeout from 500 ms to 10 ms

See #204"
19358ee2469a815d6e93aea2bd6ce6fc1d7a8b76,Workaround for JDK NIO bug. See #203
40771f6faf30ddb7e6c6776338b7bb6d3fae3d62,add empty line
0d66a36a1480746af742ff2b87025a5abc3c7609,Merge branch 'master' of ssh://github.com/netty/netty
2f6d02da6039039c3d49ff98d50f67f524dd8d7b,Run tests in random order
c2d2f0b254e92d11b15db48d8ae4a6c695a9ddb1,"Optimize FrameDecoder and ReplayingDecoder

* Overall code cleanup on FrameDecoder and ReplayingDecoder
* FrameDecoder discards readableBytes only when it has to
* Replaced createCumulationDynamicBuffer with newCumulationBuffer with
  an additional hint
* ReplayingDecoder does not perform memory copy if possible"
fb4ee5207c55b0e0244db494c04c79e9bff03749,Remove shameful System.out.println
8ab94510865619767645a109104afc54149093e9,"Fix #208 - SslHandler does not use ChannelBufferFactory to create a new buffer

* Also fixed build failure caused by wrong fork mode"
c46593266d30748b3abc0059a4617c147c719d86,"Optimize ReplayingDecoder even further

* If checkpoint is non-zero, do not copy the whole input into cumulation but copy only the part after the checkpoint"
689c47980b5bfa5db654d7de33d4a38cd0acb8d1,Make ReplayingDecoder.newCumulationBuffer() overridable / Make Replaying|FrameDecoder allocate at least 256 bytes by default
4df3c612339bf717cfe902cb213abe3f59eda558,"Allow to submit a Runnable that get execute in the io-thread. This is
also used to workout flaws in the thread-model. See #209 #140 #187"
5f465da38ded7ef73cb30bb20fd600e8af3266fe,Add final keyword
8579f09c594f69870115c019655c98cba5ad47ee,"Merge pull request #210 from netty/threading_fix

Merge in fix for threading (related to #140 and #187). This also includes the new feature that allow to submit a Runnable that gets executed later in the io thread."
a545157f4bb36178c871bea3a9215e83d1d4e907,Respect canceled tasks. See #209 and #210
1589dadccef348293fa02bc9c47b64ba0daf4393,Better handling of canceling. See #210 and #209
c62b47228eae8619e1a3481cf8f6af785c38020a,Fix build failure
40e7a5d94874547b2ae5bcf55ddc07db6b714633,Clean up and Add missing JavaDoc
4158152b24c1e20cc9d024486a6bc6a0ee336a92,"Trigger exceptionCaught event from the middle of the pipline (#210)

.. because the previous handlers have no interest in the exceptions
raised by the next handlers."
81ad99bc396e37e3dce857b5841953a9abc58064,Remove logging which was added accidently
4b583325b09d5b1bf0228407705c613a5dbe2293,Fix #160 - No response to write if server is using SslHandler and client is not
68f9c7a5f3817df0e7a6e22515663d0107ab3f28,Fix #160 - Even more strict majorVersion check in SslHandler
d8021fc6a8f0c3a52d0d3e9fa36f5f8a22dcbe82,Release ChildExecutor after the channel was closed. See #173
4c67a24860dcdfe336e0ba4b4b5bbddb5e4daae4,"Fix #202 - Remove Twitter license

Twitter signed CCLA today."
9e8f8ac08cf6200fc07ef7934bf75b38f62b7c3e,Fix NPE in AbstractNioWorker / Uncomment setUseClientMode()
5aae8279b9c7c54e30b019235b9a5ccdea64252b,SPDY: use jdk 1.7 java.util.zip instead of jzlib
b22ebbe4309f37a80cbed53b58e9982c9273f65c,"Make #211 work with Java 5

* Use java.util.zip.Deflater only when running under Java 7"
469cb8b80be6a44ea66b723b7ded0cca327aef81,Remove Twitter license. See #202
985fc448dc52b0878acdce45edbc8043a95707d4,Remove unused imports
8eec6938834c38c9dd51a43df3adc2b029872d3f,Remove twitter license headers. See #202
529156028326efe51338990bce57666895f31a1b,Remove left-over of refactoring. See #211
0c46db317a0310923e5112577b759db9bdd844fb,"Allow to handle only downstream events via the ExecutionHandler. See
#173"
a071759575289fb85cdc2a07b116c2a3deea286b,Fix formatting
5d99d57cab6d90d2c91594d8755164261b8283b4,Fix checkstyle problems
be46c6b95419b99ed41f325bfda5c525e92e5120,Merge branch 'master' of git@github.com:netty/netty.git
53112574908c6e244c9c1030d5d69408907e863e,Upgrade to the latest netty-build version
efe27dbce548f4def09e9829bfc57e99676c50d2,Rename SPDY header block (de)compressor classes
b3606eb57a62317ef5147bb89e45e2c83d29d72a,Remove unused library at the moment
5bbabb6ddafde152dbadb01f3c89b2b98f56b3bd,fixed written bytes count in sctp send buffer pool
66f8de91b11e7644c1f5db72498fab92f7e2890f,"Make it more clear in the javadocs that you should use *Later methods to
send upstream events from a ChannelDownstreamHandler"
520bf78f18ada312fdc5e7e0f65bb24c2de6b182,Surpress some warnings
480343e16e037436f5a64fc58c6640e9cb80954c,Remove unused imports
69e047ad2eb3bfd04c43a0a69f18d44293c708b0,Remove unused imports
3317dd7bffc9f4c50606420313ccb9675d89f423,"Make sure we don't try to use Channel.setReadable(true) if it was not
set by the threadpool itself. See #215"
c40de99083a05db703c7e136e712c1165157f4f6,Merge remote branch 'upstream/master'
34e328f60608c86f4181650bae4527581137508e,"Merge pull request #220 from jestan/master

SCTP Transport Bug Fixes"
e0e87ce2bc267a0bf8c512e5a1a5e9f2affc87bc,Allow to share Workers by using a WorkerPool.
bc47850bbe36ec6a75ff2a08ae75b6d321cb1b82,Allow to obtain the Worker that was used to serve the IO of a Channel
caff7c941b1db5ef1d143fce78b71da603dbf6a1,Checkstyle fixes
fd7e165fb6e10914f57915de18bec75a5f1d69ff,Commit missing file
cf02ad2a1eb9035f96db22c8dce769baa63acdc6,Add DetectionUtil which replaces UnsafeDetectUtil / Improve SpdyHeaderBlockJZlibDecompressor
304eee1db44b562e0f3c960afb58804e4167bfd7,SPDY: use java.util.zip for header block decompressor
2109fdedb6856f1dd2edf566f21f1a200745725f,Fix cherry-pick where git was not very smart
70e0eba894bfe088868a4647cb71c8bdb2930162,"Replace SpdyHeaderBlockJZlibDecompressor with java.util.zip.Inflater-based one

It should be fine because the Inflater-based one uses only JDK 1.5 API"
0b0edea6bcc2d6978b035071acd50e2f7e91bdad,Make classes public
e8c64ea593b4b69a55e8d5486b3109dc071118bc,Make classes public
6375b84c9db0e5f736e22a5d085f84c0dc4d8c11,Change Worker.executeInIoThread() to not need a Channel as paramater
62028f0042868af9211e188d0f2fc7cc06edc08f,execute the wrapped Runnable
e207af30a357e1d5c4e87767f053920820b64d49,Make sure AbstractNioWorker gets started if needed
875d5ce5138a6c1d9e5e20c8d893d07d30cd0124,"Allow to force the execution of the Runnable in a async fashion even if
the IO-Thread is the current Thread"
59ff76bd6696432650bc81f4d904854fcbc139cd,add javadocs
30ef2146771893a7f0591cf010ceb4912ca8f479,Make sure ...Decompressor.end() is called even on Exception. See #224
09b41b28ea856fd27a85c203b5dc6015ae91c86e,Correctly handle earlier versions of websockets. See #222
92a907c4d7839d7ca1c7067fb4f0fb7258873c87,Merge branch 'master' of github.com:netty/netty
279d859c7ef09f69a64f2a7627660cdfe008fe9c,Issue #220 - Treat content as non-empty on 101 Web Socket upgrade response
afcd03312320b8a5f2abf91e604b481baff908f7,Issue #222. Remove WebSocketHttpResponseDecoder hack.
b56c17769cb4f122e99df33363d85696228a2655,Retested Websockets with Autobahn v0.4.10.
c061ddbf14185416585b19e94e1478f02d9841f7,"Merge pull request #226 from veebs/Issue222Part2

Issue #222 part 2 - Removed unnecessary websocket code and retested with Autobahn v0.4.10."
cb931bfb924f3b9b16d90e5ff119bb9e5ee61cfc,Correctly handle HTTP Patch. See #227
91463cad47f792a594f221e6e782b6fe0ff2504a,Added README
0a6f7395f33d8288394fb4076d6d6b198392fd7e,Merge redis codec to master branch. See #201
5830e5a7fb0cda7e7e600572ed92abbf46723182,Merge branch 'master' of git@github.com:netty/netty.git
0fb4dc5431e4f52a0eb57d4cc2e3df1d6b2f825e,Use java6+ methods
18c037d88b9a69f4109748ead77f35d8ab830dab,"Merge pull request #230 from veebs/Issue222Part2

Added README"
f938765d6eb75d09b65862605743d742342b6e22,Update README.md
b09bf5b1fb0c1dec843d6f5738ecc3da727604af,"Tasks added to OrderedMemoryAwareThreadPoolExecutor may be lost in some
cases. See #234"
b28ef57705b56e2160b2b9e405acfec7ba7a77e3,Merge branch 'master' of ssh://github.com/netty/netty
fd3d98cf629be62de475ff1d5b76a31b74113c82,Fix UDP Multicast writes. See #237
6e68577d5406119ef57163373ace105b84a6553d,"Merge pull request #225 from netty/workerpool

Support of sharing a WorkerPool between Factories"
d68b104969470dfd5f95594be4f83bab126246d8,"Make sure AbstractNioWorker.setInterestOps(..) will notify the future
and the handlers in all cases. See #238"
8d9f78c84db0a1cc57563fb4751402dae498897c,Correctly handle responses with return code of 1xx. See #222
e8ddc3cf007e997a299169dfc525ed70a3cad99e,remove unnecessary check. See #222
32ff810b64f4ebd89d1145e08771fdaffff6180e,Correctly handle Hixie 76 websocket handshake response. See #222
f8253e031d079e4cd9fd425c85e608434dd88453,"Fix #239: IdleStateHandler starts two timers

1) Do not rely on ChannelPipeline.isAttached() to ensure initialize() is
called once.
2) Fix a race condition where initialize() can schedule timeouts after
destroy() is called."
a81fa75c59918d471cdbfda58d1d746ce125025e,"Fix #239: IdleStateHandler starts two timers

1) ReadTimeoutHandler is also affected by this bug - fixed
2) Reverted IdleStateHandler.beforeAdd() and channelConnected() -
without isAttached() check, timeout can be inaccurate if beforeAdd() is
called long before channelConnected()."
c28137b0b21bd3ba2c335b3534d0ce2895f7c05f,Improve ChannelBufferInputStream documentation
2766133a4dfe542c0d4f8240f69a82050bd6d569,Fix javadocs warnings
0082a15899f2669e3407ae6d3ad279a43aeb7226,Fix javadocs warnings
0c3a33f83b5697ceb7a4ba73767cf490fd53efc5,Add no-args constructor for simple use-cases
64f529945282e41eb475952fde382f234da8eec7,"Unless the Connection: keep-alive header is present in the HTTP response, apache benchmark (ab) hangs on keep alive connections.

This is as per HTTP 1.1 spec:  http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01.html#Connection"
60d93646049a19ee157a4f4414ef09634d2b36bf,First round of remove the boss-thread. See #240
30fabea5cd308b20eaef5348e079f7101118d574,"Merge pull request #241 from veebs/KeepAlive

Return ""Connection: keep-alive"" header in the HTTP response"
dded63b22c9521508cca7141322810929d8743f4,"Make sure we use the same Worker in the client during its lifetime. See
#240"
77e1ef72cdbb4de37dae65988f2dfee68718d80c,Re-enable ssl tests. See #240
b145a8a0d4dcdb980c7ee75b564814a3ec4298dc,"add some todo and comment a failing test on windows. This test also
fails in master branch. See #240"
73f3a45e97553dcdc2208d81b2cf7addf07d3746,"Merge pull request #244 from netty/thread_model_refactor

Thread model refactoring, which remove the usage of a boss thread. See #240"
b98516536e36540bac0e56c07bd169bcbbb39160,"Introduce the JdkChannel interface and implementation. This will allow
us to also share all our nio code in the SCTP implementation."
6184456689df0d1ece0b6c8be7216ca85c0de7d6,Fix usage of SctpNotificationHandler. See #245
fd0b0a4e2be5ccaeff5ea0a6c1c995c114f09a10,Code cleanup
a065b1cee2c882458fdf7a6a5709d8516c583833,"Issue #242: Add the ability to send many commands with a single call

Also:
* Code cleanup
* Hide internal constants from a user"
070c92906d0a3b2669ad4b1e9d48852811c8aa4c,Add missing Redis client example
a60eecaa0c11e27a8c5f95adf3e2e6e13eebfbdd,Refactor sctp to share code with nio
a85f22e1734d505a122b45381f70a427f42336ef,Code cleanup
c3e51af849750a14be593f63dc284aa0628af79b,Check before casting
4afd038fc07242febea70484143be66c0f812f48,Fix race
732b11e7d525f0cd0ec77f49765255949f714f41,Fix race
e3fa9810f8d83a679d0c8f82ecfe2ba49e5c31e8,Fix race
f154c480e0ae328404ab73b2fff9e0424bc89069,:Correctly handle interestedOps changes
43db6d70502ddc54ee975615592364f2edf7a09f,Enable/Disable sctp tests based on the detected OS
3decdeb0b03cf6b1162becdeb677122b4d711c11,Exclude com.sun.nio.* from the generated jar
c02d38a728be777c2c40b9db074da8aec2620540,:Correctly handle interestedOps changes
8e9058e9212c690f9cb38395223a87d5d7f20faa,Enable/Disable sctp tests based on the detected OS
a2701a9ae448188da380353d01113dcca6929321,Exclude com.sun.nio.* from the generated jar
c83fb3a3f009ff3efdee7b86f3e64d8f7ae5f76b,Correct handle interestedOps changes in Sctp
8eb3a30bd4f95346adbbe75f8ad46af49007af41,Fix NPE
f135804b9bdd1ee81be50dc8f44872f95e2cfe64,Correct set blocking mode on server channel
7dc2d8eb7770cb49db151f858ab422ccbcee2691,Make sure all resources are disposed before try to shutdown executor
4eac8f6b7050b2df73277dd193168234e805efb3,"Use jUnit Assume to ""ignore"" SCTP tests on non-unix operation systems"
73bdaa113af80b81ce902fec4a939e11285feb0b,"Use jUnit Assume to ""ignore"" SCTP tests on non-unix operation systems"
27836b6436adc575760a89a7b5b01639abe5b4aa,Add some package-info.java
76c841bd4e97529ebd2a8c6087facb5fd3f4d861,Remove non-used class
373c3560674bc8d2a84d4d4f727e276836752b55,"Merge branch 'sctp_refactoring'

Conflicts:
	transport/src/main/java/io/netty/channel/socket/nio/NioWorker.java"
72f9f502bbb0ab5445c280aabb7e759e74eaff16,"Add support for UDP multicast in NIO. See #216

Add some javadocs. See #216

Use the correct key to lookup MembershipKey. See #216"
9b90e3191a1b220e634b5b1ce383cfba36511cad,"Finish support of NIO UDP multicast. This also change the methods to
return a ChannelFuture. See #216"
b350e8d289fb1ec53b63c3393066bac610b20410,Fix UDP Multicast writes. See #237
7f8408065b6d1fb142a51368bef2784cdcbe374e,Fix UDP Multicast writes. See #237
221a77409ac213601f8fe989aecb41228493b26a,Only use the source address to join a multicast group if it was specified. See #216
023227917f8e0f4ea841c64e8f271dda1cdd61d2,cleanup
dd6069c6810b94ffc33b1cb694f8fbda73737cf0,Fix broken UDP support. This got broken in 3.4.0.Alpha1
9c1f3c6fe89d289b61124de199497ff8c0cab20a,Fix UDP nio impl and add simple tests
31e3530252ccfa5389064a22e70015f8081c27bc,Fix typo
805270c5d95cacb15725231cfe849f11968d081f,Finish support for UDP Multicast in UDP. See #216
d66cf2cbfa604048543594a7ab96bb78d1607186,Add missing license header
116054a364f74d10f9b3161dd60b2d72ab05f9c6,Initial incomplete checkin of the event loop API
0d8afa7a4c5ea2d1409d3668b959c4b5d1e8eb4c,attach -> register
a8647d6dc87e9ec0e2d72105f71d3a26d78d994e,AbstractNioWorker -> SelectorEventLoop
5a63cc4e1a94855ff9534d3e7cd3825e8dd0a64e,Allow specifying a non-default SelectorProvider
049fb35bc1f58848a97e1c91288498cbc979388a,Add Channel.deregister()
389845b4c94b6ee0dbca10c6716d9e1cc5c98d23,Make sure Channel connected event is not fired on connect failure. See #249
db87c6ea3755a25c6fedff6f3f5bc5802ec5ffa6,Make sure Channel connected event is not fired on connect failure. See #249
c8679fe52c95336adc90421dce47a2187d86170b,Catch Throwable
d2d859d22c5a7199654df2dd04f8656a265de047,Make sure multicast tests pass on all os'es
778f4a3cbcb203a47fb5400c268481809e20770d,Make sure Future get notified before event is fired. See #254
33c085b9b9a27f442e762a0234a27bd6afe5169e,Make sure Future get notified before event is fired. See #254
dd14b8d9e84785e144c481929cbea7bc60714786,Issue #250. Implement web socket close frame status code and reason text.
e7e780fddd97dca003ef546fbb35fc4855091d7c,"Merge pull request #253 from veebs/ws-close

Issue #250. Implement web socket close frame status code and reason text"
968b9103b3d9dcdb96c177aea21720c8883ee161,Add test case to show that issue #235 is due some incorrect usage
32d327ede2e521b00cd65eba3153637494b80d8a,Take care of releasing the local channel when releaseExternalResources() is called. See #235
70458316873ac9f1185553cc7cdcab6be80a70b5,Correct javadoc. See #235
16bbd313300799acf516df4abe145cacf5cbae28,Await for close of the channels. See #235
1314db9c0ad4b36863eb9ffac0fac64875ccd197,Fix a NPE in a testcase when running via ubuntu
91dc8efd4b9687821c6510f16a9dd16a2b4c8771,Issue #250. Implement web socket close frame status code and reason text.
a847ec1d88aef51fd9e60a877750dd25a4cda415,Add test case to show that issue #235 is due some incorrect usage
7eaf6350597cdf2ce505a5935dca35aeec737e66,Take care of releasing the local channel when releaseExternalResources() is called. See #235
019d942a2819df0f36ddf6aa34e76333e061ebbe,Correct javadoc. See #235
07ff3d76cd197452d9448e8bedc97fa1baa28620,Await for close of the channels. See #235
32f61ed01ac7540ec5bd16898ca590fed36d59e8,Fix a NPE in a testcase when running via ubuntu
f3456ce098d3357d09a0adf8d289e847101a507c,Make sure multicast tests pass on all os'es
beedd26e1c81467e41730c743374abb0b33f7c67,Add missing license header
5434bd9645a06a30054323f7de2df2e11b38eafd,Add missing license header
f17e56b33bfb725474015e19cdddc5d1254ea989,Accept all ready sockets for the SelectionKey. See #240
d0f432b4d4baa8e4e5c13b6287cbb1c192f91b35,Accept all ready sockets for the SelectionKey. See #240
4436f60e2f92cdcd86b42a95a3eb5e0955cb7064,"Workaround to have multicast tests work on osx, linux and windows"
a37d7bb5f3f1463d08295a1d465ed9cf9475eee8,Make sure multicast tests pass on all os'es
470c1a898a6cdb5d20993e63d9e5b83c298290a9,"Fix a bug which lead to only use two threads for all tasks all the time, even if the WorkerPool contained more. See #240"
5b53b66fbf456de0bb2aff1092e6baa53221514f,Allow to share a WorkerPool for boss and worker threads but also allow to have them separate. See #240
962a67dc03c453f9c37a4f1cf7a2d8a08af516b4,Add final keyword
3f8c13f138959ffc437e67c86ea33afe74d6c23f,Fix regression in Zlib which was introduced while refactoring the code. See #255
4c0a5886ca10f60b0efff843dd10d4b12d4c6de9,Make sure multicast tests pass on all os'es
f88cd3120d8cac8dca8d6a122a4fbed374b4d065,"Fix a bug which lead to only use two threads for all tasks all the time, even if the WorkerPool contained more. See #240"
16c625cfd0f1f094db837c3f98809ee899fcc248,Allow to share a WorkerPool for boss and worker threads but also allow to have them separate. See #240
97561315fd353ce37626eafc394ad88094a87d3a,Add final keyword
05204025cce2c55293ab55a9e5e380d73b7e90f0,Fix regression in Zlib which was introduced while refactoring the code. See #255
941e71de36e478b795c4ea0e8fd15dede05d1b7d,cleanup comments
b9c60bd5187a15171b255e43f57b2798b98ebf56,Throw a PrematureChannelClosureException if the channel was closed before all responses were received for the sent requests. See #256
5ed04c3ada397d90f8d750175ed1d63ddc5bb86d,Correctly handle chunked requests/responses. See #256
22a815eaf8802183102fa188283ee9c2a4d7bb53,"Revamp channel handler API

- Merged LifeCycleAwareChannelHandler into ChannelHandler
- Replaced ChannelUpstreamHandler and ChannelDownstreamHandler with
  ChannelReader and ChannelWriter
  - These two new interfaces are much more type-safe than its ancestor.
- Simplified channel state model as described in #68
- Handler creates send/receive buffer.
  - Previously, Netty created them, but it led to more memory copies and
    inflexibility.  I'm going to allow a handler to create a bounded
    queue for example.
  - It currently uses Queue<T> but I'll define a new interface and make
    ChannelBuffer implement it (e.g. Queue<Byte>)
- Introduced AttributeMap which replaces attachments in Channel and
  ChannelHandlerContext and ChannelLocal"
c7bd0b41e69add2512564966c9f550781f61413a,Remove unnecessary parameter
d363f73fd831be950a2ba2e39b7f51df1cee0fea,Only increment the counter if the encode did not fail. See #256
db97e4eb35699538023fda58114149f11cf669a4,Use a logger in SocketAddresses
efabc3c28549209ab060bed785ca6541b2e35474,Use a logger in ZStream
a20ab9184e7f13fcd8d73b00fc2d97ce983f09a4,Use loggers in some more classes
fa3c9c8eee060ba64fe1ff07a4f4b1704f3febfc,"Merge pull request #260 from CruzBishop/logger-usage

Replace System.*.println calls with logging"
a682b018b29b79aebcc935f9f6213725bd5904a5,More logging
11e974ace35cb79e2b1f730e57619f9220b3b890,Fix up the last logging mishits
bc141f695b614a7b9034b18e5bced3e218ed47b8,Add test for HttpClientCodec that tests handling of missing responses. See #256 amd #259
e02225a80f4621172f72978bdac6a148e471fed5,Add also tests for HttpClientCodec that tests handling chunked responses. See #256 amd #259
f25453cd364a9d403ce63b05bd75a499d5255dc0,"Merge pull request #261 from CruzBishop/logger-usage

Replace System.out logging with InternalLogger"
05615c4779e4c8bd98ac9b15097ab5fef4916c78,"Throw IllegalStateException if DynamicChannelBuffer exceed the maximum
ChannelBuffer size of 2gb. See #258"
c44f365ee7784dd3af2ecec73ed18b8f6239f674,Add some javadocs notes that explain the behavior of CookieEncoder.encode(). See #94
978168e8c6c8d51e1c1d611a9900d2414e2ec3bc,Fix typo
987e152f083740738f05fab1d80165c9d6381f0b,"Add port to Origin HTTP Header if the port is non default (80/443). See
#262"
0a84ce6f0075b6b1b60e685d048a8ed09fb0b964,Merge branch 'master' of ssh://github.com/netty/netty
00e59da7ba9792fdcda082b52c948e80821ecef1,"Add port to Origin HTTP Header if the port is non default (80/443). See
#262"
cd92478bfc9f3a8ab15514d56aaa6d4a43b5b9a1,Use Sec-WebSocket-Origin in WebSocketClientHandshaker08 as replacement for Origin. See #264
aa6c16b13620c53a485247dae5da3ad0e7fe8ba6,Make sure PrematureChannelClosureException is not thrown incorrectly sometimes. See #266
2db3e59a6c5e40fb72cee46bc66b30ccd4dbbe79,Add workaround for connection problems with IPv6 link-local addresses and jdk < 7. See #267
02dc9ea8c16fbed57aa5e03799a5120f36e78723,Add workaround for connection problems with IPv6 link-local addresses and jdk < 7. See #267
b3b5fb1de66fd1290015998d7d4d836bce3e8594,Fallback to LegacyLinkedTransferQueue if using LinkedTransferQueue fails. See #268
d808cd04757136c3ea2180e2c5e13dc509f5a2d0,Fix compile error
54559a95956ba26bd75790fad04f7057fe0f6674,Make it configurable if the HttpClientCodec should throw an exception on close when the response and request count does not match. Default is false. See #266
e719f23f7d3b2fca265ddb7fedef2e35e64d4594,Only log if logging level is enabled
2ecef07c4a5b1a2d302e7ad5adae9b828370234d,Allow to disable the use of sun.misc.Unsafe via a System property. See #272
ec409751e109256bd872c0d80c4ab1cbafc1a6de,Correctly handle the stripping of the zoneId / scopeId in all cases. See #267
ccf01d133a031f69346d1479e5eb29547d09afeb,Make sure we always cleanup once ReplayingDecoder handles a message. See #259
5f6b419bb92ec2c98d4b149f2a8a3f2a056ef0c9,Allow to specify the local address when connect. See #276
980d96cf581493124028bb60cc4dc213c3f2737e,Fix possible NPE. See #274
77d2f9c4ef5ae5070123cee4bca9870ff5f4c5fa,Upgrade and Connection header must be matched in a case-insensitive manner in WebSocket 08 and 13. See #278
6e2e9fb3c5e2d79c37cc618549aa4b7fe51499b4,Use gathering writes if java version is >= 7 . See #269 and #271
476cf97b9789e587e46d87b4798927ee8df2a2bc,Make the cumulation usage more memory efficient. See #280
a8b9e27c92682dd59135622df15005d6ab0b8c09,NioDatagramWorker.ChannelRegistionTask should handle ClosedChannelException gracefully. See #281 and #277
6009a413b910940c551c209cda057f50823f4e76,Issue #283 - Support max frame length for web socket to limit chance of DOS attack
9d555b0b97618c8bdee03a7fa20b3c0f1e8321dc,OioWorker failed to fire channelConnected event for OioAcceptedSocketChannel which is fixed now. This also fix a race which can could lead to missing events. See #287
e61a9ce7c17011a9b2b052a31207191eba543266,Make sure netty detects the right java version when running on android. See #282
40e9b96764d47465835ef3b23f28c5fe38cdd604,We need to keep the old constructor to not break the API.
9f2c454ab713c6685329f548f38f230ac6eaa6f4,"Merge pull request #284 from veebs/WsMaxFrameLength

Issue #283 - (master) Support max frame length for web socket to limit chance of DOS attack"
dcd2a10f95d0f3f30e1167330c0689da46629839,Remove @deprecated constructor. See #283
94b10d2d02d4a4fa0bd781caa5dcc40b1a4f72b7,Remove volatile on two fields that don't need it
cdd1ba93f052e770beabe3d56c00480a49fc6f35,"Second round of new channel handler API design

- Rename ChannelReader to ChannelInboundHandler
- Rename ChannelWriter to ChannelOutboundHandler
- Introduce ChannelBufferHolder instead of adding the common super type
  of message buffers and byte buffers
  - This is more type-safe and natural.
- Remove the notification methods for buffer closure (might add back
  later when revisiting half-closed connection support)"
e76e2aeac80d883383ec672e628fac10c85947cc,Add missing @Override annotation
470e7da5d7963745e4b4f86c09ff2485bb782d70,"Add MultithreadEventLoop

- Add EventLoopException to wrap the exceptions while an event loop does
something
- Make EventLoop.register() return EventLoop so that the caller knows
the actual EventLoop that will handle the Channel even if the caller
called register() from MultithreadEventLoop"
447545bb191969ffb7a15d950ef698b2f81604a0,Remove the methods related with half-close
3804f3cbbbeee86bf6d0b32da3dd32a816e00e32,Remove ChannelLocal (deprecated)
f57ef3d4148d2114aa983bc9baa6f71c06129987,Add ChannelBufferHolder.toString()
0f42719e9b05f2286964e1b5340fc2ac17c278dc,Add DefaultAttributeMap
65876fa7fbe2f63a73a590b5f2583daecf63984f,Close channel when needed and optimize force() position after multiple writes not at each step
877383de3a518dd0dac56eba7337932dd55f59ec,"Move force() after multiple writes, not at every steps"
a410cb243b875890d96f64db5976a90e9e8295fc,"Fix in addContent when switching from MemoryAttribute if it is done when last buffer added, in order to not close immediately the underlying file before adding the last buffer."
d9085e9e37669624f1e716023cd91e6aeadd3c64,"Fix in addContent when switching from MemoryAttribute if it is done when last buffer added, in order to not close immediately the underlying file before adding the last buffer."
c83323f7484b094e8bee993154325d73dd19e11f,Add the SeekAheadOptimize class to enable faster seek of bytes values in HttpPostRequestDecoder
a52439647562f842ec2dd8a70427bd8af6e30e87,Optimize Buffer access while decoding by going through backend array when possible (divide by almost 2 the time spent in decoding)
675bccc9eabbf10f665ae9f078ba6e15f711af87,Update codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java
2a70df1c1c62f66336c4a497a2fb5c5829782e3f,Optimize AbstractNioWorker.cleanUpWriteBuffer(..). See #293
1bf17c7c87769c803e0af21d37bc6b93f6d96ecd,Add Exception to name of the Exception ;-)
502e469c45fc7dff596c3f0441db712a771f5a11,Add Exception to the exception class name
368156f5d0f3fd59146fe37f874cf77abe307ee7,"Another round of the new API design

- Channel now creates a ChannelPipeline by itself

  I find no reason to allow a user to use one's own pipeline
  implementation since I saw nobody does except for the cases where a
  user wants to add a user attribute to a channel, which is now covered
  by AttributeMap.

- Removed ChannelEvent and its subtypes because they are replaced by
  direct method invocation.
- Replaced ChannelSink with Channel.unsafe()
- Various getter renaming (e.g. Channel.getId() -> Channel.id())
- Added ChannelHandlerInvoker interface
- Implemented AbstractChannel and AbstractServerChannel
- Some other changes I don't remember"
825d7964c9d1afcc07668311aafa582e337edcab,"Add ChannelFutureFactory & removeClosureListener()

- Channel and ChannelHandlerContext extends ChannelFutureFactory.
- Added Channel.removeClosureListener()"
c34d63d159e11f493ee2e1a751eb6146fb209727,"Fix compilation errors in ChannelGroup and its related types

- Also removed the operations not valid anymore"
f4423ac555907cc5352a7aa07ba6657753302eee,Remove unused configuration properties and their related classes
1b5960a1a8581a3e8a6fdc19d120ef6c05b93702,Add ClientChannelConfig and move connectTimeoutMillis there
0682421ce1e48c5009570e857385e1e280aa0dd3,"Remove unused classes

- ChannelPipelineFactory will be replaced with sometime else when I
  refactory the bootstrap package
- FileRegion is going away.  A user can deregister a channel and perform
  such operations by him/herself.  If this turns out to be too
  difficult, I'll introduce a new 'sendfile' operation to the outbound
  handler."
a83b9704faa4a75805c3b6912b58b2aff5c5fc97,Make sure ChannelFutureListeners are invoked from an event loop thread
b2e77beb4603d9df613f23ff02f74944edc94f1f,We need to set the exception on each MessageEvent. See #293
1356a0b61e883fff783f2f413f9282314110da98,"Replace Channel.Unsafe.setEventLoop() with register()

- Added AbstractChannel.doRegister()"
e65e496fc09157d51be573a19cbb1eecd678e49c,Clear Channel.eventLoop on deregistration
3edef63fa851317bd1920bfe7c733320f8365b43,"Merge pull request #294 from fredericBregier/master

For Improvement Issues #290 and #290, plus the defect issue #291"
5dda9d1840a1ab9416cd7420a962680d9ac50294,Retrofit the socket channel API with the new API
202df0618c5ba7c58a0e4ef8e4f9ac76c8a32a46,Remove workaround for ipv6 link-localaddresses as it not work on most os / jdk versions. See #267 and #295
9e6f8b46df8cd067306e2f563e2d35e3180f8821,"Retrofit the NIO transport with the new API / improve the new API

- Remove the classes and properties that are not necessary anymore
- Remove SingleThreadEventLoop.newRegistrationTask() and let
  Channel.Unsafe handle registration by itself
- Channel.Unsafe.localAddress() and remoteAddress()
  - JdkChannel is replaced by Channel.Unsafe."
d475a8cc64613c54c9e3318710a94f38334ac34c,Very small fix (readUnsigned while in optimized version it was signed but should be unsigned)
51415ca3ee88d8b9bfeb837e98eb106fb765764f,"Merge pull request #296 from fredericBregier/master

Very small fix on skipControlCharacters"
62f5623d2af2a5bbbfcfc51cbde19929c35de81f,typo fix ! Sorry
cc0d7d8be50bd59c369529305228c328b561993f,typo fix! sorry
4e528c10fae3abaa932e751c831aa48a23645744,Fix small race which can lead to resumeTransfer() to not kick in. See #300
607d784e5eb6dd73abccb3a4f42e8cc7cd7dd4bc,"Retrofit/overhaul the NIO transport with the new API

- Remove large portion of code thanks to the new API
- SocketChannel implementations are instantiated without factories
- Retrofit the existing code with the new API"
fb52b8a3b2e3940a0bcf6e9167b157d59a811691,Make sure ChunkedInput.close() is not called before the write is complete. See #303
f023120a62ce756280c6a9d1e6525ca3070b583d,Allow to register ChannelFutureListener's that get notified once the inbound of the SSLEngine is closed. See #137
2174ce36280e2369e7efca3eae49ef623170084f,Fail all pending writes on channelClosed(..). See #305
bc6948c3979503404adec190f46ae2bd55006379,Fail all queued writes if the ChunkedWriteHandler is removed from the ChannelPipeline. See #304
d3c137923f246130d2f34a474c8117c7734245c6,Notify ChannelFuture's of queued writes if the SslHandler gets remove d from the ChannelPipeline. See #306
7016b83629ac8ad734b896e4ee34c44cd4dc3788,Add @Override annotations
ec28cc8ba15d2890e11c93651b68618fc5fa7081,Refactor ChunkedWriteHandler to remove synchronization which can have bad side effects like deadlocks. See #297 and #301
781e628dd8eae7ec97d030c72d645ea7ebcd227d,Let ChannelLocal implement Iterable. See #307
d509425b9013af0aefcd2392547d445406b600d9,Make sure we fire the event from the io-thread. See #306
21a61ce632047e30daf3f5efcc6900b42cd5651b,Make sure the ChannelFuture's of the MessageEvent's are notified on channelClosed(..) event and on removal of the handler from the ChannelPipeline. See #308
c24eafed480a78ccbf65ad3751529cfd7f89bd45,MemoryAwareThreadPoolExecutor needs to notify ChannelFuture's of the queued ChannelEventRunnable on shutdownNow(). See #309
4b1721af17ec1a4e52d96e83d1fbfaa851b1de0b,Fix regression in ChunkedWriteHandler. See #310
2cd6386a373d1441f12fd00418f104d43d41186f,Make sure all MultiCast configuration settings are possible with NIO. See #313
27358352ac7722cc907f3d86ec0c5bd8e7d8a04d,Make sure all MultiCast configuration settings are possible with NIO. See #313
129a2af86adda8631eee2a5fe3c2b442a223a724,"Initial working version of the echo server example

- Optimized AbstractChannelBuffer.discardReadBytes()
- Split ChannelHandlerInvoker into ChannelInboundInvoker and
  ChannelOutboundInvoker
  - Channel implements ChannelOutboundInvoker
  - ChannelOutboundInvoker.nextOut() is now out()
  - ChannelOutboundHandlerContext.out() is now prevOut()
  - Added the outbound operations without future
    parameter to ChannelOutboundInvoker for user convenience
- All async operations which requires a ChannelFuture as a parameter
  now returns ChannelFuture for user convenience
- Added ChannelFutureFactory.newVoidFuture() to allow a user specify
  a dummy future that is of no use
  - I'm unsure if it is actually a good idea to introduce it. It might
    go away later.
- Made the contract of AbstractChannel.doXXX() much simpler and moved
  all common code up to AbstractChannel.DefaultUnsafe
- Added Channel.isOpen()
- Fixed a bug where MultithreadEventLoop always shut down its child
  event loops on construction
- Maybe more changes I don't remember :-)"
b4764f61646ad56383eb884a6ca6e562b458aa65,"Fix infinity loop and timing issues

- Made sure unnecessary interestOps are not OR'd
- Fixed a bug where DefaultChannelFuture.rethrowIfFailed() returns
  silently if the future is not done yet - there's no ways to tell
  the differences between failure and incompleteness."
d62977b061d3ccadc89a336533605f984771d09e,Set source java version to 1.7 where needed. See #312
d56aa76911fcc5f10f62263a3ccc6023b1d69ca4,"Revert ""Set source java version to 1.7 where needed. See #312"" as it breaks the build

This reverts commit d62977b061d3ccadc89a336533605f984771d09e."
532672deaef79b12f8172f67e071db275a9a5a0c,Fix unnecessary application of Math.abs()
da9ecadfc081b86a08bc3dd65db91065209676fd,"Introduce bypass buffer and use it in LoggingHandler

- Added ChannelBufferHolders.(inbound|outbound)BypassBuffer()
  - The holder returned by these methods returns the next handler's
    buffer.  When a handler's new(Inbound|Outbound)Buffer returns
    a bypass holder, your inboundBufferUpdated() and flush()
    implementation should check if the buffer is a bypass and should not
    modify the content of the buffer.
- Channel(Inbound|Outbound)?HandlerAdapter is now abstract.
  - A user has to specify the exact inbound/outbound buffer type
  - It's because there's no way to determine the best buffer type
- Implemented LoggingHandler using the new API.
  - It doesn't dump received or sent messages yet.
- Fixed a bug where DefaultUnsafe.close() does not trigger deregister()
- Fixed a bug where NioSocketChannel.isActive() does not return false
  when closed"
d5b52077feddc118b2d4313ff41b8f57fc8626d8,"Remove hexdump option in LoggingHandler and dump always

- Allow a user override the log message instead
- Prettier hex dump"
d02bc1c0d35ad0024a1d9e0fc7fee2465d378814,"Log outbound buffer

- Use uppercase names for outbound events"
cb718a07c82c6a50821ae0eb805983bb8ec8b3e5,Move ChannelFutureFactory.newVoidFuture() to Channel.Unsafe() / Cleanup
21348481111a34b80fc2b6b19f2c39181aa65fa1,Ensure the specified future has the correct channel / Cleanup
f6d6d1282cc466676d21c49eda6a6ddb5b254296,Simplify AbstractChannel.toString()
a4678a603090d25302dcf09b77d4cc6d044302d3,"Close all channels when SelectorEventLoop shuts down

- Also removed a FIXME which was fixed already"
83026f29a41f6f1feb4047ea51d390738674e1a8,"Make EventLoop a ScheduledExecutorService

- SingleThreadEventLoop now implements ScheduledExecutorService
  - Scheduled tasks are automatically fetched into taskQueue by
    pollTask() and takeTask()
- Removed MapBackedSet because Java 6 provides it"
b4610acda15f86b5027d44be5f72aad674f6ab71,"Implement connect timeout

- Merged ClientChannelConfig back to ChannelConfig
- AbstractChannel handles connect timeout making use of
  EventLoop.schedule()"
4b673c4ebb759ac070bca4741cef45d737398af1,Fix infinite loop while handling a client socket / Retrofit EchoClient
1db0cd60c40aba95cc7c9a0e564ea121410ccb15,Do not attempt to flush when waiting for OP_WRITE
97c07708a288ced04e2476914169005054654ea8,Remove unused class
c57d7dd0987fc440a0f5a589b86db5d0ad82f910,"Add EventLoopFactory and make MultithreadEventLoop use it

- based on the feed back from @normanmaurer"
7a5f4721b9f6e5c9e9194167955d767c4e8655f4,Optimize LoggingHandler using lookup tables
efe7fd953987fba670c6e7c7c2d213512e5ed5a5,Uncomment logging in EchoServer
95f05ae2158f09af7da7ec17445e720071a521d8,Uncomment logging in EchoClient
abd10d9089bb40dc75b067bdfe90a9befbfbe694,Fixed bug where subprotocol not sent by client
b09962f4c26c5231523584f82fc6cf86fb687970,forgot 1 more change
08137e2c49a030a8dedb511af14f779e12b5f6a0,"Implement flush-future properly / Make channel options type-safe

- AbstractChannel keeps the expected number of written bytes so that
  the ChannelFuture of a flush() operation is notified on right timing.
  - Added ChannelBufferHolder.size() to make this possible
- Added AbstractChannel.isCompatible() so that only compatible EventLoop
  is accepted by a channel on registration
- Added ChannelOption to make channel options type-safe
- Moved writeSpinCount property to ChannelConfig and removed Nio*Config
- Miscellaneous cleanup

introducing
ChannelOption"
91c02c282389555f5775624909cdcedace8ab0bc,Improve AttributeKey.toString()
175acb7899cbdb88be7b33a3b0be56934f9b24c9,Prevent unsafe ChannelFutures from being passed to a pipeline
6d14fac99c99c991e3ef17d2ea00724610682795,"Revive Channel.closeFuture

- ChannelPipeline now rejects an unsafe ChannelFuture, so there's no
  need to hide/remove closeFuture."
ddd2f22fcc76ddb7ae13b9d64a6d57f61528da80,"Merge pull request #321 from veebs/WsSubprotocol

Fixed websocket bug where subprotocol not sent by client (master)"
3642879d9804126a4230175991df734a386e0788,Move up write spinning from SelectorEventLoop to AbstractChannel
6a0040a14ecd316a50832d1848c03d3b476eae59,Fix compilation errors
05f955ee10015234d1103a1bf96abc9fd6fa930a,Clean up echo example / Fix a bug where closeFuture is not notified
9f6cc0a0d28cd3ebd456c5cf3cff39a974979ccc,Fix checkstyle errors
18d1861243fe43d60843fd2e87ea16bc3c0fae32,Remove duplicate groupId
311f17f6ef7df7130120f090a4a2cc1856416c33,"Replace Bootstrap with ChannelBuilder and ServerChannelBuilder

- Added ChannelInitializer which is supposed to be used with the
  builders
- Echo examples use ChannelBuilder and ServerChannelBuilder now
- Replace ChannelFuture.rethrowIfFailed() with sync*()
- Bug fixes"
f00fadb9fde1b081dfe4336f9ee47ecc5fc0e4de,"Simplify the construction of multi-threaded selector event loop

- Hide InternalLogger from users"
128851dd091ed62bfa864b0b91cd0826cfcff3b3,Bump up the backlog value
d01d1d08434ce0a8e421243f67582a8928e12d67,"Rename (Server)ChannelBuilder to (Server)ChannelBootstrap

- It does not build a new Channel but just helps bootstrapping it.
- Added shutdown() method for simpler deinitialization
- ServerChannelBootstrap has shorter method names for the parent channel"
6eb540ca402496a022b8c169068904a9e2a6c19d,"Add more convenient methods to ChannelPipeline

.. to simplify pipeline construction as shown in the echo example"
e16c835780193bde31ca62fd491a4870a03f8d23,Simplify the echo client example
957c04e597ba47ce301a5aab98ed57be4a967f95,"Fix boundary check in DefaultChannelPipeline.addFirst(..)

- Thanks @normanmaurer"
dd2e36e5d9daee75680a52ecab1d39e38bde6b07,Remove unused or unmaintainable internal classes
894ececbb76a31327fed33bf2d8eda5aa43ba333,Convert DOS line ending to UNIX line ending
52a7d28cb59e3806fda322aecf7a85a6adaeb305,Make sure CompositeChanneBuffer does not throw a UnsupportedOperationException if discardReadBytes() discard the whole content of the buffer. See #325
ef384a7b2181a79fcc1e44401aab55f13cd69099,Add JBoss Marshalling Encoder/Decoder. See #324
92a688e5b2938b7251441335a657df36bb5e9eea,"Retrofit the codec framework with the new API (in progress)

- Replaced FrameDecoder and OneToOne(Encoder|Decoder) with:
  - (Stream|Message)To(String|Message)(Encoder|Decoder)
- Moved the classes in 'codec.frame' up to 'codec'
- Fixed some bugs found while running unit tests"
3669e31e14210462a9202175284b0513daf59eb8,Fix a compilation error in DefaultChannelPipeline
d3a3b329f3207b3523ebc82af2fc406f167100a5,Fix a compilation error
2c99fda7b57123a4df03c6fa6e1e1f7a76337285,Remove unnecessary field
1bf0dfe64a592f21eee7714fda6d091e7b8c5dbc,"Retrofit ReplayingDecoder with the new API

- Moved up to 'codec' from 'codec.replay'
- Test passes with Redis client codec"
5344dc242c8dfbfc93d71f8b39d2c2eb218f6ecb,"Finish porting the codec package to the new API

- Removed deprecated classes
- Changed type parameter of StreamToMessageDecoder and
  MessageToMessageDecoder for more flexibility
- Made all tests in the codec package pass"
dbd973d825c3f0c781fbffb82bb1ebe1ab5380be,"Introduce UniqueName, UniqueKey, and Signal

- UniqueKey removes the duplication between ChannelOption and
  AttributeKey
- UniqueName provides common name collision check for AttributeKey,
  ChannelOption, and Signal.
- Replaced ReplayError with Signal"
251a18160c2d473a1009f78b42aaf159d8d011ea,Move VoidEnum to util
a99f2589842ef2c010df2d304a084dd40c9c36d3,Make sure SslHandler also works if SslBufferPool use non heap ByteBuffers. See #329
d2ec45e57315a3146f1499d20bdfc724c4215422,Use the correct ChannelBufferFactory when creating new ChannelBuffers. See #335
88d60c15c7f44c924dc0afd88c6654086b4ad14c,Make all methods of SslBufferPool public so a subclass can be placed in another package. See #336
2802b231e532ccfb2b799a59da67baab7198d3ac,"Make all codecs throw a CodecException

- Added CodecException which is either EncoderException or
  DecoderException
- Made all decoder exceptions a subtype of DecoderException
- Replaced CodecEmbedderException with CodecException
- All abstract handlers wraps an exception with a CodecException"
5c3b432f600765a143bdb82aa35243c8d6e8d96f,Fix test failures due to recent changes with codec exceptions
ca12e41406db5e200d442b3187ac2c2afa320d8f,Fix a compiler warning
d4a26c3c52f11b92f2f321f909777b0ae21b8054,Add StreamToMessageDecoder.replace() (#332)
ddb839eaf99b45619bf95fe115f63c4d196e0129,Make ReplayingDecoder extend StreamToMessageDecoder
9d3eeb971988d7b93d186e6596803914cfac0f35,Fix compilation errors
923498de92804a7e41caf13db97475f5e8cbc5a1,Add support for ObjectSizeEstimator
0996bac7fffc2a4d0e68d05149b8af6ae2ed42f1,Add support for ObjectSizeEstimator: in order to allow special optimization if possible from user code
a1a60ec5b6d585e1503061f8435be27fd269d5db,Add support for ObjectSizeEstimator
7d4a276ab096d6bd892844a66f02c06218fd480d,Fix private class to static private class (dynamicity is not necessary there)
51debe12873fd2f08c8e7443d882219e2ef162b7,import fix
9c2262716fdcb6fdfee1893c496d76159441621d,Import fix
1afb209010d7db97f2bc76fdad44ff8ca569c755,import fix
ba8cfa5d3399f6a164d67ee62281768c8c6df477,"Merge pull request #338 from fredericBregier/master

Improvement: Allow ObjectSizeEstimator in traffic shaping"
e5da7b53ddea65d96683be7ea8b7e8590647ce92,"Add UnsupportedMessageTypeException

- Replaced some IllegalArgumentExceptions with
  UnsupportedMessageTypeException
- MessageToMessage(Encoder|Decoder) should continue polling the
  inbound buffer if encode() or decode() returns null
  - aggregating codec can do that"
bca791af4c5b55c1e0daf7847704039b12ff7e0a,Fix compile errors which were introduced by #338
a5fc2d82a5f1eddf6efd20219bd9bc9905fcb9c4,Same fix than other for correct import
e54662f7d0c31c4679ea0e06cc00464ca7978bfc,Same fix than other for correct import
3d49975a3cc87cd263d479b0e0b6281dcd51ae50,"Merge pull request #339 from fredericBregier/master

Fix compile errors which were introduced by #338"
ddb7d75c96806b0bac1fea3d8a17b8a9c982a18d,Make SslBufferPool an interface
7691d79de61e7b96a325bb1706544b186f97be31,"Merge pull request #342 from jpinner/ssl_buffer_pool_interface

Make SslBufferPool an interface"
ed538209e588e8ba7e94371a801067d73eb2ab74,Fix syntax. See #342
2320a5919f49c9e5705215b4273db291ea40d1ff,"Proposal for fix related to 1rst issue of #345
=> (getTimeToWait /10)*10
(see http://www.javamex.com/tutorials/threads/sleep_issues.shtml)"
bc540d5ee1b1c865bc442d08d3991a800180ca5c,"Proposal for fix related to 1rst issue of #345

=> in configure (newcheckInterval/10)*10
(see http://www.javamex.com/tutorials/threads/sleep_issues.shtml)"
3ca2a53e91b4a56f632f592ee266bc8119b1ebbd,Add a replace(..) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder. This also fix #332
5e48c50589bb63f354f393ffea76de498d1bbf15,"Merge pull request #346 from fredericBregier/master

Proposal to fix 1rst issue presented in #345"
b6abefb5b803c82c0fd85409f614fc45d10eaba9,Add a replace(..) method to FrameDecoder and also to ReplayDecoder as it now extend FrameDecoder. This also fix #332
3d715a4967c992d30b3261eafcb6597cf19c6966,Merge branch 'master' of github.com:netty/netty
7018b8453f0a910438dde28b327aa57b26e819fd,Cleanup
e846505ceb4bac5bc9472ed141ffe950418c29c2,Add combined codec classes and related utility method
af37ec4f23a54233d913f730761b779acf9ebff1,"Ported the HTTP snoop example to the new API

- Replaced pipeline factories with initializers
- Ported essential parts related with HTTP to the new API
- Replaced ChannelHandlerAdapter.combine() with CombinedChannelHandler
- Fixed a bug where ReplayingDecoder does not notify the next handler
- Fixed a bug where ReplayingDecoder calls wrong callDecode() method
- Added a destination buffer as an argument to AbstractChannel.doRead()
  for easier implementation
- Fixed a bug where NioSocketChannel did not try to increase the inbound
  buffer size (moved the logic to AbstractChannel)"
3a8c10cc5ab530e41e93a0ad0df13d6b21752239,Do not call expandReadBuffer too often
cab983244d85f91ed196a19c250fc63672086c0d,Tidy up AbstractChannel.read()
83f1b5fa35aa80852902e3bc623fb68fa97f6d3a,"Implement spinning in SelectorUtil.select()

- this seems to improve performance when the number of connections is
  very small"
baa33888593a131351798dd4de0f4f813adcdf1d,Make the default constructor of CombinedChannelHandler protected
54c97d07202d98eac734beacf885579973b515b8,"Same fix than in version 3.5 for Master branch (refer to issue #345)
Will be proposed once the one in 3.5 will be validated"
714e3d682eadfa2ad8ca2edc70e0076000ef038c,"Same fix than in version 3.5 for Master branch (refer to issue #345)
Will be proposed once the one in 3.5 will be validated"
3bd77e93f17439c00cd59f41eb7d310b0121b8a0,"Same fix than in version 3.5 for Master branch (refer to issue #345)
Will be proposed once the one in 3.5 will be validated"
792035cd3816536140463a6e683d084cafe3fcb8,"Same fix than in version 3.5 for Master branch (refer to issue #345)
Will be proposed once the one in 3.5 will be validated"
8846947081b37a53f884961c33b6f126a2cbaaa3,"Same fix than in version 3.5 for Master branch (refer to issue #345)
Will be proposed once the one in 3.5 will be validated"
c634539faa81f9f551ca5beaf15243b6c34c3e0c,Fix checkstyle
41c6aefdab40b5ee58c9974e432a8d3fbc780957,Fix checkstyle
327e4349259d5b14d3b5265e7c536bb22ac8a762,Fix checkstyle
ba4736f33b9c553d161b1e4e78d44a9eccd4e24d,"Merge pull request #350 from fredericBregier/master

Change Executor to Timer from Netty, in reference to Issue #345 in master branch"
10cd871df7993ab4a3e247cb248115e998aa2459,Release the resources of the BossWorkerPool. See #328
0a95ce81045d96c0936604bfe3141bc4cf79e532,Fix checkstyle
128309367cd0c295947eb27b830c43639b9eb705,Also handle the case of missing shared lib for sctp
bd4358b3add80a2d3e9085006c65c6f298b522e7,Make sure the test also work on ipv6 interfaces
ee4c1a55ebcc3ab4dd5a92dd809499f01aba05ca,Fix a compilation error
03f890a882c3cc7eb11e08b0b5004827945fbe0b,Only send event upstream once the Ssl handshake was completed successfull. See #358
71c1a2575de2abd8ae106df2705e5901da93f271,"Added messages to all IndexOutOfBoundsExceptions

I need to implement this to help myself finish more future pull requests which, so far, are plagued by these exceptions with no information available."
a6685df3e2b60c6757fabf811a5dafe4f8f8aed3,"Merge pull request #359 from Massive-Dynamics/out-of-bounds-details

Added messages to all IndexOutOfBoundsExceptions"
3a7ed4b75cda8c3a7deefe2b8737a52370baa931,Add workaround to let the sleep work correctly in windows too. See #356
69d5be4225085512aea5f9676d2f6ae105226c5c,SPDY: remove frame size limit in frame decoder
f60997686db58ab7623ddb15839d16169c59a702,SPDY: fix for mozilla firefox bug 754766
1a28d6119fb5d2e77caae8674540f62a6b9043e1,SPDY: add SPDY/3 support
c37496311cd2fe2bd2bfcf7d70c4d697fa2455b4,"Merge pull request #361 from jpinner/spdy_3_master

SPDY/3 Support"
7ecad7a8ac0badd515166b50029876332be735ff,Add ChannelInboundMessageHandlerAdapter
50b4894c36f92c431d0baea6aacd7ca335395421,Use ChannelInboundMessageHandlerAdapter
c883b61503c8c256abb74857716fba1dd70a128b,"Ported codec-http to the new API

- Added ChannelBufferHolders.catchAllBuffer()
- Relaxed UnsupportedMessageTypeException constructor signature
- EmbeddedChannel now uses the catchAllBuffer
- ChanelInboundMessageHandlerAdapter.messageReceive() throws Exception
- Added ChannelInboundStreamHandlerAdapter"
debaa6a72a44cbb02a091cc40c1802391197fc5c,Fix resource management
a2d57144b4d2bc25e089af73576b0fc466c9d67b,Fix compilation errors
21a3d3fe02d6d5de55a3c33aff7d8e0f2e0cef0e,Add more constructor to NioSocketChannel
a6d7105761a083230bb4d2aac7e58ca5fb07a196,"fix #360, add check for empty buffer; also add unit test for this scenario"
609caeba949003495cf051fc2095cb0b5e7b9d81,"Merge pull request #363 from sunng87/master

Fix #360, add check for empty string buffer"
326b88c43005f9b295f305b59d8ae43fc7f09410,A small optimization for the fix of #360
cd11786994a6863f1f6a52d29c059b49bfad7750,Fix typo in the comment
c6f3b5762e0dc40ab75c27a8f10c5d1412ed3d39,"Implement NIO datagram transport with the new API

- AbstractChannel now handles flushing a message buffer
- Cleaned up DatagramChannel interface
- Removed ProtocolFamily because a user can create an NIO
  DatagramChannel and specify it as a constructor parameter
- UniqueName and UniqueKey constructors became public so that
  I don't need to create a subclass every time."
c7c923cab30455eca7693a11e86eb05034903a83,"Ported the QOTM example to the new API

- Fixed bugs in the NIO datagram transports
  - DefaultNioDatagramChannelConfig did not initialize on Java 6"
4a3c54b0fa8c3122b1005452b2593b71360ed6f2,Add UDP_RECEIVE_PACKET_SIZE option for datagram transport
02144f70e108f6371376969780e8089901c945ca,Genericize ChannelInitializer
25599018f29377bf21db589209490e5efc4d9fec,Tiny bit of optimization in event loop
02cb7adf0355220dfb687e1d3c3f575ae8cfbc1e,"Reduce GC in ChannelBuffer bulk operations

- Pre-create an NIO ByteBuffer for reuse instead of creating a new one
  every time"
59f11ed64f641c22506bf4c328640d450dac728d,"Optimize AbstractChannel and related classes

- AbstractChannel.doRead() is split into two versions so that the
  implementation doesn't have to validate the buffer type.
- Optimized ChannelBufferHolder a little bit
- Reduced GC related with flush future notification
  - Added FlushCheckpoint and DefaultChannelFuture implements it
    opportunistically
-"
bc5e8b6be1c4aa2ffd74cc9b605acdf169c7f7d6,Do not create an iterator unnecessarily
b06a4bea6b723b2829d23191d3cd57cb445b3cad,Fix a compilation error
e2d69120bbb277371215e6b5e0f2fa014993ffbc,Ported OIO socket/datagram transport to the new API
778fbc36a9dd2b3512484b8d069ae6228227beab,Remove selector spinning optimization
3d490810b8adbadc371714a83b03052589e1f397,Hide internal class from users
2395bcd8055abfe10049f71104f5705f9834bfdc,"Process task queue before start to read

- Otherwise some tasks scheduled right after activation will be executed
  with 1 second delay."
01aa1647bb259f42d0e9e411318d331651e5e0ec,Reduce GC in OioDatagramChannel.doRead/doFlush
f60f918763473dc4ec4d01e56c0c0115e32c62d3,Fixed all SPDY echo tests / Handle closed old I/O channels correctly
61314ef51bd8313ad3371e15135b4aff42413f59,"Split AbstractChannel.doFlush() into two variants for simpler user impl

- Also renamed doRead() to doReadMessages() and doReadBytes()"
a1bdf671f16978ac1fbb9ed6e3a6ea98b4e520bd,"Simplified EventLoop implementation names

- Also
  - Fixed a test failure
  - Fixed compiler warnings related with ChannelInitializer type
    parameters"
5538de9a4220760d5d1b9ee58b897ef5b904d27d,Fixed a minor checkstyle warning
b95f264ba3894d1a1991fec8d8986f350bf7c61a,Removed unneccessary todos in IpFilterRukeTest and reformatted the file
d0d577a0c84099750880e73b22259376ddf0343e,deleted unneccessary sctp handlers
ff8f80a008e473d3626712a24e62de0ff6932511,Minor Java Doc parameter fix
e7902e5c9984b635e8d79d84116d11351253b224,Improved documentation in SCTP Transport classes
0592dba302cb4a5f208a0a17503a7c16339701ae,Updated readme.
18d30d9db347b82c3bfe479a92b10058347a5a1e,Improved documentation of SCTP Channel/ServerChannel Interfaces
6206d82b2c670aa58537c686ce9144ba94201cf6,"Split AbstractChannel into AbstractOioChannel and AbstractNioChannel

- Simpler OIO transport
- Suits better for other transports such as AIO, RXTX, IOStream
- Add ChannelBufferHolders.discardBuffer()"
f29b6ae29ab208f0f138350dac90424c9d4b4eb2,Fix performance issue in OioSocketChannel since previous refactoring
3b8de9f133c1163699cdb55b5b90ebc4da04bf56,Add LoggingHandler to ServerSocketChannel's pipeline
7327bb35222baf0a8c3b10644f2c144587988476,"Add SingleThreadEventLoop.runAllTasks()

- Removed duplicated processTaskQueue() in child event loops
- Simplified the cleanup of cancelled keys in NIO transport"
064b3dc9e560f599143410dc3e9c7419ebf3a388,"Split AbstractNioChannel into two subtypes

- AbstractNioMessageChannel and AbstractNioStreamChannel
- Better performance
- Replaced 'if' checks with polymorphism"
7b05f3417162caffee26aef59e005710bb8bac1c,"Split AbstractOioChannel into its subtypes

- AbstractOioMessageChannel and AbstractOioStreamChannel
- Replaced 'if' with polymorphism
- Better performance"
f4a19886d366607dd5080751aa678e3948abed0d,Reorder methods / Move buffer expansion logic in OIO
528b5c43280d3514748f3f53e55a088805e68e7b,"Removed the modules that are not part of 4.0.0.Alpha1

- Will add them back before Beta1 is out"
626c5ef9c9475c57231ee61354a3c3fc82aff87f,"Remove the classes that are not part of Netty 4.0.0.Alpha1

- Will add them back before Beta1"
a2698e65fb4bbe2ab0228848cdb3bd1ff232a2e4,Added more convenience methods to bootstraps
e48281471bcefc9fda036bf98cfdb5b3b8c223c7,"Limit future notification stack depth / Robost writeCounter management

- Also ported the discard example while testing this commit"
6d39c342b636362a2068e6644cc9451182cc03a9,Add FIXME
ef4ee498006384016717c30bce43116d7f65e9de,Merge branch 'master' into next-api
e00f303e4ff3e5201ee665ff0ec3e6034651b5d0,Fix compilation error caused by recent changes in AbstractChannel
81e8c4993119eb3c225ab7c4b55b1e2cace5cb08,"Fix bugs in ZlibDecoder / Port the factorial example

- Fixed IndexOutOfBoundsException in ZlibDecoder
- Fixed a bug where ZlibDecoder raises an exception when a connection
  is closed"
026715e8189f2bad22c3143eec220594bf18479d,"Refactor the pipeline API to support stacked codecs

- Previous API did not support the pipeline which contains multiple
  MessageToStreamEncoders because there was no way to find the closest
  outbound byte buffer.  Now you always get the correct buffer even if
  the handler that provides the buffer is placed distantly.
  For example:
  
    Channel -> MsgAEncoder -> MsgBEncoder -> MsgCEncoder
  
  Msg(A|B|C)Encoder will all have access to the channel's outbound
  byte buffer.  Previously, it was simply impossible.

- Improved ChannelBufferHolder.toString()"
b10cf29393d9ab4af8da3ee5d90ebe3eaaafc11c,Add isDecodable/isEncodable() to codecs to support stacked codecs
8237afff64509520865c08bf4f5fd130e06aed92,"Ported most examples

- Renamed ChannelBootstrap to Bootstrap
- Renamed ServerChannelBootstrap to ServerBootstrap
- Moved bootstrap classes to io.netty.bootstrap as before
- Moved unfoldAndAdd() to a separate utility class
- Fixed a bug in unfoldAndAdd() where it did not handle ChannelBuffer
  correctly"
a9948d681ee667dfa2e2b9252bd10fc899c08dae,"Throw NoSuchBufferException instead of returning null

- Exception in this case makes a user less confusing
- To reduce the overhead of filling the stack trace,
  NoSuchBufferException has a public pre-constructed instance.
  - This is necessary because codec framework sometimes need to support
    both type of outbound buffers.
- Fixed a bug where SpdyFrameEncoder did not handle ping messages
- Reduced memory copy in codec embedder (EmbeddedChannel)"
05770b138da1fe88dc4ae0cac624f9a30e44bf6f,CodecUtil should be final
f4c6bcafaf84c42ee1af45c84314c5b60cd299d5,"Keep channel's outbound buffer in AbstractChannel

- Replace firstOut() with newOutboundBuffer()"
78974e85c5dd7a4ca5964033db7c928631605544,"AbstractUnsafe.out() -> directOutbound()

- to avoid confusion between Channel.outbound()"
392623749eaadbbb4169103480971fac0b635784,Fix compilation errors
a53ecbf5f1e699c495c1610aaaeb1f037f9de940,"Implement the local transport

- Replace the old local example with localecho example
- Channel's outbound buffer is guaranteed to be created on construction
  time."
65e224f149207d382698680d35b844e3746cde9a,Safer shutdown
243f6581c6c238e26c413e0e22fe3264ffa330b8,Safer shutdown
078a502c5fcc907c1fdcfaa9f09660dd68477654,"Add shutdown hooks to SingleThreadEventLoop

- LocalChannel and LocalServerChannel uses it to close themselves on
  shutdown
- LocalEcho example does not call close() anymore because the channels
  are closed automatically on shutdown"
4154f4252094d7d5428e22d7b1987c883003f4cc,Less restriction in shutdown hook modification
c17e5b458a3e0ce1891c7b1b256d2ea875e7edce,Typo
9f9045c3b448144715b17508fec357c0710e5891,Add EventLoop implementation for the local transport
47fa2ef2e8c3ed78f1722241b971ab1f5aa1b2e7,Use LinkedHashSet instead of HashSet to preserve order of execution
cca35454d214611792067c89b78f7477aae3a323,Ensure channelInboundBufferUpdated is fired after channelActive
e5bcc74cd52ed3f277a4733d1e3e1a17cf4b7e84,Warn if the last inbound handler forwarded an exceptionCaught() event
e10d113678b25fe2b69182e512a31076773e99a2,Do not report Android as Java 7
b87ce6a3cf558e5dc8fec5bea1a52a7509a8d20f,Update README
24eb85cdf5e56d8b55f68ecec1c553f38adee61f,Fix indentation
922cec1f9b1ce300e5e8ebc089f6e8f89bb25d26,"Add an option to tell a user if there was a missing response (#256)

- Contributed by @normanmaurer"
6dee9f7b0c10ef1e48abe5751091479f2018ddf3,"Use a logger in SocketAddresses

- Contributed by @CruzBishop"
65c526c1c8d3791bbec5bba4430644bc26e80a8c,"Use a logger in ZStream

- Contributed by @CruzBishop"
54047c69cfea531384fff8ca75f390b321ccda0b,"Remove IpSubnet.main()

- Should be run as a test case"
f428853b3541d0bb7391ae5d2efa528a110e7d4d,"Remove IpV4Subnet.main()

- Should run as a test case"
6288e02a9a04c62a46f15bb4e202a66979c8d2f2,"System.out.println -> InternalLogger

- Remove unnecessary output, too"
e3431db547e144e1f786f232ce2784dc3f4ad4a5,Use logger instead of System.err
8eda2280b3555bf6ef81c0c7090bbd5270e51094,"Add test for HttpClientCodec missing response handling (#256, #259)

- Contributed by @normanmaurer"
b5d715343a24be61be13a1546908ff9dbd3a743c,"Fail if DynamicChannelBuffer attempts to exceed the max capacity (#258)

- Contributed by @normanmaurer"
5e896cf0b35c8ff92c71b65210dea7f0b2221cfc,"Add a note that explain the behavior of CookieEncoder (#94)

- Contributed by @normanmaurer"
7e94632d412142606d7c62a47995e65b9e049bcd,"Add port to 'Origin' if the port is non default (80/443) (#262)

- Contributed by @normanmaurer"
4ff98c359cc377bb3640baeae96b7123291e34fa,Add PrematureChannelClosureException
367895f660fd2267977b4a57e472064647f4379f,Add port to Origin if the port is non default (80/443). (#262)
c7004ed1427466e9f3e23f74697f4b8556e43555,"Use Sec-WebSocket-Origin instead of Origin (#264)

- Contributed by @normanmaurer"
42abb6df3ae4f7763b61c4d749995d4d582f13b2,"QueueFactory cleanup

- Really attempt to create a queue to determine LTQ can be initialized
  in runtime, and cache the result
- Remove unnecessary Class<T> parameter in createQueue()
- Remove unused createQueue(Collection)"
1d7067719b5bc0318b58bdfed885057aface9d83,"Allow to disable the use of sun.misc.Unsafe (#272)

- Contributed by @normanmaurer
- Added io.netty.noUnsafe property"
ec43aa121f1642c709310411a410460ba0f6fc78,Case-insensitive matching for Upgrade and Connection header (#278)
67ee22e23af76e141869b713ef705a88500a02c8,"Add max frame length for web socket to limit chance of DOS attack (#283)

- Contributed by @veebs"
92f010d6884d6c695c151e995b5f7708e04972f2,Use int instead of long for maxFramePayloadLength
dba9a6d40826668f0a009ad9dd2ad8493a401f6f,"Close channel when needed / Call force() only when necessary

- Contribution by @fredericBregier"
e8bc276ddd9b5e6367f8c866095c8caa003fa56f,"Fix in addContent when switching from MemoryAttribute if it is done when
last buffer added, in order to not close immediately the underlying
file before adding the last buffer.

- Contribution by @fredericBregier"
759d0633a4c6ea2262833e43d37adf0a62ab8a84,Add the SeekAheadOptimize class to enable faster seek of bytes values in HttpPostRequestDecoder
5d2bf43b59e274dd984613d33ccef3c722104239,Optimize Buffer access while decoding by going through backend array when possible (divide by almost 2 the time spent in decoding)
ac39f39f3654f96bbeef617350ce11bbdb3e6695,Update codec-http/src/main/java/io/netty/handler/codec/http/HttpPostRequestDecoder.java
b8ab8828c03a285da17bbd051e668fc1b1334ff9,Add Exception to name of the Exception ;-)
f799c9f21554130b750dc8c277ab061b69d732dd,Add Exception to the exception class name
d6cedb008ba8d55ce7d132f03d3dac587db39c54,Reduce the cost of throwing a SeekAheadNoBackArrayException
a91e72403c08be6fb3524ace01cba1ef5087ecac,Very small fix (readUnsigned while in optimized version it was signed but should be unsigned)
a73e6ea5815fc3d6d4c76ec8598b8698940d4247,typo fix ! Sorry
d1e63281021033714e742ba0bbce3d563ee1264c,Allow to register ChannelFutureListener's that get notified once the inbound of the SSLEngine is closed. See #137
d308fa8fe17d69c3bdb88bea8bf2a65b54a0758a,Fail all pending writes on channelClosed(..). See #305
c0bb070876834643d0ff9b0089fba65aa25c474e,Fail all queued writes if the ChunkedWriteHandler is removed from the ChannelPipeline. See #304
c705379adb0a0facef32fb8f95cde892207cadbb,Notify ChannelFuture's of queued writes if the SslHandler gets remove d from the ChannelPipeline. See #306
f8f703e67948919a61157bbdb94d2a9842893abb,Add @Override annotations
280c65a28e0b3d322fe8b9dc59763eca2e50c1df,"Refactor ChunkedWriteHandler to remove synchronization which can have bad side effects like deadlocks. See #297 and #301

Conflicts:

	handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java"
31e643b32d486f5ccd3019f04c40cb5f989f7f74,"Refactor ChunkedWriteHandler to remove synchronization which can have bad side effects like deadlocks. See #297 and #301

Conflicts:

	handler/src/main/java/io/netty/handler/stream/ChunkedWriteHandler.java"
7b434e225f1baae5b6f7b36a2b2b276bf19c6d5d,Make sure we fire the event from the io-thread. See #306
57d3d0cbb5c7c8ebb2d0a384a0f8a78d4b4ecee7,Update ChunkedWriteHandler to the latest revision at branch 3
117626e03490ee68e79435e04de9a41ee67eb0f2,Add ChunkedWriteHandlerTest from branch 3
67ec4429ccc34c3933f2b3d5881e9ddda2c531de,Implement NIO.2 multicast options
4fc089829dd0a7ae80617928c8fec506e8e52505,"Fixed bug where subprotocol not sent by client

Conflicts:

	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker.java
	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08.java
	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13.java
	codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker.java"
a5a76131e60cf8ecc04d8af6b85d628fded6ef6c,Fix checkstyle errors
a8d63a4ad752582535a835ea10eb4e587f55cff7,Make sure CompositeChanneBuffer does not throw a UnsupportedOperationException if discardReadBytes() discard the whole content of the buffer. See #325
14b2a0db99b02c42ff747367fd2b515bfcfbd593,Add JBoss Marshalling Encoder/Decoder. See #324
ed357181c01716181b1825901f9fe8b9d95d72f4,"Make sure SslHandler also works if SslBufferPool use non heap ByteBuffers. See #329

Conflicts:

	handler/src/main/java/io/netty/handler/ssl/SslHandler.java"
1226cdacfb076b38d5fdf206b483d8864c1a461a,"Use the correct ChannelBufferFactory when creating new ChannelBuffers. See #335

Conflicts:

	handler/src/main/java/io/netty/handler/ssl/SslHandler.java"
7007e2fbaf97d90cd4d70bf61967e357a243e4be,Make all methods of SslBufferPool public so a subclass can be placed in another package. See #336
2f71c001b4e26b38c4637f9fabbf3ae9bb8020ff,Make SslBufferPool an interface
e2a7462d703ed73f47d2b01b0956f949d47294fd,Fix syntax. See #342
743596aaeac455f009d4b0c6805ea8322c785b0d,Fix a bug where first websocket frame is discarded (#332)
e2bdc2234d3c38574416003cc35c001104d0cf33,Cleanup
5852d82ad6d756da9ef53ea570b4afe4e153df63,"Only send event upstream once the Ssl handshake was completed successfull. See #358

Conflicts:

	handler/src/main/java/io/netty/handler/ssl/SslHandler.java"
f6f246cac0eb5e8163dc0f9b6b8676b25704b4dc,"Added messages to all IndexOutOfBoundsExceptions

I need to implement this to help myself finish more future pull requests which, so far, are plagued by these exceptions with no information available."
59b5c3a328581135fd17b574cec62012ad30c098,"Add workaround to let the sleep work correctly in windows too. See #356

Conflicts:

	common/src/main/java/io/netty/util/HashedWheelTimer.java
	common/src/main/java/io/netty/util/internal/DetectionUtil.java"
f2df20ddff2264d660520bd8e852d0e12520177e,"fix #360, add check for empty buffer; also add unit test for this scenario"
7fb64e2046543895cbec1d3b67ddfb2b1f6517a3,A small optimization for the fix of #360
d7a198a60f256620c395b3bd23726d387335b5b5,Zap marshalling and spdy codec to forwardport again
34f697a06c206d9c55109af56a9fd9b04f4412e6,Forward-port the JBoss Marshalling codec
53f16ce003df832177eed6e06f399e4f7e1760c7,Add more convenience methods to Bootstrap and ServerBootstrap
131eef2c5126be68030701cd9416ccbc14a9a2e6,Forward-porting SPDY codec
32c982b478229b888df03175ae6a48fb640a4511,Fix NPE in OioChildEventLoop
7ac89ace4f51754906cbe37c29b1a871918e80bf,Finished forward-porting SPDY codec
c32df371abcbee7ebbb77e6bf6a429d3f3f4134b,Fix compilation errors
a494f201fcc790262192316f9f9d2305e4fa9052,"Call setHandshakeComplete() before the handler replacement (#332)

- Contributed by @normanmaurer"
197f31c90e82d6ebb0afef5e1dbf0aa984b20098,Test all supported SPDY session management
665777e6f990545dbf6cbcc807bbe1f09cb98c53,Add InternetProtocolFamily and use it with NioDatagramChannel
2a63acef4de7f3b832356f2ee7a3d3f74d460e0d,"More convenient inbound stream handler / Smarter inbound buffer cleanup

- Added a new convenience method to ChannelInboundstreamHandlerAdapter 
- EchoServerHandler uses the new method
- DefaultChannelPipeline calls inboundByteBuffer.discardReadBytes()
  when it is sure there's no memory copy involved"
3584da2dad941257d0608cf12e80e285fb0b8a99,Use ChannelInboundStreamHandlerAdapter in EchoClientHandler
633fada6ec37f8e8062c23ad8a632e018208687b,Take advantage of the new method in ChannelInboundStreamHandlerAdapter
0fd824c3bb2382df4ab9495810bab20150db3960,Fix UnsupportedOperationException
49bda34a5d513797a66ae1cd94d38fba2249f080,"Fix a bug where ChannelBufferHolder.isEmpty() returns a wrong value

.. when it has a byte buffer"
429535e6c80c5fa8af954935db6bff0d56914644,"More primitive wrapper methods (#167)

- ChannelBuffers.wrap(Float|Double)(...)
- Handle the case where there is only one value."
c8fa42beaf29fe0b65a8fbb8a031f9db46e14c10,"Rename wrapPrimitive() to copyPrimitive() / Add tests / Tidy up (#167)

- Add ChannelBuffers.copyShort(short...)"
0cd766df3087ed95b11230314a0e8a5162b26d9b,"Move HTTP multipart classes to its own package / Clean-up

- Move CaseIgnoringComparable to netty-common
- Add HttpConstants"
734d452be2ab8cc057c73f565e4641dbbb04653d,Apply missing changes in the branch '3'
77274ae743d427d61545ea1d71d0c53afb240891,Automated code clean-up
7ddc93bed87f6b1efb062df480566ff590a8b34e,"Ported IdleStateHandler / Forward-ported the UptimeClient example

- Add ChannelHandlerContext.eventLoop() for convenience
- Bootstrap and ServerBootstrap handles channel initialization failure
  better
- More strict checks for missing @Sharable annotation
  - A handler without @Sharable annotation cannot be added more than
    once now."
5f24f176bb4a6c2ef2ecb1ac1b7f0584b9d406fc,Port ReadTimeoutHandler
2aa466640e88b2b8b680f5d941e7569441331d65,"Ported Read/WriteTimeoutHandler with simplification

- The default behavior is now to close the channel on timeout.  A user
  can override this behavior, but I would just use IdleStateHandler or
  use eventLoop's timer facility directly for finer control."
9bb5b34887c015ea8e8f4e4a4f92a838a22e41d6,"Remove BufferedWriteHandler

- All writes in Netty 4 are buffered by default and a user can call
  flush() to flush it."
468918227a9602e70e2d3b66c2b53f212652b272,"Remove unnecessary parameter in AttributeKey and ChannelOption

- Removed UniqueKey which does nothing
- The valueType parameter was not needed at all because we do not need
  type information in runtime at all."
7be188f8c0ec666b10f04c325a292dcf064fc3e8,Ported BlockingReadHandler
d626561b594e6abc1348deb5e5b5e6655624ec43,Define a dedicated exception for performing blocking ops in event loop
f2eddda5a49fe8fa28ebf65c9121a95c292147d3,"Call discardReadBytes() on outbound byte buffers when possible

- Also fixed a test failure in codec-http"
5243d3d0f0e09977397478fc6e9551661e05e4cb,Add @Sharable annotation to ChannelInitializer
ab5043b3c7f04b3ef9744d59e80fcb04b34173d9,Fixed LocalAddressTest
754cd9984335fd2691ef7351b8833d1eac1b7918,Port ChunkedWriteHandler
141a05c8316f68bff6aa7e2b0bbf71443acf7408,"Strict thread model / Allow assign an executor to a handler

- Add EventExecutor and make EventLoop extend it
- Add SingleThreadEventExecutor and MultithreadEventExecutor
- Add EventExecutor's default implementation
- Fixed an API design problem where there is no way to get non-bypass
  buffer of desired type"
e2a617b07bf5c8f932554cf4e9597532fac66a39,Fix a bug where DetectionUtil.hasUnsafe() returns a wrong value
444038649401aa4200bc988cbd5d8da38a11aa41,Little bit of optimization
61e169e53ad7cd11ef1e041d9f9c2d7b9a1129da,"Remove EventExecutor.parent(), which is of no use"
04cf1c8199827edfee08c450b8c0ccbefab9e995,"Use custom thread factory by default to better recognize the threads

... from their names"
720f62d9830d3dbf296cc94d4c1b8bfceedb4025,Fix a compilation error
14cf227c46afcd8015abcfc4e2b37617a7028e3d,Fix a test failure
14e68aca57d39a8185e79378c400aefa65a44306,Fix a Javadoc error
cc4f705029d1ec319d089c35288fe36cbbea5080,"Replace ChannelBuffer.toByteBuffer() with hasNioBuffer() and nioBuffer()

... just like we do with byte arrays.  toByteBuffer() and
toByteBuffers() had an indeterministic behavior and thus it could not
tell when the returned NIO buffer is shared or not.  nioBuffer() always
returns a view buffer of the Netty buffer.  The only case where
hasNioBuffer() returns false and nioBuffer() fails is the
CompositeChannelBuffer, which is not very commonly used and *slow*."
45f19d02ff9a9e2c72e4d95e38c5d7f73960fe57,"Remove the codecs and handlers that can't make it on time for 4.0.0.A1

- Removed ones are: IP filer and HTTP multipart codec
  - Needs closer code review and polishing
  - Sorry. I'll add them back in the next alpha releases
  - SSL handler and ChunkedWriteHandler also need more work, but
    I really want to make them part of the first alpha because they
    are used pretty often by users."
01a5bd41f0209289e4117c538248bda7c0bc9aae,"Add Channel.type() which tells if stream-oriented or message-oriented

- DefaultChannelPipeline uses this information to reject invalid buffer
  access in inbound(Message|Byte)Buffer.  Otherwise, a user can access
  a message buffer when the channel is stream-oriented.
- Because ChannelType cannot be both STREAM and MESSAGE, catch-all
  buffer has been removed to avoid confusion and unexpected behavior
  (it's already causing headache.)
- As a result, codec embedder needs rework."
19dcb8172704f2756631b558c530dabc78c7dcb9,Add comments for easier understanding
f34fc73e89e88da32c36786c8634afa9dc090207,Some changes to the examples to show the usage of @Sharable
e8a74c8ad07bbf497026a6b8bde532cd61f79f17,"Fixing #378, when path or domain are null in both this and that, equals and compareTo return false even when the cookies are equal."
26307cbc3e1ce776eb2f3ccd40ca216f7edcdbc6,"Merge pull request #379 from jroper/patch-1

Fixing #378, bug in DefaultCookie equals and compareTo"
609674bda2cd6083179b70c1fe5cb25545396890,"Fix codec embedder

- AbstractCodecEmbedded analyzes the list of the specified headers
  and inserts proper conversion handlers"
cc4c98d7baad8d72df1d8f534e85cfd249ffb67b,"Fix #378 again

- @jroper's fix did not work, so I just fixed it again."
e241b3d6a246bc3dcc38b8fe5b4681cb19b12251,Move tests to the appropriate packages / Remove unnecessary tests
3b2c25e8ed8ed54f934faf872ca69aa6a5a1d6a9,"Rename (Server)Bootstrap.(child)initializer to (child)handler

- The handler you specify with initializer() is actually simply added
  to the pipeline and that's all.  It's ChannelInitializer which does
  additional work.  For example, a user can specify just a single
  handler with initializer() and it will still work.  This is especially
  common for Bootstrap, so I renamed initializer to handler, which makes
  more sense."
955c89fcf1ed9b0a989df6fcecf947517b1dbeb3,"Add SocketEchoTest that will simplify a lot of socket testing

- SocketTestCombination generates all possible test combinations of
  socket transports.
- SocketEchoTest iterates over the combinations and runs all tests
  using reflection."
7b8024373d933bfcf3cafa31dccef020c1cb1f8e,Remove unnecessary test cases thanks to AbstractSocketTest
7f96221fe9c1fec64b568b42bc4a05bb1434732b,Fix SocketStringEchoTest
49ef5672bec458c94e945c35644b93326c02a012,Better naming / Port socket object echo test
c6600b3bfd22a07129b4c3f594011cd057b96750,"codec module is only used by tests

Thanks @normanmaurer"
e6ceb91a85011585118236b151f86460f3740edb,Add AbstractDatagramTest / Port unicast test / Ignore 'Socket closed'
ada61d4985571f5406ea6158b02755d51392ebff,Ported multicast test / Fixed bugs in NioDatagramChannelConfig
b47b54df37fcc73218639c66992376f49134eff1,"Get loopback interface more accurately

- Previous code returned wlan0 on my machine."
9abc88583c392f890e5f14d7dfec2e96dc285c94,"Fix DatagramMulticastTest failure

- Also:
  - Unwrap InvocationTargetException"
a94916da666de2e214b15949792194e56e37d239,Remove unnecessary test cases
3e0cbf0caa69df9960a013afc1e7776373aff9ea,"Fix HttpClientCodecTest.testFailsOnMissingResponse()

- AbstractCodecEmbedder does not throw an exception immediately anymore.
  It stores the caught exceptions in the product queue and throws them
  on pool() or peek()."
f991a8c7d4475690da97a8d796c24e883acbfa98,"Fix a bug where DefaultChannelPipeline.write() doesn't find the buffer

- Also fixed failures in SpdySessionHandlerTest"
13d7ee1b2f793d4364da23bc87fb7730fb6eb0a4,"Optimized DefaultChannelPipeline.write(...)

- Also replaced unnecessary function calls with field accesses"
bbed0602c1d9c245c6af59de68cc7838f4c97eb5,Use NoSuchBufferException instead of IllegalArgumentException
d48973b0ff7f9b0b1ca70c115cb4c14d33636d84,Add ChannelHandlerContext.hasNext(In|Out)bound(Byte|Message)Buffer
361cb417e01d1242eb7b5717ae95dd99a72b5c49,"Move SPDY echo tests to testsuite to use AbstractSocketTest

- Moved MIN_VERSION and MAX_VERSION to SpdyConstants to allow public
  access
- Removed the tests that are not necessary anymore."
234c4c70db977684c8a1beeb34100a54f0d31c70,"Ensure LocalChannel fire channelActive after peers's channelRegistered

- Also:
  - Made the test case more robust
  - Added a simple concurrent buffer modification test (needs more work)"
1cd3156ebaa753644105ba895121389c064eae8c,Make test case more robust
4d8e2198fa8f0e0036396ad8de8403f551b79a03,Fix a bug where LocalServerChannel's localAddress is unregistered
f6e14b636f537b03f751bd7c6572b0130e45045a,Improve concurrent message buffer access test to reproduce known issue
f3734e1eb9c5fb1d05448ca135e5a8d7c9d3c445,"Simplified DefaultChannelPipeline by making its list head final

- Previously, head was a volatile field which is null at the beginning.
  While iterating over the pipeline, if the loop hits null, it called
  Channel.Unsafe explicitly.
- Instead, I created an outbound handler that redirects all requests
  to the unsafe and made it a final field of the pipeline.
- As a result, DefaultChannelPipeline code became much simpler."
1e7c65c12eb02f3f6e4e45ee22e77ebc16b37df4,Fix a compilation error
bde9b6aa2a10d3d6d978f92e0084608ca58f3192,Remove the OIO-OIO test cases
c1afe3d8c39badbd51fda030a5c17aa9b62cac7d,"Exchanging messages between two handlers is now thread safe

- (not byte buffers yet)"
0aa99606d912952bdc0c40ec8869470cccfec143,"Fix a race where 2 handlers in different threads access the same buffer

- DefaultChannelPipeline detects such cases and creates an object called
  'bridge' that works as a man-in-the-middle to deal with a race
  condition
- Slight performance drop is observed but still faster than v3. 
  Couldn't find much from a profiler yet."
1ed87601b857370080739fc068bb039a3ab9b9be,Add a testcase to prove that we have no bug in ChunkedWriteHandler when notify futures
c8c577efc5c3bdd73a18f32f11434514411eccb0,Remove an unused field
1a9c0fd5697214421700a7c894eb787fb866e72d,Make use of the existance of bridge references to find a buffer
aac5586428ee9935ea790d2e77426e0bcade4c86,Fix NPE in test
c31fbc67c236858943d362a12328c8b23c5f92a8,Let DefaultChannelPipeline call lifecycle methods of ChannelHandler with respect to the new ThreadModel
0e74b089c2f0cd3e7a72eb3fe3794e180e232ce7,Merge branch 'master' of github.com:netty/netty
ecea558e0378c780c0e7a8a92ee0650ece6cddd0,Add missing synchronized
6b637ab22ffc1bc7976a4582303af4d446e12310,"No need for a custom Runnable implementation, just use EventExecutor.submit(..).get(). Thanks @trusting for review"
b322e98712611253beeb509e218eb6850d42a23a,Remove unnecessary parameters and fields / Clean-up
b9fc67c9b80a716e02d0a22f07cd15103ac96372,Get the executor of the context earlier if possible.
4630905b92b1cfbf2ce414ba1c9e802cdf4b9e63,Do not wrap exceptions if possible
36dbbc4867ef22d94455b047476db1957ae7e6a5,Fix a test failure
1eced1e9e3f92e31c85a60caae879fdcb68f8386,Update license headers
c2e65016fdbd8f5bd8a1b7ed95fa4436b928a4f9,Fixed some checkstyle errors
4eb42125a7e007a1359e2b4de2076bc890d52dc0,Make sure we can't deadlock even if the ChannelPipeline modification is executed by the EventExecutor
caa35c9772f0e20583c99a291611c2b67421dd92,Rethrow the Throwable which accoured while execution the modification in the EventExecutor
12069d3bf4512db9a87eb10c7bfe0349fbb1c240,Eliminate most of the synchonization stuff in ChunkedWriteHandler as its not needed anymore with the new thread-model
35ba150db0c8486417f6cd4c757a03293a43677c,Fix BlockingReadHandler
06e754eb810c9d3b7815887980d99237a9e7d176,"Improve HTTP message streaming in decoder, in Master same as #380 submitted fix"
c2e3d305b4b9df36d1412d85a62dd08b17b5eaa1,"Merge pull request #381 from fredericBregier/master

Improve HTTP message streaming in decoder same as #380"
2aea5291bd0b8df30442105bacf77f5ba41a3500,Port SslHandler to the new API. Everything except of starttls works
fd7767ccda80823c077cdc3701166b319d0bd078,Fix example
f759d3053852c8bd349896e71036f3c4d65836f3,Fix starttls support. Now SslHandler should be fully functional again
a56ea06e58c4d152a3f578311ec98d14fbb3cabc,Only parse packet length once per packet. See #382
a4b2d7026455d31a54a1b1bb249d4db18d0efe08,Remove some more synchronization stuff which is not needed anymore
843a94b989818df5e465b82b2c73eed914d47f8b,"Fix compilation errors (#384)

- ECJ worked fine with the old code, but the official compiler does not"
a9cc75dd3e5a639a8ec5b05dbb03002017b0821d,"Port SSL echo test

- Remove britspaces"
4831eb49da62df72335a337916eff789ac74c0ab,Fix a test failure in LocalChannelRegistryTest
b1a156d3f2c86c78f64da0def78727b0952018da,Fix a build failure due to a dependency problem / Fix checkstyle errors
3def2e65989b33c50b2fa6fe2014289e3374341b,Fix more checkstyle errors
5e93d206ffeb637f9b4885643860ff63a8412dc6,"Overhaul - Split ChannelHandler & Merge ChannelHandlerContext

- Extracted some handler methods from ChannelInboundHandler into
  ChannelStateHandler
- Extracted some handler methods from ChannelOutboundHandler into
  ChannelOperationHandler
- Moved exceptionCaught and userEventTriggered are now in
  ChannelHandler
  
- Channel(Inbound|Outbound)HandlerContext is merged into
  ChannelHandlerContext
- ChannelHandlerContext adds direct access methods for inboud and
  outbound buffers
  - The use of ChannelBufferHolder is minimal now.
    - Before: inbound().byteBuffer()
    - After: inboundByteBuffer()
    - Simpler and better performance
    
- Bypass buffer types were removed because it just does not work at all
  with the thread model.
  - All handlers that uses a bypass buffer are broken.  Will fix soon.

- CombinedHandlerAdapter does not make sense anymore either because
  there are four handler interfaces to consider and often the two
  handlers will implement the same handler interface such as
  ChannelStateHandler.  Thinking of better ways to provide this feature"
ea0c9cfe79e07a5e11b30e8d5a8734ee98957b62,"Post-overhaul fixes / Split LoggingHandler into three

- LoggingHandler now only logs state and operations
- StreamLoggingHandler and MessageLoggingHandler log the buffer content
- Added ChannelOperationHandlerAdapter
  - Used by WriteTimeoutHandler"
6b819fb993f382381ab11fb2768ce405332e08ce,"Fix a NPE in DefaultChannelPipeline.write(...)

- Also re-enabled logging handler in the echo example"
09570db0915e83a92679e0648b48d86634b14ee4,Fixed a bug where ChannelInitializer can trigger the same event twice
aab71ccd8adf2363a0c51765386d37dc34593d8b,"Remove Channel(Inbound|Outbound)HandlerAdapter which does nothing

- Thanks to the recent refactoring, Channel(Inbound|Outbound)Handler-
  Adapter ended up having empty body.  No need to keep."
8701e24b9a8e1e6a27dedab2df1e161982df9c24,"Add back Channel(Inbound|Outbound)(Message|Stream)HandlerAdapter

- they are useful when creating an anonymous class
- Also added back CombinedChannelHandler with extra constraints"
7bc10f2eba4a53c03ee85ddbf41369b9ffbe4405,"Replace codec embedder with EmbeddedChannel which can test any handlers

- Added EventExecutor.inEventLoop(Thread) and replaced executor identity
  comparison in DefaultChannelPipeline with it - more elegant IMO
- Removed the test classes that needs rewrite or is of no use"
3442ff90e82bfa8140d8eb03ad6721ee2bf81142,Ported all tests in netty-codec to the new embedder
994038975adce859d6265babf2c5117f6fe14b31,"Port HttpContentEncoder/Decoder to use EmbeddedStreamChannel / Cleanup

- Removed unused constructor parameter in AbstractChannel
- Re-enabled GZIP encoding in HTTP snoop example"
10f7a319088d62d6b883ea8faf149b842de7b0bf,"Fixed SpdySessionHandlerTest / Fixed NPE in EmbeddedChannel

- Some tests like SpdySessionHandlerTest accesses outbound buffer
  even before the outbound buffer is initialized by
  AbstractEmbeddedChannel's subclasses, leading to NPE at <init>.
  To fix this problem, subclasses now pass the outbound buffer as
  a constructor parameter to AbstractEmbeddedChannel."
4a23c2a6eb5004d21dc5e3f09a32e66ade528c92,Fix checkstyle errors
50fafdc3d32a67817050f011a39dd3e1bfbaac40,"Rewrite SslHandler / Reduce the chance of OIO-OIO dead lock

- SslHandler always begins handshake unless startTls is true
  - Removed issueHandshake property
  - If a user wants to start handshake later, he/she has to add 
    SslHandler later.
- Removed enableRenegotiation property
  - JDK upgrade fixes the security vulnerability - no need to complicate
    our code
- Some property name changes
  - getSSLEngineInboundCloseFuture() -> sslCloseFuture() 
- Updated securechat example
- Added timeout for handshake and close_notify for better security
  - However, it's currently hard-coded.  Will make it a property later."
92cbe6f98041ce435d91d692510eb6b934a97ee0,"Support long Expires dates and commas in cookie values (#96)

- Contribution by @valodzka"
748de5ea8394359a2cfc2f925a530411ea3c0f23,Fix a compilation error
8970ee751cdff6c7dcdb116cc634431a0fe8bcb0,"Fix a weird compilation error in DefaultChannelPipeline

probably a compiler bug - working around"
493e77a5a7c5baac86790b718947580b262ca8fa,Remove trailing whitespace
353357fbd5cb4d49a5cd36ce61b1459dbb647972,Moved AsyncPipelineModification to a new file
e1a006cac4880226d21c9046a547e229a33a42c1,Update to the latest checkstyle rules
468a3228a429e77842a13f8c18f38758b51c9fbe,Fit every line into 120 columns
7c20426572a2a782acd43cd86a76c3af92112f40,Do not use unreleased checkstyle rules
a507ea97ef42938f62083996abc8f5477a4cac56,"Move some logic from DefaultChannelPipeline to DefaultChannelHandlerContext

- Using the fact that head is always non-null, we can remove some code
  in DefaultChannelPipeline and move some to
  DefaultChannelHandlerContext"
86cf144b8af27cd0fcc3479ae95db8fca383a87a,Update the checkstyle rules
5661bff0624f643f25024eae3c4781b3e7bc1646,Rename SocketAddresses to NetworkConstants
24e1f936a8984fb15a7fa6808a3802585f622578,"ChannelType -> ChannelBufferType / Optimize DefaultChannelPipeline

- Channel.type() -> bufferType()
- Use simpler bit mask operation for pipeline traversal"
e376888d486bf9111ada3895ea5221cf4f2b8f2b,"Replace 'Stream' with 'Byte'

- In computing, 'stream' means both byte stream and message stream,
  which is confusing.
- Also, we were already mixing stream and byte in some places and
  it's better use the terms consistently.
  (e.g. inboundByteBuffer & inbound stream)"
b6d5593e6aa5eea014569bdc800fb93635c53b3a,Do not wrap IOException with IOException
87f52aa60453bbe8356df130374ae4a0f4cca6b1,"Ensure that a user implements flush() or inboundBufferUpdated()

- Also prohibited a user from overriding
  ChannelInbound(Byte|Message)HandlerAdapter.  If a user wants to do
  that, he or she should extend ChannelInboundHandlerAdapter instead."
5164d91255a5cd68bcd1fade07e6ef4fdb3c7646,"Rename ChannelBuffer to ByteBuf as discussed before

- ChannelBuffer gives a perception that it's a buffer of a
  channel, but channel's buffer is now a byte buffer or a message
  buffer.  Therefore letting it be as is is going to be confusing."
a849d1187761b720253bb5ea99cac01cba7ed8ea,"ChannelBuffers -> ByteBufs / Add MessageBuf & ChannelBuf

- Add MessageBuf which replaces java.util.Queue
- Add ChannelBuf which is common type of ByteBuf and ChannelBuf
- ChannelBuffers was renamed to ByteBufs
- Add MessageBufs
- All these changes are going to replace ChannelBufferHolder."
574d84e98ed8b1c73cbe8566ebacc74016394db2,"Remove ChannelBufferHolder / Add more handler interfaces for type safety

- ChannelInboundHandler and ChannelOutboundHandler does not have a type
  parameter anymore.  
- User should implement ChannelInboundMessageHandler or
  ChannelOutboundMessageHandler."
12898a2ef4ba0fafe0f5d288865da6d2ad4f6761,Modify ChunkedInput to not return a chunk. It now read the chunk and directly transfer it. This helps to safe a copy on most cases
ad4f05f5d6338d6b47216abca16940595223f2e5,Add missing license headers
ed47feeed81819562bedb707fbd44e67e254d886,Fix checkstyle
9dce123938dfd8d91b406379a37c72f39e4940f3,Use MessageBuf instead of Queue wherever possible in channel API
89444ef4ec64456434663a4140e8c611a9be19cb,"Fix a bug where ChunkedWriteHandler stalls

- Other encoders in the pipeline were swallowing the flush request.
- Do not allocate a new buffer unnecessarily in ChunkedNioFile"
7d36f936c846126a9c20253e655f4bc02447700e,Fix failing tests
f3bbb7291e84c5951efcf9b96c65b695b47c7a7e,Remove a bad assertion
632542e0cd829ba8e42c2ceea015b45be02cfbdc,Make a CPU-intensive test pass on a slow machine
cf0259661e7d02d65f18a73a173aaccd9164d188,"Fix a race condition where local channel's closeFuture is notified early

- Added AbstractChannel.doPreClose() to allow a transport to perform
  a task before closeFuture is notified"
d27a27c980463612489664a15cc0efef293cfab5,Fix a bug where channelInactive() is not triggered for local transport
71ad0125d63f3fb849d5ce80247be86afa6947fd,No need for volatile
876847fd2060d455930c682d9e82e9fa871bf69f,"Merge MessageBufs and ByteBufs into Unpooled

- e.g. Unpooled.messageBuffer()
- It will make much more sense once we introduce pooling:
  - i.e. Pooled.buffer()"
754392aaa92b5edd72d941873a1fadbd1029f279,"Add ByteBuf.order(ByteOrder) method to simplify little endian access

- Removed all methods that requires ByteOrder as a parameter
  from Unpooled (formerly ByteBufs/ChannelBuffers)
  - Instead, a user calls order(ByteOrder) to get a little endian
    version of the user's buffer
  - This gives less overwhelming number of methods in Unpooled."
40a7659784cba51a5e98c9521db871c05aa31749,Move utility methods in Unpooled to ByteBufUtil
8e55bfbc9c99e205749a339328b943967f1da6ee,Update dependency versions to the latest versions
6211e53e86139349a4430a4e0f524d5a625c8118,Code clean-up based on IntelliJ code analysis
e1faea035e4b0418f1d7bf5c0ac041dda91ac5ac,"Automatic clean-up with Eclipse

- Mostly import organization & whitespace removal"
ecd0ae5406183c1b4f267be871acc290ed6675fb,"Prefer MessageBuf over Queue where possible

- Also replaced thread safe queues with non-thread-safe ones where
  possible
- Unpooled.wrappedBuffer(Queue<T>) does not wrap MessageBuf anymore"
3b562c917d0b278dc4c11f6298d47000d9cfc505,"Move ChannelBufferType to netty-buffers and rename it to ChannelBufType

- Also add ChannelBuf.type()"
3393629eeda2fbc51d3991fa87724ef1ddbcdf01,Log the cause of exceptionCaught event when failed to notify
660e4548a6f2bd7a913f624e65611dfe6a123e4b,"Fix an unexpected RejectedExecutionException

- Ensure to run all remaining tasks before marking the executor as
  'shut down'."
61e357049e7f3cf4d159c6a35695fd5659455855,"Remove BlockingReadHandler from master

- As mentioned in the developer group:
  - https://groups.google.com/d/topic/netty/ZT0zaZ56eoU/discussion"
fdb66b629403a5bfca1fc6c14f8e743cdbe08898,"Add 'is' prefix to boolean getters if their meaning is ambiguous

- plus minor code cleanup
- ID -> Id or id"
dfce95dd5ad992394cc370d2aa6fe57173c87006,Remove unused type
676b81a4cdc17fcca6d020eba822676bc2a02eea,getPersist(ed) -> isPersist(ed) (#393)
154198a385e5dbdb2938057895d1a3f5e0c3f2fc,ID -> Id (#393 Ensure all fields follow our naming convention)
60de50d89e0ce51a7e3a07422fbac0c153fbf302,ID -> Id (#393 Ensure all fields follow our naming convention)
9bf0ad832961d59848e0ffa366f3001dc4f17f0e,ID -> Id (#393 Ensure all fields follow our naming convention)
a35aeb8cd97100b96c681ccee791860dc0ac2b43,StreamID -> StreamId (#393 Ensure all fields follow naming convention)
90b12ba5d278598f957b6b1ee6e03d5c06827220,Fix a ClassCastException in EmbeddedMessageChannel
91fe9f4b38cbf781c2968e58de2e6058579db58e,serverID -> serverId (#393 Ensure all fields follow naming convention)
d66a0db6ca072d6d6d183d38551e962e32ee8841,"Use maven-dependency-plugin instead of assemblies

- Adopted from @jamestyrrell's contribution"
234bd78efa45d10b71589a9e7b7fcbb89d7a694a,Generate all-in-one source JAR
6b996722aa8f785df2b1bf48984314150f155942,Generate all-in-one javadoc
8b7af2ca3b0f4fbd40111d5d9561709d7d09f27a,Generate Javadoc with APIviz
21288f86e819184248c3fffa6b0708d12503604d,Generate Xref
686756fa54a60a0fee0f4e120091103f7cc7aa2b,Clean src and target directory before making netty-all package
b04e806bd9e4cf63336076020a9a2bc6881a688d,Ensure 'mvn clean' removes the src directory
ea5b294ce0e2a8741060ce5eb6091817fbd76e46,"Build all-in-one JAR, xref, javadoc only on full build & release"
64857050e3763fd7fbb213d45cedebfd80a86f44,Build all-in-one JAR on non-fullbuild.
8bca27a88eb85b8a0d5aa6bb7c8962a189c87bc9,Use build-helper-maven-plugin instead of messy hack
ccd5f7ff8c8cc7df86d88931fae23f0bd4839796,"Add the tarball module

- Activated only when -Pfullbuild option is set or during release"
b9c879375502bc50f92f136c11e7906736cfa078,Fix a problem where source jar is not attached
fa63b89fc39e46b96affd16c558d7e62b6b77428,fullbuild -> full
18aaae3c2e7462853298c991c7f95040e47dae96,Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396
032912d9389087bf909b7236637d60e0e0be1740,Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396
5d01062da43a53d0f9634bdd73280626d0ba1c0b,"Revert as it should be in nio2 branch ""Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396""

This reverts commit 18aaae3c2e7462853298c991c7f95040e47dae96."
f8ef5d5d782383970e2bdf35c978e872242817b3,Next round for async channel api support a.k.a nio2. See See #396
d7f5498e7e46ca2d460f4fefedd71bfbc69ac64a,merged conflicts
70baea35dac0c2ac9bc4bdb4da6dff089e16207e,Make reads work like expected with AOI. See #396
2ff22ff4c3246befd19b073aa3ddca48733c47cf,Add javadocs and also handle writes correctly. See #396
ffc6551acc30eae445c746c5af32ddbe5aefcc13,Adjust name. See #396
67be5aeda8a8415bf610f09a011ba61c3adb9f19,Rename package from nio2 -> aio. See #396
314ac377321e252644d9a3f9beb59d5f9941eff1,Rename classes from Async* -> Aio*. See #396
70c4f59c452fdc3de0fc8f10ef94f0f00139e1d4,Some clean. See #396
5d1e710adcc79ef86804ac065338d0900d544a76,Package was renamed. See #396
dc058d9cd9f5768f8eccc5884b0e3568034c9bd5,Increase the timeout of LocalTransportThreadModelTest to 1 minute
22bc8fecca298781841197288010c0bfb97ec6d1,Implement the right interfaces
7412c371f2e4a74f64c400490afdbc3e930e83d9,Fix writes. See #396
127e9c1d1e8405257cdc6df8c5646dbd40a10c36,Calling clear is wrong. See #396
7e75a9a1a9b2e23fcb2101e86d7151a1e3616873,Fix a bug where timeout handlers sometimes generate events too early
3e2953cf92577a0ba2e12417457d91bfbfaeb767,Add AIO transport to the test suite
5caf78acc07c323a7cac85a72adf231a2fabb987,Fix a bug where channelActive is not fired for an accepted channel
1f69e664fb94c12bc2d884d8b4503826d205e323,"Forward-port JDK ZlibEncoder patch (#404)

- Rename ZlibEncoder/Decoder to JZlibEncoder/Decoder
- Define a new ZlibEncoder/Decoder class
- Add JdkZlibEncoder
- All JZlib* and JdkZlib* extends ZlibEncoder/Decoder
- Add ZlibCodecFactory and use it everywhere"
9ec51d01d61ec5725cfe2ca13fcb6f6fce0e5a72,"Add ChannelMetadata and remove unnecessary disconnect() impls

- Add Channel.metadata() and remove Channel.bufferType()
- DefaultPipeline automatically redirects disconnect() request to
  close() if the channel has no disconnect operation
- Remove unnecessary disconnect() implementations"
f60a6e861cdf877e192297a07a3c1aaa758e7669,"Add DatagramChannel.isConnected()

.. because there is no way for a user with isActive to know if
   DatagramChannel is connected or not"
4c072694be32bb40da04852dc02322cfc9ee1162,Fix documentation errors
a6e3d7d0caa00b5075f64023f366a8eb15b94653,"Fix #405: CookieEncoder should refuse to encode more than one cookie

.. if on server mode"
0eb7a42c690bc5071b2ebe3be105b806a63e5730,Fix test failures
ee8091f6fbc2912257388de039fbde2322b73247,"Fix #397: Allow all cookie names that conform to the RFC

- Lenient flag is not needed anymore"
7b2992a95afc04262d2c9667972b8b3f7231c61d,"Fix #218: CookieDecoder.decode() throws StackOverflowError

- Rewrote key-value decoder not using a regular expression"
1be9bbf62c7242b6ac5510bc21a5dd1ed5b0ef82,Add CompositeByteBuf.numComponents()
6d2f6d697d3bc4d8dee6acb77267206803d47646,"Make CookieEncoder and CookieDecoder stateless

- Also: CookieEncoder is split into ServerCookieEncoder and
  ClientCookieEncoder"
3b945bca78b3e44f8dc6e8dafdfa1502bda775cc,Remove a method of no use
a5d35f89d287cabdff2cab1c580ac055fc33c41b,Add missing license headers
90d9febbc00a779d5b53248f556b793182434034,Add more cookie decoding test case
90e22644c31b93f3dc1164d0545ed054366749a9,"Adds javadoc to NetworkConstants

Also renames some internal variables to be more understandable
No API changes! :)"
63f4b44b50a839fe5c116b7b5d6e8a62c32029fa,Update dependencies to the latest stable versions
cb8c9767f6acad1ffc94d4a8895b042624412f76,"Adds a method to get the buffer for a specific index in CompositeByteBuf

This fixes #414"
332a35f9ed00e1d5631085729f30c45c6ea42ea0,Simplify the process of getting the component
49f0e32428aa634c1653a4b358d1e3393097f360,"Actually throw the correct Exception type. Whoops!

This should be done, now."
1d1d7b2a951ea043c5533bd4200d70205e8e03fd,Add documentation to NonReentrantLock
8f4aa5b9e2bf54e41f0a8f3952e440bb7f49861d,"Merge pull request #411 from Massive-Dynamics/update-dependencies

Update dependencies to the latest stable versions"
42f3a6750a3085829a3992beaac6c3aeda6b1f61,"Add documentation and changes to ComposityByteBuf.getBufferFor(index)

Thanks to @kimchy and @fredericBregier
This is part of #414"
a504aa1159092a6ef4fbc285c49f3678c83bb45c,"Documentation and checkstyle fixes from @fredericBregier
This is part of #414"
e2989719e1df2d6c6ebe1a34a1b8549c8e756d7c,Comply with line width a bit more
2610a94de9f9ccbafd37b1e4ea605b8feb5c3bed,Fix SpdyHttpHeaders.setScheme setting the wrong header. See #417
a12a99a3dc67d950be16d78208c8974cfa3e7406,"Merge pull request #416 from Massive-Dynamics/non-reentrant-lock-doc

Add documentation to NonReentrantLock"
33c42bee6d2cbc1fadecbb82440ddff9e13e1692,"Merge pull request #409 from Massive-Dynamics/network-constants-doc

Adds javadoc to NetworkConstants"
00ae0e8ad9113a55bfcc9c8ea7533ec3fc7f591b,Merge remote-tracking branch 'Netty/master' into fix-414
3d9be813774ac8c8b0ab325402b609d364930a6b,Provide a basic test for getBufferFor()
557f1c85df931a0914e88237236fcbad1c39c08c,Little bit more testing
b11d4fa37adc59b409f64242221ad917efe6a1f1,Two tentative last asserts in the test
c55e10c12aa851918dd727f12643d1a0d9ab839d,Fix a bug where a potential overflow occurs
be57cf3b51bc9f6e12ef992c2999cd406e1956ea,Fixes a bit of javadoc that was broken by a failed merge
9f9b36f579d824bc1b6de8de138c4325cc83254d,Redid documentation for WebSocketUtil
59bb92171b8d3831fe80683ed7573e68abbbc3dd,Made the documentation in HttpMessage a bit easier to understand
a818cad45ab9713a93bf2f813e1521be61adc500,Make HttpRequest's documentation easier to read
4d5e4c34334c8c9d7a7403213e1228d6226b1c73,Make HttpResponse's javadoc a bit easier to read
fa2224c3aa9d8f71099ed3c0ab78eea4a0a8a70f,"Merge pull request #421 from Massive-Dynamics/websocket-util-doc

Redid documentation for WebSocketUtil"
d0c8c10681fabe4f67b5f6043e7ed83e2c329a1e,"Merge pull request #420 from Massive-Dynamics/fix-failed-javadoc

Fixes a bit of javadoc that was broken by a failed merge"
26ed1a99721a8332108cf29a9fc7c18a1d344025,Documentation and slight internal refactoring of HttpCodecUtil
f3fff2d3e8ba840227395374fc03a76ad3052d6d,Documentation redone for Cookie
379269346879c7dff2d69ae14f6054f9fd386496,"Changed ""Gets the"" to ""Returns the"" - Requested by @trustin"
c52cb0ea21ce78a3c2ef1928acea489732ed2a27,Assuming that @trustin will want this changed :)
cd95dc59245c5cc51731b487e45bb0b35bfee597,"Merge pull request #422 from Massive-Dynamics/http-doc

Even more documentation changes (mainly) - HTTP"
f8093408e42f11424e78bca45f11ded801b9373c,"Merge pull request #415 from Massive-Dynamics/fix-414

Adds a method to get the buffer for a specific index in CompositeByteBuf"
07095a41f481e50b57e4a39c3372c4c2865ca545,Rename method and make it more clear thats an expert method. See #414 #415
27b83a480b764a5dbbee41259fde5b79aeb63df3,Fix checkstyle
c35f90f92066f347bd6fcb6bc8a9c75c1c9569c3,Port enhancement to reduce memory copy if possible. See #412
04cf836cf0283b953485a2ebd18414c3a0dfb754,"Change Timeout.cancel() to return a boolean value, true on a successful cancel

As requested in the javadoc for HashedWheelTimer"
53fb5165c9416e838db48b74595c5d6027cb6e72,"Merge pull request #425 from Massive-Dynamics/timeout-unsuccessful-cancel

Change Timeout.cancel() to return a boolean value"
b9d16663d9e78c52c762168146ee8eeff0942abc,Fixes javadoc from #414 / #415 (@trustin)
87f50e135eec22791ff38f4e72161f7091b1a240,"Merge pull request #427 from Massive-Dynamics/nmaurer-fixes-415

Fixes javadoc from one of my pull requests"
e1cbcd645686c8c0196ce94b3fdc1b0e3f781a46,Remove left-overs. See #396
8c0146fbd8f77cdbe365661a5750bdcf201acbcc,Supress warnings
0562aad91ffa816b7fdfc0c467c7a57a27dda7b4,Make sure all pending writes are flushed. See #396
12112ac8575170bbe62f59b968ddd323e5103cdc,Use the correct outbound buffer for flush the writes. See #396
82834c2f348d35f8d9a224c3b9a51e3aa085839d,Check that eventloop's were setup correctly. See #396
d0e83520cc228a6462c047a2c6655ee3b572a2cc,Add getters for the specified timeout values. See #418
ac4dacd84f5412effa59635d9280839ef207b1c5,Minimize byte copies by using a CompositeByteBuf to concat the chunks. See #413
c3770a0fba42173960662833514564aaf7705d32,"Revert ""Check that eventloop's were setup correctly. See #396""

This reverts commit 82834c2f348d35f8d9a224c3b9a51e3aa085839d."
e58d657421a6ca9e6ebd7d34f9d6cce7345b7ab3,Supress exception logging if the exception was expected. See #396
7d33846690dec9a3e39b8312ab4f6f74c4c8b2c4,Trigger the read() after the registration was complete. See #396
a5b6f1d6150b4f1aa50fe9109f98a4fde7b96ff5,Ignore NetworkChannel class. See #396
eccc28965e60029a9a4df93c1f5495baaa38d0ec,Make sure the ComplationHandler stuff is handled in the eventloop. See #396
31cebd7ce28764e0c519a8298c71b2bad3333ef0,No need for AtomicBoolean as we run in the eventloop. See #396
61a7c78a530af183dcf67e6d4507f4f240aee241,Port fix for #433
1784283d29ed73a5e6c8987badecd11f3533922d,Correctly format cookies. This fix some bug which lead to expiring of cookies to not work. See #426
a7a4081e70ac468d96d9a8799ae27347fb13c4c9,Fix checkstyle
e40c4309769a3c6fab33337d01105b9429241c95,Throw a special SSLException if a non SSL/TLS record was detected. See #437
db09c421d93c9719c1cc7b784b3ba4e19f489174,"Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79"
b9781c968cc68552533b8241b5fcb717fcad6615,"Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79"
9af7512c359f93083c4894607e9a45e941bd2112,Use String.CASE_INSENSITIVE_ORDER instead of custom Comparator
8dc1f321cb8729e953bcc144cd354edb86670aef,Remove unused classes in util.internal
cda2d6f5aa1ef905af856a36c912f5d5636774c3,No more mind-boggling ExternalResourceReleasable
391fe71639a23158ad5d7fbfa844dc26367d4224,Remove unused classes / Make HashedWheelTimer not use ReusableIterator
4e43041c95b58eba8a61855939c01cba21ef4944,"Fix a build problem with all-in-one module

- mvn test was failing"
aa3be3e1e8746380a30dc49ee926f3087c137047,Build all-in-one JAR on non-fullbuild.
98fb86fbf2683a4d313b2d539a440b7ebcc2f122,Use build-helper-maven-plugin instead of messy hack
4c2893e95297fdb1f5c4c3164fb696a381226846,"Add the tarball module

- Activated only when -Pfullbuild option is set or during release"
0ee0751fec20014f9606050120efc4f2361a5f8c,Fix a problem where source jar is not attached
41a9c66f669a08cc6af67f996719a9f53a482583,fullbuild -> full
c165a38e15c93a0b8345aa46c678cc6cbb5d4fa6,"Revert as it should be in nio2 branch ""Commit first round of classes to support nio2/async channel api. Still work in progress.. See #396""

This reverts commit 18aaae3c2e7462853298c991c7f95040e47dae96."
faf529166fa4298aaaa5a42528aa74091a7dfc4a,Increase the timeout of LocalTransportThreadModelTest to 1 minute
7a4e3742941b7fbe476403161d8a25f3f524430c,Fix a bug where timeout handlers sometimes generate events too early
32188f83acaaba30a13fd266f47c3e7c9a0c0855,"Forward-port JDK ZlibEncoder patch (#404)

- Rename ZlibEncoder/Decoder to JZlibEncoder/Decoder
- Define a new ZlibEncoder/Decoder class
- Add JdkZlibEncoder
- All JZlib* and JdkZlib* extends ZlibEncoder/Decoder
- Add ZlibCodecFactory and use it everywhere"
a5bb2c7f77f6882bcc6ded8e91515049ae579009,"Add ChannelMetadata and remove unnecessary disconnect() impls

- Add Channel.metadata() and remove Channel.bufferType()
- DefaultPipeline automatically redirects disconnect() request to
  close() if the channel has no disconnect operation
- Remove unnecessary disconnect() implementations"
81eaea77bda1dc9e677283f0bd3d30d2d41e242a,"Add DatagramChannel.isConnected()

.. because there is no way for a user with isActive to know if
   DatagramChannel is connected or not"
1d0d4fcd78735371d3540f004fba9e97b5d5a66e,Fix documentation errors
1ef371b6255d672575f595fabd435130bcede273,"Fix #405: CookieEncoder should refuse to encode more than one cookie

.. if on server mode"
79425895e2a990fea23dd1fe104660c8c11a5e08,Fix test failures
7596ad8d584ea29456eeba01cd8e70870b298113,"Fix #397: Allow all cookie names that conform to the RFC

- Lenient flag is not needed anymore"
217f8ce1fd26d7c125612ad6aa4f53819b403d12,"Fix #218: CookieDecoder.decode() throws StackOverflowError

- Rewrote key-value decoder not using a regular expression"
c77af321427537be8d7526782ec9232c1a17ea3a,Add CompositeByteBuf.numComponents()
0c55c85d06ccd2f0bd38a5376417b5c6b8c09aef,"Make CookieEncoder and CookieDecoder stateless

- Also: CookieEncoder is split into ServerCookieEncoder and
  ClientCookieEncoder"
88e83462b03aaa7ad05c502bb80fa7154a4a048b,Remove a method of no use
de20883517db78015d643b3621ddfcb5c94b8bc6,Add missing license headers
9cc9f4e1ec44fd737c73c0d3b9bc29274dce64cc,Add more cookie decoding test case
2653facd3babfbf35173a04ce87db24bef172e71,"Adds javadoc to NetworkConstants

Also renames some internal variables to be more understandable
No API changes! :)"
8b5ab52a5b003dfd2f0bdb9d68f7c88aefb423ce,Update dependencies to the latest stable versions
343d6748394bbc4729c253eeec41bd0ab1ff87ae,"Adds a method to get the buffer for a specific index in CompositeByteBuf

This fixes #414"
0d8ed47c3e66379f92025f9048bdcd2960c0ef96,Simplify the process of getting the component
580c6069fa37c0ad5ee45f04e7be83b2ee70ccbf,"Actually throw the correct Exception type. Whoops!

This should be done, now."
f1c375109eaef4a99e786097a3beef6610a5ab0a,Add documentation to NonReentrantLock
a92ed57b182a0e19f0de13a59f3a572034f8759f,"Add documentation and changes to ComposityByteBuf.getBufferFor(index)

Thanks to @kimchy and @fredericBregier
This is part of #414"
d2f1c85f24c5114e9ee8a7914fb9dbe667ec1dea,"Documentation and checkstyle fixes from @fredericBregier
This is part of #414"
0a413af35d7ad111bb7714da5e285a483806c80f,Comply with line width a bit more
a280928731d4dd2c778f76ac50dcbdf50570c713,Fix SpdyHttpHeaders.setScheme setting the wrong header. See #417
052f8be504344eee0b462fc3c3ecb0228a24d217,Provide a basic test for getBufferFor()
73a76bfe6394979ed2e96be30948eb980cedfdd8,Little bit more testing
0f6c3137f6b44ca2ca8a1017b6e9ede93c1744a5,Two tentative last asserts in the test
dc300f2c812b2231b527c761f4c73d5155137516,Fix a bug where a potential overflow occurs
7e35cc1ebb4c89f2f5d1a0f1397ed0ddbd0b1625,Fixes a bit of javadoc that was broken by a failed merge
eaa99efd3018a013b5f8044d6ab80ab8c9ebd6ef,Redid documentation for WebSocketUtil
98c61e4128ce7dfe2f51b3ea33406a579fc1a9f1,Made the documentation in HttpMessage a bit easier to understand
d975ab365c0e33d59e0ed052e6e196ba20e3b973,Make HttpRequest's documentation easier to read
c8d13e03e0bdf7706c4f5d3a9231094db9c93a74,Make HttpResponse's javadoc a bit easier to read
e08c4ea3e05e76a5a5815d04c171a5b4b7002502,Documentation and slight internal refactoring of HttpCodecUtil
4379a86c4c3ad53e460d40b78727d480601842b3,Documentation redone for Cookie
20062de0d968dcee45f29e7b2bb94089fff85b3a,"Changed ""Gets the"" to ""Returns the"" - Requested by @trustin"
0ae4a64db2d79c56748482b6b56b751d8c4e22c8,Assuming that @trustin will want this changed :)
ce90550f64c58a60f6367983dd36c9e046ea9bf3,Rename method and make it more clear thats an expert method. See #414 #415
efce2624ddeb88a77ec81d85d279347dce2e8c2e,Fix checkstyle
8224c95e059182292380d32f86e1c12961219111,Port enhancement to reduce memory copy if possible. See #412
02d5267a7066160cc9c540e5a36cf4697db63a4d,"Change Timeout.cancel() to return a boolean value, true on a successful cancel

As requested in the javadoc for HashedWheelTimer"
4324c618833138c3a673c6366e62e0c36b4ad78f,Fixes javadoc from #414 / #415 (@trustin)
2a2394c132510dc5248e34e82301411613211dcf,Add getters for the specified timeout values. See #418
166d8d9436c5b399939cf1170eba73d0eaba26ba,Minimize byte copies by using a CompositeByteBuf to concat the chunks. See #413
8595d85e4a450ac514d4d7e019b7793372fb66e8,Port fix for #433
ae2906de1ed504a4170a2194a9a7ce51a8e2b0d7,Correctly format cookies. This fix some bug which lead to expiring of cookies to not work. See #426
d6f1a82c310d8b10bdf7b3daa38132c0e2224c7a,Fix checkstyle
a23baa1b9b3f1a3f4314d7e48acfafcc9a8fd4c5,Throw a special SSLException if a non SSL/TLS record was detected. See #437
3f1478b653dfa0f815a4f5c9b77dd3bad81832fe,"Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79"
e1f39f1d85be02fe5e4c7c2801730eebb02e314f,"Optimize SslHandler's detection of supressable exceptions, so it will not break on different OS's or jdk impls. See #79"
e5972a74539d918dd1364bfb95dcb9d02c25a74d,Use String.CASE_INSENSITIVE_ORDER instead of custom Comparator
b86e2730cc43be9cf957df2dd95ed8a43570d8e9,Remove unused classes in util.internal
86d59a2e91fc29e24eae0054e5bddd020e15f787,No more mind-boggling ExternalResourceReleasable
e40c4ea6018fda2e95adfded6792fb8c136a949e,Remove unused classes / Make HashedWheelTimer not use ReusableIterator
9a90b947db97e30f4af319e6ec2326c597e08e1f,"Fix a build problem with all-in-one module

- mvn test was failing"
4f9b6c5badfb4a878a283440479b385f7260067f,Merge branch 'nio2'
9535401632c053253878981fd467181e480cc56e,Revert unnecessary change in Bootstrap
42380b54b32d9b59a8f3a4006fc76eb0a4122c74,Revert file mode
0941d617d92dcbe8c75c399ab05114db99f7f560,Fix a compilation error
c57e903c4d10ae27a3709d03e63335f5105f7aa0,Fix more compilation errors
de40a8d09b624468e4f1cdb6f79edd764e292ec6,Fix another compilation error
fae3861c3a5282f5e74654a58e78141229620144,Fix a compiler warning
ec88f6617c872ac62a3f6f9f0c4f9b9f04a38911,Fix compilation error and warning
c0f4f75c6d32e05101a44f4378fffe51f22ab34c,Use SOMAXCONN as the default backlog if possible
aea3ed85bd67685dd7aaf77e58134b1dbdcd09f6,Allow AIO channel's config is accessible as early as possible
3a84b9dc71e879a325ab926bc27a4992e497649c,"Make test suite mostly pass by avoiding ClosedChannelException

- SSL echo test still fails"
2bc26fbc703aaf2021d09b6cb80b4153207688a7,Remove seemingly an ad-hoc test class
613834f3263f6ffb53582b01098ebf66bbbf376e,Fix data corruption in the AIO transport
cef7dfc02f8949c25d60565c3a7689a1ee3aacc5,"Made the AIO transport adhere to Netty thread model strictly

- Fixed data races
- Simplified channel creation using dummy AsyncChannelGroup"
b97b3c602bd4b518c61b44964fe5060ca9830682,Add missing license header
b79e0b088217083b3d0a485a7f184a536fba9316,Fix another data race
3fff8ce1d63817cb92553c7ec33c90c73dd02119,Fixed a bug where SslHandler does not sometimes forward a flush request
bf62add6c742737b493cf3913d04144f0cd4d710,"Clean up

- Removed unnecessary 'closed' flag and redundant close() calls, etc."
220e4e886f0e82f06140a225b5fe162998b9a44d,Fix ArrayIndexOutOfBoundsException in ReplayDecoderBuffer which could happen when calling getByte(..) or getUnsignedByte(..). See #445
c77f107f5f37c40fff3567722c5d656f81b74c72,"Made the AIO transport faster / Fixed a bug in SingleThreadEventLoopTest

- Used reflection hack to dispatch the tasks submitted by JDK
  efficiently.  Without hack, there's higher chance of additional
  context switches.
- Server side performance improved to the expected level.
- Client side performance issue still under investigation"
e7c6ca945fd2d85b1dd86483d699d7af2399d0fc,Fix potential NPE / Use discardReadBytes instead of clear()
ee019d344e56a99ea787e55738a19b2c3c615120,Fix potential NPE in AioEventLoop / Always notify flush futures
a58533fdad00bcffb3e9db41bd6fcd252aff1f61,"Due to the recent changes with AsynchronousChannelGroup use, there's no
need to schedule read operation later."
adb4b87fa8867e9511b47773c165f2b12fdc27ef,Replace catch of Exception with Throwable as Field.get(..) can also throw an Error
0289dadca430b81b7c011d584347b8a0a59eacfe,Don't call Field.get(..) if we can avoid it
e157ea1a666142b5a603248dade7b767cc1af95e,"Allow a user use any type as a ReplayingDecoder state / AIO cleanup

- Removed VoidEnum because a user can now specify Void instead
- AIO: Prefer discardReadBytes to clear
- AIO: Fixed a potential bug where notifyFlushFutures() is not called
       if flush() was requested with no outbound data"
d233be704191e6dd72a93548efc4b42bb29c29c9,AIO: Act on the right ByteBuf when a exception was caught during write
701cda2819bd31f1f6e00e4545e3b9a2aa0c60f3,"Require a user specify the same AioEventLoop

.. both when create an AIO channel and registering it

- Also fixed a bug in AbstractChannel where is does not handle
  registration failure correctly."
170a04fc722e08c05ab92963a214a7bc189d5325,"Revert the buggy commit in AioEventLoop

Also decreased the max stack depth of AioCompletionHandler to 4
(Integer.MAX_VALUE was for testing)"
917ed5173e8f2f52df02dc6818ea329cf1951422,"Fix a bug where discardReadBytes() doesn't adjust markers

.. if buffer is empty"
d66a187b5d700905e0d380faa451f15a26b6f03b,Fixed a bug where discardReadBytes is called in a wrong place
f5fa671459539a42df40d315c02e94a42fcd68ec,Fix regression (see comment)
1c4d0d0f574a6b3041b0626390ba7296f699e44a,Optimize AioEventLoop.findChannel()
6b5e3c5def2eddb347e36b029e7343417c3384a4,Port #446 (Fix for #444 - HTTP compression error)
353c6607ed6655fa0be48c183385138e20d801c9,Add more constructors to NotSslRecordException
a487da1fcb7d55b9a08bb91f6f588b1c7d4dcba9,Update release options
ac364e3bf31384f5fdcd2e353ab7b8ccb2cdb439,Use the release version rather than the snapshot version when tagging
527f2f6c6e2d37274ad02a646f58a2718bc88021,[maven-release-plugin] prepare release netty-4.0.0.Alpha1
d801459cb83623e2955cfa0b2440bd3e04766297,[maven-release-plugin] prepare for next development iteration
c588a8a40bcdb2c8a05aece70b2262f8a57e6f09,Fix the build issues found in the previous release process
fbf54a602767a872c6ec94afabd7fe7eb4010bd1,Add sonatype-oss-release profile
7c2e09f7b2c6d926c46606dab3c1b3f2b535bebf,Ensure tarball pom is updated during release:prepare
11de993efb7e2093366e9d3abfeff2be7adc623f,Upgrade maven-javadoc-plugin
2ef8b23ecdc50d2b8222aa3bfda922395e4818a8,Fix javadoc plugin errors
787f5b28b23651880a9385dbe4a3ffb648b3d47f,Fix a build bug where javadoc is generated twice
6c2eba79d70a532822a0e38092faa9783d90906b,[#452] CompactObjectInputStream fails to resolve interfaces
7fbd1e5095af93d829e38f2b4ab842367dc1c3f7,[#454] Unnecessary thread interruption in DefaultEventExecutor
00106b367ca01ec34fa2c8d731a279677193c1ba,"Use lookupAny() instead of lookup()

- Should be OK because Netty 4.0 requires Java 6"
3447e8711227f83ff8d02a90078e376c3fbf5a0f,Pass the right ByteBuf to the decode(..) method. See #459
92334b919e4ac394ad7f2b99c423224cdb576f19,Fix for issue #456 related to payload using 2 differents RANDOM while only one should be used
56a72c645695d50b2fedd5788a1d8ff2d81f5ef2,writesBytes as in V3 instead of writeInt (RFC says 0 to 4 bytes)
b5412c956359200f66076c4f99da163fb1df6ed5,"Merge pull request #460 from fredericBregier/master

Master fix for issue #456 related to payload in WebSocket08FrameEncoder"
e36c4c77bfbbf18ce8e46fa8efe2a809df891345,fix header to out
7b511d8200aae05bef86085f9b101d37b9fce4ef,"Merge pull request #461 from fredericBregier/master

typo fix for issue #456"
19ddb7a8e16672450455573805055ca78a4d0dc0,Increase websocket framesize for autobahn tests
250b40ec3b81960733fd1f1a8d65bd8630a5e4fa,Fix typo in test samples
5a613f379e24da75cf872fb1217af5a500d6fb05,"Make ByteBuf dynamic / Introduce an interface for composite buffers

- Replace ByteBufferBackedByteBuf with DirectByteBuf
- Make DirectByteBuf and HeapByteBuf dynamic
- Remove DynamicByteBuf
- Replace Unpooled.dynamicBuffer() with Unpooled.buffer() and
  directBuffer()
- Remove ByteBufFactory (will be replaced with ByteBufPool later)
- Add ByteBuf.Unsafe (might change in the future)"
f3f40b24254ab702cc4c18e5b4baf6bf7bf3f03b,Added TRACE level to Internal Logger
62ed610c1de29aee5a4f33f66524ca55bbe5cb40,Added TRACE level for LoggingHandler
8d813b127c572fc83a08a1166fbdb273be050887,"Replace free() with reference counting / Fix SlicedByteBuf.unsafe()

- based on @normanmaurer's feed back
- Added Unpooled.compositeBuffer(int)"
26e64eb3051b7d159a9c31a985aced079709b60d,"Fix IOOBE after buffer truncation / Add CompositeByteBuf.addComponents()

- plus some bug fixes while running unit tests"
961fc40b294d3680eb81866a08d5a3ce81a5e702,"Merge pull request #464 from netty/buffer_always_dynamic

Make buffers always dynamic"
d43d95cc0d04b6f717111a94487180de69b5252c,"Merge pull request #463 from veebs/AutoBahnFrameSize

Increase websocket framesize for autobahn tests"
927c4ee8cb834ee5244473e307c153a1ba95f97a,Minor typo in exception message
137525d4c5207b2ee8ab416dc4a2546de8c6c50a,"Merge pull request #475 from danbev/channel_handler_context_typo

Minor typo in exception message of DefaultChannelHandlerContext"
57e7255566ce4248e0c9c416f8595e8bffa0a6a0,Add support to suspend reads. See #71
9b37de32a0b77e65f32709c7dff25d12a42c42ae,"Merge pull request #465 from izstas/master

Add TRACE level to Internal Logger"
bdde5a20f607a7b65489ed6db5094852bc4f0b53,"Allow to set Expires attribute
 to a date in theast. See #479"
ba1c7c5c550fec36b37d2d8bac1674620ab30c99,Replace usage of QueueFactory with ConcurrentLinkedQueue and LinkedBlockingQueue. See #477
0daf37aae36083d57b0a4afb406f96585003faf9,Remove unused classes. See #477
8b473dce6cd8a6cba419e1c4473ecf79ca254952,Rename class
16a40883447f94ec6e56ef73cf374a9284b22ff7,Address @trustin 's comments and also make sure the accept of AIO is only triggered from the event loop. See #71
6a15f7f5ce190826fc949eda0256ba5aa1503cec,"Merge branch 'master' into suspend_feature

Conflicts:
	transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java"
a3a58ecbc017b0445d61c34131c044e96247fe35,Fix a bug in suspend read. See #71
b4991facf84ebc1e816096ffcf71729c475b0b66,Remove unused import
a442789f7a9a9e997cabe7c2ada776463321fd3b,Add a testcase for suspend accept. it currently fails not sure why yet. See #71
3992472b3017ad8890cf2dcc4fdc30628d6af2a3,cleanup
728306b64f36fad457037bc9b0557821fffa5347,"Add CompositeByteBuf.consolidate()

- also added test cases that test automatic / full / ranged
  consolidation"
f2eeed77e0d1a850b9e77212191af457f05cbfbc,Remove a redundant method declaration
ed7613e1830a69da5370916dc8e9086b3cc231e4,Resolve issue #489 with an atomic readInProgress guard to prevent ReadPendingException.
947f3bcd5f2a599d3df1af9a891e286478f3b7cd,Merge branch 'master' of ssh://github.com/netty/netty
b09e945830b406c5f088fb548238df719565cf32,"Merge pull request #490 from jfallows/master

Eliminate potential ReadPendingException for AIO suspend-resume"
3ed38277605ef7f4f966f59866032653eed229da,Merge branch 'master' of ssh://github.com/netty/netty
0334333c82e4646bd16a5682f1d54ff362db5372,Fix checkstyle
f7e0366baec96d508180cebeef5eeb293853fd59,Add nioBuffers() and nioBuffers(..) method which will be used to support gathering writes for the AIO transport. See #492
b8a60dddd326c344a8d6a5f2f2a4cff99a2888cf,Fix m2e errors in Eclipse
a2aadef4da964a1bd72c85734b8f347ed6e4e120,Add ByteBuf.Unsafe.discardSomeReadBytes() to reduce discardReadBytes()
501746aeff12dfa288273ae0ce594506bddd1e9a,Fix an infinite loop in DefaultCompositeByteBuf.setBytes()
f4fa5698c1ff391ea44a85f5136fa2c480e37f23,Add a TODO which should be done when buffer pool is implemented
d2987071982a9f54c03a67cab780320cbf72763a,"[#502] Split EventLoop/EventExecutor into parent and children

- Add EventExecutorGroup and EventLoopGroup
- EventExecutor and EventLoop extends EventExecutorGroup and
  EventLoopGroup
  - They form their own group so that .next() returns itself.
- Rename Bootstrap.eventLoop() to group()
- Rename parameter names such as executor to group
- Rename *EventLoop/Executor to *EventLoop/ExecutorGroup
- Rename *ChildEventLoop/Executor to *EventLoop/Executor"
d3a28355030f23758fccec7169318bd4d01b4355,Add ServerBootstrap.group() that takes a single group
1162f26df53f774dc5e4bac7015b46ddd7fe9c95,@Ignore bad test-case for now. See #503
4550ad88a6c519cec95b18a3802464edef66159a,Initial port of SCTP basic classes and interfaces to Netty 4.0
7ab8ca4d1454b7f12449110884f3b6c78b31801c,Merge remote-tracking branch 'upstream/master'
06fd86971163c61c9a0866d92c67c190cd47fb13,"Add support for AIO scattering reads and gathering writes.
 o Add ByteBuf.hasNioBuffers() method
 o Promote CompositeByteBuf.nioBuffers() methods to ByteBuf
 o Use ByteBuf.nioBuffers() methods from AioSocketChannel"
b5aa2108ec06382a45f79f1876e6014baf836ee3,"Merge pull request #506 from jfallows/master

Add support for AIO scattering reads and gathering writes (see #492)"
8d90f3adf6b396898d03adb0220ac9623d75fe61,"Added a function to get a UniqueName's ID

This fixes #431

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
061252e4b4a86b638f5defdc7dcbf8a7a963387d,Allow to config read/write timeout for the AIO transport. See #509
ad534efc58d8be5eb7f5b1a211639ce451bf2009,"Merge pull request #508 from CruzBishop/fix-431

Added a function to get a UniqueName's ID"
148e629104b14e4cf99fd383ce1efb436ed10c24,"Use childGroup for accepted AioSocketChannels, children of previously bound AioServerSocketChannel."
af0a7eaf13552d873f63d9a82cf62f404f45721c,"Fix a typo in ObjectEchoClientHandler

This fixes #510 in master

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
1f1403697bdcb70de4bd4717cfcbb343e72b5804,"Merge pull request #512 from CruzBishop/fix-510

Fix a typo in ObjectEchoClientHandler"
8b66e652770edf0ffde9c757386465edf8150a8c,"Merge pull request #515 from jfallows/master

Add support for AIO server channel accepting new channels onto a separate child event loop group. See #514."
a0d9bed8f9d2e8233cf29a5b30104fe9b3b6cfeb,SPDY: remove deprecated data compressed flag
d3d52edb31ad5f95710483e841c8c3b5ff8ac8ca,SPDY: introduce SpdyControlFrame tag interface
5787e2eac9c151f63055b9dd9d5b03dbaa38c3d2,"Merge pull request #518 from jpinner/spdy_cleanup

SPDY: introduce SpdyControlFrame tag interface"
0baf35920287e3461fcaccaad01879a6bc2d6408,"[#494] Automatically adding chunked encoding header breaks streaming

Forwardport @jamestyrrell's pull request"
e530ccaeb8ad8049e39d3dc76df035b3b4095559,Fix typo
00d60109163c5f90dd4bd38ef15bfd11e30d1fa5,"[#494] Automatically adding chunked encoding header breaks streaming 

Add a missing statement dropped while forwardporting"
de37d7587175f2ea9c4af81c5c06b7078ecc6c89,"[#521] Encode URI using UTF-8 charset

- Forwardport @jpinner's pull request #522
- Use Charset instead of charset name"
0a99a335402b0185aa2671a8b91c6341cf4148be,Use String.getBytes(Charset) wherever possible
9c17304755a37283069621f780201e31917ecf5c,"Use different EventLoopGroup for AIO transport tests

- plus tiny cleanup"
aef7a14852f6a7b6aa266ffa0b1738a0dc9caedb,"Merge the pull request #432 manually

- Add UniqueNameTest
- Add JavaDoc for UniqueName"
505e767a09bc5d55cd0df35b8e0f8c59e9f7c507,"[#529] ByteBuf.ensureWritableBytes() can trigger IllegalArgumentException

- Remove redundant boundary check in ensureWritableBytes()
- Ensure calculateNewCapacity() never returns the value that exceeds
  maxCapacity"
421eabe666f5eb3c760c757e991e4f37213f7333,"[#473] Fix elevated context switching in SingleThreadEventExecutor

- Remove polling in SingleThreadEventExecutor
- Create a dedicated scheduled task scheduler called 'TaskScheduler'
- TaskScheduler is created per EventLoopGroup / EventExecutorGroup
- SingleThreadEventExecutor delegates all scheduled execution requests
  to TaskScheduler provided as a constructor parameter
- TaskScheduler is a specialized form of single threaded 
  ScheduledExecutorService which requires an EventExecutor as a
  parameter for all requests."
f75ba72aeb4f21f5f39215c0900b261b9f22a9fa,"Allow using non-BlockingQueue

- NioEventLoop never uses takeTask(), and ConcurrentLinkedList is faster
  than LinkedBlockingQueue"
0b11fb2eadb7a44cbef26d4972f9070015b3da38,[#531] Move io.netty.util.Signal to io.netty.util.internal
e257eae2873e3dbe6cd107e936d303822444ed9c,Merge remote-tracking branch 'upstream/master'
11c742f392d9168a095f2bee2068f249b2ea539e,[#59] Make ChannelFuture implement Future<Void>
cd8e2576b4404ab7491fd85ee3c82eb499b75b00,Ensure unmodified buffer delivered via pipeline after read completes but before next read begins.
9e75a33d3d21a300481dbddb33dce6243bdbb8a7,[#530] Allow using a bounded ByteBuf as the first inbound buffer
44daa99d3f9911e4cf016b4ac873833852cca53a,"[#530] Allow using a bounded ByteBuf as the first inbound buffer

- Clean up
- Do not stop reading when reached at maxCapacity.
  - Just let handler drain the buffer and try again quickly.
- No more magic number in OIO buffer expansion"
f02ce0fdca7cccdf7511421e5a2ea853d079d976,"[#530] Allow using a bounded ByteBuf as the first inbound buffer

- Make the test run faster"
8bfbebc772d2afeee0be738cf157a8b313efcfd3,Rename TaskScheduler to ChannelTaskScheduler
7b213d2c93eced9653915fe682685df0cf88457e,"Double the timeout of LocalTransportThreadModelTest

- because it seems to make the build unstable in CloudBees"
ebf33c6e3b3ec94965c07defe2e79f7edec7f64d,"No need to make the timeout of thread model test too long

Using m1.large instance fixed the unstable build problem with CloudBees"
3f101ad3d1ea931609165a939df513a084e80f41,"[#504] SslHandler.flush() notifies futures prematurely.

- Add ChannelFlushFutureNotifier
  - Extracted the functionality that keeps track of flush futures in
    AbstractChannel.  Will be used in SslHandler."
2bb114bcb72f467cfa3ac730493ef2270193dffa,"[#504] SslHandler.flush() notifies futures prematurely.

- Make use of ChannelFlushFutureNotifier to notify flush futures
  correctly
- Improve the test case to ensure this commit fixes the bug"
e80abf0b39e26ea85c978142d0ec1b9ee31e367c,"Update codec-http/src/main/java/io/netty/handler/codec/http/DefaultCookie.java

Allow to set a negative value for maxAge of DefaultCookie. See #533"
c22b559dfab50e9a8fb5a4d1182695b76c23af47,Set maxAge to Integer.MIN_VALUE by default. See #534
602f976e4111d66b807f9b2c1cbf09a8f245cd01,"[#527] Add a new property to HttpMessage to help clarify its transfer encoding
    
- Add an enum: HttpTransferEncoding
  - consists of SINGLE, STREAMED, and CHUNKED
- Add HttpMessage.transferEncoding
  - replaces is/setChunked()"
b7ac3edf02e5771fb06a5d6856afde627d8fb73a,Add static modifier where static member is just enough.
3cce40bd799077e63318ec2b979e605a6021438d,Suppress unchecked cast warnings for config options.
7f3f792017da8728e65d2756225c779f9a1c5e45,"Fix a bug where CookieDecoder sets the default maxAge to -1

.. which should be Long.MIN_VALUE"
10f26f3205e74050caddb11f525a7f6cbe501cd8,[#539] Potential direct memory leak in HttpContentEn/Decoder
aa8a761fe294f9b8e1489c961c4718bf1c77d0b9,"Better exception message

.. as advised by @jpinner"
df0aee22cbb77591e2c8ce7f71ea4b3727b7b133,[#540] Add a variant of ByteBuf.ensureWritableBytes() which does not throw an exception
ec2b29f0b6ab3c57fe0e75b2951f1136c8db8ed0,[#539] Potential direct memory leak in HttpContentEn/Decoder
83c21d70eef18dc6ab17971c5a4f7e028067e020,"Prevent Unpooled.EMPTY_BUFFER from being stored in the composite buffer due to a zero length slice, which causes reference counting problems on subsequent discardReadBytes."
b25996d024aaf55a414fc82423536617fe97fc85,"[#486] Make NoSuchBufferException give more useful message.

- Remove confusing exception messages
- Do not use default exception messages wherever possible"
67e6c4bdcaa0a1e2357344c9a0850f7bc771bcc9,"Optimize UniqueName.compareTo(other) slightly

Replaces a manual check of IDs with one built in to Java

At least it makes the code smaller!

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
6e3b9ed634df77933ccc10e545a2b265bdee4cf2,"More test cases: Round one

This tests the following classes more:

1: InternalLoggerFactoryTest
	Tests InternalLoggerFactory.getInstance(Class)

2: UniqueName
	Paired with #543, this achieves 100% code coverage with tests

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
b3a9ee1d71f539cec37017290141f3f543a2c05a,"Removes an unneeded assertion in UniqueNameTest

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
11d9334deed061656aa66f27ad1de563a0200f3f,"Adds some more test cases

This adds test cases to test against:

	1: DefaultAttributeMap / DefaultAttribute (100%)
	2: NetworkConstants (61.9%, functionally 100%)
	3: StringUtil (50%, functionally 100%)

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
2a06d68fae1d0997da3bef252c2f56c85f68fdbf,"Merge pull request #543 from CruzBishop/uniquename-opt

Optimize UniqueName.compareTo(other) slightly"
e2cafa9ec18530db4c417754fa3d15f06569a1b6,"Merge pull request #544 from CruzBishop/testcases-1

More test cases (Round one)"
a43f686d6479815896e1bba11943a6b70cf40649,[#527] Add Javadoc for HttpTransferEncoding
72ccf65093ec45bb1ebf9ce22a92ddc6fa251df1,[maven-release-plugin] prepare release netty-4.0.0.Alpha2
a0e34fd93a14c0b03bc6aef979bea792653ab128,[maven-release-plugin] prepare for next development iteration
0f0fffe488d5362899cb77755e456dae7f806c76,Fix release quirks
5c68333c0040e15ae05e817e8932e722766105be,Do not deploy testsuite
9028b611cef008625bfbc8f3756de445cdc98c3f,Retry deployment if failed
56211fee596a82d1b9e94ee01188e9d456b30fec,[maven-release-plugin] prepare release netty-4.0.0.Alpha2
0a43350c66da7ba3041ac77881a7a7696d5cefd5,[maven-release-plugin] prepare for next development iteration
4b1b0b8c18ffd4852e1257d72930d2d684303bf1,Fix a build problem where javadoc is not attached to the all-in-one JAR
68bef8cb99eb8c962838fe125a09f7600af65a77,[maven-release-plugin] prepare release netty-4.0.0.Alpha2
73720c422da3fe201b351cbb1957caa7d07010b2,[maven-release-plugin] prepare for next development iteration
00188a29232bf6782ad78a0686090c85314fc5f2,"[#160] No response to write if server is using SslHandler and client is not

- Make SslHandler close the connection on SSLException or NotSslRecordException"
3aaf7cf82bb9443e4a5a60f5cea8dc7da0f49762,[#160] Make sure the exception is fired before the channel gets closed
7e3bfaf24cefdb6ea5d36f9a21f9872e1fc49b27,"Generate channel IDs in a pseudorandom fashion

Requested by @psweeny in #547

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
d6023ef1290e6f3eb2fd169ac95dc6841a83dcfc,Merge branch 'master' into pseudorandom-channel-IDs
5dbb799a92de7f5f7dc3814aafd4778bea8b1214,"Merge pull request #554 from jfallows/composite-buffer

Prevent Unpooled.EMPTY_BUFFER from being stored in the composite buffer ..."
c9174e0733b21dd028f4cf932b30f4ca1c13fea0,Prefer discardSomeReadBytes()
ba6c0321808b5b8da0b795c7a66ee303ef636c94,"[#557] Provide pre/post handler methods to ChannelInboundMessageHandler.inboundBufferUpdated()

- Add pre- and post- handler methods"
cd9a36d4e76057f94d50e03a0c53b9d30d00be8a,"Merge pull request #553 from jfallows/aio-unmodified-buffer

Ensure unmodified buffer delivered via pipeline after AIO read completes"
ad7f7a2f253032142daf55190b5859b6c07faa0d,Merge branch 'master' into pseudorandom-channel-IDs
1e3fe3ffc3214fd1f0de1da7bcbfc6d6fc9ffd68,"AbstractChannel: hashCode() now returns the channel's ID

Requested by @trustin

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
ca952e11c09ff4687e06c1d55b6776c8d33811ab,"AbstractChannel: Remove function getRandom()

Requested by @trustin and @normanmaurer

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
65f8fbb82c29c3eefcd428f6eb341347a88828d5,"Merge pull request #548 from CruzBishop/pseudorandom-channel-IDs

Generate channel IDs in a pseudorandom fashion"
967b5424c579964512092426812a7c6b2001b9fd,Use Unsafe when possible to access AbstractAioChannel to prevent slow Reflection usage. This is kind of related to #528
778599baf87297619b362fa9d669f47d4d0c9c6e,Allow to adjust timeout of Selector.select(timeout) via io.netty.selectTimeout property. See #568
6a62c259ab983bfa7c53992b3c6c2214fc2c1858,"Merge pull request #566 from netty/unsafe_channel_access

Use Unsafe when possible to access AbstractAioChannel to prevent slow Re..."
ea3d3042061e18bcb01980b45903f9631c6d0d3f,Some javadocs love
100dd541bab0f4fdb1f2741abe6e926ba71f1b96,Rename ChannelHandlerContext.type() to ChannelHandlerContext.types() as it return a Set
2710af1b8a1a0a55e0109b42df4fd065be5d089e,More javadocs
f3c940d20810635cda3e6c0f19ec3a9f621fe1ed,Add ChannelPipeline.first/lastContext() / Cleanup
e55a1f11b54333697d0bf72047695bcb914c2333,"[#559] Fix SocketSuspendTest.testSuspendAccept()

- Reimplemented the test
- Fixed various bugs related with read/accept suspension found while testing
  - defaultInterestOps of NioServerSocketChannel should be OP_ACCEPT
  - There's no need do deregister and re-register to suspend/resume accept()
  - Occational infinite loop with 100% CPU consumption in OioEventLoop, caused by OioSocketChannel
  - Even if read/accept is suspended, what's read or accepted should be notified to a user"
fe4a8d6dc9a89e6b6834a341b11558b80f521473,Extract ChannelFinder into separate top level classes
518c44a8265db76f3638b688e35394491d1cc010,Remove a unused internal class
f78f4fc0ffadb388606d5551de78f578877a83a0,Remove a unused internal class
c565b59fe34531ee5fa84a213a5ca87624968569,Remove a unnecessary annotation
17ecbdd8047602b0acf62716153db6782c46b599,Better error message
709b3abd8384e6e7dcfed418efd75e49ee00655f,"Improve AioChannelFinder implementations

- Use copy-on-write map
- Fix a potential bug where the old implementation assumed that one 
  Runnable type always wraps the same Runnable
- Cache offset value instead of Field in UnsafeAioChannelFinder"
cc2ada0b6cf8f484ce5b3c681fb7f6e146082d57,Add missing license headers
a643bdd33199dbb41bf577914b263ddb199ee639,Fix a checkstyle violation
9a177d99bffbded5082a6600e4a65d018d9f2966,Make AioChannelFinder implementations final
1b810c4be6f77ff0a271bc51f483e11cd6841a76,Rename to the correct method name
37f8710f2b5fe4b0b82f418bd76e92b9efa41602,Rename DefaultAioChannelFinder to ReflectiveAioChannelFinder
a3f25da228d61d6912cf643946ad7d7e125fdc52,Remove unused parameter
dca860e0d554f3dabf42f314117f49809b43bc5e,Remove code duplication in OIO transport / Make concrete unsafe final
47f26d219d184159be0596d5a66e82a3827e1f21,Simplify ServerSocketSuspendTest
02f3df55a858fdd1531f759345e84fdcdefe9bd6,"[#107] Add support for closing either input or output part of a channel

- Add shutdownOutput() and isOutputShutdown() to SocketChannel"
3d44aeca50682a33747d3c6e41fdfccf93c597f7,"Merge workaround for epoll(..) bug into master branch. See #365 , #535 and #327"
a1b668bb2f3f43ddcb37e1e7a448e5a02e4a78c5,Fix checkstyle. See #535
bfdc28bd6739a4b10a544ce894d80d222a80922a,Ensure SocketShutdownOutputTest tests if half-closed socket is writable
d03de0f3ca51e5ffc4043683bd91e2ba6438c4ca,"[#107] Add support for closing either input or output part of a channel

- Add ChannelOption.ALLOW_HALF_CLOSURE
  - If true, ChannelInputShutdownEvent is fired via userEventTriggered()
    when the remote peer shuts down its output, and the connection is 
    not closed until a user calls close() explicitly.
  - If false, the connection is closed immediately as it did before.
- Add SocketChannel.isInputShutdown()
- Add & improve test cases related with half-closed sockets"
9580c417c688c1d824152d48abe844b7c66ec442,Javadoc
44bfc47a52bb3d1e68e9ef44dae1d4164a86abe6,Correctly convert to nanos. See #565
b4643c42aa771a5a673db1851af179e5041433ce,Ensure ChannelInputShutdownEvent is triggered only once
c4e7ecbb5d7a938a34e5dfa9e6f4b71aa29b2831,[#575] Sending EMPTYBUFFER via NIO-UDP results in spaming the socket
47045e12cd5a66dd489cd1a269e5214b0a47f1cb,Fix a checkstyle violation
59e511fdc6fbf55bb772f09a8598d8de5ae11a13,Better method names
68e86d8667f6488ae0b17fa0732a9e56126a3e3e,"[#576] UDP socket bind to specific IP does not receive broadcast on Linux

- Log a warning message if a user attempts to bind to a non-wildcard
  address with SO_BROADCAST set on non-Windows"
a1e8dad4ad5f5e15ff4d9a8c8890b1fecf8eaa64,Fix a bug in shutdownOutput() implementations where wrong ChannelFuture is notified
628c5598b326336f67feccb5e48a44838731763b,[maven-release-plugin] prepare release netty-4.0.0.Alpha3
f2538a996d0ff760f770a4576101b9a6506e8e80,[maven-release-plugin] prepare for next development iteration
85f47d639faf220ec33c676962db83a93d1d0957,"Use class names instead of fields to detect Java version

.. because some use patched JDK with backported fields."
00f737c3a485861972801632cff7c881a0fa2b7b,Move system property access operations to SystemPropertyUtil
e781bd0b1ee902bd404d4def91dac4c9c37a1bff,Disable epoll bug woakraround by default
5c347c5683b2ed1e5b4a3143ecd1d67d5f379732,Remove unused import
85f8247cef07c5ed3bcc6f40fba8f54bd186db5b,Fix compiler warnings
f1c07dbf0b2c47b94bc0509e30087347fc2ebd12,Fix more compiler warnings
7a77903af03e196b6172ca1fc88e47a15d66ffe5,Remove unused local variable
5a9d6e59c19308d1f9f9e6c78651d399caaa1fee,Remove unnecessary annotation
21c9c26ff8b177508d55ef21fb4392405242e157,Add SystemPropertyUtil.refresh()
37a80ddd086db97d3206d87909e2bd03c718d19d,Fix incorrect Java 7 detection
359d09bd4d508c0fc923543487dd24d543aedb4d,Merge remote-tracking branch 'upstream/master'
5395944499d7dc6239338b4c42f78cf59765ded5,SCTP channel classes ported to Netty 4.x
22cbaa489a6ed418679bb2e8616bd1fdf03c5fee,"Ported SCTP Transport
- Ported SCTP Echo Server/Client Example
- Added SctpMessage, SctpData and SctpNotification classes"
36ff79951bc05c89922df5db0ae2f829dd624730,"Merge pull request #584 from jestan/master

Netty SCTP transport 4.x"
1eea3cf5032b15347b4868b74afcc3fee46a32c3,Support unbindAddress and bindAddress for SCTP. See #560
09ad4faba98e5f7276a658a04b314ce26aec348d,Fix README
90d15c46272f4b83a35c2640ce1169a5fb8ff024,"Upgrade connection after completed response

Channel handlers above the HttpEncoder may delay the repsonse being
written to the socket. We need to wait for the response to complete
before upgrading the pipeline."
fb17af426372cb9c421f2f4593fe8032b5b3f267,"Merge pull request #586 from sprsquish/fix-websocket-teardown

Upgrade websocket connection after completed response"
c6436ad470bca66ed729886944d04f5152c1c51e,Also move the replacement of the decoder to the ChannelFutureListener for the websocket upgrade. See #586
150e8b4105888affcd9b9899d85d437dfd7ed40d,"WebSocket enhancements

- Refactoring and adding suggestions from Norman and Vibul."
722c63ddaa2f3a2ab859b66da27e55a84d4d7c55,"Merge pull request #587 from danbev/websocket-enhancement

WebSocket enhancements"
416c026efe5c6c584e7fa4bf2836208162bb151c,Upgrade client connection after completed response
2a56ab59c7eef2f87f719fc3c153bef6148ec9d1,"Merge pull request #590 from sprsquish/upgrade-websocket-conn-client

Upgrade client connection after completed response"
bd557a6330fc542f4344f01adb2fb12a6a1ceffc,Remove not necessary try / catch block. See #587
4353aa679491f7e7e30f107176bb054ca23b499e,Use Secure websockets if SslHandler is present in the ChannelPipeline. See #587
6e3919246226b2c05ee8e2b263e30482c51a28fb,Rename WebSocketServerHandshakeHandler to WebSocketServerProtocolHnadshakeHandler and also make it public. See #587
6c2053bae57cd09684433ec640708a17b41ce42f,Check if WebSocketServerProtocolHandshakeHandler is already in the pipeline before adding it. See #587
0233a3dd631284cfbc10786c96c1cfa63316b5b3,Close the channel after the response was written to the client on a WebSocketHandshakeException. See #587
8ab1ef143208c582b2f57e9dae66f49a737a03fc,Fix checkstyle
4ce85827eda444b7703717c7948f7b247227e655,Start to refactor bootstraps to share more code and allow for reuse
ec1339d77557d68ff29eb0e93a3332ddca307134,Finish the refactoring of bootstrap
281f73fe1ae3f1c054f19eb1df8312f7910a400c,Some javadocs love
d22480c0f4ae441f68252da15e50a5adb244633e,Add more javadocs and also two helper methods that make it easy to create new Clientbootstrap instances from an existing one
df72356d7d03882a2272fb03406051b7426e3319,Rename classes as result of descussion on #594
ded98ddaf9952770a366b90ccae1fdbacf59d514,"Merge pull request #594 from netty/bootstrap_refactor

Bootstrap refactor"
058dfd0a78214c794cfaad39f25a5c43f7587b78,Just add a comment to show that the code is related to #597
42685759dec119e6c992774b824dd653bdaa80ab,[maven-release-plugin] prepare release netty-4.0.0.Alpha4
3295145e88de2d7bd6ca45c0966641e5d75123b1,[maven-release-plugin] prepare for next development iteration
cc1e4d3bc7f328545291f14707aad36cdebd62a6,Fix BindException on OSX. See #600
516351b82cd3d4f5c1313ffc99cc13194973c02b,Add a basic unit test that I wrote while porting niosmtp to netty 4
0c157a94cbeece8b00de00994701724f83523f04,Only call ByteToMessageDecoder.decode(..) if the inbound buffer is readable. See #607
fd8db4eba2ea4b7fac17a189328ea7ae66c76d2a,Check if the remoteAddress is null before set it on DatagramPacket to prevent IllegalArgumentException. See #615
47eafa386c568a3332eaf7035d6ca8b799398296,"Added SCTP OIO Transport
- Sctp OioChannel/ServeChannel implementation.
- Changed interrupt handling in OioEventLoop.
- SctpOioEchoClient/Server Example."
db4a3a478920edad1df7b0d79f08b93766e611e4,Merge remote-tracking branch 'upstream/master'
bf22173ed13facae5492a8458c30157795d6508a,Added Multi-Homing in SctpOioChannel
b2a3ba815401ec41171182f6eb589a11eca4c19c,"Merge pull request #619 from jestan/master

Oio SCTP Transport"
a15213d751bf386678570d66f00812919ffcaf07,Cleanup imports and add javadocs
93b34e385624afb786e008bf34c969226ac5e8ee,Some more cleanup
256f55b2e9155caf2104e5dd3118e0d7277187a3,"[#608] Channel MessageBridge concurrency issues

Fixed ArrayIndexOutOfBoundsException caused by a race condition that the peer's inbound buffer is accessed concurrently."
0b71afb81c59036c9a345f67de4f902a4e7492c3,Improve the stability of ServerSocketSuspendTest
7c75dfb456823e510fe49b32f1ca89d26f701ea1,Remove System.err.printlns
cf7a55106ca824fdc31ab6fc6f22a7909a93508f,Fix checkstyle violation
b8ae8be96a24dc5c40ae01b184638a9d6f9a3fb9,Fix IndexOutOfBoundException when using CompositeChannelBuffer and the readerIndex is at the last position and an empty array is passed to read to. See #474
b0c6b701e407a3b1189b53a7514ccc88c40c4a22,Merge branch 'master' of github.com:netty/netty
b268f0b3334a231b0f929ba4d5292b7b6c576f47,Added SCTP Codec Handlers + minor refactoring
942f05d33673a9ca0bb5f3f0ca1552fa1b70b336,Corrected cmd args in SCTP Sample clients
0f0479547df4d1da6ab5085fcee56600e4826847,Upgrade to netty-build 10
a156f67804f5a55cc1673ed298cec4f8defd534c,"[#624] Add varargs constructor to MessageToByteEncoder, MessageToMessage(Encoder|Decoder|Codec) to implement default isEncodable/isDecodable()

.. and modify all their subtypes to take advantage of this improvement."
d49d02ffe490f956126db37a1abf6f82858aeff5,"[#610] alpha4: DefaultSctpServerChannelConfig options in current java 7

Fix a wrong signature in com.sun.nio.sctp.SctpServerChannel.setOption()"
a6bd91dce5da6eb8ae3ae2d1dd124f00aad042dc,Sync the default select timeout with 3.x
bd8ee64366ca657e5282e87865efa7c753e10ae9,Pull #625 from @CruzBishop selectively
2ecf26c8ebcfcd78fdfa13c6c78ba7f6f96c75b5,Fix #525 Add CORS preflight headers to HttpHeaders.Names
817309c7c880ac4ffeaf9e30cf9b5de7005e3608,Remove magic numbers from SslHandler
adebda156041d8edb88d322fd5d0557e64b99720,"[#441] Provide a better way to handle decoder failures

* Add DecodeResult that represents the result of decoding a message
* Add HttpObject which HttpMessage and HttpChunk extend.
** HttpObject has a property 'decodeResult'"
7514a82c3550690fb965e8c767519fec423b108d,Disable timeouts if they are set to 0
b923d0c51f586558eaf9df7cb8f35333367f9de0,Use supertype HttpObject instead of HttpMessage + HttpChunk where possible
41e0ef2e9ac5b19744e75392543632b21da498c6,"[#441] Provide a better way to handle decoder failures

* Update toString() of all HttpObject implementations
* HttpMessageDecoder does not raise an exception but sets decoderResult property of the decoded message.
* HttpMessageDecoder discards inbound traffic once decoding fails, by adding a new state called BAD_MESSAGE.
* Add a test case that tests this behavior."
bf808b3486d6669e2c5f1cb8a0be68efa1cf4b22,Rename DecodeResult to DecoderResult
9155f58c6418751d21dd6868851ef46cfe06e4df,Rename get/setDecodeResult() to get/setDecoderResult()
623956b838ad918fbd723c75de8ca9d71c742265,"[#441] Provide a better way to handle decoder failures

* Make HttpChunkAggregator handle DecoderResult properly"
045b621b3fd8b8968056224ccc7b03179b7e2762,[#441] Update HTTP examples so that they understand DecoderResult
94838ee274cbf5c1fa0fa2b621a8535dc11ae504,"[#441] Provide a better way to handle decoder failures

* Rename isPartial() to isPartialFailure()
* Add isCompleteFailure() and isFailure()"
1bb5ac110f45d4992d3588f3b75ef4ddb52707bf,"[#600] mvn clean package on OSX throws Exception

* Choose port randomly
* Ensure SO_REUSEADDR is not set at any case
* Ensure the port works for both wildcard and localhost"
eae7b2d6624782086d6911b02dff50eb1f24763a,"[#532] HttpStaticFileServer should generate an index page

* Add index page listing and directory redirection"
9f6505192c4a243f4c4930d4b51f8b023bf81a2e,Simplify if
f5e94d27e0a326f1ddda306d1c3bd1ed860f043f,"Add CORS headers

http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
https://developer.mozilla.org/en-US/docs/HTTP_access_control"
b3d568c4d2e3b89f00d63017edb71ab51cba988b,de-duplicate plugin versions
595e1067c7caf059d889181a5ada11d750d7c0c7,[maven-release-plugin] prepare release netty-4.0.0.Alpha5
820af50b636b2ae1176f24fc5a8dab38269b985e,[maven-release-plugin] prepare for next development iteration
7751daf2a47fc08f75469a83057aafca8de84c40,Add ACCESS_CONTROL_EXPOSE_HEADERS
64ebece730e06be174dbb9e7b4558bab7b5f32e1,Added SCTP Codec
6904b62c2f77cef039c2d10b6f05d717f71dcb66,Resolved conflicts in SctpData/SctpMessage refactoring
ce35386805f2efd0b97d60a56fe166e92f064387,Prevent cross-site scripting
8a75442419d136a893eb200868bd443027e53df4,Merge remote-tracking branch 'upstream/master'
7afa237f3f74c2e508d08a2501efd66601431c27,Forward ported SCTP Echo Testcases
59cd054fe3c0df5f8931aa15b5cf55eda0418939,Merge SpdyOrHttpChooser and SpdyHttpResponseStreamIdHandler into master. See #626
da7bcfa8f69a07e93e2c403b67ac3e17136d0128,Add tests for AioChannelFinder implementations
09d9f46e58b4504977f1a4c8475b260455f42303,"Merge pull request #630 from ngocdaothanh/master

Add CORS headers"
7eef61580e8e395964522200784564c667d71d25,No need to use a concurrent Queue with out new thread-model. See #626
53074bd1288807dd3a0a481fe9103e2f86a0f9bc,- make master an eclipse project
9b35513fa5afe5a11628103dc21c2bf0d140319a,server handler wasn't working due to field being overwritten in subclass
3a3e96acb8070459920ddfbe76ed02a08166c11b,"Merge pull request #646 from AtKaaZ/patch1

server handler wasn't working due to field being overwritten in subclass"
7958a0cbf282c5ac0dfb0393d4a9881d7a58adab,- undo eclipse project stuff
faa1961131b27a4d193c3da9096f764fe46bda8e,x
1f67ba86730d086921cddd38dcc10616920fd7b6,Merge remote-tracking branch 'netty/master'
7eefc8219a2dfa9953d4866186e7eb55fe59cb91,removed eclipse project files
b8fb48e90e4f9fc2131a196347231860961ae6b9,Merge branch 'master' of https://github.com/alex-berger/netty.git
826e56d9f4265c9460ed5beb4519dd761df03c11,removed bin from .gitignore
129c19c33ed3606f81934e07ada4c3b2fd070803,remove newline from end of .gitingore
ce88ae3889a2faf067a6abc58d027dfcacbc1d78,"Ensure that either SslHandler's handshake timeout or the handshake
itself (or its failure) take place but not both."
92a68f59be471e6dec4e214f0a7115b513596e5a,"Merge pull request #648 from alex-berger/ssl_handler

Fix race in SslHandler"
592f1fcc6085fd216ff95dd81f2372f97ad66d52,"Merge pull request #633 from jestan/master

SCTP Transport Codecs and TestCases"
6143626427670b167b54501ead1a4ee50a3dcdc2,Cleanup of sctp code based on comments in #633
e9d2ebea3d69903ecd00af94e8220de58b1aa81d,"Disable SCTP tests on platforms that not support them, also not run tests for sctp OIO. See #633"
d504d78cb1bf92be2ec3a7327a59525cc8c26cfa,Fix checkstyle
303fb80d341b5d6c71aa3fa1085227ea2cbde2b0,Make sure the TestUtils class will also compile on operation systems that not support SCTP by using reflection
9e6c616c353395b2cffdf2fae1947bd3a759d6ce,Introduce helper method to detect if a buffer is encrypted. See #657
6e98a04813d19d3d1144b6835a316c9150b9f711,Fix the detection of encrypted data. See #655
e7c6c880633830b0543566528bcc652157cb6bf0,"Fix releasing of resources in AioEventLoopGroup, as it missed to shutdown the AsynchronousChannelGroup before. See #659"
b291d857572b363239e63ac0cc3710af12e2033a,Reduce synchronization overhead in HashedWheelTimer.start/stop()
b76c39318d8edf39759b25990edcc4ef26bb493a,Make NoSuchBufferException message more useful
a6c4f651a7772afb0410206908169901ff0bdc81,"[#661] WebSocketClientHandshaker is broken.

- Remove HttpRequestEncoder after handshaking is complete
- Fix a bug in the WebSocket client example where it sends a frame even before handshake is complete"
8bab0aae9e443c6abce66ccb635ecae7d50f4fcb,Fix a bug in the SecureChat example where greeting is generated too soon
951c49f449a1fcc80517e4a15990555a5dfebc6c,"[#644] SslHandler should not defer channelActive event

- otherwise a user will have a misconception about the life cycle of the actual connection."
cbcabaf29b24fb4c04334c851c33ce9a278a3389,Add support for method chaining to ByteBuf
d3c270b0b562fb575a9a15c742542cb797af6ca1,"Merge pull request #664 from netty/method_chaining

Add support for method chaining to ByteBuf"
d9d8acf3311590f31197893427c6a24c5fe485ba,Fix NPE which accours when Netty was used in an Applet. See #669
ae839db383b7b21544e20b33c4dd35d39e1a6b31,"[#670] Intermittent IllegalStateException with ByteToMessageDecoder impl with bounded inbound buffer

* Ensure to call discardReadBytes() before giving up expanding the buffer"
279712a6a060ce3b77d76772aa398eafbdc255e1,"[#670] Intermittent IllegalStateException with ByteToMessageDecoder impl with bounded inbound buffer

* AioSocketChannel.expandReadBuffer() should not call discardReadBytes()
becuase it messes up with NIO.2"
f6aeb5ef77c2d2f046ad72e65ac81f4d748c84ee,Upgrade to apiviz 1.3.2.GA. See #676
5d51aed846a36e05028649c80fcd0f2d05d6ace0,Change ChannelInboundMessageHandlerAdapter.beginMessageReceived(..) to return a boolean that will be used to check if data should be processed. See #674
c38c1d0e6f0614ab9fa013347fbdb00a31ae7470,"[#662] Fix race in AioEventLoopGroup

- Ensure the event loop threads are never terminated before all tasks
  submitted by JDK are executed
- Close all open connections before terminating an event loop"
c43b9b4dd259412f3fa3c950f41658d74b1d84d7,"[#662] Fix race in AioEventLoopGroup

- Fix a bug where shutdown() blocks indefinitely sometimes"
985fa97c9be85270a304d385774593f6ee20fa31,Check if message is supported before cast. See #678
bd8c4fe05005ade9542c036d6c8e80273fd0606b,"[#679] Netty 3.5.8 breaks app on startup with NPE

- Get system property when requested; do not cache it.

Conflicts:
	common/src/main/java/io/netty/util/internal/SystemPropertyUtil.java"
63d3210cffed09ecefe2e9916a09c34026c7d7f3,NioUnsafe.ch() should return SelectableChannel
abd37dacd6af95eda478c7e6f6ecb6b8694b6a36,"[#681] Allow a user to access the Selector of an EventLoop

- Make NioEventLoop public so that a user can downcast it
- Add NioEventLoop.register()
- Add NioTask to let user specify what to do on select()"
3bc330d4773e7ec7cdf320bc7904932d54cb7dda,Remove unnecessarily split line
ddd0734f431bb33a3ec3e7cd1aa7d3d85578db96,"Issue #65: Provide distribution stats for HashedWheelTimer
First cut at implementing a generic abstraction layer for pluggable
metrics providers. This first cut is closely modeled after Yammer
Metrics. It remains to be seen if it is indeed flexibel enough to
support other providers.
Provide a default implementation of this new abstraction layer
based on Yammer Metrics.
Support pluggable Monitoring Providers using Java 6's ServiceLoader.
Use this new abstraction layer to provide stats on (a) number of
Timeouts executed per second and (b) distribution of absolute
deviation between scheduled and actual Timeout execution time in
HashedWheelTimer.
 * Interface ValueDistributionMonitor, a monitor for histograms.
 * Interface EventRateMonitor, a monitor for measuring the rate per time
   unit of specific events.
 * Interface ValueMonitor, a monitor for tracking an arbitrary datum's
   current value
 * Interface CounterMonitor, a monitor for incrementing/decrementing a
   long value
 * Interface MonitorRegistry, a registry for monitors that serves as the
   interface between Netty and concrete metrics providers as e.g. Yammer
   Metrics.
 * Interface MonitorRegistryFactory, to be implemented by metrics
   providers.
 * Document how to use Netty's new monitoring support in javadocs for
   package io.netty.monitor."
e5319b66003116acad1e068837f98dec9ac0593a,"Merge pull request #682 from obergner/issue_65

Add SPI to monitor netty. Also add stats for HashedWheelTimer to show how it can be used. See #65"
fb6ce4989a9c572c3423707153c42412c902810c,Javadoc fixes
43dc0bd8a3f674339d899104327d2a0dd208eda4,"[#275 & #686] Ability to pass a custom parameter to Bootstrap.connect() / Replace Bootstrap.newBootstrap() with duplicate()

- Add Bootstrap.attr() and ServerBootstrap.attr()/childAttr() so that a
  user can initialize the attribute map from the beginning.
- Replace newBootstrap() with duplicate()"
5a8486e39c69b011130ce10db62caea34f2d3a74,Correct test
71254e4bb506eb540f408269ece512eee5a5102d,Fix typos
9551af60455da3a061e2864461ad88381afc2da6,Skip Multicast test for OIO as it seems to fail because of a JDK bug on OSX
97038ea396ae99ead724ce10586d5e27fc6f1071,"Disable test for now, as it behave different on different os. Will fix it after the alpha release"
939ce4707138743474f779b03a169ea884629ff4,disable test for now
95de4db0f11bbcda368fe53e6e62f5d55a2e7526,[maven-release-plugin] prepare release netty-4.0.0.Alpha6
e3e0776c2032b6f67d468cc598c391dee56babe3,[maven-release-plugin] prepare for next development iteration
16eb4ec713cf5938a71e75a140c3eef3005b870a,"Revert ""[maven-release-plugin] prepare for next development iteration""

This reverts commit e3e0776c2032b6f67d468cc598c391dee56babe3."
afc687436aef134decc3ee79fbbb7c4310e97b3a,"Revert ""[maven-release-plugin] prepare release netty-4.0.0.Alpha6""

This reverts commit 95de4db0f11bbcda368fe53e6e62f5d55a2e7526."
7315490fcaea567113cd8833f3a0a12f632af8db,[maven-release-plugin] prepare release netty-4.0.0.Alpha6
87cc67306fea8b3941380c1e1ba5ea54d1461c9a,[maven-release-plugin] prepare for next development iteration
122051ba44b2ab87b6481c00683aa79b33e1ab0f,Only a few javadocs
24678e2d00e8bd3a6a411da147eabfaf488769fe,update docs on running autobahn tests
e726ff63d9651658910a29851f8c411a255d3c76,Cleanup
017936fccd8d21bcefb6b2526a6b60ea1b228115,"Merge pull request #692 from veebs/ws

update docs on running autobahn tests in master"
4696fcde1fa7a9123f4ba0fa88157e3836933345,[#691] Correctly handle SpdyRstStreamFrame
92f70690763e4e90dae1e76eabbd7c7765e7b640,Merge branch 'master' of https://github.com/netty/netty
93d0226c039e05af0d82b824997ec6ee8997265e,"Small checkstyle fixes

Netty can build again, now.

Signed-off-by: Cruz Julian Bishop <cruzjbishop@gmail.com>"
a9814fbf9330d8f2e2dbdd570045876841e903d3,"Merge pull request #697 from CruzBishop/more-checkstyle

Small checkstyle fixes"
be6ddb74aa9cd3f67ce04bfbecb799b181602d54,HTTP method should be case sensitive (RFC-2616 Sec. 5.1.1)
8c659331e38d1cc4a6dbcd30a9add7725f36ffcd,"Merge pull request #704 from jpinner/case_sensitive_method

HTTP method should be case sensitive (RFC-2616 Sec. 5.1.1)"
87ba8cb4b054c59bc699c21d48a7c2e8998f7e31,[#705] Fix SpdyOrHttpChooser
0526e1cb060e2a21fb47b33c3ea8f8f83a50b793,[#706] Fix SpdyHttpResponseStreamIdHandler which was ported incorrectly
4e3258973f2546125ff9cdbc86664fe2fff38f13,[#707] Fix IndexOutOfBoundsException which could accour when the buffer is consolitated in the middle of an operation
36ac52a4bdfc4116e03e798780cecc4f3a747b46,Port http multipart package. See #709
d293e6c3898f7254ad6a043f166fb076c8fe3647,[#707] Hopefully now the correct fix for it which also takes the index into account when consolidate
86b777a919da0c71d26b1a1d53c94396e4db2032,"[#710] flush() requests made before SSL handshake completion are not executed after completion

- Ensure SslHandler flushes its outbound buffer on handshake completion
- Enable SSL in HttpSnoopClient example"
57da8222a4359816b5ac7dbf9bcb889c10300513,[maven-release-plugin] prepare release netty-4.0.0.Alpha7
313f777491e25ceb76c7b5bafb8668dc4559c046,[maven-release-plugin] prepare for next development iteration
1a7e7a1bff51e4f4a6c76d4cb17478900dd56cb0,[#654] Fix race which could lead to some concurrent side-effects like raise a ConcurrentModificationException when using the nio transport
90c0481ecf6c69aa1d7368e4d3918e1616159059,[#712] Fix parsing dates in the past bug in CookieDecoder
994a8db8fc2e1f8014e490e1ec2dd08995a130a9,Fix overly-strong type casts
57aa842b6354af3898cbc7d71ae70ea2dfc4d8f9,Move private methods only used from inner classes to the inner classes
2ab38d8685b31fad23d4903fccb07ee85bb55676,Remove pointless bitwise expressions
1ec7f55ac6f4763e0e6533a7a530970bfb83ebb8,Simplify SingletonHolder by using interface instead of static class
8842f8ef9047a2f224f8bc2be4b2898aec6d4274,Add missing @Override annotation
96a769805bf93d5898da01b746b259998afd26a8,Fix utility classes - missing final modifiers etc
8c0e5626c234c92b2df9b2b59d2f4a26c53411e7,Remove concatenation with empty string
e21dc5925db23d560bd30afe49ee96e0608fd46c,Replace dynamic regular expressions with precompiled Patterns or new StringUtil.split()
3d364c7f75291bca7df0afd6a7efc50d45bde6da,Enum should not have a non-final value
957154c00579649d7d49aa6b66522988dfdeb8cb,Remove redundant no-arg constructors
02a43804d4f0bc364ac611a722a7dd0030f54a30,Upgrade netty-build to 11
bbcb035246423895b5ae73c323434784ac7b5245,Prefer isEmpty() over size() == 0 or length() == 0
58ba0de6591070a9461c70d4b5493a7a75b7919c,Remove unnecessarily qualified static access
b8f5ef0423c54511765549b728d3ee91ee76dfbc,Remove unnecessary null check before equals()
27dc582e2bb4888f082806756e2181bd463c8db4,Fix a regression in HttpMessageDecoder due to a mistake during yak shaving
8ad50a3e9c57d9f773240bc6f34e1ce5231d52be,Remove recundant type casting
a9cfde97f018aed9c330025e9eb9721050f1590c,Add missing final modifiers
a5a19efb4b360c8daec2489aadb214745641eeba,"Remove unnecessary this, parenthesis, and semicolons"
211b4059b14d19693c7a44313cd0eb51a79fe23d,"[#719] Handle http requests without an absolute path the right way when encoding them, which is adding / to it"
958d04a42b0b073a220c9fdf7d45d3bc228556de,Remove redundant throws clauses / Suppress inspections for some false positives
b9fbed49bdb8e758de39966b31ced423b7a580dd,"Suppress false positives related with utility class inspections.

IntelliJ IDEA inspection for private utility classes seems flawed."
5c57dd9f0d2f6050abf010ae4f88ab95da29c0fb,Remove redundant field initialization
23883d25ee0d660a3f17bbce584dcc0ebc690ecb,Remove various unnecessary qualifiers
0d0eb0abfb687033a8a829e415f354f2f88979fe,Remove unused imports
d6a0fe54fd866917d2fd7d13894cb7527563f467,Remove unnecessary throws clauses for unchecked exceptions
4e0f455e69152a3b25acd8bfa6be660c98784142,"Remove methods overridden but identical with the super implementation / Make constructors of abstract classes protected rather than non-sense public

AbstractWrappedByteBuf.capacity(int) should raise a UnsupportedOperationException rather than ReadOnlyBufferException."
3f4b3314cc4622302f1ed106a6314d3b1bc3c465,DefaultHttpDataFactory.MINSIZE must be final
9f2c1c47746a354ed59b49245d8314df77571d17,Use foreach loop wherever possible / Prefer String.contains() to indexOf() >= 0 / Prefer StringUtil.split() to String.split()
c77bac44a23e75fe258c433296f97185eb59d71a,Fix unchecked warnings
f77f13faf01a647163c6d74ef5cbf932fab47b49,Make classes static wherever possible
5a4b2ec07e991c9c1b7ed61b302b4f486f81bfc3,Replace keySet() + unnecessary map lookup with entrySet()
05c416b674d16270ebc02b923e3803d220e99e5b,Add 'static' modifier to the methods that don't need to be member methods
b4f796c5e3a89e17408e416e11169e400dc2ef36,"Use 'x' over ""x"" wherever possible / String.equals("""") -> isEmpty()"
0b30bf613d8568ef0c7d79e817d169e0fea9b2f2,"More robust localhost resolution

Ensure the resolved localhost can be bound and connected actually"
250c2545e6483cc781ea03425b79e95d19b31348,Fix a compilation error (sorry!)
5d45880b9ea338b56d62f395c6ddb1a89b27f510,"Fix a failing test

There's practically no way to test if the detected localhost is good if the user's environment is broken."
1cc104e1c02f5ee54979d8dfcba5aa4fb20d3503,Fix a compilation error
fa805c4c1308fd3a22d37e1ffcde96c0e898371b,Allow easier use of AIO transport via bootstrap. Related to [#725]
a07fb94fe78b1e324836536f6aadb8127aa99907,"Prefer ""str"".equals(var) to var.equals(""str"") / Add proper null checks"
61d872d6e2e4c8c9a271884335ba3498b593858a,Suppress false-positive inspection warnings /
91a61d7f432deb6af7cd0df2a2632a3ed8c86e07,Remove unnecessary qualifiers
361703b31960ba4bdfd1a9cd33535a418f950242,Remove unnecessary 'return's / Clean up QueryStringDecoder
aa7cd691df36db0c452b8e0dbcf71f75926f4a3f,Remove redundant 'else' branches.
18f1b1f1d06c12008b32ddd87379f365f39052c3,Replace a loop that runs only once with a single statement
1cb589a9502929c69955264ea1e3a27110a25f16,"Replace a loop that runs only once with a single statement (Second take)

Fix potential NoSuchElementException"
4dce19b8140db80fa1061cf056d817c83cbd2b50,Replace a variable with a constant wherever possible
9746bb20364c5fdfd182993a38fb6564012b2a3c,Make a member field final wherever possible
d78f5a4f766018def64ee01e9ebe610bddb1d12a,Optimize imports / Remove britspace
f1e382c89dbbc36ae1b116052b1ed8f780c0178c,Fix compiler warnings related with SCTP detection
15642f2cd8085536faf5364c8c6c1504ed3514b9,Do not call static methods via instances
b195190b2a630cd1b37f476a493aca54f1a0fe30,Remove an unused import
ea4a0e3535723387edc80321a02033588f8cccbf,Prefer {@code ...} to <code>...</code> / Fix deprecation warnings
aedf8790c33c60097e7384e73c3333b032c60a80,Fix various Javadoc issues / Do not use argN parameter names
6f2840193ab8faa7b2e8b597118b57cd533174ed,Fix inspection warnings related with JUnit usage
36c8eb02e82996e1c0c2e3826624fc3621741662,Fix parameter namings + some more
a05064d3ebd06a041258cd7b7a197da8818a0146,Fix more inspection warnings + compilation errors
ec7849ac0918fa7577cb8df453010962da80945b,Allow '_' in parameter names although discouraged
9ac522382a2ef8bc2009f7eaf525a7b41ff410cc,Fix visibility warnings from the inspector.
b3be15204d0389c31227ee16e0d3a1422341dc99,Fix 'channelFactory already set' error
45de76f58d6cf381cb7c33a3e3f6d1def34a856f,More helpful IllegalArgumentException message
e236f5b77d10fa807bed797817a5c1471e37dca0,[#154] [#727] Use maven-plugin-plugin to generate OSGi manifest
105f952f5de0d276e5b7c69057fbe16f369e3dc7,Clean up maven-bungle-plugin warnings
2d5028bfd6872f551bf33b9fba9b0dd416c0dd8f,[#729] Correctly handle urls with empty abs_path in it when issue the websocket handshake
d177fd5a17ffc8001573bca1a18a411392e487ba,[#735] Make sure the handshake ChannelFuture is notified after the right encoder is present in the ChannelPipeline
efaa5c2ff5a80ccf87d8e47a6dcf30761cf90e85,[#735] Make sure the handshake ChannelFuture is notified after the right encoder is present in the ChannelPipeline
3b729848dc075dac0ed449422be96d2eaff51379,[#735] Improve the notification of the handshake future
0bd73b8d80259504d20f3458e891fd42eedf00c4,[#732] [#672] Allow replacing an inbound or outbound buffer of a handler
b5d83a24074e5dfefd7489dc0fb5309b04bb35f6,Upgrade netty-build to 12
46d713970b624b01a4f4d4cfbbc8523e57e16c14,[#737] WebSocketClientHandshaker00 should set Content-Length header do workaround problem with proxy
d28eca7138217389631a406f7cb116f34a8f2814,[#740] Fix WebSocketClientHandshaker00.finishHandshake() validations
37d04c26a82c35c33678ba9cc38a5554dccde726,[#739] Potential NullPointException without checking the initialCtx's status
a0da613e86e2fc2fa2a8bf1179d4492bc9cad7d9,"[#743] Make the ""tail"" point to the last channel handler context. And add several cases for DefaultChannelPipeline."
97d07253e2933dbca0d08cd19072503506bda863,SPDY: fixed session status (internal error misdocumented)
ef26ffe9d83e625167a6025c7537fb674157bfab,SPDY: remove deprecated methods
5d2b41c094198c5e6df9297183530b16d0879880,basic support for socks5 codec
fea7475080b7408dcd7115c10f84edc98a6f94fa,[#749] Report non @Shareable handler name that has been re-added.
524fac5184d42acf40d1f9ad3c05a292b6ed957d,[#748] Upgrade to yammer metrics 2.1.4
434c19da33ee1d7a2dcce9f6efcf8db9e71adfca,Clean maven-bundle-plugin warnings
4107b08f29be35fd2e63f03e49f7f49dbf94578c,Only generate OSGi manifest only at all-in-on sub module to reduce the complexity to the build
40e53b9b6859ccfb622b14336a17f81462e584c8,Fixed exception handling to call the exceptionCaught method in the current handler. By default the handler will call ctx.fireExceptionCaught which is what was happening before.
ff14feeb54f8dccb310541707922ea78997f7af1,The handshake handler should not handle the exception and simply close the socket. The exception should be propagated to the WebSocketServerProtocolHandler to send the appropriate response and then close the socket.
2adebc4c54ae98565db8e2a3c02b2ffaa0c101fe,[#755] SPDY: fix header block values truncation in decompression
81e2db10faaf0389f4e1af8c7132210946203157,"ByteBufAllocator API w/ ByteBuf perf improvements

This commit introduces a new API for ByteBuf allocation which fixes
issue #643 along with refactoring of ByteBuf for simplicity and better
performance. (see #62)

A user can configure the ByteBufAllocator of a Channel via
ChannelOption.ALLOCATOR or ChannelConfig.get/setAllocator().  The
default allocator is currently UnpooledByteBufAllocator.HEAP_BY_DEFAULT.

To allocate a buffer, do not use Unpooled anymore. do the following:

  ctx.alloc().buffer(...); // allocator chooses the buffer type.
  ctx.alloc().heapBuffer(...);
  ctx.alloc().directBuffer(...);

To deallocate a buffer, use the unsafe free() operation:

  ((UnsafeByteBuf) buf).free();

The following is the list of the relevant changes:

- Add ChannelInboundHandler.freeInboundBuffer() and
  ChannelOutboundHandler.freeOutboundBuffer() to let a user free the
  buffer he or she allocated. ChannelHandler adapter classes implement
  is already, so most users won't need to call free() by themselves.
  freeIn/OutboundBuffer() methods are invoked when a Channel is closed
  and deregistered.

- All ByteBuf by contract must implement UnsafeByteBuf. To access an
  unsafe operation: ((UnsafeByteBuf) buf).internalNioBuffer()

- Replace WrappedByteBuf and ByteBuf.Unsafe with UnsafeByteBuf to
  simplify overall class hierarchy and to avoid unnecesary instantiation
  of Unsafe instances on an unsafe operation.

- Remove buffer reference counting which is confusing

- Instantiate SwappedByteBuf lazily to avoid instantiation cost

- Rename ChannelFutureFactory to ChannelPropertyAccess and move common
  methods between Channel and ChannelHandlerContext there. Also made it
  package-private to hide it from a user.

- Remove unused unsafe operations such as newBuffer()

- Add DetectionUtil.canFreeDirectBuffer() so that an allocator decides
  which buffer type to use safely"
dbbc6ad73f0180cd9f68cc79bc3bccbacca4e0f1,"Reduce the chance of RejectedExecutionException

When a Netty application shuts down, a user often sees a REE
(RejectedExecutionException).

A REE is raised due to various reasons we don't have control over, such
as:

- A client connects to a server while the server is shutting down.

- An event is triggered for a closed Channel while its event loop is
  also shutting down.  Some of them are:
  - channelDeregistered (triggered after a channel is closed)
  - freeIn/OutboundBuffer (triggered after channelDeregistered)
  - userEventTriggered (triggered anytime)

To address this issue, a new method called confirmShutdown() has been
added to SingleThreadEventExecutor.  After a user calls shutdown(),
confirmShutdown() runs any remaining tasks in the task queue and ensures
no events are triggered for last 2 seconds.  If any task are added to
the task queue before 2 seconds passes, confirmShutdown() prevents the
event loop from terminating by returning false.

Now that SingleThreadEventExecutor needs to accept tasks even after
shutdown(), its execute() method only rejects the task after the event
loop is terminated (i.e. isTerminated() returns true.)  Except that,
there's no change in semantics.

SingleThreadEventExecutor also checks if its subclass called
confirmShutdown() in its run() implementation, so that Netty developers
can make sure they shut down their event loop impementation correctly.

It also fixes a bug in AioSocketChannel, revealed by delayed shutdown,
where an inboundBufferUpdated() event is triggered on a closed Channel
with deallocated buffers.

Caveats:

Because SingleThreadEventExecutor.takeTask() does not have a notion of
timeout, confirmShutdown() adds a dummy task (WAKEUP_TASK) to wake up
takeTask() immediately and instead sleeps hard-coded 100ms.  I'll
address this issue later by modifying takeTask() times out dynamically.

Miscellaneous changes:

SingleThreadEventExecutor.wakeup() now has the default implementation.
Instead of interrupting the current thread, it simply adds a dummy task
(WAKEUP_TASK) to the task queue, which is more elegant and efficient.
NioEventLoop is the only implementation that overrides it. All other
implementations' wakeup()s were removed thanks to this change."
b1cd953d02e3929c9b86a408765272a6e2732f85,Adding WebSocket Example using WebSocketServerProtocolHandler.
d7d8503f5c14b9d5db31de094a2b3d0de7834564,"Add a line-based frame decoder with good performance.

Using DelimiterBasedFrameDecoder with Delimiters.lineDelimiter() has
quadratic performance in the size of the input buffer.  Needless to
say, the performance degrades pretty quickly as the size of the buffer
increases.  Larger MTUs or loopback connections can make it so bad that
it appears that the code is ""busy waiting"", when in fact it's spending
almost 100% of the CPU time in DelimiterBasedFrameDecoder.indexOf().

Add a new LineBasedFrameDecoder that decodes line-delimited frames
in O(n) instead of DelimiterBasedFrameDecoder's O(n^2) implementation.
In OpenTSDB's telnet-style protocol decoder this resulted in throughput
increases of an order of magnitude.

Change DelimiterBasedFrameDecoder to automatically detect when the
frames are delimited by line endings, and automatically switch to
using LineBasedFrameDecoder under the hood.  This means that all Netty
applications out there that using the combo DelimiterBasedFrameDecoder
with Delimiters.lineDelimiter() will automatically benefit from the
better performance of LineBasedFrameDecoder, without requiring a code
change."
5b68f0038273461592fd65cde077254f3bdbeeab,"Make CompatibleMarshallingDecoder discard the inbound buffer once TooLongFrameException is raised

(See #768)

Once too long object is received, CompatibleMarshallingDecoder has to
discard all input from now on, just like MarshallingDecoder does.
Otherwise, the decoder will raise more exceptions because the decoder
has no idea anymore where the object starts.

Before this fix, SerialThreadLocalCompatibleMarshallingDecoderTest
logged many additional exceptions raised by the decoder after test is
finished."
40373526ce096a7eafc409e3f39668afa11fb873,"Remove unexpected bad text

Doh!"
d7f0351a8545e00d96d65a20301c3aaf243364d1,Add JVM options for faster test runs
9018f8e5ca0223b31b2c87e01b9dfe59c51d3843,Enable assertions only for Netty classes
089d022e03f4caad2cf709907eba82c7464b920e,Remove redundant exception message
74749ec15d7f88e2fb364339d095f58702b8c6b4,"Implement Bootstrap.toString() and use it in the testsuite

By implementing Bootstrap.toString() and printing it for each test case helps us figure out which transport is causing a trouble."
918666481ea8fcba757690cc13633267f1384722,Ensure lazily instantiated outbound buffers are instantiated from the event loop
c661c344eddb3d5987d20b7ee7f13d8dc59ad233,Add proper toString() implementation for internal ChannelFactory impls
b33df8399eb15686450dba22957c15f768543ecd,fixing type on event/send argument
818a7b42a3a688bfbf60b32c7c50528fbb480fc9,Fix all Xlint:unchecked warnings
6208c628881b0211c7ac82f632d7b09c1f04eca5,Fix inspector warnings introduced by recent mergences
00c4b944e45e3d3245f1bae8a781c8a99905d533,Fix more inspector warnings introduced by recent mergences
95e8ec1db97e2bbf3be65185c7ac3de5525ded5b,"Handle the case where JDK notifies aync I/O handler immediately

After some debugging, I found that JDK AIO implementation often performs
I/O immediately from the caller thread if the caller thread is the I/O
thread, and notifies the completion handler also immediately.  This
commit handles such a case correctly during reads and writes.

Additionally, this commit also changes SingleThreadEventExecutor to let
it handle unexpected exceptions such as AssertionError in a robus
manner."
bfe2a96505b52fcc990d7e8e990c3a8676c42c5d,"Fix AssertionError from AsyncSocketChannel.beginRead()

An AssertionError is triggered by a ByteBuf when beginRead() attempts to
access the buffer which has been freed already.  This commit ensures the
buffer is not freed before performing an I/O operation.

To determine if the buffer has been freed, UnsafeByteBuf.isFreed() has
been added."
72e0acbe848a8f1727e9ec586b245db36defc082,Use correct timeout in AioSocketChannel.beginRead()
5f9090a7f037e566c511c02eb6ae73ca2f6774cb,"Fix invalid memory access in AIO writes

To perform writes in AioSocketChannel, we get a ByteBuffer view of the
outbound buffer and specify it as a parameter when we call
AsynchronousSocketChannel.write().

In most cases, the write() operation is finished immediately.  However,
sometimes, it is scheduled for later execution.  In such a case, there's
a chance for a user's handler to append more data to the outbound
buffer.

When more data is appended to the outbound buffer, the outbound buffer
can expand its capacity by itself.  Changing the capacity of a buffer is
basically made of the following steps:

1. Allocate a larger new internal memory region.
2. Copy the current content of the buffer to the new memory region.
3. Rewire the buffer so that it refers to the new region.
4. Deallocate the old memory region.

Because the old memory region is deallocated at the step 4, the write
operation scheduled later will access the deallocated region, leading
all sort of data corruption or even segfaults.

To prevent this situation, I added suspendIntermediaryDeallocations()
and resumeIntermediaryDeallocations() to UnsafeByteBuf.

AioSocketChannel.doFlushByteBuf() now calls suspendIntermediaryDealloc()
to defer the deallocation of the old memory regions until the completion
handler is notified."
e45ab1d1820c52c22065cf651aae22f5489a8867,Fix a checkstyle error
717bde05e279d214d699b6184cc46af201cafc10,[786] Fix possible corruption of first WebSocketFrame caused by WebSocketServerHandshaker*
32f2122e642e38d29f3e8c0bf606c8164ad3986c,"fix socks5-auth subnegotiation version handling

Conflicts:

	codec-socks/src/main/java/io/netty/codec/socks/SocksAuthRequestDecoder.java"
33c0c89fefbbf19807a8dd685d87565edf745f57,Remove unnecessary empty lines
f9225df0a971a5777f4270f23fd56b66208db13f,Add back support for FileRegion. See #668
760cc95115d5aad4d4d585bd0678a8436f635636,Cleanup
17d77ed160517d8b1b56f6e96a201bd634e76738,[maven-release-plugin] prepare release netty-4.0.0.Alpha8
85c570505b4d551e71d6ac647ab740eb775f64fc,[maven-release-plugin] prepare for next development iteration
9c0b2ad75c8a2e071f0befe7158c0dcb646f9c12,"Update netty-build to the latest version

From this commit, checkstyle considers an unnecessary empty line as a
violation."
a9af028077d2ede3c152622bfc401b3bbe13a4e8,[#787] Move the socks package to the right place
51e6519b67cc947e5375038e26595d9bbbc4d4bb,"Replace UnsafeByteBuf with ByteBuf.unsafe() again

* UnsafeByteBuf is gone. I added ByteBuf.unsafe() back.
* To avoid extra instantiation, all ByteBuf implementations implement the ByteBuf.Unsafe interface.
* To hide this implementation detail, all ByteBuf implementations are package-private.
* AbstractByteBuf and SwappedByteBuf are public and they do not implement ByteBuf.Unsafe because they don't need to.
* unwrap() is not an unsafe operation anymore.
* ChannelBuf also has unsafe() and Unsafe. ByteBuf.Unsafe extends ChannelBuf.unsafe(). ChannelBuf.unsafe() provides free() operation so that a user does not need to down-cast the buffer in freeInbound/OutboundBuffer()."
16b05def59bf321ce5d6354e852ff198ccfcca27,Fix possible NPE which accour if the inbound/outbound buffer was not lazy allocated yet
038bcfc4ffda87735602d402b615869f5686114d,[#792] Implement freeInboundBuffer(...) and freeOutboundBuffer(...) methods in ByteToByteCodec
8be43903e1db0cb568fcaaa1727b16c5d636bfee,"Added more Javadocs to the 'replace' methods, see Netty issue 756."
e5a8958ed6b4e33ef554ce6627e3e1cb5aeba4bd,Fixed some 120-character line checkstyle problems.
312810d415da381fc6cd53358a4e986e7bdc4f63,[#795] Fix WebSocketClientHandshaker13 and WebSocketClientHandshaker08 finishHandshake() method.
bf8345999c43bd32cffb2e64673a1a1d588135af,Fix release of buffers in ByteToMessageCodec and MessageToMessageCodec
321b18d4d190cc14977bca4ff5246d4ed0cdccba,"Fix test failures n LocalTransportThreadModelTest

testConcurrentMessageBufferAccess() assumes the outbound/inbound byte buffers are unbounded.  Because PooledByteBuf is bounded, the test did not pass.

The fix makes an assumption that ctx.flush() or fireInboundBufferUpdated() will make the next buffer consumed immediately, which is not the case in the real world.  Under network congestion, a user will see IndexOutOfBoundsException if the user's handler implementation writes boundlessly into inbound/outbound buffers."
3e783e1b5e9d067271bc8e398230e056379baa75,Fix bug in DefaultChannelHandlerContext where ByteBridge does not handle bounded buffers well
2903b91e66c6e6615b7ba67c8c6ff286e392ad95,"[#798] Not call fireExceptionCaught(..) for outbound operations as the future will get notified anyway and so it is redundant.

Outbound operations are those which are part of the ChannelOutboundInvoker interface."
2704efc056bcb60ec96b65b8b66b25ecf9246ef3,Added documentation to websocket classes.
0c5fd38eb625482e99f57558987703d4a67260d7,#722 - Make WebSocketClientHandshakerFactory a static utility class
9d42acbc2af596da834d84b75a0a9aef73f2ff0d,[#803] Make sure the right EventExecutor is used after re-register a Channel to another EventLoop
b47fc775223b9cd1b839ec5a18c26b17c5050d60,"Add PooledByteBufAllocator + microbenchmark module

This pull request introduces the new default ByteBufAllocator implementation based on jemalloc, with a some differences:

* Minimum possible buffer capacity is 16 (jemalloc: 2)
* Uses binary heap with random branching (jemalloc: red-black tree)
* No thread-local cache yet (jemalloc has thread-local cache)
* Default page size is 8 KiB (jemalloc: 4 KiB)
* Default chunk size is 16 MiB (jemalloc: 2 MiB)
* Cannot allocate a buffer bigger than the chunk size (jemalloc: possible) because we don't have control over memory layout in Java. A user can work around this issue by creating a composite buffer, but it's not always a feasible option. Although 16 MiB is a pretty big default, a user's handler might need to deal with the bounded buffers when the user wants to deal with a large message.

Also, to ensure the new allocator performs good enough, I wrote a microbenchmark for it and made it a dedicated Maven module. It uses Google's Caliper framework to run and publish the test result (example)

Miscellaneous changes:

* Made some ByteBuf implementations public so that those who implements a new allocator can make use of them.
* Added ByteBufAllocator.compositeBuffer() and its variants.
* ByteBufAllocator.ioBuffer() creates a buffer with 0 capacity."
ad10518fcaed957a7f056988fb1ffa09b7a4b620,Fix the incorrect snapshot version number
6339feaa8ff2b55249cae9909851d74a6554dc78,"Apply advanced JVM options to benchmarks / Fix duplicate uploads

- Add common optimization options when launching a new JVM to run a benchmark
- Fix a bug where a benchmark report is uploaded twice
- Simplify pom.xml and move the build instruction messages to DefaultBenchmark
- Print an empty line to prettify the output"
e37aeb38d612362820d4a66cb278ab9c0705aecc,Add the original copyright
8945ce17ad5613d746b7c781e31610763263f44e,Update license notices and dependencies
c4db51e85d9e4bf9f3c72d81ea8386fe9dfdeecf,Refactor AIO Transport to allow to use Bootstrap without the ugly hack
d1d9f131da5698ac797a78f1b4e71f28afbba463,"Tell NioTask the cause of unregistration

- Add the 'cause' parameter to the channelUnregistered method"
be6cc9c3243cb0a70a986e22e6b249426d2ab939,Fix inspection warnings
9e973bbffc1cfe49317bf87951657aa8935bb2d9,"Port rebuildSelectors() from 3.6 to 4.0

- Fix #813"
8e1a6c6cf5c01aab8670a13d9b6f99d7db9e10c9,"Add ByteBuf.maxWritableBytes()

- Fixes #806"
5a4a59406b759b042b514b73f23c06e4360f39e7,"Merge ByteBuf.hasNioBuffer() and hasNioBuffers()

- Fixes #797"
1f72e53af39d5ee0b9347ea3766281071291f971,Remove redundant copyright headers added by IntelliJ
02a6e85febbd9e20adee72740f52bc35f1f257b7,"Add methods that add/remove multiple ChannelFutureListeners to ChannelFuture

- Fixes #811"
96dc3f983fd8be1fd4069fcf1f97d77023a1c516,Refactor AIO Transport to allow to use Bootstrap without the ugly hack
5ffb495746e55c440273ec7cc4741ab28e1f9017,Do not allow suspendIntermediaryDeallocations() after free()
eb23c9d27c84ab7cf2c33f28d2b761673a41b435,"Add missing 'operation(args, future)' for 'operation(args)'

- Fixes #818
- Fix inspector warnings"
d8c569a71b1785535e9f82a690e07588f2e266ed,Make ChannelFutureNotifier accept multiple ChannelFutures
42f6a27235fd43494fab902d9054e22b60b1e64b,Allow modify the config even before the channel is registered to the eventLoop
6eb7de04e763eeb863704b53ca1a71d3b758533e,Allow to access localAddress and remoteAddress even if the channel is not registered yet
caa698f2351d3fc10eaa3fdaedc9bb73558152fe,"[#819] Allow for easy method-chaining in ChannelConfig and its sub-types

This commit also introduce a new interface which is called AioSocketChannelConfig to expose AIO only config options with the right visibility.
Also it change the ChannelConfig.setAllocator(..) to return the ChannelConfig to be more consistent with the other methods."
ba3c795fdfbc03d5422107051000f218047f3d5b,Adjust ChannelPipeline to support method-chaining in a consistent way
33134b13438cbbb7cc6bd9a35982b5550fa0df92,Ensure PooledByteBuf.init() is not called with null memory
03e68482bba54aa0c0d35649ac9c090b0ab75473,"Remove ChannelBuf/ByteBuf.Unsafe

- Fixes #826
Unsafe.isFreed(), free(), suspend/resumeIntermediaryAllocations() are not that dangerous. internalNioBuffer() and internalNioBuffers() are dangerous but it seems like nobody is using it even inside Netty. Removing those two methods also removes the necessity to keep Unsafe interface at all."
def12a171cc59618e65f8a1878729c8149898294,"Rename ChannelBuf to Buf and ChannelBufType to BufType

- Fixes #825"
ca93b624ff5b1ec6e245d58bcf1f28be96f564ac,"Add IllegalBufferAccessException and checks on MessageBuf impls

- Related: #827"
a8f5efdb262bb9d55dcb71752f7cb41138ce6d7c,"Add proper boundary / freeness check on ByteBuf impls

- Fixes #827"
8b82ff5ce09fe9748c18bbf3d55b3d4eb108ccb9,Fix checkstyle
3f9441f4c18ccf41482629327e5b0dd6470620fe,Add missing free() on SpdySessionHandler buffers
39250873ae7c3d8c1017db11b1f715838f2688f3,Add some javadocs
e59ac8e79b14aaf5ac9899234d0aa8b82a4e00ce,"Do not call inbound event methods directly

- Fixes #831

This commit ensures the following events are never triggered as a direct
invocation if they are triggered via ChannelPipeline.fire*():

- channelInactive
- channelUnregistered
- exceptionCaught

This commit also fixes the following issues surfaced by this fix:

- Embedded channel implementations run scheduled tasks too early
- SpdySessionHandlerTest tries to generate inbound data even after the
  channel is closed.
- AioSocketChannel enters into an infinite loop on I/O error."
949435d10542b8167d2ffb87e15c226ea5d99765,Fix checkstyle
5a467b69bf58c4c92d0af9a5f12eed6ac68efddb,DatagramPacket should be final
310a87a51d1abfee9e1f2441adeae31748d61ed3,"Fix #814 - Prevent IllegalBufferAccessException on write() and flush()

- Also fixed a incorrect port of SpdySessionHandler
  - Previously, it closed the connection too early when sending a GOAWAY frame
  - After this fix, SpdySessionHandlerTest now passes again without the previous fix"
42d466c97f68ba5406de8a717b1ca3fcfe068cd2,Remove cruft
b7b17209ea96937848f9d76a23e9344ab6e30cb9,Next round of javadocs cleanup and fixes. Also limit the visibility of FailedChannelFuture
6d93c3fb252a3dbbca6589a4ab01479b030225c3,more javadocs
8d89e4817785d425a9fa653861181d838cd619f3,Add javadocs in the oio package and also fix some intellij warnings
7b0ec599d6cf3164c3eb4e36f4db024eb311521f,Fix config
f6735f8cc98ce6d44d635ca3adf6cc66444b2ccf,Add javadocs to AIO and also fix a few warnings
43e40d6af660615561d069a7f0e1894a8dbff282,Add Snappy compression codec
3fc3401c0865510c906f41d78a4651fe36656b5a,Remove bad Javadoc in SCTP classes.
4229b23a510c19c662ceba5949391f701807e8ae,Fixed SCTP testcases #632
44142efe55bb01c5bff3953a8b2d6aee9b76c6d0,Fixed OioSctpChannel event loop issue #632 by using 3 different selectors
b6e83dff4f70cf75462cd34b4243e6f901a1558e,Add javadocs and also some parameter checks in DefaultFileRegion
0e017db89a3646bc39ea3ee8de67f0341b044a30,"Return the new buffer's capacity is same with the requested capacity

- Rename capacity variables to reqCapacity or normCapacity to distinguish if its the request capacity or the normalized capacity
- Do not reallocate on ByteBuf.capacity(int) if reallocation is unnecessary; just update the index range.
- Revert the workaround in DefaultChannelHandlerContext"
fdeff3855da0f8872d6d9df0951f42da4040c1eb,Move ChannelInputShutdownEvent to socket package as this is where it belongs to. Also added some javadocs
35c01660da784a5ae12829589ad86ea15b56cedb,Merge branch 'master' of github.com:netty/netty
67da6e4bf945f771607454dff40334990396ce7b,"Remove the notion of ByteBufAllocator.bufferMaxCapacity()

- Allocate the unpooled memory if the requested capacity is greater then the chunkSize
- Fixes #834"
e353540d47ff5bbd03cc5eca4930f6440bcce4bc,Move snappy codec to netty-codec
b4fb6a49ee4b30f78a066fd3d5ff33fbffb9c9df,Remove codec-snappy from the module list
937c0481e0a1bc173dd5ddf1371d38ce13fa10d8,"Do not use slice() to get the content of HTTP msg

- Fixes #794"
78ccfeedf90206bccfd8857b31a5573a055525a1,Save memory copy
92f1a81f479686419d631c5d84f142d4a9ade9ba,#751 - Added support for legacy websocket v7 in order to pass SocksJS tests
11047aaa69280581b581eff084da471525172490,[#832] Add javadocs which explains how to workaround the problem
77c01d252ee80effb6e28ca0919171254c80e385,Fix visibily of ImmediateExecutor and add private constructor
a1368f0fa8b6275dc1e72b8bbe749b1c4fd0c6fd,Some javadocs fixed to remove dead links
d9b26dab295ea6efbdde9eb2a2b0fbdf05970462,Remove get*() from the methods to match the rest of our method signatures
db0459ea9ccda8a4b12069375d6c6bf8fd6a9a3d,Fix javadocs of IdleStateHandler
695665a4cfc1259971321a050ad38146126eafc1,More javadocs fixes
1f9d165583172bcb764827e259421e3a1f098802,[#836] Correctly reset timeout on sendFile(...)
94dc09c33d41135c62ad524fd88ff580ff5b7639,Tighten up visibility as the user should use Channel.new*Future
43d13064d17df55a48a5b05c712c13b69de7da46,[#837] CombinedChannelHandler must pass sendFile(...) to the wrapped ChannelOutboundHandler
a1baeeb8c069153682bbb3597f3bc1be54afe4f7,Mark IdleStateEvent as final and add javadocs
d2060ee3f194445aab0463ed0f4a08ca1af8169e,Add more javadocs
5d6d849acd2120272d4fff962bd238a6777955bb,"Mark final, add javadocs, add checks"
7a9d9d6a88069d949647deffedd1a2f86f2903e8,Fix checkstyle
62bf98af8cc53d5f87ead0fd77937471eaa51b9e,More javadoc fixes
42a77eda9b656a990bc9e6280050ac2b3279e09b,And again javadocs cleanup
7db47dd0d049ff17cea52dfa3ca0d688f3dd2047,Finish javadocs for common module
e4ed551490b1b814492927775458f962230894ed,Move shared methods to the AbstractEmbeddedChannel class and add javadocs
3e31af68e44ef6439382fcd3270d46d203bc9af8,More javadocs cleanup
ef555d268c1805881ffa61ead995b7b7eb8ca134,Add more javadocs and replace some abstract methods with noops as we often implemented them as noops
a819d26f5c68ab8cde9fe13b7b12ee0bd8060070,Remove ChannelHandlerLifeCycleException and just use ChannelPipelineException as replacement
b004066f37bf9d4cc2d394f268e40f4b8dd403fe,Javadoc fixes and remove some uncessary casts + checks
8a7bc2c6068d699df21fc1b1f6326e8ede69b930,Add a lot of javadocs to make usage more clear
5b44fe6e65152377bc93756abab5b1acd80dc077,More javadoc fixes
b8140333236727188397497da1c6cc34ba377d31,[#847] Let CompressionException extend CodecException
ff3dcffd49ebfed58376e43c79667a4e89e48e00,Almost finish javadocs for codec module
9098d069b0cf1bfb0e85e1d9362fc931dbd8936a,Make FailedChannelFuture and SucceededChannelFuture final
fc4b205bc40af225d7f706bad2aac71f5676b877,More javadocs
e05b071b41ed2da28e27277ca0c50f0919738e50,Javadocs update
7d79587ade90054364b88cf141262af5e745766d,Make package private
6ef1729d0666bb19fb0865a5e78a06f45925ba1e,Fix javadocs for ChannelPipeline
e0d42df77b8b22657dba0605a960c4586bf6bfaa,ServerBootstrap needs to have a localAddress defined
ae859c2de969f7a5b86c35ccc0b81b291defd71a,Fix checkstyle
71b089cb3bf30706a9da17bd91f0a67146732059,Add javadocs and cleanup
a9fdb682be84f79e5d314acf8894bd8cc799200d,Add javadocs and some small cleanups
2ea45950f100bfaf9324c53f38ce49de59f9b555,Javadoc fixes
5bd3648b3d84343c7c58e3400a82e4dd0ddf6445,[#845] Enable PUT of files above 2GB
852f546b5b4b844e6191f3bf2f3716085f5f2cda,[#846] Tighten up visibility
6b9f7065a24324e094b7a067ecdb27861d774287,Simpler and more comprehensive method naming in monitor
85e16840841bf036c0ce1b094e5d33aa47731f90,Simpler method naming in Timeout
5adb37de3d0e3625941ef2b42cdd2cc3fb4bc1c1,Port traffic handler to netty 4
5a4a52a81774925de66a60809191b63cba810528,[#857] Correctly handle CancelledKeyException
6db7250ed934accfba0e36f4fce90de2e81008c1,Javadocs added for SCTP stuff
a20aba87ab37236f25f53957e4f75345697ededd,Remove get prefix from Sctp methods to be more inline with the rest
88838413c75a319ad76c9ebcb9b0deea262266e0,Javadocs and cleanup intellij warnings
64351ad7d603d1604a51cecbf446524f6e7ad158,[#861] Let SctpMessageCompletionHandler fire inboundMessageBufferUpdated() only if needed
e2b240799c2943b7e478948d03f4f4e0e62d6ca1,[#857] Check if the SelectionKey is valid before access readyOps()
213c1e3d234135a5d33e333079f662af2f8f823b,Replace sun.net.util.IPAddressUtil usage with own implementation
5d13c7d27b96b4dafa3431c88fa246b21791ae84,Merge IPUtil and NetworkConstants into IpAddresses and also make naming of methods consistent
0fb0037eab86b74e62935ab1d46e83bf8f81acb0,Rename IpAddresses to NetUtil
738d382fbc8902f0dfa53ff9d5e6d6df00d0e7ec,"Added test cases for NetUtil methods, if we can`t convertAddress we return null"
c80b1bb66e91e3e0528c8372f8a11af43f73e7de,[#872] AbstractNioByteChannel and AbstractNioMessageChannel should be public
5aa679fec74f749bd68278c1b42a51e2da2dd8f9,[#840] Generate the tarball with top level directory
b49b3d9c567855a2bca71c8f069155104011b06b,[#879] Notify correct ChannelFuture for queued FileRegions
926a20f105b9206efcc3a618b430f5fce01481ba,[#880] correctly use methods which take a ChannelFuture as parameter
0909878581d7dc7923c55e7f44ce6db5976efed4,"Read only when requested (read-on-demand)

This pull request introduces a new operation called read() that replaces the existing inbound traffic control method. EventLoop now performs socket reads only when the read() operation has been issued. Once the requested read() operation is actually performed, EventLoop triggers an inboundBufferSuspended event that tells the handlers that the requested read() operation has been performed and the inbound traffic has been suspended again. A handler can decide to continue reading or not.

Unlike other outbound operations, read() does not use ChannelFuture at all to avoid GC cost. If there's a good reason to create a new future per read at the GC cost, I'll change this.

This pull request consequently removes the readable property in ChannelHandlerContext, which means how the traffic control works changed significantly.

This pull request also adds a new configuration property ChannelOption.AUTO_READ whose default value is true. If true, Netty will call ctx.read() for you. If you need a close control over when read() is called, you can set it to false.

Another interesting fact is that non-terminal handlers do not really need to call read() at all. Only the last inbound handler will have to call it, and that's just enough. Actually, you don't even need to call it at the last handler in most cases because of the ChannelOption.AUTO_READ mentioned above.

There's no serious backward compatibility issue. If the compiler complains your handler does not implement the read() method, add the following:

public void read(ChannelHandlerContext ctx) throws Exception {
    ctx.read();
}

Note that this pull request certainly makes bounded inbound buffer support very easy, but itself does not add the bounded inbound buffer support."
4e77bacdf793dc647552a3c21b75da04a2eba20b,[#873] [#868] Split ChannelFuture into ChannelFuture and ChannelPromise
e0a6dc0ac3aa75c897e3961cc021ec7f13d6de6d,Remove ChannelFutureProgressListener
1e9652b47ae9e0afbbebff3eb60af743a9c059b6,Fix a bug in AioSocketChannel where recursive doBeginRead() is allowed unexpectedly
8cf9f529198e3cbeedf2f07b9d0d4d5b9d619e0a,Add new ChanelFuureListener impl that mimic the old behavior of Netty 3 and so allow to also call fireException for outbound operations
93fd73fbbf2054a6785bf58bcf40bfdd7c91bbfb,Fix a bug in AioSocketChannel where inboundBufferSuspended() is triggered even if the channel is closed.
89a16fe01e0ca10d73de2e8c057dc58d331fb56a,"Fix a bug in NIO transport where inboundBufferSuspended() is triggered even if the channel is closed.

- No non-static wildcard import"
5161ca733c330e21fa0f1b89ba4d464791600d52,Move utility method to abstract base class and correctly handle expand of buffer also for OIO
2960af851a4e9992a1d9671621bfb10ef2fe76c8,Extract the utility classes related with SSL to the util package
7d80182e512ab01d7348ef0ca71c85073d837a0a,"Fix a bug where SslHandler does not respect the startTls flag

- Fixes #856
- Add a dedicated test case: SocketStartTlsTest"
218afba1f25de7883a5e9edd3f48f081a7b36e30,"Do not set 'Content-Encoding' if the target encoding is 'identity'

- Fixes #769"
103edc446740baced069a1bd1e6b844f3ff59b95,"Make ChannelConfig.setAutoRead() triggers Channel.read() if autoRead was previously false

- also rename JDK socket and channel variables so that they are less ambiguous"
923dde7a5f4d2a47785ba9e874eae8a31d130844,Do not auto-start read operation
0abfaf20e4633f221673becfa724ad14b62bf3b3,Revert 5161ca733c330e21fa0f1b89ba4d464791600d52
4a1aa377731d10d61fbcae8485eb373d7367a14e,Re-ignore ServerSocketSuspendTest (unignored by mistake)
37a3f2e3b83637c250902fc2cd2aa29f2eec36ca,[#887] [#866] [#883] Add unified interface for Message oriented protocols and also use direct buffers for them
ccb5409f581dc423a1356cbfee7b662498d16d4f,[#884] Split SCTP transport into extra module
364b7d143088cee783c9274d887c621022d9650c,Make sure the Unpooled.EMTPY_BUFFER can not be freed and the capacity can not be changed
2f6e17f6817d2f122c9b5f3eb94b4cb28bd3179e,Make sure we catch UnsupportedOperationException for derived buffers
712a6cfe8f95c13a2f10c7914702a0cc1d87ad3d,Safe copy of buffer for test
bd093c4ab0a87227474e80a1e0500b976ff25961,Don't spin the CPU so much in tests
3a52cc410aac560dbc56b32034606879125d7f90,"Add some of the metrics mentioned in #718

use single static initialization of available metrics monitor registries

* This changes the original implementation to work in a similar way to
how slf4j selects and loads an implementation.
* Uses a single static instance so intialization is done only once.
* Doesn't throw IllegalStateException if multiple implementations are
found on the classpath. It instead selects and uses the first
implementation returned by iterator()
* Class left as an iterable to keep the API the same

add yammer metrics to examples to allow them to publish metrics

publish the number of threads used in an EventLoopGroup see issue #718

* seems like the better place to put this because it sets the default
thread count if the MultithreadEventLoopGroup uses super(0,...)
* It also happens to be the common parent class amongst all the
MultiThreadedEventLoopGroup implementations
* Count is reported for
io.netty.channel.{*,.local,.socket.aio,.socket.nio}

fix cosmetic issues pointed out in pull request and updated notice.txt

see https://github.com/netty/netty/pull/780

count # of channels registered in single threaded event loop

measure how many times Selector.select return before SELECT_TIME"
8f7fba2d393d32ceaae88312fb4c5a5d03e17b7e,Optimize AbstractByteBuf.adjustMarkers()
5526153459104bff2812c952a947576114419dd8,[#882] Add a PartialFlushException which will allow to notify the user that the flush/write was only partial succesful
cf2fbf7883bdd61f2df7844eb058af0b12af779d,Fix a link in ZlibWrapper
26595471fb58524dde69b9ecc5d6a31060a5983d,Call Freeable.free() if a Freeable message reaches the end of the ChannelPipeline to guard against resource leakage
20aa2e1968501fbb4b0977b91d43fd865b42063e,[#844] [#867] Add UDT transport
0d76e329a04cea5d00c60b0e855208a8ccd59358,Add example which start a server in a applet to show there is no issue anymore. Related to [#689]
7277536ca6dbb82a4d48ecb9d7794569994ee1cc,Remove unnecessary finally block
dd6b7969b752724dcd16d1d4fbdd9f34ebaa2a55,"Give a handler more control over how its buffers' read bytes are discarded.

This pull request adds two new handler methods: discardInboundReadBytes(ctx) and discardOutboundReadBytes(ctx) to ChannelInboundByteHandler and ChannelOutboundByteHandler respectively. They are called between every inboundBufferUpdated() and flush() respectively. Their default implementation is to call discardSomeReadBytes() on their buffers and a user can override this behavior easily. For example, ReplayingDecoder.discardInboundReadBytes() looks like the following:

    @Override
    public void discardInboundReadBytes(ChannelHandlerContext ctx) throws Exception {
        ByteBuf in = ctx.inboundByteBuffer();
        final int oldReaderIndex = in.readerIndex();
        super.discardInboundReadBytes(ctx);
        final int newReaderIndex = in.readerIndex();
        checkpoint -= oldReaderIndex - newReaderIndex;
    }

If a handler, which has its own buffer index variable, extends ReplayingDecoder or ByteToMessageDecoder, the handler can also override discardInboundReadBytes() and adjust its index variable accordingly."
aa69d628f1b17ae612bd65cbd95501f1171f987a,Add ByteToMessageCodec.isEncodable()
8d5fd0839fcad574a00462667f1fbcfb6eb62382,Make ByteToMessageCodec.isEncodable() public like other similar methods
8d0785da3634e4ae7190acfcb0fb08667ff393b3,Rename MessageToMessageEncoder.freeInboundMessage() to freeOutboundMessage()
4a3d73724f99933de673c0927529e6ed2034c828,Make all encoder/decoder methods overridable in MessageToMessageCodec
b58a8f0106e65e3cab6126ee401c686c8234af45,Add missing codec operations in ByteToMessageCodec
ef692b0c38bd4de7f051e9b2b2a94488af818c63,Add missing decodeLast()
102563ec8f99a0ab64340b7e453a055305247a44,No need to override ByteToMessageCodec.decoder.discardInboundReadBytes()
5c2be33cae7184254ffe0d12fd34faf6f3c83ee1,Delegate to the actual encoder/decoder if possible
5d2e0688ab7e55492ad5be9c6c0136fb481c8033,Fix checkstyle
b742dcc209376508a66495940363796b90bad25a,[#902] Remove usage of generics for output of Encoder/Decoder to make them more flexible again
b6fcf3acc40b948aee5d96f71d40631a46ef110b,Simplify DefaultChannelPipeline
8586d43b230930ef9c46a9ec435f5633bb0ae43d,Fix DefaultChannelPipeline.toString() / Remove unnecessary conditions
b9352ded138c5318761f23dd3864f39978118fed,Fix a bug where prev/next context is not always set
46e364e7b7e9ecf318b1e05e5702494b67ef207d,Remove unnecessary parameters
137f29ba6571beb32ff47aa178509e5eb1704094,Do not read if a channel is inactive
7755a8267415ab9d8b432e87dab4397e14553880,Revert mistakenly committed test change
d5a7057c3fcf613dc6269039a2c320c54267a72f,Fix inconsistent module name
c094abad7b14fb16827b13e5671665753be9ecad,[#561] [#912] Add Rxtx transport
0c3732cad5a28ced358c7d5a60da028012ec83c8,Fix invalid module name format
4528c793ba78a8b2d134d14eec0370a823b4e899,Fix naming issues in RxtxChannelConfig / Format cleanup
8cba7654639abe554f10d6333473670a7ab51b0d,Indentation
b5e6350bcb3615ca5eaf7dfb073903e5192fb4fa,Fix compiler warning
793a5714650f0b6cefc6014207c16eed3aa20c3e,Fix a runtime type cast exception when calling RxtxChannel.local/remoteAddress()
3c9d912355e4b2c53b60fb82090cef3297960293,Use InetSocketAddress wherever possible / Tighten the return type of Channel.parent()
eb337ff5a789cf85be33e496175c40cd72ef85f4,Fix various inspection warnings
3fe9a58f41be973b023a21c5d40cd5cd62f21ed0,Fix checkstyle
665d022e82df18490780fe6929e700e21b0b0fc0,Use a heap buffer from the allocator because it doesn't seem to cause OOME anymore
753d0bfbae7d3e21d5ac4ef1074e06bce4c8df24,"Remove the memory option previously added to avoid OOME

We don't see OOME anymore"
340da3e97b403b9fb78e31881d1f2903f3257e4c,Fix infinite recursion
5bd8b41a58be4c46bbbd5ad894df9ad9a8d1cd14,Use Number.reverseBytes() instead of custom impl
ec5ad7b22c866fea7f15d97f59ff13f1825120bf,[#921] Fix NPE which can be thrown on bad-timing when using WebSocketClientHandshaker07
8975406b86ac470607e45401ed21437d47fb1f58,"Ensure the outbound buffer is not freed on write completion

- Fixes #919"
366c6c86dcbddff4af8ae197284d19a8b40617ed,Remove redundant dependency version
f7a076e0eacf6e65e0d0169a16b893667515aa65,Clean up netty-metrics-yammer pom.xml
bfa3445bb3f71963f09653ee2b1e696a29383361,"Remove netty-metrics-yammer from example dependencies

.. because it pulls SLF4J as a runtime dependency"
5b5b39a60611be3d9268c7891e8c26eba7100af0,[#916] Only access Cleaner if it is really present to prevent errors on android
896bbb67b6a65c5a51f718cb6479fec033ff3ccb,Use sun.misc.Unsafe to access a direct buffer if possible
64ae8b6a37249d099b5043ca39dc37c626e993ee,"Replace and merge DetectionUtil and DirectByteBufUtil into PlatformDependent and PlatformDependent0

PlatformDependent delegates the operations requires sun.misc.* to PlatformDependent0 to avoid runtime errors due to missing sun.misc.* classes."
75b2dd592a5b4b55c0d243213003a2c57292c11e,Merge branch 'master' of github.com:netty/netty
e564157381e0d2a23aab97ea50cfe0eb79dd6cc1,Fix one checkstyle and one compile error caused by the last commit
04bae9bceb10653556a251a4dfa31c28502eb811,"Use sun.misc.Unsafe to access a direct ByteBuffer

- Add PooledUnsafeDirectByteBuf, a variant of PooledDirectByteBuf, which
  accesses its underlying direct ByteBuffer using sun.misc.Unsafe.
- To decouple Netty from sun.misc.*, sun.misc.Unsafe is accessed via
  PlatformDependent.
- This change solely introduces about 8+% improvement in direct memory
  access according to the tests conducted as described in #918"
eb91a6d4e6e67b234e784494cb70dfbecad90e6f,[#924] [#914] Fix high CPU usage which was caused because the OP_CONNECT flag was not cleared after the connect was complete
49bf02ce09cb0f672b965a2d53222e33636beda6,[#929] Implemented multi-homing opertions in SctpServerChannels and SCTP Javadocs cleanup
a03bc6ea1dce0d2ce458e0f01c7611edadff3d70,Fix a bug where freeInbound/OutboundBuffer() is not called when a handler is removed from a pipeline.
e263769a55f2f42963d3e1e5559f813c5118ac4f,Fix a bug where the buffers are freed too early when a handler is removed or replaced
573a723dc23b7dc854d78f86d8fe4ca435bc5aa2,Fix a bug where ChannelPIpeline.remove/replace() fails when its channel is not registered yet
57153079a53b1738436e55a8b07f0e57b6e43615,"Chrome requires the :version: header in SPDY_SESSION_PUSHED_SYN_STREAM frames otherwise it issues a HTTP_TRANSACTION_SPDY_SEND_REQUEST_HEADERS and a SPDY_STREAM_ERROR saying ""HEADERS incomplete headers, but pending data frames.""

Ported from 3"
1354b4a1ac0b18316e28c2f0bf2e8145b4ddfd2d,"SPDY: allow empty header values in SPDY/3

Ported from 3"
f75b6b142c7cb95566ce102be206fa951dbeeb19,SPDY: fix regression in SpdyFrameDecoder.decodeHeaderBlock()
c20d8758179698fa5880a91d4044fc5984134f30,"Merge pull request #934 from jpinner/fix_spdy_regression_master

SPDY: fix regression in SpdyFrameDecoder.decodeHeaderBlock()"
983a70805c831f1bfbad4dbccb29d68d406a085c,Moved sctp transport classes from io.netty.channel.socket.sctp to it's own subpackage io.netty.channel.sctp
201df99ee0080f26184a2dcb742278ef84623226,Rename from io.netty.transport.* to io.netty.channel.*
337f5bbb8e12580e03274c15e90ccf702da6cc90,"Automatic diagnosis of resource leaks

Now that we are going to use buffer pooling by default, it is obvious
that a user will forget to call .free() and report memory leak. In this
case, we should have a tool to determine if it is a bug in our allocator
implementation or in the user's code.

This pull request adds a system property flag called
'io.netty.resourceLeakDetection'. If set, when a user forgets to call
.free(), the ResourceLeakDetector will detect it and log a message with
detailed stack trace to tell where the leaked buffer has been allocated.

Because obtaining stack trace is an expensive operation, I used sampling
technique. Allocation is recorded only for every 113th allocation. I
chose 113 because it's a prime number.

In production, a user might not want to enable this option due to
potential performance impact. If a user does not specify the
'-Dio.netty.resourceLeakDetection' option leak detection is disabled.

Even if the leak detection is enabled, the overhead should be less than
5% because only ~1% of allocations are monitored.

I also replaced SharedResourceMisuseDetector with ResourceLeakDetector."
506474f56951c2191070839cff24dd37a9c8dc13,"Overhaul pipeline implementation for clarity and memory efficiency

This pull request cleans up our pipeline implementation by moving most
inter-context traversal code to DefaultChannelHandlerContext.
Previously, outbound traversal was done in DefaultChannelPipeline while
inbound traversal was done in DefaultChannelHandlerContext.

Also, to address the memory inefficiency issue raised in #920, all
runnables are lazily instantiated."
b7de868003691e9c72e8995273dfcd20245f680a,"[#677] Overhaul HTTP codec

This commit tries to simplify the handling of Http easier and more consistent. This has a effect of many channges. Including:
 - HttpMessage was renamed to HttpHeader and the setContent and getContent methods were removed
 - HttpChunk was renamed to HttpContent
 - HttpChunkTrailer was renamed to LastHttpContent
 - HttpCodecUtil was merged into HttpHeaders

Now a ""complete"" Http message (request or response) contains of the following parts:
 - HttpHeader (HttpRequestHeader or HttpResponseHeader)
 - 0 - n HttpContent objects which contains parts of the content of the message
 - 1 LastHttpContent which marks the end of the message and contains the remaining data of the content

I also changed the sematic of HttpResponse and HttpRequest, these now represent a ""complete"" message which contains the HttpHeader and the HttpLastContent, and so can be used to eeasily send requests. The HttpMessageAggregator was renamed to HttpObjectAggregator and produce HttpResponse / HttpRequest message."
895bce6cd53c35adb890699cb8e34da804447479,[#917] Move transport depending ChannelOption to the specific transport to make it consistent
f136eafd5eff217aaf169f50d35bd7fbb33b9308,[#943] Fix CanceledKeyException which can happen on frequently deregister/register while using the NIO Transport
34820511ff677667d46c0447f72527a7842dfa42,"Second HTTP overhaul

- Rename message types for clarity
  - HttpMessage -> FullHttpMessage
  - HttpHeader -> HttpMessage
  - HttpRequest -> FullHttpRequest
  - HttpResponse -> FulllHttpResponse
  - HttpRequestHeader -> HttpRequest
  - HttpResponseHeader -> HttpResponse
- HttpContent now extends ByteBufHolder; no more content() method
- Make HttpHeaders abstract, make its header access methods public, and
  add DefaultHttpHeaders
- Header accessor methods in HttpMessage and LastHttpContent are
  replaced with HttpMessage.headers() and
  LastHttpContent.trailingHeaders(). Both methods return HttpHeaders.
- Remove setters wherever possible and remove 'get' prefix
- Instead of calling setContent(), a user can either specify the content
  when constructing a message or write content into the buffer.
  (e.g. m.content().writeBytes(...))
- Overall cleanup & fixes"
540bc995494eb9b9a68ad5347980df5b8a0475f1,Take advantage of invocation chaining in HttpHeaders
3b79008eda1315e7515aadaeac7224b4cda073ad,"Change the WebSocket API to use HttpHeaders instead of Map<String, String> for custom headers / Cleanup"
4ee11cd36fe579d23cf0a36507e8fe27e9ac2862,Fix bad test name
e95d3de1ffd09a7e4896482a396b7e7120f0476d,Fix a bug where HttpContents are freed too early
a192cfdbf0ca1a7959d87c51ef00d0f72be02450,SPDY: fix improper use of SYNC_FLUSH in SpdyHeaderBlockZlibCompressor
5b17307b1f20061f2273bcef37aa072f9ca10f04,"Merge pull request #946 from jpinner/spdy_fix_compression_master

SPDY: fix improper use of SYNC_FLUSH in SpdyHeaderBlockZlibCompressor"
d806e3bf81823b6c4ba51274545124a564f6631b,"SwappedByteBuf.unwrap() should return null

Fixes #945.  For swapped wrapped buffers, it should not return null."
ad15155f04e8d5eb136fcebb541457820573b8c1,Ensure cascaded derivation of a buffer does not result in an infinitely nested buffer.
f568aa42f08fbd0f99e30607d5b0e05579bd50ef,Hide the constructors of ChannelOption to force using dedicated option type
dfbecb796c0beda55c066c873771f507a93cc3bb,"[#910] Make use of ByteBufHolder in SPDY, HTTP multipart and WebSockets to allow for buffer pooling"
5a82dccbc540e6a0155a9cf23091a5c9bc43a63a,Tighten visibility
eacc474cda79a3f739a3019b391767a59d28f9ba,Remove 'get' prefix
4472fe9795357d2f623df503c45a8005cb20a3d5,Remove 'get' prefix
737a3508546a125e900be9d1bb123952c0a81f20,Fix checkstyle
8a9e602a663c77af2e7e521ca4a9a7f38fc54262,Prevent possible ClassCastException
677886f470f5ead42ce6b725efea9dfaca86194c,"[#907] Prevent IllegalBufferAccessException which could be triggered if inboundBufferUpdated(), flush(..), write(..) was triggered after the channel was closed"
16f729cd95a6be1c79d86f54984bbd6fab84966b,[#907] Prevent IllegalBufferAccessException which could be triggered if inboundBufferUpdated() was called once the channel was closed
2c7be32393f8b16c6c39b4506590b56bdddd71b2,Tiny optimization
24acfe7008587990bd42ccbdd680d07bc233fe76,Remove io.netty.monitor as discussed in #922
f670a7c923fa9ccd6c9703b82af2230408415d25,Enable resource leak detection during test
d0afe6cad0eafb0f79d4b38c2e172be9bbb1f0c5,Consistent exception messages
b5c87b0f9c467aa7bb29eac90518bcf2ab69dad7,Fix failing tests
ba8c8171fa8b8ebdf3bc748cb7d41257f860330f,Fix leaks in buffer tests
cfa300f4315ffac89fdc1bba0673ce77eb3f98ef,Fix APIviz panic
4dd462d0b501d15ec5b1adba2438d9d2a3c106cb,[#907] Stop flush if one outboundbuffer was freed and do the same for inboundBufferUpdated if an inboundbuffer was freed
f2d84f75d67cf2c1b89f5c6aebab999c29f26e73,[#952] Allow to switch to single message decoding mode on the fly
e8636050ca2a098232491bb9ea8a5913a4062e49,[#864] Switch to single decoding mode on the protocol upgrade to prevent races
b60e0b6a51d59fb9a98918c8783265b30531de57,"Modernize InternalLogger API and enable logging framework autodetection

- Borrow SLF4J API which is the best of the best
- InternalLoggerFactory now automatically detects the logging framework
  using static class loading. It tries SLF4J, Log4J, and then falls back
  to java.util.logging.
- Remove OsgiLogger because it is very likely that OSGi container
  already provides a bridge for existing logging frameworks
- Remove JBossLogger because the latest JBossLogger implementation seems
  to implement SLF4J binding
- Upgrade SLF4J to 1.7.2
- Remove tests for the untestable logging frameworks
- Remove TestAny"
d8f0e3fdf7f96fed869288ba44f21ed56aa6adb6,Add missing udp option
1295f6d3315c3d3d4152575ec9325b6d73ba0913,Fix formatting
76d7829d38803f607329a987b6c8d31a7a528338,[#960] Fix calculation of writerIndex() which was incorrect and so result in truncated DatagramPackets when using NIO
8b72a4c1e21093b8d4f523e54f0ad6b78f0ead13,Remove netty-metrics-yammer as it does not exist anymore
57e504a7e66d91b030148b3a63302116f042b5ae,Add javadocs to the *ChannelConfig interfaces to make clear which ChannelOptions implementations are expect to support
c1e827fd721dfe2da997f4f68cb89b47b0a1f4a9,[#942] Add an option to disable decoding of chunked transfer encoding in HttpObjectDecoder
b20e59721720d9d444b13dd2a438144c090c6c55,Add RxtxChannelConfig and tighten up visibility. Also support method chaining
082b5f0dff8de1c1e5e830a7c2346f6794ca239a,"[#962] Read data as soon as it is present in OIO and not wait till it match Buffer.writableBytes()

- Also add a new abstract class called StreamOioByteChannel which can be used by OIO channel implementation which are Stream based as a starting point."
29bed32a89d20024d171bc46973ea99b9c6dd965,[#963] Fix invalid free-up of messages if they are only passed-throught in HttpContentEncoder and HttpContentDecoder
7316a3c65c433ac89ba9844f4b34cf55761bdb51,[#965] Allow to adjust the SO_TIMEOUT on the fly
4192222b384d0da733d42bce740bb2f00ff8bd7d,Rname StreamOioByteChannel to OioByteStreamChannel
318328bb064eee893bc14c82772d7ddcc3d7589f,[#957] Netty/Transport/RXTX: Add an optional wait time after opening the serial port but before configuration to allow the serial microcontroller to reset itself after opening.
a91887cda745ead701dc80a0ceb6b78d40885de8,transport-udt tests should run only when provider class can be loaded and initialized
7b6cbdbb1e60435c539cc45c9452c35436b03c93,[#964] ByteBuf.readLine() must return null when no more data is available in ByteBuf
ee9f30a2b95f220071383b77556c85d2c0ffde9a,*ChannelBuffer* -> *ByteBuf* and ChannelBuffersTest -> UnpooledTest
54af70f0674f93d76d399701da1a0f03647d4bac,"Bootstrap thread safety

Changed options and attrs from LinkedHashMap to ConcurrentHashMap to
avoid a possible ConcurrentModificationException if a thread was
adding/removing options/attrs while another was calling Bootstrap.init()
or Bootstrap.duplicate()"
4ac3bace0f0578f8b84b3d3a2334d36448447f37,[#972] Correctly mark the ChannelPipeline once a ChannelHandler was removed and because of this a buffer was freed
a25f7fa2e5207a83413c2c4b07cd960c03bfda2c,"Revert ""[#972] Correctly mark the ChannelPipeline once a ChannelHandler was removed and because of this a buffer was freed""

This reverts commit 4ac3bace0f0578f8b84b3d3a2334d36448447f37."
3f72add89a41b3d94309bccb0d253515c0543b65,[#976] Fix exception which will be raised by ChannelInboundHandler.discardInboundReadBytes() and ChannelOutboundHandler.discardOutboundReadBytes() if the handler remove it self from the pipeline
b9aaf9a1670cd247b4177a26e3cf55b3293b849d,[#977] Stop processing messages/bytes in a loop when the handler was removed from the ChannelPipeline
9da01417b25bca25af70f27246ab961166cd85bb,[#973] Use static IdleStateEvents to reduce GC pressure
cc278d45c2f6a3d1eeb1c449e4a1b0a83c56c04d,Disable test as this let fail the build 80% times on osx and slow linux servers. Need to investigate
a27d1cc36595588896fbbd2ddeb0e5ee68c9901d,[#986] DefaultChannelHandlerContext.fireUserEventTriggered(...) uses correct ChannelHandlerContext now
d7bfd44e1093740c573f855972b73ea19eccd8bc,"[#982] [#977] [#858] Allow to transfer the content a ChannelHandlers inbound/outbound buffer on removal/replacement

This changes the behavior of the ChannelPipeline.remove(..) and ChannelPipeline.replace(..) methods in that way
that after invocation it is not possible anymore to access any data in the inbound or outbound buffer. This is
because it empty it now to prevent side-effects. If a user want to preserve the content and forward it to the
next handler in the pipeline it is adviced to use one of the new methods which where introduced.

 - ChannelPipeline.removeAndForward(..)
 - ChannelPipeline.replaceAndForward(..)"
a54217053f54e06a6f2f8f89709b1568e5d00827,[#988] Fix typo
c5ccaee5065a52110a4124505002d6afeb7c13ca,"Fix a bug in HttpPostRequestDecoder where character encoding is ignored when reading a line

- Fixed #992 (backported from 3)
  - 9650cda163e0266a0f42495dc9201617e2a1f410
  - b38bde2d2b7e4ab99844e3018ebfd9f61c7028de"
238e03f75bf7d73b22b475f6f070223857613cd2,"Add setters and getters back to Http Objects

* This is done because we noticed that the previous change limit the usage more then it gave us any benefit. Now it is possible
  again to rewrite the url on the fly or reuse the objects when writing a proxy and so limit the GC pressure.
* Fixes also #979"
3843cfd7024691e84f2468c20e84bdf605e7558f,[SPDY] Factor out headers into extra class like we did in http and support method chaining where possible
291293a6dcc49bd61a004c11ce44d59a14675bf0,[#980] Automatically trigger a read operation if isAutoRead() == false but we only had a partial decode
788d7e9b8bba11682c1013b6345e7831b36557ca,"Remove Bootstrap operations that require a promise and add various ad-hoc bind() and connect() operations

- Update examples to use the newly added bind() and connect()
  operations."
64e6c4021d4cdb71e1433da8c0080107b47a1bd0,Use the clearer parameter names that indicate the address is for Internet connections
bd0339ce1af5d6f27172eb7a722be2f4036196cb,Fix buffer over-run in Snappy codec when emitting a copy that leaves < 4 bytes remaining
7c50c1e2e64a1b2400e2e823d5ffb1242a79b4de,"Make Bootstrap and ServerBootstrap implement Cloneable and rename duplicate() to clone()

- Fixes #997
- Replace duplicate() with clone()
- Add copy constructor for simplicity
- Can now clone invalid/incomplete bootstrap
- Upgrade to netty-build-14 to disable SuperClone checkstyle module
- Finalize class hierarchy so no subclasses are introduced"
86135a408049d53b973a357e14aa93455c9b5eec,"Make ServerBootstrap final

- Related: #997"
23438de66f82c72720b092c539bb430995722d2d,"Move AbstractBootstrap.ChannelFactory out of AbstractBootstrap and hide AbstractBootstrap from a user

- Fixes #998
- Also generified ChannelFactory"
03de5f479a56f96827229ec6af97f2fcf348d813,Fix build errors
1bb003d9ae31ca0fa52cc115feb9116b5f78b401,"[#995] Replace AtomicReference usage with AtomicReferenceFieldUpdater

This will safe as an example 2gb mem when have 10 DefaultHandlerContext instances per connection and the connection count is 1000000.
Also kind of related to [#920]"
b1b0319bbe07e171351df55ab1e2c676e91cf4bf,Fix build errors and warnings
05d16cd361c37de21426e6af053d1bc8a10054af,Made Bootstrap and ServerBootstrap copy constructors private as suggested
33c9f3f1e5a6dd0e1f685b0ea168e90dec6ef3ec,Relax ServerBootstrap type constraint to support UDT properly
cff2edf75d5cc9c397dff14f918755912f8d4dcb,Remove not used enum
641db5cdfe558ad56ce9ff54dc203b63be34e85a,Only write the header as it should be
97ea338bceeb58139203b3394d3260bf8749bdd6,[#971] Fix a bug where the HttpContentCompressor was try to start compressing on an empty response
82f876f7db96810e16648ca3afd3eaad4a0298ad,[#999] Refactor UDT transport to make use of the ServerChannel interface
eeab6767db852d251bb86a7f4363fb31c9f07d03,Tighten up generics on ServerBootstrap again as it was fixed in UDT
604b359d9e31857b775bae3864c79faecea19ff0,Use InetSocketAddress(0) if no localAddress is specified for connect() operation in UDT
152c969eab2d780993686e57798ae7467058ec17,"Make Bootstrap and ServerBootstrap thread-safe

- Additional fix for: #970
- Use LinkedHashMap again to save memory consumption
- ServerBootstrap now makes a copy of child parameters so that modifying ServerBootstrap after bind() does not affect the already-bound servers. This also makes child channel initialization potentially faster due to reduced garbage iterator."
39357f3835f971e6cc1a0e41a805fa1293e7005e,"Enable TCP_NODELAY and SCTP_NODELAY by default

- Fixes #939
- Add PlatformDependent.canEnableTcpNoDelayByDefault()
  - Currently returns false on Android. Will change if necessary later."
073517dc63257020396f8ecb1f3bd8d1cfd1717f,"Rename localtime to worldtime so that a user thinks it's a local transport example

- Fixes #1003"
071b067b3f370c3eb6a0e5b4f8a730169c6d0445,"Add missing file

- Related issue: #1003"
b46760f93fd1b50c7aa4562395a3173fc1e1239c,Upgrade to netty-build-15 to fix build issues
2d9cc9f63beb5d0c381320ba18ae7b573d2612ee,"Allow to specify the mode the encoder uses for form params. This allows it to be used with OAUTH

The OAuth 1 spec has small deviations from UrlEncoder.encode's output.

+ Percent encodes the parameters
+ Added tests to verify
+ See relevant OAuth section
http://oauth.net/core/1.0/#encoding_parameters
+ Detailed explanation http://hueniverse.com/oauth/guide/authentication/"
2ad1451ce8211df9ce12db48908b531948977de4,Fix semantic of DefaultAttribute impl on setIfAbsent
db37652f2a472f105e73a97e46d68d2d63238284,Add compiler options to find unchecked/deprecated code
1f2aca02da00d0492b20849383a12bde2d365ae9,Add more compiler plugin options to make compilerArguments works
ec013bf2d346ab1c5468210886d2368f3544f88a,"[#983] Force the user to implement an actual ChannelInboundHandler or ChannelOutboundHandler

For this ChannelInboundHandler* and ChannelOutboundHandler* was made package private"
42c65cca3a523a030cd8afc81f5642220f62f084,"Make MessageBuf bounded

- Move common methods from ByteBuf to Buf
- Rename ensureWritableBytes() to ensureWritable()
- Rename readable() to isReadable()
- Rename writable() to isWritable()
- Add isReadable(int) and isWritable(int)
- Add AbstractMessageBuf
- Rewrite DefaultMessageBuf and QueueBackedMessageBuf
  - based on Josh Bloch's public domain ArrayDeque impl"
2ec932798f7e81a3c13182838b91babb096d238b,Replace .readable() and .writable() to .isReadable() and .isWritable()
bfe44180f94e53a732e2fb77c01006fb97e4a54a,"Fix SnappyFramedDecoder issues

- Checksum header was being incorrectly read due to incorrect order of
  shift and masking operations.
- Length field of 1-byte copy was being incorrectly interpreted due to a
  typo in the binary mask used to extract it.
- Use ByteBuf.readUnsignedByte() instead of readByte() & 0xff
- Use bitwise-OR wherever possible
- Use EmbeddedByteChannel to test
- Use ByteBuf comparison instead of array comparison
- Work done by @lw346 and then revised by @trustin"
ade3cc1329b8c44974ecb8808c20da73a507683c,Move non socket specific stuff out of the socket package
5b81e1692dce59992c13c2ab8774ece1a8c48e52,"Move non socket specific stuff out of the socket package, part 2"
2e44a1ba91557d4d6231bd46c63697776208bc9e,"Fix test failures in SingleThreadEventLoopTest on Windows

- It seems like Windows sometimes sleeps less than specified.
- Related issue: #726"
cb4b6734561e1d2aae52dd6168369d35899cc282,"Disable AIO transport tests on Windows

- Related: #726"
598e70fd8fd01620e9324665d67f99fd97ae3338,Upgrade to netty-build-16
fd40df9033d204bf992c64213730af6858868558,"Rename the artifact 'netty' to 'netty-all' and make it non-OSGi

- We are going to make individual modules OSGi"
86b4cde82f3e774376fdc4e48af99f7c80e05753,Make sure the inbound/outbound buffer of the ChannelHandlerContext is only modified within the EventLoop
46bedb81516bc21d2c01a05a64c2aa69bb2802ea,Add javadocs to make contract more clear
992d431a95787070f326cd8e68e044e510ce722e,"Fix line-end detection for binary streams upload.

- Related: #1016"
fd75615d7a93909461e7685f1f8206ef9261335c,[#870] Convert all modules into osgi bundles
56b1a18de04895febc849b0b3d6dfa4ac53548f3,Upgrade barchart udt bundle
f24872c566419a71c92ec338706920d026e1179c,[#1010] Add verify module to check osgi bundles
f09b85f4e71c4474b0b7a32efc39b7b38bcca93d,Add test for HttpPostRequestDecoder: validate '\r' symbols in the end of binary stream are parsed correctly.
d98fbf7a82c11c6b6530163bbba544752e885c37,Upgrade to new barchart-udt-bundle
582c6be45668a829480a6543599dd5b842768962,[#1023] WebSocketClientHandshaker00 now also work with non heap buffers
611bb3284650ccbd93696c4f699d2d1d09ab431d,Fix build of all-in-one jar
a13246a2b6a22135997364695c813135d36cc6ce,[#1024] Limit the number of SelectionKey.interestedOps(..) calls for performance reasons
7eed272e57e33524bab4b06439d4c3b98b93b273,Add FilteredMessageBuf
d4742bbe16bd4864bf824d5946de16382de72a73,"Clean up abstract ChannelHandler impls / Remove ChannelHandlerContext.hasNext*()

- Rename ChannelHandlerAdapter to ChannelDuplexHandler
- Add ChannelHandlerAdapter that implements only ChannelHandler
- Rename CombinedChannelHandler to CombinedChannelDuplexHandler and
  improve runtime validation
- Remove ChannelInbound/OutboundHandlerAdapter which are not useful
- Make ChannelOutboundByteHandlerAdapter similar to
  ChannelInboundByteHandlerAdapter
- Make the tail and head handler of DefaultChannelPipeline accept both
  bytes and messages.  ChannelHandlerContext.hasNext*() were removed
  because they always return true now.
- Removed various unnecessary null checks.
- Correct method/field names:
  inboundBufferSuspended -> channelReadSuspended"
9aa9d8a99b43022df02851a10272cce18be8f7e4,"Fix checkstyle

- Basically a workaround for IntelliJ's automatic import optimization"
ec51b359c9d1ca36873b2de5251a7fbd8b4177f3,Fix checkstyle again
30e80f8c5c7f0bb692dfd8efeadb24d1cf840be6,"Fix a regression in ChannelInboundMessageHandlerAdapter

- Should forward the unsupported message to the next inbound buffer rather than the next outbound buffer."
b8c0751023ad0da49e877050438b4c370bfe7f8b,Fix a regression where writing a ByteBuf are discarded
d8c0bf3be2a5bcfc761ff2e3a81468ef00f487db,Add the 'nextBufferType' parameter to ByteArrayEncoder like did to StringEncoder / Consistent parameter order
9319e3ebd0ad4934da7380d2df91127bdb89e621,"Fix SocketShutdownOutputByPeerTest failure

- With half-close enabled, the selector loop was spinning due to uncleared OP_READ flag.
 - Added some delay to the test for more reliable failure"
ac72c3512e1bf740b8b707da6a4c93a26cfb3755,Ensure ChannelInboundMessageHandlerAdapter.endMessageReceived() is always called after handling the inbound message queue. / Call fireInboundBufferUpdated() automatically if the next inbound message buffer was changed.
df65b9303298dcf1a3ebe5b12fabb03f85735326,Use Message<Object> instead of Message<I>
f9eff516839eb3c05a9b6a25f9f7ac32de96aa97,Fix missing ChannelHandlerUtil.acceptedMessageTypes() in ByteToMessageCodec constructor
e5616c85c44baea110472aa58e33cd0c97e1a6cf,Automatic messageType detection for ChannelInboundMessageHandlerAdapter
32e0b597612a0c9050ba515de9970b520bae1fac,Let ChannelPipeline implement Iterable
539418ecac08a2be9f5e6f0d0da502d7876df1b7,Let ChannelPipeline.set* methods return itself to be more consistent with the reset
38ee575839cf1798310bc69b19fce54ae02df29b,Let ChannelGroupFuture.addListener(..) return itself to make consistent with ChannelFuture
fa1b49de98b898d760859ee547352be544eb6c8f,More robust automatic messageType detection for ChannelInboundMessageHandlerAdapter and MessageToMessageDecoder
1033bec4cdea56a4510ce83f1f5c69856219830d,AbstractBootstrap.validate() should return reference to itself
71136390f1dfde13eea8d3f2e1b70ffc672a1dd8,Extract type parameter finder code to a utility class
1640b1fea6347ef328590d1a466faa92245a5862,Automatically detect the message types in  MessageToMessageCodec
76eb40a4d2c8a651e6b58cdebd3773f84e79b754,Make ChannelOutboundMessageHandlerAdapter similar to ChannelInboundMessageHandlerAdapter
d385cba41cd74f528443dd1425728d21ec151998,Fix method naming / Make super method final
b4eaedf7124fcf9f7c7327b4ff86cf68e4723ba5,Remove confusing ChannelState/OperationHandlerAdapter.inboundBufferUpdated/flush() implementation
1eafffbec57dded19909fb83b7a17e91cb648f4c,Use thread-local map instead of ConcurrentHashMap for faster instantiation of handler adapters
646cd455eabf3454d615896c822edbd788d1afb3,Fix incorrect exception message
82c46180c98cf3fd96dab11aa6465f3e929c4098,Tighten access modifier of encode/decode()
01e65a01c79ee35c9b621e592b59b7b073472c9d,Make ReplayingDecoder.newInboundBuffer/discardInboundReadByte() final for safety
ee189d1da764a9425e4688a3f573f4acb4988376,Use finer grained type parameter in SPDY
ff5aec0c78f18fcd4ef95afabe521f9c1427a028,"Replace TypeParameterFinder with TypeParameterMatcher

 - We can avoid reflective matching using byte code generation.
 - Better matching performance when message type is Object"
2f12f95d9b6cee3c674cf25acfae9a08f07ab922,Use correct index when try to find the type of the message
a3b46ec9d75f6e7552db51e9f8ac5ac1b493bf1e,Fix a bug where a closed channel was tried to register with the eventloop
54d44c6ac1032aa5994cebf30dda45e13cf29735,Use byte code generation if Javassist is available.
9475f9aeeadd5052bdf1dc16c643c46b8b5fb6f4,Add a system property that disables Javassist
44ea0a116f08a49e727c6b18957b4662ff6da9c8,Replace ChannelHandlerUtil.unfoldAndAdd() with MessageBuf.unfoldAndAdd() / Remove unused methods in ChannelHandlerUtil
0746199ca4bfe2b512150a0c25448679301171ed,Remove unreachable code
affd514b8c16422052ca23637c9b2b70a651356e,Rename ByteBufUtil to BufUtil and move ChannelHandlerUtil.freeMessage() there / Remove ChannelHandlerUtil
801f563e80fa53e5db8a0a250571f1a0a3dd0d3a,"Take advantage of buffering in HttpSnoopServer

- 50% higher requests/sec with pipeline enabled"
a4c66dc2824221d05e1fcfd54e4f1f4e2c125c40,Reduce the number of unnecessary Selector.wakeup() / Fix a bug where channelReadSuspended() generates garbage
e424a2f4b3fef26adafeeff01322560720961909,"Move flushTaskInProgress to AbstractUnsafe

.. because it's referenced only there.  Also did tiny optimizations."
9a676bc7d591a28b3111b4f9cbc4f9d75bd79f45,Faster memory copy between direct buffer and byte array
43af599d52628d85869c2401ce59dcf1a5e19222,Faster memory copy between direct buffer and byte array (part 2)
3a12a2db46fc93b1880b0b4d75c50f8f2c38e1f8,Fix checkstyle
42b21222dcfec8c7f388d961539888c47de25209,[#1025] Allow to add extra headers to the websocket handshake response
09b022e9263f8bab28928986656839ec9477b77e,Use PhantomReference insteadof WeakReference for resource leak detection
ea6113d7fbd3808fc57e7a29ac83bce10eaed695,Call PhantomReference.clear() from close()
4df737864e4b536efa85896897cb60ac3eff9d0e,Revert the previous commit (sorry!)
cedcee3f4298a625393135e4fa21d9db2040f831,Reduce the potential contention caused by ResourceLeakDetector sampling
139b1b8382a07b990c64c44e61f14f91fbecb35f,Add begin/endFlush() and closeOnFailedFlush to ChannelOutboundMessageHandlerAdapter / Make ChannelInboundMessageHandlerAdapter stop processing on first exception to avoid excessive exceptionCaught() events against pipelined messages.
779870321ce6c0f070e08abfc9833f02b365ccc2,More precise close_notify handling
51daf2a6a2575a4114a3f4bd926f708a853e3d9d,"Add ABORT signal to Channel*MessageHandlerAdapter

- Related: #1030"
2ac798347118656145a7ec63d12cce44922727ff,Do not trigger inboundBufferUpdated unnecessarily / Fix a bug in WebSocketServerProtocolHandlerTest / Fix a bug in forbiddenHttpRequestResponder()
36f86305124e711712be5e587f783f904676e598,Make SnappyFramedDecoder more robust against corrupt frame
319b7fa69ac5f4ae53216097184ac2eac42caaab,"Fix SnappyFramedEncoder/Decoder / Fix Snappy preamble encoding / Add test for #1002

- The new test still fails due to a bug in Snappy.encode/decode()"
32687816076e1dc15a0b28c0208301cdcf8936b8,Fix SnappyFramedDecoderTest
8bd7ea2f93817339670b3d6eae7499582de7ead2,"Fix SnappyFramedEncoderTest & SnappyFramedEncoder

- chunkLength is 3 bytes"
bd87284829d17ceaabd7b4bc348d9c1177b85aa9,Clean up SnappyIntegrationTest / Fix checksum encoding
46a249a26b8f6cff9967ca9a45326a2706b6b6e1,Add more failing tests for Snappy codec
61bbb04852211e0200b669e260a1696c39d58935,Fix a bug in AbstractEmbeddedChannel where flush failure is not recorded
27190fcb7f00f725661cc71b3c2b3d76e22a005d,Fix a bug where HttpContentDecoder emits duplicate HttpMessage or raises NPE
8f895a7e9a5bc78febc3a2d27345e88f4d66dd48,"More robust type parameter detection

- now handles '<List<Integer>>'"
b9996908b1fac66526395414cc5c3a14a1567d4e,"Implement reference counting

- Related: #1029
- Replace Freeable with ReferenceCounted
- Add AbstractReferenceCounted
- Add AbstractReferenceCountedByteBuf
- Add AbstractDerivedByteBuf
- Add EmptyByteBuf"
2f1a0b0593af284221230d79c8d30a2d7383d4e6,"Remove freeInbound/OutboundMessage(), replaced by ReferenceCounted.retain/release()

- Related: #1029"
bd0729ac45cfaadb734efe2594cbbaaee3bbeadd,Make ChannelGroup.write(..) retain the message
4f6d05365a284edf2f692e11b573e971c258a1e7,Fix a race condition in reference counter implementation / Reference count never goes below 0
33c94a98a327bdf233e0f2b2080b8d334da22a92,"Let FileRegion extend ReferenceCounted and add ChannelGroup.flush() , ChannelGroup.sendFile(..)"
657f16bf2b7f2f209b98d36d4490f3449870d807,Add ChannelGroup.deregister()
547d4c20b085b06641708bda098de488ad2d287c,Fix javadocs
e3b8f4dea8d4b5bac65f3b57cd39fb9138b869c1,Make sure all resources of a ByteBridge and MessageBridge are released
775856b3dbc5da0e7db6590bf80250321a7100eb,Use the same buffer type in ByteBridge as the context
565e10e0dbfbe70240d3a315cfbe9b62910c6048,Only update interestedOps if needed
488e56a9b165b2d3f339aa08237f960e74eaff0f,list all release modules explicitly
a7b5d45bdf22fe89c7d2dc2aa119429fbd7030c1,A little bit of optimization that reduces interestOps() calls
dea1fde604ec44f929ca7b645341f9f64ad66d91,Self-referential type parameter fix
0e341c9d7230429fb3aea2f641aeedab6ab0a03b,"Fix covariant return types in ChannelConfig interfaces for method chaining

- Does it really worth doing this? I'm tempted to remove support for method chaining for ChannelConfig."
ba71e3dcd0c660005a608424de52fa6bcc053047,Don'T call ChannelPipeline.fireExceptionCaught(..) for outbound events
7e95be0295bb2fcb5dbc85a13d469d063f3b52c6,Support method chaining in ChannelFlushPromiseNotifier
0e47fb50e29bf7b6236a49b1c21c179b3a1a1c35,Tighten up visibility
9228c97546bef7bc954c18d32d87170d66d469fe,Tighten up visibility
df53d6d7c5f42d3bfd6800fab080d106bd93c6db,Tighten up visibility
a22725d9fa4f539e81ef212ecd7a50de41062134,Let ChannelPromiseAggregator take a vararg of ChannelPromises and rename method
6f8a69b956a45e392046cc3f7955545745ec46b2,Clean up
bf0bfe9a6949b15e3954ee9ccb7905e4eb12774d,Fix inspector warnings
aca0d5fa68b01a26045ed6ff0c83c2f7f55820a1,Make CompositeyteBuf and MessageBuf call release() on its elements when it is deallocated
707f910d2bdfc8956dd3c8a53d41b929a1abf9fa,Make Channel*Invoker package private
f98da73612b65a12698335968d1928fd8a4acfe0,Allow for method chaining
4aacf50758fd5cf3b8c04f4f559785be88612d60,Prettify APIviz diagrams / Remove an empty package
d5105834d6de58cec46408d7714a7a0c5d321d43,Hide SnappyChecksumUtil
6c7bd6d174c6f562035b40171d4403e87cc51873,Tighten visibility
291bcab9f966d0ba01fb73f8933af4697474087a,Fixing generic <> in documentation to display properly
a2e5cd94bebc4e917401e87fecb5bc14de489c6f,Prettify APIviz / Tighten visibility / Move subclasses to top level / Remove unused UnknownSocksMessage
a91c6596c47be14ffd8185d699edf4d140a0029b,Add TODO
5f891952476515100a014a89d60e32277c6079be,Fixing generic <> in documentation to display properly
e847fa64373be4e9e74d2924d78be2c575013d4d,Fix code indentation in the readme file.
b4f4b957393428b04b003596bd3eab9fd8f54c68,Move io.netty.logging to io.netty.internal / Move Signal out of internal because we use it in Channel*MessageAdapters
3f16f0b4d23f616c0cd716b83394c676ef77bbdb,Do NOT use InternalLogger in examples
b258a6de661b3afd2894b5b0d3bf575159081a7f,Merge branch 'master' of github.com:netty/netty
5218f38ed0cbe3ac4623dfca38c7094daecdcb6d,Use InternalLogger in our code / Use jul in examples
00e059b064fe7294ce1b2387b95a8ce405f80c63,Fix intermittent test failure
ab3aa786d7a2b59d716993d13cd8888641b88e1b,Merge branch 'master' of github.com:netty/netty
30bcc72b4409fefd5075bf39420a6690e5a2d419,[#1038] Remove ChannelHandlerContext.replace*Buffer() methods
c1783cc8d3b4d763aed7f832bda6964110a65b56,More fixes to snappy: * Make Snappy.decode stateful instead of relying on the uncompressed length being equal to the compressed length * Correctly handle copies where offset < length * Take copies from the output buffer in decoding * Make the maximum encoded chunk size 32kB for compressed data
151cf0c7824cdc1aa9572b91f898918502427970,[#1041] Fix reference to HttpObjectAggregator
1cc04e7ddadd5fbe2471dfbb111c4d63ddb0599d,Remove reference to metrics as it is not used anymore
fcba55329c1bc7072d8c9a0e43f382c139a710ab,[#1046] Make sure HttpContentEncoder calls ByteBuf.retain() if needed
17e37fdfe6ccd397cee3e41e12975a527f722f6b,[#1047] Not process with flush on failure
7cf7d7455d17c7a30266edef6bc6b21b9b86cf03,[#1048] Make sure the promise is not notified multiple times on failure
a8216e7ce011a595bc5eaf12ecabb0f4526eda6f,Fix possible NPE
a3cb3651d0b4d41f03dc376af92e9ed72651a29d,Use promise.isDone() instead of additional flag / Remove printStackTrace
a1540a49d3db2ba9534c670bcafe7b132a35476a,More safety in DefaultMessageBuf
dc8ae16e61c2852bee16c12b612df2b9c8c588b0,Make inByte/MsgBuf final
87efff0bca06ef4f90081a7f687e7da816ba1206,DefaultChannelHandlerContext.removed doesn't need to be volatile
7cefd10d9fe5afd27baa5963c43db17f9a63b994,Fill/flush bridges only when necessary
6fe6456f8d7520bf2818e3048514aad6accdd50b,Fix indentation
e2c948782b942d79911cec09c8862de0948b31e4,Fix a problem where flush future is set more than once
d0a3c2d95e446a25fd2b1a2e9e22e0b1c4bb5504,Reduce the memory footprint of DefaultChannelPromise
53c27ef5aeec29e8b04698a9dea40f482b1ae5c9,"More robust type parameter detection

- Also removed unnecessary constructors which were added due to incomplete type parameter detection logic"
537057340067de07d445513cacb45613b414eef6,Change ReferenceCounted.retain* to return itself and so allow method chaining
4eff91df99a5ab0f443a7beab2cf4b2f0e25d6ff,Fix a bug where DefaultChannelPromise.failure0() always returns false / Revert a bad commit
7b0bf2da7e421af6661945dd82579ed524716724,Use double-checked locking idiom + volatile optimization
742db71a524496c8be21f49b472542cbddc05d4c,Fix IllegalAccessError when Javassist is used
54435a908fbcbfae4bb35e4ccf2d04cc761b4b4c,Make internal class final and package private
6983f704c0882dd322bc1cf0c7c1c635e4b05ea5,Fix unreplayble error
7c002504a15324c2a3ca9ca4c6182fa99fa48ccb,[#1051] Increment by the correct value
1f3068fc6a6646cf5b4db9595950a0bf4678b3a1,Remove UTF-8 encoding configuration spread over poms
c457c3e6d6251035b9541d593782cbdc65cd68bf,Rename verify -> testsuite-osgi / Ensure testsuite-osgi runs without ~/.m2/settings.xml changes
1e32835fbccc4b0547f8ab002f925388acd85cf2,Include testsuite-osgi as part of the build
6fc86d0454b5583349661a3343b445ea2a0a63a7,Comment out compiler options to work around MRELEASE-715
aa64209f9f7777eb2767413c04b9831e6e736806,[maven-release-plugin] rollback the release of netty-4.0.0.Beta1
e0cdeaaa2a15aa4b0cf43c7f89688433c04278e3,Revert the bad commit from maven-release-plugin
54ac1cd420b0de5604e9bbece37d3825f8ec793b,Fix build issues in microbench / Disable tests by default
ba4c0e6194ba2953cc6bbad6623204a7f059dcb8,Add microbench to the module list
6201fb98c75a02757691afad0a2922f9e165de63,Remove APIviz doclet
1011227b88bae1d30c4ff63e0c779d192a0c06af,Remove apiviz tags - we are focusing on user guide instead and putting diagrams there
66205f619c0fa0f96419bd39223a3cea2976d3da,readme.md -> README.md
eeae6f993c3f8c096f06a9614957e869862d42de,Microbench doesn't need to be an OSGi bundle
27e0ec1586d6eec906ce103ca13779d4a653db81,Indentation fixes
31f5b7b86ca7ac96f14435e47b711409af1572a4,Skip testsuite-osgi-exam tests during release
acbb38653983c972ae5f76a8268b636adbf6b622,Fix all-in-one JAR artifactId
39442a3663931fc2c20a6b25e761603384d6f6c1,Fix tarball packaging
59e638f8f5f801618cf82bbbc97aee4a79f4db93,[maven-release-plugin] prepare release netty-4.0.0.Beta1
d68a04a879e8458beb138879fc62436af33b2520,[maven-release-plugin] prepare for next development iteration
dc43c2d8a9d8517cb64af2ddb5b462ba1249ddb9,"ByteBridge.flush() does not flush anything if the target buffer is not writable but expandable

- Fixes #1055"
189c2785c012c3981af4b12a4d29ae1fc8d85a78,"ByteBridge.flush() does not flush anything if the target buffer is not writable but expandable

- Fixes #1055
- fire inboundBufferUpdated() again if the bridge was not flushed completely."
ee58de0698bde35363368fba267d95ace35e150e,"Require Maven 3.0.4

.. because testsuite-osgi already requires that"
60ee9460a931ceecf9fee8412d2b1955607c5838,"Outbound bridge is flushed only when its handler also implements ChannelInboundHandler

- Fixes #1056"
2f737d4e701289413d59d195c7c1d185005bdf06,Make use of AUTO_READ to not accept traffic before connection is complete
e5c326949d6e2ddc29920e4b1823a4cc5fb18ffa,Update proxy example to show to implement a proxy with manual read operations for optimal memory usage
1c6ed9b2ce4a46f7c6e2cce3c176a9af1d42e358,Add javadocs
4e36fbca58138447dab10d69933b1633938640b3,[#1058] Add Channel/ChannelHandlerContext/ChannelPipeline.isWritable()
891cf343ca1063947244851d1b7080819da56c8c,Remove fixed TODO
4ed5b07e4e4cc91c2ba2ed266f92b3f7c176cd76,[#1060] Fix bug in CompositeByteBuf which let the buffer expand in a incorrect way and so result in corrupted data
74738fbd08eec71dc6c8dd801f79e7f2e3e7f366,[#1061] Add workaround to not use PooledUnsafeDirectByteBuf when running on latest OpenJDK6 because of missing Unsafe method
5bda3a25b04405ca8376676329e202eb7c51c788,add more debug info about discarded message
7f780f439a1a664186d5d7e8595d3c96e5187b87,Limit flush and object allocation
8fdf788cbdb2f3d769604106d9213b791c208d4c,[#1012] Replace forked jzlib with official jzlib and add a test.
c93f5afa99c74e1a03cb19ccd198887f6e4003e2,[#1012] Cleanup
00310d96af495ebb5531242ca1f9fc4336c1cc9c,[#1067] Fix bug which can cause IllegalBufferAccessException when using aggregator and deflater the same time
b56f60c7ff5e32cac39a01f9c6be8c47680ccfc6,Make jzlib dependency avaible in example for zlib
b644d4e9319eadc16d662e6bcf894e1cfda1f728,Fix variable name
25c7a783a788b04f148c56f12d6efe1e11d093cd,Fix unneccessary use of EventLoop.execute(..) which gives some nice perf boost and also fix [#1064] as we had a race
3acb22c38c7c37600827e8d9a478bce9b5f6432a,[#1058] Fix incorrect logic to detect if ChannelHandlerContext is writable
43ff36cef0cc19f4ac64a69fe2381a0b93a591e6,Cleanup
6568cbfec42c07e2121a5adeb342b069fa0a065a,[#1071] Remove Attribute from map after Attribute.remove() was called
9e67cce93209aadcb0439ac4251405baa413b510,Use BufUtil.retain() where possible
6e73d5471c17b0c42bf515c50099ddbb9de4d9bb,Add back jzlib license file and notice
a9a8d5d8c2fe8810f239f9946521c5ac19baa54f,Clean-up
0f46d4b3798be5a19578cb18db4762ca5dae3107,"Revert 25c7a783a788b04f148c56f12d6efe1e11d093cd and fix #1064 differently

- Rename inbound/outboundBufferFreed to inbound/OutboundShutdown which makes more sense
- Move DefaultChannelHandlerContext.isInbound/OutboundBufferFreed() to DefaultChannelPipeline
- Fix a problem where invokeFreeInbound/OutboundBuffer() sets inbound/outboundShutdown too early (this was the direct cause of #1064)
- Remove the volatile modifier - DCHC.prev/next are volatile and that's just enough"
1053ead62ddbbc024dc53dcc3297e5a8abf96735,Update snapshots less often
e262f425d22f07ee6a9f2e4533780a79a0b81261,Fix bad updatePolicy string
32affc8c8b3816a4a3e40e96c464d1be68600409,Fix regression in DefaultAttributeMap / Add Attribute.key() / More fine-grained locking
dfbe4e48ae220c7e38014a08918fef3dfb463146,Remove cruft
08e2914cefb2c59c787e2cc66486f7f6ab321e5e,Do not keep Runnables for the events that are triggered only once in most cases
273948055a5ae38a01f1f24f64026aaa1a8bf0a5,Fix #1075: DefaultChannelHandlerContext.fireChannelSuspended and fireInboundBufferUpdated do not work correctly if handlers with EventExecutor are added or removed from pipeline.
17641d52fb14b9d8485a85c1d8d6de90f7e82bce,Integrate @timboudreau's SnappyIntegrationTest improvements
fada776756b41800b0c613f9972600c1e49350c8,Refactor the aio transport to not depend on the AioChannelFinder and so not need for refelection
03b7b2d2970540f60c200ed3dcc855145b5f2a32,"Revert ""[#1058] Fix incorrect logic to detect if ChannelHandlerContext is writable""

This reverts commit 3acb22c38c7c37600827e8d9a478bce9b5f6432a."
12b392b4cc4a93383e8034141ab739591770d3ea,"Revert ""[#1058] Add Channel/ChannelHandlerContext/ChannelPipeline.isWritable()""

This reverts commit 4e36fbca58138447dab10d69933b1633938640b3."
7a8e9d79934d465ea7d8705512349ccd9a6284cc,"Ensure that at least 4 bytes are remaining in input buffer when compiling our hash table in search of duplicates, and restrict encoded frame sizes to 32,767 bytes (2^15 - 1)"
0bfa9159e3bed62e0228e2b28a2081633d772dc5,Do not attempt to compress trailing data that is less than the MIN_COMPRESSIBLE_LENGTH
f6d88ca5bf213d8ae528ba1104652200dc77e6e5,"Use Short.MAX_VALUE, as it accurately represents what we're trying to limit ourselves to"
58c72acd42dd3024744ae0c780b03ac5675ddfb1,Add more failing tests to SnappyIntegrationTest
434610b18c3b17be97de20dfa0ad8ca13089ab34,"Tell what the remote address was when ConnectException occurs.

- Fixes #1082"
e65e17c72477a7cd398190c3628bf96d224ea78a,Require Maven 3.0.5 to stop users from using insecure 3.0.4
e45db60b5e0c6f1ad3b5c2c675d62948f021d571,"[#1069] Snappy decoding fixes
* Correct reading offset of 1-byte-offset copies
* Keep track of how much we've written so far in order to validate offsets
* Uncomment and reduce number of tests"
a75d42060afe0e52d057dc8a2a93aebdf242e1c5,Correct links and maven artifactId in README
4d969b964f68e3821f72d71eacbe5cca2f4e1d37,add fireInboundBufferUpdated to fix #1085 socksproxy example
30e7ab2f7d600791992637368afc240fb1068dfb,[#1089] Correctly offer FullHttpContent if it is used to construct HttpPostRequestDecoder
a03bd5105a7036ec76430699fbb9015d48785bcd,[##1064] Fix problem where the LastHttpContent was changed to HttpContent and so the end was never detected
eb2aa7f6d4aa959bbc1ab5ba84526474743cf75f,Cleanup
0317baa10d271a28187f8bcd831ffbfa9ef5cc93,Fix regression in AioCompletionHandler that leads to StackOverflowError
709f2dfb332fcd5272eb2c287d608d47e4545695,Add comment about why we need to count the depth of the stack in AioCompletionHandler
98192d7c0164879b2415a75eddca1d79b40c3539,"Simplify DefaultChannelPromise

- Merge success0() and failure0() into set()
- Remove unnecessary local variable"
d8f55212100b6482bb3c760e1c5fb094a49990d3,"Reduce the memory footprint of DefaultChannelPromise even more

- Merge waiters and fluchCheckpoint into a single field
- This limits the number of waiter threads to 2^24 - 1, which is still very large.  Can you imagine an application with 16 million threads?"
334b6c3129934570ddc375d2160a523a0679aaa6,"Reduce the memory footprint of DefaultChannelPromise even more (part 2)

- Rewirte DefaultChannelFutureListeners - this saves another int field when there are more then one listener."
f67441354a1536cc214d78bba6143a8b462784f5,"Move logging classes from internal to internal.logging

.. because internal is crowded"
671f9d48d4b65ba2b75a5106dfece636cb46b407,"Use ConcurrentHashMapV8 wherever possible

- Fixes #1052"
7e42695fc2b73c3d443cdeb90284b3ce4f9918f8,Update README.md
72c71dbf27c0f829cc79072605a3a60d33afb4bf,update README.md
4b48a227bc2306f73f12afedba479618a96ae269,Fix broken url
ec50293f5bebdc54d9fbb7558fec05edc36c11a3,Remove JXR plugin
bfbd4da1a5b56f277003c1ef1bafc0c33fd49241,We actually need Xref for source browsing. We just don't need it for example browsing.
d7b782ab7b7d8292e7e33e004b77549e0b8697e4,Add examples to Xref
5026c2f359e11ac24149be91bf44d34f6c0d0171,[maven-release-plugin] prepare release netty-4.0.0.Beta2
49aa907bd05cc58c8ab1a6d72c85835fd7a30394,[maven-release-plugin] prepare for next development iteration
71f25d13e2685493d13a157190d068c0a79655ae,[#1095] Fix AioCompletionHandler stackoverflow detection to executed callback methods in all cases
dc4c4ab6b9369caf5d7d1bb25ac994bd1dfd4e3e,[#1094] Fix possible StackOverFlowError when send FileRegions via the AioSocketChannel
cb202da8323aa91ff6aebdae0a6eb3beda4d460d,[#1036] Use SocketTimeoutException when a connection timeout is detected to make it easier to detect timeout vs refused
d4d01ba52c8c4c57f53386ae6e6505f91349772d,Optimize SlicedByteBuf a little bit
977b6f3a2846b1d16a07cbb060c103d86ba12566,[#1101] Fix NPE which accour when send a 100-continue response and using the HttpContentDecoder
b6038534cc432a27fb47ba8ec2a29b2a136217d8,[#1101] Fix NPE which accour when send a 100-continue response and using the HttpContentEncoder
6246825fda9332a421272ec649bd6ec0b3dd405a,[#1100 ] Fix SPDY codec to work again in 4.x
b712b030fafb40b73dd5e209131cba8edd65489a,"Fix a bug where TypeParameterMatcher fails when a type parameter is an array

- Fixes #1103"
881bd8eea35b76958a7c3d2c28051735059b86ec,Support array types in JavassistTypeParameterMatcherGenerator
42dad6d9d48c909618ba4b92e8c70fd413753199,[#1106] Also handle FileRegion in ByteToByteEncoder and SslHandler
03525f4b64cbc6811caa0a2604baa8aeba374b9f,Fix javadocs
3ac78b030a273fb574571f8e177ae02323194a88,Improve javadocs
1603d9792dd972cdc6bd1b83a4e890cbe103c797,Move methods from ChannelHandler to ChannelStateHandler like proposed in [#1107]
0e3825899a6c7f4356a27bda541d8703572e563f,"Move DefaultChannelPipeline.notifyHandlerException() to DefaultChannelHandlerContext / Always trigger exceptionCaught() at the handler that raised an exception

- Related: #1118"
e4aa941bd440a433c7dab3a3d20ad98a3c1cf082,Simplify ChannelInboundMessageHandlerAdapter.inboundBufferUpdated() implementation
7e17f71b3068c5af2e0932e12a846efc0f78be49,Make PlatformDependent work with the platforms without unaligned access support
faaff91dd041b7100992eb60b6856c4de50ea7d2,Fix checkstyle
256c931db20fbfaf597e501b74a34fd850c7f948,Move exceptionCaught(..) back to ChannelHandler. Related to [#1118]
307e6c47d8aec7356adff236e5d76170440ffaa4,Make hasUnsafe() return true only when all necessary low level operations are available for reliable direct buffer access
a8a7c4f576181306570eb8de77511c3a9682eddd,"Provide a way to implement an ChannelInbound/OutboundMessageHandler conveniently without extending an adapter class

- Add ChannelHandlerUtil and move the core logic of ChannelInbound/OutboundMessageHandler to ChannelHandlerUtil
- Add ChannelHandlerUtil.SingleInbound/OutboundMessageHandler and make ChannelInbound/OutboundMessageHandlerAdapter implement them.  This is a backward incompatible change because it forces all handler methods to be public (was protected previously)
- Fixes: #1119"
8d88acb4a79830cb659a560e317be3ccfd94796e,"Change ByteBufAllocator.buffer() to allocate a direct buffer only when the platform can handle a direct buffer reliably

 - Rename directbyDefault to preferDirect
 - Add a system property 'io.netty.prederDirect' to allow a user from changing the preference on launch-time
 - Merge UnpooledByteBufAllocator.DEFAULT_BY_* to DEFAULT"
4cb023f190d5739b0c19077d309e3d3ae24e482d,Add more variants of ByteBufAllocator.ioBuffer() / Update Javadoc
c5f606e63230b32bcecf0ffdf037f3da2cb2300d,Warn in case of incomplete low-level API
6e5bb87219132dcc20240ffe2e316f60ac14f42d,Re-enable some critical tests
5f2c2cdc9b094c1e13bcffa531da0701240b5b4a,"Fix a bug in PoolArena and PoolSubpage where subpage pools are not updated correctly

- Make PoolSubpage a linked list node in the pool
- Now that a subpage is added to and removed from the pool correctly, allocating a subpage from the pool became vastly simpler."
1c1570ffc43de209f46465c526faa891bd6e4a87,"Make field access via ByteBuf.read/write*() faster by avoiding unnecessary boundary checks

- also disabled a time consuming test that is actually a regression test"
6c3d5ed907042a04c362c3bb3c0eb386f07bfa9d,Use _set* in AbstractByteBuf.write*()
81ce0555e622122d5bfe57bc98bebbe412132875,"Add UnpooledUnsafeDirectByteBuf and use it when low-level access is available

- Remove PooledUnsafeDirectByteBuf.setMedium() which is redundant
- Fix constructor visibility"
3d6d9f394d763aaed47fdd0c86023afebe3c5a9f,Fix checkstyle
88df53ec1a53912c2e34892247c8218c2fa01838,"Fix infinite recursion when transferring data between different type of buffers / Add ByteBuf.hasMemoryAddress/memoryAddress()

- Fixes: #1109 and #1110"
303f83043b200d940ac1d82ae23392de61f18fb3,Fix checkstyle
148abe52f92ef59d21999e7706d0df4dc5dfd685,"Reduce the amount of memory used for handler names

- Fixes #1123"
0f8fbac9f8a57ee2a57b186f575652d66e2b4979,"Fix a problem in SslHandler where it doesn't work with TLS False Start

.. as suggested by @justinsb"
88cc8c17392502e037cd1d893a8b74c222d4a287,[#1065] Provide Future/Promise without channel reference
526dafca7505904f26460a46cbe0283e161a1e9a,Fix checkstyle
9599bfd5699ae2d525a016592eb5de3f7dd681b9,Fix class-cast exception which is a regression introduces in 256c931db20fbfaf597e501b74a34fd850c7f948
61d6c48365337fb3840ccfc8a3d097b294e360b7,[#1036] Add special ConnectTimeoutException which is thrown if a connection failed because of a timeout
e66fc219ffe6621e71a409b078ace9cab87eac16,"port fix from Akka for HashedWheelTimer

Ported from commits:

* https://github.com/akka/akka/commit/cb4e3536b0ed3483bd3636d7789c0ddcadafa2da
* https://github.com/akka/akka/commit/7e590f3071bdf89a4aa9d7d262bac8923d85e754"
16f4de7adba25b6d0388863987194c761a8af983,Use the original stack trace when translating SocketTimeoutException to ConnectTimeoutException
41ab17b9bf424e001da4a3a6c830d54768aec86a,Fix inspection warnings in HashedWheelTimer
6ac9b17ddd306bcf3dceeb62134a7e38103ac2ac,"Make WebSocket codec also work when HttpClientCodec and HttpServerCodec is used.

Also refactor the handshakers to share more code and make it easier to implement a new one and less error-prone"
12f1d969147b6a55625850d3f1f36da4c9f03a64,Relaxed memory access constraint of ReferenceCounted.refCnt() for potentially better performance / More precise reference counting for MessageBuf
096e4c95efd2d8430002f5bfe2bb4200da715b4e,Fix checkstyle
63116239acb5d2f9ea50b95684456a2b6a069adc,Always use EmptyByteBuf when a user attempts to construct a buffer with 0 maxCapacity / Make EmptyByteBuf remember the allocator it came from / Optimize EmptyByteBuf a little bit
a9a29bdf3fd4b828a2c631b97a5cd33ae9de1dc2,Use I/O buffer whenever possible now that our direct buffers are as fast as heap buffers
fd3f923b528b6857c8b80e1638c08a4719def6c7,Allow to specify the used buffer type for ChannelInboundByteBufHandler and ChannelOutboundByteBufHandler by configuration. As default it tries to use a direct ByteBuf
8d7f1e282037ae13228e9a19dd22be9445fea6dd,Add stacktrace to the IllegalStateException which is thrown if a Promise was notified before
b1775a3223e54e076f0abba85360a19ded368498,[#1131] Codecs must not cache next buffer during processing
7b4c83b462c8f2a8708b935c631be6c339e782ed,[#1135] Fix endless loop which will get triggered when an exception is thrown during freeHandlerBuffersAfterRemoval
fcd6becad90515db7c7cc3b3ae2aed481e826eed,[#1136] Fix possible IllegalBufferAccessException when remove itself from the pipeline
4f2e347625c39b22c3218ea61a62e8cddf74412f,More concise exception message
ed825de4bffe5a6238c750f3fba3a492f9263211,Fix a bug where TypeParameterMatcher raises ClassCastException when an instance with raw type parameter is given
0ac5fd9f185e4f7ec2d32ac5075551c260625012,Let BufUtil.retain(...) return the given object
0504a442aefa918af7e70872b589ad73ccad5863,Check for NPE and also optimze HashSet allocation
0a1bc86569adfeef662f6d84fb06ff80dfed4880,Javadocs cleanup / added
b4bf565ad92648c3703f344db78de85f20520c26,Travis CI configuration
32efba34d8905c925c5f20421a3d280d9e395faa,"Initial implementation of the Streaming API

This pull request provides a framework for exchanging a very large
stream between handlers, typically between a decoder and an inbound
handler (or between a handler that writes a message and an encoder that
encodes that message).

For example, an HTTP decoder, previously, generates multiple
micro-messages to decode an HTTP message (i.e. HttpRequest +
HttpChunks). With the streaming API, The HTTP decoder can simply
generate a single HTTP message whose content is a Stream. And then the
inbound handler can consume the Stream via the buffer you created when
you begin to read the stream. If you create a buffer whose capacity is
bounded, you can handle a very large stream without allocating a lot of
memory. If you just want to wait until the whole content is ready, you
can also do that with an unbounded buffer.

The streaming API also supports a limited form of communication between
a producer (i.e. decoder) and a consumer. A producer can abort the
stream if the stream is not valid anymore. A consumer can choose to
reject or discard the stream, where rejection is for unrecoverable
failure and discard is for recoverable failure.

P.S. Special thanks to @jpinner for the initial input."
806e9b1f8cfbfcdc0ff22a644de351b02aa7617c,Make sure we handle outbound messages of type ByteBuf special
5d65bbc0a9b9c7ab9b81ac4fc06bd08e7668ec94,Add package-info.java for the Stream API / Print maven version on travis CI
27b2f1304b352cc15901b0b5dff90be469176e9c,"Why don't CI services upgrade to Maven 3.0.5?

Do they just wait for someone to exploit the vulnerability?"
24c3b3f6e74bf649f25684b5635e2092b7d9cb46,Run full build on Travis CI install
5bcde105576193a4b225fe4f1b167d2e4ab44e4e,Clean before installation in Travis CI
8f5eaaa740c6c58ddda48b7279a04aeef1d1eea7,Make StreamTest finish sooner to make CI happy
e203618007a270373d17e6f059dbdd26d5a684ff,Travis CI branch whitelisting
2406a9f8b8e4dc614adffb735a1b50bcb6e29301,Use LinkedHashSet
978cf0d98a5c53e0bfbadfe666674fbc90adb429,Fix a NoSuchElementException when WebSocketClientHandshaker is used with HttpRequestEncoder
acde9a3f8e520e2fb02e33602dac4e5af5df532c,Fix a NoSuchElementException when WebSocketClientHandshaker is used with HttpRequestEncoder. This time for real
c660002b4ebd358fc839622dbb0aaa2cf97e4ba3,Add DecoderResult.UNFINISHED to represent the case where a decoder generated a message that was not decoded completely / Remove partial failure in DecoderResult which is not very useful but confusing
e1dd149ca6b686fbed3abc3054e87244505139d0,"Reschedule the streaming API for later

- Will release as a part of http_next"
6e0e38f09f74fb633a33cfd5c59265518bcf85be,Fix test failures
83cdbeca1d25d37a8655e48eeecd28c0176ce242,"Add ThreadPerChannelEventLoopGroup and ThreadPerChannelEventLoop to enable a user to write a new thread-per-channel transport easily

- Fixes #1124"
397830d238b809aaa453db3dd556dc37b616da93,Allow SingleOutboundMessageHandler.beginFlush() to reject the flush request by returning false / Replace PartialFlushException with IncompleteFlushException which is more correct.
559b860ff661325dc8b619687fa0940491b34963,Fix grammar
c25513d5e1dd8eb9906989e83a1ce41495d3e6a9,"Upgrade to protobuf 2.5 and take advantage of MessageLite.getParserFromType()

- also fall back to MessageBuilder if getParserFromType() is not available."
f2a35273e655041b5055676cb55f440a5bb1e95a,Fix checkstype
17ebbdec207c2001a22423a357216c6a48eeda0e,Let ChannelGroupFuture extends ChannelFuture and ChannelGroupFutureListener GenericFutureListener
fe66f33f4219fa1d40fee2e90eecc8ea4d8ae0fb,Fix issue where the bytes/messages are forwarded to the wrong handler
cef81f1bffe4076896e9a3735fed4dd3f69edc3f,Revert e66fc219ffe6621e71a409b078ace9cab87eac16
b271774c905c4e63146203734ca62984fb84f308,"Fix memory leak in UnpooledTest

- nothing critical. It's a test that leaks.  Not CompositeByteBuf implementation."
94a9096be589f113432a769372f7083db651c259,Fix a memory leak in AbstractCompositeByteBufTest
5830875b42be079855e440b2e2bb364eab42169f,"Fix a memory leak in AbstractCompositeByteBufTest

- Fixed #1147"
42e31a444579b24e96dae11c594827311c1217d0,"Revert ""[#1131] Codecs must not cache next buffer during processing""

This reverts commit b1775a3223e54e076f0abba85360a19ded368498."
97b2feedecb537e2415fa700d410897b2a67cdaa,HexDumpProxy should log hex dump.
8dcb1387e3efcbc471837de2cd68e45f51aeb15f,"Add I/O ratio parameter to NioEventLoop

- Add SingleThreadEventExecutor.runAllTasks(timeout)
- Add NioEventLoop.ioRatio property
- Merge SelectorUtil into NioEventLoop"
644d5abbda93ca3b06f772a47b8dc7a5b5543775,Add an empty line
b86d3d692aa1a5417c2890f3fef78cc2dcfa6577,"Fix a bug where AbstractByteBuf.order() doesn't return a swapped buffer if capacity is 0.

- Fixes #1152"
4323fea5fb8790a757c8a272fe59b4564e403837,"Fix a bug where TypeParameterMatcher does not detect the case where the type parameter is derived from an outer class

- Fixes #1153"
9feb27d58c0434afc03f3de59ff8dd8beb324a69,Specify timeout on Selector.select()
d19b575c312ff9db4ec0b53de2f588032f1cee58,Fix an incorrect modulo operation
f1ecb4ab1a8b4bd8a8eda27cd7cb62e654b54016,Remove ChannelHandlerContext.types() which is barely useful / Remove ChannelHandlerType together
d55567e21b5ea8c33de57a5cca6a61b441a59e77,Remove DefaultChannelHandlerContext.needsLazyBufInit which is used only by the head handler
9c96791176614b02dce8ec3ba7cfd14b922357cc,Move the methods that's only used by DefaultChannelPipeline to DefaultChannelPipeline
d2b137649d753b593ad00318c8b0cdba13b77447,Fix more memory leaks in the buffer tests
70a51bcd8d9044bdf3b73e3da7aa29482f61e05d,"Fix memory leak in AbstractEmbeddedChannel

- Allow a transport implementation to perform an arbitrary task when a channel has been deregistered completely"
60d9984db14bcd427fb93c6b00767683430da9de,Fix memory leak in DefaultCompositeByteBuf when a component is another CompositeByteBuf
0f351d2c4734cba9edbdaf82c69f42fe2001abe7,Fix memory leak in DefaultCompositeByteBuf when a component is another CompositeByteBuf / Allow retain() and release() on a derived buffer
5fe2e7fc9d2f02530a68805062fd7a5abe396afa,Fix more memory leaks in buffer tests
8372e2ffc90c0c9626e2ec2e40088741ca9255a2,Skip OSGi testsuite if 'no-osgi' profile is active
289d474a23571ae54cc5f90d5480b02a272c84f1,Make ByteArrayEncoder sharable
835a40fa251ccfd6da922d11bd4f74f90e1f4247,Port test for handler's life-cycle processing into master branch.
d9c3f4bc05e4c15e37ad35ce0f8ae78233d7c43a,[#1159] Make sure we not produce an empty bytebuf on decodeLast(..)
e69b99fca400ed1049f8161956f5f15513a2c741,Allow overriding JVM options for tests
b186342f5214a9884639439a587b710ac7d2a549,Fixing 2 typos in codec documentation.
e3d10ad493979c25904aee78bb12bf3151bbc920,"Break the decode loop if decoder raises an exception to give a chance to close the connection to a user handler

- Fixes: #1161"
adfb29330bbd081a9ab11e2656d110ce062b3746,[maven-release-plugin] prepare release netty-4.0.0.Beta3
2a8795078420cdbaa6afed06c753316488449bec,[maven-release-plugin] prepare for next development iteration
7498e0f9131394d989f785ada634744a39f3b567,make deregister protected in ThreadPerChannelEventLoop
ecaba683482a9bff9f1e6cdd04c6d7531238542a,"Fix bug in memory-based HTTP data content initialization with input stream, add test (port from branch 3).

- Fixes #1170"
d3327e7f467427c04e45784044c8cadfbb6afdbf,Fix inspector warnings
660e6f4afe6a5e1e53619600a5b14f11dac5537c,"Fix IllegalBufferAccessException in the UDT message examples

- Fixes #1104"
97f2fa734133bde9aff1a572aef2f0620542cfa6,"Allow a user specify the byte order of the length field for LengthFieldBasedFrameDecoder

- Fixes #1164"
f4c18c6e744564442a0ffdd229a9d8dba608f9ad,"Fix a bug where NioEventLoop.processSelectedKeys() enters an infinite loop when too many connections are closed at once

- Fixes #1171"
5a88227856193663ba39bd7eac3bb7fc4443b376,"Transport: Clarifying the role of AbstractBootstrap#bind()

This small changeset clarifies the role of AbstractBootstrap#bind(),
especially when not used in a ServerBoostrap context."
f70babcd940e8b5dd241c972c4bcc9a3038df7eb,Upgrade to Karaf 3.0.0.RC1
2970383bac8a78a41ba5f7b0d823c7306d6a3865,Make sure OSGi testsuite runs on 'mvn test'
ce87b627be941e3dc56e85164088ab68f80188db,Let EventExecutor return our Future to allow the user to work also with FutureListener here. Also add a special ScheduledFuture that extends our Future for this purpose.
f008ac8d4774574630a88fbc04c0c96c114e0457,"1 Rename package name ""rendzvous"" to ""rendezvous"" 2 Add bytes stream rendezvous example"
2b014ce82a71cad586ce3919d31d160fe05366cd,[#1183] Fix BlockingOperationException in ChannelGroup.close().awaitUninterruptibly()
8b722d29a76a88cc3f9ffd27669ce1428c406e8b,"Add constructor parameters that do not perform type parameter auto-detection for the languages without type parameters

- Fixes #1177
- Add TypeParameterMatcher.get(parameterType)
- Add alternative constructors"
9175abc451b3573fc62847960a64c771e7a2c723,"Update pom.xml

update the barchart-udt to 2.2.5"
a980638190c055a596145ec2a6963fa8cd30126a,"Ensure the best effort is made even if future listeners could not be notified / Handle registration failure in a robust manner

- Related: #1187"
2aa0bf73dc7b44175622055b891e8eec6f65de46,"Add a unit test that reproduces the dead lock described in #1175

- The offending test case is annotated with `@Ignore`
- Also fixed a bug where channel initialization failure swallows the original cause of initialization failure"
cfa2f726816e4604e65a280791757e6d2c469ab8,Fix checkstyle
bd8d53eaedbe7c6251df76716a6cdae79ef6f8b9,Fix checkstyle
c08919d0a0a8b391598fc1be49956a5ae5c7b375,"Fix the dead lock described in #1175

- Similar to @normanmaurer's fix in that this commit also makes Bootstrap.init(Channel) asynchronous, but it is simpler and less invasive.
- Also made sure a connection attempt failure in the local transport does not trigger an exceptionCaught event"
b6dd5938ab748f4d3482f58106bd8018f5cf4bb4,No need to do any deadlock check here
4fa7e854933c8b388a5ad52f600661ff9b38910f,"Make sure ChannelFuture of Bootstrap.bind() and connect() notify with the right cause when registration fails

- Related: #1175"
f858a2fe627e2f2749cb656647eed3d95ce3db99,Fix multiple calls to fireChannelActive() when using AIO
a8723412ddf2272fd791da2bc0e6db656efe6593,Fix checkstyle
9b208028ef1300b1a49eb1315ba58e58c2b87152,Use clearer term when data is discarded by pipeline
8fb80e91796e8567aca5e2b8244f853f8631217b,"Fix a dead lock in ServerBootstrap as described in #1175

- Reduce code duplication between bootstrap implementations"
52c4e042d64cd09bb11e3f77e9c037ab690f7d13,Correctly handle read-only direct ByteBuffer when wrap them
4097dee49d2d798e2262ac68954859944c3625ab,"Make SingleThreadEventExecutor independent from TaskScheduler

- Related issue: #817"
6869a2bd232c302fe5d6f7b44f4e2e0673af6ca0,Fix memory leak in AbstractCompositeByteBufTest
fa02ffddae42307fd5571ce6af8b122ca8a79f75,"Remove TaskScheduler and ImmediateEventExecutor that requires TaskScheduler

- Related issue: #817"
1ab2813405dfda0fd975aaac82b83e98b14cd8e0,"Enable automatic selector rebuilding by default

- Fixes #1192
- Log at WARN level for easier diagnosis"
f6e0df125a410faa4e8393b87cecd238971701f6,Allow disabling automatic selector rebuilding by specifing non-positive threshold
ffdc2a6b1144ebd0ee077ace96d05fb77549c2c9,Upgrade dependencies
34853e7ba0e0438220d5399a9526571383610b95,Selector auto-rebuilder tweaks
1bad0b48cf1ad654e1c063ad97f7c0e3a9f27c89,Fix memory leak in the test
d525295d2091253e031c94b29b659013b3af8c45,Revert NioEventLoop.hasTasks() which is not really true
69e5a0eb9c21969a91c07dc3f4c8cc2be1def8ec,Log prematurly returning select() at DEBUG level and increase the minimum required consecutive premature returns to log
19ffdd5c297ca45dd42a193c5de6065dfdbefc2b,"Revamp the selector auto rebuild checker

- Count the number of select() calls made to wait until reaching at the expected dead line, and rebuild selectors if too many select() calls were made."
e147615ddde69e733d4ad949b7085e0b48a40f9a,Upgrade to the latest maven-checkstyle-plugin
28576aa41ed3527289e6d60873c3fa75f87cf0aa,"Fix incorrect exception message

- Thanks @hepin1989"
624bda4695d16ec90bdb4e71b400247af60128f1,Make sure cancelled scheduled tasks will not run again if cancelled before
4bd9c0195ffa5e5365e8c421dd5b234f9a0a0962,Add a handler that makes writing websocket clients much easier
915cb8b55c6088ae566d178612e939b3b29752e8,"[#744] Port fixes from Akka to HashedWheelTimer

port fix from Akka with following commits:
*
https://github.com/akka/akka/commit/cb4e3536b0ed3483bd3636d7789c0ddcadaf
a2da
*
https://github.com/akka/akka/commit/7e590f3071bdf89a4aa9d7d262bac8923d85
e754

And also use constants for worker state for time instead of numeric."
60fc7dac4dea95211df7d636e2b9c45ca44a6bae,[maven-release-plugin] prepare release netty-4.0.0.CR1
7d7b676eebc74bf8e4768448c8dda9456c3e765c,[maven-release-plugin] prepare for next development iteration
c71dc9d4b67bb8486caeb2fb4fbfcf8f094c7291,[#1195] Fix Unpooled.wrappedBuffer(..) with non-direct read-only ByteBuffer
f136fb3673f1cc050b1ef2596e6a2faac45809e0,[#1197] Add Unpooled.unreleasableBuffer(...) to create a unreleasable view on a ByteBuf)
4e60c395a9f0903d763eda0998990b5e5f57bcbc,Fix SslHandler handshake timeout cancellation bug
59012390f6e98c29862853d06d766475cb1c1960,Fix version numbering
bf032044bfdc869c290ed7c562e11d32dc121cb7,Fix bad xml
8057c699cd03b2f59207cd016d6a60e3cc3d3910,Fix another bad xml
f76e38592d83a23328960b430973a338fde894ae,[#1201] Correctly handle mix of not compressed and compressed requests
20d76610da7d022706fe67fbacd7fed7a9c741d5,[#1204] Correctly detect lastChunk in HttpPostRequestDecoder
4eb01722517dc1332c5e31c63ab86872b1c2b148,[#1196] Make it clear that addComponent(..) of CompositeByteBuf does NOT increase the writerIndex
f53db96a3e3b12269f85e870820b52fb8f679ed5,[#1198] Fix references to ChannelBuffer and ChannelBuffers
71727e42dee8e36d3cfc3ef36560b1bd68106f98,[#1210] Allow to use derived buffers with DefaultBufferHolder and so fix broken SpdySessionHandler
4a9ab4f57c77c5d9a977cd87bf38adf977b0dbcc,Add WebSocketFrameAggregator which takes care to aggregate fragmented websocket frames
a97cca50df0ef0644dbe97df82a64b2a7e3408c3,[#1212] Fire handshake status events to notify the user about handshake states
14a47075bea2c38540bd5b0429335b97614f0eb0,[#1211] Fail ChannelPromise on SpdyProtocolException like it was before in 3.x
5a7f049fe2bca201d76edef987a3ec36580c410b,[#1202] Fix javadoc
b4b0be4e532a83802c6c192ee2aa8c836b12ea80,SPDY: allow multiple notification of closeSessionFuture
c2cd99d90cde91d2dc91c21b8006fc947c4f5a67,"upgrade to maven 3.0.5

As Netty is using its own CI now"
8e23ab68864bd7a07ffc0fbf2bc90e5390cf21f8,Fix typo in BufType javadoc
05850da8638a5af14c7ee5f1ebf4e17cf10dd71a,enable checkstyle for test source directory and fix checkstyle errors
96bf71e814c2d7024d38cdeb8dc05a627670f09a,Let EventExecutorGroup extend ScheduledExecutorService as it shares quite some semantic
a0fca9312805a84c1903acd78be2e84ae88bb0e2,[#1222] Correctly handle the case when a MessageToMessageEncoder encodes to ByteBuf and the next outbound buffer is of type ByteBuf
6a9d055f578bc85eb7780dcc5484aa11e9da50f6,Let ProtobufEncoder extend MessageToByteEncoder which makes more sense. Related to [#1222]
d9ac6638f4853180a2e46cd504b6483b7381ea87,[#1221] Make sure HttpObjectAggregator 100-Continue buffer is not released
2e3b8f13ea902b6c1e56ad36473c400ef1012daa,"Revert ""Let ProtobufEncoder extend MessageToByteEncoder which makes more sense. Related to [#1222]""

This reverts commit 6a9d055f578bc85eb7780dcc5484aa11e9da50f6."
436380c41e28aed55ebfa7dc02778638b5c21321,Fix Javadoc issues. Replace Upstream with Inbound and Downstream with Outbound.
f95dbb7a4d5111978d6b2e793d5dd9a4dc250b2c,"Make HttpPostRequestDecoder.addHttpData() and getFileUpload() protected

.. so that a user can extend it to get notified when changes are made"
bcb0b83b44cf383accb26a422c0767b2548700f5,Use unfoldAndAdd(..) for now
0f3dc0409a724da5ffec286273883abe43eda3e6,Log various properties at startup time for easier diagnosis
2ffa083d3ce613dec27e498d6f103ef20ddb1ec4,Allow overriding the default allocator properties and log them / Prettier log
3f8a830963eb9676b91c2a24c17ad4f8331069d1,Fix DefaultChannelPipeline.first() so that it returns null when only the sentinel handlers remain (this is how DefaultChannelPipeline.last() works already)
b7797917ab63aa3983e30d01b28752f92a3198d3,"Deprecate Bootstrap.shutdown() and use EventLoopGroup.shutdown() wherever possible

There are still some tests that use Bootstrap.shutdown() though.  They need non-trivial refactoring, which will come soon."
312a35dfedad5e999e980a5adc9916b3d7b2ea3b,"Remove MultithreadEventExecutorGroup.DEFAULT_POOL_SIZE

- We should never define a default nThread for MultithreadEventExecutorGroup because we don't know what a user do with it."
117ad8acd7e386c4dacb24469927346a1e89e5cb,"Add MultithreadEventLoopGroup.DEFAULT_EVENT_LOOP_THREADS / Add DefaultThreadFactory

- Allow overriding the default thread factory when a user specified no thread factory"
cd0b5ec2db593d45c96bd6b55b0024042534af04,"Keep Socket/SctpTestPermutation from creating too many event loops

- Also made the event loops created by *TestPermutation use daemon threads for simplicity (i.e. no need to shut down the event loops)"
af4b71a00e30faf86ef1c2365e965e8f04f65bee,"Remove special handling of Object[] in codec framework (a.k.a unfolding)

- Fixes #1229
- Primarily written by @normanmaurer and revised by @trustin

This commit removes the notion of unfolding from the codec framework
completely.  Unfolding was introduced in Netty 3.x to work around the
shortcoming of the codec framework where encode() and decode() did not
allow generating multiple messages.

Such a shortcoming can be fixed by changing the signature of encode()
and decode() instead of introducing an obscure workaround like
unfolding.  Therefore, we changed the signature of them in 4.0.

The change is simple, but backward-incompatible.  encode() and decode()
do not return anything.  Instead, the codec framework will pass a
MessageBuf<Object> so encode() and decode() can add the generated
messages into the MessageBuf."
8fef51139063c49d452118053c2109ea298d507c,Fix typo
baf9ecfe7baae6acb5c022484c19af2426dac85c,"Fix IndexOutOfBoundsException raised when numHeapArenas and numDirectArenas differ

- Fixes #1227"
c3559ddbda7dab23d372e6bc8eb83c17f5d65683,Fix misleading example in ByteBuf
9828267165587e02524318d7a64a71c357230f56,"Fix performance regression which was caused by calling the fireInboundBufferUpdated() a way to often

* Also use a ThreadLocal for the decoder buffer to safe space as it is cheap"
94ef7dc1b9dbbde24140ab43f4192c97d1fc50c2,Optimize to minimize volatile reads to access next buffer in codec framework
1675e61f5baeef17c1b4cbfb914d91e73b1fb07e,Share same ThreadLocal for all decoder/encoders to minimize memory usage
7ee2adb5878b7261abf8ce5f3e7e977627ff8c84,Move drain logic to OutputMessageBuf and optimize it as far as possible
8a672c2800efc3697b70c32c08a60edb9e654eb1,Proper assertion instead of blindly clearing the OutputMessageBuf
46540578fcf4bf3778d66dc450339d374cfaa4e7,"Optimize OutputMessageBuf.drainToNextInbound/Outbound()

- Return early when the buffer is empty
- Keep only the number of byte buffers
- Remove unnecessary null check in the loop (because we know buffer is not empty at certain point)"
788b88b7af6c5cb2d111d5fc7e9ba34208e8baff,"Make sure to release the buffer when it's written to the next byte buffer

.. otherwise it will leak."
c25fd78ca00402282162ace98209a909f7326807,"No need to have nested try blocks

.. because the catch block catches everything and rethrows it"
015e60b00fa3e2a0dfbd5b6ddfd55c9bda01cad3,"Clean up catch blocks

- No need to have nested try blocks because the catch block catches everything and rethrows it
- No need to do instanceof-checks"
03955428bc97365dfe29bf7ad8a319623c4c8a97,Ensure BufUtil.release() is called even if writeBytes() fails in writeAndRelease()
3b9994455a84be3c7cedfe475a7c93f2cad98857,Saner field order
c03179c81cac581fe51cb6c5b4111bcd296c56bb,Clean up try/catch blocks / Prefer 'throw' to 'fireExceptionCaught'
4505e7f1b33b2fca3278f588be263595c2f8fda9,Make sure OP_WRITE is correctly cleared when using FileRegion and other NioTasks
6dfa455f9e3ccf6545d2fe910fe1533379aa06ec,Fix compiler warnings
05bc0ba17f6d388905d8f808cbb4b616ab540675,Fix checkstyle
0ac31ae846740bbcc14aca1129b9f8fdc2835d52,Make Unpooled*ByteBuf public so that ByteBufAllocator implementor can extend it
a3e760a003b8477e0401a414c9b773d3cf4d4f5d,fix #1234 - duplicate package-info.java errors in eclipse requires release of netty-build v 19 and netty-parent update.
7ccbcb90af69a386c737b4f3991bd58efd05af92,Upgrade to netty-build-19
d299eeb48576639ef8916fd78a7503fb453fcd79,Fix a bug in AbstractTrafficShapingHandler.getTimeToWait() where it doesn't work OK when system time goes back.
8632d9011e03ed1280ca20defeb4711aa327bc28,[#1239] Fix possible NPE while fail flush futures during close
b36e815026d2e9a345ade3997ff45e8f2f3b57de,[#1241] Fix NPE in AbstractTrafficShapingHandler and the logic
3305a7df8278ef121e9c6e57a2db737b5cfce74d,Also provide implementation for flush out of the box
ded09fc778130152486187c3f72432f5ab0dc749,No need t let SpdyOrHttpChooser extends ChannelDuplexHandler
2508c76e97b40ac8aa14fa364f462c930079a437,"[#1246] Fix cpu-spinning regression in HashedWheelTimer

Also remove the usage of System.currentTimeMillis() completely here to make it more consistent and correct"
2a162eb1408a627bcecd08bb9a3bb157d029bb13,Rename method to better reflect usage
d34daebeca3c7cb5d884c5ac62946ef8174a0a0e,"[#1238] Correctly log the content of the MessageBuf and not depend on MessageBuf.toString()

Add an extra static method to BufUtil which will convert the content of any MessaBuf implementation to a String"
51de21f25022c6ed98663b7f6c2dc7145795d80b,[#1246] Correctly convert to nanos
9308625b2c3cd09cd41504c142f64036aec7d201,"Update FullHttpMessage.java

I think FullHttpMessage = HttpMessage + LastHttpContent,
not that FullHttpMessage = FullHttpMessage + LastHttpContent"
60cfb547b42aef40f1bac6717b7d445d629b3cc1,Fix logging of android platform detection
067a2af700b1cfa476a4bcf1f55071ccb178e25e,Fix a few typos
0efebd5a82e23be33cac50e2934e13546bc6d301,Allow to get an Iterator over all of the EventExecutor an EventExecutorGroup contains. Beside this allow to get basic stats for the EventExecutor like pendingTasks and executorCount
da174f4290278c390aa815e3decf0e6ff90d41d0,Add a warning about SingleThreadEventExecutor.pendingTasks() operation
b58e6787ee428377ae754cf324aa558081c1afa1,Fix typo
e8ee6a2772508dcbdff76880aa99f9dd5d5e508d,"Better exception message when tickDuration is too big

- Related: #1246
- Fix misc inspector warnings"
73db1f886da7c5597d3fe8bf21665071f98afadf,[#1247] Add test which shows the problem with concrete classes that pass in the type based on a generic
4746e74124c01351d0cecf2e9d0e14bb7ab7d44e,[#1247] Add javadocs which tell the limitation of the type detection as there is nothing we can do about
3b8673733e5a052fab5013fff9c25fec574f59de,[#1262] Respect adjustment when using SlicedByteBuf.nioBuffers()
725156f08262895def7a7041584c39d18356f503,[#1242] Fix infinity-loop which was triggered when a write failed and AioSocketChannel was used
b3429af1ccfe1add9f77ad016607334e8c4d65e1,[#1260] Fire a HandshakeCompletationEvent once the SSL handshake completes
e556232aeb8234e851308b030e66414d09444897,Rename HandshakeCompletionEvent to SslHandshakeCompletionEvent
15ac4127e4202548d1d71401adaad3a39b96d1a2,Remove @Ignore and add expected / Fix inspector warnings
2600f46fd738faa5ffbb427a2c30fefe84de3028,Fix checkstyle
5bfb408b7d921451af102a29c4e78ab438b2df89,"Add setRefCnt(int) method to AbstractReferenceCounted(ByteBuf)

- Fixes #1265"
4a792151b0848ee639ac5efaa3fcca42e11241d3,"Rewrite bridge implementation in DefaultChannelHandlerContext

This commit splits bridge into two parts.  One is NextBridgeFeeder,
which provides ByteBuf and MessageBuf that are local to the context
whose next*Buffer() has been invoked on.  The other is a thread-safe
queue that stores the data fed by NextBridgeFeeder.feed().

By splitting the bridge into the two parts, the data pushed by a handler
is not lost anymore when the next handler who provided the next buffer
is removed from the pipeline.

- Fixes #1272"
d8387fa4c3f362842a775f1f49bac1f20b249a1f,[#858] Merge ChannelPipeline.replaceAndForward into replace and removeAndForward into remove
713b200adf7059b123b94ac6282555f066ee16e1,[#1244] Support ChannelTransferPromise for sendFile
391c0117644646a034693d5b2be16164af5675a4,Renames and typos
e69033a4c39ed20a7af92ad8ffe1d20582376e5c,"Replace TransferFuture(Listener) with (Channel)ProgressiveFuture(Listener)

- Now works without the transport package
- Renamed TransferFuture to ProgressiveFuture and ChannelProgressiveFuture / same for promises
- ProgressiveFutureListener now extends GenericProgressiveFutureListener and GenericFutureListener (add/removeTransferListener*() were removed)
- Renamed DefaultEventListeners to DefaultFutureListeners and only accept GenericFutureListeners
- Various clean-up"
7ee571968c63502814b18def3d172ac8e81e4110,"Use progress + total instead of delta

.. because there is sometimes a task whose total is only a rough
estimation"
4b1df148a6caf13d7a696f68452bb9243f83dcb9,"Fix a bug where HttpContentEncoder does not update 'Content-Length' and 'Transfer-Encoding' correctly

- Add 'Content-Length' and remove 'Transfer-Encoding' in case of FullHttpMessage
- Remove 'Content-Length' and add 'Transfer-Encoding: chunked' in case of non-full HttpMessage
- Fixes #1275"
70eee55a48daad4222f8ff37d47f7182f05de473,"Revamp HttpContentEncoder

- Use state machine to simplify the code
- Always produce a chunked response for simplicity
- Change the signature of beginEncode() - HttpContent was simply unnecessary.
- Add more test cases
- Fixes #1280"
9e890f0ab8e1bb17b9cfd7426aa6c51351212111,Ensure to release the component when it's removed from CompositeByteBuf / Add tests for reference counting of CompositeByteBuf
8884e311f1829ddacbad5bbc2b9930b9a8fbf422,"Fix a bug where DefaultCompositeByteBuf.nioBuffers() fails when its component's nioBufferCount() is greater than 1

- Fixes #1267"
18dca2a8a48a5cd872d6d889c7bceeb6eb65a08e,Fix checkstyle
58bfd6bf3bb0ede4c275c3cc91f282cc5e24f928,[#1284] Fix bug which can cause in infinity-loop triggered by a handler removal
6bb00cea6f58fc758703a6ac7cfa15b07ff53e47,"Fix failures in testsuite-osgi-deps

- Make only netty-common depend on javassist at compile scope, and
  all others at test scope"
4a5dc3222488db44b0174297f20b83195601cb8d,"Fix a bug where LineBasedFrameDecoder does not handle too long lines correctly

 - Related: #1287"
ca5554dfe7707d2cce712d1165a648129e0a9c84,"[#1236] Fix problem where adding a new ChannelHandler could block the eventloop

This change also introduce a few other changes which was needed:
 * ChannelHandler.beforeAdd(...) and ChannelHandler.beforeRemove(...) were removed
 * ChannelHandler.afterAdd(...) -> handlerAdded(...)
 * ChannelHandler.afterRemoved(...) -> handlerRemoved(...)
 * SslHandler.handshake() -> SslHandler.hanshakeFuture() as the handshake is triggered automatically after
   the Channel becomes active"
1cdb9e0b488865527359ca3d7e527d414a779188,Just fail all futures that are left to not cause out-of-order writes
475039532ce6096f2d2299eb91d9ad416c35d875,Split dynamic pipeline manipulation test into a new class / Replace PrefixThreadFactory with DefaultThreadFactory / Port the latest tests from the branch 'out-of-order' written by @normanmaurer
584669357734071f426d6fa50b57a867b1a29d1b,Typo
2640832a38c105f2320efc8ab390b4985abbf90b,Fix checkstyle
c987dd556e8a1286451eb498cb7592156f5b9b74,[#1295] Make sure retain(..) returns the correct WebSocketFrame type
9b89c303cc36b2ce8202b62fa88c9d8b849c6e6c,Return correct type on retain(..)
c01d37ad050bdf17e1340c96d23746ffcb8e6224,Merge forwardBufferContent and setRemoved()
ab685de7a31d5c4745b9956f975b96c65cf4fc65,[#1273] Fix resource leaks in test
f979c17b67aaf2d7b1184edd60b5bffe8093d9cd,"Revert ""Fix #1075: DefaultChannelHandlerContext.fireChannelSuspended and fireInboundBufferUpdated do not work correctly if handlers with EventExecutor are added or removed from pipeline.""

This reverts commit 273948055a5ae38a01f1f24f64026aaa1a8bf0a5, which is
incorrect.

- Related: #1075"
9a5f45a0c1fdeea3b277addccbb73657f38293c5,[#1297] Make sure ResourceLeakDetector.open(...) is only used after constructing was successful
9c4bfa44d97f3056a7432539a032d47f8b6b7005,[#1294] Make sure ByteBuf is released once written to channel
e80fb65c363369d97fa669908477e736ee91c492,"Clean up the pipeline implementation / Ensure Embedded*Channel does not run pending tasks immediately

- Replace ugly 'prev != null' check with explicit event scheduling
- Fix an incorrect flag operation in freeHandlerBuffersAfterRemoval()
- Fix a bug in AbstractEmbeddedChannel.doRegister where it makes pending tasks immediately, where the pending tasks actually triggers inbound events
- Remove unnecessary suppression of inboundBufferUpdated() event in DefaultChannelPipeline, which potentially hides an event ordering bug. Unfortunately, I don't remember why I added it in cca35454d214611792067c89b78f7477aae3a323."
d85757a008fee55069daf367a0bb70774e95bbc6,"Fix memory leak in DefaultChannelHandlerContext

.. where freeInbound() and freeOutbound() are not called for all contexts

- Fixes #1298"
c6f936f265159cf0b7e4cf7752710900021176fc,Ensure Javassist is loaded when running an example from an IDE
8e2e22c2707292913f93de4397ecef16044042fd,"Change the thread model slightly for new/freeInbound/OutboundBuffer() for future improvement

- Related: #1283
- Make ReplayingDecoder work with the modified thread model"
5d5c60bdd30efbf4aa311f09b2fc788d629910e2,"Fix a bug where fireInboundBufferUpdated() and flush() swallow the event too early

- Fixes #1292
- Replace DefaultChannelPipeline.inbound/outboundShutdown flag with per-context flags
- Update the flags in free() / freeInbound() / freeOutbound() for clarity"
f149cf522075849e263e6e235188f0b912751924,Reduce code duplication
87007d4eb80705f0a1784c729920effffc80a45c,Fix another memory leak in AbstractByteBufTest
9fe504817523888c72536ac63d4e41cacb84e207,"No need to make CaseIgnoringComparator public

.. because it's unsed only internally"
94aad586270abbb95569d3d45fad8db810bfc098,"Fix incorrect name validation in AbstractHttpData

- Fixes #1228"
32fa4c07f328d99522cdce8b35aa77bb49cbf6be,"Do not unwrap a CompositeByteBuf when it is added as a component of another CompositeByteBuf

.. because Reference counting introduces life cycle issues to the CompositeByteBuf being added.

 - Fixes #1266"
f03b2cde62016615eb9e3c4dd46741017c66eef4,"Fix intermittent infinite loop in AbstractOioByteChannel.doRead()

- OioByteStreamChannel.doReadBytes() did not expand the capacity of the inbound buffer properly."
cc0ad9f1cce1101a841e45f79120718da923bd20,Fix hanging SocketBufReleaseTest / Make sure AioServerSocketChannel closes the accepted channel when the server socket is being shut down
d292fdafddafb749f5b5f077f5cfb00d14ae536a,Make sure to close the accept channel which couldn't be initialized or added to the message buffer
be1426a22096f6e95d36f389a5ea9b8a38482ebe,Fix incorrect log level in NetUtil
7452d05fa6952bdf155b9ba08aae1a356b453ce5,"Add some logging for easier diagnosis in NetUtil

.. + formatting"
c95796d981035eeb8e118aa9c15265752af232a3,[#1302] Make sure the handshake future is failed with a ClosedChannelException on channelInactive
b5989e244917250bae6b925e817ee752ef7aede6,"Reduce exception instantiation overhead in SslHandler / Reduce unnecessary empty array creation

- Added EmptyArrays as an internal utility class"
656d7ca054b8c479235a470617a0e1bd0f60ed0c,"Improve localhost / local interface detection mechanism in NetUtil

- Do not attempt to validate localhost by binding a socket because it can fail when SecurityManager is in use
- Find loopback interface first and get address from there instead of getting loopback address from InetAddress.getLocalHost() (because it's more reliable)
- Instead of throwing an Error, just log and fall back to 127.0.0.1 while determining localhost address"
c37b53fdd1c2627ed504b0a57915ab006e0b172a,Format code
322449eedc73d3c2208c946353823ff43539e2d8,"Add another safe-to-ignore socket error message for SslHandler

.. which covers the 'Software caused connection abort: recv failed' from Windows"
cee0dc6f81fa4ac6ff6fc6f64425d5f28a21c96f,Add IPv4 and IPv6 specific localhost constants to NetUtil
8a4e70884781a567f6da28ade87633b0fe1c9f37,Fix 'unsupported address type error' in UDP tests / Fix checkstyle
24551ccfffe1c2e341ce354c6044019333e0230d,"Unignore DatagramMulticastTest because it seems to pass on Linux, MacOS X, and Windows

More specifically: Ubuntu Linux 13.04, MacOS X Lion, Windows 7"
cd26da96b87501e27edbb5d2e9781ca02601a53e,"Add more safe-to-ignore exception messages for SslHandler

- Just in case SslHandler is used on UDT"
a68d39fcf2067caf272e8094fa476364ad0bc7e6,"Fix an infinite exception storm triggered by DefaultChannelHandlerContext.invokeInboundBufferUpdated()

- it has to break from the infinite loop when an exception is raised by handler"
c72b5341a38519390f51ce6d4831f3e3df2a20b0,ChannelHandler.handlerRemoved() must be invoked *after* the handler has been removed completely and its buffers should be inaccessible.
5dd35448a2282bab8f004318460d570c989d5356,Add a failing test that will pass once #1306 is fixed
7c5dc363fbb96c581bb3ed6c0be54cdc005c9e6e,Rename methods to catch up the recent changes in handler life cycle listener methods / Ensure to call handlerRemoved() even if ctx.forwardContentAndRemove() failed
6282b31bc006b0cdebbf0ebd726f9dad4252247b,Format
99b999760abb20e0eec60bc345873de515d3153a,"Move multiplicity check to the early stage

.. no need to do it late"
1b3d7f532562d0c6f565dcf0cae92d63d463a3bf,"Make sure handlerAdded() is called before forwarding the buffer content of the removed handler

- Added a test case that reproduces the problem in ReplayingDecoderTest
- Call newHandler.handlerAdded() *before* oldHandler.handlerRemoved() to ensure newHandlerAdded() is called before forwarding the buffer content of the old handler in replace0()."
7884574c7b484f0def359be16fc9c59d06f9fd4c,"Remove freeInboundBuffer() and freeOutboundBuffer() which has no value

- Fixes #1308

freeInboundBuffer() and freeOutboundBuffer() were introduced in the early days of the new API when we did not have reference counting mechanism in the buffer. A user did not want Netty to free the handler buffers had to override these methods.

However, now that we have reference counting mechanism built into the buffer, a user who wants to retain the buffers beyond handler's life cycle can simply return the buffer whose reference count is greater than 1 in newInbound/OutboundBuffer()."
73c35aef4efcc47af9cfe4137e99d3c6e9e3941e,"[#1309] Make sure ReplayDecoder respect isSingleDecode()

* This could cause for example corrupt WebSocketFrame's if they was written from the server
  to the client directly after it send the handshake response."
3a2b099e4b7b35beb4dd443ee366db980279545c,"Fix test failure in testsuite-osgi-deps

This commit fixes both failure of test itself and failure of compiling
and running test.

- When the test was run via 'mvn test', Maven gives karaf-maven-plugin a
  list of class directories instead of OSGi bundles, so that
  karaf-maven-plugin generates incorrect feature.xml.  I added a
  workaround for this specific case to DependencyIT
- When the packaging of project is 'feature', maven-compiler-plugin is
  not run at all.  Added a <plugin/> section so that it's always
  compiled."
8bb6d5b3034dc7c6a1c987f249266387dff0defc,Rename Unsafe.directOutboundContext to headContext
a218eb6f6fe07d572c90bc3bfac3f5a8cde6f5ab,"Allow to disable only heap or direct buffer pool

- Fixes #1315

If a user specifies the arena size of 0, the pool is now disabled
instead of raising an IllegalArgumentException. Using this, you can
disable only heap or direct buffer pool easily. Once disabled,
PooledByteBufAllocator will delegate the allocation request to
UnpooledByteBufAllocator."
d92bcff1b6c595e8fea888009b994044bd00793d,"Fix a bug where HttpContentEncoder generates an empty chunk even if it's not the last chunk

- Fixes #1312
- Added more test cases to ensure the fix"
4bac0443e828863c3c4456f31fe6995e9f3bd9cc,"update to barchart-udt 2.2.6
* which fix https://github.com/barchart/barchart-udt/issues/48"
61327b5871ba9c4ef0c5a0ccab5af1f47264d1be,Simplify a bit
6646db171ecc66b33ea81548b05e7434e27d212b,"Use tryFailure() to notify registration failure to avoid IllegalStateException

 .. which is raised when the registration promise has been failed already due to an internal error in the pipeline.

- Fixes #1319"
57a8a9fd983a6030de81c99c7b4518ac40d9195e,[#1321] HttpHeaders.removeTransferEncodingChunked(..) must handle the value in case insensitive manner
a48ed71e86d00726b5bc5a6418b9693af5b8e603,Fix type in class name
ee433ea911ac9254a46c25f6d66dbd56490f0be2,Fix checkstyle
9128d4f16a8ccb102bbf863b88e6be8e5574333d,Fix checkstyle
23d017849429c18e1890b0a5799e5262df4f269f,"Introduce EventExecutor.shutdownGracefully() that deprecates shutdown()

shutdownGracefully() provides two optional parameters that give more
control over when an executor has to be shut down.

- Related issue: #1307
- Add shutdownGracefully(..) and isShuttingDown()
- Deprecate shutdown() / shutdownNow()
- Replace lastAccessTime with lastExecutionTime and update it after task
  execution for accurate quiet period check
  - runAllTasks() and runShutdownTasks() update it automatically.
  - Add updateLastExecutionTime() so that subclasses can update it
- Add a constructor parameter that tells not to add an unncessary wakeup
  task in execute() if addTask() wakes up the executor thread
  automatically.  Previously, execute() always called wakeup() after
  addTask(), which often caused an extra dummy task in the task queue.
- Use shutdownGracefully() wherever possible / Deprecation javadoc
- Reduce the running time of SingleThreadEventLoopTest from 40s to 15s
  using custom graceful shutdown parameters

- Other changes made along with this commit:
  - takeTask() does not throw InterruptedException anymore.
    - Returns null on interruption or wakeup
  - Make sure runShutdownTasks() return true even if an exception was
    raised while running the shutdown tasks
  - Remove unnecessary isShutdown() checks
  - Consistent use of SingleThreadEventExecutor.nanoTime()

Replace isWakeupOverridden with a constructor parameter"
2e0dd65250be7d04f2429cecbc8de31c2e30cb9c,Fix a bug where the unpooled buffer returned by the pooled allocator reports an incorrect allocator
bc96c4b7b36d96ce9a290905ea2b9cdb15f94eca,Fix a bug where SingleThreadEventExecutor sets its internal state flag too early during termination
1e0c83db23eb4ef70b5f9cc911942ee5330ce746,"Introduce AddressedEnvelope message type for generic representation of an addressed message

- Fixes #1282 (not perfectly, but to the extent it's possible with the current API)
- Add AddressedEnvelope and DefaultAddressedEnvelope
- Make DatagramPacket extend DefaultAddressedEnvelope<ByteBuf, InetSocketAddress>
- Rename ByteBufHolder.data() to content() so that a message can implement both AddressedEnvelope and ByteBufHolder (DatagramPacket does) without introducing two getter methods for the content
- Datagram channel implementations now understand ByteBuf and ByteBufHolder as a message with unspecified remote address."
2a15f658d67309c9601c33048e6db1d7b9f8d9bf,"Ensure UnreleasableByteBuf does not expose the wrapped buffer to the caller

- Fixes #1324"
e05fdb35142f04764acdde6001d05b0e1f6b87c8,Update OSGI Test Suite.
0c5bea8b30bddab46048d604cb8e1d6e751018fb,Fix style
d8a250aba0bb7e75d7ec5694ad38d33ba77ea2f0,Log with info level and not with warn
7b854072d43b2d0df0bc6c9ad294661a7d992c35,[#1327] Fix javadoc diagram for new api
128bbe322551f88b299c563a9a502b298d6e0a10,SPDY: refactor SpdyHttpDecoder to allow subclasses to access messageMap
c230afaed17fd1c3134f0d5448e0b5a8f5d69a0d,"Fix for #1313 and #1332

Add TEXTPLAIN in HttpHeaders
Remove all coding/decoding Attribute using URL scheme for name and
attribute
Add text/plain to contant-type"
108c7d9b448da41964b167178d088db513013cea,No need to pass the next BufType to the constructor
17e50491946812a528958c8118d1171c32b109de,Fix examples
a4a92ee14aa7796ad2aae9c12a7be6f6affb1517,Try to reproduce #1335 without luck
a170f05b4bf7cb4b7bed244275fc90f978654988,[#1293] Fix handling of chunked requests in HttpPostRequestEncoder and the multipart examples
97bdabad9c62eecb72555911cfa9f74570204943,"[#1293] Fix IllegalBufferAccessException in HttpPostRequestDecoder

* Also let HttpPostRequestDecoder extends Iterator and let its Exceptiosn extend DecoderException"
6cbc6e9886deb080b8d565bde9d79b0666431296,[#1340] Log SslExceptions thrown by SslEngine.closeInbound() with debug level
5dd867ee239581e8ba24e5b66df37aa3855ae75d,[#1340] use full url in comment
e48bc9c0860e71bf91e2bfd7397483ae82ac6fef,[#1344] Fix race condition in DefaultChannelPromise / DefaultChannelProgressivePromise which could lead to listeners that are not notified
c07234ed7253bcc70e56db5c74cf34a649fa4568,[#1346] Make sure HttpPostRequestEncoder.nextChunk() return LastHttpContent once all chunks are read
6c0b2be41234c6593d1ca8283f1a766ecc861026,"Same fix for Netty V4 for issue #1313

Remove encodeAttribute/decodeAttribute for Multipart element
Replace where necessary by cleanString (to remove '""') on name part (not
on value part)"
b65c8716a562147a410ff606b61a61dfb9c03f19,Correctly handle multipart disposition
18bda09d6c7d0b7dcd0f585c46a4b4feb6e1b8d5,"Allow to recover from exception triggered by accept() more easily

This is done by stop accept() new sockets for 1 seconds
Beside this this commit also makes sure accept() exceptions of OioServerSocketChannel trigger
the fireExceptionCaught(...). The same is true fo the AioServerSocketChannel."
ae765020402f19a010f88bbed8b65791df75c9f5,[maven-release-plugin] prepare release netty-4.0.0.CR2
c43950a03f82e65b692f228f35ce24b7176ff3de,[maven-release-plugin] prepare for next development iteration
c406647bb2f55c495e79b8a4914836976bac7a0f,Use short for DefaultPromise.waiters for less memory consumption
80f4c0b33448490b8b6c8800d8e67cb8739f648a,Merge SnappyChecksumUtil into Snappy and make calculateChecksum() public / Overall clean up
268b059ebb87749a5f9c0c172d00a32b5746a50a,[#1007] HttpObjectAggregator should only throw one TooLongFrameException per full HTTP message
c8de4f03f10a2f42af1d2aa3693434bae56d93bf,[#1007] Make sure the current message is only reset on LastHttpContent
3268d6fc2ebfbd83d2f8574607316a6e990cb1f8,[#1352] WebSocketFrameAggregator should only throw TooLongFrameException once per complete frame
f4ad6173ca704acdd7e4dfdaaf5f26dc0bff1419,[#1299] Make sure a handshake error will not trigger fireExceptionCaught two times
c3b0a9c6b8b40756dc866a11d71281e70b83506b,"Fix duplicate invocation of same plugins due to needless fork of maven-source-plugin

- Fixes #1355"
5c187ca02d6f75593100ef4a14b33b559c0bb5bd,added UDT Client-Server Test
55df4fc24620bb8c4857aa4364fccfa5ff3b4a03,added UDT client server testcase
57a459d970ab6482267e9c7f270e751403a524e9,updated udt and connection test
feab823bfb8a180c537454ee00024a3641d733bc,use barchardt-udt 2.3.0 release. This fixes #1290 and 1329
dbad71366dae6e6d5eab4a8006e228551f1e981d,[#1359] Fix incorrect response when 100-continue is needed
a331c87a7ae6ef3fdefe0d22a3c8a8a03c57148d,[#1358] Fix Encoding of multipart attribute names and filenames for non ASCII  chars
670d3f53a8189f3c062de48a9fc5e4c0d76abe12,"Make uninitialization code in DefaultChannel easier to understand

.. by fixing bad / outdated method names"
dc13b68632957faf6e2e3a57a0e40c11cce45366,"Make sure ChannelHandler.handlerRemoved() is always invoked

- Fixes #1366: No elegant way to free non-in/outbound buffers held by a handler
- handlerRemoved() is now also invoked when a channel is deregistered, as well as when a handler is removed from a pipeline.
- A little bit of clean-up for readability
- Fix a bug in forwardBufferContentAndRemove() where the handler buffers are not freed (mainly because we were relying on channel.isRegistered() to determine if the handler has been removed from inside the handler.
- ChunkedWriteHandler.handlerRemoved() is unnecessary anymore because ChannelPipeline now always forwards the content of the buffer."
2040b0784990cad529a8b9c5d3878d483348eb16,Free the cleared buffer as early as possible / Better naming
f841056752414939969bbe3780aab899578d82cb,Fix SnappyFramedDecoder checksum validation and add a pair of suitable unit tests
e1a378aa03034541c1269eab4077743f02ec845f,"Clean up DefaultChannelPipelineTest

- Use the local transport in a correct way (i.e. no need to trigger channelActive et al by ourselves)
- Use Promise/Future instead of CountDownLatch where they simplifies"
7140e4e63bee37617466408e63e9c4ec9fb8d686,Test if ChannelHandler.handlerRemoved() is called on closure / Reduced timeout
f92cfba388bf97909236c0fcdf098c93f89aecde,"Remove DefaultCompositeByteBuf.lastAccessed and use binary search instead

- Fixes #1364
- Even if a user creates a duplicate/slice, lastAccessed was shared between the derived buffers and it's updated even by a read operation, which made multithread access impossible"
3a5aa1200028bbd0323306a40bd29276fa9b6e2a,Add LengthFieldPrepender.lengthAdjustment parameter
e58af1bc94fa614d5246662f40aa7e13d87782b0,Readability / Fix inception year
41f5d5650d6a9e358f27f5bcfa60fd319b25d43b,"Add Javadoc to tarball / Upgrade maven-compiler-plugin

- Fixes #1360"
fd1d31e7d8c8e218a2e283d2bde32ef3f977cbdd,"Remove unnecessary inEventLoop() checks in Channel.Unsafe

.. because HeadHandler in the pipeline always ensures those methods are always invoked from the correct I/O thread"
699ef0784ef7527b8dc51026033d33fc86bc0230,"[#1317] Allow to use VoidPromise for flush(...), write(...) and sendFile(...)

* This also move rename Channel.Unsafe.voidFuture() to ChannelPropertyAccess.voidPromise()"
2a7bea2ad3102d7290194c5e72fdd15aa9a6e973,[#1373] Make SslHandshakeCompletionEvent constructor public
6942dba8555d11d2c3ada35e80e4383ae853c7ba,[#1363] Make sure ChannnelConfig.setAutoRead(false) will stop read from socket directly
a8830aee4252864370167c8ed72e1ef79ef3824d,"[#1369] Move ImmediateEventExecutor to common and let it access via a static public field

* Also fix a bug there to return a correct implementation of ProgressivPRomise to work with the
 ImmediateEventExecutor"
abb4e20d0b2a32a9225219be48b7024646234f95,"[#1369] Move ImmediateEventExecutor to common and let it access via a static

* Also fix a bug there to return a correct implementation of ProgressivPRomi
  ImmediateEventExecutor"
8a5e249d6f93699c4222240928a9180ee327727d,[#1374] Allow users to all all subprotocols by using * as wildcard
aaca9df99a941d5d6f4de2d5118c62d24e0c952f,@Deprecate a method as it's not needed anymore
bd2230961d0db207cfdc848b4e1012bff71220d4,Fix checkstyle
620c3e025ac5c5aaedca94f3e2aa2cad53434cc3,Just some tiny javadoc fixes
50433f7b9a016c153cbd454d831dfe97374bc07a,"Make sure successful SslHandshakeCompletionEvent is a singleton

- Related: #1373
- This commit is an amendment to 2a7bea2ad3102d7290194c5e72fdd15aa9a6e973"
99caefdf398baca4fefaab3d0f821644630aa233,[maven-release-plugin] prepare release netty-4.0.0.CR3
81e3c1719a2f7e5e9cc80d29e879fd0bfa97b866,[maven-release-plugin] prepare for next development iteration
c1cbe8bec399efa8b5dc6d26397a8fc81767ed5e,Clarify SnappyFramedDecoder javadoc to make it as clear as possible regarding the default settings
548540bc2de34d776206f32f15218bdcadb36c19,"Fix a which could cause data corruption when using AioSocketChannel.

This was because it was possible to have the JDK read into a wrong buffer region if the user called discardReadBytes() later. Fixes #1377"
9a7addbebe97d9cc7825c1d097c35ac191db92dd,No need to use NioSocketChannel.class directly
1801ecfe30fc1c7e61c7cf38456d6e0b7d1c3811,"Update HttpHeaderDateFormat.java

Output for ""E, dd-MMM-y HH:mm:ss z""
on java 1.6 I get: Wed, 22-May-13 09:11:41 GM
on java 1.7 I get: Wed, 22-May-2013 09:11:14 GMT

To be uniform on both jdks.. modified it to
""E, dd-MMM-yy HH:mm:ss z""

learnt from - http://stackoverflow.com/questions/16687298/simpledateformat-different-behaviour-depending-on-java-version"
9c925b104aec2105649bf7b4d65400d6caeb817f,[#1385] Fix NPE which was triggered if a write was executed but the HeadHandler not init yet
83dcf829d6d46112f09097a3b81393b5c5805f97,[#1384] Cache HttpHeaderDateFormat in ThreadLocal
50ac0cdfcb35907fa38df61ff23708acd592d510,[#1388] Ensure AbstractNioMessageChannel based Channels will call fireInboundBufferUpdated() soon enough to release resources
5398792ffa19829bfdc7e9ac02ebdb8952c84032,[#1388] Correctly break the loop on exceptions
a3b4cdd614d0ecd20c1b23758df969df0ca410a4,"Fix StackOverflowError in LocalEcho.doBeginRead() when the peer channel keeps writing data

- Fixes #1380"
0e8fb215540d1b6bdeaabf8d6bf1b622313f9f33,Some optimizations to the http codec
252bd2585556087c74ae29cfc80dee78f13da2c4,Only call key.interestedOps() if needed
d31ccebd620d3fa84221093166016d9c4d0b3583,Make sure that setAutoRead(false) has a direct effect and only update interestedOps if needed
f5dc482a593a426b1c28d0825641d896102358bf,No need to clear buffer as it is cleared later anyway and only update interestedOps if needed
aa96b4b2866bfd9faaa9f6e11c2750a4b1d2d606,No need to create temporary arrays
d9c700e9fed0ea964eeabc46809aeb76425c2a5f,[#1392] Fix bug where SslHandler returned wrong value for getCloseNotifyTimeoutMillis()
f7931af704cb0baeb9ce5ac7b81a4f5580b110c0,Re-add Unsafe.voidPromise() which can be used for Unsafe operations for which no notification should be done [#1375]
89f1f3f4d1a5d8ba63fe8950a3ac1f958e070397,[#1399] DefaultChannelHandlerPipeline.firstContext() should return null if no user handlers are in in the pipeline
bc20107b688db0107b1a859306d0b5036f646a3b,Use correct value to disable/enable direct arenas in PooledByteBufAllocator
cf757f17f6c71bf7fa3b3def62aba92074c7448c,SPDY: always enqueue data frames if stream is stalled
fe711f65fb125ed946dbccd5aa7b7275ab6b72bc,"Merge pull request #1421 from jpinner/spdy_fix_stalled_streams_master

SPDY: always enqueue data frames if stream is stalled"
14158070bf8b3f831702061ffd657c84179fc639,"Revamp the core API to reduce memory footprint and consumption

The API changes made so far turned out to increase the memory footprint
and consumption while our intention was actually decreasing them.

Memory consumption issue:

When there are many connections which does not exchange data frequently,
the old Netty 4 API spent a lot more memory than 3 because it always
allocates per-handler buffer for each connection unless otherwise
explicitly stated by a user.  In a usual real world load, a client
doesn't always send requests without pausing, so the idea of having a
buffer whose life cycle if bound to the life cycle of a connection
didn't work as expected.

Memory footprint issue:

The old Netty 4 API decreased overall memory footprint by a great deal
in many cases.  It was mainly because the old Netty 4 API did not
allocate a new buffer and event object for each read.  Instead, it
created a new buffer for each handler in a pipeline.  This works pretty
well as long as the number of handlers in a pipeline is only a few.
However, for a highly modular application with many handlers which
handles connections which lasts for relatively short period, it actually
makes the memory footprint issue much worse.

Changes:

All in all, this is about retaining all the good changes we made in 4 so
far such as better thread model and going back to the way how we dealt
with message events in 3.

To fix the memory consumption/footprint issue mentioned above, we made a
hard decision to break the backward compatibility again with the
following changes:

- Remove MessageBuf
- Merge Buf into ByteBuf
- Merge ChannelInboundByte/MessageHandler and ChannelStateHandler into ChannelInboundHandler
  - Similar changes were made to the adapter classes
- Merge ChannelOutboundByte/MessageHandler and ChannelOperationHandler into ChannelOutboundHandler
  - Similar changes were made to the adapter classes
- Introduce MessageList which is similar to `MessageEvent` in Netty 3
- Replace inboundBufferUpdated(ctx) with messageReceived(ctx, MessageList)
- Replace flush(ctx, promise) with write(ctx, MessageList, promise)
- Remove ByteToByteEncoder/Decoder/Codec
  - Replaced by MessageToByteEncoder<ByteBuf>, ByteToMessageDecoder<ByteBuf>, and ByteMessageCodec<ByteBuf>
- Merge EmbeddedByteChannel and EmbeddedMessageChannel into EmbeddedChannel
- Add SimpleChannelInboundHandler which is sometimes more useful than
  ChannelInboundHandlerAdapter
- Bring back Channel.isWritable() from Netty 3
- Add ChannelInboundHandler.channelWritabilityChanges() event
- Add RecvByteBufAllocator configuration property
  - Similar to ReceiveBufferSizePredictor in Netty 3
  - Some existing configuration properties such as
    DatagramChannelConfig.receivePacketSize is gone now.
- Remove suspend/resumeIntermediaryDeallocation() in ByteBuf

This change would have been impossible without @normanmaurer's help. He
fixed, ported, and improved many parts of the changes."
ccd43e0cdafc2048e4b56123123839fd162b45ea,Fix compilation error
f2d8a745b156d7002044076e17346955795a114d,[#1422] ReadOnlyByteBuffer.isWritable() should return false
d9af92f354776d54ecd6d392b7343543bc4b7181,[#1430] Fixed byte order problem on little endian platforms that support Unsafe but not unaligned memory access.
fa6999cd4285d12e01e93c96d4141ec483dfa209,[#1425] Allow to access the EventLoopGroups via the Bootstraps
e71a521284359be8a55e7ece5910689f0cfe9ed4,"[#1414] Use gathering writes in AbstractMemoryHttpData if the buffer is backed by multiple ByteBuffers

* This fix the bug which caused an UnsupportedOperationException when renameTo(...) was called and the underlying ByteBuf was backed by multiple ByteBuffers"
07858a3bd4b0729c358563c6e61d70b5de1c9b3a,[#1411] Correctly check for null in AbstractTrafficShapperHandler.read() and so prevent NPE
9449efb9b2a2c6a2a9a2f7263c2e5ba0437e2475,"Optimize Recycler.Stack

- No need to use a deque at all
- Increase the initial capacity so that there's no practical chance of capacity expansion"
3be25694d09c1d45981cda020982e0cde638e4ee,Add ChannelHandlerContext.isRemoved() to easily detect the removal of a ChannelHandler while in a method.
fa205defa1897bd0ce6cb6c3d59814624ce09597,"Simplify the logic for updating OP_WRITE in the NIO transport

- Removed code duplication"
65e4161e637f03b952132b44b8efb83e0b30fd4e,Remove an unnecessary empty line
e9c6406819ec569a4dd256df0cf2d18c07543910,"Remove the AIO transport as NIO is just faster

The AIO transport was added in the past as we hoped it would have better latency as the NIO transport. But in reality this was never the case.
So there is no reason to use the AIO transport at all. It just put more burden on us as we need to also support it and fix bugs.
Because of this we dedicided to remove it for now. It will stay in the master_with_aio_transport branch so we can pick it up later again if it is ever needed."
7234a00f0da2197958065d8da3a549d469078cd5,"Add ResourceLeakDetector.ENABLED

.. to provide a way to check if resource leak detection was enabled programmatically."
6732c6761bcc06183a71ad676b0110d2d226ab68,"Recycle PooledByteBuf partially

- Related issue: #1397
- Resource leak detection should be turned off and the maxCapacity has to be Integer.MAX_VALUE
- It's technically possible to pool PooledByteBufs with different maxCapacity, which will be addressed in another commit."
92bd4d2fe0e433283ca75426b080dabc987c9328,"Remove MessageList.remove(*) , MessageList.set(*) and MessageList.add(i,*)"
383bb80d1ef42b32f8986672269550f37356adb8,Merge branch 'master' of github.com:netty/netty
68c737f0c0823f6a6753e9da2046a25b8285fb40,Optimize the way messages are added from one MessageList to another one
d9806c812731481a0066968ca1fa2a308a711009,Add javadocs
7f7bf304b0b43a1445e68c15ee6f6403c7ca5b9e,"Optimize PooledUnsafeDirectByteBuf.newInternalNioBuffer()

- No need to produce garbage"
c8ca3299324a1e2b9ce501c95715cf10ea70c238,SPDY: update object hierarchy
3ce9ab2e72235bf2ae45f57de11803249419cb69,"Replace the sun.nio.ch.SelectorImpl.selectedKeys with faster one

- Yield much less garbage
- Slight performance gain (1~2%)"
bf5960e9eb08396b7fdf17aad963f5e0c4dd1557,"Fix #1435 and #1436 by reverting 7f7bf304b0b43a1445e68c15ee6f6403c7ca5b9e

Different PooledByteBufs can have the reference to the same PooledChunk (and its ByteBuffer), so it's incorrect not to create a duplicate."
b1b1a906f066fd5bf4508928a5c9a7574276ac71,[#1390] Make sure RxtxChannel does not block forever when reading
f2f6d68d2e76fd10272949b7726423ddbf6e0377,"Make sure writing empty ByteBuf will not cause a stavation.

This also fixes [#1436]"
e4a985f6ac70ed856eba95e4b83c5c207be38768,Let MessageList implement Iterable
16e12b45f8e3e56afcac1989441b07ce44f97154,Use Correct NoSuchElementException
e3ec124ccd88e9f9f7461315ee659a222f9828fd,Make sure WebSocketFrameAggregator and HttpObjectAggregator don't leak ByteBufs
85afdda3ced86f74ea77a7b725b5657cdc1957be,Correctly write MessageList which contains more then one message
41af9a1eb3f9e5c814cc668736a006ee2593b325,"Implement cancellation properly for Promise/Future

- Related issue: #1432
- Add Future.isCancellable()
- Add Promise.setUncancellable() which is meant to be used for the party that runs the task uncancellable once started
- Implement Future.isCancelled() and Promise.cancel(boolean) properly"
7a5cf48b8decf2a37a4b2de685e1101bb79c222a,"Implement Promise/Future cancellation properly for outbound traffic

- Related issue: #1432
- Make sure the Promise of a write operation is not cancellable before writing out"
c3034c896489f76b95ae4517b8f3d86e75e46215,"Implement the cancellation of connection attmpe for NIO and OIO transport

- Related issue: #1432
- Also added test cases to validate the implementation"
bf046492fb41899a715b9b8e79bee1b6854e40ac,[#1439] Fix CompositeByteBuf.nioBufferCount() to return the correct number
341f7757aa1a6046ca0803a9d42904e399e6fc7f,Fix checkstyle
5b978497f84d6015f41653ce2b8dbedcf18ef6ee,Cleanup
9396246fe979e31703dfc915d856e67741390aab,"""  "" -> "" "" / Cleanup"
2d7c6f8ee13a87cc33edf2884ed2f6f445982687,"Make PooledByteBuf recyclable regardless its maxCapacity

- Make AbstractByteBuf.maxCapacity internally mutable so that PooledByteBuf is completely recyclable"
7a1550631d5ee3f87961f53b8842d8ffdf364247,"Make write operation cancellation while it's in progress

.. which should be useful when writing a large buffer/file"
786501d9721e767c89fab029b217a2adead13623,Remove unused thread local and its getter
17492109850e5cd1ba22cacb3e02fc6f705af073,"Add GlobalEventExecutor

- Related issue: #1389
- Also extracted SingleThreadEventExecutor.ScheduledFutureTask into a top level class for a reuse"
fd0084ecfa254bc5f619f50ec50a8cb8e3cc083e,"Remove the constructors that uses ImmediateEventExecutor from DefaultChannelGroup

.. which is incorrect in my opinion.

+ minor cleanup"
79e236dfc2eebbe025b80bc7b410609c548c8bad,"Make EventExecutor.shutdownGracefully() return Future

- Also added EventExecutor.terminationFuture()
- Also fixed type signature problem with Future.add/removeListener()
- Related issue: #1389"
3fc6e02f8b122bc2a22b138af3ca768fc98a832f,"Allow appending classpath to the ClassPool of JavassistTypeParameterMatcherGenerator

- Fixes: #1402
- Make JavassistTypeParameterMatcherGenerator public
- Add appendClassPath()"
be695636d23d413009305c2d95adc044da65b851,Make JavassistTypeParameterMatcherGenerator.generate() public
2320a13a4e72d496f03022a0ea27c6f5dce5ca22,"Better use NoOpTypeParameterMatcher as a class path source

.. because we tries to load it really"
d1a3806ebdf8b1272b42fc1c684a5e290bee6a24,Make use of gathering writes if a MessageList which only contains ByteBuf msgs is written to a NioSocketChannel
1e5f266a3c2eb592b55387b4ef187ed0dabbf019,[#1410] Make sure we generate a Http response if the server writes back 200 response with empty body and and close the connection
c6886f9d0e3954c9c32f4f59eb3b9ef204a8ed96,Add very simple httpserver example which just respond with Hello World
78c6925921fbbc44261b7480d396bc243f07ca26,Clearify when you need to call retain()
2088d1b491fdfe25fc4d71d2472ead7f770147a9,Generate less garbage when performing gathering writes
78d8f05c218cab107255c4dc1a1344aef138d379,"Make sure that HttpObjectDecoder decodes the last HTTP message without 'Content-Length' header

- Fixes #1410
- Revert 1e5f266a3c2eb592b55387b4ef187ed0dabbf019 and provide a proper fix with a test"
a403da3042335288bf10f58f9d0a16f7585b4557,Rewrite HTTP encoder to use gathering writes
96380e756c069e5f8ee48dcfa3e0c64fe64a1ecd,Fix test failures introduced by 78d8f05c218cab107255c4dc1a1344aef138d379
5131c024fa4852e89d0349149a2cebccff9eda94,Tiny optimization
283feda119cf40746da5db0d63cda0a101eaec2e,Reduce even more garbage by exposing ByteBuf.internalNioBuffer()
175526b6bde9033e021e113b64e1a0f3f85674aa,"Move ReferenceCounted and AbstractReferenceCounted to io.netty.util

- Fixes #1441
- Also move and rename IllegalBufferAccessException to ReferenceCountException
- Prettier reference count exception messages"
f178b8d421ae0f14ca21e3b414da0b0b88b8bc87,Suppress duplicate warning message printed when a message reaches at the end of pipeline
7eb0f6105dac524a0b48ff5a8b36c91001ce5409,Fix memory leaks
6d1cd0d0cd0f8b4a6b6f088020b8a03aaed626f3,ReferenceCountException -> IllegalReferenceCountException
32bf3054e12750e88f80161468f3617c1c585004,"Prefer direct buffer by default

- Because it's faster in most cases thanks to unsafe"
ca1a37a3b38bf1f9b8bccf16ae982ab05e2ca465,Log correct system property name
ef21ab62bba07c299c4d0fb0213a9f94f5c7a35e,Simplify hello world content generation
01d9f10af680166880fc175e7d58a35b4830f201,Remove the volatile modifiers where they are unnecessary
427d9c4bf237cede1f86536edb98d5698237af8d,Fix test failures and reported leaks
fa277eda200228dbef1de9317184a6dc8b1945a6,Fix reported leaks
f002d539e1a22aedd2afe48f68d1540633be6a58,Upgrade dependencies
381063e09c4ea3c756048fd88a603aea6ede35cc,[maven-release-plugin] prepare release netty-4.0.0.CR4
e5ca6518ba963c1906d3c928404f28e055df085a,[maven-release-plugin] prepare for next development iteration
a1a86b9de48e4696e3496904dd972336f57b4a0b,[#1442] Make sure closing the channel will not cause an UnsupportedOperationException
0e16b22aa1dddced62e025f4dfc0a1ccd52720a4,Deprecate NoSuchBufferException as it's not used anymore
9100256a567761da87acbc7be79d3b28ef975ac3,Javadocs cleanup
dc070a00b228a5a4356db0a79430a5cb035d6012,Deprecate IncompleteFlushException as its not used anymore
8edee3272a086a57c9ae2cdba7eba5bea436c64f,More javadoc fixes
86e95dd7ac91b618c55b0c30482becb61ea1592b,Make sure the exception is thrown when it happens during test
a0c082497a22a34e5cd4117c1205d61bd153e0d6,Remove unused exception classes
30bfb989c1ea7433150651990cfc4dcdf63d7f9e,Fix memory leak
25c51279cfc83830f7a0fa94c062702f8dd38a53,"Revert ""[#1442] Make sure closing the channel will not cause an UnsupportedOperationException""

This reverts commit a1a86b9de48e4696e3496904dd972336f57b4a0b because the
semantic of ctx.isRemoved() is confusing to a user - why is
ctx.isRemoved() false when handlerRemoved() is invoked? A better
solution would be check if the connection is inactive and mark the
promise as failure before attempting to write anything."
fe40d4b67f65dc31b747f6282463f50bdcfa151e,"Make sure writing to a closed channel does not trigger an UnsupportedOperationException

- Fixes #1442"
0da48e7e7f3e5e510b272442a391b26566587fa3,"Determine the default number of heap/direct arenas of PooledByteBufAllocator conservatively

- Fixes #1445
- Add PlatformDependent.maxDirectMemory()
- Ensure the default number or arenas is decreased if the max memory of the VM is not large enough."
f5377cc8d7a5f8a32bfd5ad54b3caa03fe176f2f,[maven-release-plugin] prepare release netty-4.0.0.CR5
a5871dfd86378bfd4e1b8f450d5e2e2a61991aaf,[maven-release-plugin] prepare for next development iteration
4bf5003f76c8fb5dc47eea713423585fc5646c30,"Don't release messages before throw UnsupportedOperationException, as the caller method will take care"
6a9f965f9bf4a486c5dfc1ff013e1225df1fbecf,"Introduce new utility class calles ReferenceCountUtil and move utility methods from ByteBufUtil to it.

The ones in ByteBufUtil were marked as @deprecated"
cce74efded455f042f3d86789b2f76c980dcc0ea,[#1448] Don't print failure if VoidChannelPromise is used
14f2e29af9cb23021facc075c38dd42cb8ff678b,[#1450] Fix examples in ReplayDecoder javadocs
0d9aecbbc1a9cd70a9225d686f6378b61d0c59ff,SPDY: better encapsulation of header encoding/decoding
f0ad07973797592b741dd97c6137b2097bc71b5e,"SCTP: Reduce object allocation overhead and fix receive buffer allocation

There are a couple of changes here all related to making the SCTP
transport less garbage-heavy:

- Remove the SctpNotificationEvent and just passes along the JDK NIO
  Notification, as passing the Notification and always null inside a
  wrapped object seemed a little bit superfluous
- Apply @trustin's changes to receive buffer allocation to SCTP
  transport, and also makes the SCTP transport use the configured buffer
  allocator rather than always creating a direct buffer (which seems
  like a bug)"
8570c717addb242014fd9aab08e1b6b62aa1bfa8,Upgrade to javassist 3.18.0-GA
6f86f38ae973279c1278f07ea22df66fc7e6273c,"Fix IllegalStateException triggered by a successful connection attempt

- Fixes #1467
- Provide more information about the tasks and promises on exception for easier debugging"
952e7bbec706f655397438ec481dad4363a9245f,Remove cruft
32aa6616044076b3c569a27f873f11695f08887d,"Make sure PlatformDependent.maxDirectMemory() works on Android

- Fixes #1451"
63403884f71250f61d59fde80c9f7d38911f5d00,"Make sure PlatformDependent.isRoot0() works fine in Android

.. by swallowing ErrnoException raised by process.destroy().

Fixes #1472"
b6fdac7df30697a5ba94897c1bea647a76d04b15,Remove unnecessary logging handler - ByteLoggingHandler and MessageLoggingHandler / Extensible log message formatiing
c7038ed8d6e3cc8b7aa2b744c3146f1a1cfe86a3,Fix a compilation error
96c5ab62e66975f01d82ac9a913f4457273893fb,"Fix IndexOutOfBoundsException raised by JZlibEncoder.encode()

- Fixes #1471"
39d71440e1581e9a318dd7ee81edb43d8e6a2ff1,Fix checkstyle
58c33d71db9efd02feafc32a845bbb3ea0c9d16d,Fix another compilation error
dc6e2cd62537ce1b60ccf9e7ad09efb04f155d40,Make AbstractMemoryHttpData generate less garbage
6c5c119f8cb1c5795b43ab73ccc54ad7ad5b37a3,Fix incorrect parameter validation in DefaultFileRegion
bfc9c6d80d3623b0bcaf4997d3ee941027f2a1e8,"Add ChannelInboundConsumingHandler

..which is useful when the handler is placed at the last position of the
pipeline because it releases the received messages automatically."
a969613540833a16d439c6c76ef5fd027fb8efaf,"Merge ChannelInboundConsumingHandler into SimpleChannelInboundHandler

- SimpleChannelInboundHandler now has a constructor parameter to let a
  user decide to enable automatic message release. (the default is to
  enable), which makes ChannelInboundConsumingHandler of less value."
c86155e4d4bb0286cdd0298ec4c1e88a7a19d020,SPDY: replace exception in SpdyHeaderBlockZlibEncoder with EMPTY_BUFFER
c07b0cac70064c081d76e9f9f1990a4e40e0e7ff,Adds port to the host header value. Due to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.23 the port should be added if it differs from the default port. To simplify the code we just always add the port.
dba3aa2d4f59b6d7a93cb1fcaee61cd83e3342e7,Add io.netty.noResourceLeak option to microbench
a2f232720b4cb64c340f81d15eb445925fd66047,"Make AdaptiveRecvByteBufAllocator's lookup table simpler / Optimize buffer size normalization

- No need to have fine-grained lookup table because the buffer pool has
  much more coarse capacities available
- No need to use a loop to normalize a buffer capacity"
cfb3b977a1d65e8e0805b37ca243681a9d93a4b7,Fix the catastrophic failure caused by AdaptiveRecvByteBufAllocator.getSizeTableIndex()
ad73dce7a1bc8927ac1e46bc320dfdae68e5c1b0,[#1464] Make sure the ChannelPromise for writes is notified while using SslHandler
e06fcdbc6a162f085b77e25bed1f847026cfd3ea,[#1475] Correctly handle writes with empty MessageList in SslHandler
c9d01b2fb59c6ef7905ed0209962a34e3b4ba853,[#1461] Correctly handle DefaultChannelGroup.write(..) of ByteBuf and ByteBufHolder
c77f03d886f5785e3a59935fc347c0c4c72bbe37,Fix AdaptiveRecvByteBufAllocator.getSizeTableIndex()
e0805ecea9240a4a9e2b0eb70e77c2d5affbe1a2,"SPDY: handle too large header blocks

- Forward-ported 22b8a96e044b77e5fadc5a1217080a1f9c69aa9c"
2221446425709d465605c124d44a508d47264195,[maven-release-plugin] prepare release netty-4.0.0.CR6
a6795d7780bf2dcb7bd02fe4f169cdb1bca51b4e,[maven-release-plugin] prepare for next development iteration
dbab41cc50f4ddb71a153df342748ca1d85ab8e7,"Improve the utilization of subpage pools

.. by avoiding the overly frequent removal of a subpage from a pool

This change makes sure that the unused subpage is not removed when there's no subpage left in the pool.  If the last subpage is removed from the pool, it is very likely that the allocator will create a new subpage very soon again, so it's better not remove it."
e8ea98017f1c1dd5c892e2580e7635608afce83a,Fix regression introduced by 0364265f4692b2f2f28ab36037c4ab6f3c242eae which could lead to corrupt attribute values
58b968b6036dc194dce5a3e70d05d493b2fb6b58,[#1454] Fix IndexOutOfBoundsException which was thrown if last component of a CompositeByteBuf was removed
a1632e7d1526698c0e6db6e65e49d8a38fa0d926,"Add ChannelConfig.maxMessagesPerRead and ChannelOption.MAX_MESSAGES_PER_READ

- Fixes #1486
- Make sure AbstractNioMessageChannel.NioMessageUnsafe.read() only up to maxMessagesPerRead"
1f27c3b39060e544b4d3aaf05b700dd5c433a0cd,"Make NioByteUnsafe.read() respect ChannelConfig.maxMessagesPerRead and adjust the default from 16 to 1

- Fixes #1486
- Decreased the default from 16 to 1 because unnecessary extra read on req-res protocols results in lower throughput due to extra syscalls."
bc483724f42215c4ba53590540d83b57bfdf2099,"Improve the documentation of MessageList

- Fixes #1459"
c7c9e743ce8d08fecccea11372c976e63b2f2955,Fix naming
cfd514d099fb41b2a467ca208fe1334bb04f8f6c,"Add WebSocketClientHandshaker.close()

- Fixes #1470"
a52eafd7e8e9ac25206088748b8e53d3809a9e4c,Fix FileServer example
1c57e3830c38187eb39e53b21a7b9a9bdf896e90,[#1474] Make sure testsuite also pass when no network/internet connection is present
734ec51ac9440a4a61950cfc82580b94cf05cbe9,"Allow specifying 0 as the default number of threads when instantiating an EventLoopGroup

- Fixes #1426
- We already allow a user instantiate an EventLoopGroup with the default number of threads via the default constructor, so I think it's OK although it's not always optimal."
4dd9b6ef2e1cf321874e4a613e48bd2833f3453e,"Add ByteBufProcessor and ByteBuf.forEach(...)

- Fixes #1378
- Needs to provide optimized forEach implementations though."
792edf631cb799b59e59588308b6310d9bad75b9,"Deprecate ByteBufIndexFinder

- Prefer ByteBufProcessor
- Related: #1378"
b5bb36c08750074d884b1f08cfac9d2a91144bda,"Use (fromIndex, toIndex) instead of (index, length) for ByteBuf.forEachByte(...)

- Related: #1378"
98531313de0332521b571580ebb8ad0b18939fe9,"Optimize derived buffers' forEachByte(...) implementation

- Related: #1378"
9804741fb3412d47af414cda7239deab24f84ed7,"Fix test failure in SlicedByteBuf / Add tests for built-in ByteBufProcessor impls

- Related: #1378"
ac39cad5fff8fecd79c83ad46900581b2fe4624a,"Split ByteBuf.forEachByte() into forEachByte() and forEachByteDesc()

- Related: #1378
- As suggested by @liqweed"
52691488ee0b95381c8a4d25a567c78b29c4b00e,"Update Javadoc of ByteBufProcessor and MessageListProcessor

- in response to @shacharo's suggestion"
094d01873bee480c787f9ebda2c845e822c09a71,Throw IllegalStateException if implementations of ByteToMessageDecoder and ByteToMessageCodec use @Sharable
0dcf352f4c1d048bf0e8a7566ebee7a6859f423c,"Vastly simplified ByteBufProcessor and MessageListProcessor

- Related: #1378
- They now accept only one argument.
- A user who wants to use a buffer for more complex use cases, he or she can always access the buffer directly via memoryAddress() and array()"
7cf88a1a3c9e72c55df00ffb8af12c7930eb6ec3,"Add MessageList.array() / Rewrite MessageList.add(T[], int, int)

- MessageList.array() should give better performance + concise code
- MessageList.add(T[], int, int) iterated over the source array 3 times at worst case. This commit reduces that to 1 time."
1e0146da3e36d8d5bf67cf63158b3517af2d1d0b,"Optimize MessageList.add(MessageList, int, int)"
d4665f1703241a4f0325348d0e3010520f5bbdaa,Fix test failures
591dce565a01b8f8ec25b2bb17bd24e8724157c4,checkExclusive() -> checkIndex()
5f1aa6afde4f2727e2230b530d52bef98757eac6,"Remove potentially misleading exception message

.. because the MessageList itself is not read-only."
1b40a0ebc5ff3e3c868ec15ce2debb1967291a4d,SPDY: SpdyFrameDecoder should buffer unread data when decoding headers
ea963c25c99c9b90acb893843f14bacd2a7d9250,"Improve Javadoc of ChannelPipeline

- Fixes #1226"
a6abd2feb202e9a54da7bb37620656054489f5ac,[maven-release-plugin] prepare release netty-4.0.0.CR7
613547b0b94e387ea90de025287c5d2005b3ffc4,[maven-release-plugin] prepare for next development iteration
e234abdbf764513024cdedd09e27868ad0ecfbdf,Add javadocs
4dab51b619a010b4030b3d15f5a7dc70a7e7b008,Remove un-used method parameter
0c8cf5cdc8cf98a8de3605279c5d0cdfe5e47b42,SPDY: SpdyHeaderBlockDecoder should not discard input data
617ab6321ba860c418de1ac61d7417e4937455de,[#1489] Correctly handle channelReadSuspended and channelWritabilityChanged in CombinedChannelDuplexHandler
5d88c423dfa458d82fd2c12083307507b163a32f,[#1500] Remove @deprecated methods
a6bdd7cda43d17fb7721a0b695e66811c5bb6bc8,Fix compilation errors
43da224978a895e2e8312090101225dbe7fae675,Only log about not avaible JavaAssist in debug level
4b11aff08fb23f43ed849824bf68f532986cc510,"Less confusing log messages for system properties

- Fixes #1502"
720de2e6ccd9bac41ffe24612d979a38a28fb616,Add missing sanity check for DefaultChannelHandlerContext.write(...)
26b56d3addb34b409bf10b819a1e70ea2ad46b71,"Fix a bug in MessageList.add(T[])

- where it uses incorrect source index while iteration"
efd9c9477556ad9e7dddfb0e02edcbb1b09c9489,"Use higher maxMessagesPerRead as default for ServerChannels

- Fixes #1493"
149db34c1907ee162b785560289877d20ba44138,[maven-release-plugin] prepare release netty-4.0.0.CR8
7e3a01cc51136f3bc928c0d5537e9985090b563d,[maven-release-plugin] prepare for next development iteration
963376990927b1169304ccad7546168a74d012bf,Improve performance of encodeHeader
8dfbcbda299ac0ff13ab88650784aff70d9811a0,[#1501] Fix NPE which could accour if ChannelOutboundBuffer.fail(..) triggered another call to ChannelOutboundBuffer.fail(...)
54378358327ac0fdaa2982114f74a17ec4cfe0ad,[#1501] Fix NPE correctly which could accour if ChannelOutboundBuffer.fail(..) triggered another call to ChannelOutboundBuffer.fail(...)
956c0f8b9059c84122357000258a00cf0bc5e905,Better explanation of reentrance issue of ChannelOutboundBuffer
66a16b133c1916e4dee16151b72f691484b8a1da,[maven-release-plugin] prepare release netty-4.0.0.CR9
830c5594054d0653fb4c7a569eb4e2ff7a10ab8d,[maven-release-plugin] rollback the release of netty-4.0.0.CR9
ca73eaef0dcf4f4889492253d78f679a84a1917b,[maven-release-plugin] prepare release netty-4.0.0.CR9
ec5e793a2fd244e334c2b1f2c22d55389a3452f7,[maven-release-plugin] prepare for next development iteration
a4ee2841be0be8e69d624f0543ab9d0ebb4b9567,[#1507] Fix buffer leak in WebSocket08FrameDecoder
824bb3419a4f44980374b4f73bbf5063ac567f1e,[#1511] Fix NPE in AbstractTrafficShapingHandler which could happen if the READ_SUSPEND attr was not set yet
328969485cf164b0c646c990c12a74479864745b,Add explaination to the javadocs to not call retain() on the request when doing the handshake. Related to [#1508]
7ec12d327f5adabffb71adffe8a5ebdaa680437a,"Remove deprecated ByteBufUtil.release(..) and ByteBufUtil.retain(..) methods and its usage. Also fix a problem where an object would have been released two times.

* The problem with the release(..) calls here was that it would have called release on an unsupported message and then throw an exception. This exception will trigger ChannelOutboundBuffer.fail(..), which will also try to release the message again.
* Also use the same exception type for unsupported messages as in other channel impls."
79576d15c281ae18449cfa7f457932455e219974,[#1513] Use the correct names when add the websocket decoder and encoder
998b408db3403e44566ab3f08dd381a7e03f7d1d,"Fix NPE in OioByteStreamChannel

- Do not assign null to 'is' and 'os' but assign an alternative stream implementation"
f64a121de78fe739b61d503dc61cc62fe98659d5,[#1515] Add WebSocketFrameEncoder and WebSocketFrameDecoder interfaces and let our impls implement it
cea873286e68e0e164456cecce55401b3187df13,[#1517] Only fire the exception throught the pipeline if the channel is registered when using VoidChannelPromise
08b75e594cbe4f16ec73c3840a3981af7871066f,[#1519] VoidChannelPromise don't fire CancellationException anymore which was incorrect
45d20d5c9faf51a506d4d2a9fdb04b9cfd876876,[#1516] Fix resource leakage which was caused by the AbstractDiskHttpData which did not release the buffer after copy to disk
1fee1ef74ed8ac515c19a7f8eebd16f41a37b7b6,[#1520] Release previous set buffer when setting a new data source
cad7c1f1b0e23a4a1320d967b17aafcaa0119ace,[#1521] Fix performance issue in AbstractHttpData
2bda1b530adad4e92039c3e16fc08044634f0cd8,[#1523] Fix bug which lead to have SelectedKeys handled two times and so caused a NPE on heavy load
d900f8c21d2c8205eff3fb392f1b6f134dc447a1,[#1524] Fix resource leak in HttpContentEncoder
9f0f653588ce1b1715d1b6516cf47635d6810cfc,Optimize HttpContentEncoder to do less memory copies as those are not needed
ea85054eabb9846813f52bc7fbe0f11982529dc9,Correctly detect LastHttpContent after encoding
0b9235f072f8bdac8bfa2f3e365a9cbcdbb0fe81,"Simplify ByteBufProcessor and MessageListProcessor and Add internal component accessors to CompositeByteBuf

- Fixes #1528

It's not really easy to provide a general-purpose abstraction for fast-yet-safe iteration. Instead of making forEachByte() less optimal, let's make it do what it does really well, and allow a user to implement potentially unsafe-yet-fast loop using unsafe operations."
b7e6a86c1e9b5920af696e7f7149d4675fbf0485,"Add MessageList.first() and last() for convenience.

- Fixes #1530"
eb8df35f211282aa1602706d59187b8da78d1f7d,"Use MessageList.first() and last() wherever possible

- Related issue: #1530"
b26e61d689ce3f7bc52d392d0c4750c54a094f06,Fix broken tests
b63f3488b7b6ff25fcaa6152eb9c00008ed4d941,"Add a HttpPostRequestDecoder.destory() method which should be used to destroy the decoder and free up resources

* Also make the contract more clear about who needs to call release()"
dfc05a6ed7dbc59416b0a2cff26ac91f64e6af26,"Fix documentation error in ByteBuf

- Fixes #1531
- Thanks to @daschl"
7dda4b9ce410f464342f77b8223fc27302c8c293,[#1532] Remove @deprecated ByteBufIndexFinder and all methods that take it as argument
086ae3536cfd10411a36f4aba475e2e348f868b8,[#1533] Introduce ByteBufHolder.duplicate() and make use of it in DefaultChannelGroup.write(...)
5010fe0a61436ee34651866e86153c8c20e1ed22,"Fix a bug in SslHandler where a truncated packet isn't handled correctly

- Fixes #1534"
da5a5af5205813a827ff8251c3921d185768b2aa,"Add Test case for truncated SSL packets

- Related issue: #1534
- Also made sure ByteToMessageDecoder does not wrap EncoderException."
378626b31fcf93efae154a4e71edfce45a091394,Port ConcurrentHashMapV8 again to get the recent upstream fixes
70df5a6f63a89c6de4afbf64774a5ddb66557985,Add ThreadLocalRandom back because it's used by ForkJoinPool now.
ff97d1db292327a361d44c1a6a2f9b8dc9bd00f9,Fix checkstyle
1fa087ecbf7663e675c431471fc263324f131bf1,Fix checkstyle
2b2f8db5d2555ce359f0b47c1680590cf37b9f9e,Use ThreadLocalRandom where possible
a4f2789e55b4fd0430f0a970785d3438d02e9b59,Add missing final modifier
553cd034b9d1fb8b9a55c1439860b728bfa623bd,Fix checkstyle
a52ac692a96a79fd4c906f650962f44b270c442e,Faster MessageList iteration in NioSocketChannel.doWrite()
1bf2f702cb08b7a1b85a2a64012d1e1ae8f05d55,"Do not use unreleaseableBuffer and duplicate

.. because it's not as fast as just creating a new direct buffer."
40b4c35574a429fb47acc4fe4c0a5a7d0223079b,Forgot to commit this class before. Related to [#1433]
65c2a6ed46c163081fed5307f33489a606177f33,"Make ByteBuf an abstract class rather than an interface

- 5% improvement in throughput (HelloWorldServer example)
- Made CompositeByteBuf a concrete class (renamed from DefaultCompositeByteBuf) because there's no multiple inheritance in Java

Fixes #1536"
39b57b889cf77f38b25f45bd38fad58d22a4bb73,[#1539] Fix bug in DefaultChannelGroup.close() which was blocking the close() call on ServerChannel
9c1b31d20a2a6f913802f4200e6910f32990634e,"[#1535] Remove Channel.id() and so fix the possible leakage of the previous used Channel id map

The user can still use Channel.hashCode() for logging. It's just not 100% unique but should be good enough for most cases"
7396f9f2b224c1ac3b2276ecca5dac74d6ba4ddc,Remove Channel.id completely / Use 64-bit hashCode internally to reduce the chance of collision in compareTo()
75229e145a8a593c6058938eb78c3b6dacdf9315,Prettier web socket log messages
1d196c5b591269eec0fd0be7f1807a1effccd94e,"[#1534] Fix handling of partial frames in SslHandler

* Let SslHandler not extend ByteToMessageDecoder"
cbd88179051a51e66abac4c65d4af865c203c337,"Remove MessageList from public API and change ChannelInbound/OutboundHandler accordingly

I must admit MesageList was pain in the ass.  Instead of forcing a
handler always loop over the list of messages, this commit splits
messageReceived(ctx, list) into two event handlers:

- messageReceived(ctx, msg)
- mmessageReceivedLast(ctx)

When Netty reads one or more messages, messageReceived(ctx, msg) event
is triggered for each message.  Once the current read operation is
finished, messageReceivedLast() is triggered to tell the handler that
the last messageReceived() was the last message in the current batch.

Similarly, for outbound, write(ctx, list) has been split into two:

- write(ctx, msg)
- flush(ctx, promise)

Instead of writing a list of message with a promise, a user is now
supposed to call write(msg) multiple times and then call flush() to
actually flush the buffered messages.

Please note that write() doesn't have a promise with it.  You must call
flush() to get notified on completion. (or you can use writeAndFlush())

Other changes:

- Because MessageList is completely hidden, codec framework uses
  List<Object> instead of MessageList as an output parameter."
354de0a8f031fd7ad29d20ef50dda5c784bf2202,"[#1534] Fix handling of partial frames in SslHandler

* Let SslHandler not extend ByteToMessageDecoder"
26e9d704578807b927363e17be75978daea66163,"Remove channelReadSuspended / Rename messageReceived(Last) to channelRead(Complete)

- Remove channelReadSuspended because it's actually same with messageReceivedLast
- Rename messageReceived to channelRead
- Rename messageReceivedLast to channelReadComplete

We renamed messageReceivedLast to channelReadComplete because it
reflects what it really is for.  Also, we renamed messageReceived to
channelRead for consistency in method names."
7bedd8f28ef52a0c825133bc5926764444d7b3a9,"Simplify the exception handling of ChannelOutboundHandler.write()

DefaultChannelHandlerContext does not trigger exceptionCaught() immediately when ChannelOutboundHandler.write() raises an exception.  It just records the exception until flush() is triggered.  On invokeFlush(), if there's any exception recorded, DefaultChannelHandlerContext will fail the promise without calling ChannelOutboundHandler.flush().  If more than one exception were raised, only the first exception is used as the cause of the failure and the others will be logged at warn level."
276d619afbe47667c7cc552aee652a1f385fd1ad,"Fixed ClassCastException in setting min,max sctp streams"
e062f7f6f9ee9d64980a0e71947b3477d96e022d,Minor refactoring in variable naming in sctp stream config
d83daf05303393b08882d26d8cbd6aaa972d0bc3,"Revert ""Minor refactoring in variable naming in sctp stream config""

This reverts commit e062f7f6f9ee9d64980a0e71947b3477d96e022d."
488ffb11d8bb1650982d7514392c4951b4365e98,"Revert ""Fixed ClassCastException in setting min,max sctp streams""

This reverts commit 276d619afbe47667c7cc552aee652a1f385fd1ad."
768152cf88417ecb5700bdff519d149114f7e975,Correctly handle forward of remaining data on removal
da5c6add14d1d6ad5c33254d65439b6e3f91a849,"Rename CodecOutput to RecyclableArrayList and move it to internal package.

* Also reuse it in SslHandler"
dd763698dce324e35e0e181fbea1f2e4c373b72b,Adjust ChannelGroup to behave the same like a Channel in terms of write and flush
b57d9f307f61161b62a335734438fb0c49260c84,"Allow per-write promises and disallow promises on flush()

- write() now accepts a ChannelPromise and returns ChannelFuture as most
  users expected.  It makes the user's life much easier because it is
  now much easier to get notified when a specific message has been
  written.
- flush() does not create a ChannelPromise nor returns ChannelFuture.
  It is now similar to what read() looks like."
b7a7c33fe35c331d11423db949e1d4b8951da08a,"Fix a bug in ChannelOutboundBuffer.addFlush()

It should not advance the tail if no write() was issued so far."
4d44b379394f0ce82c5b0cfa610d8ba5a0d5d4e3,Fix potential leak in HttpContentEncoder
40bbe2130a28d1aff150f0266e346432e18cc5df,[#1545] Fix ClassCastException by using the correct type for SCTP_INIT_MAXSTREAMS
2adf393277e6ce918c1bf13693f7c1f71a3526b8,[#1553] Improve performance of encodeInitialLine
cf9ee928b012bb2af24372ab180bacdb02cf7c74,HttpContentEncoder should not remove Content-Length when acting as a passthrough.
b5527e905ef3192db653dd3914aed4fda1ca8adb,fix SpdyHttpDecoder
224f05e6263660a9afeb0524869b58b443c71a16,Use correct permission mode for java files
46f6e1d360f459a7e1b6654cffe2796b62d8192f,[#1542] Fix resource-leak in HttpObjectAggregator when a too long frame was detected
9c49322b9c1cb78c68d263baf64a522e5cba4497,Improve performance of HttpRequestEncoder.encodeInitialLine(...)
4d94f1d1e1aef8c0cbb745e8f4e876e0e96c3474,[#1534] Finally fix SslHandler to also correctly handle partial data
f47fa76b9ad82e29b0cf1ac2d3d75d84eeaeb41c,Fix resource leakage in example
12ea35fd5f004f2708d7e61ef15ae64a19b7cc29,Add missing javadocs
d23c3b3382ff6b2dc7625cb0a0cd31d767efafc5,"Introduce ChannelGroupMatcher which can be used to only apply operations of a ChannelGroup on matching Channels.

This is often useful if you for example use a ChannelGroup to hold all connected Channels and want to broadcast a message too all of them
except one Channel."
1d577b1b8bd3f51bcf8d9d89bb4598a28020af07,[#1561] Fix Securechat example which was broken because Channel was not flushed
c0580cfe7137b4ba461d47b5d13a18cfe65704d0,Fix examples
10097bf881063565473f680e0734e9666794bd62,Correctly set the destroyed flag
e85ae721b24e6903a212896763bf69d3ae6bb923,Set the destroyed flag at the correct time and fix a the httpupload example to release all resources
64686deaff75d3a188828364a55f218f3d8c8436,Tiny optimization
daa79f3a118ab9c006b731ebaf94c56e44d95381,SPDY: fix bug #1211 reintroduced in 7bedd8f
2380461861781d6f6d1a4102ab22c28b344b37bc,"[#1558] Corrects handling of port number in WebSockets handshake header values

* This patch was inspired by the work of @golovnin"
3db3a9a2bf204967edeba68c96bee82aa95b1f0f,[#1558] Use correct scheme to detect port. Thanks @golovnin for spotting it.
d8479a04df5621683a404363ddf1a902597b4b17,Allocate buffer from ByteBufAllocator in ChunkedFile
c77ab7d09261912ae3bd99f14c86000faa6a370c,"Fix a NoSuchElementException and out-of-order event problem caused by SslHandler

The fix prevents from reentering channelRead incorrectly. It also
prevents from getting the inbound requests out of order."
be963d4cafc67897edc45751b0991ef668f8b8c9,rewrite SslHandler's flush0 message to match docs
c38db2afe3dcffb1cdbdbb65f27ac3f1a3111387,Dissallow adding null elements into RecyclableArrayList
98c6a5810a18ff115eb61c79249dad003ad4c109,Just tiny optimization to avoid object creation
3a4c7c9c93dc537d1f33d252a2ac7f18e211334b,Also dissallow null elements on set
030d9fd22789b3c15ee8ef13210b823c0714974f,SPDY: check if spdyHeadersFrame is null before adding it to out
1a7d1f70239bc35ab94fa6444ef9846fd71de309,"[#1568] Fix problem where an exception was fired after the channel was closed.

* Calling fireExceptionCaught(...) in this case was not correct as we failed writes which are outbound operations."
023201f68436109c67cddd9078732f6ce54f7a1f,[#1570] ChunkedWriteHandler.discard(..) must not call fireExceptionCaught(...)
4e604a65538e35a4e6c05627b940504477e9fb1a,Make clear how to use HTTPS in the helloworld example
aa64c13bb8bff65fb25e772de2fb5ef0cb8ef9a4,Cleanup
43f12569aa6429e2544e5905766e30ac98db5d14,Cache flush(..) tasks which are used when executing with different EventExecutor to lower GC pressure
e2fcb06d9ab37e4cff9e513327461ccc492cb704,Remove unnecessary try-catch block in AbstractUnsafe.flush()
529d904d2902ecd619933db570a4dcc1f5a482be,Fix a bug where ChannelOutboundBuffer.addFlush() is called multiple times
6d1220b55e4b9a74ec57d9755976c40fd675fac5,Reduce garbage in AbstractUnsafe.flush0()
85a2ba37529bbd0f11443390af2544a1ee9a1742,"Remove dead code

- Fixed #1557"
e10e9d38c4ec9ed081da916b924b43a6381fb93d,Fix embarassing compilation error :-/
99716993f64154f75cb526350ccf3e64566c9c0a,Add a boolean parameter to Channel.Unsafe.flush() so that SelectionKey state check can be bypassed.
edb6786a5c0140d015f18a6e811c03343f167ca3,Make the cumulation field in ByteToMessageDecoder package private to hide it
456994607bcd25f34ce4e69a3d984685e033c284,|| -> &&
765d4705001004ea2638a0c6d41dcb9febbde159,"Remove UnreplayableOperationException

- Can't find a reason to keep it."
660729bd56a05b3178861a9a73555d850511878b,Kill the cruft
a8af57742334d2962bba108a0773878a3a4af346,Add javadocs to methods that user may override and make the others final
85a3d320cb546c1fc933ba712642d16b2d6eeb12,Update dependency versions
a215ba6ef619fd3ac9ffcf7d51e6f5c023b99e0e,Some javadocs
2871079c4a1563cdb4904074f4979b484313d18a,"[#1557] Make the contract of Channel.Unsafe.flush() more clear

* Remove boolean parameter from Channel.Unsafe.flush() method
* Move NIO related things to AbstractNioChannel.NioUnsafe"
2af7db361b73f17af4b43ff40ac3f1fc49bc0bcb,[#1573] Fix NPE which could be triggered one failed promises that trigger a close89
910c5fd594f7435ec9a9693260dbbccc5e8bb340,Hide RecyclableArrayList from sub-classes
a07abee55fec9df6af7408ba7623aff29ab266d9,Add and correct javadocs
32b671f4dcb54bf4eaa3c910911425fb4b97a9e2,[1575] Correctly parse Content-Type value
7254a5c2c66a34ae2f0f0f776c679668d27ff88f,Just some tiny javadocs optimizations
43d22f6d237f35bb2b395e9c0fd4d6eb98878c14,Remove unused class which was package private anyway
c20c8526025fb391d6e1a8d0bdfc344fc223d917,More javadoc fixes
75997545eda02f77603bd59a05932819acea7a56,Fix checkstyle
9dfad35423df0fb4564dccddfe69b73608f826a4,Fix checkstyle
ecb215c12fc68ff53bdc353d51205a7f20af778e,Fix buffer leaks
0393ffbfb2d8cebd3f5a87679ca9c30e59ba048b,Reduce memory copies in HttpContentDecoder and so also the risk of memory leaks
3140282ae378214b9278325d89091df7557ba81a,Use the ByteBufAllocator when possible
2f7759a2642c0f1efc1293353c6f3c6469c71f99,Remove unused package private classes
cd516740705a71b216a850a8315f3f7926f71dda,Small performance improvements for RTSP
efd08efd1b9a45189994c50792076655bb42dbc8,Add missing @Override annotations
9b9f6216908d177b9a6f97949a8ffce80d03c7b6,Make DefaultFutureListeners package private
7522d530ac0f9825e6998e997a1b0757302e25c7,Use the allocator of the src ByteBuf to allocate the new ByteBuf
df5daadd0f015eda9046bb80073e11e0a9fb6ef8,Remove unused import
d5f052f39c65291c8a2553903c0f8a9f2ea00759,Rename ChannelGroupMatcher to ChannelMatcher
2de491aa7f8460f7ca99afb242e1c14f18e78e1b,Use UnpooledByteBufAllocator as default
e1c78b471b772b68e6762ed24642dc5db6773222,Use the configured ByteBufAllocator in SpdyFrameEncoder
e8fd2091153e884c3a463aa1e9eded35fe8c6091,[maven-release-plugin] prepare release netty-4.0.0.Final
246a3ecdcbc0cf9be85cca1420a5882f5329d59a,[maven-release-plugin] prepare for next development iteration
c5d8af446a39db10a1744d47e5a466fa1c87a374,[maven-release-plugin] prepare release netty-4.0.0.Final
5297eba280555a7b785e7f57975546a2af07e045,[maven-release-plugin] prepare for next development iteration
e879848056a5f53c1055ebbf4f9971b5ab2282d6,[#1579] Fix resource leakage in WebSocketUtil.base64(...)
b8200d975cd0bc402a638a54b5b76c4b7c546a2c,SPDY: port SpdySessionHandler to netty 4
ed729255478ac877708c5fe5efb219fe54495a3c,Fix sendNumbers logic
22be797054a27a749af48a517472c6100b1e7d15,Use Unpooled to allocate buffer in Base64
def3dbe0358c0e0eed096191f8608a90a8854054,Add missing closing paren
76cefcc421681622831e5e38709d5552c916d6c5,[maven-release-plugin] prepare release netty-4.0.1.Final
57eb531eb893bdb9351d07b5df50b7f88728040a,[maven-release-plugin] prepare for next development iteration
dcf78961724abf97fea9e768cca02ba65146b324,"Do not close ServerChannel on IOException while accepting an incoming connection

.. so that we can recover from 'too many open files'

- Fixes #1578"
8e71186153d2d1c01de32684584bed6495347cd3,Modify HttpContentDecoder to writeInbound and readInbound from its internal decoder
b9bae2b5e4bf32f6db783664a02e1d22ba4159db,Disable the timeout of some tests in SocketEchoTest to find out why it is hanging in CI
66c4c07ec08b568923b60752a89146f279140f64,[#1595] Fix IllegalStateException thrown by HttpObjectEncoder when an empty HttpContent was written
a8d67b02825d6fbb1d145c7aaee8382f5f648035,Fix data structure corruption and resource leak in ChannelOutboundBuffer
cc9b9567b990ad3fa6cdf0bf42b7dd04fd0cb108,Make sure all write attempts made after a channel is closed are marked as failure
31ecd17212f9fe2e520824d23c9463b7bb46cffc,Fix test failure
5f235eafc35da8b9960842606aaf4a7e06baf570,Fix checkstyle
88cbdb50d2e77c5e1f1f900b85af32d3216925b5,"Fail unflushed writes with ClosedChannelException

... instead of cryptic exception message."
e53738f38c8e23cae301c6b0b72f931e812ebaa6,Less confusing leak warning message
939fd8d17e974236bb3298d7fcc0c2385c1854ac,Improve the HttpPostRequestDecoder and so make it configurable when it will discard read bytes to prevent OOM
bbbf72359e5a38851cd2b2e3eba9af71477ea3c2,[maven-release-plugin] prepare release netty-4.0.2.Final
fc7c950b08073914a01b1d63615a74396c662e24,[maven-release-plugin] prepare for next development iteration
f0a3f849f7d0e028eb97e672a3cbf52648b98617,Fix a bug in AbstractByteBuf.writeZero() where the capacity is not auto-expanded
9c8d980a74d7cf786aabaa233c692e247767aaac,"Fix a bug where a ChannelFutureListener can allow Unsafe.close() and Unsafe.flush() to overlap and reenter from flush() to close().

 - Fixes #1600"
e28594952b7e9e0c7eeced17142484ceb0d5d84b,"Make the cleanup logic in ChannelOutboundBuffer more robust

- Fixes #1601"
473af5c98e4bac87a214f85d514904f5419f636b,Fix checkstyle
568166d55454a079e558c66c35c867ac5ff7fcd7,Cleanup
ef17a9c5d45b5c88dced58737ce387d8766a7a20,Grammar - Fixes #1598
10d395e82921c255985de4f6bf13bd8abcd3dd58,[maven-release-plugin] prepare release netty-4.0.3.Final
b130ee6a6cf023c27a9734ec1cced989bbe19b95,[maven-release-plugin] prepare for next development iteration
0f2542ded5348da38ab5a21a925ca09df669b530,"Fix StackOverflowError raised by DefaultPromise.notifyListeners() when ImmediateEventExecutor was used

- Fixed #1602"
57d591d188a66af40b455ff48edd753e97ca11e5,Fix checkstyle
28b8573b2a50d58e0e350cc9ff45981a5a31091d,"Fix a potential race condition where the worker thread of GlobalEventExecutor terminates with a pending task

- Potential fix for the hanging SpdyFrameDecoderTest"
ac6c3b85f2ec0240c6420d3f2e9e4f2056b292af,Simplify
fe59ab1b9c1a5d69056a6b0863edbf98dc7bf603,Fix resource leak in LengthFieldBasedFrameDecoderTest
bcef796dc7cfa340ff1c26231ffbdf5eef397192,"Rewrite ChannelOutboundBuffer

- Merge MessageList into ChannelOutboundBuffer
- Make ChannelOutboundBuffer a queue-like data structure so that it is nearly impossible to leak a message
- Make ChannelOutboundBuffer public so that AbstractChannel can expose it to its subclasses.
- TODO: Re-enable gathering write in NioSocketChannel"
4f0a9522419d358ceef9e09f4eab135dfc5200d3,Checkstyle
46ea0d4e7b8380cfc8c3f5508ac2a3896262e08e,"Implement gathering writes in NioSocketChannel

- Add some support methods in ChannelOutputBuffer"
4cd7e625556f86eb25a4a4cfae20ed0d34aaf5ed,Make ChannelOutboundBuffer recycled
5e5df6bd09b30b11deb2d8ee7b12b949636cbdb2,Fix NPE
8828d5327a6a7ddb71dcd0a66ca5f262b1a26e60,"Move inFlush0 and outboundBuffer in AbstractChannel to AbstractUnsafe

.. because they are accessed by AbstractUnsafe much more often."
7215c011ca1527f79d725c111b3c8ac1dd9f6424,Fix resource leaks in the tests
fef838f197ca42189f9760c4927993abd9055c01,Make sure channelInactive() and channelDeregistered() are triggered even if outboundBuffer.recycle() fails
8178322c5cc81a4f496a5a493a7adf27d7e31540,A little bit of Javadoc for ChannelOutboundBuffer
faf8b76b5a5487b0308ebe021f45461881b2c568,"Fix a potential bug where AbstractUnsafe.flush0() fails to clear the inFlush0 flag

- Fixes #1609"
67919841467360415308ceb64e0b6d88ed5168bc,"Remove unnecessary code from SslHandler

- Remove CloseNotifyListener which was used only to reduce the noisy logging.
- Instead, simply do a string match.
- Fixes #1608"
d5e202d7554f79a7a7d670e371486d66a9f75c9d,Better promise validation messages
0653efcd759f9b2ce4668f7a0a6ff014123c59d4,Even better promise validation messages
f96a8e595171a5ed75a05ea16da07647de54ca64,"Implement ProgressivePromise notification in NIO byte channels and ChunkedWriteHandler

- Refine the contract of GenericProgressiveFutureListener.
- Negative 'total' now means 'unknown', which is useful for ChunkedWriteHandler."
762adfcb69266a7ba1786a966fe371d69a1043fd,"Update HttpStaticFileServer example / Fix bugs related with progress notification

 - Fix a bug in DefaultProgressivePromise.tryProgress() where the notification is dropped
 - Fix a bug in AbstractChannel.calculateMessageSize() where FileRegion is not counted
 - HttpStaticFileServer example now uses zero copy file transfer if possible."
4f6ba4fe3dd1ab5443020923d14c5e4c379e56ec,Use tryProgress just in case of user error
19c92ceb59b8f2c77511b49cb3e0e9f70c50a711,"Separate 'progress total' and 'pending number of bytes'

- Reverted the recent changes in AbstractChannel.calculateMessageSize()"
4d69848aec0e8c0a9cbe327fcca4f2c87d99a78a,Fix broken javadocs
904385117f0c162f8b68f77a2ac24f951ce63c58,"[#1607] Make use of gathering writes for WebSocket encoders, to minimize memory copy"
eb3283c59c1eaff64eba3798d4903f100ec5028a,[#1613] Allow to specify if direct buffers are prefered in ByteToMessageCodec
a4d0341ea11140b1cfed2414f5292dffd3445dc8,"[#1614] Fix bug in SingleThreadEventExecutor which prevent scheduled tasks to get executed

The problem was that with OioSocketChannel there was always a read Task in the taskQueue and with the old logic it never tried to execute scheduled tasks if there was at least one task in the taskQueue."
6c9c151d662b7b8ca036e86d932bba4e1c4c6729,minor documentation cleanup
674f4bce51047a19000ac1074bb934414511e9aa,netty-1597: Rewrite ByteBufInputStream.readLine() to avoid IndexOutOfBoundsException and to behave more correctly for lines ending in '\r'.
60529ac3ee31f72bd07f2a18f869666e42a26117,Fix checkstyle
80f92f90cbc9a8267cad3f338641982b53478e8a,netty-1616: Adding a 'last' check to SpdyHttpEncoder.
7f86550ef83316352d0d52c0f31836c7b3fb1506,[#1619] Fix bug in ChannelOutboundBuffer which could lead to invalid write order when fireChannelWritabilityChanged() write another message
fa4e15e198911b8b5666a8062b0a5ac41b1aafa5,Make PendingWrites recyclable to reduce GC pressure
feb8d101bddc032cf55d6c63bc1020ac6930e30a,[#1626] Use static fields for default values
f478fcd3b0ced600abb3b5163f12cd10bc91979e,[#1628] Fix bug in ReadOnlyByteByteBufferBuf where get operations threw ReadOnlyBufferException
125070958d3f5bdf8a66bed74179b22c4bc30e7b,"Fix up ChannelPipeline javadocs by add lost ""don't """
0f6cc0cc7bcc546c124ed875d197f0333bca2da9,[#1630] Fix re-entrance bug in ChannelOutboundBuffer.remove(...)
81612f8e9bc02bdb1bac6f1d6bd4d221668bb559,[#1624] Fix resource leak when writing to a closed / not-open channel
25f96b164498988439c38baf6ff4c57763464824,[#1606] Reduce overhead during writes because of ChannelPromise validation
ada07cb9e0700dff4ecdc3d20afc46ea46f1bc38,Fix types in javadocs
2bbad8e4e59f39d5f288b56a2094977b9a43eefa,[#1612] Allow to disable resource leak detection via API
70e7bcc963f180aa0f88fdaa415fd8ba1025cd60,"Remove ResourceLeakDetector.ENABLED / Replace ResourceLeakDetector.is/setDisabled() with is/setEnabled()

- Related: #1612"
ec370e1d977f5766b6478f31be84c89580aceddd,Remove an unnecessary empty line
dbc74fcc97bd76f722c2a7de343d23141db67a79,[#1637] Check for null parameters
35802207e1c9dbd5512948d1bfe33f6e3a0ae5d3,Fix compile error
d4aa5b53d6410d543834f3d54841bd5eaf95dbee,Simplify the validation logic proposed in 25f96b164498988439c38baf6ff4c57763464824
764741c5ce73f42f6451027c8f87d4021deac0e1,"Change the contract of ResourceLeakDetector.open() so that unsampled resources are recycled

- This also fixes the problem introduced while trying to implement #1612 (Allow to disable resource leak detection)."
f4e128b8070a197ac3b770a203dcdc72af1088fc,[#1612] No need for volatile as it is not needed to be precise
a89b17fa944504a00107d40ecf6043de197f34df,"Merge ChannelOutboundBuffer.failUnflushed() and recycle() into a single method and make sure it is run later on reentrance

- Previously, failUnflushed() did not run when inFail is true, which made unflushed writes are not released on reentrance.   This has been fixed by this commit.
- Also, AbstractUnsafe.outboundBuffer is set to null as early as possible to remove the chance of any write attempts made after the closure."
7903697c36bbd79e729695e3ca35e24f7674a5bb,"Remove Arrays.fill(..., null)

.. because we can just set each element to null while looping"
0b175867315f63154a734dcb8520166f4e9b9702,[#1623] Fix javadocs for ChannelGroup
ed9527ba41bca660d96b62a6a42470efab50b5a5,[#1639] Fix bug where SpdyOrHttpChooser may not buffer data correctly during protocol detection
ca0018279754557576bb2ecc17d209c2b6874609,[maven-release-plugin] prepare release netty-4.0.4.Final
0bc7d3f5d10186497c3abce999c17c01c3232d65,[maven-release-plugin] prepare for next development iteration
5e4169802f407114aa18d1b4265bf5231673b20b,Fix potential reentrance issue in ChannelOutboundBuffer
8a673db92b728a668564563f6d7fb0c2664ef91f,[#1644] Fixed IndexOutOfBoundException when calling copy() on a empty CompositeByteBuf
d5bf1a1187925f76329ec96bd4ea0913bc2d4815,SPDY: fix NullPointerException in SpdyFrameDecoder
6873111d72599453a03493774ce28b175e61c821,[#1648] Make sure trailing headers are not dropped during content encoding/decoding
6ff87cc20d5b728ebe6be2d6f4a2cb0092f6abf6,Small optimitation to limit volatile reads
2b3ac3d446c9cc9a0f080fd4aabb9bbe3906d212,Factor out the PendingWrite class and put it in internal package. Make use of it in SslHandler and ChunkedWriteHandler to reduce GC-pressure
fabefba79185ce7ec143d911ae86f5ab8bb08845,[#1650] Make it possible to override isSharable() to simplify things for clojure users
241f856cc721dbf786321a94c987c5026eea5412,remove AbstractChannel#doPreClose
5f363e8adeef9ddd118e6906e2848ce0a0b049c7,"Revert ""remove AbstractChannel#doPreClose""

This reverts commit 241f856cc721dbf786321a94c987c5026eea5412."
6278d88d2f46e5facebc805b1dc0cd015eaf35b9,[#1656] Fix IndexOutOfBoundsException in MessageToMessageException
cffbba94ee476b87a3932d2d5a975e55714657f9,[#1654] Remove AbstractChannel.doPreClose() and notify close future on register failure. Based on patch of @jpinner
15279b2525f694d1789ce06d74cf2d55a9a64e01,[#1654] Notify close future after the close was complete
61b1214b2401a31d8c23f126a8b610edd29ba8e1,"Fix for first issue from #1652 on computation of time to wait in AbstractTrafficShapingHandler for Netty 4

Fix for first issue from #1652 on computation of time to wait in AbstractTrafficShapingHandler for Netty 4, using the same formula than in Netty 3 (wrong place for parenthese).
Was:

    (bytes * 1000 / limit - interval / 10) * 10;

Becomes:

    (bytes * 1000 / limit - interval) / 10 * 10;"
ca59c1201e2ee2abe0c1548b371dcd056cbe2b56,Change AbstractChannel#doDeregister return type from Runnable to void.
bf2430d255956ff32307aea3a5e725ee2be16dc2,Change AbstractChannel#doRegister return type from Runnable to void.
3922c518cdbeb0d8091ce06698e569bc37b54acf,Clean up AbstractUnsafe#bind and AbstractUnsafe#disconnect.
6ce8571df3eeae593fd71e53354c04edc023b66c,[#1668] Remove synchronized usage in JZlibEncoder and JdkZlibEncoder
5e703e7419855cdc0e4cc702d16fa54a20c07193,[#1658] Let trafficshaping work with ByteBuf and ByteBufHolder out of the box
0cb3541b53f5e5673ab3fe16702fb98c522a0ce2,[#1669] Correctly notify the ChannelPromise of delayed writes
00f1533fa9d9ee344836e9632f4be59bd291858e,[#1671] Fix bug in ChunkedWriteHandler which produce a NPE on empty chunks
4222610b2aae92414eed176fe39989cbb5c4515f,Remove synchronized in SPDY code
9da81acec12e08e66708f8a09a8894b9594c9f02,[#1657] Log content of ByteBufHolder
56646920c0a3a720660967e0ae0cea43a9e0a9ad,Formatting
d4b8f16d1f6e1cc42b43ab45138d50d93f466ff4,Added http status codes from RFC 6585
e09aea5902457d6919f004c52f90659af8c508f9,Rename methods of EmbeddedChannel and mark old ones as @deprecated
acb28e3ac8d04feffa15cdceaeda1284b3338b7e,"Multiple optimizations in the HttpObjectDecoder

* Minimize allocation of StringBuilder and also minimize char array copy
* Try to detect HttpVersion without calling toUpperCase() for performance reasons"
e81368af0632b28a7ba54be49142e2b5bf78d14b,"Simplify handler invocations in DefaultChannelHandlerContext

- Sometimes we delegated executor.inEventLoop() to the next context and sometimes we did not.  Now we always check inEventLoop() before delegating."
ca29f1a37d49e86d2b7667ff41cf4dd58e7e1381,"[#1683] Mark unused ChannelOption @deprecated, to prepare for removal in 4.1.0.Final"
c79a3cdefe4ced7f7effc94a6862a0d1d5af0dae,"Fix a bug in NioSocketChannel.doWrite() where flush() triggered from a ChannelFutureListener is ignored

- Fixes #1679"
3049f5ddc483de1afdaa52443fe946133e121808,Fix checkstyle
3b1881b523e61496d9bc50e44927f7b58fa449e6,"Make sure ChannelHandler.handlerRemoved() is invoked while handler methods are not running

- Fixes #1664"
81de2275e482c8954c85e67be0d2799b53ba6e6e,"Remove unnecessary traversal of pipeline which occurs when a Channel is closed

- Remove unnecessary ascending traversal of pipeline in DefaultChannelHandlerContext.freeInbound()
- Move DefaultChannelHandlerContext.teardownAll() to DefaultChannelPipeline"
0e124583d65940ba30e70d05e7e919d6e60a197d,[maven-release-plugin] prepare release netty-4.0.5.Final
e3410680def77f7a9a47eebc23669d6a323c6f46,[maven-release-plugin] prepare for next development iteration
a06295fe0ad72358f980d09feb8c971613793527,"Correctly fix problem in ByteToMessageDecoder and ReplayingDecoder which could let to have a released buffer passed to the decode methods.

This fixes #1664 and revert also the original commit which was meant to fix it 3b1881b523e61496d9bc50e44927f7b58fa449e6 . The problem with the original commit was that it could delay handlerRemove(..) calls and so mess up the order or forward bytes to late."
3f70d5caa4bf0201ff1861e8dcb111a537a4a64c,[maven-release-plugin] prepare release netty-4.0.6.Final
3f2000fa3a6d2937114823d2c98e6930093c70cb,[maven-release-plugin] prepare for next development iteration
487c28d93e404f13181588e9cdf42fd521a2e8cb,Add testcases to prove that remove ReplayingDecoder/ByteToMessageDecoder from within the decode(...) method works
ebee56ef494bea72576f4efb6db2ea6a78a7ad8a,More tests related to self removal from pipeline in ByteToMessageDecoder and ReplayingDecoder
4d064d85df79a432f01dd5e97da37a5c9d8830de,Rename class
17b91f416d3a2017ca7ab985977302e70edb4dd6,"Remove an irrelevant comment

.. because firedChannelActive is gone long ago"
0f80aad92957b5aba6693e2953926f5153078748,"Remove all/target/src and all/target/classes after building the all-in-one JAR and Xref

.. so that IDEA does not add all/target/src  and all/target/classes to the source and class path."
87b17e195acec2a02a9e51ba271d6b7c0079bdf5,Grammar
de44917e62c6ccadb2ae4cf62009f3fa0ad71827,Use recyclable write task to reduce GC pressure
20a010a2ea5f86f4063311a47e1387ba903cd8fc,Small optimization in DefaultHttpHeaders.clear()
3b94154893bba3989673d4eae11228479aa2a3c3,[#1690] Correctly return first header value on DefaultHttpHeaders.get(..)
ea1dca8105a4542bfe3f2c669c8bc14c4e3518a5,[#1704] Make sure SwappedByteBuf.readSlice(..) returns ByteBuf with correct ByteOrder
60b889375c47cfe9973f7ee39b44aeb933b056c9,Allow to also write FileRegion and ChunkInput when using HTTP chunked. Fixes [#1693]
48a7a21541b96eba74b493d8a2ce4a678a6bc9db,"Correctly update Channel.isWritable() when the write happens from outside the EventLoop in a fast fashion. Fixes [#1697]

Introduce a new interface called MessageSizeEstimator. This can be specific per Channel (via ChannelConfig). The MessageSizeEstimator will be used to estimate for a message that should be written. The default implementation handles ByteBuf, ByteBufHolder and FileRegion. A user is free to plug-in his/her own implementation for different behaviour."
5b6e762bf42a274082e0632c3d1a240c68f38b08,Allow to have the Channel GC'ed ASAP
5ef30b6d8b55441fddc8ddfdd24251f378e24e60,[#1707] More efficient implementation of ChannelHandlerContext.writeAndFlush(..)
b934b6009c9e7d2ed6df400698d6e6e4b550291d,"Share some code, related to [#1707]]"
194b64cff1a56babcfd5dd23f3e04ad5b1439c06,[#1708] Correctly set the writerIndex in ReadOnlyByteBufferBuf if it is constructed with a buffer which has non zero position
b456adf404d9971b077184e56302f5e488305cbf,[#1709] Correctly detect that Unsafe.copyMemory is missing
fc6213604dc3a1a596b5a6fb25fd9cf0759e0fc7,Make sure ChannelOutboundBuffer not throw NPE during increment/decrement pending writes
8e97e6c4610182b14ae20d66e1a0bd50cf43ebba,[maven-release-plugin] prepare release netty-4.0.7.Final
1d3560e3890b333a5bafc90aa064cc33f5301f6c,[maven-release-plugin] prepare for next development iteration
f40a3f34b17633b884f3d35dc2eb43d0810a0cfa,[#1692] Allow to set WRITE_BUFFER_HIGH_WATER_MARK and WRITE_BUFFER_LOW_WATER_MARK via ChannelOption
b54937ab5051004faa6c04048d6bb0410e6dcb33,[#1711] Allow to use ChannelOption for set / get MessageSizeEstimator
e954eb1c20e198f5f9279fc79aff328a8b2c87d8,Disallow usage of maven 3.1.x (and higher) because of non compability with plugins
1547876e97e9babc17f683e8a47894757a4e1bee,Tiny optimizations
26ddf0849fd69addd51b853ee0da7de08dc2a96b,[#1714] Make sure ByteArrayDecoder also works correctly with pooled buffers
4d0621855a40368052ecb9238c206d03d3067d25,Remove unused package private method and so remove some complexity
9d8c4ded50702fdacb75a89e65471627095723ac,Move method in correct scope
0d6a6bde048f22687fed462041dd141545523ebc,resource leak: Formatter was never closed
72395bf40073a6772ee06c58b0b08987af198eb5,[#1719] Make sure PendingWrite is only recycled once in ChunkedWriteHandler
c1d787bff75d203610758b1d38e566c8b3d54747,[#1722] ChunkedWriteHandler.doFlush(...) should not call fireExceptionCaught(..)
59c2fd881318b5c421983881e68889225e0a4d18,[#1723] invoke close in eventloop
8af5ea8d4f661c2e7aa51363edf8299166aafe0f,[#1658] Allow to use AbstractTrafficShapingHandler also with ByteBufHolder based messages
280afda0130125708cf11267dabe7aafc7313885,[#1715] Remove extra call socket.configureBlocking(false)
9f88552f12c64ba3d8aafd36b56530860e6b076b,remove some dead code
9a88c50ffb1233a95d89b83d01d6c9673c8641e7,[#1728] Recycle list after done with it in ReplayingDecoder/ByteToMessageDecoder channelInactive(..)
73755d12330bb0a976c9a32c3fcdc6f39b15249d,[#1729] Let StringEncoder extend MessageToMessageEncoder and so safe a memory copy
7d31943326175581680192357a21d34e75a87b0c,Remove some dead code
b9e279064d56da888893f0c54f62bc2b8ec4698d,Minimize buffer allocation as it is expensive if no pooled buffers are used
cc12e40065a0a27d81266cda863a4d24b4487a59,[#1730] Correctly release resources in MixedFileUpload after switching from Memory to Disk
f8f19d1539487078afe78c8fbd2ec1f50787b15d,[#1732] Fix bug which lead ChannelTrafficShapingHandler stop to work after first Channel was disconnected
48eb73f9b176158597a6692612674a165c8eaa54,[#1733] Correctly pass the promise to the ctx.write(...) in AbstractTrafficShapingHandler
65fd9c0b120a6705e79647274fa3226356d2c254,use Promise instead of CallbackNotifier
9acf130adb7deffb49e24a52b4e7c8130ba445ae,resource leak: FileInputStream was never closed
39cabcd36ca5ea3d3586ec8708d47d49c5c8ca96,[#1481] Add a JdkZlibDecoder which has no dependencies
d1f592575ac31ddcefaafcb968c1df457ec4b617,SPDY: ensure channel close happens after outbound message is written
9e7529b2f501323fd8031b82533f7a2b39796f99,[#1743] Fix IllegalStateException by remove usage of PendingWrite in ChunkedWriteHandler. This needs more thoughts before re-introduce it
06e250e493ddbff674d1ec11deb12541f93d6519,remove unused initialCapacity
a383988cdb57e56e5211fdf592545fe67331ff6e,add struct to replace parallel arrays consolidate flushed & unflushed buffers
20894bc99e28191cc3926ae95a23f5c7d3969a33,"Fix a bug in internalNioBuffer() implementations of derived buffers

- A user can create multiple duplicates of a buffer and access their internal NIO buffers. (e.g. write multiple duplicates to multiple channels assigned to different event loop.)  Because the derived buffers' internalNioBuffer() simply delegates the call to the original buffer, all derived buffers and the original buffer's internalNioBuffer() will return the same buffer, which will lead to a race condition.
- Fixes #1739"
caf91b9c0687bedab40ba06f596b0c2c2f1ae7e3,"Fix IllegalStateException triggered while shutting down ThreadPerChannelEventLoopGroup

- Fix #1718
- Add the test case contributed by @mkw"
15cfa47ad9994367edea4ba0b246a549654dac3d,Fix checkstyle
217b8e255c05887a30803a6c96abac1d320c3d8b,[#1763] Fill ChannelOutboundBuffer.nioBuffers with null on close to allow the content to be GC'ed
fb619f23947aab158a11730e00f4dbd490093669,fix writability callback
6a2f340ec0187ba68eee869863357b74b6e8c6bf,trim buffers before recycling
9fd35d09a26e1dd060baa9d307cd69f05d6f7ae6,[#1770] Fix NPE which was thrown if connection timeout was disabled and the connect did not finish directly when using NIO
206dc2a3918d3754b8d9b4b73f107a085377a2d0,"[#1772] Make sure ChannelOutboundBuffer.recycle() does also reset unflushed, flushed and tail.

This fix a IndexOutOfBoundsException which as triggered if recycle() did cut down the buffer[] to the initial size."
51fa7958197c3c712c9679042c82155e56d8ed6a,fix race condition in test
9ca20b73d3ee9e1aa1c83336854bb5ac6aca5f99,Add testcase to show channelRegistered is called
8142aae765b74ba7934b363b562a5ffe4a01a12c,"Improve the randomness of ThreadLocalRandom for all platform

- Fixes #1765
Java 6 did a poor job of generating seedUniquifier unlike 7, so I implemented platform-independent seedUniquifier generator with configurability"
7aefd0cbdbc01aa344c5b2f3261734c4a2afe313,"Make AbstractBootstrap public

.. to work around the issue with JDK reflection described here:

  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4283544

Fixes #1780"
005d33a761fc26591c26f2914cc8741596c6a71b,SPDY: allow MAX_CONCURRENT_STREAMS to be set to 0
f76c01c3aac42a90708d3bbc665e5524b6a62778,[#1782] Fix IndexOutOfBoundException with direct buffer and gathering writes
77d4222db5794bb0ffe99065cc556c09e5aec68d,[#1777] Use correct Thread when close per channel
80d30c3dd81a4409a3abaf04d7bff0525d4ad166,Small code improvements
65d24a7647470879b891e78550166e60881a7225,"[#1735] Disable usage of JdkZlibDecoder by default, will be enabled in 4.1.0.Final"
5e9b199296478b9228c944235a50b02da9212a5e,@deprecated all methods which are related to deregister as it will be removed in 4.1.0.Final
b67659a866c40fd04ac38e5838ee1d562a6db5d5,[maven-release-plugin] prepare release netty-4.0.8.Final
2e39b25cd4252ca13e5f4dd508d598d27bc806a2,[maven-release-plugin] prepare for next development iteration
32deb2c22b56b4d775d185c8605084b33386bcf7,[#1785] Fix incorrect javadocs
6a4131c10feaf0ce445f9d7092b30144d473cead,Currently the system variable to chose which type of zlib decoder is being negated
12fe7b52b633b787b1f38336e89965ed396e4a05,"HTTP Chunk, wrong delimiter written"
3aa77f54f7f77688082f78d3d0ecfcc11affcb30,[#1792] PlatformDependent.freeDirectBuffer(..) now respect hasUnsafe()
7a38163743624c2f7c3fd263fd61fe70cb711aa0,"[#1788] Correctly decode CRC32 and ISIZE when using JdkZlibDecoder

Because of incorrect decoding a CompressionException was thrown before"
51a536fd3068ecff95dd27adf047299122ade8ea,Free up all buffers after the tests
5ddd7cee90d5b59ebacdc3da6a25f548646eddad,[#1797] Throw IllegalArgumentException if AbstractByteBuf.skipBytes(...) is used with a negative value
aedd631dbbae6c1732fe0d800a9024a18e99dce7,[#1798] Correctly handle skipping of too big frames
b8866aef330403353285486bbf5c0342b6c6a998,No need to check instanceof everytime to find the next inbound / outbound context
795182843dbf500643f3f8304f31ddb4ce5d693c,Remove legancy code which we not need anymore as we use gathering writes anyway everywhere
4a5c8402719586497a240e74a7893b3ccad90c11,@Deprecated ChannelOutboundHandler.deregister(...)
0007fb81efa7e08c4b3f8c3a99a15cf4b0d5c1bc,Add tests to try to track down some buffer issues
5416f2315e222acf8d9a36a51bcd4142a0f1c022,[#1797] No use internalNioBuffer() in derived buffers as it is not meant for concurrent access
25c226a8357d324fb201b1150a3d629f3917d18d,"Make sure only direct ByteBuffer are passed to the underlying jdk Channel.

This is needed because of otherwise the JDK itself will do an extra ByteBuffer copy with it's own pool implementation. Even worth it will be done
multiple times if the ByteBuffer is always only partial written. With this change the copy is done inside of netty using it's own allocator and
only be done one time in all cases."
c97971b53adaa07c1f1e43774fd76f2e2ebd8862,[#1805] Fix example in javadocs of SimpleChannelInboundHandler
92cec8d2acdc08b75646e5e2c988183ca0841c17,"Split up the nioBuffers() method to allow for inline. Related to #1812

This move less common method patterns to extra methods and so make the nioBuffers() method with most common pattern (backed by one ByteBuffer) small enough for inlining."
845a7c5753e42e0d38a1485c68d941cc9d54d93e,"Move encode of chunked content to an extra method, this allows for inline. Related to #1812

encode of chunked content is not the most common pattern so moving it to an extra method makes it possible to inline the rest as it is a smaller method now."
ad0c456209d31522a7729acba2264b432326c5b2,"Ensure operationProgressed is invoked even on completion

- Fixes #1809"
9d53573ee8b70300e5cbcec29255dff0ad64b3b8,[maven-release-plugin] prepare for next development iteration
363531caf9d458303e7208817a289920ff0e730e,[maven-release-plugin] rollback the release of netty-4.0.9.Final
af499b5fb4862041962cba2e00670ad415130897,Mark ChannelHandler.exceptionCaught(...) as deprecated in preparation to move to ChannelInboundHandler. Related to [#1808]
ffab456aca37555b20550b4880e3ad67665a2640,Bump up version to reflect correct one
0065006824005f711136467b211b06abf17e8562,[#1818] Pass through message as they are when no compression is needed
36c8ac5e5c2a37af9d0a3df3d66194c3c5087742,[#1819] Remove HTTP compressor and decompressor from the pipeline after websockets handshake completes
451e91d1429c08ce8f92bb8ce0b9ad8c28afb904,[#1821] Fix IndexOutOfBoundsException which was thrown if the last component was removed but other components was left
f76497fe25b377ab92c7351623cf7ae412933458,Set memory for compiler as otherwise it sometimes fails here
a857994d82cadfce21ab34434c3523a8e8653141,Add test to show that writing a CompositeByteBuf when SslHandler is in use works. Related to [#1825]
7d9388a3cc90b322eb1e9ea048a16e31beaad387,Allow to only register a Channel via AbstractBootstrap and bind/connect it later. Related to [#1829]
f4f04a08c26092050ff8d0687ebc7f28bee718f4,Make DatagramChannel impls .isActive() return true when the underlying Channel is open. This also fixes [#1830]
357677d8fac857aae4e4b4b92d79dd37be81bb26,[#1830] Add testcase for write to not bound DatagramChannel impls and revert change in OIO as it breaks things as the udnerlying socket lazy binds
cd275ba67e2d206519bde4b9074371feefa7978d,No need to use an unreleasable buffer - just wrap an array
2243970294565ebe2c045345f9a06be0973ab94a,[#1833] Replace ; with & only in the QueryString and not the whole URI
3957ee32bb6a6dbf8858a05f50a1acdaeccd6d95,[#1833] Add testcase for fix
f1d4f813ed6404b83d539a5f68166bea89fc95df,Fix nioBuffer implementation for CompositeByteBuf
f034f90fb34689af29cbc3158b3a16411183a306,[#1836] Add comment to explain why read is triggered
c0bbde48b78163a394ae3fd63f98b6b6c56acb25,[#1852] Fix bug in UnpooledDirectByteBuf.nioBuffer(...) implementation
23baef8fb48fa363ffd0ed9f5d803a36a05e715f,[#1853] Optimize gathering writes for CompositeByteBuf that are only backed by one ByteBuffer
a2624a833e92a99d5ef50e30eea9743a873c0392,Slip in DefaultOioSocketChannelConfig (setAllowHalfClosure used to ignore argument)
910ed31a1b838e4f10f0379338343d2d81053884,[#1851] EmptyByteBuf.isWritable(..) and isReadable(...) should not throw IndexOutOfBoundsException
ce58e76e13d68e15ac678a80527f19dde4aa41f4,HttpRequestEncoder should append '/' to absolute path requests only when needed
29d34c672c1cd64c153add03a5340574fdcb7cfe,[#1855] Try to calculate the correct amount of written bytes to update the ChannelProgressiveFuture
ae904a1f56d80cb3f4ad160006c05319e73d173a,"Introduce a new ChannelOption called DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION. Related to [#1830]

This ChannelOption allows to tell the DatagramChannel implementation to be active as soon as they are registrated to their EventLoop. This can be used to make it possible to write to a not bound DatagramChannel.
The ChannelOption is marked as @deprecated as I'm looking for a better solution in master which breaks default behaviour with 4.0 branch."
ef936a6d41a88b2cc426383848f42a37b230b1da,"Correctly handle automatically suspend/resume in ChunkedWriteHandler. Related to [#1861]

The old implementation was broken and could lead to pending message never be picked up again until the user either explicit called flush or
resumeTransfer()."
cf4d25823c5ec8328e4b7e156330eabe20071084,Propagate channelWritabilityChanged() through the pipeline after flushing. Related to [#1861]
a74149e9848fef73d909dd56843e0fbab23f877d,"[#1865] Only use internalNioBuffer when one of the read* or write* methods are used. This is neccessary to prevent races as those can happen when a slice or duplicate is shared between different Channels
that are not assigned to the same EventLoop. In general get* operations should always be safe to be used from different Threads.

This aslo include unit tests that show the issue"
2b9a07cac90f7a5a5e6e5fb7859ae19e6c11323c,CompositeByteBuf.isDirect() should return true if its only backed by direct buffers
b4fa8af0791b3a31a91ea8112175adf6493b834b,"Cache underlying ByteBuffers and count in ChannelOutboundBuffer.Entry to reduce object creation and so GC pressure

Beside this it also helps to reduce CPU usage as nioBufferCount() is quite expensive when used on CompositeByteBuf which are
nested and contains a lot of components"
6d09e57be72cd76b42741c3cba59e9d25f6738a7,[#1875] Correctly check the readerIndex when try to read a byte from AbstractByteBuf
013ac44d3a64d53ab9e131cb43124fcbc0873caf,[#1832] - Channel writability change notifications sometimes fail to fire
be126395e3ee5c51b3e4d24900d398bfe05dc89e,[#1874] WebSocket08FrameDecoder may leak memory if channel is closed before the full frame was received
f70ceeab58772ec99d12f65ddcd137d54b42dd9e,[#1878] Fix leak of ByteBuf when masked payload is used
7e6649fd66102212c8c8223cbe55b00f5513aac7,[#1879] Correctly validate close frame
ee192f0321c8f18cf19077cc82a3a0a3bc211727,[#1880] Use ByteBufAllocator when read bytes into new chunks
3739ee90cf8be965d3cb0cef4f749f1960be39d0,[#1885] Correctly close leak detected also on non started HashedWheelTimer
d35768ae117e7f9f20fca5b5297c96019b9a574a,[maven-release-plugin] prepare release netty-4.0.10.Final
d7da19f745452f77a23d23af786eae3d23845d6e,[maven-release-plugin] prepare for next development iteration
8f612660b2fa94ea5854abdb29bdd3bb3c824759,disable debugging output during test
5317995a13d391e84b0ccafbf9d80a19576cf067,[#1881] Use correct field name in NullPointerException
c0936fc8e70ec17f9248b139947cd2e85c793b6f,"[#1890] Correctly expand ByteBuffer array in all cases

The problem was that we did not handle the case correctly when doubling the array was not enough. We need to keep doubling until everything fits in."
00f99dbff6d3cc959bff65d072f2d48f18b883e3,[#1893] Fix bug in JdkZlibDecoder which did not let it handle large data
20a16ae8dcb87706e375c4d8a667f50243d27916,Use direct ByteBuf for the test to make sure it is not copied
e307979a0d7318c2d3d0e6723f4beb458a4dd7a0,"Fix the problem where HashedWheelTimer puts a timeout into an incorrect place

- the stopIndex of a timeout is calculated based on the start time of the worker thread and the current tick count for greater accuracy"
d7f9b1ee76320dd9fc1e9992b4b75773718614bb,"Fixes the problem where the promise of the outbound operation that causes a channel closure is notified after channelInactive()

- Fixes #1897"
c5f6760c6804b5f0dfbec1ddd2953b3c58db58ce,[#1895] Fix IllegalStateException which was produced during failing ChunkedWrite after the channel was closed
1c73be21fca57474c8fb1db61e32c311ebd4beff,Remove redundant index check
beda02fad051e95f030f7b548bf10bb9b13595ac,[#1898] No call fireExceptionCaught but just fail the write promise
d946659520bd95a757a843bec63a93ba80272751,[#1906] Use a ByteBuf allocator from the ByteBufAllocator when encode Strings
c9b7f1f1b570eab9eb6b61df0e94cd4dbcc5e2ec,"Ensure the selector implementation can be instrumented before attempting instrumentation

- Fixes #1908"
1542b36e803eff4426e0d3d50fef9b064164fc0f,minor gc optimization: better DefaultHttpHeaders.iterator()
ff6a06a9be820595c9b512b73a09842012cbfdf1,"Add HttpHeaders.contains(name, value, ...) to save creation of LinkedList for simple checks"
b5f51753384859d86e1ae8fe436429a45b181f88,minor gc optimization: better DefaultSpdyHeaders.iterator()
951dcc6c102c5766c7562295691a7e0e3fb87a49,"copy all sliced buffers, fixes #1848"
812b0d11c2e9a1fe4cc412984f4da359467a2f77,No need to slice before copy. Part of #1848
068c75a025be3e49284968d207429873387814f1,[#1924] Correctly fail promise when EventExecutor was shutdown in between deregister
df442b9b6ade46dedbc4b44ec1f085b6d4958c9b,#1924] Only log RejectExecutorException when call invokeLater(...)
53fcff2eab7836bcf2be262e1fd12712117c4797,[#1920] Fix IndexOutOfBoundsException when using PooledByteBufAllocator with SCTP and NIO Datagram channels
68b616728a08b78f3af77f288f103c1cb0ba2c9c,[#1925] Only expose sub-region of ByteBuf on nioBuffer(...)
a6b4eddbba6643f9cc662089a59a9e13180a3c4b,Run tests with Pooled and Unpooled allocator
9fd8bf329d6c5b8e0305e5b75ee43f1ea3b9ef93,"More efficient handling of incomplete writes.

The problem with the old way was that we always set the OP_WRITE when the buffer could not be written
until the write-spin-count was reached. This means that in some cases the channel was still be writable
but we just was not able to write out the data quick enough. For this cases we should better break out the
write loop and schedule a write to be picked up later in the EventLoop, when other tasks was executed.
The OP_WRITE will only be set if a write actual returned 0 which means there is no more room for writing data
and this we need to wait for the os to notify us."
14e3c2c0d46d17838c0004f3aa762de290863690,"Make sure HttpVersion checks if the version string is not empty

.. which was the behavior in 3.x."
bcdb3e88d872c5c6c48de5d9d1953e489640a88a,[#1934] Correctly log handshake errors and not print them to STDERR
45524ea43ec16df1a20f3212306b8219a553e458,"More robust pipeline manipulation while upgrading to WebSocket
- This commit allows a user to write its first web socket frame right after calling WebSocketServerHandshaker.handshake() rather than adding a listener to the future it returns.
- Should fix #1933"
35cd13d10efc30c54dc230fe5ffe61a9b0cb76a4,[#1933] Correctly add the wsencoder before the httpencoder as the httpencoder also handle ByteBuf
79562d58911a827db9f9d1832b706fcbc7ade783,[#1936] Fix example in javadoc
27a89d6032a90168137e491af7de39a1bbab28d1,[maven-release-plugin] prepare release netty-4.0.11.Final
ceab146b549eae760c35801dcd3e70e5231cc072,[maven-release-plugin] prepare for next development iteration
4ce49a6195ea872569d316798d71bdde11810ab6,[#1943] Unpooled.copiedBuffer(ByteBuf pooled) should always return unpooled ByteBuf
926479e9046655b04ca5b9204a84b575ae4aa3f7,"Make all mutable fields in WebSocketClientHandshaker volatile

- Fixes #1945"
e4358ae6b8a8028de980f4fd41f0c93d3dbb40b2,[#1947] Handle RejectExecutionException graceful for outbound operations
544d68b396c4b7d42a4b07bac0ed101fa8d7d12e,[#1812] Allow for inline for most common cases when use NioByteUnsafe.read()
8930cefab8640fa1bef3d1d49f93a23184b1bafe,[#1812] Rework ByteToMessageDecoder.channelRead(..) method to allow for inlining
8986245b47e738c004e9aa9bba56b8f973dd3dc4,Deprecate UniqueName and its subtypes' constructors / Add valueOf() for easier future migration.
1c2352e6a060152b6a226ea0705d836a7a666f20,Replace constructor calls on UniqueName and its subtypes with valueOf() wherever possible
af1ac4ca0c88b6cda02870ff70200d172605a00c,Checkstyle
b53fa5dd709ec00546efc4d606d978b0c64edbf2,[#1812] All to have NioMessageUnsafe.read() inlined
16d32ed33ab7cf9806ade70f85a4ce12f65019c6,[#1959] Proposed fix to correctly handle timeouts that overflow the ticks in the wheel
31c1513229c853915c98198bd1ba17d4d6beb068,[#1958] Use CRC32-C in Snappy as per the spec
40c9de1b74c78b865259a68d9fa2b12df1775386,"Create StringBuilder with saner initial capacity when encoding a Cookie

Fixes #1951"
285f51d5ba005e3aedfb1590ca9adba943215252,"Instead of complicated capacity estimation, just use thread local buffers.

Fixes #1951"
2712ed9cbb4bba69a8b30102ce036a0b06d41ec5,Fix inspector warnings
72c78ebe75cbe238787ffe900f1d8a0c41667a9d,"Add an important notice about future migration issue in SimpleChannelInboundHandler.

- Related: #1590"
e1baa3f9b49fe171cb404f0dfea15cc2ec99f3d5,Simplify
4f5c52572b480b3d4c9fea904f3a83dbe163a3e5,"Allow a user to define his/her own length field decoder

- Fixes #1960"
e9967e55ad768165b8d360c646156483a427e06a,[#1940] Add javadoc to explain how the FileChannel is closed when using DefaultFileRegion
51ca4f3e91599d6879f14608c83f02a079ea9dac,"Fix a bug where SslHandler doesn't sometimes handle renegotiation correctly

- Fixes #1964"
0d1567da0b7e884712265b38780704b026e8edc4,"Fix an API bug in the JavassistTypeParameterMatcherGenerator where some of its methods are not static

- Related issue: #1402"
54db9ec725d2b2f74436b15e6c7aef196f098a81,"Use StringUtil.simpleClassName(..) instead of Class.getSimpleName() where necessary

- Class.getSimpleName() doesn't render anonymous classes very well
- + some minor cleanup"
6cd9045b969212ffb04b9ee643e7bfdc0224a1d3,Fix checkstyle
77b4ec7e1bc0b8c6111728cc074226dd9cfe1b73,[#1800] [#1802] Correctly expand capacity of ByteBuf while preserve content
c7b66545b4a4b4a903f4393e08b9ba9498c19fc5,"Add AUTO_CLOSE option

- Fixes #1952
- If AUTO_CLOSE is turned on, Netty will close the channel immediately and automatically on write failure.  The default is false."
d2032254b7b29aca620223c672ffa244171898b5,"Enable AUTO_CLOSE opton by default for backward compatibility / Deprecare AUTO_CLOSE option because it's gone in 5.0.

- Related #1952"
77054d7ecbaec09f52afb03823ad24b555946a10,"Fix regression which lead to leak buffers when nothing could be read from the Channel.

This was introduced as part of #1812, but fortunatualy was not part of any release."
7dddbbb2bdc1a2ab5648e7d4b4b24d6f328eac6a,Fix possible leak when a write is rejected
2386777af8d7f828383e6ac6a547ad4bcbe94aa6,[maven-release-plugin] prepare release netty-4.0.12.Final
db78581bbbe9e207a0d95b7c0e3b21a070aea9d1,[maven-release-plugin] prepare for next development iteration
11f95c78e203084ad367c7fcb546f5374e073d3b,"Optimize SslHandler

- Fixes #1905
- Call ctx.flush() only when necessary
- Improve the estimation of application and packet buffer sizes
- decode() method now tries to call unwrap() with as many SSL records as
  possible to reduce the number of events triggered"
ba3bc0c0205ed37f0541e43dd747ebcc103f8ed8,Simpler toString() for ByteBufAllocators
ec1040931405be9469fb2b5b2045d4d257001b45,Saner toString() implementation for EmbeddedSocketAddress
e4f391f626f1ce358b3037e38ecfec82eb9a4e30,Improve docstrings for and of
b00f8c63901369babae2009e48f6c4d12b9f4097,[#1976] Fix IndexOutOfBoundsException when calling CompositeByteBuf.discardReadComponents()
e83fb821d512456113a5e16b21ddb5c5458d9e79,Allow to override how wrapped direct ByteBuffer are allocated to make it easier to extend
7231be592aa65ac1e91d0a319761f7e3df2225e9,Also allow to override how direct ByteBuffers are freed
b65b4199dc8ce2032a6b20a2712caa6aa0c7d2f2,"Fix regression introduced by 4c7fa950cc4f4c52eeaae5887335b1f3047592f8

- Some promises were not fulfilled when SSLEngine produces 0 bytes."
c4130e0cf7b06308dab44b1b19851f3d9b266e7a,Allow to disable validation of HTTP headers which shows a 5k perf improvement here when disabled
8bfbf77b5898d3890f05fa55989e83bb457a6374,Also allow to disable header validation via HttpServerCodec and HttpClientCodec. Related to [#1981]
5de4b23c7aab674ac6b73bfef1e2fca039065758,[#1982] Limit the usage of ThreadLocal.get() for performance reasons
b5a587fadfd0821088d37d9d23388c343d73eb45,Use pooled allocator for AutobahnServer and voidPromises
54d3c99469b923b409ce1a52b6d1181984470b11,"Fix an unexpected IllegalStateException from a selector loop when a user cancels a connection attempt

- Fixes #1986"
fd776274c91e338af1364b75fae48547c8214c45,"Additional fix for potential race condition which occurs when a user cancels a connection attempt

- Fixes #1986"
a159d3ebac5812e4f6c1394d81b853b0ac140510,[#1994] DefaultPromise.cancel() should reuse CancellationException for performance reasons
90309f906571fb47613cb8489c016dfff9584ee1,Improve doc of IdleStateHandler according to example given in UptimeClientHandler (L57)
5386882c543ed19667ca7b804dae6ef1cb13cbaf,[#2003] Generate a io.netty.util.Version class which holds the version
da84afe9cc5bb95025a6e431cc667eb08fd397cf,Optimize check for equals header name and value
80f72a827093b805596e1e46e9b73b692e2030be,Optimize DefaultHttpHeaders.contains(...)
7ec70d0210ab6e48448ba78e11343ec8b699119a,Merge package private interfaces into public ones. Related to [#1989] and [#1991]
fd4435e6e36db2bd324d2eccc2016ce6675fd46c,Respect validateHeaders when duplicate/copy the response/request
04e8d25792a6151c859bf087a96afbc521a5a2a1,[#2005] Allow to use HttpContentDecompressor in strict mode
8753412d07ade518704f738f5a8757369b084f54,[#2006] Correctly handle HttpMessage / HttpContent implementations
407f0a36f5ced80c1ebef8e3e6b419cd1e237a92,"Simplify bundle generation / Add io.netty.versions.properties to all JARs

- Fixes #2003 properly
- Instead of using 'bundle' packaging, use 'jar' packaging.  This is
  more robust because some strict build tools fail to retrieve the
  artifacts from a Maven repository unless their packaging is not 'jar'.
- All artifacts now contain META-INF/io.netty.version.properties, which
  provides the detailed information about the build and repository.
- Removed OSGi testsuite temporarily because it gives false errors
  during split package test and examination.
- Add io.netty.util.Version for easy retrieval of version information"
6ade866d24eb9162a7d3b007f1d73c76ef91c401,Fix maven-bundle-plugin life cycle mapping in Eclipse
313365cd5c313044247ef7b20fdffd230f4a07d5,Fix NPE raised by HttpHeaders.equalsIgnoreCases() when one of its arguments is null
14327706a3f032c0c37517d1674e925f961c742e,Add test case for HttpHeaders.equalsIgnoreCase(...)
7f57c5ed05302b708a63ac0e55ea57dca20cdbe9,"Backport HTTP encoding / decoding optimizations which were introduced by #2007.

The backport is partly done to keep backward compatibility"
3dace666a34f82f5dac533eb357a853fd00bc29f,Merge buffers for performance reasons if possible when encode http requests/responses.
0918f3edb2192ea3845524138dd852496b655444,Fix test
5fe7596f4931e816b8e1f04e6dbe044c05421b86,[maven-release-plugin] prepare release netty-4.0.13.Final
6cf2748dbb49485b7f0851054dd0ad1776f0c5bd,[maven-release-plugin] prepare for next development iteration
3f7b674db8c9c2fc562b95327e089bb3603c9009,"Fix bugs in ZLIB codec where they produce malformed stream or their streams are not flushed on time

- Fixes #2014
- Add the tests that mix JDK ZLIB codec and JZlib codecs
- Fix a bug where JdkZlibEncoder does not encode the GZIP header when nothing was written to te channel
- Fix a bug where the encoders do not consider the overhead of the wrapper format when calculating the estimated compressed output size.
- Fix a bug where the decoders do not discard the received data after the compressed stream is finished"
818bc602ee2ed0223ccc7b7fe440b931ae556b13,Remove the use of ThreadLocal for performance reasons
ead617fdcc1164f1e66e147a2484dea1193ede3c,[maven-release-plugin] prepare release netty-4.0.14.Beta1
17f5865e381125c8ccc6e9188b62919f20c77572,[maven-release-plugin] prepare for next development iteration
14600167d6ddc3829831a5470d73f091fc4b9aa7,[#2021] No need to synchronize for unpooled chunks
053c512f6de708f1bb3f402cf6d911f88b1d38aa,Fix checkstyle
05c10fae051163b3b3925ac1bd9b179fc3e3bb00,Replace usage of StringBuilder by AppendableCharSequence for performance reasons
7c7acdcaac89423de2bc2e8ddf104d5289829013,[#2033] Correctly handle adding of IdleStateHandler after Channel was already active and registered
65b522a2a75c78c977a65e15663509509b5f12e0,"Better buffer leak reporting

- Remove the reference to ResourceLeak from the buffer implementations
  and use wrappers instead:
  - SimpleLeakAwareByteBuf and AdvancedLeakAwareByteBuf
  - It is now allocator's responsibility to create a leak-aware buffer.
  - Added AbstractByteBufAllocator.toLeakAwareBuffer() for easier
    implementation
- Add WrappedByteBuf to reduce duplication between *LeakAwareByteBuf and
  UnreleasableByteBuf
- Raise the level of leak reports to ERROR - because it will break the
  app eventually
- Replace enabled/disabled property with the leak detection level
  - Only print stack trace when level is ADVANCED or above to avoid user
    confusion
- Add the 'leak' build profile, which enables highly detailed leak
  reporting during the build
- Remove ResourceLeakException which is unsed anymore"
e88172495a8167cc4a0dff717f1db4e212c39697,"Ensure backward compatibility

.. by resurrecting the removed methods and system properties."
4f6a591e91058640393b4c00b022246b843169c3,Do not log the deprecated system property when it's not specified by a user
04a22498148669c5a1c2a8d32e50b2364ef61ae3,[#2041] Make PlatformDependent.isRoot0() work on solaris
5d39b1fc3df8a0173bf6112a68d3258317d6e655,Also record retain() and release()
128c4b96b5975c4ba2c7680eb7cc76839e0a59e2,Checkstyle
e506581eb1f21bcd3e98fb22d91d1e366fde2541,Add ReferenceCountUtil.releaseLater() to make writing tests easy with ReferenceCounteds
2102cb062b243df609cbb96393c23da77033980c,"Fix false-positive leaks

- All derived buffers and swapped buffers of a leak-aware buffer must be wrapped again with the leak-aware buffer"
40001a7a5bdc216e45aa5541d6de2089f5fa49b9,Add missing synchronization
51428004b3b4ff6267c81144cd01e9cc04f62193,Fix NoSuchElementException raised by ChannelInitializer
b3d8c81557315ac5b5d4b381fe7461ce276a3f9e,"Fix all leaks reported during tests

- One notable leak is from WebSocketFrameAggregator
- All other leaks are from tests"
02703e8fc1cf1560fccc7ebd804b274d24acb1b3,"Revert ""Fix NoSuchElementException raised by ChannelInitializer""

This reverts commit 3c453f5dbaf8524d46c9fb3285d2ea7ae8bdb5b6."
4116de8360f90f6709b750cb8cdc403a12072850,"Fix NoSuchElementException raised by ChannelInitializer

.. again."
3812b897e6f67bfe64f58ba0026c291a47b954c8,Fix buffer leak in AbstractMemoryHttpData
dc9537e672f931a7bc26aa90263d3dd7189c386e,Add more diagnostics to SocketConnectionAttemptTest to fix the flaky test / Cleanup
0097b904b75a1847fbcc16e5f0e902a6692ca9e3,Disable logging temporarily when running testRegistrationAfterShutdown2
419b5a8de76cfd040e869c6d7689c8c26e5f7c19,Disable logging temporarily when running testRegistrationAfterShutdown
b8fb8f3dbe65a6ad7eec2cf1ffa5661aca34bfb0,"Add KDevelop project files to the gitignore file

Signed-off-by: Cruz Julian Bishop <cruz@techern.com>"
81fa70c98d7334a1abb50109279ab6567517530c,"Format and partially describe Gitignore

Signed-off-by: Cruz Julian Bishop <cruz@techern.com>"
bddfc38c644742d70efe8521ef888dc2ff49bee9,[#2053] Do not allow < 1 on AppendableCharSequence init.
e96531839822be2966bbdd34181cf9397a7bd829,Optimize encoding of websocket frames by merge if possible
e136227ee6446777a94dfa3fc75159c8cf2ffd02,[#2065] Fix NPE in AbstractOioByteChannel during write to the socket
a79dfe74b75fb3c6f016e3c327d8df24e5fb4593,Prevent NPE from StringUtil.simpleName(..)
39ae2dd3f1856def09b21995ff0496b6ee59a8b8,"SPDY: add SPDY/3.1 support

- with Michael Schore <mschore@twitter.com>"
e6eb7fa4664b18682be55745d3e0f663b661804b,minor gc optimization: better DefaultSpdyHeaders.iterator()
c1704039f0a40d56d13a5fef348148150809b913,bring back entries()
49587791b7b3a680b52193ef9259932b5e5cad0e,Fix a compilation error
db59b38db330512219e6f7e3cf09b2c959d87cd1,SPDY: remove SPDY/2 support
6447777ac236e9e0e3c6423ff0bfc5e116324587,SPDY: code cleanup
c3891a3df44a97570a3072aa4cd62d61fbe73d34,SPDY: add SETTINGS_MINOR_VERSION
82b6e75b96c4cd3ae4b51039adcfd21bc83fa983,"Rename flushAndWrite() to writeAndFlush()

- Related: #2066"
ceaebd37edc2a2ee388d41b997c37e51f4d60d34,"Rename flushAndWrite() to writeAndFlush()

- Fixes: #2066
- Fixed inspection warnings"
d7d4ea8c6ded087b3dfe8fd768ebbdce319719ee,"Remove unnecessary check in DefaultPromise.await0()

- Fixes #2032
- Fix inspection warnings"
f7a38815363fbf67de0ddd819119808aee386543,"Fix a bug in SslHandler where a ClassCastException is raised when non-ByteBuf message is passed

- Fixes #1828"
3444c0665490bfbd3fd100146a11736de9d58d36,"Fix a bug where HttpObjectAggregator fails to send a '100 Continue' response

- Fixes #1742"
2b09d92c373813a0f3ebf79df73ca25a494b8911,Improve the unit test for #1742
0f76b3c357fbb3500a9f0742e9369139b3283ceb,"Remove unnecessary code from HttpObjectDecoder and re-enable all HTTP tests

- Since Netty 4, HTTP decoder does not generate a full message at all.  Therefore, there's no need to keep separate states for the content smaller than maxChunkSize.
- maxChunkSize must be greater than 0. Setting it to 0 should not disable chunked encoding. We have a dedicated flag for that.
- Uncommented the tests that were commented out for an unknown reason, with some fixes.
- Added more tests for HTTP decoder.
- Removed the Ignore annotation on some tests."
e9f09ea9f5f1b371fbdce95c6ddc97030f9b5c58,Stop decoding after protocol upgrade / Do not use singleDecode option
0052d83db18ce710be65d8a6732c994227bf31fe,Limit the access of the HttpHeaders for performance reasons
47d0a85720a89b7ab4ccc13577b785b203cb1505,Fix a leak in HttpResponseDecoderTest
836ac02ab931088a8608bb33a419fa55f44472d5,Relax Maven version requirement
89a7cb8e710952e76a3a09b113fcb6ebe17acb12,"More graceful registration failure

- Fixes #2060
- Ensure to return a future/promise implementation that does not fail with 'not registered to an event loop' error for registration operations
- If there is no usable event loop available, GlobalEventExecutor.INSTANCE is used as a fallback."
b889d3f559ce9cb8ed715ed6ad9721efa6614b42,[#2079] Stop reading once the NIO byte Channel was complete drained
1fcd19a28fbab687eb2be65ad3535d1564d656cc,Fix a bug where adaptive recvbuf size prediction doesn't work correctly when maxMessagesPerRead is > 1
bab227213ef30a414f3ec3db41c1a28646120a6c,"Increase the default maxMessagesPerRead of  AbstractNioByteChannel to 16

 - Related: #2079"
fc2e6916d996f6f1b16f9478c1c9213007fcbd20,"Fix regression which was introduced by 89a7cb8e710952e76a3a09b113fcb6ebe17acb12

Related to [#2060]"
dd49b1cfac998aaa963bcbebbd056dd869688d34,Use LinkedHashSet for HttpHeaders.names() and add Javadoc about the performance of names() and entries()
f65237861bf82ca2d47abd163117232aceac0153,Potential fix for the release problem
af0dbb9072949b083183d5b2263a520af14d8d6e,Use the recommended maven-release-plugin version
8ea48bd602cca8a681baf2b26301b141dfd28eb2,Trying out an older version of release plugin
f6cb9088c620f7909b4e9824be4e816a5ce410da,[maven-release-plugin] prepare release netty-4.0.14.Final
008a049bf4c6629f79248d7fef0da7674d86b775,[maven-release-plugin] prepare for next development iteration
9c1a49c58e3d66008bfbf380214fb64dd051afc2,[maven-release-plugin] rollback the release of netty-4.0.14.Final
372be721a15b1ff1cbfb358d0d9be412e57b924a,Use the latest Git SCM provider
4bf6ec71713b39cc88870429cb3d97687ba71e23,[maven-release-plugin] prepare release netty-4.0.14.Final
0b7aedb13b519ebe7168be150a39913738415e3e,[maven-release-plugin] rollback the release of netty-4.0.14.Final
cdb700c7a4d0aad49ca38e17c0c746548869641f,[maven-release-plugin] prepare release netty-4.0.14.Final
e83d2e0b4e984f39a4cae020b75b34d5168190e2,[maven-release-plugin] prepare for next development iteration
7d90c5b756ff3b7179b9f63dc6399c1caa896d3a,"[#2088] Introduce sendUnsupportedVersionResponse(...) methods which allows to use the ChannelFuture/ChannelPromise to get notified once the response was send.

Also mark the old method as deprecated."
dd8f4bc0c4f46ec5f6dea23023cfa5fde8fb5448,Fix typo
b9bbded84e8bfe870fc3e29139d86b71c98d6908,[#2090] Correctly format DefaultHttpRequest#toString()
393f7b2306f282df852bb487173c725396607ea7,"ChannelOutboundBuffer returns total pending write size

total pending write size may be used to optimize write batching"
0bbc3facec1fa6c83b0bec04bdfbefc424230a3f,[#2086] Fix race which could produce NPE in AbstractNioUnsafe.finishConnect
bc21443ea904ba37f46c1fb3b9ab99322e3bbb0d,"Fix a regression in SslHandler where delegated tasks run in a different executor makes the session hang

- Fixes #2098
- Deprecate specifying an alternative Executor for delegated tasks for SslHandler"
de5abdeb489d08b2ebd60f6dc6e176fd9eb74767,Move the reusable classes in netty-testsuite to main/java/src and deploy them
1b79781b4ef125b55819d8429b137e3a3e670d38,tab -> spaces
751943ed00e864f1104806c7e03a1207797cf1b6,"Fix a potential NPE due to the race between a connection attempt and its cancellation

- should fix #2086"
44b25ff79bcf9cd5ce87fa4e5478022953dd3afc,Remove unnecessary test resource
0e5d6967329e0e8b81661e08717dd226720d7c76,Do not deploy an unused test jar
b5f49203de838fd3ddfac819f80206bef80f2abe,Remove unnecessary trailing newline
13d65d7ccfcaa90f8e905e9b6c46aa0f246d8109,[#2104] Make sure we only act on the SelectionKey if it is valid
a3fb9fc8234f2176a7832959606ed8f1e337fc32,Move the testsuite classes back to src/test
2ca7eae136d5a3bf2a8bef4eb4a8204648e85268,Do not deploy the testsuite
b24494abeb3515fac9c5392a14f7a92b1f9550f2,"Fix a bug where HttpObjectDecoder produces LastHttpContent after entering BAD_MESSAGE state

- Fixes #2103
- Added LastHttpContent.EMPTY_LAST_CONTENT.toString() for athestic reasons."
8d431679d7b2d35e68b1730aa4bf896eb740bb6a,Fix a compilation error
2c3f02c4532583b5b4cf3258e93f81394da9cd87,"Allow to extend the provided tests by the testsuite

This allows custom transport implementations to just re-use the tests provided by netty and so make sure everything works like expected."
3ce35c710a5fc9a8416436b4bce09c98e7ed45b2,"Improves SelectedProtocol enum to avoid boilerplate on subclasses

NPN server providers return a String version of the negotiated protocol
and the getProtocolByName method allows to easily get an instance of
the SelectedProtocol enum and avoid the need for a switch statement in
each subclass to match the String against the enum value."
eca56135349ea5561a7e8ea73fec0dc67a63cd61,Cleanup and remove get prefix of method to be more inline with our API
1326ba54ee60e0ad56933293f218a53bd43ffd9c,Replaced deprecated 'sendUnsupportedWebSocketVersionResponse()' with 'sendUnsupportedVersionResponse()'
5cb9ab0fc0bba3891c3133e8b842f661ac6aaa5c,Correct JavaDoc
06cbac922ada558e9b0ebeb9e58eb19d683ab451,"Fix a bug where SpdyHeaderBlockZlibDecoder fails to decompress

- Forward-port 4c35b593c1ec811d1134cb0ef43db9329935e18e, originally written by @wgallagher
- Fixes #2077"
cead74f84db8e28b2bff9b8047ba8edce1c6b66b,Fix checkstyle
b8de47484a3822b097d6721fe443674ce18ffc0e,"Port the changes in SpdyHeaderBlockZlibEncoder to master & 4.0

Somehow it slipped away."
febc53daaaa0e72dfaf071bc026f68e6b19fd350,"Port the changes in SpdyHeaderBlockRawDecoder to master & 4.0

Somehow it slipped away."
3373f83cbbdf86c3e6518f275e964de5f3b3f232,Fix a bug where DefaultChannelPipelineTest.testFireChannelRegistered() triggers channelRegistered() twice
237ba27499e102c6ad43d6111590a6c43570a660,Better exception message
f66be21ee35d0b7c114aa96ca72f8bbc48042b25,Use the source frame's allocator instead of the unpooled allocator
03b0099b6305a3c9d7fe9df70b9d47d0ebfdf9c0,microbench: move from Caliper to JMH
462817cd96ad68e80b2c6d98e38e6225232708ce,Add a link to the wiki page about the microbench module
2df690b0e43eb55486a4adc9cefad8bd42345190,Add HttpChunkedInput for easier streaming of chunked content
437a9403b0af507e1303659c24b94e4c59ec2639,Fix inspector warnings
99f9c6dbc3393a7c21ab4052547ecb664a6c5c3b,Make JMH options modifiable through the subclassed benchmark.
ac332dfe02efa04a6fe4ce18f80157c5191bacf2,Using SystemPropertyUtil for prperty parsing.
46df4f800f4fc8dcf6f3c48ae861f57299b5aaa6,Update README.md
75b0360867022e112bc8044e4e728f6bf235d700,Adding a Cross Origin Resource Sharing (CORS) handler.
e0b0a998870bf34faec35b13731fbb2576d9b3e1,Fix compile error
89307099407ad73322fcdaf1aa81773c8bc2b8c5,+= won't let compile optimize String concats
faf8becf2e12fdb46ba256c39eedab501ed3cdcb,"Make use of ByteBufProcessor for extract initial line and headers

This gives some nice performance boost as readByte() is quite expensive because of the index / replay checks."
39b8cc348ab1e3fefbd56751e949ab930db86853,fix grouping for isActive - socket.isBound is almost always true and should not override 'isOpen'
2746688fd7da77df0e72e2a20364a0b6803e4096,"Fix occasional failure in SocketConnectionAttemptTest

- Use the real host name with a firewall so that the connection attempt always takes long time on all platforms.
- Fixes #2128"
9b38e8778c3ee7f9c317193a4868e6c280acfb28,Prettify / Saner initial capacity
2389c71e81dbbfab3352e059bdf52d4de73fb0f4,Fix resource leak in InternalAttribute.setValue()
f3482670f9e936ae8f9007d2e6678f13793331bd,"Fix IllegalReferenceCountException which occurs when multipart data is stored in memory

- Fixes #2102"
95bcbe5e08c16f70553e00cc535a9e450c902f21,Backport the HttpPostRequestEncoder fixes by @igstan
149c7e82a254c11b1b4982f13020a2b6fc0c98be,Add HttpPostrequestEncoderTest by @igstan
ed8ee336610759b48b3e8974df1a849f0a603f63,[#2058] Use correct MANIFEST.MF file for source jars
da5da8e212727991eaaad8f06cce108a3d025471,Fix try to delete file while it does not exist anymore (see #2102 and #1713) in reference to this issue
b1392050f7c5205a50d7e9ee979ba27fa4741555,"Disable Javassist completely on Android

- Related: #2127
- Inspector warnings"
9a9f98ffcd947668aeb8ca6bc974cb8dcb3870a9,SPDY example app
5f8a0cc10b97ce303fd2de90220cca9085b2eaeb,Make use of a Logger in the SPDY example and simplify it a bit
287515210d2215d8355a60809871fe09ac943f10,[maven-release-plugin] prepare release netty-4.0.15.Final
d67184b488d163be03437e68ee2ec33ea7add2f6,[maven-release-plugin] prepare for next development iteration
f0c7c901d08dc5acaea2fa3a22119f9f4a5e8ada,Add testcase to try to reproduce #2144
22494372250b737c97c4e39692a2ecb665f99cf9,"Fix fileChannel not closed, preventing delete to occur correctly"
bea7039c3e900670d9feefb77a0df77df9c9a750,Add a log message on deletion failure
6b790f1868ac71e437aae942cf243bce9eabbeae,Fix a compilation error
407e12d99b7af20f9bddb17edb6e086439b02e23,Not throw an exception if subprotocol is not supported but just drop the header as stated in the RFC's
9b0e5b914875f6cbb857ed34c1b157a36315e41a,Fix API documentation on the usage of AttributeKey
293e34e13f5c3f52975d4a4d5e9224c52f3b0b67,Run autobahntestsuite as part of the build
0bf5ca22cb0f3bc08850c61e5d09eb01cc98e406,Cleaner resource leak report by excluding noisy stack trace elements
6e8ba291cfcb325fe4397a8e7db43579070e7a07,Simplify the acquisition of Cleaner
8386aabf94ffab834bb09d7a454f093802670efd,Exclude sun.nio.ch.DirectBuffer from animal-sniffer check
9f7a9077d6fa1508690a7719199e586d001865b6,Remove code duplication
80ed147652133ce222279f34e21f4b44e8a4a728,[#2164] Only reregister SelectionKeys that are still valid
37e65888457cf62a0dcdb4f667ea6170bb6e582c,[#2159] Not fail the ChannelPromise with WriteTimeoutException to prevent warning
0f7379157a9a1170ba611110d554d26770e3cf25,"[#2168] Eliminate unnessary memory copy for heap buffers in JdkZlibEncoder

* Also adjust tests so it test with direct and heap buffers"
f94b563bcd64840a9978204e75812ed182830990,Better exception message to tell the user why it is not supported
64c3f58279809141a851becba445a20badc8a610,Not wakeup the EventLoop for writes as they will not cause a flush anyway
38d04c927f8277389c42ad433c7fd5887d31913f,"Tweak snoop example to send a full HTTP request.

Without this, future HTTP requests on this channel will
silently fail because the HttpObjectEncoder will be left
in an unhappy state."
40f4b5c9dbf8c93cc52585309322bfc4811d7237,Restore of interrupt status after catch of InterruptedException was added
147e08a30e63b5f9afbdf1cb827d7894ba9fba55,#2177 Adding support for bound host and port for the SOCKS5 command response. Changes are fully backward compatible.
69a1095976df0b2092b16cfb751514020f86bf64,"SPDY client example

Demonstrates the usage of SPDY from a client perspective. One can also
use a SPDY-enabled browser as a client, but it’s easier to understand
the internals of the protocol from a client point-of-view if you have
some code you can debug."
417f7264fdb431b34adf8358b9dc2ac2bfcb87c1,"Reorganize the SPDY example

- Move the server example to spdy.server
- Move the client example to spdy.client
- Fix inspection warnings"
d343a258e201796f010bcf5926df1a77bc04637e,Allow to skip autobahntestsuite by specify property skipAutobahnTestsuite
dddfb149a5f7c043ff4d20c36a132a6f2dedd4f8,[#2173] Fix regression that let HttpRequestDecoder fail if the websocket response and a websocketframe are send in one go
85a997d5ec36ef07e0c97cc273d5bd1782df8f3d,Correctly calculate checksum when using GZIP. Part of [#2168]
3d531231fe14666e11d0ade1955d6ccaa414845a,#2183 Fix for releasing of the internal cumulation buffer in ByteToMessageDecoder
9bee78f91c46bfe7f7e4049b568dc13675d4b611,"Provide an optimized AtomicIntegerFieldUpdater, AtomicLongFieldUpdater and AtomicReferenceFieldUpdater"
c4c71e6d289b034e6415e3b04ea8e56c0fd11b99,"Fix the potential copyright issue in SocksCommonUtils

- Add StringUtil.toHexString() methods which are based on LoggingHandler's lookup table implementation, and use it wherever possible"
2598223d0ecb31508de2a02d7310a7eeef864466,"Fix resource leaks in WebSocketServerProtocol(Handshake)Handler

- Related: #1975"
309ee68c217b4d6a5e83a15dc0b9d7b713d3fd6c,"Fix a race condition in DefaultPromise

.. which occurs when a user adds a listener from different threads after the promise is done and the notifications for the listeners, that were added before the promise is done, is in progress.  For instance:

   Thread-1: p.addListener(listenerA);
   Thread-1: p.setSuccess(null);
   Thread-2: p.addListener(listenerB);
   Thread-2: p.executor.execute(taskNotifyListenerB);
   Thread-1: p.executor.execute(taskNotifyListenerA);

taskNotifyListenerB should not really notify listenerB until taskNotifyListenerA is finished.

To fix this issue:

- Change the semantic of (listeners == null) to determine if the early
  listeners [1] were notified
- If a late listener is added before the early listeners are notified,
  the notification of the late listener is deferred until the early
  listeners are notified (i.e. until listeners == null)
- The late listeners with deferred notifications are stored in a lazily
  instantiated queue to preserve ordering, and then are notified once
  the early listeners are notified.

[1] the listeners that were added before the promise is done
[2] the listeners that were added after the promise is done"
103a08e6c622c1b9936bba2fac852890a2ef579e,Reduce code duplication in DefaultPromise
f23d68b42fd71674fee6623f6779d70b6849da21,[#2187] Always do a volatile read on the refCnt
9ca71f2d8e9546ffe56611612d33451f80813264,Adding ability to start spdy server/client using maven.
2e064ee87f372cd68aa870b92164f9c8cc2010aa,Fixing spelling of 'request' for handler names.
78cf0e37e2f8411c1179e2a48eecb7e401d18878,"Log the rejected listener notification task under a dedicated logger name.

- Fixes #2166
- Some user applications are fine with the failure of notification"
8e854bbf18a712b35932283a279d3ac99544a265,Fix indentation
617739c515876d046a29389ca254ab86b2cccb6a,"Simplify exec-maven-plugin configuration

- Move the version number to the parent pom's pluginManagement section
- Remove unnecessary system properties
- Increase the scope of execution from compile to runtime"
ea345f6421a865e185e4c39ebb43a7a1def48280,"(Kind of) skip autobahn testsuite on -DskipTests

- autobahntestsuite-maven-plugin does not provide a way to skip all
  tests, so we run only one simple test when -DskipTests is set"
87b853c60d97590ea49bc6b96b9b2d2abce5ff97,"Use smaller number of boss threads in the example

.. because usually there's no need to use many boss threads."
87602fde252b90850e3a702e82256a3b2e0b56b9,[#2215] DefaultChannelHandlerContext tasks needs to be volatile to ensure every thread only see full initialized instances
21c4aaa12b68358e3501971958c2377ea12fdb18,Add 'coverage' profile that generates the test coverage report
060eed9e80241e59ea96a05839dc8569a36c6923,"Prefer interface to implementation in type declaration

This fixes the build failure with JDK 8 due to animal sniffer error"
e592d0636470fa720fc7715c90cfbe5af632ca78,Fix the compilation error in ConcurrentHashMapV8 + JDK8
50b862349ceaec9cccb9bf20971fa6e202d6bea5,"Fix a build error

which occurred when -Pcoverage was not specified"
c93337b01ad951fd8e3df940cb1f34deb1ad90b8,[#2212] Skip autobahntestsuite when using -DskipTests
aeeb2e7bac0545d85ade01ed4e837ed8ab679c35,Fix a build error related with NPN version and JDK8
c8ec5be8423533cd51466f226dd645057e01b1d3,Remove a version clause added by mistake
ed4f7305ceff7eb91dd81f1e24c13d671b2eece1,Remove the StringCache option which was removed in JDK8
084db044cd57aededdb650ef17301b6ba9e60799,[#2219] Fix javadocs of HttpObjectAggregator to show correct handler order in pipeline
7e0e4c63258b3af6155dfe463d6ea4741ac48dc9,"Fix a bug where DefaultPromise.setUncancellable() returns a wrong value

- Fixes #2220
- Its Javadoc says it returns true when the promise is done (but not cancelled) or the promise is uncancellable, but it returns false when the promise is done."
0e71da3082d51b0099bd6e7e22369dd7d7615b98,"Fix a bug where DefaultPromise.setUncancellable() returns a wrong value

- Fixes #2220 - again
- Missing negation"
838e80ed6b522cb797b206e43fd9b749c8aaac76,Fix external Javadoc url
041d37e0c8b3616dc86468bd2c3b6332638bdf1b,"Make most outbound operations are cancellable

- Inspired by #2214
- It actually reduces the chance of trying to marking a cancelled promise as success again, which raises an IllegalStateException."
852a7cec77ae0236ae0664f5f021b233f747c47f,Make the build not fail in JDK8 until we fix Javadoc
96b0a949e102a5766abc5e12b3392b1bf3da7005,"Make most outbound operations cancellable / More robust promise update

- Inspired by #2214 by @normanmaurer
- Call setUncancellable() before performing an outbound operation
- Add safeSetSuccess/Failure() and use them wherever"
d52dc3b740e778bbab60b2a7b5715ec44f31c10b,"Do not warn if failed to mark a void promise as success

- it's always supposed to fail."
7041a9238e5087efa5fb0fa3d8a5d0721eb5f610,Allow to cancel non-flushed writes
80e6f9adf4ef7eaa273eee8818a4ffd7bb0c5d06,Correctly respect isAutoRead() and make it consistent across OIO/NIO
62ebe88981ab42b28eafad89586307e0c249f00a,Allow to set IoRatio to 100%
69a36b8beab76ad176a20554d692e89d62f8919b,Prettify exception message
faaff9bd86166c12ff98aa06a946db3e4dd9ee90,"Backport the tests in ReentrantChannelTest

- Originally from c149f4bcc0c0d02aa1abcd5e39c155a9e598822e by @wgallagher"
85ab9b598209c342fac56077d476ce0d65c2f1c9,[#1710] Add missing duplicate() overrides in interfaces
449ce0dd7ab0361790d0f6d267d76a23f126129f,Remove the irrelevant AIO channel options
60acd54c7efb2385ab7488f69c5b62c2e1a33183,[#1876] Make use of proper state machine in WebSocket08FrameDecoder for performance reasons
a19fe069284456b1c98028fb07e44332ba4b2498,use enum for state in EmbeddedChannel
7e5aa4a911af76b8964d0fd55eb082a46eb419b4,use enum for state in LocalChannel
517da2b46a41b779ebb41d4508c7abf5d027a9e2,Fix checkstyle
a65f097d53f8d1827556d4d1b41d8432d3c664b5,"Allow empty handler list when creating a new EmbeddedChannel

.. so that it can be used for dynamically initialized pipelines

- Fixes #1899"
2d96b32155dd56f8ffcbcc2a571652df812fb06b,"Clean-up ChannelOutboundBufferTest

- partial port of 136e1ebba8a3965dab888d21aaa292ce921c704d"
573b54a93d45553e1726bcab54f0e325ae9f0bde,[#1907] LengthFieldPrepender should better extend MessageToMessageEncoder for less memory copies
b533a1361bbbc457c974ca365f8293ec27ffda1c,"Replace UniqueName with Constant and ConstantPool

- Proposed fix for #1824

UniqueName and its subtypes do not allow getting the previously registered instance.  For example, let's assume that a user is running his/her application in an OSGi container with Netty bundles and his server bundle.  Whenever the server bundle is reloaded, the server will try to create a new AttributeKey instance with the same name.  However, Netty bundles were not reloaded at all, so AttributeKey will complain that the name is taken already (by the previously loaded bundle.)

To fix this problem:

- Replaced UniqueName with Constant, AbstractConstant, and ConstantPool.  Better name and better design.

- Sctp/Udt/RxtxChannelOption is not a ChannelOption anymore.  They are just constant providers and ChannelOption is final now.  It's because caching anything that's from outside of netty-transport will lead to ClassCastException on reload, because ChannelOption's constant pool will keep all option objects for reuse.

- Signal implements Constant because we can't ensure its uniqueness anymore by relying on the exception raised by UniqueName's constructor."
499033d44f6fb564f5164d0d84df3e9079b2622c,Add a shortcut method for collision-free naming
651c7b056a386254165303a23fc9d4d917477ffb,"Split HttpPostRequestDecoder into HttpPostStandardRequestDecoder and HttpPostMultipartRequestDecoder / Add HttpData.maxSize

- Related issues: #1937 #1938 and #1946
- Add InterfaceHttpPostRequestDecoder and Make HttpPostRequestDecoder implement it
- HttpPostRequestDecoder actually delegates itself to HttpPostStandardRequestDecoder or HttpPostMultipartRequestDecoder
- Remove IncompatibleDataDecoderException because it's not thrown anywhere now"
a5f33f402073d1f2eaed823ceb549318946a80f2,Fix some inspector warnings
ebc78dab1d29fdf47c1614d14053a44cd028f297,"Add a getter method for accessing the ClassPool of JavassistTypeParameterMatcherGenerator

.. so that a user can even manipulate the class pool as they wish."
20f6f7e01811a7da9963ba0416bfb1e947e327f1,"Implementing the Binary Memcache protocol

This changeset implements the full memcache binary protocol spec, including
a first batch of tests. Ascii protocol and more coverage and helper classes
will follow."
a327a25a6cfa872877c440cd151df3ad57118388,"Use StringUtil.simpleClassName(..) instead of Class.getSimpleName() where necessary

- Class.getSimpleName() doesn't render anonymous classes very well
- + some minor cleanup"
5551fc7351c8cc9efca7b4edcf0b7399fb901480,adding memcache codec to netty-all project.
3dd7fba320cb08f3e07eff6e44cb2bd23f8d0a47,Moved constant classes out of util
71b6439c669f71150086f67e762b1dabce0f0357,Fixed various inspector warnings
d748113c7d64b8bd7fdf624fd776660044b816ef,Abstract classes' names should start with 'Abstract'
812481602a18bdc148eb3a2c80f063ff57904d6d,Don't create an EmbeddedSocketAddress every time
fa33529ca5652acce38dfde1bae3d046e7c569e4,Adding check for zero readable bytes in WebSocket08FrameDecoder decode.
ef4bc99849f79a5dbfc3297b25c17494314598aa,Remove unnecessary parenthesis
40003ed250a41286dd73683e62737e318ab003ce,"Resurrect Channel.id() with global uniqueness

- Fixes #1810
- Add a new interface ChannelId and its default implementation which generates globally unique channel ID.
- Replace AbstractChannel.hashCode with ChannelId.hashCode() and ChannelId.shortValue()
- Add variants of ByteBuf.hexDump() which accept byte[] instead of ByteBuf."
780516471faba35322e78ee2a9c1466b874724d8,Bring back ChannelGroup.find(id)
eb308cfff66a6264d3eaf81aca28b918cb8fce1e,ability to use Executor instead of ThreadFactory
c78544cfaa5403f0599bcc8c73f3374295b4dd67,Avoid memory leak when encoding the key
f6ffc5c1c7dc91407f037b58b21ccd5bdcd2548f,[#1682] HttpVersion.valueOf(...) should not convert to uppercase
835b4443f3d022041b1b305a091c90188047aa2d,"Optimize and clean up LoggingHandler

- Use ': ' instead of '(...)' for simpler string concatenation and prettier presentation
- Optimize the overall performance of format*() methods
- All format*() methods are now expected to encode the channel information by themselves so that StringBuilder instances are created less often.
- Use a look-up table for generating per-row prefixes
- Hid formatByteBuf(), formatByteBufHolder(), and formatNonByteBuf() from user because a user can always override format(ctx, eventName, arg).  For example, to disable hexdump:

    protected void format(ChannelHandlerContext ctx, String eventName, Object arg) {
        if (arg instanceof ByteBuf) {
            super.format(ctx, eventName, arg.toString());
        } else {
            super.format(ctx, eventName, arg);
        }
    }"
2e58497160d84e4fe6a558373a9d652ad86946c8,Make LoggingHandler.appendHexDump(..) protected for the subclasses
a9150ee7d6284341738bbc580429b6c37ce5fb9f,Simplify two-args message formatter in LoggingHandler
fbed62249ca191c7f97af6270eafef0f16945812,Rename formatUserMessage to formatSimple and use it in two-args formatter in LoggingHandler
3d874f0bd793ee860bca3f37f95811f16e0646a9,Improve documentation for the two-args formatter in LoggingHandler
183bfe8f9f78d05cf2d8e4a72216644c12d7af8b,"codec-memcache: fix decoding issue for value parts.

This changeset fixes an issue when decoding would stop if the value
comes separated in two or more packets, leading to invalid bytes read."
a1526bedd3b76a6b44cb906bb580de1d335909e4,codec-memcache: removed println in test case.
f03c32e137dd89ec91fae04d112e9660a08f65d1,"[codec-memcache] encode key directly, no need to use unpooled."
2351b8ddd9ac56b1929cfc542d8316b6ed4e6290,"Add FixedCompositeByteBuf which can be used to write an array of ByteBuf in an efficient way.

This implementation does not produce as much GC pressure as CompositeByteBuf and so is prefered,
for writing an array of ByteBufs. Be aware that FixedCompositeByteBuf is readonly.

When using this in a project that make heavy use of CompositeByteBuf for writes we was able to cut
down allocation to a half."
bea2acdf12ba6d2cb8f271fa2ee5da0125e74281,"Allow specifying a custom charset for a multipart Attribute

- Fixed #2025
- Adapted from @BabyDuncan's pull request: #2031
- Overall ugliness clean-up"
215e75c7d9457c65afea58ceae09c99fb5adc7f3,codec-memcache: increase default buffer size and only encode extras if set.
d31a3e41208d09b5f125d78050f82d5b771d80f5,Hide protocol detail from users
0ff98c98e2da1c209e1d365e464e836fe9b6900b,readableBytes() ==0 -> !isReadable()
26fc84529feedbb5b6af1d3f5be123feaa5aa9d4,Also record retain() and release()
d417e3dbd042633f69f9d080430c95b7c0656124,Fix a buffer leak in BinaryMemcacheObjectAggregatorTest
fab56bae94d0e2af869872d1f42e86c32e0c21e5,Fix a buffer leak in BinaryMemcacheObjectAggregatorTest
86c4166c244f2816a7b7ea1302c3523dd750fdda,Fixed various buffer leaks in FixedCompositeByteBufTest
a8bc720977a794091a4a0233e4b70203d31c4840,Fixed buffer leaks in LoggingHandlerTest
acf7dbf811e28e8cff94deb2846a9332f9879dff,Fix buffer leaks in BinaryMemcacheEncoderTest
ccd231b8f42a717964ec52876037333dfa90e200,Fix a buffer leak in BinaryMemcacheDecoder
b592a18cd1a963c99dfefabbb56222016fadceb5,Fix buffer leaks in BinaryMemcacheDecoderTest
9840de82f0a25ed5b1fb71368e15cc8d446e9a99,Fix another buffer leak in BinaryMemcacheDecoderTest
516795fcfba948d7bcb667d87bf6ccb591daf27d,"Add convenient logging methods for logging exceptions quickly

.. Mainly useful for writing tests or ad-hoc debugging"
6e23cf8c92160834aa46413b0796d37531edeaa8,Fix checkstyle
fcb32a77b9f8b89be1e6c695853e2e18c535f355,codec-memcache: No need to allocate a buffer if no extra is used.
b17a7656152a9982d69f94d2e87ea6b5cf4b2680,codec-memcache: prefix abstract classes with Abstract.
9bd44a1d7c6295b00710ce1206a3dcc496f3e639,"Add support for 'charset' property for multipart boundaries

- Fixes #2004"
2d5a3b5898dec0bed54660563e6c7acefb515bec,"Add XML decoder

- based on @mcaserta's work at https://github.com/netty/netty/pull/1121
- not ready for a merge yet"
086dbd1ba14c630358f856f8f61af997c92001e0,Fixed the XML decoder
ee8571824b55fb17af02330d80527518866de4d0,CDATA support
502ccabab316ae731e5fe8cbb68b898605e20487,Fix inspector warnings
457cd2f6fa54e8d0f776f6b34c25acbfd932b13b,Fix buffer leaks in XmlFrameDecoderTest
5e69955d23d7f72ea1b3f8f4a909992577636a60,Fix another buffer leak in XmlFrameDecoderTest
df346a023bd64c1f0d69b54a9a0df8eecbc008fe,"Change the return type of EmbeddedChannel.read*() from Object to an ad-hoc type parameter

.. so that there's no need to explicitly down-cast.

Fixes #2067"
2b84314fddfbfd1a68b5495ff9d1df85e5b012c3,Add Recycler.Handle.recycle() so that it's possible to recycle an object without an explicit reference to Recycler
d97f72d2c964c6dabeb30eba31112b9b40237e1e,"Fix a problem where DefaultChannelId prevents Netty 5 from running on Android

- Fixes #2109
- Use reflection to find the current PID"
1d577a8d9541a072862dee5c2c015ebff31fb24a,"Get the PID properly on Android

- Related: #2109"
574480e332df7af624f43f0377d86b2c17087d75,Rename HttpDataFactory.*datas to *data. Fixes #2094
4b0634b06a583e36fec0e6dac8eeddb9d473da85,Revive the deleted methods in HttpDataFactory and deprecate them
77d1f97b573a085b3290beb8a7396a00df9912ca,"Add an HTML5 encoder mode for HttpPostRequestEncoder

 - backported from 709be30442ff160eb7571bcf340da1e347f198bf by @igstan"
7e60877bc599074eae9c8ea5811753e9cb31fb29,"Merge the attribute map of ChannelHandlerContext into Channel

- Fixes #2136
- Also fixes some generics warnings"
45e70d993568f11a8c13459dc28265d333a8b19e,"Add ReferenceCounted.touch() / Add missing retain() overrides

- Fixes #2163
- Inspector warnings"
0235244e55414597bd2327da9767695cb8d46cbb,Touch a ReferenceCounted while it traverses across a pipeline
8837afddf85dab7cc09e210dae1ba6e0ec24c16f,"Enable a user specify an arbitrary information with ReferenceCounted.touch()

- Related: #2163
- Add ResourceLeakHint to allow a user to provide a meaningful information about the leak when touching it
- DefaultChannelHandlerContext now implements ResourceLeakHint to tell where the message is going.
- Cleaner resource leak report by excluding noisy stack trace elements"
51349352e29d0a400b0fa8a883912fba682b8ede,Fix a bug that CompositeByteBuf.touch() does nothing
5226f75cfaea3bdcc9a0128d6a3f35a9b3108649,Clean up HttpObjectAggregator
ac70dc454639f72dfbaf1f5da15f05fe72b9b0c7,Update the version to 4.1.0.Alpha1-SNAPSHOT
dea5c688fd956adab0b1d28c7dfccfc7dc020bae,Fix checkstyle
7e1db4feb7501d53aab80c80e4d079e3c3940b8b,"Deprecate CombinedChannelDuplexHandler in favor of ChannelHandlerAppender

- Fixes #2233"
c6711032894c12d81972b5858d8192b94b415e63,"Deprecate CombinedChannelDuplexHandler in favor of ChannelHandlerAppender

- Fixes #2233
- Add ChannelHandlerAppender"
abcb39b638c1fe55429dd3a8fcbca7d002efd225,"Do not use String.format() for log message generation

- It's slow."
0e4c80b95360e39cef89bb2a4eaa5d3adf89ffe9,Fix IllegalStateException caused by ChannelHandlerAppender
bb145c0057726901f21421b8c873c1db3d81860a,Fix wiki link
f0127ec991fe122c2f139b25abcace84a9c9c031,Do not warn about Unsafe in Android
fbd4385506230d8e9b37cb6c442cdd9659258c4f,"Determine the default allocator from system property

- Add ByteBufAllocator.DEFAULT
- The default allocator is now 'pooled'"
33197c7696bfee11a9366211394eeb10bd60b710,Update JMH to 0.3.2
99beb188c488296d0f6ab1d754b29e5a9d153d80,"Fix inefficient loop in QueryStringDecoder.decodeComponent()

- Fixes #2228
- There's no point of looping until the end of the component if at least one '%' or '+' is found."
a0e74ff98475ff8422cc1f111afbd243519d5f07,"Use thread local direct buffer for I/O when the current allocator is unpooled

- Allocating and deallocating a direct buffer for I/O is an expensive
  operation, so we have to at least have a pool of direct buffers if the
  current allocator is not pooled"
9330172f803f340df677c370464126cd6112204a,"Introduce a native transport for linux using epoll ET

This transport use JNI (C) to directly make use of epoll in Edge-Triggered mode for maximal performance on Linux. Beside this it also support using TCP_CORK and produce less GC then the NIO transport using JDK NIO.
It only builds on linux and skip the build if linux is not used. The transport produce a jar which contains all needed .so files for 32bit and 64 bit. The user only need to include the jar as dependency as usually
to make use of it and use the correct classes.

This includes also some cleanup of @trustin"
728417abd5a550e861a71455831fc1e884dff96d,Use correct writerIndex when read for channel
a0378af850963ec1961f6212ec32d770bd4f3586,Fix resource leaks in ByteArrayEncoderTest
5a369e60b1cdc29571cf18ba4568881d8d4c08eb,Correctly update the ByteBuffers position on write and writev
8f3c09ba6b8aa6d14d83047cc360189be5d44d94,[#2238] Fix bug which caused a SIGSEGV when calling remoteAddress() or localAddress()
91da8e228b9d9d43fd8e98b8d72faf575f670abc,"Overall clean-up in EpollSocketChannel

- Extract writev part from doWrite() for simplicity
- Clearer comments"
5612472ae6a3b534b7e8957df7a05902f36a4812,Fix an inspector warning
1c9c797e821636b9bef2f22bd6653840fd7c3c2f,Move marking ChannelPromise for writes uncancellable to addFlush for keep things simple
6bef9c8489028b9941b8c48dddaec2f76d5b0f53,Use optimized write and read calls if memoryAddress is present. Part of [#2239]
23374a185407ab013e4c5b685c6150e29d5e5fd9,Ensure native transport is included in all and tarball
eb143d6d6ecddb27aab4047531520225ee36abee,Correctly handle remove from epoll and EPOLLRDHUP. Also fix a bug with removing EPOLLIN and EPOLLOUT
b1f27d9aa816be49fd747dcc4b7b3dd9ae914eda,"HttpObjectDecoder.invalidChunk() should return LastHttpChunk

because the decoder will enter 'BAD_MESSAGE' state and will not produce any chunk since then."
396a81c811d6ae79e2edcca35adb0725472609ea,Ensure that the last bad chunk is LastHttpChunk
ddb6e3672cce60432f386e7f8e9022bf62a9c84e,"Fix a bug where HttpObjectAggregator doesn't always produce FullHttpMessage

- Fixes #2182
- Always convert an unfull invalid message to a full message"
dbb21988395f49ec9257a72b1044360c71fe5ad6,"Fix a regression which could lead to GenericFutureListeners never been notifed. Part of [#2186].

This regression was introduced by commit c97f2d2de00ad74835067cb6f5a62cd4651d1161"
91376263d722abf00e4024d158e5c897ab8dbabd,"Expose a callback in HttpObjectAggregator to handle oversized messages

- Related: #2211"
fcc41a62bdbe2a1477683aed41dc87daff683607,"Overall clean-up of HttpObjectAggregator / Handle oversized response differently

- Related: #2211"
e278b57489e61e5dd20549e6bff1bafda2c88e85,Added a test for oversized HTTP responses
2c4aff13c7ad4319ef172a1d0b4d756ca9da152e,"Add an operation that resets the state of HttpObjectDecoder

Motivation:

Currently, it is impossible to give a user the full control over what to do in response to the request with 'Expect: 100-continue' header.  Currently, a user have to do one of the following:

- Accept the request and respond with 100 Continue, or
- Send the reject response and close the connection.

.. which means it is impossible to send the reject response and keep the connection alive so that the client sends additional requests.

Modification:

Added a public method called 'reset()' to HttpObjectDecoder so that a user can reset the state of the decoder easily.  Once called, the decoder will assume the next input will be the beginning of a new request.

HttpObjectAggregator now calls `reset()`right after calling 'handleOversizedMessage()' so that the decoder can continue to decode the subsequent request even after the request with 'Expect: 100-continue' header is rejected.

Added relevant unit tests / Minor clean-up

Result:

This commit completes the fix of #2211"
874a66c8fb26f51691594f7307dcde8334295cb1,Fix a memory leak in HttpObjectAggregatorTest
738d3f77b9ae83982e3319c843291d6469d32280,Fix another leak in HttpObjectAggregatorTest by removing redundant code
b02531f0aa62850bc796f59f05b20e4d673ee920,SPDY: remove SPDY/3 support
1884a5697c0c7957c534711a8f8a7fb0be9b7369,"Avoid unnecessary IllegalStateException in ChunkedWriteHandler

Motivation:
ChunkedWriteHandler can sometimes fail to write the last chunk of a ChunkedInput due to an I/O error.  Subsequently, the ChunkedInput's associated promise is marked as failure and the connection is closed.  When the connection is closed, ChunkedWriteHandler attempts to clean up its message queue and to mark their promises as success or failure.  However, because the promise of the ChunkedInput, which was consumed completely yet failed to be written, is already marked as failure, the attempt to mark it as success fails, leading a WARN level log.

Modification:
Use trySuccess() instead of setSuccess() so that the attempt to mark a ChunkedInput as success does not raise an exception even if the promise is already done.

Result:
Fixes #2249"
78db65d0fb4744b26f6f47d48c58a95413890de2,"[#2254] Fix regression in handling autoRead and Channel.read()

This regression was introduced by e0b39159657c9eb711047bc32367537c4870d467"
47fab2bfe82032a9558edde1bb3e1efd2ac8ede5,"Directly use memory addresses for gathering writes to reduce gc pressure. Part of [#2239]

This also does factor out some logic of ChannelOutboundBuffer. Mainly we not need nioBuffers() for many
transports and also not need to copy from heap to direct buffer. So this functionality was moved to
NioSocketChannelOutboundBuffer. Also introduce a EpollChannelOutboundBuffer which makes use of
memory addresses for all the writes to reduce GC pressure"
b32316b33cad851a8e22b5bd4cbe1de2485f1416,"[#2254] Correctly handle Channel.read() and ChannelHandlerContext.read()

This includes also when it is called from channelRead(...) and channelReadComplete(...) methods."
8c68c5a3ae4d3d907528b64ec4b3daa5512d4be6,Fix check to clear READ_OP and EPOLLIN. Part of [#2254]
cc4198971e08cc28c662589e90ed1a10a5be9ab4,Apply receive timeout to commPort when using RxtxChannel. Part of [#1390]
7d62594cc62d40b6a0a679c4036df3f250dabff1,Upgrade JMH to 0.4.1 and make use of @Params.
cd6b5def8d5d25d4215bb12654bdd2fcbec0be6f,"Always upstream full memcache messages.

This changeset is related to #2182, which exposes the failure in
the http codec, but the memcache codec works very similar. In addition,
better failure handling in the decoder has been added."
24fc1b9b3781434bfc4a7142a292e96993d1a72e,"Fix a bug where HttpObjectDecoder generates two LastHttpContent consecutively

Motivation:
When an HttpResponseDecoder decodes an invalid chunk, a LastHttpContent instance is produced and the decoder enters the 'BAD_MESSAGE' state, which is not supposed to produce a message any further.  However, because HttpObjectDecoder.invalidChunk() did not clear this.message out to null, decodeLast() will produce another LastHttpContent message on a certain situation.

Modification:
Do not forget to null out HttpObjectDecoder.message in invalidChunk(), and add a test case for it.

Result:
No more consecutive LastHttpContent messages produced by HttpObjectDecoder."
ac5592fc057b56c343c7c4327b7a32ae5c930cda,Fix checkstyle
d3ffa1b02b2ba112546070c16d8786f514d6be51,"[#1259] Add optimized queue for SCMP pattern and use it in NIO and native transport

This queue also produces less GC then CLQ when make use of OneTimeTask"
fcc6b544a4cd1069ee39fdfb0d9b0bd97197b186,Fix #2275 %s WebSocket version %s server handshake
9fb235459eba26a531246b8f746735bcc5fa5a7b,Add ZLIB_OR_NONE support to JdkZlibDecoder [#2016]
dd38c8fa78c21a1b1806cd0441458c5780ddcff7,Added asserts to make sure ChannelHandlers are removed from the pipeline
1f5b74762b3dd7a7421da96b3b2e6c73c77a261c,"Correct ConcurrentHashMapV8 bitwise arithmetic

Previously ConcurrentHashMapV8 evaulated ((x | 1) == 0), an expression
that always returned false.  This commit brings Netty closer to the
Java 8 implementation."
156f311ee998bf859e93118fff672f000902fa6a,"Added a secure WebSocket client example

Merged WebSocketClient and WebSocketSslClient

Add private constructors to fix checkstyle errors.

More checkstyle madness.

made WebSocketClientRunner final"
918dd54a721458f46888ef8beb2c8f9b2911dee0,[#2261] Correct javadoc of ChunkedInput
8afc2cd3787b72ea141b137f25a1aab4128cd8ff,[#2252] Fix bug where AppendableCharSequence private constructor does not set correct position
95ff172c8265cb14f7d2bad264de0e4f2e9e4fae,"Corrected inconsistencies in the Javadoc.

Port of 80030493b9f7824c02dc88260c2579afc0aed8bc"
37ee6ef79a614faea77bca03306f1c4b1e1aad12,"[codec-memcache] Simplify object hierachy and remove Headers.

This changeset removes the separate message headers and merges the
field directly into the messages. This greatly simplifies the
object hierachy and also saves header allocations in the pipeline."
7c4ad004f6e1386012c93663767de62489562ee6,Ensure the HttpResponseEncoder is always placed before the HttpObjectAggregator. Part of [#2219]
b0f259b7798a702816802284265db2137fd7da3f,"Add CONTRIBUTING.md

Motivation:
We often receive a bug report or a pull request which do not give us
enough information.  If CONTRIBUTING.md exists in the repository, Github
will display some notice in the beginning of the issue submission form,
which might increase the overall quality of the bug reports and pull
requests.

Modification:
Write CONTRIBUTING.md

Result:
Potentially higher-quality bug reports and pull requests"
05874ad97f6a3f3a953529ea92b4702fc50f4c89,Update CONTRIBUTING.md
d89bfc593e86008d0440bbcf1a69fbc7774adb8b,Fix buffer leak in test which was introduced while implement ZLIB_OR_NONE support. Related to [#2269]
01daefe9255ab08b4f30e0bbab69df86ab70610d,Add content length and date headers to CORS response
f62012cba5376f2c199bd4be6030ee1147ae016c,"[#2280] Correct logic in Native.finishConnect. Fix use of optval parameter in c getOption function. In epoll event loop, check that channel is open before processing event."
99995876dc2f2876d510141a065467c9dac236ed,Fix buffer leak in test which was introduced while implement ZLIB_OR_NONE support. Related to [#2269]
4f069e5c36e56e484e87db16cbc47e656265ee7c,added support for empty query parameters
d63c9f2bdb82c7d686a29a865d37ab3a5455d488,[#2297] Correctly close all registered Channels on EpollEventLoop.closeAll()
386cc2cb733e4bf23ef4024e954aa2d07d942510,ipfilter implementation for netty 4/5 [#2129]
722f6c5e1a626ddfa7d3477fc3d6a76b48665216,Use bitwise operations to choose next EventExecutor if number of EventExecutors is power of two
e8bdaff80f4f69358046a78d79dba98453b14189,"Move the pull request guide to the developer guide

Motivation:

CONTRIBUTING.md is useful only because it lets Github show a user the
link to it so the user can check what information we need before
submitting a bug report.  However, Github does not do the same for a
pull request submission form, and thus there's no reason to keep the
information about how to submit a good pull request in CONTRIBUTING.md.

Modification:

Replace the section about issuing a pull request with the link to the
official developer guide.

Result:

CONTRIBUTING.md is easier to maintain."
cf275237c95a35161783d06680ebcc1862505add,"Overall clean-up of ipfilter package

Motivation:

Recently merged ipfilter package has the following problems:
* AbstractIpFilterHandler could be improved to support any SocketAddress types rather than only InetSocketAddress.
* AbstractIpFilterHandler can be removed immediately after decision is made rather than keeping the outcome of the decision as an attribute.
* AbstractIpFilterHandler doesn't have a hook for the accepted addresses.
* The hook method (reject()) needs to be named in line with other handler methods (i.e. channelRejected())
* IpFilterRuleHandler should allow accepting zero rules - it's particularly useful for machine-configured setup (i.e. specifying zero rules disables ipfilter).
* IpFilterRuleType.ALLOW/DENY should be ACCEPT/REJECT for consistency.

Modifications:

* AbstractIpFilterHandler has been renamed to AbstractRemoteAddressFilter and now uses type parameter.
* Added channelAccepted() and renamed reject() to channelRejected()
* Added ChannelHandlerContext as a parameter of accept() so that accept() can add a listener to the closeFuture() of the channel. This way, UniqueIpFilter continue working even if we remove the filtering handler early.
* Various renames
  * IpFilterRuleHandler -> RuleBasedIpFilter
  * UniqueIpFilterHandler -> UniqueIpFilter

Result:

* Much cleaner API with more extensibility"
1e4c22453c2157d7aa7aa70a08acd024da387023,"Do not use finally to propagate events in AbstractRemoteAddressFilter

Motivation:

We don't really need to propagate an event when handling the event fails.

Modifications:

Do not use finally block in AbstractRemoteAddressFilter

Result:

AbstractRemoteaddressFilter does not forward an event in case of failure."
e57cf9d201fc2a1a6cdb8585364babf34e2fe6ad,"Add capacity limit to Recycler / Optimize when assertion is off

Motivation:

- As reported recently [1], Recycler's thread-local object pool has unbounded capacity which is a potential problem.
- It accesses a hash table on each push and pop for debugging purposes.  We don't really need it besides debugging Netty itself.

Modifications:

- Introduced the maxCapacity constructor parameter to Recycler.  The default default maxCapacity is retrieved from the system property whose default is 256K, which should be plenty for most cases.
- Recycler.Stack.map is now created and accessed only when assertion is enabled for Recycler.

Result:

- Recycler does not grow infinitely anymore.
- If assertion is disabled, Recycler should be much faster.

[1] https://github.com/netty/netty/issues/1841"
adcc2d4b4b325d5b405c614a14cd659084cb9cbc,"Remove condition in ChannelHandlerAdapter.isSharable() by caching the result of the annotation lookup.

Motivation:
Remove the synchronization bottleneck and so speed up things

Modifications:
Introduce a ThreadLocal cache that holds mappings between classes of ChannelHandlerAdapater implementations and the result of checking if the @Sharable annotation is present.
This way we only will need to do the real check one time and server the other calls via the cache. A ThreadLocal and WeakHashMap combo is used to implement the cache
as this way we can minimize the conditions while still be sure we not leak class instances in containers.

Result:
Less conditions during adding ChannelHandlerAdapter to the ChannelPipeline"
50e95383a30d88bf6b454832c97755a49f4e9e61,Fix checkstyle errors introduced by f0d1bbd63ec910b9c5bccc925bdf0b0f55db1f9c
69d3cf5539587554af76e100b75b9976b16b7941,"[#2308] Use SelectorProvider.open*() to open NIO channels and so remove condition when create new NIO channels.

Motivation:
At the moment we use SocketChannel.open(), ServerSocketChannel.open() and DatagramSocketChannel.open(...) within the constructor of our
NIO channels. This introduces a bottleneck if you create a lot of connections as these calls delegate to SelectorProvider.provider() which
uses synchronized internal. This change removed the bottleneck.

Modifications:
Obtain a static instance of the SelectorProvider and use SelectorProvider.openSocketChannel(), SelectorProvider.openServerSocketChannel() and
SelectorProvider.openDatagramChannel(). This eliminates the bottleneck as SelectorProvider.provider() is not called on every channel creation.

Result:
Less conditions when create new channels."
195e4b1fa694e6dbf649407b9dcb54712b2633ba,"Remove sniffer whitelist entries for NIO.2

Motivation:
Cleanup pom.xml file.

Modifications:
Remove sniffer whitelist entries for NIO.2 as we not include a NIO.2 bases transport anymore.

Result:
Less entries in pom.xml"
16a85e6cca46cfdcfe07c9e76a3b935c72c5ec1d,"[#2307] Remove synchronized bottleneck in SingleThreadEventExecutor.execute(...)

Motivation:
Remove the synchronization bottleneck in startThread() which is called by each execute(..) call from outside the EventLoop.

Modifications:
Replace the synchronized block with the use of AtomicInteger and compareAndSet loops.

Result:
Less conditions during SingleThreadEventExecutor.execute(...)"
1334d34e9dc750841a0fd8a919fcbcf6479cd5eb,"Fix limit computation of NIO ByteBuffers obtained via ReadOnlyByteBufferBuf.nioBuffer

Motivation:

When starting with a read-only NIO buffer, wrapping it in a ByteBuf,
and then later retrieving a re-wrapped NIO buffer the limit was getting
too short.

Modifications:

Changed ReadOnlyByteBufferBuf.nioBuffer(int,int) to compute the
limit in the same manner as the internalNioBuffer method.

Result:

Round-trip conversion from NIO to ByteBuf to NIO will work reliably."
397f81f253ee3fede182b2b3711cf933ca698efa,"[#2305] Fix issue related to decoding post request raized an exception due to a split of information by chunk not correctly taken into account by the decoder

Motivation:

If the last item analyzed in a previous received HttpChunk/HttpContent was a part of an attribute's name, the read index was not set to the new right place and therefore raizing an exception in some case (since the ""new"" name analyzed is empty, which is not allowed so the exception).

What appears there is that the read index should be reset to the last valid position encountered whatever the case. Currently it was set when only when there is an attribute not already finished (name is ok, but content is possibly not).

Therefore the issue is that elements could be rescanned multiple times (including completed elements) and moreover some bad decoding can occur such as when in a middle of an attribute's name.

Modifications:

To fix this issue, since ""firstpos"" contains the last ""valid"" read index of the decoding (when finding a '&', '=', 'CR/LF'), we should add the setting of the read index for the following cases:

'lastchunk' encountered, therefore finishing the current buffer
any other cases than current attribute is not finished (name not found yet in particular)
So adding for this 2 cases:

undecodedChunk.readerIndex(firstpos);

Result:

Now the decoding is done once, content is added from chunk/content to chunk/content, name is decoded correctly even if in the middle of 2 chunks/contents.
A Junit test code was added: testChunkCorrect that should not raized any exception."
4f5f4cdc9df6e8c3bf65d3f72ef7cf5a8404fdd4,"[#2262] Fix NPE triggered by unresolveable InetSocketAddress in epoll transport

Motivation:
At the moment when an unresolvable InetSocketAddress is passed into the epoll transport a NPE is thrown

Modifications:
Add check in place which will throw an UnknownHostException if an InetSocketAddress could not been resolved.

Result:
Proper handling of unresolvable InetSocketAddresses"
9a11c4346353a560c01947d08c4445804aa2b6c4,"[#2323] Make it clear a Channel must be closed to release all resources

Motivation:
Ensure the user know the Channel must be closed to release resources like filehandles.

Modifications:
Add some extra javadoc.

Result:
More clear documentation"
afcc7fb7ccaac8908a68e9f725212aea858716e5,"[#2326] Add constructor to NioServerSocketChannel which accepts a ServerSocketChannel

Motivation:
Allow the user to create a NioServerSocketChannel from an existing ServerSocketChannel.

Modifications:
Add an extra constructor

Result:
Now the user is be able to create a NioServerSocketChannel from an existing ServerSocketChannel, like he can do with all the other Nio*Channel implemntations."
218bb8b03410bb0af3b7ee8a9cb76c5ce693aad6,"Replace usage of UnknownHostException with UnresolveableAddressException. Part of [#2262]

Motivation:
We better use UnresolveableAddressException as NIO does the same.

Modifications:
Replace usage of UnknownHostException with UnresolveableAddressException

Result:
epoll transport and nio transport behave the same way"
2de65e25e90dec5c0a28b2d57e6c6d15d5a49087,"Set timeout for SocketSslEchoTest

Motivation:

We are seeing EpollSocketSslEchoTest does not finish itself while its I/O thread is busy.  Jenkins should have terminated them when the global build timeout reaches, but Jenkins seems to fail to do so.  What's more interesting is that Jenkins will start another job before the EpollSocketSslEchoTest is terminated, and Linux starts to oom-kill them, impacting the uptime of the CI service.

Modifications:

- Set timeout for all test cases in SocketSslEchoTest so that all SSL tests terminate themselves when they take too long.
- Fix a bug where the epoll testsuite uses non-daemon threads which can potentially prevent JVM from quitting.
- (Cleanup) Separate boss group and worker group just like we do for NIO/OIO transport testsuite.

Result:

Potentially more stable CI machine."
1a72bd09d532a5b9ec3432bdd4d487702d70f937,"Fix 'incompatible event loop' regression

Motivation:

Previous commit (2de65e25e90dec5c0a28b2d57e6c6d15d5a49087) introduced a regression that makes the epoll testsuite fail with an 'incompatible event loop' error.

Modifications:

Use the correct event loop type.

Result:

Build doesn't fail anymore."
bd9ad4b532c3e8686be1c423eda099a0887199fc,"Perform cross-tests between NIO and epoll transport

Motivation:

The epoll testsuite tests the epoll transport only against itself (i.e. epoll x epoll only).  We should test the epoll transport also against the well-tested NIO transport, too.

Modifications:

- Make SocketTestPermutation extensible and reusable so that the epoll testsuite can take advantage of it.
- Rename EpollTestUtils to EpollSocketTestPermutation and make it extend SocketTestPermutation.
- Overall clean-up of SocketTestPermutation
  - Use Arrays.asList() for simplicity
  - Add combo() method to remove code duplication

Result:

The epoll transport is now also tested against the NIO transport.  SocketTestPermutation got cleaner."
c87db9b17ac258f398d69a40832b2f45439e7f99,"Reduce SO_TIMEOUT of testsuite so it finishes sooner

Motivation:

Testing the OIO transport takes longer time than other transports because it has to wait for SO_TIMEOUT if there is nothing to read.  In production, it's not a good idea to decrease this value (1000ms) because it will result in so many SocketTimeoutExceptions internally, but doing so in the testsuite should be fine.

Modifications:

Reduce the default SO_TIMEOUT of OIO channels to 10 ms.

Result:

Our testsuite finishes sooner."
b79f0cb1d3e9b689edd5ef7054f1fe44b4bfa667,"Add -verbose:gc option for test runs

Motivation:

While investigating the recent CI machine crashes, I observed that the
JVM processes spawned by surefire sometimes take up to 1 GiB RAM.
Consuming large amount of memory isn't really a problem, but we need to
make sure no GC trashing is occuring during the tests.

Modifications:

Add -verbose:gc option to the test JVM arguments

Result:

We can determine if there is any GC anomalies going on in our CI
machine."
1bce46dbb37e79c5d5793646064f029cdac0e5ef,"Bit tricks to check for and calculate power of two.

Motivation:
I was studying the code and thought this was simpler and easier to
understand.

Modifications:
Replaced the for loop and if conditions, with a simple implementation.

Result:
Code is easier to understand."
985656314450cba9908765ca8373ed296ee1c6a8,"Replace usage of System.currentTimeMillis() with System.nanoTime()

Motivation:

Currently we use System.currentTimeMillis() in our timeout handlers this is bad
for various reasons like when the clock adjusts etc.

Modifications:

Replace System.currentTimeMillis() with System.nanoTime()

Result:

More robust timeout handling"
9fe9710315bb89b015a3de0fbf4c1019a10e5c85,"Rename ""io.netty.recycler.maxCapacity.default"" to ""io.netty.recycler.maxCapacity""

Motivation:

'io.netty.recycler.maxCapacity.default' is the only property for recycler's default maximum capacity, so having the 'default' suffix only increases the length of the property name.

Modifications:

Rename ""io.netty.recycler.maxCapacity.default"" to ""io.netty.recycler.maxCapacity""

Result:

Shorter system property name. The future addition of system properties, such as io.netty.recycler.maxCapacity.outboundBuffer, are not confusing either."
19422972e3f6515bfc45b3a9950d627256fcabee,"Fix and simplify freeing a direct buffer / Fix Android support

Motivation:

6e8ba291cfcb325fe4397a8e7db43579070e7a07 introduced a regression in Android because Android does not have sun.nio.ch.DirectBuffer (see #2330.)  I also found PlatformDependent0.freeDirectBuffer() and freeDirectBufferUnsafe() are pretty much same after the commit and the unsafe version should be removed.

Modifications:

- Do not use the pooled allocator in Android because it's too resource hungry for Androids.
- Merge PlatformDependent0.freeDirectBuffer() and freeDirectBufferUnsafe() into one method.
- Make the Unsafe unavailable when sun.nio.ch.DirectBuffer is unavailable.  We could keep the Unsafe available and handle the sun.nio.ch.DirectBuffer case separately, but I don't want to complicate our code just because of that.  All supported JDK versions have sun.nio.ch.DirectBuffer if the Unsafe is available.

Result:

Simpler code. Fixes Android support (#2330)"
8429ecfcc410d22402a6b7ea2b409908190d6428,"Implement Thread caches for pooled buffers to minimize conditions. This fixes [#2264] and [#808].

Motivation:
Remove the synchronization bottleneck in PoolArena and so speed up things

Modifications:

This implementation uses kind of the same technics as outlined in the jemalloc paper and jemalloc
blogpost https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919.

At the moment we only cache for ""known"" Threads (that powers EventExecutors) and not for others to keep the overhead
minimal when need to free up unused buffers in the cache and free up cached buffers once the Thread completes. Here
we use multi-level caches for tiny, small and normal allocations. Huge allocations are not cached at all to keep the
memory usage at a sane level. All the different cache configurations can be adjusted via system properties or the constructor
directly where it makes sense.

Result:
Less conditions as most allocations can be served by the cache itself"
ff179c343038fea5df3c989386d3422c60f2eb34,"Reduce the time taken by NetUtil and DefaultChannelId class initialization

Motivation:

As reported in #2331, some query operations in NetworkInterface takes much longer time than we expected.  For example, specifying -Djava.net.preferIPv4Stack=true option in Window increases the execution time by more than 4 times.  Some Windows systems have more than 20 network interfaces, and this problem gets bigger as the number of unused (virtual) NICs increases.

Modification:

Use NetworkInterface.getInetAddresses() wherever possible.
Before iterating over all NICs reported by NetworkInterface, filter the NICs without proper InetAddresses.  This reduces the number of candidates quite a lot.
NetUtil does not query hardware address of NIC in the first place but uses InetAddress.isLoopbackAddress().
Do not call unnecessary query operations on NetworkInterface.  Just get hardware address and compare.

Result:

Significantly reduced class initialization time, which should fix #2331."
3613d2d59ea9486c5d9aaaf4499f02e85dda8c8b,"Prefer the NIC with global IP address when getting the default machine ID

Motivation:

When there are two MAC addresses which are good enough, we can choose the one with better IP address rather than just choosing the first appeared one.

Modification:

Replace isBetterAddress() with compareAddresses() to make it return if both addresses are in the same preference level.
Add compareAddresses() which compare InetAddresses and use it when compareAddress(byte[], byte[]) returns 0 (same preference)

Result:

More correct primary MAC address detection"
b5c97bcc8215033a38b5c77fba2614bf72523b5a,"Use the length of MAC address as the last property to compare to get the best MAC address

Motivation:

Some operating systems like Windows 7 uses a valid globally unique EUI-64 MAC address for a virtual device (e.g. 00:00:00:00:00:00:00:E0), and because it's usually longer than the legit MAC-48 address, we should not use the length of MAC address when two MAC addresses are of the same quality.  Instead, we should compare the INET address of the NICs before comparing the length of the MAC addresses.

Modification:

Compare the length of MAC addresses as a last resort.

Result:

Correct MAC address detection in Windows with IPv6 enabled."
2215ed0a353f8a63b8962a911f507d2dbb0969b5,"Use SecureRandom.generateSeed() to generate ThreadLocalRandom's initialSeedUniquifier

Motivation:

Previously, we used SecureRandom.nextLong() to generate the initialSeedUniquifier.  This required more entrophy than necessary because it has to 1) generate the seed of SecureRandom first and then 2) generate a random long integer.  Instead, we can use generateSeed() to skip the step (2)

Modifications:

Use generateSeed() instead of nextLong()

Result:

ThreadLocalRandom requires less amount of entrphy to start up"
74f418bace1bb905ddeff3256c0553d21f884f98,"Adding support for specifying preflight response headers.

Motivation:

An intermediary like a load balancer might require that a Cross Origin
Resource Sharing (CORS) preflight request have certain headers set.
As a concrete example the Elastic Load Balancer (ELB) requires the
'Date' and 'Content-Length' header to be set or it will fail with a 502
error code.

This works is an enhancement of https://github.com/netty/netty/pull/2290

Modifications:

CorsConfig has been extended to make additional HTTP response headers
configurable for preflight responses. Since some headers, like the
'Date' header need to be generated each time, m0wfo suggested using a
Callable.

Result:

By default, the 'Date' and 'Content-Lenght' headers will be sent in a
preflight response. This can be overriden and users can specify
any headers that might be required by different intermediaries."
110878fe2c86cf07100dfbb3e97701e94107c915,"Fixing CorsConfigTest failure under Java 8.

Motivation:
When running the build with Java 8 the following error occurred:

java: reference to preflightResponseHeader is ambiguous
  both method
  <T>preflightResponseHeader(java.lang.CharSequence,java.lang.Iterable<T>)
  in io.netty.handler.codec.http.cors.CorsConfig.Builder and method
  <T>preflightResponseHeader(java.lang.String,java.util.concurrent.Callable<T>)
  in io.netty.handler.codec.http.cors.CorsConfig.Builder match

The offending class was CorsConfigTest and its shouldThrowIfValueIsNull
which contained the following line:
withOrigin(""*"").preflightResponseHeader(""HeaderName"", null).build();

Modifications:
Updated the offending method with to supply a type, and object array, to
avoid the error.

Result:
After this I was able to build with Java 7 and Java 8"
6bce61bf1b9008efc543c3d8a88956718c087141,"[#2234] Use QueryStringDecoder.decodeComponent to decode url-encoded data instead of Java's URLDecoder.

Motivation:
Previously, we used URLDecoder.decode(...) to decode url-encoded data. This generates a lot of garbage and takes a considerable amount of time.

Modifications:
Replace URLDecoder.decode(...) with QueryStringDecoder.decodeComponent(...)

Result:
Less garbage to GC and faster decode processing."
32ccdcdb189996211bff873b8cf2cd42f66f5a5e,"Make sure the local / remote InetSocketAddres can be obtained. Part of [#2262]

Motivation:
Make sure the remote/local InetSocketAddress can be obtained correctly

Modifications:
Set the remote/local InetSocketAddress after a bind/connect operation was performed

Result:
It is possible to still access the informations even after the fd became invalid. This mirror the behaviour of NIO."
ac5e838398ee57229bd972a1813b29a4aaf11fb1,"Allow specifying `SelectorProvider` when constructing an NIO channel #2311

Motivation:

At the moment we use the system-wide default selector provider for this invocation of the Java virtual machine when constructing a new NIO channel, which makes using an alternative SelectorProvider practically useless.
This change allows user specify his/her preferred SelectorProvider.

Modifications:

Add SelectorProvider as a param for current `private static *Channel newSocket` method of NioSocketChannel, NioServerSocketChannel and NioDatagramChannel.
Change default constructors of NioSocketChannel, NioServerSocketChannel and NioDatagramChannel to use DEFAULT_SELECTOR_PROVIDER when calling newSocket(SelectorProvider).
Add new constructors for NioSocketChannel, NioServerSocketChannel and NioDatagramChannel which allow user specify his/her preferred SelectorProvider.

Result:

Now users can specify his/her preferred SelectorProvider when constructing an NIO channel."
007694b963ec136b1be6f791e8ffbd0c93813222,"Implement EventExecutor.parent() in AbstractEventExecutor

Motivation:

EventExecutor.parent() and EventLoop.parent() almost always return a constant parent executor.  There's not much reason to let it implemented in subclasses.

Modifications:

- Implement AbstractEventExecutor.parent() with an additional contructor
- Add AbstractEventLoop so that subclasses extend AbstractEventLoop, which implements parent() appropriately
- Remove redundant parent() implementations in the subclasses
- Fix inspector warnings

Result:

Less duplication."
4332821e6f501c4b721314846e8f00d8ab82de69,"Use common non-magic number for shutdown timeout

Motivation:

AbstractEventExecutor and AbstractEventExecutorGroup have hard-coded magic timeout numbers.  They should have the same timeout numbers, but it's easy to break that rule because they are hard-coded in each place.

Modifications:

Add package private constants to AbstractEventExecutor and let AbstractEventExecutorGroup use them.

Result:

Single timeout change affects two classes."
924113ce8c48c043fc666e71f50ae0fb1c82e41b,"Make DefaultEventExecutor usable by users.

Motivation:

There's no reason to keep our users from using DefaultEventExecutor directly.  It should be actually very useful to them.

Modifications:

Make DefaultEventExecutor public and add useful public constructors.

Result:

DefaultEventExecutor got usable by anyone, yielding more value as a generic library."
1e3b7d8273c0b4f651ead36fd7b01b397056e89e,"Replace LocalEventLoopGroup with DefaultEventLoopGroup

Motivation:

LocalEventLoopGroup and LocalEventLoop are not really special for LocalChannels.  It can be used for other channel implementations as long as they don't require special handling.

Modifications:

- Add DefaultEventLoopGroup and DefaultEventLoop
- Deprecate LocalEventLoopGroup and make it extend DefaultEventLoopGroup
- Add DefaultEventLoop and remove LocalEventLoop
- Fix inspector warnings

Result:

- Better class names."
7dc63ccd95f362a17c777765c08df7d45114169f,"Add EventExecutor.children() in favor of iterator()

Motivation:

EventExecutor.iterator() is fixed to return Iterator<EventExecutor> and there's no way to change that as long as we don't extend Iterable.  However, a user should have a way to cast the returned set of executors painlessly.  Currently, it is only possible with an explicit cast like (Iterator<NioEventLoop>).

Modifications:

Instead, I added a new method called 'children()' which returns an immutable collection of child executors whose method signature looks like the following:

    <E extends EventExecutor> Set<E> children();

Result:

A user can now do this:

    Set<NioEventLoop> loops = group.children();
    for (NioEventLoop l: loops) { ... }

Unfortunately, this is not possible:

    for (NioEventLoop l: group.children()) { ... }

However, it's still a gain that a user doesn't need to down-cast explicitly and to add the '@SuppressWarnings` annotation."
aeb6ba56844513760e6b586965c359691db6c541,"Update the Javadoc of ChannelHandler and ChannelHandlerContext

Motivation:

It's out of date and it has broken links, etc.

Modifications:

Backport the fixes from master (132af3a485015ff912bd567a47881814d2ce1828)

Result:

Better Javadoc"
6d4c4d9e4b70bf34ddf72a39abe84343f96e2d63,"Correct the return type of MultithreadEventLoopGroup.newChild()

Motivation:

MultithreadEventLoopGroup.newChild() does not override MultithreadEventExecutorGroup.newChild() which returns EventExecutor.  MultithreadEventLoopGroup.newChild() should never return an EventExecutor, so this is incorrect.

Modifications:

Override MultithreadEventLoopGroup.newChild() so that it returns EventLoop

Result:

Correct API"
844362a947e7fea7e8df65636749708f9b068c81,"User-definable thread model via ChannelHandlerInvoker

Motivation:

While the default thread model provided by Netty is reasonable enough for most applications, some users might have a special requirement for the thread model.  Here are a few examples:

- A user might want to invoke handlers from the caller thread directly, assuming that his or her application is completely asynchronous and does not make any invocation from non-I/O thread.  In this case, the default invoker implementation will only add the overhead of checking if the current thread is an I/O thread or not.
- A user might want to invoke handlers from different threads depending on the type of events flexibly.

Modifications:

- Backport 132af3a485015ff912bd567a47881814d2ce1828 which is a fix for #1912
  - Add a new interface called 'ChannelHandlerInvoker' that performs the invocation of event handler methods.
  - Add pipeline manipulation methods that accept ChannelHandlerInvoker
- The differences from the original commit:
  - Separated the irrelevant changes out
  - Channel.eventLoop is null until the registration is complete in this branch, so Channel.Unsafe.invoker() doesn't work before registration.
  - Deregistration is not gone in this branch, so the methods related with deregistration were added to ChannelHandlerInvoker"
2a4999b6b851645109abb0918236afc78548f771,"[#2339] Reduce memory usage in ProtobufVarint32LengthFieldPrepender

Motivation:

Reduce memory usage in ProtobufVarint32LengthFieldPrepender.

Modifications:

Explicit set the buffer size that is needed for the header (between 1 and 5 bytes).

Result:

Less memory usage in ProtobufVarint32LengthFieldPrepender."
cf9c1f946add66c079096338dfe41beea14ceadc,"Deleting redundant needsFlush boolean

Motivation:

In ChunkedWriteHandler, there is a redundant variable that servers
no purpose. It implies that under some conditions you might not want
to flush.

Modifications:

Removed the variable and the if condition that read it. The boolean
was always true so just removing the if statement was fine.

Result:

Slightly less misleading code."
4fc9afa1023935b674f624933fc2510702d1c2b5,"Adding origins whitelist support for CORS

Motivation:
Currently the CORS support only handles a single origin, or a wildcard
origin. This task should enhance Netty's CORS support to allow multiple
origins to be specified. Just being allowed to specify one origin is
particulary limiting when a site support both http and https for
example.

Modifications:
- Updated CorsConfig and its Builder to accept multiple origins.

Result:
Users are now able to configure multiple origins for CORS.

[https://github.com/netty/netty/issues/2346]"
772a9d261094463d35df86f2c9e1548e4ba96ff0,"[#2349] Correctly handle cancelled ChannelPromise in DefaultChannelHandlerContext

Motivation:
At the moment an IllegalArgumentException will be thrown if a ChannelPromise is cancelled while propagate through the ChannelPipeline. This is not correct, we should just stop to propagate it as it is valid to cancel at any time.

Modifications:
Stop propagate the operation through the ChannelPipeline once a ChannelPromise is cancelled.

Result:
No more IllegalArgumentException when cancel a ChannelPromise while moving through the ChannelPipeline."
3eec26b0a24e07601cb222a4d2b17442bd338fc2,"[#2358] SslHandler.safeClose(...) may not notify the ChannelPromise

Motivation:
In SslHandler.safeClose(...) we attach a ChannelFutureListener to the flushFuture and will notify the ChannelPromise which was used for close(...) in it. The problem here is that we only call ChannelHandlerContext.close(ChannelPromise) if Channel.isActive() is true and otherwise not notify it at all. We should just call ChannelHandlerContext.close(ChannelPromise) in all cases.

Modifications:
Always call ChannelHandlerContext.close(ChannelPromise) in the ChannelFutureListeiner

Result:
ChannelPromise used for close the Channel is notified in all cases"
2fa79b2d5d7f99dfba48be605dac4ab9a3e7d90e,"[#2361] Native.epollCreate(...) fails on systems using a kernel < 2.6.27 / glibc < 2.9

Motivation:
Native.epollCreate(...) fails on systems using a kernel < 2.6.27 / glibc < 2.9 because it uses epoll_create1(...) without checking if it is present

Modifications:
Check if epoll_create1(...) exists abd if not fall back to use epoll_create(...)

Result:
Works even on systems with kernel < 2.6.27 / glibc < 2.9"
fdb1db90c47f5a793d4740e5f6fd2d96045cd2aa,"[#2362] AbstractChannel.AbstractUnsafe.write(...) is slow

Motivation:
At the moment we do a Channel.isActive() check in every AbstractChannel.AbstractUnsafe.write(...) call which gives quite some overhead as shown in the profiler when you write fast enough. We can eliminate the check and do something more smart here.

Modifications:
Remove the isActive() check and just check if the ChannelOutboundBuffer was set to null before, which means the Channel was closed. The rest will be handled in flush0() anyway.

Result:
Less overhead when doing many write calls"
791c38befe1885cad549460a4de6d9d0b5d5cc68,"[#2359] EpollSocketChannel.remoteAddress0() is always null on accepted EpollSocketChannels

Motivation:
EpollSocketChannel.remoteAddress0() is always null on accepted EpollSocketChannels as we not set it excplicit.

Modifications:
Correctly retrieve the local and remote address when accept new channel and store it

Result:
EpollSocketchannel.remoteAddress0() and EpollSocketChannel.localAddress0() return correct addresses"
1087160fa7fa024991d8944dfe2823429773bc5c,"[#2363] SelectedSelectionKeySet may hold strong reference to SelectionKey after Channel is closed

Motivation:
Because we not null out the array entry in the SelectionKey[] which is produced by SelectedSelectionKeySet.flip() we may end up with a few SelectionKeyreferences still hanging around here even after the Channel was closed. As these entries may be present at the end of the SelectionKey[] which is never updated for a long time as not enough SelectionKeys are ready.

Modifications:
Once we access the SelectionKey out of the SelectionKey[] we directly null it out.

Result:
Reference can be GC'ed right away once the Channel was closed."
cb9660f83d45ab439b4f4ba751131dcadb1913c2,"Allow the user to call slice().retain() or duplicate.retain() in his/her ByteToMessageDecoder.decode(...) method.

Motivation:
At the moment a user can not safetly call slice().retain() or duplicate.retain()in the ByteToMessageDecoder.decode(...) implementation without the risk to see coruption because we may call discardSomeReadBytes() to make room on the buffer once the handling is done.

Modifications:
Check for the refCnt() before call discardSomeReadBytes() and also check before call decode(...) to create a copy if needed.

Result:
The user can safetly call slice().retain() or duplicate.retain() in his/her ByteToMessageDecoder.decode(...) method."
88481131be5bc565335a37081c17fb62d023f923,"[#2353] Use a privileged block to get ClassLoader and System property if needed

Motivation:
When using System.getProperty(...) and various methods to get a ClassLoader it will fail when a SecurityManager is in place.

Modifications:
Use a priveled block if needed. This work is based in the PR #2353 done by @anilsaldhana .

Result:
Code works also when SecurityManager is present"
ceffa82d0d341c08804554441601fdf253227fa9,"[#2370] Periodically check for not alive Threads and free up their ThreadPoolCache

Motivation:
At the moment we create new ThreadPoolCache whenever a Thread tries either allocate or release something on the PooledByteBufAllocator. When something is released we put it then in its ThreadPoolCache. The problem is we never check if a Thread is not alive anymore and so we may end up with memory that is never freed again if a user create many short living Threads that use the PooledByteBufAllocator.

Modifications:
Periodically check if the Thread is still alive that has a ThreadPoolCache assinged and if not free it.

Result:
Memory is freed up correctly even for short living Threads."
ad955fa8a488ba592f6426d714cad250a1bfd92f,"[#2371] Fix Potential data corruption in EpollSocketChannel when writing to the Channel

Motivation:
We sometimes see data corruption when writing to the EpollSocketChannel.

Modifications:
Correctly update the position of the ByteBuffer after something was written.

Result:
Fix data-corruption which could happen on partial writes"
7a6fa73989753662de1e2b3527d54939d8218040,"Add a Example for Memcache Binary Codec

Motivation:
Currently, there exists no example which shows how to use the memcache binary
protocol.

Modifications:
Add an example client and client handler to show how to utilize the binary
protocol in a memcache client with a simple interactive shell.

Result:
Users looking for an example can now start off with the provided one."
837ddc01d25a61e79de4fa907a49f6f225c09273,[example-memcache] fix formatting introduced by the memcache examples.
17334a0a427458f0387f708825d23d756d36a2f8,"[#2390] Minimize memory usage of NioDatagramChannel

Motivation:
At the moment we create a HashMap that holds the MembershipKeys for multicast with every NioDatagramChannel even when most people not need it at al

Modifications:
Lazy create the HashMap when needed.

Result:
Less memory usage and less object creation"
15d11289b0406ae2d12b5e7337701cc676791a59,"Fix error that causes (up to) double memory usage

Motivation:

PoolArena's 'normalizeCapacity' function was micro-optimized some
time ago to remove a while loop. However, there was a change of
behavior in the function as a result. Capacities passed into it
that are already powers of 2 (and >= 512) are doubled in size. So
if I ask for a buffer with a capacity of 1024, I will get back one
that actually uses 2048 bytes (stored in maxLength).

Aligning to powers of two for book keeping ease is reasonable,
and if someone tries to expand a buffer, you might as well use some
of the previously wasted space. However, since this distinction
between 'easily expanded' and 'costly to expand' space is not
supported at all by the APIs, I cannot imagine this change to
doubling is desirable or intentional.

This is especially costly when using composite buffers. They
frequently allocate components with a capacity that is a power of
2, and they never attempt to expand components themselves. The end
result is that heavy use of pool-backed composite buffers wastes
almost half of the memory pool (the smaller / initial components are
<512 and so are not affected by the off-by-one bug).

Modifications:

Although I find it difficult to believe that such an optimization
is really helpful, I left it in and fixed the off-by-one issue by
decrementing the value at the start.

I also added a simple test to both attempt to verify that the
decrement fixes the issue without introducing any other change, and
to make it easy for a reviewer to test the existing behavior. PoolArena
does not seem to have much testing or testability support though so
the test is kind of a hack and will break for unrelated changes. I
suggest either removing it or factoring out the single non-static
portion of normalizeCapacity so that the fragile dummy PoolArena is
not required.

Result:

Pooled allocators will allocate less resources to the highly
inefficient and undocumented buffer section between length and
maxLength.

Composite buffers of non-trivial size that are backed by pooled
allocators will use about half as much memory."
7808b9926d26e8abc0571bcffdbc134195d7b949,"SPDY: refactor frame codec implementation

Motivation:

Currently, the SPDY frame encoding and decoding code is based upon
the ChannelHandler abstraction. This requires maintaining multiple
versions for 3.x and 4.x (and possibly 5.x moving forward).

Modifications:

The SPDY frame encoding and decoding code is separated from the
ChannelHandler and SpdyFrame abstractions. Also test coverage is
improved.

Result:

SpdyFrameCodec now implements the ChannelHandler abstraction and is
responsible for creating and handling SpdyFrame objects."
71f5bb84a6370f229169512688fde24e9746f1d8,"Fix buffer leaks in SPDY test

Motivation:

Fix leaks reported during SPDY test.

Modifications:

Use ReferenceCountUtil.releaseLater(...) to make sure everything is released once the tests are done.

Result:

No more leak reports during run the tests."
2e8e7e486ad86841b40b877b5af8491761712beb,"Fix buffer leaks in SpdyFrameDecoderTest

Motivation:

Fix leaks reported during running SpdyFrameDecoderTest

Modifications:
Make sure the produced buffer of SpdyFrameDecoder is released

Result:

No more leak reports during run the tests."
40bcb17bf9f6c94eb01049c470050fa02e4d5e17,"Fix missed buffer leaks in SpdyFrameDecoderTest

 Motivation:
 Fix leaks reported during running SpdyFrameDecoderTest

Modifications:
Make sure the produced buffers of SpdyFrameDecoder and SpdyFrameDecoderTest are released

Result:

No more leak reports during run the tests."
6615d72db072b02a2dd66620d4ac58b8785350d2,"[#2376] Add support for SO_REUSEPORT in native transport

Motivation:
In linux kernel 3.9 a new featured named SO_REUSEPORT was introduced which allows to have multiple sockets bind to the same port and so handle the accept() of new connections with multiple threads. This can greatly improve the performance when you not to accept a lot of connections.

Modifications:
Implement SO_REUSEPORT via JNI

Result:
Be able to use the SO_REUSEPORT feature when using the EpollServerSocketChannel"
91b378005461b85f965aa296daa087bc009b9da0,"[#2377] Implement epoll based DatagramChannel

Motivation:
There is currently no epoll based DatagramChannel. We should add one to make the set of provided channels complete and also to be able to offer better performance compared to the NioDatagramChannel once SO_REUSEPORT is implemented.

Modifications:
Add implementation of DatagramChannel which uses epoll. This implementation does currently not support multicast yet which will me implemented later on. As most users will not use multicast anyway I think it is fair to just add the EpollDatagramChannel without the support for now. We shipped NioDatagramChannel without support earlier too ...

Result:
Be able to use EpollDatagramChannel for max. performance on linux"
20ef4690e74a7a5007468815f070a6c1f5074d0d,"[#2375] [#2404] Fix bug in respecting ChannelConfig.setAutoRead(false) and also fix Channel.read() for OIO

Motivation:
At the moment ChanneConfig.setAutoRead(false) only is guaranteer to not have an extra channelRead(...) triggered when used from within the channelRead(...) or channelReadComplete(...) method. This is not the correct behaviour as it should also work from other methods that are triggered from within the EventLoop. For example a valid use case is to have it called from within a ChannelFutureListener, which currently not work as expected.

Beside this there is another bug which is kind of related. Currently Channel.read() will not work as expected for OIO as we will stop try to read even if nothing could be read there after one read operation on the socket (when the SO_TIMEOUT kicks in).

Modifications:
Implement the logic the right way for the NIO/OIO/SCTP and native transport, specific to the transport implementation. Also correctly handle Channel.read() for OIO transport by trigger a new read if SO_TIMEOUT was catched.

Result:
It is now also possible to use ChannelConfig.setAutoRead(false) from other methods that are called from within the EventLoop and have direct effect.

Conflicts:
	transport-sctp/src/main/java/io/netty/channel/sctp/nio/NioSctpChannel.java
	transport/src/main/java/io/netty/channel/socket/nio/NioDatagramChannel.java
	transport/src/main/java/io/netty/channel/socket/nio/NioSocketChannel.java"
199d2b499c0091d992f8693d76b879c247f09d11,"[#2405] Add support for SO_REUSEPORT to EpollDatagramChannel

Motivation:
With SO_REUSEPORT it is possible to bind multiple sockets to the same port and so handle the processing of packets via multiple threads. This allows to handle DatagramPackets with more then one thread on the same port and so gives better performance.

Modifications:
Expose EpollDatagramChannelConfig.setReusePort(..) and isReusePort()

Result:
Allow to bind multiple times to the same local address and so archive better performance."
9b670d819f321bf8f58084d928ff210dce4a8b9c,"[#2144] Fix NPE in Local transport caused by a race

Motivation:
At the moment it is possible to see a NPE when the LocalSocketChannels doRegister() method is called and the LocalSocketChannels doClose() method is called before the registration was completed.

Modifications:
Make sure we delay the actual close until the registration task was executed.

Result:
No more NPE"
18e2a45d7c38a674997cb022669f5d2b74b551be,"[#2401] Improve documentation of HttpObjectAggregator

Motivation:
Make it more clear what the output of HttpObjectAggregator is and that it need to come after the encoder in the pipeline.

Modifications:
Change javadocs to make things more clear.

Result:
Better docs"
9e02a9bbee4cd3db1fa08955cb7fe4515bf3c50c,"Move validatePromise(...) to ChannelHandlerInvokerUtil. Related to [#2398]

Motivation:
Once a user implement a custom ChannelHandlerInvoker it is needed to validate the ChannelPromise. We should expose a utility method for this.

Modifications:
Move validatePromise(...) from DefaultChannelHandlerInvoker to ChannelHandlerInvokerUtil and make it public.

Result:
User is able to reuse code"
e9161147a5b18fde5631cee5ae8b79d2550cd125,"Work around an Android SSLEngine issue

Motivation:

Some Android SSLEngine implementations skip FINISHED handshake status
and go straightly into NOT_HANDSHAKING.  This behavior blocks SslHandler
from notifying its handshakeFuture, because we do the notification when
SSLEngine enters the FINISHED state.

Modification:

When the current handshake state is NOT_HANDSHAKING and the
handshakeFuture is not fulfilled yet, treat NOT_HANDSHAKING as FINISHED.

Result:

Better Android compatibility - fixes #1823"
97553069b68a2b0f7b205b654ac761d8836786b3,"[#2396] Allow to set TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in native transport

Motivation:
Allow to set TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in native transport to offer the user with more flexibility.

Modifications:
Expose methods to set these options and write the JNI implementation.

Result:
User can now use TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT."
d6ec44c871e8598a62a2a403949fbc28d52898bc,"Fix buffer leak in EpollDatagramChannel

Motivation:
EpollDatagramChannel produced buffer leaks when tried to read from the channel and nothing was ready to be read.

Modifications:
Correctly release buffer if nothing was read

Result:
No buffer leak"
d854d3a617d6c24bee9368186aa268e476be70b7,"Fix chunk type for stream identifier

Motivation:
The problem with the current snappy implementation is that it does
not comply with framing format definition found on
https://code.google.com/p/snappy/source/browse/trunk/framing_format.txt

The document describes that chunk type of the stream identifier is defined
as 0xff. The current implentation uses 0x80.

Modifications:
This patch replaces the first byte of the chunk type of the stream identifier
with 0xff.

Result:
After this modification the snappy implementation is compliant to the
framing format described at
https://code.google.com/p/snappy/source/browse/trunk/framing_format.txt.
This results in a better compatibility with other implementations."
af9ab8b37016a666741c08e9c4a3e8634515cbac,"Feed only a single SSL record to SSLEngine.unwrap()

Motivation:

Some SSLEngine implementations violate the contract and raises an
exception when SslHandler feeds an input buffer that contains multiple
SSL records to SSLEngine.unwrap(), while the expected behavior is to
decode the first record and return.

Modification:

- Modify SslHandler.decode() to keep the lengths of each record and feed
  SSLEngine.unwrap() record by record to work around the forementioned
  issue.
- Rename unwrap() to unwrapMultiple() and unwrapNonApp()
- Rename unwrap0() to unwrapSingle()

Result:

SslHandler now works OpenSSLEngine from finagle-native.  Performance
impact remains unnoticeable.  Slightly better readability. Fixes #2116."
a31f36d9331abac1125f397cde8cdcdf6c2cbcf8,"Stop ThreadLocalRandom's initial seed generation immediately on interruption

Motivation:

ThreadLocalRandomTest reveals that ThreadLocalRandom's initial seed generation loop becomes tight if the thread is interrupted.
We currently interrupt ourselves inside the wait loop, which will raise an InterruptedException again in the next iteration, resulting in infinite (up to 3 seconds) exception construction and thread interruptions.

Modification:

- When the initial seed generator thread is interrupted, break out of the wait loop immediately.
- Log properly when the initial seed generation failed due to interruption.
- When failed to generate the initial seed, interrupt the generator thread just in case the SecureRandom implementation handles it properly.
- Make the initial seed generator thread daemon and handle potential exceptions raised due to the interruption.

Result:

No more tight loop on interruption.  More robust generator thread termination. Fixes #2412"
b5ab5150bea67885e56ad7db97b815af7ad1b7d7,"Use correct generics for TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT in EpollChannelOption. Part of [#2396]

Motivation:
Currently the generics used for TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT are incorrect.

Modifications:
Use Integer as type

Result:
User can use TCP_KEEPIDLE, TCP_KEEPINTVL and TCP_KEEPCNT as expected"
7ae40ace328e273fe5f46d4be009bbff5f94f1d9,"[#2400] Not close LocalChannel during deregister() to allow register to other EventLoop

Motivation:
At the moment it is not possible to deregister a LocalChannel from its EventLoop and register it to another one as the LocalChannel is closed during the deregister.

Modification:
Not close the LocalChannel during dergister

Result:
It is now possible to deregister a LocalChannel and register it to another EventLoop"
ff4a89b5ae315425ab3b462a21e8477aa64c8e9e,"[#2414] Fix RuntimeException during modify events via EpollEventLoop

Motivation:
We are currently try to modify the events via EpollEventLoop even when the channel was closed before and so the fd was set to -1. This fails with a RuntimeException in this case.

Modification:
Always check if the Channel is still open before try to modify the events.

Result:
No more RuntimeException because of a not open channel"
9afb56c3c6b4e19e5a831961c7907975dc135feb,"[#2414] Fix IllegalStateException when try to configure AbstractEpollChannel once it is deregistered

Motivation:
AbstractEpollChannel.clearEpollIn() throws an IllegalStateException if a user tries to change the autoRead configuration for the Channel and the Channel is not registered on an EventLoop yet. This makes it for example impossible to set AUTO_READ to false via the ServerBootstrap as the configuration is modifed before the Channel is registered.

Modification:
Check if the Channel is registered and if not just modify the flags directly so they are respected once the Channel is registered

Result:
It is possible now to configure AUTO_READ via the ServerBootstrap"
81b0e2af02e1f6166890f96cf4c0d9c02f64189b,"Make NioSocketChannelTest more bullet-proof

Motivation:
I had the NioSocketChannelTest.testFlushCloseReentrance() fail sometimes on one of my linux installation. This change let it pass all the time.

Modification:
Set the SO_SNDBUF to a small value to force split writes

Result:
Test is passing all the time where it was sometimes fail before."
8fd2f1c88088af526242489cb234e00ec6c783d9,"Mark sun.nio.ch as optional

Motivation:

If sun.nio.ch is not optional this will cause troubles in the
OSGi world. The package is not exposed by default in OSGi, so
actually the whole netty framework cannot be used directly.

There are workarounds, but workarounds are ugly. Especially since
the use of sun.nio.ch is optional. So the requirement on the
package should be optional as well.

Modifications:

Make the import of sun.nio.ch optional.

Result:

If the package cannot be imported it will behave as if the package
sun.nio.ch is not present (like with other JVMs). If the package is
exposed in OSGi (e.g. bootclassloader delegation, extension fragment)
it will be used."
65ee10fbd042af8f67a6094be11a8fd605b30fa1,"[codec-memcache] Avoid NPE on channelInactive.

Motivation:
When no currentMessage has been set and the channel is inactive, a NPE is raised.

Modification:
Make sure that a currentMessage is available before checking the extras.

Result:
No more NPE raised potentially."
db3709e652dfc42514fd61698a4114941916ff7e,"Synchronized between 4.1 and master

Motivation:

4 and 5 were diverged long time ago and we recently reverted some of the
early commits in master.  We must make sure 4.1 and master are not very
different now.

Modification:

Fix found differences

Result:

4.1 and master got closer."
a2f1f216122eb40c849ffa31431c93a8988de124,"Synchronized between 4.1 and master

Motivation:

4 and 5 were diverged long time ago and we recently reverted some of the
early commits in master.  We must make sure 4.1 and master are not very
different now.

Modification:

Small adjustments to match up branches

Result:

4.1 and master got closer."
8c3eaf3b567df14934fb6f49357a872b671232aa,"Synchronized between 4.1 and master again

Motivation:
4 and 5 were diverged long time ago and we recently reverted some of the
early commits in master.  We must make sure 4.1 and master are not very
different now.

Modification:
Remove ChannelHandlerInvoker.writeAndFlush(...) and the related implementations.

Result:
4.1 and master got closer."
b9039eaa82e5651a4eeb444954cacbe64fff8b73,"Synchronized between 4.1 and master again (part 2)

Motivation:
4 and 5 were diverged long time ago and we recently reverted some of the
early commits in master.  We must make sure 4.1 and master are not very
different now.

Modification:
Remove ChannelHandlerInvoker.writeAndFlush(...) and the related
implementations.

Result:
4.1 and master got closer."
d765f6b870fda68ccea79c1903f17f2127158e8c,"Synchronized between 4.1 and master (part 3)

Motivation:

4 and 5 were diverged long time ago and we recently reverted some of the
early commits in master.  We must make sure 4.1 and master are not very
different now.

Modification:

Fix found differences

Result:

4.1 and master got closer."
0fceef8ab675570a06d6d74c0e39185e6466f44f,"Undeprecate deregister() and chanelUnregistered()

Motivation:

As discussed in #2250, it will become much less complicated to implement
deregistration and reregistration of a channel once #2250 is resolved.
Therefore, there's no need to deprecate deregister() and
channelUnregistered().

Modification:

- Undeprecate deregister() and channelUnregistered()
- Remove SuppressWarnings annotations where applicable

Result:

We (including @jakobbuchgraber) are now ready to play with #2250 at
master"
1492b32da7ee982628f2447d7c82951c7d57ae4f,"Code clean-up

Motivation:

It is less confusing not to spread Thread.interrupt() calls.

Modification:

- Comments
- Move generatorThread.interrupt() to where currentThread.interrupt() is
  triggered

Result:

Code that is easier to read"
d8d822fddd34dedbeec5a78a9b880a90080a4db4,"Eliminate unnecessary extra synchronization in DefaultChannelPipeline

Motivation:
At the moment whenever we add/remove a ChannelHandler with an EventExecutorGroup we have two synchronization points in the execution path. One to find the childInvoker and one for add/remove itself. We can eliminate the former by call findIInvoker in the synchronization block, as we need to synchronize anyway.

Modification:
Remove the usage of AtomicFieldUpdater and the extra synchronization in findInvoker by moving the call of the method in the synchronized(this) block.

Result:
Less synchronization points and volatile reads/writes"
2f082cf9a2b6ef001340b059a2087488d5773568,"Adding support for echoing the request origin for CORS.

Motivation:
When CORS has been configured to allow ""*"" origin, and at the same time
is allowing credentials/cookies, this causes an error from the browser
because when the response 'Access-Control-Allow-Credentials' header
is true, the 'Access-Control-Allow-Origin' must be an actual origin.

Modifications:
Changed CorsHandler setOrigin method to check for the combination of ""*""
origin and allowCredentials, and if the check matches echo the CORS
request's 'Origin' value.

Result:
This addition enables the echoing of the request 'Origin' value as the
'Access-Control-Allow-Origin' value when the server has been configured
to allow any origin in combination with allowCredentials.

This allows client requests to succeed when expecting the server to
be able to handle ""*"" origin and at the same time be able to send cookies
by setting 'xhr.withCredentials=true'. A concrete example of this is
the SockJS protocol which expects behaviour."
e8b5f19b82eb116abb4e53a9fb1fa716e7623742,"Not cause busy loop when interrupt Thread of NioEventLoop

Motivation:
Because Thread.currentThread().interrupt() will unblock Selector.select() we need to take special care when check if we need to rebuild the Selector. If the unblock was caused by the interrupt() we will clear it and move on as this is most likely a bug in a custom ChannelHandler or a library the user makes use of.

Modification:
Clear the interrupt state of the Thread if the Selector was unblock because of an interrupt and the returned keys was 0.

Result:
No more busy loop caused by Thread.currentThread().interrupt()"
01ef614e77ec45d2b1abbe97e28d3fb6fe11bd13,"Fix incorrect port range check

Motivation:

In the Internet Protocol, the valid port number range is from 1 to 65535
(inclusive on the both side.)  However, SocksCmdRequest refuses to
construct itself when the port number 65535 is specified.

Modification:

Do not raise an exception when the specified port number is 65535.

Result:

Fixes #2428"
80f1dfaec0a8b53a9a36a2ae5e9339e48b7c7a4c,"[#2428] Proper fix of incorrect port range check

Motivation:

In the Internet Protocol, the valid port number range is from 1 to 65535
(inclusive on the both side.)  However, SocksCmdRequest and SocksCmdResponse
refuses to construct itself when the port number 65535 is specified. Beside
this it excepts 0 as port number which should not allowed.

    Modification:

* Not raise an exception when the specified port number is 65535.
* Raise an exception when the specified port number is 0

Result:

Fixes #2428"
3ba856a5f45c467b280ee37ff8d4f144f67eb819,"Correctly handle SocksCmdResponse. Related to #2428

Motivation:
Ports range check is not correct

Modification:
Allow port between 0 and 65535. 0 is wildcard / unknown port here

Result:
Correct validation"
0aea9eaed56968970da87684b7f8e1ca05b69b85,"Correctly write pending data after ssl handshake completes. Related to [#2437]

Motivation:
When writing data from a server before the ssl handshake completes may not be written at all to the remote peer
if nothing else is written after the handshake was done.

Modification:
Correctly try to write pending data after the handshake was complete

Result:
Correctly write out all pending data"
93fab1d5a3a45a8104e560118930c1d652dce8cb,"Remove ContinuationWebSocketFrame.aggregatedText()

Motivation:
Before we aggregated the full text in the WebSocket08FrameDecoder just to fill in the ContinuationWebSocketFrame.aggregatedText(). The problem was that there was no upper-limit and so it would be possible to see an OOME if the remote peer sends a TextWebSocketFrame + a never ending stream of ContinuationWebSocketFrames. Furthermore the aggregation does not really belong in the WebSocket08FrameDecoder, as we provide an extra ChannelHandler for this anyway (WebSocketFrameAggregator).

Modification:
Remove the ContinuationWebSocketFrame.aggregatedText() method and corresponding constructor. Also refactored WebSocket08FrameDecoder a bit to me more efficient which is now possible as we not need to aggregate here.

Result:
No more risk of OOME because of frames."
6c1af9036fd2be2d3a943734f101c5643a21453e,"Simplify native library resolution using os-maven-plugin

Motivation:

So far, we used a very simple platform string such as linux64 and
linux32.  However, this is far from perfection because it does not
include anything about the CPU architecture.

Also, the current build tries to put multiple versions of .so files into
a single JAR.  This doesn't work very well when we have to ship for many
different platforms.  Think about shipping .so/.dynlib files for both
Linux and Mac OS X.

Modification:

- Use os-maven-plugin as an extension to determine the current OS and
  CPU architecture reliable at build time
- Use Maven classifier instead of trying to put all shared libraries
  into a single JAR
- NativeLibraryLoader does not guess the OS and bit mode anymore and it
  always looks for the same location regardless of platform, because the
  Maven classifier does the job instead.

Result:

Better scalable native library deployment and retrieval"
2ff06676ca54b1caf53ed73a063c4a1355236833,Fix a build failure due to missing classifier
df93b350276c439f496bde9400130f207b4a9b04,Upgrade os-maven-plugin to fix a build issue on windows-x86_32
a566164b988488a138fd6222ecd7728a4a4a8ae9,"Enforce the release is performed only from RHEL 6.5 or equivalent

Motivation:

Netty must be released from RHEL 6.5 x86_64 or compatible so that:

1) we ship x86_64 version of epoll transport officially, and
2) we ensure the ABI compatibility with older GLIBC versions.
   The shared library built on a distribution with newer GLIBC will not
   run on older distributions.

Modifications:

- When 'release' profile is active, perform an additional check using
  maven-enforcer-plugin so that 'mvn release:*' fails when running on
  non-RHEL6.5.  This rule is active only when releasing, so a user
  should not be affected.
- Simplify maven-release-plugin configuration by removing redundant
  profiles such as 'linux'.  'linux' is automatically activated when
  releasing because we now enforce the release occurs on linux-x86_64.
- Remove the no-osgi profile, which is unused
- Remove the reference to 'sonatype-oss-release' profile in all/pom.xml,
  because we always specify 'release' profile when releasing
- Rename the profile 'linux-native' to 'linux' for brevity
- Upgrade oss-parent and maven-enforcer-plugin

Result:

No one can make a mistake to release Netty on an environment that can
produce incompatible or missing native library."
296db210ab24b04e04a8b2dc7ac55cd17e964914,"Generate the default JAR to make oss.sonatype.org happy

Motivation:

oss.sonatype.org refuses to promote an artifact if it doesn't have the
default JAR (the JAR without classifier.)

Modifications:

- Generate both the default JAR and the native JAR to make
  oss.sonatype.org happy
- Rename the profile 'release' to 'restricted-release' which reflects
  what it really does better
- Remove the redundant <quickbuild>true</quickbuild> in all/pom.xml
  We specify the profile 'full' that triggers that property already
  in maven-release-plugin configuration.

Result:

oss.sonatype.org is happy.  Simpler pom.xml"
9dbcf1af49979593d0d3d0cf4c6b8b16d1450927,SPDY: allow subclassing of SpdyFrameCodec
9752f37fa0100cb3cab1ae842630610abd4eb301,"[#2454] Correctly return null when DefaultChannelPipeline.firstContext() is called on empty pipeline

Motivation:
DefaultChannelPipeline.firstContext() should return null when the ipeline is empty. This is not the case atm.

Modification:
Fix incorrect check in DefaultChannelPipeline.firstContext() and add unit tests.

Result:
Correctly return null when DefaultChannelPipeline.firstContext() is called on empty pipeline."
d713f015da03a6d90230ebe723a6f33e26a6afca,"Made websocket maxFramePayloadSize configurable from WebSocketServerProtocolHandler.

Motivation:

Currently there's no way to configure maxFramePayloadSize from
WebSocketServerProtocolHandler, which is the most used entry point of
WebSocket server.

Modifications:

Added another constructor for maxFramePayloadSize.

Result:

We can configure max frame size for websocket packet in
WebSocketServerProtocolHandler. It will also keep backward compatibility
with default max size: 65536. (65536 is hard-coded max size in previous
version of Netty)"
1d9c431604cdc87b482d15134913747616111ddb,SPDY: remove unused code in SpdyHeaderBlockRawEncoder
326efe5b4219f63f27c3449b2a326964cc47bfe5,SPDY: release headerBlock in SpdyFrameCodec
1351349243128ea7048a98e01e65609af8628d96,SPDY: ensure SpdyHeaderBlockRawDecoder always reads entire input
8a39b9fedc59e0e7611423b3e2ad550e3cbadc72,"Fix buffer leak introduced by #2462

Motivation:
Because of not correctly release a buffer before null out the reference a memory leak shows up.

Modifications:
Correct call buffer.release() before null out reference.

Result:
No more leak"
1a22186645e7d638b729e8acc32bc1ccdc197724,"Adding short-curcuit option for CORS

Motivation:
CORS request are currently processed, and potentially failed, after the
target ChannelHandler(s) have been invoked. This might not be desired, for
example a HTTP PUT or POST might have been performed.

Modifications:
Added a shortCurcuit option to CorsConfig which when set will
cause a validation of the HTTP request's 'Origin' header and verify that
it is valid according to the configuration. If found invalid an 403
""Forbidden"" response will be returned and not further processing will
take place.

This is indeed no help for non browser request, like using curl, which
can set the 'Origin' header.

Result:
Users can now configure if the 'Origin' header should be validated
upfront and have the request rejected before any further processing
takes place."
c5e4c2294ebbe446cdfa1af1f63ebb7319190776,"[#2469] Correctly update indices after incomplete gathering write

 Motivation:
 When doing a gathering write we need to update the indices after the write partial completes. In the current code-base we use the wrong value when compare the expected written bytes and the actual written bytes.

 Modifications:
 Use the correct value when compare.

Result:
Indices are updated correctly and so no corruption can happen when resume writing after data was only partial written before."
69c72220aa85cf3cd59df163ae2cd5d4e13eb22a,"Update netty-build to version 20

- Preparation for merging OpenSslEngine work"
59d92ad6cfbf69fadb109a415112597c911f475a,"[#2485] Use RecvByteBufAllocator for all allocations related to read from Channel

Motivation:
At the moment we sometimes use only RecvByteBufAllocator.guess() to guess the next size and the use the ByteBufAllocator.* directly to allocate the buffer. We should always use RecvByteBufAllocator.allocate(...) all the time as this makes the behavior easier to adjust.

Modifications:
Change the read() implementations to make use of RecvByteBufAllocator.

Result:
Behavior is more consistent."
880acbca722002adc347ad297c776fdd8db9b0bd,"Use ByteBuf.readSlice(...).retain() to minimize memory copies.

Motivation:
At the moment we call ByteBuf.readBytes(...) in these handlers but with optimizations done as part of 25e0d9d we can just use readSlice(...).retain() and eliminate the memory copy.

Modifications:
Replace ByteBuf.readBytes(...) usage with readSlice(...).retain().

Result:
Less memory copies."
d69ad2f85c71c39cdf778a1455a4ae7262563894,"More robust native library discovery in Mac OS X

Motivation:

Some JDK versions of Mac OS X generates a JNI dynamic library with '.jnilib' extension rather than with '.dynlib' extension.  However, System.mapLibraryName() always returns 'lib<name>.dynlib'. As a result, NativeLibraryLoader fails to load the native library whose extension is .jnilib.

Modification:

Try to find both '.jnilib' and '.dynlib' resources on OS X.

Result:

Dynamic libraries are loaded correctly in Mac OS X, and thus we can continue the OpenSslEngine work."
2f7d60f234f6b1fb47ffc9e79259d1da00834405,"Minimize memory footprint of HashedWheelTimer and context-switching

Motivation:
At the moment there are two issues with HashedWheelTimer:
* the memory footprint of it is pretty heavy (250kb fon an empty instance)
* the way how added Timeouts are handled is inefficient in terms of how locks etc are used and so a lot of context-switching / condition can happen.

Modification:
Rewrite HashedWheelTimer to use an optimized bucket implementation to store the submitted Timeouts and a MPSC queue to handover the timeouts.  So volatile writes are reduced to a minimum and also the memory foot-print of the buckets itself is reduced a lot as the bucket uses a double-linked-list. Beside this we use Atomic*FieldUpdater where-ever possible to improve the memory foot-print and performance.

Result:
Lower memory-footprint and better performance"
e29f8231aab921c6a1337cf3a12d1822f94a3979,"Fix the life cycle mapping problem with m2e

Motivation:

It should be frictionless to import our project into Eclipse

Modifications:

Exclude the plugins with missing life cycle mapping. They are not useful
for use with IDE anyway.

Result:

Fixes #2488
Netty is imported into Eclipse without a problem."
d547b5d51d2fb1707d2f69f8d47bc5930fdab83f,Fix capacity check bug affecting offheap buffers
2d9e0f53a5059765f5f5976472440c0a2fec848d,"Better implementation of AttributeMap and also add hasAttr(...). See [#2439]

Motivation:
The old DefaultAttributeMap impl did more synchronization then needed and also did not expose a efficient way to check if an attribute exists with a specific key.

Modifications:
* Rewrite DefaultAttributeMap to not use IdentityHashMap and synchronization on the map directly. The new impl uses a combination of AtomicReferenceArray and synchronization per chain (linked-list). Also access the first Attribute per bucket can be done without any synchronization at all and just uses atomic operations. This should fit for most use-cases pretty weel.
* Add hasAttr(...) implementation

Result:
It's now possible to check for the existence of a attribute without create one. Synchronization is per linked-list and the first entry can even be added via atomic operation."
2a6ed67efc4ffb15647313b82e450a3951a6a3bd,"Preparation for porting OpenSSL support in 3.10

- Add licenses and dependencies"
b6c0c0c95fcad288043d4a76a77c8bdd600946fe,"Add an OpenSslEngine and the universal API for enabling SSL

Motivation:

Some users already use an SSLEngine implementation in finagle-native. It
wraps OpenSSL to get higher SSL performance.  However, to take advantage
of it, finagle-native must be compiled manually, and it means we cannot
pull it in as a dependency and thus we cannot test our SslHandler
against the OpenSSL-based SSLEngine.  For an instance, we had #2216.

Because the construction procedures of JDK SSLEngine and OpenSslEngine
are very different from each other, we also need to provide a universal
way to enable SSL in a Netty application.

Modifications:

- Pull netty-tcnative in as an optional dependency.
  http://netty.io/wiki/forked-tomcat-native.html
- Backport NativeLibraryLoader from 4.0
- Move OpenSSL-based SSLEngine implementation into our code base.
  - Copied from finagle-native; originally written by @jpinner et al.
  - Overall cleanup by @trustin.
- Run all SslHandler tests with both default SSLEngine and OpenSslEngine
- Add a unified API for creating an SSL context
  - SslContext allows you to create a new SSLEngine or a new SslHandler
    with your PKCS#8 key and X.509 certificate chain.
  - Add JdkSslContext and its subclasses
  - Add OpenSslServerContext
- Add ApplicationProtocolSelector to ensure the future support for NPN
  (NextProtoNego) and ALPN (Application Layer Protocol Negotiation) on
  the client-side.
- Add SimpleTrustManagerFactory to help a user write a
  TrustManagerFactory easily, which should be useful for those who need
  to write an alternative verification mechanism. For example, we can
  use it to implement an unsafe TrustManagerFactory that accepts
  self-signed certificates for testing purposes.
- Add InsecureTrustManagerFactory and FingerprintTrustManager for quick
  and dirty testing
- Add SelfSignedCertificate class which generates a self-signed X.509
  certificate very easily.
- Update all our examples to use SslContext.newClient/ServerContext()
- SslHandler now logs the chosen cipher suite when handshake is
  finished.

Result:

- Cleaner unified API for configuring an SSL client and an SSL server
  regardless of its internal implementation.
- When native libraries are available, OpenSSL-based SSLEngine
  implementation is selected automatically to take advantage of its
  performance benefit.
- Examples take advantage of this modification and thus are cleaner."
9125060752f5124949e55a6868647c75f88cdb01,"Optimize SslHandler in an OpenSslEngine-friendly way

Motivation:

Previous fix for the OpenSslEngine compatibility issue (#2216 and
18b0e95659c057b126653bad2f018a8ce5385255) was to feed SSL records one by
one to OpenSslEngine.unwrap().  It is not optimal because it will result
in more JNI calls.

Modifications:

- Do not feed SSL records one by one.
- Feed as many records as possible up to MAX_ENCRYPTED_PACKET_LENGTH
- Deduplicate MAX_ENCRYPTED_PACKET_LENGTH definitions

Result:

- No allocation of intemediary arrays
- Reduced number of calls to SSLEngine and thus its underlying JNI calls
- A tad bit increase in throughput, probably reverting the tiny drop
  caused by 18b0e95659c057b126653bad2f018a8ce5385255"
167a685a5f3d375eb3a851d594d8a9be6b93ffdf,"Fix JDK 8 compatibility issue with OpenJdkSelfSignedCertGenerator

- X509CertInfo.setSubject/setIssuer() requires X500Name instead of
  CertificateSubjectName/CertificateIssuerName."
28c390d86d4d01d35f11a88034143763066f3d21,Fix buffer leaks during PEM to KeyStore conversion
ef59c4ce61838fce193273291cdba9f617374c57,"Add netty-tcnative dependency to netty-example

Motivation:

It's useful to have netty-tcnative dependency in netty-example because
we can play with OpenSslEngine from our IDE.

Modifications:

Add netty-tcnative to example/pom.xml"
ae61b12b9ebe0911fed3ec0f00257ec0063cd023,"Reduce memory usage of SslHandler when OpenSslEngine is in use

Motivation:

JDK's SSLEngine.wrap() requires the output buffer to be always as large as MAX_ENCRYPTED_PACKET_LENGTH even if the input buffer contains small number of bytes.  Our OpenSslEngine implementation does not have such wasteful behaviot.

Modifications:

If the current SSLEngine is OpenSslEngine, allocate as much as only needed.

Result:

Less peak memory usage."
2a30d0c22aec545238afe529bf99acf589cb5dbb,Upgrade os-maven-plugin to fix the build issue
ccbc19a45f70a9269f2f328243be4b4ea4c6d058,Add JVM crash logs to .gitignore
66851d222b46951812d823a350ce720ef0164b67,Update os-maven-plugin again to address an IDEA integration issue
4882377c2757d82f02849f3c38b10fbbc8d632a9,"Work around the JVM crash that occurs when cipher suite uses GCM

Motivation:

For an unknown reason, JVM of JDK8 crashes intermittently when
SslHandler feeds a direct buffer to SSLEngine.unwrap() *and* the current
cipher suite has GCM (Galois/Counter Mode) enabled.

Modifications:

Convert the inbound network buffer to a heap buffer when the current
cipher suite is using GCM.

Result:

JVM does not crash anymore."
7252934f9b133e3c120bc0f9480e09bd03f83ce5,"Limit the number of bytes to copy per Unsafe.copyMemory()

Motivation:

During a large memory copy, safepoint polling is diabled, hindering
accurate profiling.

Modifications:

Only copy up to 1 MiB per Unsafe.copyMemory()

Result:

Potentially more reliable performance"
c4fc6b70439626f16ad343c245d071c5582cbee5,Checkstyle
c77375cf54f5fc37ffa87f3a547b8271fa7bc7f6,"Clean up example execution

Motivation:

- example/pom.xml has quite a bit of duplication.
- We expect that we depend on npn-boot in more than one module in the
  near future. (e.g. handler, codec-http, and codec-http2)

Modification:

- Deduplicate the profiles in example/pom.xml
- Move the build configuration related with npn-boot to the parent pom.
- Add run-example.sh that helps a user launch an example easily

Result:

- Cleaner build files
- Easier to add a new example
- Easier to launch an example
- Easier to run the tests that relies on npn-boot in the future"
d942c13c8efde4204b88f958c0d565fa3df6387c,"Fix a problem where all classes are compiled again

Motivation:

Due to a known problem[1] of maven-compiler-plugin, our build always
compiles everything from scratch, which is waste of time.

Modifications:

Exclude package-info.java from the source list.

Result:

Much shorter build time.

[1]: https://jira.codehaus.org/browse/MCOMPILER-205"
5354ccaa8f732caa46d6fd3d6fc80433dac47063,"Fix a build problem with JDK 8

Motivation:

Build fails with JDK 8 because npn-boot does not work with JDK 8

Modifications:

Do not specify bootclasspath when on JDK 8

Result:

Build is green again."
4436870b28a253718a3305333b21e0e7fb82abd9,"Clean up the execution mechanism of examples

Motivation:

- There's no way to pass an argument to an example.
- Assigning a Maven profile for each example is an overkill.
  It makes the pom.xml crowded.

Modifications:

- Remove example profiles from example/pom.xml
- Keep the list of examples in run-example.sh
- run-example.sh passes all options to exec-maven-plugin.
  For example, we can now do this:

    ./run-example.sh -Dssl -Dport=443 http-server

Result:

- It's much easier to add a new example and provide an easy way to
  launch it.
- We can still pass an arbitrary argument to the example being launched.
  (I'll update all examples to make them get their options from system
  properties rather than from args[]."
e61ad7f80b1a72f9f0077ac4e93bab407c6add93,"Improve run-example.sh

- More usage example
- Newlines for prettier output"
d4f2488eacce2680c4d9ebaa66527cfe5ceb4762,"Bash 3 compatibility

Motivation:

Mac OS X ships Bash 3, and it does not have an associative array
(declare -A).

Modifications:

Do not use an associative array.

Result:

Can run examples on Mac OS X using run-example.sh"
861ed1e7adc426308a6a62fa6b8872b35b1bc06a,"Add unified NextProtoNego extension support to SslContext

Motivation:

- OpenSslEngine and JDK SSLEngine (+ Jetty NPN) have different APIs to
  support NextProtoNego extension.
  - It is impossible to configure NPN with SslContext when the provider
    type is JDK.

Modification:

- Implement NextProtoNego extension by overriding the behavior of
  SSLSession.getProtocol() for both OpenSSLEngine and JDK SSLEngine.
  - SSLEngine.getProtocol() returns a string delimited by a colon (':')
    where the first component is the transport protosol (e.g. TLSv1.2)
    and the second component is the name of the application protocol
- Remove the direct reference of Jetty NPN classes from the examples
- Add SslContext.newApplicationProtocolSelector

Result:

- A user can now use both JDK SSLEngine and OpenSslEngine for NPN-based
  protocols such as HTTP2 and SPDY"
d318f526a2de207d2979099227054fb62c386bb3,Update the instruction for running SPDY examples
ac968fbf7b7248e476679a13f5a38f2cc82e703b,Escape a colon in protocol names
27b67e981e5fe82820ebc3b413107c559ae0a4bd,Fix NPE in OpenSslEngine
5ce410c69e9b2aed881693b41c5583105b004b9f,"Future compatibility with TLS ALPN

Motivation:

According to TLS ALPN draft-05, a client sends the list of the supported
protocols and a server responds with the selected protocol, which is
different from NPN.  Therefore, ApplicationProtocolSelector won't work
with ALPN

Modifications:

- Use Iterable<String> to list the supported protocols on the client
  side, rather than using ApplicationProtocolSelector
- Remove ApplicationProtocolSelector

Result:

Future compatibility with TLS ALPN"
2f8c13e85ac2debd1f6370e7007d700cc434d042,Fix NPE
d7f553562e70b5d10ab181ef4bee2d98b7769db9,"Display example names in 2 columns

- ported from ba286797752851e4d4426661fffda2f12feb7920"
cdab518562b0db0c19a2c9ff7712c8250c6b7cc7,Fix an incorrect path problem in run-example.sh
37931306d54066f222def676e9f797afa8f40260,"Use maven-antrun-plugin instead of exec-maven-plugin

Motivation:

exec-maven-plugin does not flush stdout and stderr, making the console
output from the examples invisible to users

Modification:

Use maven-antrun-plugin instead

Result:

A user sees the output from the examples immediately."
60a83fc6ac66ab6972dedb0a24c36c383a8e7940,"Fix packagine issues in all-in-one JAR

Motivation:

- dependencyVersionsDir property is not resolved during the build
  process. The build doesn't fail because of this, but it creates an
  ugly directory.
- All-in-one JAR contains libnetty-tcnative.so, which is not part of the
  all-in-one JAR.

Modifications:

- Fix an incorrect property name
  (dependencyVersionDir -> dependencyVersionsDir)
- Exclude libnetty-tcnative.so
- Remove unnecessary includes in source expanding configuration

Result:

- Cleaner pom.xml
- We do not ship libnetty-tcnative.so in all-in-one JAR anymore, which
  is correct, because strictly speaking the native library belongs to
  org.apache.tomcat.jni package."
c7825f63c0983c3a4d8858f9fe741940c663006a,"Fix a bug in DefaultPromise.notifyLateListener() where the listener is not notified

Motivation:

When (listeners == null && lateListeners == null) and (stackDepth >= MAX_LISTENER_STACK_DEPTH), the listener is not notified at all. The discard client does not work.

Modification:

Make sure to submit the notification task.

Result:

The discard client works again and all listeners are notified."
223efc5f9969414f104ec98d9b2fad137d0f195b,"Clean up the examples

Motivation:

The examples have not been updated since long time ago, showing various
issues fixed in this commit.

Modifications:

- Overall simplification to reduce LoC
  - Use system properties to get options instead of parsing args.
  - Minimize option validation
  - Just use System.out/err instead of Logger
  - Do not pass config as parameters - just access it directly
  - Move the main logic to main(String[]) instead of creating a new
    instance meaninglessly
    - Update netty-build-21 to make checkstyle not complain
  - Remove 'throws Exception' clause if possible
- Line wrap at 120 (previously at 80)
- Add an option to enable SSL for most examples
- Use ChannelFuture.sync() instead of await()
- Use System.out for the actual result. Use System.err otherwise.
- Delete examples that are not very useful:
  - applet
  - websocket/html5
  - websocketx/sslserver
  - localecho/multithreaded
- Add run-example.sh which simplifies launching an example from command
  line
- Rewrite FileServer example

Result:

Shorter and simpler examples.  A user can focus more on what it actually
does than miscellaneous stuff.  A user can launch an example very
easily."
9961cae7cf7819e853714fcf06ae0a00d8fc8d39,"Use a forked exec-maven-plugin instead of maven-antrun-plugin

Motivation:

maven-antrun-plugin does not redirect stdin, and thus it's impossible to
run interactive examples such as securechat-client and telnet-client.
org.codehaus.mojo:exec-maven-plugin redirects stdin, but it buffers
stdout and stderr, and thus an application output is not flushed timely.

Modifications:

Deploy a forked version of exec-maven-plugin which flushes output
buffers in a timely manner.

Result:

Interactive examples work.  Launches faster than maven-antrun-plugin."
c5112ed55210afcbb263397b37c0031983b883db,Upgrade os-maven-plugin to fix an issue with IntelliJ IDEA on Windows
8df9dd7dda2d04a3478d414f34a694aec7515dde,"Work around the system configuration issue that causes NioSocketChannelTest to fail

Motivation:

On some ill-configured systems, InetAddress.getLocalHost() fails.  NioSocketChannelTest calls java.net.Socket.connect() and it internally invoked InetAddress.getLocalHost(), which causes the test failures in NioSocketChannelTes on such an ill-configured system.

Modifications:

Use NetUtil.LOCALHOST explicitly.

Result:

NioSocketChannelTest should not fail anymore."
b4e69312947648c97f46c067f4ae7ee77244c907,Upgrade to netty-tcnative 1.1.30.Fork2 to support Windows
0cc264b76bee267c77f507a23736e8a145fa2505,"More realistic ByteBuf allocation benchmark

Motivation:

Allocating a single buffer and releasing it repetitively for a benchmark will not involve the realistic execution path of the allocators.

Modifications:

Keep the last 8192 allocations and release them randomly.

Result:

We are now getting the result close to what we got with caliper."
e5ed69241b390e905fe420ae6985d1752b56f593,"Optimize PooledByteBufAllocator

Motivation:

We still have a room for improvement in PoolChunk.allocateRun() and
Subpage.allocate().

Modifications:

- Unroll the recursion in PoolChunk.allocateRun()
- Subpage.allocate() makes use of the 'nextAvail' value set by previous
  free().

Result:

- PoolChunk.allocateRun() optimization yields 10%+ improvements in
  allocation throughput for non-subpage allocations.
- Subpage.allocate() optimization makes the subpage allocations for
  tiny buffers as fast as non-tiny buffers even when the pageSize is
  huge (e.g. 1048576) because it doesn't need to perform a linear search
  in most cases."
ea3dac0753292ca7c8d2b0841ed0b5e0752759bd,"Do not use a pseudo random for tree traversal

Motivation:

If we make allocateRun/SubpageSimple() always try the left node first and make allocateRun/Subpage() always tries the right node first,  it is more likely that allocateRun/Subpage() will find a node with ST_UNUSED sooner.

Modifications:

- Make allocateRunSimple() and allocateSubpageSimple() always try the left node first.
- Make allocateRun() and allocateSubpage() always try the right node first.
- Remove randome

Result:

We get the same performance without using random numbers."
c255f38647bd39e24f4f7e631e00b00f199a862d,"Correction on StringBuilder default init size

Motivation:
The default StringBuilder size is too small (data.length + 4) while it will be 2*data.length (byte to Hex) + 5 ""-"" char (since 5 peaces appended).

Modification:
Changing initial size to the correct one

Result:
Allocation of the correct final size from the beginning for this StringBuilder."
8583dd03fcf17ad4bcdf790b03521b7e068c3f19,codec-http: Document the semantics of HttpResponseStatus equality and comparison
d0f3bfd4cc81202705857b4bd3ba7a3dceb7025a,"[#2523] Fix infinite-loop when remove attribute and create the same attribute again

Motivation:
The current DefaultAttributeMap cause an infinite-loop when the user removes an attribute and create the same attribute again. This regression was introduced by c3bd7a8ff10021026b0c223d36f022dbbf4fe397.

Modification:
Correctly break out loop

Result:
No infinite-loop anymore."
5b2a01a1969fa50b6b27d87967f4ac60776a4e20,"Fix broken CompositeMatcher

Motivation:

ChannelMatchers#CompositeMatcher inverts matches result.

Modifications:

Switched return values.

Result:

ChannelMatchers#CompositeMatcher will return correct results."
b0ddfb9b65344109c55e75ced8a33af4aaea7050,"[#2525] Use VoidChannelPromise in MessageToMessageEncoder when possible

Motivation:
At the moment MessageToMessageEncoder uses ctx.write(msg) when have more then one message was produced. This may produce more GC pressure then necessary as when the original ChannelPromise is a VoidChannelPromise we can safely also use one when write messages.

Modifications:
Use VoidChannelPromise when the original ChannelPromise was of this type

Result:
Less object creation and GC pressure"
e79ca269b8bf057f0b4250a9b9e193c398104998,"Introduce ThreadDeathWatcher

Motivation:

PooledByteBufAllocator's thread local cache and
ReferenceCountUtil.releaseLater() are in need of a way to run an
arbitrary logic when a certain thread is terminated.

Modifications:

- Add ThreadDeathWatcher, which spawns a low-priority daemon thread
  that watches a list of threads periodically (every second) and
  invokes the specified tasks when the associated threads are not alive
  anymore
  - Start-stop logic based on CAS operation proposed by @tea-dragon
- Add debug-level log messages to see if ThreadDeathWatcher works

Result:

- Fixes #2519 because we don't use GlobalEventExecutor anymore
- Cleaner code"
af4c30fa562d662ddf2b900792908808dd052127,Remove the deprecated constructor
7d9374a582edd47f973255618a35d36d032059eb,Use Java 5 foreach for arrays for brevity at no cost
08c1f55d3aa572f60a7b2960ebd286a2709faacb,Fix checkstyle
13c0cfde59f72c73fe036e5ae87602ca2d34fd79,"Add awaitInactivity() to GlobalEventExecutor and ThreadDeathWatcher

Motivation:

When running Netty on a container environment, the container will often
complain about the lingering threads such as the worker threads of
ThreadDeathWatcher and GlobalEventExecutor.  We should provide an
operation that allows a use to wait until such threads are terminated.

Modifications:

- Add awaitInactivity()
- (misc) Fix typo in GlobalEventExecutorTest
- (misc) Port ThreadDeathWatch's CAS-based thread life cycle management
  to GlobalEventExecutor

Result:

- Fixes #2084
- Less overhead on task submission of GlobalEventExecutor"
eb27cd279c2f66bb785fad47ff949350d486ec6f,"[#2494] Fix data curruption by ChannelTrafficShapingHandler

Motivation:
ChannelTrafficShapingHandler may corrupt inbound data stream by
scheduling the fireChannelRead event.

Modification:
Always call fireChannelRead(...) and only suspend reads after it

Result:
No more data corruption"
c1d6ba0598251c10e05b508c792cf270498b0196,"OkResponseHandler should return a FullHttpResponse.

Motivation:
Currently OkResponseHandler returns a DefaultHttpResponse which is not
correct and it should be returning complete http response.

Modifications:
Updated OkResponseHandler to return an instance of
DefaultFullHttpResponse.

Result:
It is not possible to add compression to the example without getting any
errors."
a79b69adf5abf90250f44ccf0d9645bf30cdff62,"ChannelFlushPromiseNotifier should allow long value for pendingDataSize

Motivation:
At the moment ChannelFlushPromiseNotifier.add(....) takes an int value for pendingDataSize, which may be too small as a user may need to use a long. This can for example be useful when a user writes a FileRegion etc. Beside this the notify* method names are kind of missleading as these should not contain *Future* because it is about ChannelPromises.

Modification:
Add a new add(...) method that takes a long for pendingDataSize and @deprecated the old method. Beside this also @deprecated all *Future* methods and add methods that have *Promise* in the method name to better reflect usage.

Result:
ChannelFlushPromiseNotifier can be used with bigger data."
502d29a7216928b9c33bf7dd8513d87e9a4acc83,"Require Maven 3.1.1 or above

.. because the build fails with an older Maven version due to Eclipse
Aether issues"
d1b90774bc591225688902a3e5209b6509d74380,"Clean up MpscLinkedQueue, fix its leak, and make it work without Unsafe

Motivation:

MpscLinkedQueue has various issues:
- It does not work without sun.misc.Unsafe.
- Some field names are confusing.
  - Node.tail does not refer to the tail node really.
  - The tail node is the starting point of iteration. I think the tail
    node should be the head node and vice versa to reduce confusion.
- Some important methods are not implemented (e.g. iterator())
- Not serializable
- Potential false cache sharing problem due to lack of padding
- MpscLinkedQueue extends AtomicReference and thus exposes various
  operations that mutates the internal state of the queue directly.

Modifications:

- Use AtomicReferenceFieldUpdater wherever possible so that we do not
  use Unsafe directly. (e.g. use lazySet() instead of putOrderedObject)
- Extend AbstractQueue to implement most operations
- Implement serialization and iterator()
- Rename tail to head and head to tail to reduce confusion.
- Rename Node.tail to Node.next.
- Fix a leak where the references in the removed head are not cleared
  properly.
- Add Node.clearMaybe() method so that the value of the new head node
  is cleared if possible.
- Add some comments for my own educational purposes
- Add padding to the head node
  - Add FullyPaddedReference and RightPaddedReference for future reuse
- Make MpscLinkedQueue package-local so that a user cannot access the
  dangerous yet public operations exposed by the superclass.
  - MpscLinkedQueue.Node becomes MpscLinkedQueueNode, a top level class

Result:

- It's more like a drop-in replacement of ConcurrentLinkedQueue for the
  MPSC case.
- Works without sun.misc.Unsafe
- Code potentially easier to understand
- Fixed leak (related: #2372)"
b2860792055428e02fa97c51abaa907a18139b0a,Initial STOMP protocol work from @sskachkov
a8143eda274ac1f44f7da770bd5ec13527ceb8e2,"Overall refactoring of the STOMP codec

- StompObject -> StompSubframe
- StompFrame -> StompHeadersSubframe
- StompContent -> StompContntSubframe
- FullStompFrame -> StompFrame
- StompEncoder/Decoder -> StompSubframeEncoder/Decoder
- StompAggregator -> StompSubframeAggregator
- Simplify the example
- Update Javadoc
- Miscellaneous cleanup"
8b0a0f9a8fd4ab8956fc959eb954dec6e3048b98,"Introduce MessageAggregator and DecoderResultProvider

Motivation:

We have different message aggregator implementations for different
protocols, but they are very similar with each other.  They all stems
from HttpObjectAggregator.  If we provide an abstract class that provide
generic message aggregation functionality, we will remove their code
duplication.

Modifications:

- Add MessageAggregator which provides generic message aggregation
- Reimplement all existing aggregators using MessageAggregator
- Add DecoderResultProvider interface and extend it wherever possible so
  that MessageAggregator respects the state of the decoded message

Result:

Less code duplication"
a852ee41543ba4fbd71ac61a6f7eec7999f7f776,"Fix StompSubframeEncoderTest failure

Motivation:

StompSubframeEncoderTest fails because StompHeaders does not respect the order of the headers set.

Modifications:

Use LinkedHashMap instead of HashMap

Result:

Fixes test failures"
61dbc353ca17af026d346b6fa83788a3ddcf8317,"[#2436] Unsafe*ByteBuf implementation should only invert bytes if ByteOrder differ from native ByteOrder

Motivation:
Our Unsafe*ByteBuf implementation always invert bytes when the native ByteOrder is LITTLE_ENDIAN (this is true on intel), even when the user calls order(ByteOrder.LITTLE_ENDIAN). This is not optimal for performance reasons as the user should be able to set the ByteOrder to LITTLE_ENDIAN and so write bytes without the extra inverting.

Modification:
- Introduce a new special SwappedByteBuf (called UnsafeDirectSwappedByteBuf) that is used by all the Unsafe*ByteBuf implementation and allows to write without inverting the bytes.
- Add benchmark
- Upgrade jmh to 0.8

Result:
The user is be able to get the max performance even on servers that have ByteOrder.LITTLE_ENDIAN as their native ByteOrder."
f402350d76e764ee0667b1d02563abe53df7eb6a,"[#2544] Correctly parse Multipart-mixed POST HTTP request in case of entity ends with odd number of 0x0D

Motivation:
When an attribute is ending with an odd number of CR (0x0D), the decoder
add an extra CR in the decoded attribute and should not.

Modifications:
Each time a CR is detected, the next byte was tested to be LF or not. If
not, in a number of places, the CR byte was lost while it should not be.
When a CR is detected, if the next byte is not LF, the CR byte should be
saved as the position point to the next byte (not LF). When a CR is
detected, if there is not yet other available bytes, the position is
reset to the position of CR (since a LF could follow).

A new Junit test case is added, using DECODER and variable number of CR
in the final attribute (testMultipartCodecWithCRasEndOfAttribute).

Result:
The attribute is now correctly decoded with the right number of CR
ending bytes."
8074b5c6ee21b4898bb557fffc93e0ccab2d3c1e,"[#2542] HTTP post request decoder does not support quoted boundaries

Motivation:
According to RFC2616 section 19, boundary string could be quoted, but
currently the PostRequestDecoder does not support it while it should.

Modifications:
Once the boundary is found, one check is made to verify if the boundary
is ""quoted"", and if so, it is ""unqoted"".

Note: in following usage of this boundary (as delimiter), quote seems no
more allowed according to the same RFC, so the reason that only the
boundary definition is corrected.

Result:
Now the boundary could be whatever quoted or not. A Junit test case
checks it."
e3c76ec10617b4b29a08e2631e4e3a1d2d2a88e8,"DNS codec for Netty which is based on the work of [#1622].

Motivation:
As part of GSOC 2013 we had @mbakkar working on a DNS codec but did not integrate it yet as it needs some cleanup. This commit is based on @mbakkar's work and provide the codec for DNS.

Modifications:
Add DNS codec

Result:
Reusable DNS codec will be included in netty.

This PR also includes a AsynchronousDnsResolver which allows to resolve DNS entries in a non blocking way by make use
of the dns codec and netty transport itself."
8180f7922f40b099780ae13be3e1b6d45a32b3ff,"Optimize DefaultChannelPipeline in terms of memory usage and initialization time

Motivation:
Each of DefaultChannelPipeline instance creates an head and tail that wraps a handler. These are used to chain together other DefaultChannelHandlerContext that are created once a new ChannelHandler is added. There are a few things here that can be improved in terms of memory usage and initialization time.

Modification:
- Only generate the name for the tail and head one time as it will never change anyway
- Rename DefaultChannelHandlerContext to AbstractChannelHandlerContext and make it abstract
- Create a new DefaultChannelHandlerContext that is used when a ChannelHandler is added to the DefaultChannelPipeline
- Rename TailHandler to TailContext and HeadHandler to HeadContext and let them extend AbstractChannelHandlerContext. This way we can save 2 object creations per DefaultChannelPipeline

 Result:
- Less memory usage because we have 2 less objects per DefaultChannelPipeline
- Faster creation of DefaultChannelPipeline as we not need to generate the name for the head and tail"
3d81afb8a5ec31420fb503bc9476ecf23bb6bbfa,"Make sure cancelled Timeouts are able to be GC'ed fast.

Motivation:
At the moment the HashedWheelTimer will only remove the cancelled Timeouts once the HashedWheelBucket is processed again. Until this the instance will not be able to be GC'ed as there are still strong referenced to it even if the user not reference it by himself/herself. This can cause to waste a lot of memory even if the Timeout was cancelled before.

Modification:
Add a new queue which holds CancelTasks that will be processed on each tick to remove cancelled Timeouts. Because all of this is done only by the WorkerThread there is no need for synchronization and only one extra object creation is needed when cancel() is executed. For addTimeout(...) no new overhead is introduced.

Result:
Less memory usage for cancelled Timeouts."
2a2a21ec59e4903d48b7f56ffc78a9f183e99813,"Introduce FastThreadLocal which uses an EnumMap and a predefined fixed set of possible thread locals

Motivation:
Provide a faster ThreadLocal implementation

Modification:
Add a ""FastThreadLocal"" which uses an EnumMap and a predefined fixed set of possible thread locals (all of the static instances created by netty) that is around 10-20% faster than standard ThreadLocal in my benchmarks (and can be seen having an effect in the direct PooledByteBufAllocator benchmark that uses the DEFAULT ByteBufAllocator which uses this FastThreadLocal, as opposed to normal instantiations that do not, and in the new RecyclableArrayList benchmark);

Result:
Improved performance"
681d4609382f9741325b0b2743eb19b85352f425,"Introduce TextHeaders and AsciiString

Motivation:

We have quite a bit of code duplication between HTTP/1, HTTP/2, SPDY,
and STOMP codec, because they all have a notion of 'headers', which is a
multimap of string names and values.

Modifications:

- Add TextHeaders and its default implementation
- Add AsciiString to replace HttpHeaderEntity
  - Borrowed some portion from Apache Harmony's java.lang.String.
- Reimplement HttpHeaders, SpdyHeaders, and StompHeaders using
  TextHeaders
- Add AsciiHeadersEncoder to reuse the encoding a TextHeaders
  - Used a dedicated encoder for HTTP headers for better performance
    though
- Remove shortcut methods in SpdyHeaders
- Replace SpdyHeaders.getStatus() with HttpResponseStatus.parseLine()

Result:

- Removed quite a bit of code duplication in the header implementations.
- Slightly better performance thanks to improved header validation and
  hash code calculation"
c076c3390145c1a71d481b44278850d3c11ec88b,"Backport the additional AsciiString/TextHeader changes from master

- Add useful static methods to AsciiString
- Add more getters in TextHeaders
- Remove unnecessary utility methods in SpdyHttpHeaders"
776ac4ba190b6eeaaadca29438509ba3eb8ec80e,Use FastThreadLocal in more places
a1e3c17eae63711538dde7969794180586e58727,export sun security packages as optional
984b0aa961b21845ab92cd2cddab3f2ee354f4f1,"[#2572] Correctly calculate length of output buffer before inflate to fix IndexOutOfBoundException

Motivation:

JdkZlibDecoder fails to decode because the length of the output buffer is not calculated correctly.
This can cause an IndexOutOfBoundsException or data-corruption when the PooledByteBuffAllocator is used.

Modifications:

Correctly calculate the length

Result:

No more IndexOutOfBoundsException or data-corruption."
066f95d0472b9535f398019eb1012f4641dcf65e,"[#2573] UnpooledUnsafeDirectByteBuf.setBytes(int,ByteBuf,int,int) fails to use fast-path when src has array

Motivation:

UnpooledUnsafeDirectByteBuf.setBytes(int,ByteBuf,int,int) fails to use fast-path when src uses an array as backing storage. This is because the if else uses the wrong ByteBuf for its check.

Modifications:

- Use correct ByteBuf when check for array as backing storage
- Also eliminate unecessary check in UnpooledDirectByteBuf which always fails anyway

Result:

Faster setBytes(...) when src ByteBuf is backed by an array.

No more IndexOutOfBoundsException or data-corruption."
4d60ea2aeb1071bebcd6471b550e6648a9fe05a1,"Fix incorrect method signature of awaitInactivity()

- Related: #2084"
375da788e7d2d249befe9a439bc1115b5ca4c183,"[#2577] ChannelOutboundBuffer.addFlush() unnecessary loop through all entries on multiple calls

Motivation:

If ChannelOutboundBuffer.addFlush() is called multiple times and flushed != unflushed it will still loop through all entries that are not flushed yet even if it is not needed anymore as these were marked uncancellable before.

Modifications:

Check if new messages were added since addFlush() was called and only if this was the case loop through all entries and try to mark the uncancellable.

Result:

Less overhead when ChannelOuboundBuffer.addFlush() is called multiple times without new messages been added."
ad86ec798d20cfd825aebf50cf14b7bb29cfae93,"Move calculateNewCapacity(...) to ByteBufAllocator

Motivation:

Currently we have the algorithm of calculate the new capacity of a ByteBuf implemented in AbstractByteBuf. The problem with this is that it is impossible for a user to change it if it not fits well it's use-case. We should better move it to ByteBufAllocator and so let the user implement it's own by either write his/her own ByteBufAllocator or just override the default implementation in one of our provided ByteBufAllocators.

Modifications:

Move calculateNewCapacity(...) to ByteBufAllocator and move the implementation (which was part of AbstractByteBuf) to AbstractByteBufAllocator.

Result:

The user can now override the default calculation algorithm when needed."
061cb216899f1c091afe81b0906a22e9937096e7,"Make use of AtomicLongFieldUpdater.addAndGet(...) for cleaner code

Motivation:

The code in ChannelOutboundBuffer can be simplified by using AtomicLongFieldUpdater.addAndGet(...)

Modification:

Replace our manual looping with AtomicLongFieldUpdater.addAndGet(...)

Result:

Cleaner code"
7ee18e92f9fd21009300f4adf0654fe6a82f5a09,Small improvement in SimpleChannelInboundHandlerAdapter javadoc
085a61a310187052e32b4a0e7ae9700dbe926848,"Refactor FastThreadLocal to simplify TLV management

Motivation:

When Netty runs in a managed environment such as web application server,
Netty needs to provide an explicit way to remove the thread-local
variables it created to prevent class loader leaks.

FastThreadLocal uses different execution paths for storing a
thread-local variable depending on the type of the current thread.
It increases the complexity of thread-local removal.

Modifications:

- Moved FastThreadLocal and FastThreadLocalThread out of the internal
  package so that a user can use it.
- FastThreadLocal now keeps track of all thread local variables it has
  initialized, and calling FastThreadLocal.removeAll() will remove all
  thread-local variables of the caller thread.
- Added FastThreadLocal.size() for diagnostics and tests
- Introduce InternalThreadLocalMap which is a mixture of hard-wired
  thread local variable fields and extensible indexed variables
- FastThreadLocal now uses InternalThreadLocalMap to implement a
  thread-local variable.
- Added ThreadDeathWatcher.unwatch() so that PooledByteBufAllocator
  tells it to stop watching when its thread-local cache has been freed
  by FastThreadLocal.removeAll().
- Added FastThreadLocalTest to ensure that removeAll() works
- Added microbenchmark for FastThreadLocal and JDK ThreadLocal
- Upgraded to JMH 0.9

Result:

- A user can remove all thread-local variables Netty created, as long as
  he or she did not exit from the current thread. (Note that there's no
  way to remove a thread-local variable from outside of the thread.)
- FastThreadLocal exposes more useful operations such as isSet() because
  we always implement a thread local variable via InternalThreadLocalMap
  instead of falling back to JDK ThreadLocal.
- FastThreadLocalBenchmark shows that this change improves the
  performance of FastThreadLocal even more."
3d3ec4753d5191b74125d5a7f065b818d052d84e,"[#2586] Use correct EventLoop to notify delayed successful registration

Motivation:

At the moment AbstractBoostrap.bind(...) will always use the GlobalEventExecutor to notify the returned ChannelFuture if the registration is not done yet. This should only be done if the registration fails later. If it completes successful we should just notify with the EventLoop of the Channel.

Modification:

Use EventLoop of the Channel if possible to use the correct Thread to notify and so guaranteer the right order of events.

Result:

Use the correct EventLoop for notification"
371f8066d2502f6c6d75c5d0f80cd25e19b5e58b,"[#2580] [#2587] Fix buffer corruption regression when ByteBuf.order(LITTLE_ENDIAN) is used

Motivation:

To improve the speed of ByteBuf with order LITTLE_ENDIAN and where the native order is also LITTLE_ENDIAN (intel) we introduces a new special SwappedByteBuf before in commit 4ad3984c8b725ef59856d174d09d1209d65933fc. Unfortunally the commit has a flaw which does not handle correctly the case when a ByteBuf expands. This was caused because the memoryAddress was cached and never changed again even if the underlying buffer expanded. This can lead to corrupt data or even to SEGFAULT the JVM if you are lucky enough.

Modification:

Always lookup the actual memoryAddress of the wrapped ByteBuf.

Result:

No more data-corruption for ByteBuf with order LITTLE_ENDIAN and no JVM crashes."
f05510063ecf567f0b7a1ad598c917c1feb047a7,Remove System.out.println(...) debug messages
81e5f1ad4665d3591b512dc3b6392eb547baeb65,"[#2589] LocalServerChannel.doClose() throws NPE when localAddress == null

Motivation:

LocalServerChannel.doClose() calls LocalChannelRegistry.unregister(localAddress); without check if localAddress is null and so produce a NPE when pass null the used ConcurrentHashMapV8

Modification:
Check for localAddress != null before try to remove it from Map. Also added a unit test which showed the stacktrace of the error.

Result:

No more NPE during doClose()."
6bd8c5d4d0128e645ac63aaa28de130d3ebef27d,"Improve the allocation algorithm in PoolChunk

Motivation:

Depth-first search is not always efficient for buddy allocation.

Modification:

Employ a new faster search algorithm with different memoryMap layout.

Result:

With thread-local cache disabled, we see a lot of performance
improvment, especially when the size of the allocation is as small as
the page size, which had the largest search space previously:

-- master head --
Benchmark                (size) Mode    Score  Error Units
pooledDirectAllocAndFree  8192 thrpt  215.392  1.565 ops/ms
pooledDirectAllocAndFree 16384 thrpt  594.625  2.154 ops/ms
pooledDirectAllocAndFree 65536 thrpt 1221.520 18.965 ops/ms
pooledHeapAllocAndFree    8192 thrpt  217.175  1.653 ops/ms
pooledHeapAllocAndFree   16384 thrpt  587.250 14.827 ops/ms
pooledHeapAllocAndFree   65536 thrpt 1217.023 44.963 ops/ms

-- changes --
Benchmark                (size) Mode    Score  Error Units
pooledDirectAllocAndFree  8192 thrpt 3656.744 94.093 ops/ms
pooledDirectAllocAndFree 16384 thrpt 4087.152 22.921 ops/ms
pooledDirectAllocAndFree 65536 thrpt 4058.814 29.276 ops/ms
pooledHeapAllocAndFree    8192 thrpt 3640.355 44.418 ops/ms
pooledHeapAllocAndFree   16384 thrpt 4030.206 24.365 ops/ms
pooledHeapAllocAndFree   65536 thrpt 4103.991 70.991 ops/ms"
f67ac5e46df4bcb72d30ed8b92af262709c949e1,"Fix the inconsistencies between performance tests in ByteBufAllocatorBenchmark

Motivation:

default*() tests are performing a test in a different way, and they must be same with other tests.

Modification:

Make sure default*() tests are same with the others

Result:

Easier to compare default and non-default allocators"
02a6dc8ba79783360d84cc6311e3a5aa03748c30,"Adding int-to-object map implementation.

Motivation:

Maps with integer keys are used in several places (HTTP/2 code, for
example). To reduce the memory footprint of these structures, we need a
specialized map class that uses ints as keys.

Modifications:

Added IntObjectHashMap, which is uses open addressing and double hashing
for collision resolution.

Result:

A new int-based map class that can be shared across Netty."
d7b2affe321edeaa51c1fa7bb3df9a5badb4728a,"Add HAProxy protocol decoder

Motivation:

The proxy protocol provides client connection information for proxied
network services. Several implementations exist (e.g. Haproxy, Stunnel,
Stud, Postfix), but the primary motivation for this implementation is to
support the proxy protocol feature of Amazon Web Services Elastic Load
Balancing.

Modifications:

This commit adds a proxy protocol decoder for proxy protocol version 1
as specified at:

  http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt

The foundation for version 2 support is also in this commit but it is
explicitly NOT supported due to a lack of external implementations to
test against.

Result:

The proxy protocol decoder can be used to send client connection
information to inbound handlers in a channel pipeline from services
which support the proxy protocol."
8c25830b0b4d2dc7eb9f0e309bdabf60056151b4,Move haproxy codec to a separate module
3900d1c6656f617fd029b16ff1767aceaca083bb,"Overall refactoring of the haproxy codec

- Convert constant classes to enum
- Rename HAProxyProtocolMessage to HAProxyMessage for simpilicity
- Rename HAProxyProtocolDecoder to HAProxyMessageDecoder
- Rename HAProxyProtocolCommand to HAProxyCommand
- Merge ProxiedProtocolAndFamity, ProxiedAddressFamily, and
  ProxiedTransportProtocol into HAProxiProxiedProtocol and its inner
  enums
- Overall clean-up"
e274a6549c5c6bcedc11d8fd088f621b8d028084,Checkstyle
1ba5fa4b4bdd923d8db7a5adef5f59d4e6d06e61,"Add MQTT protocol codec

MQTT is a open source protocol on top of TCP which is widely used in
mobile communication and also for IoT (Internet of Things) today. This
will add an open source implementation of MQTT so that it becomes easier
for Netty users to implement an MQTT application.

For more information about the MQTT protocol, read this:

http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html"
00d2cea8bad744d15a5daed1e36590308f715ee3,"Overall clean-up on codec-mqtt

- Use simple string concatenation instead of String.format()
- Rewrite exception messages so that it follows our style
- Merge MqttCommonUtil and MqttValidationUtil into MqttCodecUtil
- Hide MqttCodecUtil from users
- Rename MqttConnectReturnCode.value to byteValue
- Rename MqttMessageFactory.create*() to new*()
- Rename QoS to MqttQoS
- Make MqttSubAckPayload.grantedQoSLevels immutable and add more useful
  constructor"
cd8e35e95a859fda654e379250a3dff9f1436b73,Fix test failures due to incorrect validation
c65d5b170df2a91735a4ad9e6ccafc45a545d105,Mqtt -> MQTT
32aab3b0b321be5e050bcbba540c81fd661124c0,"Fix false sharing between head and tail reference in MpscLinkedQueue

Motivation:

The tail node reference writes (by producer threads) are very likely to
invalidate the cache line holding the headRef which is read by the
consumer threads in order to access the padded reference to the head
node. This is because the resulting layout for the object is:

- header
- Object AtomicReference.value -> Tail node
- Object MpscLinkedQueue.headRef -> PaddedRef -> Head node

This is 'passive' false sharing where one thread reads and the other
writes.  The current implementation suffers from further passive false
sharing potential from any and all neighbours to the queue object as no
pre/post padding is provided for the class fields.

Modifications:

Fix the memory layout by adding pre-post padding for the head node and
putting the tail node reference in the same object.

Result:

Fixed false sharing"
a368f9d12a68873241c240f1bf06308c97648d9e,Checkstyle / Overall clean-up / Fix serialization
f44720850c6d1459f651b44e098513789273fabb,Add missing last padding / Comment
cdaeb54fb9d957a0e1b84efc27502f5dc4ebd63c,"Remove padding utility classes

- It's not used anywhere"
e99f26fe096c115f24a6eac0824853d7c541e55a,Make sure OpenSslEngine is tested against transport-native-epoll
37b07a04d404422e42c275f8665f50a8f2122d58,"Revert ""Improve the allocation algorithm in PoolChunk""

This reverts commit 36305d7dcee60bac9d353ba12e044c260435da57, which
seems to cause an assertion failure on our CI machine."
4036eda048e053007a2e4480998267b9a055225f,Make use of HttpChunkedInput as this will also work when compression is used
12a3e23e4731eb53b88dedb2d9d8139f8b1a588c,"MessageToByteEncoder always starts with ByteBuf that use initalCapacity == 0

Motivation:

MessageToByteEncoder always starts with ByteBuf that use initalCapacity == 0 when preferDirect is used. This is really wasteful in terms of performance as every first write into the buffer will cause an expand of the buffer itself.

Modifications:

 - Change ByteBufAllocator.ioBuffer() use the same default initialCapacity as heapBuffer() and directBuffer()
 - Add new allocateBuffer method to MessageToByteEncoder that allow the user to do some smarter allocation based on the message that will be encoded.

Result:

Less expanding of buffer and more flexibilty when allocate the buffer for encoding."
f9021a60611d472dee48573ecf36624102487c00,"Implement a Bzip2Decoder

Motivation:

Bzip2Decoder provides receiving data compressed in bzip2 format.

Modifications:

Added classes:
- Bzip2Decoder
- Bzip2Constants
- Bzip2BlockDecompressor
- Bzip2HuffmanStageDecoder
- Bzip2MoveToFrontTable
- Bzip2Rand
- Crc32
- Bzip2DecoderTest

Result:

Implemented and tested new decoder which can uncompress incoming data in bzip2 format."
3c21b1cc4343b4a95c59dd197d0a2d50bac6cb83,"Fix buffer leak in DefaultFullBinaryMemcacheRequest/Response

Motivation:

DefaultFullBinaryMemcacheRequest/Response overrides release(), retain(),
and touch() methods without calling its super, resulting in a leak of
the extras.

Modifications:

When overriding release(), retain(), and touch(), ensure to call super.

Result:

Fixes #2533 by fixing the buffer leak"
cde319dabd52d39fbcbf94179f31d32b8da27b7b,"Adhere to our getter/setter naming rules

Motivation:

Persuit for consistent method naming across all classes

Modifications:

Remove 'get' prefix for the getter methods in codec-memcache

Result:

More consistent method naming"
33b9bc02ed7f08959c33acfef44323fadc1eb23a,"Fix potential buffer leak in AbstractBinaryMemcacheDecoder

If a connection is closed unexpectedly while
AbstractBinaryMemcacheDecoder decodes a message, the half-constructed
message's content might not be released."
45fde9abba8732a0dd18d166d521eb6ac77ccbaa,"Rename fromByte() to valueOf()

Motivation:

Persuit the consistency in method naming

Modifications:

Rename fromByte(byte) to valueOf(byte)

Result:

Consistency"
448b0105b467ea5821f741be5256352ee8b52a54,"Deprecate SocksMessage.encodeAsByteBuf()

It was an internal use only method which became public by a mistake
during the review process."
bf85af57438b943a0982bc67087a747309fd6730,Fix buffer leaks in Bzip2DecoderTest
030bcaae816ea070b630e8d46990495adb57ae79,"Improve performance of Recycler

Motivation:

Recycler is used in many places to reduce GC-pressure but is still not as fast as possible because of the internal datastructures used.

Modification:

 - Rewrite Recycler to use a WeakOrderQueue which makes minimal guaranteer about order and visibility for max performance.
 - Recycling of the same object multiple times without acquire it will fail.
 - Introduce a RecyclableMpscLinkedQueueNode which can be used for MpscLinkedQueueNodes that use Recycler

These changes are based on @belliottsmith 's work that was part of #2504.

Result:

Huge increase in performance.

4.0 branch without this commit:

Benchmark                                                (size)   Mode   Samples        Score  Score error    Units
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00000  thrpt        20 116026994.130  2763381.305    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00256  thrpt        20 110823170.627  3007221.464    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    01024  thrpt        20 118290272.413  7143962.304    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    04096  thrpt        20 120560396.523  6483323.228    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    16384  thrpt        20 114726607.428  2960013.108    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    65536  thrpt        20 119385917.899  3172913.684    ops/s
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 297.617 sec - in io.netty.microbench.internal.RecyclableArrayListBenchmark

4.0 branch with this commit:

Benchmark                                                (size)   Mode   Samples        Score  Score error    Units
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00000  thrpt        20 204158855.315  5031432.145    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    00256  thrpt        20 205179685.861  1934137.841    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    01024  thrpt        20 209906801.437  8007811.254    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    04096  thrpt        20 214288320.053  6413126.689    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    16384  thrpt        20 215940902.649  7837706.133    ops/s
i.n.m.i.RecyclableArrayListBenchmark.recycleSameThread    65536  thrpt        20 211141994.206  5017868.542    ops/s
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 297.648 sec - in io.netty.microbench.internal.RecyclableArrayListBenchmark"
5275f37ffb942b5ccd8cedef009822cf9cf7b486,Fix a typo in comment
41d44a8161ac394af674362c149d764121d49ccb,"Remove 'get' prefix from all HTTP/SPDY messages

Motivation:

Persuit for the consistency in method naming

Modifications:

- Remove the 'get' prefix from all HTTP/SPDY message classes
- Fix some inspector warnings

Result:

Consistency"
4b4f4e619e776e661e439ee6f6f89d4f4e123291,"Fix integer overflow in HttpObjectEncoder when handling chunked encoding and FileRegion > Integer.MAX_VALUE

Motivation:

Due to integer overflow bug, writes of FileRegions to http server pipeline (eg like one from HttpStaticFileServer example) with length greater than Integer.MAX_VALUE are ignored in 1/2 of cases (ie no data gets sent to client)

Modification:

Correctly handle chunk sized > Integer.MAX_VALUE

Result:

Be able to use FileRegion > Integer.MAX_VALUE when using chunked encoding."
8a75ba35ef0908529bccd85e5c08bdb6f5fb04bc,"[#2599] Not use sun.nio.ch.DirectBuffer as it not exists on android

Motivation:

During some refactoring we changed PlatformDependend0 to use sun.nio.ch.DirectBuffer for release direct buffers. This broke support for android as the class does not exist there and so an exception is thrown.

Modification:

Use again the fieldoffset to get access to Cleaner for release direct buffers.

Result:
Netty can be used on android again"
31211487e9e27e030646d070f43cc31f3f12f72e,"Use IntObjectMap to replace Map in EpollEventLoop.

Motivation:

We need to map from ints to AbstractEpollChannel in EpollEventLoop but there is no need for box to Integer.

Modification:

Replace Map with IntObjectMap.

Result:

No more auto-boxing needed."
56d732d43995b31d1ec040007efd730fd18aa1ac,Fix buffer leaks in Bzip2DecoderTest
69a6ad940a88005f83dfff86f0b1eea6d567a190,"Improve the allocation algorithm in PoolChunk

Motivation:

Depth-first search is not always efficient for buddy allocation.

Modification:

Employ a new faster search algorithm with different memoryMap layout.

Result:

With thread-local cache disabled, we see a lot of performance
improvment, especially when the size of the allocation is as small as
the page size, which had the largest search space previously."
dbc011c3f40c093057dfb9fd1cedf4bc783bd250,Fix inspector warnings
c0462c0c3bdd7d802dd220e0c830e2caa87989e6,"Optimize PoolChunk

- Using short[] for memoryMap did not improve performance. Reverting
  back to the original dual-byte[] structure in favor of simplicity.
- Optimize allocateRun() which yields small performence improvement
- Use local variable when member fields are accessed more than once"
5f889d92a14ab6ddb80903988b92c19766215737,"Fix buffer leaks in Bzip2Decoder(Test)

If decompression fails, the buffer that contains the decompressed data
is not released.  Bzip2DecoderTest.testStreamCrcError() also does not
release the partial output Bzip2Decoder produces."
937f790f7098da5eea31b9856cf0bfb92d4bb95e,Checkstyle
4d2b78ca3cd0ffe43340fe4c4cc98b6c8f24328f,"Reduce the memory copies in JdkZlibEncoder

Motivation:

At the moment we use a lot of unnecessary memory copies in JdkZlibEncoder. This is caused by either allocate a to small ByteBuf and expand it later or using a temporary byte array.
Beside this the memory footprint of JdkZlibEncoder is pretty high because of the byte[] used for compressing.

Modification:

- Override allocateBuffer(...) and calculate the estimatedsize in there, this reduce expanding of the ByteBuf later
- Not use byte[] in the instance itself but allocate a heap ByteBuf and write directly into the byte array

Result:

Less memory copies and smaller memory footprint"
d2e385acc2afe12f50dafd66385f63c4c6316e83,"Fix incorrect bytesBefore/indexOf() in ReplayingDecoderBuffer

Motivation:

bytesBefore(length, ...), bytesBefore(index, length, ...), and
indexOf(fromIndex, toIndex,...) in ReplayingDecoderBuffer are buggy.
They trigger 'REPLAY even when they don't need to.

Modification:

Implement the buggy methods properly so that REPLAYs are not triggered
unnecessarily.

Result:

Correct behvaior"
b0e5c9be009bf4b481144432b711e167d16ebc8b,"[#2605] Use SO_REUSEADDR on EpollServerSocketChannel to match defaults of java.nio.ServerSocketChannel impl

Motivation:

When using openjdk and oracle jdk's nio (while using the nio transport) the ServerSocketChannel uses SO_REUSEADDR by default. Our native transport should do the same to make it easier to switch between the different implementations and get the expected result.

Modification:

Change EpollServerSocketChannelConfig to set SO_REUSEADDR on the created socket.

Result:

SO_REUSEADDR is used by default on servers."
76cd3a37e5ea33c7d79d6aa6dace5167bd60f8a0,"[#2598] Add Epoll.isAvailable() which allows to check if epoll can be used.

Motivation:

At the moment there is no simple way for a user to check if the native epoll transport can be used on the running platform. Thus the user can only try to instance it and catch any exception and fallback to nio transport.

Modification:

Add Epoll.isAvailable() which allows to check if epoll can be used.

Result:

User can easily check if epoll transport can be used or not"
c4441642bb26647afd64f9011644c4b904b03505,Fix inconsistent code in the doc
90c65b7157c17816683910156e46cd8ffb186ef9,"[#2604] Not try to use sun.misc.Cleaner when on android

Motivation:

When a user tries to use netty on android it currently fails with ""Could not find class 'sun.misc.Cleaner'""

Modification:

Encapsulate sun.misc.Cleaner usage in extra class to workaround this isssue.

Result:
Netty can be used on android again"
2c0ecd9d4435f6fedd34829bba3a463fdae0f0af,"Remove the deprecated methods in SPDY

SPDY is an experimental package. No need to keep ABI compatibility."
520479d43bd29f7a6df0d5f4a5d4ace8d10e463c,"Enable verbose:gc only when 'leak' profile is disabled

The leak profile generates a lot of garbage which makes the verbose:gc
output too large."
cd62f2f21e26f1e0ea2cea764b496cbc0154ffac,"Upgrade JACOCO to the latest version

.. to fix the build errors triggered by the old JACOCO release"
8bf8252060fdc04b7dcf147140154db87a51c8bd,"[#2615] Correctly update SelectionKey after selector rebuild

Motivation:

When a select rebuild was triggered the reference to the SelectionKey is not updated in AbstractNioChannel. This will cause a CancelledKeyException later.

Modification:

Correctly update SelectionKey reference after rebuild

Result:

Fix exception"
776f3aeb3db663c6b0adc4239bec80a8e5f2cffe,Let EpollReuseAddrTest also work with kernel versions that not have bugfix release part
2fa0b83e7345709873727ff695c4c2e9f93a7647,Cleanup comment / code
79195da0d7f6bec950aa148b9bafb69b4a8c0abc,fix example missing break statement in ReplayingDecoder
461d3c876f27c32eaa673f0d2073de0922ca4277,"Maintain decoder result in HttpObjectAggregator

Motivation:
DecodeResult is dropped when aggregate HTTP messages.

Modification:

Make sure we not drop the DecodeResult while aggregate HTTP messages.

Result:

Correctly include the DecodeResult for later processing."
9594a81b958cb22bc51d9e766477faa12e7a2d0d,"[#2622] Correctly check reference count before try to work on the underlying memory

Motivation:

Because of how we use reference counting we need to check for the reference count before each operation that touches the underlying memory. This is especially true as we use sun.misc.Cleaner.clean() to release the memory ASAP when possible. Because of this the user may cause a SEGFAULT if an operation is called that tries to access the backing memory after it was released.

Modification:

Correctly check the reference count on all methods that access the underlying memory or expose it via a ByteBuffer.

Result:

Safer usage of ByteBuf"
23840b76d7ffc29f6a5e9fac83d0d654b8fc1b68,"[#2623] Release local references to guard against StackOverflow in JNI

Motivation:

When we do a (env*)->GetObjectArrayElement(...) call we may created many local references which will only be cleaned up once we exist the native method. Thus a lot of memory can be used and so a StackOverFlow may be triggered. Beside this the JNI specification only say that an implementation must cope with 16 local references.

Modification:

Call (env*)->ReleaseLocalRef(...) to release the resource once not needed anymore.

Result:

Less memory usage and guard against StackOverflow"
36b80c25f76b766a823198d35e944842dcdb1714,"Correctly return from selector loop one a scheduled task is ready for processing

Motivation:

We use the nanoTime of the scheduledTasks to calculate the milli-seconds to wait for a select operation to select something. Once these elapsed we check if there was something selected or some task is ready for processing. Unfortunally we not take into account scheduled tasks here so the selection loop will continue if only scheduled tasks are ready for processing. This will delay the execution of these tasks.

Modification:

- Check if a scheduled task is ready after selecting
- also make a tiny change in NioEventLoop to not trigger a rebuild if nothing was selected because the timeout was reached a few times in a row.

Result:

Execute scheduled tasks on time."
7a05a617f6a68875b4ab56db0012086151684685,"[#2558] Define SO_REUSEPORT if not defined

Motivation:

Currently it is impossible to build netty on linux system that not define SO_REUSEPORT even if it is supported.

Modification:

Define SO_REUSEPORT if not defined.

Result:

Possible to build on more linux dists."
d0912f27091e4548466df81f545c017a25c9d256,"Fix most inspector warnings

Motivation:

It's good to minimize potentially broken windows.

Modifications:

Fix most inspector warnings from our profile
Update IntObjectHashMap

Result:

Cleaner code"
3c6bc0b4cbb1f5c87ee70186c3ed85e714c2f585,"Fix unclean backport in InternalLoggerFactory

.. which leaked in from d0912f27091e4548466df81f545c017a25c9d256"
fbf1bdbef15a21aa31b01119003190a55e88eb6b,"Fix the build timeout when 'leak' profile is active

Motivation:

AbstractByteBufTest.testInternalBuffer() uses writeByte() operations to
populate the sample data.  Usually, this isn't a problem, but it starts
to take a lot of time when the resource leak detection level gets
higher.

In our CI machine, testInternalBuffer() takes more than 30 minutes,
causing the build timeout when the 'leak' profile is active (paranoid
level resource detection.)

Modification:

Populate the sample data using ThreadLocalRandom.nextBytes() instead of
using millions of writeByte() operations.

Result:

Test runs much faster when leak detection level is high."
10623ae1332ed7bdd8e10e55f6166e5af2da515b,"Let OkResponseHandler extend SimpleChannelInboundHandler

Motivation:

OkResponseHandler is the last handler in the pipeline of the HTTP CORS
example.  It is responsible for releasing all messages it handled.

Modification:

Extend SimpleChannelInboundHandler instead of
ChannelInboundHandlerAdapter

Result:

Fixed a leak"
aed13ba5ef908397071a8d23c63c13357145efa4,"Split a JSON byte stream into JSON objects/arrays. Fixes #2536

Motivation:

See GitHub Issue #2536.

Modifications:

Introduce the class JsonObjectDecoder to split a JSON byte stream
into individual JSON objets/arrays.

Result:

A Netty application can now handle a byte stream where multiple JSON
documents follow eachother as opposed to only a single JSON document
per request."
d0b355b26e51d517db77172668b7c050e27c736f,Fix a buffer leak in JsonObjectDecoderTest
a1974ef35bbf01733a99c81d52fbeeb2709de073,Fix an inspector warning in JsonObjectDecoder
217fb0de055258b70e540d139ae945db94ee8390,"[#2618] Introduce ChannelPromise.unvoid() and ChannelFuture.isVoid()

Motivation:

There is no way for a ChannelHandler to check if the passed in ChannelPromise for a write(...) call is a VoidChannelPromise. This is a problem as some handlers need to add listeners to the ChannelPromise which is not possible in the case of a VoidChannelPromise.

Modification:

- Introduce ChannelFuture.isVoid() which will return true if it is not possible to add listeners or wait on the result.
- Add ChannelPromise.unvoid() which allows to create a ChannelFuture out of a void ChannelFuture which supports all the operations.

Result:

It's now easy to write ChannelHandler implementations which also works when a void ChannelPromise is used."
f8c95c3827bd88f51dfb5fd717930c33716c5c7c,"[#2586] Use correct EventLoop to notify delayed bind failures

Motivation:

When a bind fails AbstractBootstrap will use the GlobalEventExecutor to notify the ChannelPromise. We should use the EventLoop of the Channel if possible.

Modification:

Use EventLoop of the Channel if possible to use the correct Thread to notify and so guaranteer the right order of events.

Result:

Use the correct EventLoop for notification"
cde7157c3998cf6e7d773c861cd0d6b2a406da32,"Make JsonObjectDecoder discard everything after stream corruption

Motivation:

There's no way to recover from a corrupted JSON stream. The current
implementation will raise an infinite exception storm when a peer sends
a large corrupted stream.

Modification:

Discard everything once stream corruption is detected.

Result:

Fixes a buffer leak
Fixes exception storm"
11fdec3c4a740a84796f2b78ac302c87044a4080,"Log the time taken for generating the initialSeedUniquifier

- Sometimes useful to know it how long it takes from the log, to make
  sure it's not something else that is blocking."
5b87cdc8bdbeea22b6c5a39e8454a9c46c3c6665,"Reduce the perceived time taken to retrieve initialSeedUniquifier

Motivation:

When system is in short of entrophy, the initialization of
ThreadLocalRandom can take at most 3 seconds.  The initialization occurs
when ThreadLocalRandom.current() is invoked first time, which might be
much later than the moment when the application has started.  If we
start the initialization of ThreadLocalRandom as early as possible, we
can reduce the perceived time taken for the retrieval.

Modification:

Begin the initialization of ThreadLocalRandom in InternalLoggerFactory,
potentially one of the firstly initialized class in a Netty application.

Make DefaultChannelId retrieve the current process ID before retrieving
the current machine ID, because retrieval of a machine ID is more likely
to use ThreadLocalRandom.current().

Use a dummy channel ID for EmbeddedChannel, which prevents many unit
tests from creating a ThreadLocalRandom instance.

Result:

We gain extra 100ms at minimum for initialSeedUniquifier generation.  If
an application has its own initialization that takes long enough time
and generates good amount of entrophy, it is very likely that we will
gain a lot more."
97825598d2fd0df54f0686d6577a162e7f044b80,Fix another buffer leaks in JsonObjectDecoderTest
83eae705e134fca28c82f0326de5b7b56c160d56,[maven-release-plugin] prepare release netty-4.1.0.Beta1
787663a64447e8e1622e41d12397c72bb827fc9f,[maven-release-plugin] rollback the release of netty-4.1.0.Beta1
ba50cb829bb2a2dbbb88d80559f7ce0b1f6cb762,[maven-release-plugin] prepare release netty-4.1.0.Beta1
e167b02d5285f03799f9021e5f064555116df724,[maven-release-plugin] prepare for next development iteration
0fe2824729ee744f95ca18d6aa799919c4d0d17b,"Add missing m2eclipse life cycle mapping

Also, use ignore instead of execution because those plugins are not
really useful when building from Eclipse anyway."
33a810a513dc5d69ec171adb1c84378524e066e3,"Move generic code to HttpOrSpdyChooser to simplify implementations

Motivation:

HttpOrSpdyChooser can be simplified so the user not need to implement getProtocol(...) method.

Modification:

Add implementation for the method. The user can override it if necessary.

Result:

Easier usage of HttpOrSpdyChooser."
ac8ac591488b976aba5ebe7a1bbfb24f5e1ecc09,"[#2642] CompositeByteBuf.deallocate memory/GC improvement

Motivation:

CompositeByteBuf.deallocate generates unnecessary GC pressure when using the 'foreach' loop, as a 'foreach' loop creates an iterator when looping.

Modification:

Convert 'foreach' loop into regular 'for' loop.

Result:

Less GC pressure (and possibly more throughput) as the 'for' loop does not create an iterator"
fb22d3492542e33e6e380ceb8d862cfbb8f753a3,"[#2647] Respect IOV_MAX when call writev in native transport

Motivation:

epoll transport fails on gathering write of more then 1024 buffers. As linux supports max. 1024 iov entries when calling writev(...) the epoll transport throws an exception.

Thanks again to @blucas to provide me with a reproducer and so helped me to understand what the issue is.

Modifications:

Make sure we break down the writes if to many buffers are uses for gathering writes.

Result:

Gathering writes work with any number of buffers"
62bbd4220a977e02d8c2d16dcf7a3eb1954a2861,"Fix JVM segfault during JNI call. Part of [#2647]

Motivation:
Currently when Native.writev(...) is used it is possible to see a JVM segfault because the offset is updated to early.

Modification:
Only update the offset once it is safe to do so.

Result:
No more segfault"
deda8f15a20e6836f62c6a1f7ac1371ac722003c,"Moved bit-level read operations from Bzip2Decoder to the new Bzip2BitReader

Motivation:

Collect all bit-level read operations in one class is better. And now it's easy to use not only in Bzip2Decoder. For example, in Bzip2HuffmanStageDecoder.

Modifications:

Created a new class - Bzip2BitReader which provides bit-level reads.
Removed bit-level read operations from Bzip2Decoder.
Improved javadoc.

Result:

Bzip2BitReader allows the reading of single bit booleans, bit strings of arbitrary length (up to 24 bits), and bit aligned 32-bit integers."
17280116c48b91c2dd8988d625f749318150de3b,"[#2643] Throw TooLongFrameException instead of using fireExceptionCaught

Motivation:

It's not always the case that there is another handler in the pipeline that will intercept the exceptionCaught event because sometimes users just sub-class. In this case the exception will just hit the end of the pipeline.

Modification:
Throw the TooLongFrameException so that sub-classes can handle it in the exceptionCaught(...) method directly.

Result:
Sub-classes can correctly handle the exception,"
81126ab42973bcb53b71621d750b600fe0bdaa64,Fix checkstyle error introduced by 52cb55d3887034df778575799fdd00f174495809
909d1f2c0f746d288ddbd9bcdd10d7390e5d3f2a,"Reuse previous created HttpHeaders by HttpObjectAggregator

Motivation:

HttpObjectAggregator currently creates a new FullHttpResponse / FullHttpRequest for each message it needs to aggregate. While doing so it also creates 2 DefaultHttpHeader instances (one for the headers and one for the trailing headers). This is bad for two reasons:
  - More objects are created then needed and also populate the headers is not for free
  - Headers may get validated even if the validation was disabled in the decoder

Modification:

- Wrap the previous created HttpResponse / HttpRequest and so reuse the original HttpHeaders
- Reuse the previous created trailing HttpHeader.
- Fix a bug where the trailing HttpHeader was incorrectly mixed in the headers.

Result:

- Less GC
- Faster HttpObjectAggregator implementation"
8edfde3f26fe6b52aa4b899ece870bcba730a0e6,"[#2650] Allow to disable http header validation in SpdyHttpDecoder and SpdyHttpCodec

Motivation:

HTTP header validation can be expensive so we should allow to disable it like we do in HttpObjectDecoder.

Modification:

Add constructor argument to disable validation.

Result:
Performance improvement"
8b0bc7f33dc4a303916a08f414cb5815b3912181,"[#2651] Fix possible infinite-loop when cancel tasks

Motivations:
In our new version of HWT we used some kind of lazy cancelation of timeouts by put them back in the queue and let them pick up on the next tick. This  multiple problems:
 - we may corrupt the MpscLinkedQueue if the task is used as tombstone
 - this sometimes lead to an uncessary delay especially when someone did executed some ""heavy"" logic in the TimeTask

Modifications:
Use a Lock per HashedWheelBucket for save and fast removal.

Modifications:
Cancellation of tasks can be done fast and so stuff can be GC'ed and no more infinite-loop possible"
c75783abb5aa3419039c1736bfbd150431f15eb3,Fix over-sensible testcase
93c306602abff12145a0036bbc1b504c864782f5,"[#2653] Remove uncessary range checks for performance reasons

Motivation:

I introduced range checks as part of 6c47cc97111146396d2daf1a97051135d2eaf69e in some places. Unfortunally I also added some where these are not needed and so caused a performance regression.

Modification:

Remove range checks where not needed

Result:

Fixed performance regression."
f88dfd043030fd7ef68cd02d71894127cea35eab,"[#2653] Remove unnecessary ensureAccessible() calls

Motivation:

I introduced ensureAccessible() class as part of 6c47cc97111146396d2daf1a97051135d2eaf69e in some places. Unfortunally I also added some where these are not needed and so caused a performance regression.

Modification:

Remove calls where not needed.

Result:

Fixed performance regression."
7d8d9b2c6e07e7f0b7356dd96170572ac0412d0d,"Fixed NPE in WebSocket00FrameDecoder if end couldn't be found in text frame

Motivation:
When we receive an incomplete WebSocketFrame we need to make sure to wait for more data. Because we not did this we could produce a NPE.

Modification:
Make sure we not try to add null into the RecyclableArrayList

Result:
no more NPE on incomplete frames."
3c6017a9b1237eba5d79caca03b90efadedf2540,"Implemented LZF compression codec

Motivation:

LZF compression codec provides sending and receiving data encoded by very fast LZF algorithm.

Modifications:

- Added Compress-LZF library which implements LZF algorithm
- Implemented LzfEncoder which extends MessageToByteEncoder and provides compression of outgoing messages
- Added tests to verify the LzfEncoder and how it can compress data for the next uncompression using the original library
- Implemented LzfDecoder which extends ByteToMessageDecoder and provides uncompression of incoming messages
- Added tests to verify the LzfDecoder and how it can uncompress data after compression using the original library
- Added integration tests for LzfEncoder/Decoder

Result:

Full LZF compression codec which can compress/uncompress data using LZF algorithm."
ed7240b597adfb1c0851a6e988bba6fdd68ae202,"Implemented a Bzip2Encoder

Motivation:

Bzip2Encoder provides sending data compressed in bzip2 format.

Modifications:

Added classes:
- Bzip2Encoder
- Bzip2BitWriter
- Bzip2BlockCompressor
- Bzip2DivSufSort
- Bzip2HuffmanAllocator
- Bzip2HuffmanStageEncoder
- Bzip2MTFAndRLE2StageEncoder
- Bzip2EncoderTest

Modified classes:
- Bzip2Constants (splited BLOCK_HEADER_MAGIC and END_OF_STREAM_MAGIC)
- Bzip2Decoder (use splited magic numbers)

Added integration tests for Bzip2Encoder/Decoder

Result:

Implemented new encoder which can compress outgoing data in bzip2 format."
89261fd8df9b4bfab949c5e23cfcdb523f43914e,"[#2664] Support write-spinning also in native transport

Motivation:

In our nio implementation we use write-spinning for maximize throughput, but in the native implementation this is not used.

Modification:

Respect writeSpinCount in native transport.

Result:

Better throughput"
4db6c655349df5581332dac5059a67f087756158,"[#2647] Handle IOV_MAX in java code

Motivation:

The handling of IOV_MAX was done in JNI code base which makes stuff really complicated to maintain etc.

Modifications:

Move handling of IOV_MAX to java code to simplify stuff

Result:

Cleaner code."
89593a719bee31b54efd7f18734258d0d8a8a423,"[#2666] Fix possible NPE when try to fullfill connect ChannelPromise

Motivation:

Because of a missing return statement we may produce a NPE when try to fullfill the connect ChannelPromise when it was fullfilled before.

Modification:

Add missing return statement.

Result:

No more NPE."
14096d85cdf1db78bbd65d65b33dcf5476c670f3,"[#2667] Write until EAGAIN in native transport

Motivation:

We need to continue write until we hit EAGAIN to make sure we not see an starvation

Modification:

Write until EAGAIN is returned

Result:

No starvation when using native transport with ET."
7e615387905fab9a3350b91a4cb4e8adf8e6d656,"[#2665] Continue writing on IOException when using DatagramChannel

Motivation:

As a DatagramChannel supports to write to multiple remote peers we must not close the Channel once a IOException accours as this error may be only valid for one remote peer.

Modification:

Continue writing on IOException.

Result:

DatagramChannel can be used even after an IOException accours during writing."
aa66f556e54be58654f0dea387f48cab1a2b263f,"[#2667] Write until EAGAIN in native transport and only call setEpollOut() in this case

Motivation:

In the previous fix for #2667 I did introduce a bit overhead by calling setEpollOut() too often.

Modification:

Only call setEpollOut() if really needed and remove unused code.

Result:

Less overhead when saturate network."
53141b04a87261de2b5f79b3bfdb9d27e3eed90e,Fix buffer leak in Bzip2EncoderTest
0cc3eccc2b5c6bb5f81e12ac6929e563fc3e5506,"Close ObjectInputStream in ObjectDecoder.decode(...)

Motivation:

We create a new CompactObjectInputStream with ByteBufInputStream in ObjectDecoder.decode(...) method and don't close this InputStreams before return statement.

Modifications:

Save link to the ObjectInputStream and close it before return statement.

Result:

Close InputStreams and clean up unused resources. It will be better for GC."
ad1389be9d808b637aa10889a29aad0eb7c55ea0,"Small performance improvements

Modifications:

- Added a static modifier for CompositeByteBuf.Component.
This class is an inner class, but does not use its embedded reference to the object which created it. This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.
- Removed unnecessary boxing/unboxing operations in HttpResponseDecoder, RtspResponseDecoder, PerMessageDeflateClientExtensionHandshaker and PerMessageDeflateServerExtensionHandshaker
A boxed primitive is created from a String, just to extract the unboxed primitive value.
- Removed unnecessary 3 times calculations in DiskAttribute.addContent(...).
- Removed unnecessary checks if file exists before call mkdirs() in NativeLibraryLoader and PlatformDependent.
Because the method mkdirs() has this check inside.
- Removed unnecessary `instanceof AsciiString` check in StompSubframeAggregator.contentLength(StompHeadersSubframe) and StompSubframeDecoder.getContentLength(StompHeaders, long).
Because StompHeaders.get(CharSequence) always returns java.lang.String."
dc9d933d7419a0513f1bc84bd3faae47391d7a48,"Fixes for compression codecs

Motivation:

Fixed founded mistakes in compression codecs.

Modifications:

- Changed return type of ZlibUtil.inflaterException() from CompressionException to DecompressionException
- Updated @throws in javadoc of JZlibDecoder to throw DecompressionException instead of CompressionException
- Fixed JdkZlibDecoder to throw DecompressionException instead of CompressionException
- Removed unnecessary empty lines in JdkZlibEncoder and JZlibEncoder
- Removed public modifier from Snappy class
- Added MAX_UNCOMPRESSED_DATA_SIZE constant in SnappyFramedDecoder
- Used in.readableBytes() instead of (in.writerIndex() - in.readerIndex()) in SnappyFramedDecoder
- Added private modifier for enum ChunkType in SnappyFramedDecoder
- Fixed potential bug (sum overflow) in Bzip2HuffmanAllocator.first(). For more info, see http://googleresearch.blogspot.ru/2006/06/extra-extra-read-all-about-it-nearly.html

Result:

Fixed sum overflow in Bzip2HuffmanAllocator, improved exceptions in ZlibDecoder implementations, hid Snappy class"
dd429b249504b8f7c3caa3bcd417696839c6d328,"Small fixes and improvements

Motivation:

Fix some typos in Netty.

Modifications:

- Fix potentially dangerous use of non-short-circuit logic in Recycler.transfer(Stack<?>).
- Removed double 'the the' in javadoc of EmbeddedChannel.
- Write to log an exception message if we can not get SOMAXCONN in the NetUtil's static block."
b83df4c6b36557d0fa666956b659b7c5d941098f,"Fix NPE problems

Motivation:

Now Netty has a few problems with null values.

Modifications:

- Check HAProxyProxiedProtocol in HAProxyMessage constructor and throw NPE if it is null.
If HAProxyProxiedProtocol is null we will set AddressFamily as null. So we will get NPE inside checkAddress(String, AddressFamily) and it won't be easy to understand why addrFamily is null.
- Check File in DiskFileUpload.toString().
If File is null we will get NPE when calling toString() method.
- Check Result<String> in MqttDecoder.decodeConnectionPayload(...).
If !mqttConnectVariableHeader.isWillFlag() || !mqttConnectVariableHeader.hasUserName() || !mqttConnectVariableHeader.hasPassword() we will get NPE when we will try to create new instance of MqttConnectPayload.
- Check Unsafe before calling unsafe.getClass() in PlatformDependent0 static block.
- Removed unnecessary null check in WebSocket08FrameEncoder.encode(...).
Because msg.content() can not return null.
- Removed unnecessary null check in DefaultStompFrame(StompCommand) constructor.
Because we have this check in the super class.
- Removed unnecessary null checks in ConcurrentHashMapV8.removeTreeNode(TreeNode<K,V>).
- Removed unnecessary null check in OioDatagramChannel.doReadMessages(List<Object>).
Because tmpPacket.getSocketAddress() always returns new SocketAddress instance.
- Removed unnecessary null check in OioServerSocketChannel.doReadMessages(List<Object>).
Because socket.accept() always returns new Socket instance.
- Pass Unpooled.buffer(0) instead of null inside CloseWebSocketFrame(boolean, int) constructor.
If we will pass null we will get NPE in super class constructor.
- Added throw new IllegalStateException in GlobalEventExecutor.awaitInactivity(long, TimeUnit) if it will be called before GlobalEventExecutor.execute(Runnable).
Because now we will get NPE. IllegalStateException will be better in this case.
- Fixed null check in OpenSslServerContext.setTicketKeys(byte[]).
Now we throw new NPE if byte[] is not null.

Result:

Added new null checks when it is necessary, removed unnecessary null checks and fixed some NPE problems."
702ebbc19b6c1c7a95e06ba1abd8a62cc48e6907,"Don't spin from malformed dns packets containing loops

Motivation:

DNS packets that contain pointers in a loop will cause
DnsResponseDecoder.readName() to infinite loop.

Modifications:

Fixed DnsResponseDecoder.readName() to detect when packets have loops
and return null instead.

Result:

It is no longer possible to cause Netty to infinite loop by sending it malformed
DNS packets with a loop."
faf9ac9a30d10ad9406a6020d860d017ef5dd28c,"[#2680] NioSocketChannelOutboundBuffer.nioBuffers() / EpollSocketChannelOutboundBuffer.memoryAddresses() should always return non-null array as stated in javadocs

Motivation:

At the moment NioSocketChannelOutboundBuffer.nioBuffers() / EpollSocketChannelOutboundBuffer.memoryAddresses() returns null if something is contained in the ChannelOutboundBuffer which is not a ByteBuf. This is a problem for two reasons:
  1 - In the javadocs we state that it will never return null
  2 - We may do a not optimal write as there may be things that could be written via gathering writes

Modifications:

Change NioSocketChannelOutboundBuffer.nioBuffers() /  EpollSocketChannelOutboundBuffer.memoryAddresses() to never return null but have it contain all ByteBuffer that were found before the non ByteBuf. This way we can do a gathering write and also conform to the javadocs.

Result:

Better speed and also correct implementation in terms of the api."
9939c00541193977b599b4837bc28045f1326f69,Use the correct memoryAddress size when do a gathering write. Part of [#2680]
695fbc91405412ce19eb5728acb2e8962dc8390c,"[#2684] EpollSocketChannel gathering writes should take fast-path if possible

Motivation:

In EpollSocketchannel.writeBytesMultiple(...) we loop over all buffers to see if we need to adjust the readerIndex for incomplete writes. We can skip this if we know that everything was written (a.k.a complete write).

Modification:

Use fast-path if all bytes are written and so no need to loop over buffers

Result:

Fast write path for the average use."
512d1a11ff2ea041e2fbaddae492c1b053fc9076,"[#2685] Epoll transport should use GetPrimitiveArrayCritical / ReleasePrimitiveArrayCritical

Motivation:

At the moment we use Get*ArrayElement all the time in the epoll transport which may be wasteful as the JVM may do a memory copy for this. For code-path that will get executed fast (without blocking) we should better make use of GetPrimitiveArrayCritical and ReleasePrimitiveArrayCritical as this signal the JVM that we not want to do any memory copy if not really needed. It is important to only do this on non-blocking code-path as this may even suspend the GC to disallow the JVM to move the arrays around.

See also http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html#GetPrimitiveArrayCritical

Modification:

Make use of GetPrimitiveArrayCritical / ReleasePrimitiveArrayCritical as replacement for Get*ArrayElement / Release*ArrayElement where possible.

Result:

Better performance due less memory copies."
2e2abb0b74104662aee76ba532b98e4ea99c2bbe,SPDY: fix pushed response NullPointerException
c85319213a7d3fb35729ce4e75448a3c10f91b71,"[#2675] Replace synchronization performed on util.concurrent instance in TrafficCounter

Motivation:

Message from FindBugs:
This method performs synchronization an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword synchronized. For example, synchronizing on an AtomicBoolean will not prevent other threads from modifying the AtomicBoolean.
Such code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.

Modification:

Use synchronized(this)

Result:

Less confusing code"
07024a4e4b6c0303f893c9d5020a66652a037f7a,"Fixes and improvements to IntObjectHashMap. Related to [#2659]

- Rewrite with linear probing, no state array, compaction at cleanup
- Optimize keys() and values() to not use reflection
- Optimize hashCode() and equals() for efficient iteration
- Fixed equals() to not return true for equals(null)
- Optimize iterator to not allocate new Entry at each next()
- Added toString()
- Added some new unit tests"
530750d60669156d508041e3c99ce95111b7e81d,Add a link to the 'native transports' page
ae9963a40cbf7714f3f30e0093ff41f2f200b6e8,"Fix NPE while decoding authority section of a DNS response

Motivation:

NullPointerException is raised when a DNS response conrains a resource
record whose NAME is empty, which is the case for the authority section.

Modification:

Allow an empty name for DnsEntry. Only disallow an empty name for
DnsQuestion.

Result:

Fixes #2686"
923a0e71acdc8529b991cbec2f8477f104bd859f,"Raise a meaningful exception instead of NPE

Motivation:

When decoding the NAME field in a DNS Resource Record, DnsResponseDecoder
can raise a NullPointerException if the NAME field contains a loop.

Modification:

Instead of raising an NPE, raise CorruptedFrameException so that the
exception itself has meaning.

Result:

Less confusing when a malformed DNS RR is received"
ca87cc887e3609426417d0288245e030486b0468,"Simplify Bzip2 tests

Motivation:

Sometimes we have a 'build time out' error because tests for bzip2 codec take a long time.

Modifications:

Removed cycles from Bzip2EncoderTest.testCompression(byte[]) and Bzip2DecoderTest.testDecompression(byte[]).

Result:

Reduced time to test the 'codec' package by 30 percent."
830091c2604b4c9f39d9d411b812c7d67db05f77,"Reduce the default initial capacity of ChannelOutboundBuffer

Motivation:

ChannelOutboundBuffer is basically a circular array queue of its entry
objects.  Once an entry is created in the array, it is never nulled out
to reduce the allocation cost.

However, because it is a circular queue, the array almost always ends up
with as many entry instances as the size of the array, regardless of the
number of pending writes.

At worst case, a channel might have only 1 pending writes at maximum
while creating 32 entry objects, where 32 is the initial capacity of the
array.

Modifications:

- Reduce the initial capacity of the circular array queue to 4.
- Make the initial capacity of the circular array queue configurable

Result:

We spend 4 times less memory for entry objects under certain
circumstances."
99cf6f0732d5b8cbe9ab3dd53a73ffac2870c556,"Refactor integration tests of compression codecs

Motivation:

Duplicated code of integration tests for different compression codecs.

Modifications:

- Added abstract class IntegrationTest which contains common tests for any compression codec.
- Removed common tests from Bzip2IntegrationTest and LzfIntegrationTest.
- Implemented abstract methods of IntegrationTest in Bzip2IntegrationTest, LzfIntegrationTest and SnappyIntegrationTest.

Result:

Removed duplicated code of integration tests for compression codecs and simplified an addition of integration tests for new compression codecs."
4816533638caf263bfe9a033d1a34beca0fc19d5,"Refactor Bzip2 tests

Motivation:

Complicated code of Bzip2 tests with some unnecessary actions.

Modifications:

- Reduce size of BYTES_LARGE array of random test data for Bzip2  tests.
- Removed unnecessary creations of EmbeddedChannel instances in Bzip2 tests.
- Simplified tests in Bzip2DecoderTest which expect exception.
- Removed unnecessary testStreamInitialization() from Bzip2EncoderTest.

Result:

Reduced time to test the 'codec' package by 7 percent, simplified code of Bzip2 tests."
9734170b7dcc0ca0f5f48bd250819c2fca17c564,"Use value types for class and type in DNS entries to make them immune to parameter order bugs

Motivation:

DNS class and type were represented as integers rather than an enum or a
similar dedicated value type.  This can be a potential source of a
parameter order bug which might be difficult to track down.

Modifications:

Add DnsClass and DnsType to replace integer parameters

Result:

Type safety and less error-proneness"
4bde044957a6587667277ff0bd4410509790456e,"Overall cleanup of codec-dns

Related issue: #2688

- DnsClass and DnsType
  - Make DnsClass and DnsType implement Comparable
  - Optimize the message generation of IllegalArgumentException,
    by pre-populating the list of the expected parameters
  - Move the static methods up
  - Relax the validation rule of DnsClass so that a user can define a
    CLASS which is not listed in the RFC 1035
  - valueOf(int) does not throw IllegalArgumentException anymore as long
    as the specified value is an unsigned short.
  - Rename create() and forName() to valueOf() so that they look like a
    real enum
  - Rename type() and clazz() to intValue() so that they conform to our
    naming convention
- Add missing null checks in DnsEntry"
b029800b68d7024d709eb7749bf804074707fac6,Updated the ChannelGroup JavaDoc by removing b.releaseExternalResources();
e1cc1fbabce9b0d7247e6a955496c78e3772390a,"[#2705] Call fireChannelReadComplete() if channelActive(...) decodes messages in ReplayingDecoder / ByteToMessageDecoder

Motivation:

In ReplayingDecoder / ByteToMessageDecoder channelInactive(...) method we try to decode a last time and fire all decoded messages throw the pipeline before call ctx.fireChannelInactive(...). To keep the correct order of events we also need to call ctx.fireChannelReadComplete() if we read anything.

Modifications:

- Channel channelInactive(...) to call ctx.fireChannelReadComplete() if something was decoded
- Move out.recycle() to finally block

Result:

Correct order of events."
5b2bdd844db56079e6cb75b0e1142d337723e1c3,"[#2662] Fix race in cancellation of TimerTasks which could let to NPE

Motivation:

Due some race-condition while handling canellation of TimerTasks it was possibleto corrupt the linked-list structure that is represent by HashedWheelBucket and so produce a NPE.

Modification:

Fix the problem by adding another MpscLinkedQueue which holds the cancellation tasks and process them on each tick. This allows to use no synchronization / locking at all while introduce a latency of max 1 tick before the TimerTask can be GC'ed.

Result:

No more NPE"
88bd6e7a9300073707f305409fa6481f1eeb2077,"Optimize native transport for gathering writes

Motivation:

While benchmarking the native transport with gathering writes I noticed that it is quite slow. This is due the fact that we need to do a lot of array copies to get the buffers into the iov array.

Modification:

Introduce a new class calles IovArray which allows to fill buffers directly in a iov array that can be passed over to JNI without any array copies. This gives a nice optimization in terms of speed when doing gathering writes.

Result:

Big performance improvement when doing gathering writes. See the included benchmark...

Before:
[nmaurer@xxx]~% wrk/wrk -H 'Host: localhost' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Connection: keep-alive' -d 120 -c 256 -t 16 --pipeline 256  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    23.44ms   16.37ms 259.57ms   91.77%
    Req/Sec   181.99k    31.69k  304.60k    78.12%
  346544071 requests in 2.00m, 46.48GB read
Requests/sec: 2887885.09
Transfer/sec:    396.59MB

With this change:
[nmaurer@xxx]~% wrk/wrk -H 'Host: localhost' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Connection: keep-alive' -d 120 -c 256 -t 16 --pipeline 256  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    21.93ms   16.33ms 305.73ms   92.34%
    Req/Sec   194.56k    33.75k  309.33k    77.04%
  369617503 requests in 2.00m, 49.57GB read
Requests/sec: 3080169.65
Transfer/sec:    423.00MB"
d5b7c131dd4de9a1a28e0791746680503fc29907,"Correctly write single ByteBuf with memoryAddress

Motivation:

While optimize gathering writes I introduced a bug when writing single ByteBuf that have a memoryAddress. This regression was introduced by 88bd6e7a9300073707f305409fa6481f1eeb2077.

Modifications:

Correctly use the writerIndex as argument when call Native.writeAddress(...)

Result:

No more corruption while write single buffers."
f88cd62354464a3445c68976d6f3a535d775180a,"[#2692] Allows notify ChannelFutureProgressListener on complete writes

Motivation:

We have some inconsistency when handling writes. Sometimes we call ChannelOutboundBuffer.progress(...) also for complete writes and sometimes not. We should call it always.

Modifications:

Correctly call ChannelOuboundBuffer.progress(...) for complete and incomplete writes.

Result:

Consistent behavior"
e09d2f32fb1c7f2ab8d1e41fdb72e00adb7032ff,"[#2708] DnsResource.duplicate() should return DnsResource and not ByteBufHolder

Motivation:

DnsResource.duplicate() should return DnsResource and not ByteBufHolder

Modifications:

Change return type from ByteBufHolder to DnsResource

Result:

No need to cast to the correct type when using duplicate()"
168e2dde05146bda83ad25023b3bbc10c9bd3c06,"[#2706] Allow pid up to 4194304

Motivation:

The PID_MAX_LIMIT on 64bit linux systems is 4194304 and on osx it is 99998. At the moment we use 65535 as an upper-limit which is too small.

Modifications:

Use 4194304 as max possible value

Result:

No more false-positives when try to detect current pid."
750eed1804515c43e1ba60d8a1a927ea745424fc,Fix broken test after change the maximal value of the pid. Part of [#2706]
3207fac88e040a18f6fd5c8fcc0f37bde1a01183,"Use correct exception message when throw exception from native code

Motivation:

We sometimes not use the correct exception message when throw it from the native code.

Modifications:

Fixed the message.

Result:

Correct message in exception"
77609cf6ed78325ef8c308d6fbc0d045596e46eb,"Fix a bug where AbstractConstant.compareTo() returns 0 for different constants

Related issue: #2354

Motivation:

AbstractConstant.compareTo() can return 0 even if the specified constant
object is not the same instance with 'this'.

Modifications:

- Compare the identityHashCode of constant first. If that fails,
  allocate a small direct buffer and use its memory address as a unique
  value.  If the platform does not provide a way to get the memory
  address of a direct buffer, use a thread-local random value.
- Signal cannot extend AbstractConstant. Use delegation.

Result:

It is practically impossible for AbstractConstant.compareTo() to return
0 for different constant objects."
a35233a4d4e6a2e923f81006f00cb79f598bd2e4,Fix a ConstantPoolTest failure
9a654d8a617485cb417071f7b77d74ae181f709f,Remove duplicate range check in AbstractByteBuf.skipBytes()
3c4321ce43b4dd7bea3d8d36721d50ae7cf10bd9,Use our own URL shortener wherever possible
1f95e5db4c790f0d3b5df226ba5d71708c175f9e,"[#2720] Check if /proc/sys/net/core/somaxconn exists before try to parse it

Motivation:

As /proc/sys/net/core/somaxconn does not exists on non-linux platforms you see a noisy stacktrace when debug level is enabled while the static method of NetUtil is executed.

Modifications:

Check if the file exists before try to parse it.

Result:

Less noisy logging on non-linux platforms."
ff9cc74bf695c16585f453badc911e5b0776e752,Remove duplicated code
c13419750d5d158642edf550b3c23cb28334d980,"Improve Bzip2BitReader/Writer

Motivation:

Before this changes Bzip2BitReader and Bzip2BitWriter accessed to ByteBuf byte by byte. So tests for Bzip2 compression codec takes a lot of time if we ran them with paranoid level of resource leak detection. For more information see comments to #2681 and #2689.

Modifications:

- Increased size of bit buffers from 8 to 64 bits.
- Improved reading and writing operations.
- Save link to incoming ByteBuf inside Bzip2BitReader.
- Added methods to check possible readable bits and bytes in Bzip2BitReader.
- Updated Bzip2 classes to use new API of Bzip2BitReader.
- Added new constants to Bzip2Constants.

Result:

Increased size of bit buffers and improved performance of Bzip2 compression codec (for general work by 13% and for tests with paranoid level of resource leak detection by 55%)."
74dd295e5964401ce7d281e1aa9a66cafdaf19fc,"Fix buffer leaks in DnsResponseDecoder and DnsResponseDecoderTest

Motivation:

There were two buffer leaks in the codec-dns.

Modifications:

- Fix buffer leak in DnsResponseTest.readResponseTest()
- Correctly release DnsResources on Exception

Result:

No more buffer leaks in the codec-dns module."
20dffa8ee644b451776cee7e79f15d7d1c2151d8,"[#2718] Added private key decryption to JDK SSL server context.

Motivation:

Currently it is not possible to load an encrypted private key when
creating a JDK based SSL server context.

Modifications:

- Added static method to JdkSslServerContext which handles key spec generation for (encrypted) private keys and make use of it.
-Added tests for creating a SSL server context based on a (encrypted)
private key.

Result:

It is now possible to create a JDK based SSL server context with an
encrypted (password protected) private key."
a5ccec5ef3691a4b4323bb1ea3ce93e55b826d40,"More brief somaxconn logging

- Consistent log message format
- Avoid unnecessary autoboxing when debug level is off
- Remove the duplication of somaxconn path"
8263a6201405982de39c19db766314bf895e2b0f,"Clean-up d9cccccbb3344997e016e6a3603126ce65705c4d

- Revert irrelevant formatting changes
- Rename resource files
  - Add .pem
  - Remove 'netty' from names"
cc33417c0e302c8d33f170b1db37014cce8c35d2,"Add more utility methods to check the availability of the epoll transport

Related issue: #2733

Motivation:

Unlike OpenSsl, Epoll lacks a couple useful availability checker
methods:

- ensureAvailability()
- unavailabilityCause()

Modifications:

Add missing methods

Result:

More ways to check the availability and to get the cause of
unavailability programatically."
e33f12f5b8a37b3f2a7291a10a61c8bce6ce73e0,"[#2732] HttpRequestEncoder may produce invalid uri if uri parameters are included.

Motivation:

If the requests contains uri parameters but not path the HttpRequestEncoder does produce an invalid uri while try to add the missing path.

Modifications:

Correctly handle the case of uri with paramaters but no path.

Result:

HttpRequestEncoder produce correct uri in all cases."
869687bd711e1358367203526128d9a2ad90663a,"Port ChannelOutboundBuffer and related changes from 4.0

Motivation:

We did various changes related to the ChannelOutboundBuffer in 4.0 branch. This commit port all of them over and so make sure our branches are synced in terms of these changes.

Related to [#2734], [#2709], [#2729], [#2710] and [#2693] .

Modification:
Port all changes that was done on the ChannelOutboundBuffer.

This includes the port of the following commits:
 - 73dfd7c01b49aca006a34cc48197dee3fc360af1
 - 997d8c32d23f2d88903b7b607360907b99101002
 - e282e504f17b0874719ff606c728494e3509b1a0
 - 5e5d1a58fd3159c04ac7d10edfb8ed7a83d3935e
 - 8ee3575e72d6ee000a99c717d96f36695a8667a0
 - d6f0d12a8692c095df43b2a4462cbc97cf5c5a2d
 - 16e50765d1fb99005ad761409c28dcedf477531b
 - 3f3e66c31ae3da70c36cc125ca9bcac8215390e4

Result:
 - Less memory usage by ChannelOutboundBuffer
 - Same code as in 4.0 branch
 - Make it possible to use ChannelOutboundBuffer with Channel implementation that not extends AbstractChannel"
8fce6316adecc577d4b19902d04548feeeb8383b,"Fix a bug where ChannelFuture.setFailure(null) doesn't fail

Motivation:

We forgot to do a null check on the cause parameter of
ChannelFuture.setFailure(cause)

Modifications:

Add a null check

Result:

Fixed issue: #2728"
073ec8d10a5d05f2a1bf12857c4fcf9fc19bbcc1,"Consider writerIndex when LzfDecoder writes into a new heap buffer

Motivation:

Now LzfDecoder do not consider writerIndex when it writes into array of a new heap buffer (when it decodes a compressed chuck of data)"
fd813f76fa41f315187bf194f74cbc39f7dc9f4f,"Add test cases for HttpContentCompressor

- Ported from 386a06dbfa13f981aff59a9abb7cbecee2701e65"
8e1007d69326bf2394e596e349d75a96fc006c6e,"Fix a bug where SpdySession.getActiveStreams() returns incorrect set

Related issue: #2743

Motivation:

When there are more than one stream with the same priority, the set
returned by SpdySession.getActiveStream() will not include all of them,
because it uses TreeSet and only compares the priority of streams. If
two different streams have the same priority, one of them will be
discarded by TreeSet.

Modification:

- Rename getActiveStreams() to activeStreams()
- Replace PriorityComparator with StreamComparator

Result:

Two different streams with the same priority are compared correctly."
a9ae80fc8ff2f7d87eea2ad2889909e910572b8a,Fix resource leaks in StompSubframeAggregatorTest
d5fd57262b9877a0f5b035a7c019d576ee1c60f3,"[#2744] Fix flakey HashedWheelTimerTest.testExecutionOnTime()

Motivation:

The calculation of the max wait time for HashedWheelTimerTest.testExecutionOnTime() was wrong and so the test sometimes failed.

Modifications:

Fix the max wait time.

Result:

No more test-failures"
23d3b842735db25c775c15b2fbab652848f5cd93,Fix resource leaks in StompSubframeDecoderTest
af2682634857281157b4f372a8bf0ee64f655978,"SPDY: fix SpdySessionHandler::updateSendWindowSize

In Netty 3, downstream writes of SPDY data frames and upstream reads of
SPDY window udpate frames occur on different threads.

When receiving a window update frame, we synchronize on a java object
(SpdySessionHandler::flowControlLock) while sending any pending writes
that are now able to complete.

When writing a data frame, we check the send window size to see if we
are allowed to write it to the socket, or if we have to enqueue it as a
pending write. To prevent races with the window update frame, this is
also synchronized on the same SpdySessionHandler::flowControlLock.

In Netty 4, upstream and downstream operations on any given channel now
occur on the same thread. Since java locks are re-entrant, this now
allows downstream writes to occur while processing window update frames.

In particular, when we receive a window update frame that unblocks a
pending write, this write completes which triggers an event notification
on the response, which in turn triggers a write of a data frame. Since
this is on the same thread it re-enters the lock and modifies the send
window. When the write completes, we continue processing pending writes
without knowledge that the window size has been decremented."
486de44680c6b266e013183226976c6081f41535,Fix a resource leak in StompSubframeAggregatorTest
02e7e53cbb845e7b7ce0a377cba59ca3a7d09d2b,"[#2752] Add PendingWriteQueue for queue up writes

Motivation:

Sometimes ChannelHandler need to queue writes to some point and then process these. We currently have no datastructure for this so the user will use an Queue or something like this. The problem is with this Channel.isWritable() will not work as expected and so the user risk to write to fast. That's exactly what happened in our SslHandler. For this purpose we need to add a special datastructure which will also take care of update the Channel and so be sure that Channel.isWritable() works as expected.

Modifications:

- Add PendingWriteQueue which can be used for this purpose
- Make use of PendingWriteQueue in SslHandler

Result:

It is now possible to queue writes in a ChannelHandler and still have Channel.isWritable() working as expected. This also fixes #2752."
286b89933ccc0d7ace84bffc46c59853809700ca,"Allow to obtain RecvByteBufAllocator.Handle to allow more flexible implementations

Motivation:

At the moment it's only possible for a user to set the RecvByteBufAllocator for a Channel but not access the Handle once it is assigned. This makes it hard to write more flexible implementations.

Modifications:

Add a new method to the Channel.Unsafe to allow access the the used Handle for the Channel. The RecvByteBufAllocator.Handle is created lazily.

Result:

It's possible to write more flexible implementatons that allow to adjust stuff on the fly for a Handle that is used by a Channel"
2d36caa9f64786942c123ef34e58f82b6d962951,"Add TextHeaders.getAndRemove(...) and its variants

Related issue: #2649 and #2745

Motivation:

At the moment there is no way to get and remove a header with one call.
This means you need to search the headers two times. We should add
getAndRemove(...) to allow doing so with one call.

Modifications:

Add getAndRemove(...) and getUnconvertedAndRemove(...) and their
variants

Result:

More efficient API"
de724063f38590b9009703a0ba33683e8f9b0367,"Reduce the initial capacity of the value list from 4 to 2

Motivation:

DefaultTextHeaders.getAll*() methods create an ArrayList whose initial
capacity is 4.  However, it is more likely that the actual number of
values is smaller than that.

Modifications:

Reduce the initial capacity of the value list from 4 to 2

Result:

Slightly reduced memory footprint"
60764200d71a6365934d9ea9152b19646412adc2,"Do not throw an exception when failed to get a header

Motivation:

It is often very expensive to instantiate an exception. TextHeader
should not raise an exception when it failed to find a header or when
its header value is not valid.

Modification:

- Change the return type of the getter methods to Integer and Long so
  that null is returned when no header is found or its value is invalid
- Update Javadoc

Result:

- Fixes #2758
- No unnecessary instantiation of exceptions"
a0c466a27673a02c86f364cc78a500050bd91383,"Implemented FastLZ compression codec

Motivation:

FastLZ compression codec provides sending and receiving data encoded by fast FastLZ algorithm using block mode.

Modifications:

- Added part of `jfastlz` library which implements FastLZ algorithm. See FastLz class.
- Implemented FastLzFramedEncoder which extends MessageToByteEncoder and provides compression of outgoing messages.
- Implemented FastLzFramedDecoder which extends ByteToMessageDecoder and provides uncompression of incoming messages.
- Added integration tests for `FastLzFramedEncoder/Decoder`.

Result:

Full FastLZ compression codec which can compress/uncompress data using FastLZ algorithm."
bc1379d19dcf59626ef8d5b431830a189957e3bd,"[#2721] Improve Traffic Shaping handler

Motivation:
Currently Traffic Shaping is using 1 timer only and could lead to
""partial"" wrong bandwidth computation when ""short"" time occurs between
adding used bytes and when the TrafficCounter updates itself and finally
when the traffic is computed.
Indeed, the TrafficCounter is updated every x delay and it is at the
same time saved into ""lastXxxxBytes"" and set to 0. Therefore, when one
request the counter, it first updates the TrafficCounter with the added
used bytes. If this value is set just before the TrafficCounter is
updated, then the bandwidth computation will use the TrafficCounter with
a ""0"" value (this value being reset once the delay occurs). Therefore,
the traffic shaping computation is wrong in rare cases.

Secondly the traffic shapping should avoid if possible the ""Timeout""
effect by not stopping reading or writing more than a maxTime, this
maxTime being less than the TimeOut limit.

Thirdly the traffic shapping in read had an issue since the readOp
was not set but should, turning in no read blocking from socket
point of view.

Modifications:
The TrafficCounter has 2 new methods that compute the time to wait
according to read or write) using in priority the currentXxxxBytes (as
before), but could used (if current is at 0) the lastXxxxxBytes, and
therefore having more chance to take into account the real traffic.

Moreover the Handler could change the default ""max time to wait"", which
is by default set to half of ""standard"" Time Out (30s:2 = 15s).

Finally we add the setAutoRead(boolean) accordingly to the situation,
as proposed in #2696 (this pull request is in error for unknown reason).

Result:
The Traffic Shaping is better take into account (no 0 value when it
shouldn't) and it tries to not block traffic more than Time Out event.

Moreover the read is really stopped from socket point of view.

This version is similar to #2388 and #2450.
This version is for V4.1, and includes the #2696 pull request
to ease the merge process.
It is compatible with master too.

Including also #2748

The test minimizes time check by reducing to 66ms steps (55s)."
536141ba699ba9d4c955de978166bd1ce2274018,"[#2761] ChannelOutboundBuffer can cause data-corruption because of caching ByteBuffers

Motivation:

We cache the ByteBuffers in ChannelOutboundBuffer.nioBuffers() for the Entries in the ChannelOutboundBuffer to reduce some overhead. The problem is this can lead to data-corruption if an incomplete write happens and next time we try to do a non-gathering write.

To fix this we should remove the caching which does not help a lot anyway and just make the code buggy.

Modifications:

Remove the caching of ByteBuffers.

Result:

No more data-corruption."
de3c0507c12f9e03f11589f922020cf1320c042f,"[#2762] Not expand ByteBuffer[] in ChannelOutboundBuffer

Motivation:

At the moment we expand the ByteBuffer[] when we have more then 1024 ByteBuffer to write and replace the stored instance in its FastThreadLocal. This is not needed and may even harm performance on linux as IOV_MAX is 1024 and so this may cause the JVM to do an array copy.

Modifications:

Just exit the nioBuffers() method if we can not fit more ByteBuffer in the array. This way we will pick them up on the next call.

Result:

Remove uncessary array copy and simplify the code."
ef572d859da76da63f7c59aaefa65b233281ebc8,"Change back default allocator to pooled.

Motivation:

While porting some changes from 4.0 to 4.1 and master branch I changed the default allocator from pooled to unpooled by mistake. This should be reverted. The guilty commit is 4a3ef90381f343a457243d6e2eabac01e551315b.

Thanks to @blucas for spotting this.

Modifications:

Revert changes related to allocator.

Result:

Use the correct default allocator again."
f89907dba54bcd8d6d5d2c8f9badbec24b7e4ee0,"Revert ""[#2762] Not expand ByteBuffer[] in ChannelOutboundBuffer""

This reverts commit de3c0507c12f9e03f11589f922020cf1320c042f as it may cause problem if a CompositeByteBuf has more then 1024 components."
a7d1f983a215b043a5f592cb20697eb285e8eac1,"[#2761] Proper work-around for data-corruption caused by cached ByteBuffers

Motivation:

The previous fix did disable the caching of ByteBuffers completely which can cause performance regressions. This fix makes sure we use nioBuffers() for all writes in NioSocketChannel and so prevent data-corruptions. This is still kind of a workaround which will be replaced by a more fundamental fix later.

Modifications:

- Revert 4059c9f3549753119576a287492dd70ae4742988
- Use nioBuffers() for all writes to prevent data-corruption

Result:

No more data-corruption but still retain the original speed."
0eac4fce2988d0fd4b3c17c4aab3bc7db27a87be,"Revert ""[#2761] ChannelOutboundBuffer can cause data-corruption because of caching ByteBuffers""

This reverts commit 536141ba699ba9d4c955de978166bd1ce2274018."
0dc6a8dccfe6a5b9841f779fd9ff1d51df74f54d,"Use heap buffers for Unpooled.copiedBuffer()

Related issue: #2028

Motivation:

Some copiedBuffer() methods in Unpooled allocated a direct buffer.  An
allocation of a direct buffer is an expensive operation, and thus should
be avoided for unpooled buffers.

Modifications:

- Use heap buffers in all copiedBuffer() methods

Result:

Unpooled.copiedBuffers() are less expensive now."
af625f2274a401c7fc1f5acca7a1bb8e69513b16,"Reduce the execution time of maven-antrun-plugin

Related issue: #2508

Motivation:

The '<exec/>' task takes unnecessarily long time due to a known issue:

- https://issues.apache.org/bugzilla/show_bug.cgi?id=54128

Modifications:

- Reduce the number of '<exec/>' tasks for faster build
- Use '<propertyregex/>' to extract the output

Result:

Slightly faster build"
061d5bc261f8167f5a4716e4d100261ed17a6cf6,"Fix data corruption in FileRegion transfer with epoll transport

Related issue: #2764

Motivation:

EpollSocketChannel.writeFileRegion() does not handle the case where the
position of a FileRegion is non-zero properly.

Modifications:

- Improve SocketFileRegionTest so that it tests the cases where the file
  transfer begins from the middle of the file
- Add another jlong parameter named 'base_off' so that we can take the
  position of a FileRegion into account

Result:

Improved test passes. Corruption is gone."
d315bbaa1428b5f946cc1609d220121f8be642b9,"Fix and clearify javadocs

Motivation:

ByteToMessageDecoder and ReplayingDecoder have incorrect javadocs in some places.

Modifications:

Fix incorrect javadocs for both classes.

Result:

Correct javadocs for both classes"
f3110124554e88f142f657ee69fe02666ee120aa,Rename FastLzFramed* to FastLzFrame*
1aa20e860953f66c42858968ffe56ef95e2df4fd,Fix class description of FastLzFrameDecoder
d0b5fb9548be90a906d59601898a0a4e5a3f6c2e,"[#2768] Correctly duplicate buffer for CloseWebSocketFrames

Motivation:

The _0XFF_0X00 buffer is not duplicated and empty after the first usage preventing the connection close to happen on subsequent close frames.

Modifications:

Correctly duplicate the buffer.

Result:

Multiple CloseWebSocketFrames are handled correctly."
c8841bc9de2480f8e37c545997c0eec4a88ec786,"Implemented LZ4 compression codec

Motivation:

LZ4 compression codec provides sending and receiving data encoded by very fast LZ4 algorithm.

Modifications:

- Added `lz4` library which implements LZ4 algorithm.
- Implemented Lz4FramedEncoder which extends MessageToByteEncoder and provides compression of outgoing messages.
- Added tests to verify the Lz4FramedEncoder and how it can compress data for the next uncompression using the original library.
- Implemented Lz4FramedDecoder which extends ByteToMessageDecoder and provides uncompression of incoming messages.
- Added tests to verify the Lz4FramedDecoder and how it can uncompress data after compression using the original library.
- Added integration tests for Lz4FramedEncoder/Decoder.

Result:

Full LZ4 compression codec which can compress/uncompress data using LZ4 algorithm."
1971bd1da6a55797de816bcfb29fe98e6bb86673,"Rename SnappyFramedEncoder/Decoder to SnappyFrameEncoder/Decoder

Related issue: #2766

Motivation:

Forgot to rename them before the final release by mistake.

Modifications:

Rename and then re-introduce the deprecated version that extends the
renamed class.

Result:

Better naming"
dcd3cadeaa08f711e8e5b833f8ebec48a72dd4d8,"Reduce the fallback SOMAXCONN value

Related issue: #2407

Motivation:

The current fallback SOMAXCONN value is 3072.  It is way too large
comparing to the default SOMAXCONN value of popular OSes.

Modifications:

Decrease the fallback SOMAXCONN value to 128 or 200 depending on the
current OS

Result:

Saner fallback value"
1a0500452300efdfcc1ecd7631f89b07398ab8c9,"Add socksx package which supports SOCKS 4/4a/5

Motivation:

SOCKS 4 and 5 are very different protocols although they share the same
name.  It is not possible to incorporate the two protocol versions into
a single package.

Modifications:

- Add a new package called 'socksx' to supercede 'socks' package.
- Add SOCKS 4/4a support to the 'socksx' package

Result:

codec-socks now supports all SOCKS versions"
fc1429c00c6a365e37363091a3ee14291bb8f010,"Overall clean-up on socksx package

- SocksV[45] -> Socks[45]
- Make encodeAsByteBuf package private with some hassle
- Split SocksMessageEncoder into Socks4MessageEncoder and
  Socks5MessageEncoder, and remove the original
- Remove lazy singleton instantiation; we don't need it.
- Remove the deprecated methods
- Fix Javadoc errors"
ca29be5e77ef7999b2707cf5d4f32d5e306d568b,"Allow ChunkedInput to provide the progress of its transfer

Related issue: #2741 and #2151

Motivation:

There is no way for ChunkedWriteHandler to know the progress of the
transfer of a ChannelInput. Therefore, ChannelProgressiveFutureListener
cannot get exact information about the progress of the transfer.

If you add a few methods that optionally provides the transfer progress
to ChannelInput, it becomes possible for ChunkedWriteHandler to notify
ChannelProgressiveFutureListeners.

If the input has no definite length, we can still use the progress so
far, and consider the length of the input as 'undefined'.

Modifications:

- Add ChunkedInput.progress() and ChunkedInput.length()
- Modify ChunkedWriteHandler to use progress() and length() to notify
  the transfer progress

Result:

ChunkedWriteHandler now notifies ChannelProgressiveFutureListener."
e013b2400fb9b24219c7c9b19a5d37149922376b,[maven-release-plugin] prepare release netty-4.1.0.Beta2
b3c1904cc9530e8c2e99ddb6f75c924e246c1dd6,[maven-release-plugin] prepare for next development iteration
dcfdad9e9ec90a4b90567cfe081a3b802946912c,"[#2769] Fix regression when writing different message types

Motivation:

Due a regression NioSocketChannel.doWrite(...) will throw a ClassCastException if you do something like:

channel.write(bytebuf);
channel.write(fileregion);
channel.flush();

Modifications:

Correctly handle writing of different message types by using the correct message count while loop over them.

Result:

No more ClassCastException"
9b99ac0bcb2a0588e06dabbd766115168ae56499,"[#2771] Correctly handle constructing of EmbeddedChannel

Motivation:

Because of an incorrect logic in teh EmbeddedChannel constructor it is not possible to use EmbeddedChannel with a ChannelInitializer as constructor argument. This is because it adds the internal LastInboundHandler to its ChannelPipeline before it register itself to the EventLoop.

Modifications:

First register self to EventLoop before add LastInboundHandler to the ChannelPipeline.

Result:

It's now possible to use EmbeddedChannel with ChannelInitializer."
9ee51fc4c7be58d9d937959854f86ac58764538b,"Fix the regression caused by f31c630c8cc15c4de1cc7e45b6c5c8053d5bcb75

f31c630c8cc15c4de1cc7e45b6c5c8053d5bcb75 was causing
SocketGatheringWriteTest to fail because it does not take the case where
an empty buffer exists in a gathering write.

When there is an empty buffer in a gathering write, the number of
buffers returned by ChannelOutboundBuffer.nioBuffer() and the actual
number of write attemps can differ.

To remove the write requests correctly, a byte transport must use
ChannelOutboundBuffer.removeBytes()"
02643e41fb94fd216ddced121fa95c6acb43270b,"Fix a bug where ChannelOutboundBuffer.removeBytes() throws ClassCastException

When a ChannelOutboundBuffer contains ByteBufs followed by a FileRegion,
removeBytes() will fail with a ClassCastException.  It should break the
loop instead."
88c273364df04ebf53c2d3fbbf48916180c2159e,"Fix for issue #2765 relative to unstable trafficshaping test procedure

Motivation:

The test procedure is unstable due to not enough precise timestamping
during the check.

Modifications:

Reducing the test cases and cibling ""stable"" test (""timestamp-able"")
bring more stability to the tests.

Result:

Tests for TrafficShapingHandler seem more stable (whatever using JVM 6,
7 or 8)."
52232a796854988af0d444ca6a0f25237996da8e,Fix checkstyle
76ac3b21a5196e29e704518b8ea03793ca2fa654,[maven-release-plugin] prepare release netty-4.1.0.Beta3
b5f61d0de590b52adae3285c93e3a2506cb180e9,[maven-release-plugin] prepare for next development iteration
0ca84b3527756ba55b31ff5d181e65d20b03a5e3,"Better fix for TrafficShapingHandlerTest

Motivation:
It seems that in certain conditions, the write back from the server is so quick that the handler has no time to compute traffic shaping. So 10ms of wait before acknowledging is added in server side.

Modifications:
Add 10ms waiting before server ackonwledge the client.

Result:
The timing is now suppsed to be stable."
bcbc23913e5d705412c2f2f47ddf8159aa1b002f,"Better fix for TrafficShapingHandlerTest

Motivation:
The test procedure is unstable when testing quick time (factor less or equal to 1). Changing to default 10ms in this case will force time to be correct and time to be checked only when factor is >= 2.

Modifications:
When factor is <= 1, minimalWaitBetween is 10ms

Result:
Hoping this version is finally stable."
b285994e103b549465115c6a71e684a4f61f304b,"Support IPv4 default route in ipfilter.

Motivation:

In GitHub issue #2767 a bug was reported that the IPv4
default route leads to the ipfilter package denying
instead of accepting all addresses.

While the issue was reported for Netty 3.9, this bug
also applies to Netty 4 and higher.

Modifications:

When computing the subnet address from the CIDR prefix,
correctly handle the case where the prefix is set to zero.

Result:

Ipfilter accepts all addresses when passed the
IPv4 default route."
a9da2f9d8bdc91e6e92602b07b1cc62b8f71b478,"Document the correct default value of SOMAXCONN

Motivation:

Recently we changed the default value of SOMAXCONN that is used when we can not determine it by reading /proc/sys/net/core/somaxconn. While doing this we missed to update the javadocs to reflect the new default value that is used.

Modifications:

List correct default value in the javadocs of SOMAXCONN.

Result:

Correct javadocs."
5b3b48409f48548b8e96b59eda4e156004f7157b,"Fix example for Http Upload

Motivation:
The example mis handle two elements:
1) Last message is a LastHttpContent and is not taken into account by
the server handler
2) The client makes a sync on last write (chunked) but there is no flush
before, therefore the sync is waiting forever.

Modifications:
1) Take into account the message LastHttpContent in simple Get.
2) Removes sync but add flush for each post and multipost parts

Results:
Example is no more blocked after get test.

Should be done also in 4.0 and Master (similar changes)"
56fd33df23d4f76b7a6af10a483b5e24a49011a5,"codec-socks test cleanup

Motivation:

The unit tests in codec-socks contained redundant casts and empty test classes.

Modifications:

- Remove redundant casts
- Delete empty test classes

Result:

Cleanup"
246b65c6b6b978ad858a5ee31a7ca0e328668578,"[#2586] Use correct EventExecutor to notify for bind failures on late registration

Motivation:

We used the wrong EventExecutor to notify for bind failures if a late registration was done.

Modifications:

Use the correct EventExecutor to notify and only use the GlobelEventExecutor if the registration fails itself.

Result:

The correct Thread will do the notification."
2c9d1dafac30875074e80bfebd15ef99fabe864d,"Code-inspection fixes

Motivation:

Saw some code-inspection warnings

Modifications:

Fix warnings

Result:

Less code-inspection warnings"
09100e5043cb731cd84cdcb8e0a5c2bd0977d5b5,"Avoid redundant reads of head in peakNode

Motivation:

There is not need todo redunant reads of head in peakNode as we can just spin on next() until it becomes visible.

Modifications:

Remove redundant reads of head in peakNode. This is based on @nitsanw's patch for akka.
See https://github.com/akka/akka/pull/15596

Result:

Less volatile access."
1504d2044de1fb2fdd8a0414e6b456fc3f641bcd,"Allow efficient writing of CompositeByteBuf when using native epoll transport.

Motivation:

There were no way to efficient write a CompositeByteBuf as we always did a memory copy to a direct buffer in this case. This is not needed as we can just write a CompositeByteBuf as long as all the components are buffers with a memory address.

Modifications:

- Write CompositeByteBuf which contains only direct buffers without memory copy
- Also handle CompositeByteBuf that have more components then 1024.

Result:

More efficient writing of CompositeByteBuf."
65686b6c83ef289a696a5d10b1ce2d58399700c1,"Reduce memory copies in spdy compression implementation.

Motivation:

Currently we do more memory copies then needed.

Modification:

- Directly use heap buffers to reduce memory copy
- Correctly release buffers to fix buffer leak

Result:

Less memory copies and no leaks"
fbf853375982acdddf5be676b1c647182b2d210c,"[#2812] Ensure we call checkForSharableAnnotation in all constructors of ByteToMessageCodec

Motivation:

ByteToMessageCodec miss to check for @Sharable annotation in one of its constructors.

Modifications:

Ensure we call checkForSharableAnnotation in all constructors.

Result:

After your change, what will change."
b2018777347162936c55f4433db58598ca4a7a56,"Move duplicated code into CodecUtil

Motivation:

We have some duplicated code that can be reused.

Modifications:

Create package private class called CodecUtil that now contains the shared code / helper method.

Result:

Less code-duplication"
8cb6b779c98a0668e48bbadde3364cc60acfdad1,"Add io.netty.noJdkZlibEncoder system property

Related issue: #2821

Motivation:

There's no way for a user to change the default ZlibEncoder
implementation.

It is already possible to change the default ZlibDecoder implementation.

Modification:

Add a new system property 'io.netty.noJdkZlibEncoder'.

Result:

A user can disable JDK ZlibEncoder, just like he or she can disable JDK
ZlibDecoder."
2026f15be2f628a53dc5256e7e7e2236310bd541,"Check noJdkZlibEncoder before comparing other parameters

.. for consistency"
9b99a611ad250f75d5c73a1660a762ca0e0afbd9,"[#2823] Writing DefaultFileRegion with EpollSocketChannel may cause hang

Motivation:

In EpollSocketchannel.doWriteFileRegion(...) we need to make sure we write until sendFile(...) returns either 0 or all is written. Otherwise we may not get notified once the Channel is writable again.

This is the case as we use EPOLL_ET.

Modifications:

Always write until either sendFile returns 0 or all is written.

Result:

No more hangs when writing DefaultFileRegion can happen."
98a533ae449ac4821caea3bce35a33c3f56ab122,"Don't ignore maxCapacity if it's not a power of 2

Motivation:

This fixes bug #2848 which caused Recycler to become unbounded and cache infinite number of objects with maxCapacity that's not a power of two. This can result in general sluggishness of the application and OutOfMemoryError.

Modifications:

The test for maxCapacity has been moved out of test to check if the buffer has filled. The buffer is now also capped at maxCapacity and cannot grow over it as it jumps from one power of two to the other.

Additionally, a unit test was added to verify maxCapacity is honored even when it's not a power of two.

Result:

With these changes the user is able to use a custom maxCapacity number and not have it ignored. The unit test assures this bug will not repeat itself."
4e62b51c6d0eaecb3f426f281449db5766a45482,"[#2843] Add test-case to show correct behavior of ByteBuf.refCnt() and ByteBuf.release(...)

Motivation:

We received a bug-report that the ByteBuf.refCnt() does sometimes not show the correct value when release() and refCnt() is called from different Threads.

Modifications:

Add test-case which shows that all is working like expected

Result:

Test-case added which shows everything is ok."
cb1bf1a74e7af909a9374e924e4e19a680c27125,"[#2867] Workaround performance issue with IPv4-mapped-on-IPv6 addresses

Motivation:

InetAddress.getByName(...) uses exceptions for control flow when try to parse IPv4-mapped-on-IPv6 addresses. This is quite expensive.

Modifications:

Detect IPv4-mapped-on-IPv6 addresses in the JNI level and convert to IPv4 addresses before pass to InetAddress.getByName(...) (via InetSocketAddress constructor).

Result:

Eliminate performance problem causes by exception creation when parsing IPv4-mapped-on-IPv6 addresses."
646753c2eb3766352c81e783908ef8ceb2dc4423,"Allow to write CompositeByteBuf directly via EpollDatagramChannel. Related to [#2719]

Motivation:

On linux it is possible to use the sendMsg(...) system call to write multiple buffers with one system call when using datagram/udp.

Modifications:

- Implement the needed changes and make use of sendMsg(...) if possible for max performance
- Add tests that test sending datagram packets with all kind of different ByteBuf implementations.

Result:

Performance improvement when using CompoisteByteBuf and EpollDatagramChannel."
9428d51e2f4387c1eb719803b1d6f5ca275fe84b,"Add support for sendmmsg(...) and so allow to write multiple DatagramPackets with one syscall. Related to [#2719]

Motivation:

On linux with glibc >= 2.14 it is possible to send multiple DatagramPackets with one syscall. This can be a huge performance win and so we should support it in our native transport.

Modification:

- Add support for sendmmsg by reuse IovArray
- Factor out ThreadLocal support of IovArray to IovArrayThreadLocal for better separation as we use IovArray also without ThreadLocal in NativeDatagramPacketArray now
- Introduce NativeDatagramPacketArray which is used for sendmmsg(...)
- Implement sendmmsg(...) via jni
- Expand DatagramUnicastTest to test also sendmmsg(...)

Result:

Netty now automatically use sendmmsg(...) if it is supported and we have more then 1 DatagramPacket in the ChannelOutboundBuffer and flush() is called."
6379075bb906e0502815d5c9c61ee9186c96ce3c,"Fix buffer leak in DatagramUnicastTest caused by incorrect usage of CompositeByteBuf

Motivation:

Due incorrect usage of CompositeByteBuf a buffer leak was introduced.

Modifications:

Correctly handle tests with CompositeByteBuf.

Result:

No more buffer leaks"
3cf65e3987785150d20e061049f7625cbcdd016d,"Directly write CompositeByteBuf if possible without memory copy. Related to [#2719]

Motivation:

In linux it is possible to write more then one buffer withone syscall when sending datagram messages.

Modifications:

Not copy CompositeByteBuf if it only contains direct buffers.

Result:

More performance due less overhead for copy."
003f97168c87fc350b6ea63405dbe98885a102bc,"HTTP Content Decoder Cleanup Bug

Motiviation:
The HTTP content decoder's cleanup method is not cleaning up the decoder correctly.
The cleanup method is currently doing a readOutbound on the EmbeddedChannel but
for decoding the call should be readInbound.

Modifications:
-Change readOutbound to readInbound in the cleanup method

Result:
The cleanup method should be correctly releaseing unused resources"
f7616d22ebb6e1edb0b8e4e8d080053f05c84ec3,Correct javadoc typo in IdleStateHandler example code
08cec3c56b8ee9431832bbbb1f5fd64af0ed4fde,"Add support for ExtensionRegistryLite in ProtobufDecoder

Motivation:

ExtensionRegistry is a subclass of ExtensionRegistryLite.  The ProtobufDecoder
doesn't use the registry directly, it simply passes it through to the Protobuf
API.  The Protobuf calls in question are themselves written in terms
ExtensionRegistryLite not ExtensionRegistry.

Modifications:

Require ExtensionRegistryLite instead of ExtensionRegistry in ProtobufDecoder.

Result:

Consumers can use ExtensionRegistryLite with ProtobufDecoder."
cf5aea52eda2d46d44676afe2d71788a3c54c7a6,"Implemented LZMA frame encoder

Motivation:

LZMA compression algorithm has a very good compression ratio.

Modifications:

- Added `lzma-java` library which implements LZMA algorithm.
- Implemented LzmaFrameEncoder which extends MessageToByteEncoder and provides compression of outgoing messages.
- Added tests to verify the LzmaFrameEncoder and how it can compress data for the next uncompression using the original library.

Result:

LZMA encoder which can compress data using LZMA algorithm."
9572868e57d49f257ecac23689052b2df45be737,"Fix Native EPOLL Build Failure

Motiviation:
If sendmmsg is already defined then the native epoll module failed to build because of conflicting definitions.
The mmsghdr type was also redefined on systems that already supported this structure.

Modifications:
Provide a way so that systems which already define sendmmsg and mmsghdr can build
Provide a way so that systems which don't define sendmmsg and mmsghdr can build

Result:
The native EPOLL module can build in more environments"
57f48e0ec84f1d2b57dd134595370579aa2e707a,"Fixed FingerprintTrustManagerFactory constructor

Motivation:

When constructing a FingerprintTrustManagerFactory from an Iterable of Strings, the fingerprints were correctly parsed but never added to the result array. The constructed FingerprintTrustManagerFactory consequently fails to validate any certificate.

Modifications:

I added a line to add each converted SHA-1 certificate fingerprint to the result array which then gets passed on to the next constructor.

Result:

Certificate fingerprints passed to the constructor are now correctly added to the array of valid fingerprints. The resulting FingerprintTrustManagerFactory object correctly validates certificates against the list of specified fingerprints."
f76a6f40d40d581d615252a9a115ad7be5be4aad,"Allow to access uri of QueryStringDecoder. Related to [#2896]

Motivation:

Sometimes it is useful to be able to access the uri that was used to initialize the QueryStringDecoder.

Modifications:

Add method which allows to retrieve the uri.

Result:

Allow to retrieve the uri that was used to create the QueryStringDecoder."
8988b3f4c0ab891f31679d97d48dd376b4bd2fee,"Fixed typo in LzmaFrameEncoder constructor

Motivation:

A discovered typo in LzmaFrameEncoder constructor when we check `lc + lp` for better compatibility.

Modifications:

Changed `lc + pb` to `lc + lp`.

Result:

Correct check of `lc + lp` value."
a25c585f39aefc9cfd45d8190239f3443e729c03,"Fix overriden method not called in TrafficShaping

Motivation:
handlerAdded and handlerRemoved were overriden but super was never
called, while it should.
Also add one missing information in the toString method.

Modifications:
Add the super corresponding call, and add checkInterval to the
toString() method

Result;
super method calls are correctly passed to the super implementation
part."
858de5699baacfa0de0810cf8da631f83d6f3e87,"[#2924] Correctly update head in MemoryRegionCache.trim()

Motivation:
When MemoryRegionCache.trim() is called, some unused cache entries will be freed (started from head). However, in MeoryRegionCache.trim() the head is not updated, which make entry list's head point to an entry whose chunk is null now and following allocate of MeoryRegionCache will return false immediately.

In other word, cache is no longer usable once trim happen.

Modifications:

Update head to correct idx after free entries in trim().

Result:

MemoryRegionCache behaves correctly even after calling trim()."
48f13988696c885662f613148e61684da1a24684,"Disable caching of PooledByteBuf for different threads.

Motivation:

We introduced a PoolThreadCache which is used in our PooledByteBufAllocator to reduce the synchronization overhead on PoolArenas when allocate / deallocate PooledByteBuf instances. This cache is used for both the allocation path and deallocation path by:
  - Look for cached memory in the PoolThreadCache for the Thread that tries to allocate a new PooledByteBuf and if one is found return it.
  - Add the memory that is used by a PooledByteBuf to the PoolThreadCache of the Thread that release the PooledByteBuf

This works out very well when all allocation / deallocation is done in the EventLoop as the EventLoop will be used for read and write. On the otherside this can lead to surprising side-effects if the user allocate from outside the EventLoop and and pass the ByteBuf over for writing. The problem here is that the memory will be added to the PoolThreadCache that did the actual write on the underlying transport and not on the Thread that previously allocated the buffer.

Modifications:

Don't cache if different Threads are used for allocating/deallocating

Result:

Less confusing behavior for users that allocate PooledByteBufs from outside the EventLoop."
89d4c50c300c8786af254173d307070cdd15a844,"[#2926] Fix 1 byte memory leak in native transport

Motivation:

We use malloc(1) in the on JNI_OnLoad method but never free the allocated memory. This means we have a tiny memory leak of 1 byte.

Modifications:

Call free(...) on previous allocated memory.

Result:

Fix memory leak"
eef2ad7cd2424da63f83052607a232eefc7c36e4,"[#2939] Fix SslContext usage in the examples for client side

Motivation:

We incorrectly used SslContext.newServerContext() in some places where a we needed a client context.

Modifications:

Use SslContext.newClientContext() when using ssl on the client side.

Result:

Working ssl client examples."
ffda229cf4632f00a816828e4a6753c674ab21b3,"Send a websocket close frame with status code when receiving invalid frames

Motivation:

According to the websocket specification peers may send a close frame when
they detect a protocol violation (with status code 1002). The current
implementation simply closes the connection. This update should add this
functionality. The functionality is optional - but it might help other
implementations with debugging when they receive such a frame.

Modification:

When a protocol violation in the decoder is detected and a close was not
already initiated by the remote peer a close frame is
sent.

Result:

Remotes which will send an invalid frame will now get a close frame that
indicates the protocol violation instead of only seeing a closed
connection."
b828e823ef2638f154328fbe55e8cfdd8c5ee570,"Change the operator order of TrafficCounter to calculate the throughput to get the correct result

Motivation:
Currently the last read/write throughput is calculated by first division,this will be 0 if the last read/write bytes < interval,change the order will get the correct result

Modifications:
Change the operator order from first do division to multiplication

Result:
Get the correct result instead of 0 when bytes are smaller than interval"
4eb1529d2cbfb268ada31f53b3a4d6c660caeb35,"Improve WebSocket performance

Motivation:

Websocket performance is to a large account determined through the masking
and unmasking of frames. The current behavior of this in Netty can be
improved.

Modifications:

Perform the XOR operation not bytewise but in int blocks as long as
possible. This reduces the number of necessary operations by 4. Also don't
read the writerIndex in each iteration.
Added a unit test for websocket decoding and encoding for verifiation.

Result:

A large performance gain (up to 50%) in websocket throughput."
43681b56086a73edb290f1facd6ba10f20da469f,"Avoid vectored writes for small websocket messages

Motivation:
The WebSocket08FrameEncoder contains an optimization path for small messages which copies the message content into the header buffer to avoid vectored writes. However this path is in the current implementation never taken because the target buffer is preallocated only for exactly the size of the header.

Modification:
For messages below a certain treshold allocate the buffer so that the message can be directly copied. Thereby the optimized path is taken.

Result:
A speedup of about 25% for 100byte messages. Declines with bigger message sizes. I have currently set the treshold to 1kB which is a point where I could still see a few percent speedup, but we should also avoid burning too many CPU cycles."
a6b3fd8a72c1f19bdabf901ff1b7e01e185fb5e5,"Fix the leak in the WebSocketClientProtocolHandshakeHandler

Motivation:
The WebSocketClientProtocolHandshakeHandler never releases the received handshake response.

Modification:
Release the message in a finally block.

Result:
No more leak"
547a0b04df9c3f242306efcd3a54c713ac0aea81,"Adding a benchmark for websockets

Motivation:

It is often helpful to measure the performance of connections, e.g. the
latency and the throughput. This can be performed through benchmarks.

Modification:

This adds a simple but configurable benchmark for websockets into the
example directory. The Netty WebSocket server will echo all received
websocket frames and will provide an HTML/JS page which serves as the
client for the benchmark.
The benchmark also provides a verification mode that verifies the sent
against the received data. This can be used for the verification ob
websocket frame encoding and decoding funtionality.

Result:

A benchmark is added in form a further Netty websocket example.
With this benchmark it is easily possible to measure the performance between Netty and a browser"
9589e0baca43ca229dd39b041e77e0cee6f06447,"Change client id validation range in codec-mqtt

Motivation:

In MQTT 3.1 specification, ""The Client Identifier (Client ID) is between
1 and 23 characters long, and uniquely identifies the client to the
server"". But, current client id validation length is 0~23. It must be
1~23. The empty string is invalid client id in MQTT 3.1

Modifications:

Change isValidClientId method. Add MIN_CLIENT_ID_LENGTH.

Result:

The validation check for client id length is between 1 and 23."
80ae2c9180767f814172522c5a1b6b2d73b6b080,"Add a test for handover from HTTP to Websocket

Motivation:
I was not fully reassured that whether everything works correctly when a websocket client receives the websocket handshake HTTP response and a websocket frame in a single ByteBuf (which can happen when the server sends a response directly or shortly after the connect). In this case some parts of the ByteBuf must be processed by HTTP decoder and the remaining by the websocket decoder.

Modification:
Adding a test that verifies that in this scenaria the handshake and the message are correctly interpreted and delivered by Netty.

Result:
One more test for Netty.
The test succeeds - No problems"
f7405f2c0cb9e917d854e721437daaee1fb1f41d,"Add exceptions for CONNACK's return code for MQTT 3.1 specification

Motivation:

http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connack
In MQTT 3.1, MQTT server must send a CONNACK with return code if CONNECT
request contains an invalid client identifier or an unacceptable protocol
version. The return code is one of MqttConnectReturnCode.
But, MqttDecoder throws DecoderException when CONNECT request contains
invalid value without distinguish situations. This makes it difficult
for codec-mqtt users to send a response with return code to clients.

Modifications:

Added exceptions for client identifier rejected and unacceptable
protocol version. MqttDecoder will throw those exceptions instead of
DecoderException.

Result:

Users of codec-mqtt can distinguish which is invalid when CONNECT
contains invalid client identifier or invalid protocol version. And, users can
send CONNACK with return code to clients."
01e3bcf30c801138acf6dafc0f578030333a78f6,"Add verification for websocket subprotocol on the client side.

Motivation:

Websocket clients can request to speak a specific subprotocol. The list of
subprotocols the client understands are sent to the server. The server
should select one of the protocols an reply this with the websocket
handshake response. The added code verifies that the reponded subprotocol
is valid.

Modifications:

Added verification of the subprotocol received from the server against the
subprotocol(s) that the user requests. If the user requests a subprotocol
but the server responds none or a non-requested subprotocol this is an
error and the handshake fails through an exception. If the user requests
no subprotocol but the server responds one this is also marked as an
error.

Addiontionally a getter for the WebSocketClientHandshaker in the
WebSocketClientProtocolHandler is added to enable the user of a
WebSocketClientProtocolHandler to extract the used negotiated subprotocol.

Result:

The subprotocol field which is received from a websocket server is now
properly verified on client side and clients and websocket connection
attempts will now only succeed if both parties can negotiate on a
subprotocol.
If the client sends a list of multiple possible subprotocols it can
extract the negotiated subprotocol through the added handshaker getter (WebSocketClientProtocolHandler.handshaker().actualSubprotocol())."
a64484249c86c282532f9d53d09465b2a4bf98c8,"Access autoRead via an AtomicIntegerFieldUpdater.

Motiviation:

Before this change, autoRead was a volatile boolean accessed directly.  Any thread that invoked the DefaultChannelConfig#setAutoRead(boolean) method would read the current value of autoRead, and then set a new value.  If the old value did not match the new value, some action would be immediately taken as part of the same method call.

As volatile only provides happens-before consistency, there was no guarantee that the calling thread was actually the thread mutating the state of the autoRead variable (such that it should be the one to invoke the follow-up actions).  For example, with 3 threads:
 * Thread 1: get = false
 * Thread 1: set = true
 * Thread 1: invokes read()
 * Thread 2: get = true
 * Thread 3: get = true
 * Thread 2: set = false
 * Thread 2: invokes autoReadCleared()
 * Event Loop receives notification from the Selector that data is available, but as autoRead has been cleared, cancels the operation and removes read interest
 * Thread 3: set = true

This results in a livelock - autoRead is set true, but no reads will happen even if data is available (as readyOps).  The only way around this livelock currently is to set autoRead to false, and then back to true.

Modifications:

Write access to the autoRead variable is now made using the getAndSet() method of an AtomicIntegerFieldUpdater, AUTOREAD_UPDATER.  This also changed the type of the underlying autoRead variable to be an integer, as no AtomicBooleanFieldUpdater class exists.  Boolean logic is retained by assuming that 1 is true and 0 is false.

Result:

There is no longer a race condition between retrieving the old value of the autoRead variable and setting a new value."
4a45d23129e990bc7b13dd37df9a119d35e1e299,"Add the encoder/decoder getter methods to HttpClientCodec

Motivation:

There's no way for a user to get the encoder and the decoder of an
HttpClientCodec.  The lack of such getter methods makes it impossible to
remove the codec handlers from the pipeline correctly.

For example, a user could add more than one HttpClientCodec to the
pipeline, and then the user cannot easily decide which encoder and
decoder to remove.

Modifications:

- Add encoder() and decoder() method to HttpClientCodec which returns
  HttpRequestEncoder and HttpResponseDecoder respectively
- Also made the same changes to HttpServerCodec

Result:

A user can distinguish the handlers added by multiple HttpClientCodecs
easily."
fe05b6e5142d51c3501af3d6c90e6c67055047c6,"Auto-generate the handler name when null is specified as a name

Motivation:

There's no way to generate the name of a handler being newly added
automatically and reliably.

For example, let's say you have a routine that adds a set of handlers to
a pipeline using addBefore() or addAfter().  Because addBefore() and
addAfter() always require non-conflicting non-null handler name, making
the multiple invocation of the routine on the same pipeline is
non-trivial.

Modifications:

- If a user specifies null as the name of the new handler,
  DefaultChannelPipeline generates one.
- Update the documentation of ChannelPipeline to match the new behavior

Result:

A user doesn't need to worry about name conflicts anymore."
9839990fffd557d617ae4a97ccc0a931917c07b9,"Fix a bug in NetUtil.createByteArrayFromIpAddressString()

Motivation:

An IPv6 string can have a zone index which is followed by the '%' sign.
When a user passes an IPv6 string with a zone index,
NetUtil.createByteArrayFromIpAddressString() returns an incorrect value.

Modification:

- Strip the zone index before conversion

Result:

An IPv6 string with a zone index is decoded correctly."
0b935b85ce1cb1bc7af7e8b73f27d2f858061321,"Fix an incorrect use of ByteBuf.array() in Socks5CmdRequestDecoder

Motivation:

Socks5CmdRequestDecoder uses ByteBuf.array() naively assuming that the
array's base offset is always 0, which is not the case.

Modification:

- Allocate a new byte array and copy the content there instead

Result:

Another bug fixed"
f8349f8dc5f6e4418e0d1a5ba3f2e4db0138c8c5,"Add AbstractUnsafe.annotateConnectException()

Motivation:

JDK's exception messages triggered by a connection attempt failure do
not contain the related remote address in its message.  We currently
append the remote address to ConnectException's message, but I found
that we need to cover more exception types such as SocketException.

Modifications:

- Add AbstractUnsafe.annotateConnectException() to de-duplicate the
  code that appends the remote address

Result:

- Less duplication
- A transport implementor can annotate connection attempt failure
  message more easily"
2309a75d15ffbd063b9a710df4fa1ec3c63702f9,"Add proxy support for client socket connections

Related issue: #1133

Motivation:

There is no support for client socket connections via a proxy server in
Netty.

Modifications:

- Add a new module 'handler-proxy'
- Add ProxyHandler and its subclasses to support SOCKS 4a/5 and HTTP(S)
  proxy connections
- Add a full parameterized test for most scenarios
- Clean up pom.xml

Result:

A user can make an outgoing connection via proxy servers with only
trivial effort."
87c82d4845276484f60a939142ffea8366b99d34,"Do not consider PortUnreachableException to require channel closure

Motivation:

When a datagram packet is sent to a destination where nobody actually listens to,
the server O/S will respond with an ICMP Port Unreachable packet.
The ICMP Port Unreachable packet is translated into PortUnreachableException by JDK.
PortUnreachableException is not a harmful exception that prevents a user from sending a datagram.
Therefore, we should not close a datagram channel when PortUnreachableException is caught.

Modifications:

- Do not close a channel when the caught exception is PortUnreachableException.

Result:

A datagram channel is not closed unexpectedly anymore."
ab2e80fbb17803fba6638abde3630fdc1f66f9fb,"Add EDNS support to DnsQueryEncoder

Motivation:

DnsQueryEncoder does not encode the 'additional resources' section at all, which contains the pseudo-RR as defined in RFC 2671.

Modifications:

- Modify DnsQueryEncoder to encode the additional resources
- Fix a bug in DnsQueryEncoder where an empty name is encoded incorrectly

Result:

A user can send an EDNS query."
e848066cab19c5b374e44d3e3ceceed03cd42305,"Name resolver API and DNS-based name resolver

Motivation:

So far, we relied on the domain name resolution mechanism provided by
JDK.  It served its purpose very well, but had the following
shortcomings:

- Domain name resolution is performed in a blocking manner.
  This becomes a problem when a user has to connect to thousands of
  different hosts. e.g. web crawlers
- It is impossible to employ an alternative cache/retry policy.
  e.g. lower/upper bound in TTL, round-robin
- It is impossible to employ an alternative name resolution mechanism.
  e.g. Zookeeper-based name resolver

Modification:

- Add the resolver API in the new module: netty-resolver
- Implement the DNS-based resolver: netty-resolver-dns
  .. which uses netty-codec-dns
- Make ChannelFactory reusable because it's now used by
  io.netty.bootstrap, io.netty.resolver.dns, and potentially by other
  modules in the future
  - Move ChannelFactory from io.netty.bootstrap to io.netty.channel
  - Deprecate the old ChannelFactory
  - Add ReflectiveChannelFactory

Result:

It is trivial to resolve a large number of domain names asynchronously."
b9eb8f0e01f96e957eef8f57a1e865aa08744c86,"Fix test failures in ProxyHandlerTest

Motivation:

The default name resolver attempts to resolve the bad host name (destination.com) and actually succeeds, making the ProxyHandlerTest fail.

Modification:

Use NoopNameResolverGroup instead.

Result:

ProxyHandlerTest passes again."
c811d50d6187e51ffbb8d07feac744a8b77a97bd,Fix resource leak in DnsNameResolver
e1787e68768816583f11c9ccebd6beb439f25e21,"Fix another resource leak in DnsNameResolver

- Fix a bug in cache expiration task; wrong object was being released
- Added more sanity checks when caching an entry"
d63413754eb42f4e371ee5163e103e569762172f,"Make TestUtils.getFreePort() check both TCP and UDP

Motivation:

We see occational failures in the datagram tests saying 'address already
in use' when we attempt to bind on a port returned by
TestUtils.getFreePort().

It turns out that TestUtils.getFreePort() only checks if TCP port is
available.

Modifications:

Also check if UDP port is available, so that the datagram tests do not
fail because of the 'address already in use' error during a bind
attempt.

Result:

Less chance of datagram test failures"
f3a2c22738c53af5770183ff8a60a49ae21f62eb,"Fix an infinite loop when writing a zero-length FileRegion

Related: #2964

Motivation:

Writing a zero-length FileRegion to an NIO channel will lead to an
infinite loop.

Modification:

- Do not write a zero-length FileRegion by protecting with proper 'if'.
- Update the testsuite

Result:

Another bug fixed"
7ddc8a445cec72af9ab6a52d8eaabd7868592f63,"Make Bootstrap and ServerBootstrap fully overridable

Related: #2034

Motivation:

Some users want to mock Bootstrap (or ServerBootstrap), and thus they
should not be final but be fully overridable and extensible.

Modifications:

Remove finals wherever possible

Result:

@daschl is happy."
5f94d7a31955f2e0d02cc820cb2aa11ebb6b51ec,"Refactor LzfDecoder to use proper state machine

Motivation:

Make it much more readable code.

Modifications:

- Added states of decompression.
- Refactored decode(...) method to use this states.

Result:

Much more readable decoder which looks like other compression decoders."
dd5b2c30c58d09bf962356069e5db6814894d918,"Allowing negative keys in IntObjectHashMap.

Motivation:

IntObjectHashMap throws an exception when using negative values for
keys.

Modifications:

Changed hashIndex() to normalize the index if the mod operation returns
a negative number.

Result:

IntObjectHashMap supports negative key values."
30060b60833d099f8ebefdf8174755284f2716d8,"Optimize IntObjectHashMap handling of negative keys.

Motivation:

The hashIndex method currently uses a conditional to handle negative
keys. This could be done without a conditional to slightly improve
performance.

Modifications:

Modified hashIndex() to avoid using a conditional.

Result:

Slight performance improvement to hashIndex()."
f3ef94d35edb7bc46013711a74343062bcca0878,"Slight performance improvement to IntObjectHashMap.hashIndex()

Motivation:

Using a needless local copy of keys.length.

Modifications:

Using keys.length explicitly everywhere.

Result:

Slight performance improvement of hashIndex."
a1af35313cc8414109e7a411bb2401ae31046289,"Disable SSLv3 to avoid POODLE vulnerability

Related: #3031

Motivation:

The only way to protect ourselves from POODLE vulnerability in Java for
now is to disable SSLv3.

- http://en.wikipedia.org/wiki/POODLE
- https://blogs.oracle.com/security/entry/information_about_ssl_poodle_vulnerability

Modifivation:

Disable SSLv3 in SslContext implementations

Result:

Prevent POODLE vulnerability when a user used SslContext with the
default configuration"
eb415fded66b5c825aa2818f6223eb8a6480c024,"V4.1 Fix ""="" character in HttpPostRequestDecoder

Motivation
Issue #3004 shows that ""="" character was not supported as it should in
the HttpPostRequestDecoder in form-data boundary.

Modifications:
Add 2 methods in StringUtil
- split with maxPart argument: String split with max parts only (to prevent multiple '='
to be source of extra split while not needed)
- substringAfter: String part after delimiter (since first part is not
needed)
Use those methods in HttpPostRequestDecoder.
Change and the HttpPostRequestDecoderTest to check using a boundary
beginning with ""="".

Results:
The fix implies more stability and fix the issue."
232e529a3b036dccd572480ded7974ce53f6d416,"Fix missing version properties of transport-epoll in all-in-one JAR

Related: #2952

Motivation:

META-INF/io.netty.versions.properties in netty-all-*.jar does not
contain the version information about the netty-transport-epoll module.

Modifications:

Fix a bug in the regular expression in pom.xml, so that the artifacts
with a classifier is also included in the version properties file.

Result:

The version information of all modules are included in the version
properties file, and Version.identify() does not miss
netty-transport-epoll."
67c68ef8ba3458456b8db74b5d51530ed9f363ea,"CorsHandler should release HttpRequest after processing preflight/error.

Motivation:
Currently, when the CorsHandler processes a preflight request, or
respondes with an 403 Forbidden using the short-curcuit option, the
HttpRequest is not released which leads to a buffer leak.

Modifications:
Releasing the HttpRequest when done processing a preflight request or
responding with an 403.

Result:
Using the CorsHandler will not cause buffer leaks."
789e323b79d642ea2c0a024cb1c839654b7b8fad,"Handle an empty ByteBuf specially in HttpObjectEncoder

Related: #2983

Motivation:

It is a well known idiom to write an empty buffer and add a listener to
its future to close a channel when the last byte has been written out:

  ChannelFuture f = channel.writeAndFlush(Unpooled.EMPTY_BUFFER);
  f.addListener(ChannelFutureListener.CLOSE);

When HttpObjectEncoder is in the pipeline, this still works, but it
silently raises an IllegalStateException, because HttpObjectEncoder does
not allow writing a ByteBuf when it is expecting an HttpMessage.

Modifications:

- Handle an empty ByteBuf specially in HttpObjectEncoder, so that
  writing an empty buffer does not fail even if the pipeline contains an
  HttpObjectEncoder
- Add a test

Result:

An exception is not triggered anymore by HttpObjectEncoder, when a user
attempts to write an empty buffer."
0666924e8c41428adb329e47da73546c96e13825,"Don't close the connection whenever Expect: 100-continue is missing.

Motivation:

The 4.1.0-Beta3 implementation of HttpObjectAggregator.handleOversizedMessage closes the
connection if the client sent oversized chunked data with no Expect:
100-continue header. This causes a broken pipe or ""connection reset by
peer"" error in some clients (tested on Firefox 31 OS X 10.9.5,
async-http-client 1.8.14).

This part of the HTTP 1.1 spec (below) seems to say that in this scenario the connection
should not be closed (unless the intention is to be very strict about
how data should be sent).

http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html

""If an origin server receives a request that does not include an
Expect request-header field with the ""100-continue"" expectation,
the request includes a request body, and the server responds
with a final status code before reading the entire request body
from the transport connection, then the server SHOULD NOT close
the transport connection until it has read the entire request,
or until the client closes the connection. Otherwise, the client
might not reliably receive the response message. However, this
requirement is not be construed as preventing a server from
defending itself against denial-of-service attacks, or from
badly broken client implementations.""

Modifications:

Change HttpObjectAggregator.handleOversizedMessage to close the
connection only if keep-alive is off and Expect: 100-continue is
missing. Update test to reflect the change.

Result:

Broken pipe and connection reset errors on the client are avoided when
oversized data is sent."
d59629377c747758c96cf2a02c74a4d5f4b33fc2,"Implement user-defined writability flags

Related: #2945

Motivation:

Some special handlers such as TrafficShapingHandler need to override the
writability of a Channel to throttle the outbound traffic.

Modifications:

Add a new indexed property called 'user-defined writability flag' to
ChannelOutboundBuffer so that a handler can override the writability of
a Channel easily.

Result:

A handler can override the writability of a Channel using an unsafe API.
For example:

  Channel ch = ...;
  ch.unsafe().outboundBuffer().setUserDefinedWritability(1, false);"
a7a654c82f3eb1374001032a44b08b6b105b4992,"Fix the websocket server example

Motivation:
As report in #2953 the websocket server example contained a bug and did therefore not work with chrome:
A websocket extension is added to the pipeline but extensions were disallowed in the handshaker and decoder,
which is leading the decoder to closing the connection after receiving an extension frame.

Modifications:
Allow websocket extensions in the handshaker to correctly enable the extension.

Result:
Working websocket server example
Fixes #2953"
cf4c464d99f0723d908151c2b4a2b9d2b203061c,"Modify HttpObjectDecoder to allow parsing the HTTP headers in multiple steps.

Motivation:
At the moment the whole HTTP header must be parsed at once which can lead to multiple parsing of the same bytes. We can do better here and allow to parse it in multiple steps.

Modifications:

 - Not parse headers multiple times
 - Simplify the code
 - Eliminate uncessary String[] creations
 - Use readSlice(...).retain() when possible.

Result:

Performance improvements as shown in the included benchmark below.

Before change:
[nmaurer@xxx]~% ./wrk-benchmark
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    21.55ms   15.10ms 245.02ms   90.26%
    Req/Sec   196.33k    30.17k  297.29k    76.03%
  373954750 requests in 2.00m, 50.15GB read
Requests/sec: 3116466.08
Transfer/sec:    427.98MB

After change:
[nmaurer@xxx]~% ./wrk-benchmark
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    20.91ms   36.79ms   1.26s    98.24%
    Req/Sec   206.67k    21.69k  243.62k    94.96%
  393071191 requests in 2.00m, 52.71GB read
Requests/sec: 3275971.50
Transfer/sec:    449.89MB"
a653a8ecf44adb06ec899c5648ead7b01cdc8c42,Overall cleanup of cf4c464d99f0723d908151c2b4a2b9d2b203061c
9826d9bc1ad80bdfb4ebc22060fad3d3b4a92e9c,Fix compilation errors in ChannelOutboundBufferTest
c0079840be596ab26ace825fcd0e99809ac527d4,"Improve DnsNameResolverTest.testResolveA()

Motivation:

DnsNameResolver.testResolveA() tests if the cache works as well as the usual DNS protocol test.  To ensure the result from the cache is identical to the result without cache, it compares the two Maps which contain the result of cached/uncached resolution.  The comparison of two Maps yields an expected behavior, but the output of the comparison on failure is often unreadable due to its long length.

Modifications:

Compare entry-by-entry for more comprehensible test failure output

Result:

When failure occurs, it's easier to see which domain was the cause of the problem."
7fbd66f8143408fa30f275416a598b344a9a071e,"Added an option to use websockets without masking

Motivation:

The requirement for the masking of frames and for checks of correct
masking in the websocket specifiation have a large impact on performance.
While it is mandatory for browsers to use masking there are other
applications (like IPC protocols) that want to user websocket framing and proxy-traversing
characteristics without the overhead of masking. The websocket standard
also mentions that the requirement for mask verification on server side
might be dropped in future.

Modifications:

Added an optional parameter allowMaskMismatch for the websocket decoder
that allows a server to also accept unmasked frames (and clients to accept
masked frames).
Allowed to set this option through the websocket handshaker
constructors as well as the websocket client and server handlers.
The public API for existing components doesn't change, it will be
forwarded to functions which implicetly set masking as required in the
specification.
For websocket clients an additional parameter is added that allows to
disable the masking of frames that are sent by the client.

Result:

This update gives netty users the ability to create and use completely
unmasked websocket connections in addition to the normal masked channels
that the standard describes."
06ea226a2827a5b31b6a55efac44c8a3b1ed1e2c,"SslHandler wrap memory leak

Motivation:
The SslHandler wrap method requires that a direct buffer be passed to the SSLEngine.wrap() call. If the ByteBuf parameter does not have an underlying direct buffer then one is allocated in this method, but it is not released.

Modifications:
- Release the direct ByteBuffer only accessible in the scope of SslHandler.wrap

Result:
Memory leak in SslHandler.wrap is fixed."
7e65c09373029a63a57e8ad2eae530f48c76724f,"IPv6 address to string rfc5952

Motivation:
The java implementations for Inet6Address.getHostName() do not follow the RFC 5952 (http://tools.ietf.org/html/rfc5952#section-4) for recommended string representation. This introduces inconsistencies when integrating with other technologies that do follow the RFC.

Modifications:
-NetUtil.java to have another public static method to convert InetAddress to string. Inet4Address will use the java InetAddress.getHostAddress() implementation and there will be new code to implement the RFC 5952 IPV6 string conversion.
-New unit tests to test the new method

Result:
Netty provides a RFC 5952 compliant string conversion method for IPV6 addresses"
746c8cab32338e8861ade9708449308b288878a2,"SslHander wrap conditional direct buffer allocation

Motivation:
The SslHandler currently forces the use of a direct buffer for the input to the SSLEngine.wrap(..) operation. This allocation may not always be desired and should be conditionally done.

Modifications:
- Use the pre-existing wantsDirectBuffer variable as the condition to do the conversion.

Result:
- An allocation of a direct byte buffer and a copy of data is now not required for every SslHandler wrap operation."
04f77b76f802a5bb30447eb0e3580f6ba0e1f2db,"Backport ALPN and Mutual Auth SSL

Motivation:

Improvements were made on the main line to support ALPN and mutual
authentication for TLS. These should be backported.

Modifications:

- Backport commits from the master branch
  - f8af84d5993456426a63ad0146479147b1a4a5e5
  - e74c8edba3fcbfd2e895ed6aac440efeb3aa637f

Result:

Support for ALPN and mutual authentication."
16fb44cf9738f32ab59e97b533ea62bcf51b1aef,"Code clean-up

- Fix the inspector warnings
- Fix the infinite recursion in SslContext.newClientContext()
- Fix Javadoc errors"
06217aefb753904f431e9012cf65170e7eb07fa4,"Add back the removed deprecated methods in SslContext

Motivation:

Previous backport removed the old methods and constructors. They should
not be removed in 4.x but just deprecated in favor of the new methods
and constructors.

Modifications:

Add back the removed methods and constructors in SslContext and its
subtypes for backward compatibility.

Result:

Backward compatibility issues fixed."
f2678a31ff6a16ef3b9697df88700e87a4ab8780,"Add ApplicationProtocolConfig.DISABLED

Motivation:

When ALPN/NPN is disabled, a user has to instantiate a new
ApplicationProtocolConfig with meaningless parameters.

Modifications:

- Add ApplicationProtocolConfig.DISABLED, the singleton instance
- Reject the constructor calls with Protocol.NONE, which doesn't make
  much sense because a user should use DISABLED instead.

Result:

More user-friendly API when ALPN/NPN is not needed by a user."
50e06442c3f2753c9b2a506f68ea70273b829e21,"Backport header improvements from 5.0

Motivation:
The header class hierarchy and algorithm was improved on the master branch for versions 5.x. These improvments should be backported to the 4.1 baseline.

Modifications:
- cherry-pick the following commits from the master branch: 2374e17, 36b4157, 222d258

Result:
Header improvements in master branch are available in 4.1 branch."
4ce994dd4fe58a03fa25b0911e5b3a2079b33692,"Fix backward compatibility from the previous backport

Motivation:

The commit 50e06442c3f2753c9b2a506f68ea70273b829e21 changed the type of
the constants in HttpHeaders.Names and HttpHeaders.Values, making 4.1
backward-incompatible with 4.0.

It also introduces newer utility classes such as HttpHeaderUtil, which
deprecates most static methods in HttpHeaders.  To ease the migration
between 4.1 and 5.0, we should deprecate all static methods that are
non-existent in 5.0, and provide proper counterpart.

Modification:

- Revert the changes in HttpHeaders.Names and Values
- Deprecate all static methods in HttpHeaders in favor of:
  - HttpHeaderUtil
  - the member methods of HttpHeaders
  - AsciiString
- Add integer and date access methods to HttpHeaders for easier future
  migration to 5.0
- Add HttpHeaderNames and HttpHeaderValues which provide standard HTTP
  constants in AsciiString
  - Deprecate HttpHeaders.Names and Values
  - Make HttpHeaderValues.WEBSOCKET lowercased because it's actually
    lowercased in all WebSocket versions but the oldest one
- Add RtspHeaderNames and RtspHeaderValues which provide standard RTSP
  constants in AsciiString
  - Deprecate RtspHeaders.*
- Do not use AsciiString.equalsIgnoreCase(CharSeq, CharSeq) if one of
  the parameters are AsciiString
- Avoid using AsciiString.toString() repetitively
  - Change the parameter type of some methods from String to
    CharSequence

Result:

Backward compatibility is recovered.  New classes and methods will make
the migration to 5.0 easier, once (Http|Rtsp)Header(Names|Values) are
ported to master."
53fbfbb590c9283dc40f437effbb9bbd867c0b23,"Remove CollectionUtils

Motivation:

CollectionUtils has only one method and it is used only in DefaultHeaders.

Modification:

Move CollectionUtils.equals() to DefaultHeaders and make it private

Result:

One less class to expose in our public API"
e82595502bcd21c29f1c1e97136c79f7e9664327,"Replace HttpHeaders.getDate() with getTimeMillis()

Motivation:

Headers has getTimeMillis(), not getDate()

Modification:

- Replace HttpHeaders.getDate() with getTimeMillis() so that migration
  is smoother

Result:

User code which accesses a date header is easier to migrate"
72a611a28f5471fcffef1e6a13a5b1077bc65e08,"HTTP Content Encoder allow EmptyLastHttpContent

Motiviation:
The HttpContentEncoder does not account for a EmptyLastHttpContent being provided as input.  This is useful in situations where the client is unable to determine if the current content chunk is the last content chunk (i.e. a proxy forwarding content when transfer encoding is chunked).

Modifications:
- HttpContentEncoder should not attempt to compress empty HttpContent objects

Result:
HttpContentEncoder supports a EmptyLastHttpContent to terminate the response."
9ba3126bd4b4c75b920d4015234fdc356318b17f,"Add generic versions of PromiseAggregator and PromiseNotifier.

Motivation:

ChannelPromiseAggregator and ChannelPromiseNotifiers only allow
consumers to work with Channels as the result type. Generic versions
of these classes allow consumers to aggregate or broadcast the results
of an asynchronous execution with other result types.

Modifications:

Add PromiseAggregator and PromiseNotifier. Add unit tests for both.
Remove code in ChannelPromiseAggregator and ChannelPromiseNotifier and
modify them to extend the new base classes.

Result:

Consumers can now aggregate or broadcast the results of an asynchronous
execution with results types other than Channel."
4279efde59aa800047468cb8d16007eb67da84b6,"Handle the interface name in IPv6 address correctly

Motivation:

NetUtil.isValidIpV6Address() handles the interface name in IPv6 address
incorrectly. For example, it returns false for the following addresses:

- ::1%lo
- ::1%_%_in_name_

Modifications:

- Strip the square brackets before validation for simplicity
- Strip the part after the percent sign completely before validation for
  simplicity
- Simplify and reformat NetUtilTest

Result:

- The interface names in IPv6 addresses are handled correctly.
- NetUtilTest is cleaner"
07fbff351308dd2d7bc7dd3ceaa1207695512f60,Fix checkstyle
fda8808210c4f4f092a93da5929df43062c3aa6c,"Rewrite HttpObjectDecoder to make use of proper state machine

Motivation:

HttpObjectDecoder extended ReplayDecoder which is slightly slower then ByteToMessageDecoder.

Modifications:

- Changed super class of HttpObjectDecoder from ReplayDecoder to ByteToMessageDecoder.
- Rewrote decode() method of HttpObjectDecoder to use proper state machine.
- Changed private methods HeaderParser.parse(ByteBuf), readHeaders(ByteBuf) and readTrailingHeaders(ByteBuf), skipControlCharacters(ByteBuf) to consider available bytes.
- Set HeaderParser and LineParser as static inner classes.
- Replaced not safe actualReadableBytes() with buffer.readableBytes().

Result:

Improved performance of HttpObjectDecoder by approximately 177%."
cff98fff510a9d9b1fa77ae6447f2dc5bb24f4e2,Benchmark for HttpRequestDecoder
1db8b83d2256b0d73d539ddd5d80841b95eef0af,"Cater for empty response bodies when performing response compression.

Motivation:
RFC 2616, 4.3 Message Body states that:
All 1xx (informational), 204 (no content), and 304 (not modified) responses MUST NOT include a
message-body. All other responses do include a message-body, although it MAY be of zero length.

Modifications:
HttpContentEncoder was previously modified to cater for HTTP 100 responses. This check is enhanced to
include HTTP 204 and 304 responses.

Result:
Empty response bodies will not be modified to include the compression footer. This footer messed with Chrome's
response parsing leading to ""hanging"" requests."
e09ffc7d60c4f0bafe78c61fdb5cb26b3c0b7250,"Add supporting MQTT 3.1.1

Motivation:

MQTT 3.1.1 became an OASIS Standard at 13 Nov 2014.
http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/mqtt-v3.1.1.html
MQTT 3.1.1 is a minor update of 3.1. But, previous codec-mqtt supported only MQTT 3.1.

Modifications:

- Add protocol name `MQTT` with previous `MQIsdp` for `CONNECT`’s variable header.
- Update client identifier validation for 3.1 with 3.1.1.
- Add `FAILURE (0x80)` for `SUBACK`’s new error code.
- Add a test for encode/decode `CONNECT` of 3.1.1.

Result:

MqttEncoder/MqttDecoder can encode/decode frames of 3.1 or 3.1.1."
6f80fdcac49436fa404c57a5715ca75ae50dbb4d,"SPDY: add support for pushed resources in SpdyHttpDecoder

Motivation:

The SPDY/3.1 spec does not adequate describe how to push resources
from the server. This was solidified in the HTTP/2 drafts by dividing
the push into two frames, a PushPromise containing the request,
followed by a Headers frame containing the response.

Modifications:

This commit modifies the SpdyHttpDecoder to support pushed resources
that are divided into multiple frames. The decoder will accept a
pushed SpdySynStreamFrame containing the request headers, followed by
a SpdyHeadersFrame containing the response headers.

Result:

The SpdyHttpDecoder will create an HttpRequest object followed by an
HttpResponse object when receiving pushed resources."
0795ee6130a0581f2ce416e16051d96559dae967,"Add more test cases to ZlibTest

Motivation:

Currently, we only test our ZlibEncoders against our ZlibDecoders. It is
convenient to write such tests, but it does not necessarily guarantee
their correctness. For example, both encoder and decoder might be faulty
even if the tests pass.

Modifications:

Add another test that makes sure that our GZIP encoder generates the
GZIP trailer, using the fact that GZIPInputStream raises an EOFException
when GZIP trailer is missing.

Result:

More coverage for GZIP compression"
1765429335205ab5ee0ac072a0952d3a81f0dcd1,Revert bad renaming in ZlibTest
35db3c671070aaf5ee8f5cc0e026d3a3574f7f1b,"Small performance improvements

Motivation:

Found performance issues via FindBugs and PMD.

Modifications:

- Removed unnecessary boxing/unboxing operations in DefaultTextHeaders.convertToInt(CharSequence) and DefaultTextHeaders.convertToLong(CharSequence). A boxed primitive is created from a string, just to extract the unboxed primitive value.
- Added a static modifier for DefaultHttp2Connection.ParentChangedEvent class. This class is an inner class, but does not use its embedded reference to the object which created it. This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.
- Added a static compiled Pattern to avoid compile it each time it is used when we need to replace some part of authority.
- Improved using of StringBuilders.

Result:

Performance improvements."
3ebc1ab321f2ac51b59a58e8c1d11933e144171d,"Adding codeAsText to HttpResponseStatus.

Motivation:

I found myself writing AsciiString constants in my code for
response statuses and thought that perhaps it might be nice to have
them defined by Netty instead.

Modifications:

Adding codeAsText to HttpResponseStatus that returns the status code as
AsciiText.

In addition, added the 421 Misdirected Request response code from
https://tools.ietf.org/html/draft-ietf-httpbis-http2-15#section-9.1.2

This response header was renamed in draft 15:
https://tools.ietf.org/html/draft-ietf-httpbis-http2-15#appendix-A.1
But the code itself was not changed, and I thought using the latest would
be better.

Result:

It is now possible to specify a status like this:
new DefaultHttp2Headers().status(HttpResponseStatus.OK.codeAsText());"
ef11a31a065cfb2b6c2252fec817a926be8cb3f1,"Clean up 000d3a55c5b771b7ed8b71f54b44de72a85306c0

- Rename httpResponseStatus() to newStatus()
  - Move newStatus up so that static methods are grouped together
- Rename codeAsString to codeAsText"
c29e703275beffc3b9b127d4cbf5eaae8c5acd08,"Use Proxy-Authorization instead of Authorization for proxy authentication

Motivation:

When authenticating with a proxy server, HttpProxyHandler should use the
'Proxy-Authorization' header rather than the 'Authorization' header.

Modifications:

- Use 'Proxy-Authorization' header

Result:

Can connect to an HTTP proxy server"
8ba9e5bede083864bd34b3cd9f49528f13cdebeb,"Add logLevel property to enable different log levels for the examples.

Motivation:

When running the examples using the provided run-examples.sh script the
log level is 'info' level. It can be handy to be able to configure a
different level, for example 'debug', while learning and trying out the
the examples.

Modifications:

Added a dependency to logback-classic to the examples pom.xml, and also
added a logback configuration file. The log level can be configured by
setting the 'logLevel' system property, and if that property is not set
the default will be 'info' level.
The run-examples.sh was updated to show an example of using the system
property to set the log level to 'debug'

Result:

It is now possible to turn on debug logging by settnig a system property
on the command line."
948eafdce252dbf5f2513d3cc9772a9d2d612a7a,"Add HttpStatusClass

Related: #3157

Motivation:

It should be convenient to have an easy way to classify an
HttpResponseStatus based on the first digit of the HTTP status code, as
defined in the RFC 2616:

- Information 1xx
- Success 2xx
- Redirection 3xx
- Client Error 4xx
- Server Error 5xx

Modification:

- Add HttpStatusClass
- Add HttpResponseStatus.codeClass() that returns the class of the HTTP
  status code

Result:

It's easier to determine the class of an HTTP status"
9da4250917a709085ac064904db8253f00693dee,"Backport the IntObjectHashMap changes in f23f3b9617b01095416334060ca8379316946e5c

Motivation:

The mentioned commit contains a bug fix and an improvement in
IntObjectHashMap that requires backporting.

Modifications:

Update IntObjectMap, IntObjectHashMap, and IntObjectHashMapTest

Result:

Easier to backport HTTP/2 and other changes in master in the future"
338b60821d91b12e57e9ea303eb7b6b0865fd64c,"Do not write LastHttpContent twice in HttpStaticFileServer example

Related: #3122

Motivation:

The HttpStaticFileServer example writes the LastHttpContent twice at the
end of the transfer.  HttpChunkedInput already produces a
LastHttpContent at the end of the stream, so there's no reason to write
another.

Modifications:

Do not write LastHttpContent in HttpStaticFileServerHandler when
HttpChunkedInput is used to transfer a file.

Result:

HttpStaticFileServer does not violates the protocol anymore."
040c340f761ba955449d4a27cb58305739437a0d,"Add back IntObjectMap.values(Class<V>)

Motivation:

Although the new IntObjectMap.values() that returns Collection is
useful, the removed values(Class<V>) that returns an array is also
useful. It's also good for backward compatibility.

Modifications:

- Add IntObjectMap.values(Class<V>) back
- Miscellaneous improvements
  - Cache the collection returned by IntObjectHashMap.values()
  - Inspector warnings
- Update the IntObjectHashMapTest to test both values()

Result:

- Backward compatibility
- Potential performance improvement of values()"
247d5b1bd96fc1289879bcd7af54ea45b939df27,Fix awful naming
88aa9e7c4aec03190e80813b27e912b217a72ba5,"Remove or de-prioritize RC4 from default cipher suites

Motivation:

RC4 is not a recommended cipher suite anymore, as the recent research
reveals, such as:

- http://www.isg.rhul.ac.uk/tls/

Modifications:

- Remove most RC4 cipher suites from the default cipher suites
- For backward compatibility, leave RC4-SHA, while de-prioritizing it

Result:

Potentially safer default"
d33a80da2686efeedb32fb1a5a6beeea9c1bb4fd,"Use Triple DES in JdkSslContext cipher suite list.

Motivation:

JdkSslContext used SSL_RSA_WITH_DES_CBC_SHA in its cipher suite list.
OpenSslServerContext used DES-CBC3-SHA in the same place in its cipher suite
list, which is equivalent to SSL_RSA_WITH_3DES_EDE_CBC_SHA.

This means the lists were out of sync. Furthermore, using
SSL_RSA_WITH_DES_CBC_SHA is not desirable as it uses DES, a weak cipher. Triple
DES should be used instead.

Modifications:

Replace SSL_RSA_WITH_DES_CBC_SHA with SSL_RSA_WITH_3DES_EDE_CBC_SHA in
JdkSslContext.

Result:

The JdkSslContext and OpenSslServerContext cipher suite lists are now in sync.
Triple DES is used instead of DES, which is stronger."
e1273147fa9c7eb5f831b5201db98d517708c73d,replaced broken &lt with &lt; and same for gt
f4d3f81d6ccd0f6ec3081462fca5f9ab5702fad6,"Prevent channel re-registration from firing channelActive

Motivation:

AbstractUnsafe considers two possibilities during channel registration. First,
the channel may be an outgoing connection, in which case it will be registered
before becoming active. Second, the channel may be an incoming connection in,
which case the channel will already be active when it is registered. To handle
the second case, AbstractUnsafe checks if the channel is active after
registration and calls ChannelPipeline.fireChannelActive() if so.  However, if
an active channel is deregistered and then re-registered this logic causes a
second fireChannelActive() to be invoked. This is unexpected; it is reasonable
for handlers to assume that this method will only be invoked once per channel.

Modifications:

This change introduces a flag into AbstractUnsafe to recognize if this is the
first or a subsequent registration. ChannelPipeline.fireChannelActive() is only
possible for the first registration.

Result:

ChannelPipeline.fireChannelActive() is only called once."
2769ad428a042e48e2d5a52dccb48c4cbcf14a03,"Check the bindFuture before writing a DNS query

Related: #3149

Motivation:

DnsQueryContext, using the DatagramChannel bound in DnsNameResolver,
blindly writes to the channel without checking the bind future for
success.

Modifications:

Check the bindFuture before writing a DNS query to a DatagramChannel

Result:

Bug fixed"
46ef370ee1cccbc0b8562408d3e4721b4da37d02,"Copy the resolver configuration when cloning Bootstrap

Motivation:

Bootstrap.clone() does not copy the resolver configuration.

Modifications:

Copy the resolver configuration when cloning.

Result:

Bug fixed"
a37c4ad7f4578f725831f4f989fa82f389e6bfc7,"Add @SafeVarargs to PromiseAggregator#add and PromiseNotifier#(...) https://github.com/netty/netty/issues/3147

Motivation:

8fbc513 introduced stray warnings in callsites of
PromiseAggregator#add and PromiseNotifier#(...).

Modifications:

This commit adds the @SafeVarargs annotation to PromiseAggregator#add
and PromiseNotifier#(...). As Netty is built with JDK7, this is a
recognized annotation and should not affect runtime VM versions 1.5 and
1.6.

Result:

Building Netty with JDK7 will no longer produce warnings in the
callsites mentioned above."
bbe880f5ea05b6a8769e77c2df801107a1343502,Rocumented decoder pitfalls to avoid mistakes found in [#3184]
8f77c807956ca2f0b486641b6ffd6ef3895aa364,"Added support for SSL Server Name Indication.

Motivation:

When we need to host multiple server name with a single IP, it requires
the server to support Server Name Indication extension to serve clients
with proper certificate. So the SniHandler will host multiple
SslContext(s) and append SslHandler for requested hostname.

Modification:

* Added SniHandler to host multiple certifications in a single server
* Test case

Result:

User could use SniHandler to host multiple certifcates at a time.
It's server-side only."
96d596802b5ee06e0bd0ebba63b441396a94f696,"Fix dependency issues with hamcrest

Motivation:

We use 3 (!) libraries to build mock objects - easymock, mockito, jmock.
Mockito and jMock pulls in the different versions of Hamcrest, and it
conflicts with the version pulled by jUnit.

Modifications:

- Replace mockito-all with mockito-core to avoid pulling in outdated
  jUnit and Hamcrest
- Exclude junit-dep when pulling in jmock-junit4, because it pulls an
  outdated Hamcrest version
- Pull in the hamcrest-library version used by jUnit explicitly

Result:

No more dependency hell that results in NoSuchMethodError during the
tests"
bf58f871c38645401ab3cf421954777708b4a9f1,"Overall clean-up of the initial SniHandler/DomainNameMapping work

- Parameterize DomainNameMapping to make it useful for other use cases
  than just mapping to SslContext
- Move DomainNameMapping to io.netty.util
- Clean-up the API documentation
- Make SniHandler.hostname and sslContext volatile because they can be
  accessed by non-I/O threads"
70a91c72c418147728faea34cfddcbb41b5a4c24,Fix checkstyle
bd8a5bc9b3db224c446e0c05fa127ba7022db942,Add missing @Override annotation
46576fd2ff8f7069cdaf7eb1479bde7fb3811c74,"Fix a race condition where handler is removed before unregistration

Related: #3156

Motivation:

Let's say we have a channel with the following pipeline configuration:

  HEAD --> [E1] H1 --> [E2] H2 --> TAIL

when the channel is deregistered, the channelUnregistered() methods of
H1 and H2 will be invoked from the executor thread of E1 and E2
respectively. To ensure that the channelUnregistered() methods are
invoked from the correct thread, new one-time tasks will be created
accordingly and be scheduled via Executor.execute(Runnable).

As soon as the one-time tasks are scheduled,
DefaultChannelPipeline.fireChannelUnregistered() will start to remove
all handlers from the pipeline via teardownAll(). This process is
performed in reversed order of event propagation. i.e. H2 is removed
first, and then H1 is removed.

If the channelUnregistered() event has been passed to H2 before H2 is
removed, a user does not see any problem.

If H2 has been removed before channelUnregistered() event is passed to
H2, a user will often see the following confusing warning message:

  An exceptionCaught() event was fired, and it reached at the tail of
  the pipeline. It usually means the last handler in the pipeline did
  not handle the exception.

Modifications:

To ensure that the handlers are removed *after* all events are
propagated, traverse the pipeline in ascending order before performing
the actual removal.

Result:

A user does not get the confusing warning message anymore."
54a39a94aca1c68d630c641187e135fd6873901b,"example: memcache: fix set command

Motivation:

The example MemcacheClient set command doesn't work.

Modifications:

Fill the extras field buffer with zeros so that it gets written to the
request payload.

Result:

The example MemcacheClient set command works."
a79466769fe359fbfc5cbca8d55e64197e049176,"Lazily check for root, avoids unnecessary errors & resources

Motivation:

io.netty.util.internal.PlatformDependent.isRoot() depends on the IS_ROOT field which is filled in during class initialization. This spawns processes and consumes resources, which are not generally necessary to the complete functioning of that class.

Modifications:

This switches the class to use lazy initialization this field inside of the isRoot() method using double-checked locking (http://en.wikipedia.org/wiki/Double-checked_locking).

Result:

The first call to isRoot() will be slightly slower, at a tradeoff that class loading is faster, uses fewer resources and platform errors are avoided unless necessary."
7f92771496ef59eaf6fe86b516f5a8abdb38b9c0,"Fix a bug where Recycler's capacity can increase beyond its maximum

Related: #3166

Motivation:

When the recyclable object created at one thread is returned at the
other thread, it is stored in a WeakOrderedQueue.

The objects stored in the WeakOrderedQueue is added back to the stack by
WeakOrderedQueue.transfer() when the owner thread ran out of recyclable
objects.

However, WeakOrderedQueue.transfer() does not have any mechanism that
prevents the stack from growing beyond its maximum capacity.

Modifications:

- Make WeakOrderedQueue.transfer() increase the capacity of the stack
  only up to its maximum
- Add tests for the cases where the recyclable object is returned at the
  non-owner thread
- Fix a bug where Stack.scavengeSome() does not scavenge the objects
  when it's the first time it ran out of objects and thus its cursor is
  null.
- Overall clean-up of scavengeSome() and transfer()

Result:

The capacity of Stack never increases beyond its maximum."
23db94f5a1f6f70db273d53a18fa1c03f2b9545a,"Fix Java 6 compatibility issue in DnsNameResolver

Related: #3173

Motivation:

DnsNameResolver was using InetSocketAddress.getHostString() which is
only available since Java 7.

Modifications:

Use InetSocketAddress.getHostName() in lieu of getHostString() when the
current Java version is less than 7.

Result:

DnsNameResolver runs fine on Java 6."
8206cc6e146a72f9b9ac4fc1efcfce0e393d7fe2,"Headers set/add/contains timeMillis methods

Motivation:
The new Headers interface contains methods to getTimeMillis but no add/set/contains variants.  These should be added for consistency.

Modifications:
- Add three new methods: addTimeMillis, setTimeMillis, containsTimeMillis to the Headers interface.
- Add a new method to the Headers.ValueConverter interface: T convertTimeMillis(long)
- Bring these new interfaces up the class hierarchy

Result:
All Headers classes have setters/getters for timeMillis."
3dbca4a9e2d2343e9c8af3bac085fd5b3a44da3b,"Fire channelRead() event immediately in OIO message channels

Related: #3189

Motivation:

OIO transport implementations block for at most 1 second to wait for
additional messages (or accepted connections).

However, because AbstractOioMessageChannel defers the channelRead()
events for the messages read so far until there's nothing to read up to
maxMessagesPerRead, any read operation will be followed by a 1-second
delay.

Modifications:

Fire channelRead() events as soon as doRead() returns so that there is
no 1 second delay between the actual read and the channelRead() event.

Result:

No more weird 1-second delay"
1ef6f147349c145542d77c987f57e1dfbd405406,"Trigger exceptionCaught() when VoidChannelPromise fails

Related: #3190

Motivation:

When an outbound handler method raises an exception, its promise is
marked as failed.  If the promise is done already, the exception is
logged.

When the promise is void, exceptionCaught() must be triggered to notify
a user. However, ChannelHandlerInvokerUtil simply swallows it.

Modifications:

Do not swallow an exception when the promise is void.

Result:

A user who uses a void promise for an outbound operation will be
notified on failure."
3957a88a9482fd41d22840ca45e2a0e31030d3d1,"Make PendingWriteQueue.recycle() update its state before triggering an event

Related: #3212

Motivation:

PendingWriteQueue.recycle() updates its data structure after triggering
a channelWritabilityChanged() event. It causes a rare corruption such as
double free when channelWritabilityChanged() method accesses the
PendingWriteQueue.

Modifications:

Update the state of PendingWriteQueue before triggering an event.

Result:

Fix a rare double-free problem"
9b2fede68edd9b12e3abc8421c6c484339d75042,"Fix AbstractDiskHttpData int conversion from long

Motivations:
The chunkSize might be oversized after comparison (size being > of int
capacity) if file size is bigger than an integer.

Modifications:
Change it to long.

Result:
There is no more int oversized.

Same fix for 4.1 and Master"
2a426b3d447c2a0a6345b6a2bb9ee384f6266a3b,Fixing minor typo in FastThreadLocal javadoc.
9ff234abedb92596b3c0c2f8c3a969cb533f7cc3,"Call ctx.flush() at least once in ChunkedWriteHandler.flush()

Related: #3219

Motivation:

ChunkedWriteHandler.flush() does not call ctx.flush() when channel is
not writable. This can be a problem when other handler / non-Netty
thread writes messages simultaneously, because
ChunkedWriteHandler.flush() might have no chance to observe
channel.isWritable() returns true and thus the channel is never flushed.

Modifications:

- Ensure that ChunkedWriteHandler.flush() calls ctx.flush() at least
  once.

Result:

A stall connection issue, that occurs when certain combination of
handlers exist in a pipeline, has been fixed. (e.g. SslHandler and
ChunkedWriteHandler)"
298e7af6473f359cf7b608e7f9dcbe6526f792dd,"Trigger channelWritabilityChanged() later to avoid reentrance

Related: #3212

Motivation:

When SslHandler and ChunkedWriteHandler exists in a pipeline together,
it is possible that ChunkedWriteHandler.channelWritabilityChanged()
invokes SslHandler.flush() and vice versa. Because they can feed each
other (i.e. ChunkedWriteHandler.channelWritabilityChanged() ->
SslHandler.flush() -> ChunkedWriteHandler.channelWritabilityChanged() ->
..), they can fall into an inconsistent state due to reentrance (e.g.
bad MAC record at the remote peer due to incorrect ordering.)

Modifications:

- Trigger channelWritabilityChanged() using EventLoop.execute() when
  there's a chance where channelWritabilityChanged() can cause a
  reentrance issue
- Fix test failures caused by the modification

Result:

Fix the handler reentrance issues related with a
channelWritabilityChanged() event"
1dc1831abfb4a8f818e34f5c6781b1a96a60456f,"Add SslHandler.renegotiate()

Related: #3125

Motivation:

We did not expose a way to initiate TLS renegotiation and to get
notified when the renegotiation is done.

Modifications:

- Add SslHandler.renegotiate() so that a user can initiate TLS
  renegotiation and get the future that's notified on completion
- Make SslHandler.handshakeFuture() return the future for the most
  recent handshake so that a user can get the future of the last
  renegotiation
- Add the test for renegotiation to SocketSslEchoTest

Result:

Both client-initiated and server-initiated renegotiations are now
supported properly."
d5a24d4f6c5110fcd2c3185e3752c4537ad84b7c,"Make SslHandler work when autoRead is turned off

Related: #2958

Motivation:

SslHandler currently does not issue a read() request when it is
handshaking. It makes a connection with autoRead off stall, because a
user's read() request can be used to read the handshake response which
is invisible to the user.

Modifications:

- SslHandler now issues a read() request when:
  - the current handshake is in progress and channelReadComplete() is
    invoked
  - the current handshake is complete and a user issued a read() request
    during handshake
- Rename flushedBeforeHandshakeDone to flushedBeforeHandshake for
  consistency with the new variable 'readDuringHandshake'

Result:

SslHandler should work regardless whether autoRead is on or off."
182c91f06c5c9ae52af884eaf4d7726472363a8e,"Ensure buffer is not released when call array() / memoryAddress()

Motivation:

Before we missed to check if a buffer was released before we return the backing byte array or memoryaddress. This could lead to JVM crashes when someone tried various bulk operations on the Unsafe*ByteBuf implementations.

Modifications:

Always check if the buffer is released before all to return the byte array and memoryaddress.

Result:

No more JVM crashes because of released buffers when doing bulk operations on Unsafe*ByteBuf implementations."
12c9ce7f679cc593ea7e902302cef756cd2bef05,"Allow to lazy create a DefaultFileRegion from a File

Motivation:

We only provided a constructor in DefaultFileRegion that takes a FileChannel which means the File itself needs to get opened on construction. This has the problem that if you want to write a lot of Files very fast you may end up with may open FD's even if they are not needed yet. This can lead to hit the open FD limit of the OS.

Modifications:

Add a new constructor to DefaultFileRegion which allows to construct it from a File. The FileChannel will only be obtained when transferTo(...) is called or the DefaultFileRegion is explicit open'ed via open() (this is needed for the native epoll transport)

Result:

Less resource usage when writing a lot of DefaultFileRegion."
3cd94822f5b687700d1fa088f1638e14f6d1953b,"Generate heap and thread dump when some tests fail

Motivation:

We have a few sporadic test failures which are only easily reproduceable
in our CI machine.  To get more information about the failure, we need
heap and full thread dump at the moment of failure.

Modifications:

- Add TestUtils.dump() method to dump heap and threads
- Modify SocketGatheringWriteTest and SocketSslEchoTest to call
  TestUtils.dump() on failure

Result:

We get more information about the test failure."
e72b2235fbddd17e13dfefb7bb439dd1ea8538bf,"Make sure to notify handshake success even if SSLEngine is closed

Related:

e9685ea45aebcb4f9dad0f3a1fc328a06b4932dd

Motivation:

SslHandler.unwrap() does not evaluate the handshake status of
SSLEngine.unwrap() when the status of SSLEngine.unwrap() is CLOSED.

It is not correct because the status does not reflect the state of the
handshake currently in progress, accoding to the API documentation of
SSLEngineResult.Status.

Also, sslCloseFuture can be notified earlier than handshake notification
because we call sslCloseFuture.trySuccess() before evaluating handshake
status.

Modifications:

- Notify sslCloseFuture after the unwrap loop is finished
- Add more assertions to SocketSslEchoTest

Result:

Potentially fix the regression caused by:
- e9685ea45aebcb4f9dad0f3a1fc328a06b4932dd"
6ee069ffb4869580e4e67d6b9c4ae01b53017105,"Add log messages when dump starts

.. to make it easier to find the right dump file for a test when there
are multiple dump files."
e7cf1dcb989b7b04b11621b0fa95eafa8277d49c,"Test TLS renegotiation with explicit cipher suite change

Motivation:

So far, our TLS renegotiation test did not test changing cipher suite
during renegotiation explicitly.

Modifications:

- Switch the cipher suite during renegotiation

Result:

We are now sure the cipher suite change works."
dfd0cc5ea2c2e271a591585913da985f328ea639,Add more assertions related with TLS renegotiation
73c0f85d63ccabdbd29de433243975ab2e098265,"Remove bottleneck while create InetSocketAddress in native transport

Motivation:

Everytime a new connection is accepted via EpollSocketServerChannel it will create a new EpollSocketChannel that needs to get the remote and local addresses in the constructor. The current implementation uses new InetSocketAddress(String, int) to create these. This is quite slow due the implementation in oracle and openjdk.

Modifications:

Encode all needed informations into a byte array before return from jni layer and then use new InetSocketAddress(InetAddress, int) to create the socket addresses. This allows to create the InetAddress via a byte[] and so reduce the overhead, this is done either by using InetAddress.getByteAddress(byte[]) or by Inet6Address.getByteAddress(String, byte[], int).

Result:

Reduce performance overhead while accept new connections with native transport"
0bc08515699dc4b385c0e2ea314a94b82c01493f,"Fix documentation for ChannelHandlerContext#fireChannelReadComplete

Motivation:
Fix a minor documentation bug in
ChannelHandlerContext#fireChannelReadComplete.

Modifications:
ChannelHandlerContext#fireChannelReadComplete no longer references an
incorrect method in its javadoc.

Results:
Documentation is correct."
cbbf5eb96bcc60b9119b707603f1031f43edf080,"Compress the heap dump generated by TestUtils.dump()

Motivation:

It takes too long to download the heap dump from the CI server.

Modifications:

Compress the heap dump as much as possible.

Result:

When heap dump is generated by certain test failure, the generated heap
dump file is about 3 times smaller than before, although the compression
time will increase the build time when the test fails."
5dd48cf3fe7c197a541a425f4df75f55dfffef5e,Fix build errors due to missing dependency
8d4a97e05be6bbe3072a24bbd51db39a57be60b3,"Generate non-test JAR for netty-testsuite

Motivation:

So far, we generated and deployed test JARs to Maven repositories. The
deployed JAR had the classifier 'test-jar'.  The test JAR is consumed by
transport-native-epoll as a test dependency.

The problem is, when netty-transport-native-epoll pulls the test JAR as
a dependency, that Maven resolves its transitive dependencies at
'compile' and 'runtime' scope only, which is incorrect.

I was bitten by this problem recently while trying to add a new
dependency to netty-testsuite.  Because I added a new dependency at the
'test' scope, the new dependency was not pulled transitively by
transport-native-epoll and caused an unexpected build failure.

- d6160208c37cfd21b690f1a0df67776bf986b28e
- bf77bb4c3ae04778e65b8a38c2a9ec0e15207de8

Modifications:

- Move all classes in netty-testsuite from src/test to src/main
- Update the 'compile' scope dependencies of netty-testsuite
- Override the test directory configuration properties of the surefire
  plugin
- Do not generate the test JAR anymore
- Update the dependency of netty-transport-native-epoll

Result:

It is less error-prone to add a new dependency to netty-testsuite."
bd6d0f3fd56318da43f0ae75f0f0d5ebbf490cb6,"ensure getRawQuery is not null before appending

Motivation:

without this check then given a URI with path /path the resulting URL will be /path?null=

Modifications:

check that getRawQuery doesn't return null and only append if not

Result:

urls of the form /path will not have a null?= appended"
9ee75126ebc7fb025468fee0c13012a75f6e642c,"Motivation: Sonar points out an equals comparison, where the types compared are different and don't share any common parent http://clinker.netty.io/sonar/drilldown/issues/io.netty:netty-parent:master?severity=CRITICAL#

Modifications:
Converted AsciiString into a String by calling toString() method before comparing with equals(). Also added a unit-test to show that it works.

Result:
Major violation is gone. Code is correct."
c7b407e28871a01db7541df4eddd196349ce32ab,"Compress the heap dump after tests are finished

Motivation:

Tests sometimes time out because it took too long to compress the
generated heap dump.

Modifications:

- Move the compression logic to a new method 'compressHeapDumps()'
- Call TestUtils.compressHeapDumps() at the end of the tests, so that
  the tests do not fail because of timeout

Result:

JUnit reports the real cause of the test failure instead of timeout
exception."
98a2bb62f5f4bb0b6bfc08e01ced827e06e2ea2d,"Log detailed information about renegotiation and traffic

Motivation:

We need more information to understand why SocketSslEchoTest fails
sporadically in the CI machine.

Modifications:

- Refactor SocketSslEchoTest so that it is easier to retrieve the
  information about renegotiation and the current progress

Result:

We will get more information when the test fails."
4f7632a853639cf015936a1c51412936dcb1cf84,Fix checkstyle
08f7b24d6a3374fceb781333c794321cd501a929,"Java ALPN provider version update

Motivation:

There was a bug in the Java ALPN library we are using.  A new version was released to fix this bug and we should update our pom.xml to use the new version.

Modifications:

Update pom.xml to use new ALPN library.

Result:

Newer versions of JDK (1.7_u71, 1.7_u72, 1.8_u25) have the bug fixed."
93194c65950f155669cd6c342c5eaa7ac05af4ac,"Parent pom inconsistent between baselines

Motivation:
ALPN version updates revealed an inconsistency visible by defaulting to npn when alpn was expected.

Modifications:
Default to ALPN.

Result:
Build and unit tests should pass."
563bf24424a5516765105cfbf3989c359925832d,"Do not use SLF4J/Logback API directly

Motivation:

TrafficShapingHandlerTest uses Logback API directly, which is
discouraged.  Also, it overrides the global default log level, which
silences the DEBUG messages from other tests.

Modifications:

Remove the direct use of Logback API

Result:

The tests executed after TrafficShapingHandlerTest logs their DEBUG
messages correctly."
699e6e3b024d4e42f11cad11c080b33e8ea4dcac,"Fix memory leak in OpenSslEngine

Motivation:

When a remote peer did open a connection and only do the handshake without sending any data and then directly close the connection we did not call shutdown() in the OpenSslEngine. This leads to a native memory leak. Beside this it also was not fireed when a OpenSslEngine was created but never used.

Modifications:

- Make sure shutdown() is called in all cases when closeInbound() is called
- Call shutdown() also in the finalize() method to ensure we release native memory when the OpenSslEngine is GC'ed

Result:

No more memory leak when using OpenSslEngine"
a69a39c84949c6093182858092d57139a128e2bf,"Always return SliceByteBuf on slice(...) to eliminate possible leak

Motivation:

When calling slice(...) on a ByteBuf the returned ByteBuf should be the slice of a ByteBuf and shares it's reference count. This is important as it is perfect legal to use buf.slice(...).release() and have both, the slice and the original ByteBuf released. At the moment this is only the case if the requested slice size is > 0. This makes the behavior inconsistent and so may lead to a memory leak.

Modifications:

- Never return Unpooled.EMPTY_BUFFER when calling slice(...).
- Adding test case for buffer.slice(...).release() and buffer.duplicate(...).release()

Result:

Consistent behaviour and so no more leaks possible."
66294892a0eb7ec5c28bb75e173de205ea86100b,"CompositeByteBuf.nioBuffers(...) must not return an empty ByteBuffer array

Motivation:

CompositeByteBuf.nioBuffers(...) returns an empty ByteBuffer array if the specified length is 0. This is not consistent with other ByteBuf implementations which return an ByteBuffer array of size 1 with an empty ByteBuffer included.

Modifications:

Make CompositeByteBuf.nioBuffers(...) consistent with other ByteBuf implementations.

Result:

Consistent and correct behaviour of nioBufffers(...)"
b7e82b2ccb13dd6749f66471016cf37713050342,"Efficiently handle writing ( wrap(...) ) of CompositeByteBuf when using SslHandler

Motivation:

SslHandler.wrap(...) does a poor job when handling CompositeByteBuf as it always call ByteBuf.nioBuffer() which will do a memory copy when a CompositeByteBuf is used that is backed by multiple ByteBuf.

Modifications:

- Use SslEngine.wrap(ByteBuffer[]...) to allow wrap CompositeByteBuf in an efficient manner
- Reduce object allocation in unwrapNonAppData(...)

Result:

Performance improvement when a CompositeByteBuf is written and the SslHandler is in the ChannelPipeline."
79bb200f591bed06cdf4f47783e41ced06c05515,"Remove thepiratebay.se from the test domain list

.. due to its instability"
682df517c9d8c9a0ad2a37f7a4eb219305de28e5,"Add OpenSslClientContext to allow creating SslEngine for client side

Motivation:

We only support openssl for server side at the moment but it would be also useful for client side.

Modification:

* Upgrade to new netty-tcnative snapshot to support client side openssl support
* Add OpenSslClientContext which can be used to create SslEngine for client side usage
* Factor out common logic between OpenSslClientContext and OpenSslServerContent into new abstract base class called OpenSslContext
* Correctly detect handshake failures as soon as possible
* Guard against segfault caused by multiple calls to destroyPools(). This can happen if OpenSslContext throws an exception in the constructor and the finalize() method is called later during GC

Result:

openssl can be used for client and servers now."
87eca066da16ba848d0f069835c706ecabd5ca74,"More complete OpenSslEngine SSLSession implementation

Motivation:

The current SSLSession implementation used by OpenSslEngine does not support various operations and so may not be a good replacement by the SSLEngine provided by the JDK implementation.

Modifications:

- Add SSLSession.getCreationTime()
- Add SSLSession.getLastAccessedTime()
- Add SSLSession.putValue(...), getValue(...), removeValue(...), getValueNames()
- Add correct SSLSession.getProtocol()
- Ensure OpenSSLEngine.getSession() is thread-safe
- Use optimized AtomicIntegerFieldUpdater when possible

Result:

More complete OpenSslEngine SSLSession implementation"
473c23aec9febb9e79bb1ef7add44cb26cfe227c,"Allow to enable client authentication on the OpenSslEngine

Motivation:

At the moment there is no way to enable client authentication when using OpenSslEngine. This limits the uses of OpenSslEngine.

Modifications:

Add support for different authentication modes.

Result:

OpenSslEngine can now also be used when client authenticiation is needed."
393e3ea38360add92294982c422a770cf5dd1ed8,"Use TrustManager for certificate verification

Motivation:

To make OpenSsl*Context a drop in replacement for JdkSsl*Context we need to use TrustManager.

Modifications:

Correctly hook in the TrustManager

Result:

Better compatibility"
15ca81a5656b4202df3584eee0b98511405901d5,"Allow to use custom TrustManagerFactory for JdkSslServerContent and OpenSslServerContext

Motivation:

When using client auth it is sometimes needed to use a custom TrustManagerFactory.

Modifications:

Allow to pass in TrustManagerFactory

Result:

It's now possible to use custom TrustManagerFactories for JdkSslServerContext and OpenSslServerContext"
1729859c68f5d7ba647854b69b4fccf5bf2ccb9d,"Use OpenSslClientContext as default if openssl is avaible

Motivation:

As we now support OpenSslEngine for client side, we should use it when avaible.

Modifications:

Use SslProvider.OPENSSL when openssl can be found

Result:

OpenSslEngine is used whenever possible"
5c57b5de5bbe3c5297d434842acd58e2d61c566d,"Check for errors without object allocation

Motivation:

At the moment we use SSL.getLastError() in unwrap(...) to check for error. This is very inefficient as it creates a new String for each check and we also use a String.startsWith(...) to detect if there was an error we need to handle.

Modifications:

Use SSL.getLastErrorNumber() to detect if we need to handle an error, as this only returns a long and so no String creation happens. Also the detection is much cheaper as we can now only compare longs. Once an error is detected the lately SSL.getErrorString(long) is used to conver the error number to a String and include it in log and exception message.

Result:

Performance improvements in OpenSslEngine.unwrap(...) due less object allocation and also faster comparations."
5ba4fdf3bafc36708212c1b11804c4ff04903701,"HttpObjectAggregator only set Content-Length is not already set.

Motivation:

HEAD requests will have a Content-Length set that doesn't match the
actual length. So we only want to set Content-Length header if it isn't
already set.

Modifications:

If check around setting the Content-Length.

Result:

A HEAD request will no correctly return the specified Content-Length
instead of the body length."
cf6eb70f936497c833d357efebc05157c0e59c0c,"Fix NoClassDefFoundError when netty-tcnative is unavailable

Motivation:

ProxyHandlerTest fails with NoClassDefFoundError raised by
SslContext.newClientContext().

Modifications:

Fix a missing 'return' statement that makes the switch-case block fall
through unncecessarily

Result:

- ProxyHandlerTest does not fail anymore.
- SslContext.newClientContext() does not raise NoClassDefFoundError
  anymore."
fe796fc8abaaf71a083f041e235b7b7ba6b00cee,"Provide helper methods in ByteBufUtil to write UTF-8/ASCII CharSequences. Related to [#909]

Motivation:

We expose no methods in ByteBuf to directly write a CharSequence into it. This leads to have the user either convert the CharSequence first to a byte array or use CharsetEncoder. Both cases have some overheads and we can do a lot better for well known Charsets like UTF-8 and ASCII.

Modifications:

Add ByteBufUtil.writeAscii(...) and ByteBufUtil.writeUtf8(...) which can do the task in an optimized way. This is especially true if the passed in ByteBuf extends AbstractByteBuf which is true for all of our implementations which not wrap another ByteBuf.

Result:

Writing an ASCII and UTF-8 CharSequence into a AbstractByteBuf is a lot faster then what the user could do by himself as we can make use of some package private methods and so eliminate reference and range checks. When the Charseq is not ASCII or UTF-8 we can still do a very good job and are on par in most of the cases with what the user would do.

The following benchmark shows the improvements:

Result: 2456866.966 ?(99.9%) 59066.370 ops/s [Average]
  Statistics: (min, avg, max) = (2297025.189, 2456866.966, 2586003.225), stdev = 78851.914
  Confidence interval (99.9%): [2397800.596, 2515933.336]

Benchmark                                                        Mode   Samples        Score  Score error    Units
i.n.m.b.ByteBufUtilBenchmark.writeAscii                         thrpt        50  9398165.238   131503.098    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiString                   thrpt        50  9695177.968   176684.821    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiStringViaArray           thrpt        50  4788597.415    83181.549    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiStringViaArrayWrapped    thrpt        50  4722297.435    98984.491    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiStringWrapped            thrpt        50  4028689.762    66192.505    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiViaArray                 thrpt        50  3234841.565    91308.009    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiViaArrayWrapped          thrpt        50  3311387.474    39018.933    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeAsciiWrapped                  thrpt        50  3379764.250    66735.415    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8                          thrpt        50  5671116.821   101760.081    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8String                    thrpt        50  5682733.440   111874.084    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8StringViaArray            thrpt        50  3564548.995    55709.512    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8StringViaArrayWrapped     thrpt        50  3621053.671    47632.820    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8StringWrapped             thrpt        50  2634029.071    52304.876    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8ViaArray                  thrpt        50  3397049.332    57784.119    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8ViaArrayWrapped           thrpt        50  3318685.262    35869.562    ops/s
i.n.m.b.ByteBufUtilBenchmark.writeUtf8Wrapped                   thrpt        50  2473791.249    46423.114    ops/s
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1,387.417 sec - in io.netty.microbench.buffer.ByteBufUtilBenchmark

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

The *ViaArray* benchmarks are basically doing a toString().getBytes(Charset) which the others are using ByteBufUtil.write*(...)."
fb3b16d9d4ffc194dae1d4454680359b48396dba,"Allow to enable session cache when using OpenSsl

Motivation:

At the moment it is not possible to make use of the session cache when OpenSsl is used. This should be possible when server mode is used.

Modifications:

- Add OpenSslSessionContext (implements SSLSessionContext) which exposes all the methods to modify the session cache.
- Add various extra methods to OpenSslSessionContext for extra functionality
- Return OpenSslSessionContext when OpenSslEngine.getSession().getContext() is called.
- Add sessionContext() to SslContext
- Move OpenSsl specific session operations to OpenSslSessionContext and mark the old methods @deprecated

Result:

It's now possible to use session cache with OpenSsl"
7423db0b8e29248ba78a9b1e98dafb876e828836,"Add proper Openssl.SSLSession.getId() implementation

Motivation:

The current implementation not returns the real session as byte[] representation.

Modifications:

Create a proper Openssl.SSLSession.get() implementation which returns the real session as byte[].

Result:

More correct implementation"
8a1c7f2ca6805b35fc26c2f1a59c814d4a07fd7d,"Allow to enable/disable protocols on the OpenSslEngine

Motivation:

To be compatible with SSLEngine we need to support enable / disable procols on the OpenSslEngine

Modifications:

Implement OpenSslEngine.getSupportedProtocols() , getEnabledProtocols() and setEnabledProtocols(...)

Result:

Better compability with SSLEngine"
8e6739ddc0d411f1d74838ce2085efff6ef7449f,"Explicit allow to enable / disable session cache

Motivation:

It is sometimes useful to enable / disable the session cache.

Modifications:

* Add OpenSslSessionContext.setSessionCacheEnabled(...) and isSessionCacheEnabled()

Result:

It is now possible to enable / disable cache on the fly"
b8dd95b8ad592badc9a8aa53fa3b9f48ffad13fb,"Allow to set the context for which sessions can be used.

Motivation:

Openssl supports the SSL_CTX_set_session_id_context function to limit for which context a session can be used. We should support this.

Modifications:

Add OpenSslServerSessionContext that exposes a setSessionIdContext(...) method now.

Result:

It's now possible to use SSL_CTX_set_session_id_context."
f0e306c2fdc394c9af901243e35a95df2323a1ae,"Allow to override how headers are encoded

Motivation:

Even if its against the HTTP RFC there are situations where it may be useful to use other chars then US_ASCII in the headers. We should allow to make it possible by allow the user to override the how headers are encoded.

Modifications:

- Add encodeHeaders(...) method and so allow to override it.

Result:

It's now possible to encode headers with other charset then US_ASCII by just extend the encoder and override the encodeHeaders(...) method."
58c14418a093c60cbe37533538f5079687d77267,Upgrade to netty-tcnative-1.1.32.Fork1
268111208007b1336dc1bbdcb0b9c15427e14e1f,"Fix big transfer and Write traffic shaping issues

Motivation:

Several issues were shown by various ticket (#2900 #2956).
Also use the improvement on writability user management from #3036.
And finally add a mixte handler, both for Global and Channels, with
the advantages of being uniquely created and using less memory and
less shaping.

Issue #2900

When a huge amount of data are written, the current behavior of the
TrafficShaping handler is to limit the delay to 15s, whatever the delay
the previous write has. This is wrong, and when a huge amount of writes
are done in a short time, the traffic is not correctly shapened.

Moreover, there is a high risk of OOM if one is not using in his/her own
handler for instance ChannelFuture.addListener() to handle the write
bufferisation in the TrafficShapingHandler.

This fix use the ""user-defined writability flags"" from #3036 to
allow the TrafficShapingHandlers to ""user-defined"" managed writability
directly, as for reading, thus using the default isWritable() and
channelWritabilityChanged().
This allows for instance HttpChunkedInput to be fully compatible.

The ""bandwidth"" compute on write is only on ""acquired"" write orders, not
on ""real"" write orders, which is wrong from statistic point of view.

Issue #2956

When using GlobalTrafficShaping, every write (and read) are
synchronized, thus leading to a drop of performance.
ChannelTrafficShaping is not touched by this issue since synchronized is
then correct (handler is per channel, so the synchronized).

Modifications:
The current write delay computation takes into account the previous
write delay and time to check is the 15s delay (maxTime) is really
exceeded or not (using last scheduled write time). The algorithm is
simplified and in the same time more accurate.

This proposal uses the #3036 improvement on user-defined writability
flags.

When the real write occurs, the statistics are update accordingly on a
new attribute (getRealWriteThroughput()).

To limit the synchronisations, all synchronized on
GlobalTrafficShapingHandler on submitWrite were removed. They are
replaced with a lock per channel (since synchronization is still needed
to prevent unordered write per channel), as in the sendAllValid method
for the very same reason.
Also all synchronized on TrafficCounter on read/writeTimeToWait() are
removed as they are unnecessary since already locked before by the
caller.
Still the creation and remove operations on lock per channel (PerChannel
object) are synchronized to prevent concurrency issue on this critical
part, but then limited.

Additionnal changes:
1) Use System.nanoTime() instead of System.currentTimeMillis() and
minimize calls
2) Remove / 10 ° 10 since no more sleep usage
3) Use nanoTime instead of currentTime such that time spend is computed,
not real time clock. Therefore the ""now"" relative time (nanoTime based)
is passed on all sub methods.
4) Take care of removal of the handler to force write all pending writes
and release read too
8) Review Javadoc to explicit:

- recommandations to take into account isWritable

- recommandations to provide reasonable message size according to
traffic shaping limit

- explicit ""best effort"" traffic shaping behavior when changing
configuration dynamically

Add a MixteGlobalChannelTrafficShapingHandler which allows to use only one
handler for mixing Global and Channel TSH. I enables to save more memory and
tries to optimize the traffic among various channels.

Result:
The traffic shaping is more stable, even with a huge number of writes in
short time by taking into consideration last scheduled write time.

The current implementation of TrafficShapingHandler using user-defined
writability flags and default isWritable() and
fireChannelWritabilityChanged works as expected.

The statistics are more valuable (asked write vs real write).

The Global TrafficShapingHandler should now have less ""global""
synchronization, hoping to the minimum, but still per Channel as needed.

The GlobalChannel TrafficShapingHandler allows to have only one handler for all channels while still offering per channel in addition to global traffic shaping.

And finally maintain backward compatibility."
a77070fe9ffc64c9e4fada03b0fe20087e109dd4,Clean-up
aa42287e46f39f6a907d5da09194bb4487be8309,"Throw exceptions outside the native code

Rebased and cleaned-up based on the work by @normanmaurer

Motivation:

Currently, IOExceptions and ClosedChannelExceptions are thrown from
inside the JNI methods. Instantiation of Java objects inside JNI code is
an expensive operation, needless to say about filling stack trace for
every instantiation of an exception.

Modifications:

Change most JNI methods to return a negative value on failure so that
the exceptions are instantiated outside the native code.

Also, pre-instantiate some commonly-thrown exceptions for better
performance.

Result:

Performance gain"
f26be2e97364ee3d697a5d773469622772d78291,"Clean up the exception messages

- Consistency
- Use the method name of the current scope if possible"
a666acce6d48bf50f49f3cca9874ac64a89d7c4a,"Add more tests to EmptyByteBufTest

- Ensure an EmptyByteBuf has an array, an NIO buffer, and a memory
  address at the same time
- Add an assertion that checks if EMPTY_BUFFER is an EmptyByteBuf,
  just in case we make a mistake in the future"
155c0e2f369eaebe78f91d69e7eada7c1ac64ea7,"Implement internal memory access methods of CompositeByteBuf correctly

Motivation:

When a CompositeByteBuf is empty (i.e. has no component), its internal
memory access operations do not always behave as expected.

Modifications:

Check if the nunmber of components is zero. If so, return an empty
array or an empty NIO buffer, etc.

Result:

More robustness"
a093f00b67222c4e82d9d271545ad89d6204ddfe,"Cipher suite conversion between Java and OpenSSL

Related: #3285

Motivation:

When a user attempts to switch from JdkSslContext to OpenSslContext, he
or she will see the initialization failure if he or she specified custom
cipher suites.

Modifications:

- Provide a utility class that converts between Java cipher suite string
  and OpenSSL cipher suite string
- Attempt to convert the cipher suite so that a user can use the cipher
  suite string format of Java regardless of the chosen SslContext impl

Result:

- It is possible to convert all known cipher suite strings.
- It is possible to switch from JdkSslContext and OpenSslContext and
  vice versa without any configuration changes"
7d50f7864c47e6f2a21cab616235350bd2c60f80,"Implement OpenSslEngine.getSupportedCipherSuites() and get/setEnabledCipherSuites()

Motivation:

To make OpenSslEngine a full drop-in replacement, we need to implement
getSupportedCipherSuites() and get/setEnabledCipherSuites().

Modifications:

- Retrieve the list of the available cipher suites when initializing
  OpenSsl.
- Improve CipherSuiteConverter to understand SRP
- Add more test data to CipherSuiteConverterTest
- Add bulk-conversion method to CipherSuiteConverter

Result:

OpenSslEngine should now be a drop-in replacement for JDK SSLEngineImpl
for most cases."
ea5f38955a8cb50e19a06f06129d4806f522ee1b,"Raise an exception when the specified cipher suite is not available

Motivation:

SSL_set_cipher_list() in OpenSSL does not fail as long as at least one
cipher suite is available.  It is different from the semantics of
SSLEngine.setEnabledCipherSuites(), which raises an exception when the
list contains an unavailable cipher suite.

Modifications:

- Add OpenSsl.isCipherSuiteAvailable(String) which checks the
  availability of a cipher suite
- Raise an IllegalArgumentException when the specified cipher suite is
  not available

Result:

Fixed compatibility"
405cdc89dd79f3e6fe0a81a9f81bf794a581c6fb,"Only call JNI methods if really needed

Motivation:

Calling JNI methods is pretty expensive, so we should only do if needed.

Modifications:

Lazy call methods if needed.

Result:

Better performance."
1173699dff65e4f786e098d8b2ffcf172235127a,Enable client-side OpenSSL in SocketSslEchoTest
f398f2f7b5bd40a78ca8ddf71cdbc5114c6b13a0,"Fire channelReadComplete() in EpollDatagramChannel

Related: #3274

Motivation:

channelReadComplete() event is not triggered after reading successfully
in EpollDatagramChannel.

Modifications:

- Trigger exceptionCaught() event for read failure only once for less
  noise
- Trigger channelReadComplete() event at the end of the read.

Result:

Fix #3274"
20d818ccec9670bea362273be44e1a4c486bcdbe,"Implement toString() for all HttpMessage implementations

Related: #3019

Motivation:

We have multiple (Full)HttpRequest/Response implementations and only
some of them implements toString() properly.

Modifications:

- Add the reusable string converter for HttpMessages to HttpMessageUtil
- Implement toString() of (Full)HttpRequest/Response implementations
  properly using HttpMessageUtil

Result:

Prettier string representation is returned by HttpMessage
implementations."
650bb5358de39422bbfbb455e643d1fab7f00a0d,Fix duplicate channelReadComplete() in EpollDatagramChannel
ecfa241768499dae2bffa174a874e8f9d81d6d1f,"Make sure AggregatedFullHttpMessage.trailingHeaders() return non-null

When handling an oversized message, HttpObjectAggregator does not wait
until the last chunk is received to produce the failed message, making
AggregatedFullHttpMessage.trailingHeaders() return null."
1d344f488cb5b3adb0630ea9a000b699fb76c09c,"Fix ByteBufUtilBenchmark on utf8 encodings.

Motivation
----------
The performance tests for utf8 also used the getBytes on ASCII,
which is incorrect and also provides different performance numbers.

Modifications
-------------
Use CharsetUtil.UTF_8 instead of US_ASCII for the getBytes calls.

Result
------
Accurate and semantically correct benchmarking results on utf8
comparisons."
df186f38a086a84dbb8b728169e101e660b0cadf,"Do not pre-populate cipher suite conversion table

Motivation:

- There's no point of pre-population.
- Waste of memory and time because they are going to be cached lazily
- Some pre-populated cipher suites are ancient and will be unused

Modification:

- Remove cache pre-population

Result:

Sanity restored"
186cf2b8ea4ee1f3ef7c32d2238a172c638e6655,"Require RHEL 6.6 to release

Motivation:

The latest stable RHEL version of 6.x is now 6.6.

Modification:

Update pom.xml's validation configuration

Result:

Can release on the latest stable RHEL version in 6.x"
8ed4807360371ed81bc40b62394b01dc2bb9a7c2,"Fix broken OSGi version range for NPN and ALPN dependency

Related: #3302"
85fecba770d803c1990c07ac9aed098585ef0e90,"Fix for Issue #3308 related to slice missing retain

Motivations:
It seems that slicing a buffer and using this slice to write to CTX will
decrease the initial refCnt to 0, while the original buffer is not yet
fully used (not empty).

Modifications:
As suggested in the ticket and tested, when the currentBuffer is sliced
since it will still be used later on, the currentBuffer is retained.

Add a test case for this issue.

Result:
The currentBuffer still has its correct refCnt when reaching the last
write (not sliced) of 1 and therefore will be released correctly.
The exception does no more occur.

This fix should be applied to all branches >= 4.0."
2c3f4a374a7680b354ce03b67fc94f932759ed47,"Do not log CNFE when tcnative is not in classpath

Motivation:

When a user deliberatively omitted netty-tcnative from classpath, he or
she will see an ugly stack trace of ClassNotFoundException.

Modifications:

Log more briefly when netty-tcnative is not in classpath.

Result:

Better-looking log at DEBUG level"
98731a51c8332a222258eecdbc61464961fecdbf,"Add the URL of the wiki for easier troubleshooting

Motivation:

When a user sees an error message, sometimes he or she does not know
what exactly he or she has to do to fix the problem.

Modifications:

Log the URL of the wiki pages that might help the user troubleshoot.

Result:

We are more friendly."
50af9b916c198de51b648582197cea078309b57e,"Eliminate memory copy in ByteToMessageDecoder whenever possible

Motivation:

Currently when there are bytes left in the cumulation buffer we do a byte copy to produce the input buffer for the decode method. This can put quite some overhead on the impl.

Modification:

- Use a CompositeByteBuf to eliminate the byte copy.
- Allow to specify if a CompositeBytebug should be used or not as some handlers can only act on one ByteBuffer in an efficient way (like SslHandler :( ).

Result:

Performance improvement as shown in the following benchmark.

Without this patch:
[xxx@xxx ~]$ ./wrk-benchmark
Running 5m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    20.19ms   38.34ms   1.02s    98.70%
    Req/Sec   241.10k    26.50k  303.45k    93.46%
  1153994119 requests in 5.00m, 155.84GB read
Requests/sec: 3846702.44
Transfer/sec:    531.93MB

With the patch:
[xxx@xxx ~]$ ./wrk-benchmark
Running 5m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    17.34ms   27.14ms 877.62ms   98.26%
    Req/Sec   252.55k    23.77k  329.50k    87.71%
  1209772221 requests in 5.00m, 163.37GB read
Requests/sec: 4032584.22
Transfer/sec:    557.64MB"
cb7ab1f6a4acb2e3c27c10f46469bf5ef146ecd1,Fix a compilation error
c4630c03285e86d84b83149ba395036447305f63,"Disable NioUdtMessageRendezvousChannelTest.basicEcho()

Motivation:

NioUdtMessageRendezvoudChannelTest.basicEcho() is flakey on Linux and
failing on Windows.

Modifications:

Disable the problematic test until it's fixed.

Result:

Less annoyance"
04dd885421918ec6ad1bdb252439876e08d663a6,"SPDY: fix support for pushed resources in SpdyHttpEncoder

Motivation:

The SpdyHttpDecoder was modified to support pushed resources that are
divided into multiple frames. The decoder accepts a pushed
SpdySynStreamFrame containing the request headers, followed by a
SpdyHeadersFrame containing the response headers.

Modifications:

This commit modifies the SpdyHttpEncoder so that it encodes pushed
resources in a format that the SpdyHttpDecoder can decode. The encoder
will accept an HttpRequest object containing the request headers,
followed by an HttpResponse object containing the response headers.

Result:

The SpdyHttpEncoder will create a SpdySynStreamFrame followed by a
SpdyHeadersFrame when sending pushed resources."
edb93a6fccc8e1cecbf84520185bf85ac7eb6aed,Remove static imports and inner class imports for disambiguation
fbc0ce4784a589802f812f8dcb2bfae76b783b30,"Avoid unnecessary string conversion where possible

Motivation:

HttpResponseStaus, HttpMethod and HttpVersion have methods that return
AsciiString.  There's no need for object-to-string conversion.

Modifications:

Use codeAsText(), name(), text() instead of setInt() and setObject()

Result:

Efficiency"
3ebe2ee36978fca5e3e4f8861e81f9b61a2c7549,"Remove unnecessary loop and indentation in decompressors

Motivation:

Decompression handlers contain heavy use of switch-case statements. We
use compact indentation style for 'case' so that we utilize our screen
real-estate more efficiently.

Also, the following decompression handlers do not need to run a loop,
because ByteToMessageDecoder already runs a loop for them:

- FastLzFrameDecoder
- Lz4FrameDecoder
- LzfDecoder

Modifications:

- Fix indentations
- Do not wrap the decoding logic with a for loop when unnecessary
- Handle the case where a FastLz/Lzf frame contains no data properly so
  that the buffer does not leak and less garbage is produced.

Result:

- Efficiency
- Compact source code
- No buffer leak"
1bb818bb59612f1676bb34eb9cde4ea9fb1d3025,"Reduce memory copies when using OpenSslEngine with SslHandler

Motivation:

When using OpenSslEngine with the SslHandler it is possible to reduce memory copies by unwrap(...) multiple ByteBuffers at the same time. This way we can eliminate a memory copy that is needed otherwise to cumulate partial received data.

Modifications:

- Add OpenSslEngine.unwrap(ByteBuffer[],...) method that can be used to unwrap multiple src ByteBuffer a the same time
- Use a CompositeByteBuffer in SslHandler for inbound data so we not need to memory copy
- Add OpenSslEngine.unwrap(ByteBuffer[],...) in SslHandler if OpenSslEngine is used and the inbound ByteBuf is backed by more then one ByteBuffer
- Reduce object allocation

Result:

SslHandler is faster when using OpenSslEngine and produce less GC"
392fb764b6dd4cc05b3dc8f2f3bb53eae689b868,"Fix IndexOutOfBoundsException from SslHandler on JDK 8

Motivation:

When SslHandler.unwrap() copies SSL records into a heap buffer, it does
not update the start offset, causing IndexOutOfBoundsException.

Modifications:

- Copy to a heap buffer before calling unwrap() for simplicity
- Do not copy an empty buffer to a heap buffer.
  - unwrap(... EMPTY_BUFFER ...) never involves copying now.
- Use better parameter names for unwrap()
- Clean-up log messages

Result:

- Bugs fixed
- Cleaner code"
7f907e8c2aa2284ea8e48953ec5d3b5f13ed9435,"Accept ';' '\\""' in the filename of HTTP Content-Disposition header

Motivation:
HttpPostMultipartRequestDecoder threw an ArrayIndexOutOfBoundsException
when trying to decode Content-Disposition header with filename
containing ';' or protected \\"".
See issue #3326 and #3327.

Modifications:
Added splitMultipartHeaderValues method which cares about quotes, and
use it in splitMultipartHeader method, instead of StringUtils.split.

Result:
Filenames can contain semicolons and protected \\""."
e1a53e61d02d195c952b2eb723c3275eb5989827,Fix compilation error introduced by 7f907e8c2aa2284ea8e48953ec5d3b5f13ed9435
70541eb72f679a7f8c37389ac7fe8e80f65257d1,Fix typo in param name
279187ba5e53803df4929051080af8a7be478b12,"Make NetUtil.isValidIp4Word() private

We have deprecated NetUtil.isValidIp4Word() in 4.0. See:

- b0747e743251c786ddd1a6d524af6b34303bd4a3"
c298230128a72c791d101bb6fd5d0451e274e90f,"RFC6265 cookies support

Motivation:

Currently Netty supports a weird implementation of RFC 2965.
First, this RFC has been deprecated by RFC 6265 and nobody on the
internet use this format.

Then, there's a confusion between client side and server side encoding
and decoding.

Typically, clients should only send name=value pairs.

This PR introduces RFC 6265 support, but keeps on supporting RFC 2965 in
the sense that old unused fields are simply ignored, and Cookie fields
won't be populated. Deprecated fields are comment, commentUrl, version,
discard and ports.

It also provides a mechanism for safe server-client-server roundtrip, as
User-Agents are not supposed to interpret cookie values but return them
as-is (e.g. if Set-Cookie contained a quoted value, it should be sent
back in the Cookie header in quoted form too).

Also, there are performance gains to be obtained by not allocating the
attribute name Strings, as we only want to match them to find which POJO
field to populate.

Modifications:

- New RFC6265ClientCookieEncoder/Decoder and
  RFC6265ServerCookieEncoder/Decoder pairs that live alongside old
  CookieEncoder/Decoder pair to not break backward compatibility.
- New Cookie.rawValue field, used for lossless server-client-server
  roundtrip.

Result:

RFC 6265 support.
Clean separation of client and server side.

Decoder performance gain:

Benchmark                     Mode  Samples        Score        Error
Units
parseOldClientDecoder        thrpt       20  2070169,228 ± 105044,970
ops/s
parseRFC6265ClientDecoder    thrpt       20  2954015,476 ± 126670,633
ops/s

This commit closes #3221 and #1406."
0ba4d32040bd4505a6791d78851b12299f4c5eee,Fix Javadoc
7d102084c1c775d15141970beb5fd98d08b6131a,"Remove Rfc6265 prefix from cookie encoders and decoders

Motivation:

Rfc6265Client/ServerCookieEncoder is a better replacement of the old
Client/ServerCookieEncoder, and thus there's no point of keeping both.

Modifications:

- Remove the old Client/ServerCookieEncoder
- Remove the 'Rfc6265' prefix from the new cookie encoder/decoder
  classes
- Deprecate CookieDecoder

Result:

We have much better cookie encoder/decoder implementation now."
0fc097cb20b43dab41b196c77db86a2bb1aecd20,Remove the references to the deprecated CookieDecoder
27a2017f7f5db2707b21600c2d976afbc7b57cfd,"Opportunity for lazy initialization in Headers interface

Motivation:
The Headers interface had two member variables (addAllVisitor, setAllVisitor) which are not necessarily always needed but are always instantiated.  This may result in excess memory being used.

Modifications:
 - addAllVisitor will be accessed via a method addAllVisitor() which will use lazy initialization.
 - setAllVisitor will be accessed via a method addAllVisitor() which will use lazy initialization.

Result:
Potential memory savings by using lazy initialization."
c4a5c3966caacde7e483041f7194bb657708ee22,"Headers remove infrequently used member variables

Motivation:
There are two member variables (addAllVisitor, setAllVisitor) which are likely not to be used in the majority of use cases.

Modifications:
Remove these member variables and rely on a method to return a new object when needed.

Result:
Two less member variables for each DefaultHeaders instance."
f0181a35ef09bab51467c0eed9d249e91013c27e,"Drop first flag that's no longer used

Motivation:

Pull request for RFC6265 support had some unused flag first in ClientCookieDecoder.

Modification:

Remove unused flag first.

Result:

Cleaner code."
ed10513238c271a2c9b372b702dec4943b64f0d5,"Fixed several issues with HttpContentDecoder

Motivation:

HttpContentDecoder had the following issues:
- For chunked content, the decoder set invalid ""Content-Length"" header
	with length of the first decoded chunk.
- Decoding of FullHttpRequests put both the original conent and decoded
	content into output. As result, using HttpObjectAggregator before the
	decoder lead to errors.
- Requests with ""Expect: 100-continue"" header were not acknowleged:
	the decoder didn't pass the header message down the handler's chain
	until content is received. If client expected ""100 Continue"" response,
	deadlock happened.

Modification:

- Invalid ""Content-Length"" header is removed; handlers down the chain can either
	rely on LastHttpContent message or ask HttpObjectAggregator to add the header.
- FullHttpRequest is split into HttpRequest and HttpContent (decoded) parts.
- Header (HttpRequest) part of request is sent down the chain as soon as it's received.

Result:

The issues are fixed, unittest is added."
2d24e1f27d00d13401d543a04beb5b76102dfd7d,"Back port HTTP/2 codec from master to 4.1

Motivation:

HTTP/2 codec was implemented in master branch.
Since, master is not yet stable and will be some time before it gets released, backporting it to 4.1, enables people to use the codec with a stable netty version.

Modification:

The code has been copied from master branch as is, with minor modifications to suit the `ChannelHandler` API in 4.x.
Apart from that change, there are two backward incompatible API changes included, namely,

- Added an abstract method:

  `public abstract Map.Entry<CharSequence, CharSequence> forEachEntry(EntryVisitor<CharSequence> visitor)
            throws Exception;`

to `HttpHeaders` and implemented the same in `DefaultHttpHeaders` as a delegate to the internal `TextHeader` instance.

- Added a method:

`FullHttpMessage copy(ByteBuf newContent);`

in `FullHttpMessage` with the implementations copied from relevant places in the master branch.

- Added missing abstract method related to setting/adding short values to `HttpHeaders`

Result:

HTTP/2 codec can be used with netty 4.1"
c6bfc92df1bec98e2b21d222ca507fb4dd2c5080,"Zero length data frames should apply flow control.

Motivation:
A downstream consumer of Netty failed as emitting zero-length http2 data frames in a unit test resulted in assertion errors in Http2LocalFlowController. Since zero-length frames are valid, an assertion that http2 data frame length must be positive is invalid.

Modifications:

Assertions of data length in Http2LocalFlowController now permit zero.

Result:

Those running netty with assertions on can now emit zero length http2 data frames."
8614b88c188895c226c7987d28acb3107edc3607,"Generate Expires attribute along MaxAge one so IE can honor it, close #1466

Motivation:

Internet Explorer doesn't honor Set-Cookie header Max-Age attribute. It only honors the Expires one.

Modification:

Always generate an Expires attribute along the Max-Age one.

Result:

Internet Explorer compatible expiring cookies. Close #1466."
bc97d7d7a17b058a7ed1084aa3aced5fe349e86c,"Fix NPE when remote address can not be obtained

Motivation:

In the native transport we use getpeername to obtain the remote address from the file descriptor. This may fail for various reasons in which case NULL is returned.

Modifications:

- Check for null when try to obtain remote / local address

Result:

No more NPE"
a9577c0a4bb1cf4464d8d6b17223df9748b1049d,"Zlib decoder calls reduction and index fix

Motivation:
The JdkZlibDecoder and JZlibDecoder call isReadable and readableBytes in the same method. There is an opportunity to reduce the number of methods calls to just use readableBytes.  JdkZlibDecoder reads from a ByteBuf with an absolute index instead of using readerIndex()

Modifications:
- Use readableBytes where isReadable was used
- Correct absolute ByteBuf index to be relative to readerIndex()

Result:
Less method calls duplicating work and preventing an index out of bounds exception."
c5bd8fd264986b1a3bdbaf5cb4488981ce554b78,"[#3112] Add supprt for TCP_INFO when using EpollSocketChannel

Motivation:

On Linux, you can gather various metrics using getsockopt(..., TCP_INFO,
...).

Modifications:

Add EpollSocketChannel.tcpInfo() which returns EpollTcpInfo that exposes
all metrics exposed via getsockopt(..., TCP_INFO, ...)

Result:

TCP_INFO support implemented"
4bafb4f95b38dbccfdd4d95cc3e591676c1f4a3c,"[#3368] Ensure ByteBuf is not release two times

Motivation:

As the ByteBuf is not set to null after release it we may try to release it again in handleReadException()

Modifications:

-  set ByteBuf to null to avoid another byteBuf.release() to be called in handleReadException()

Result:

No IllegalReferenceCountException anymore"
4619e88a7b1b90b3a341d0aa0aa22f2899d7fb8d,"[#3375] Correctly calculate the endOffset when wrap multiple ByteBuffer

Motivation:

We failed to correctly calculate the endOffset when wrap multiple ByteBuffer and so not wrapped everything when an offset > 0 is used.

Modifications:

Correctly calculate endOffset.

Result:

All ByteBuffers are correctly wrapped when offset > 0."
8bc21ecdd0a21e116d11f972e24e4eb3255ba851,"[#3376] Use IllegalArgumentException as replacement for NPE as stated in javadocs

Motivation:

SSLEngine specifies that IllegalArgumentException must be thrown if a null argument is given when using wrap(...) or unwrap(...).

Modifications:

Replace NullPointerException with IllegalArgumentException to match the javadocs.

Result:

Match the javadocs."
c66da29644b0d308acd02236caf5b6fd9ead562c,"[#3377] Faster overflow guard when generate nextId in EpollEventLoop

Motivation:

The current way how the guard against overflow when generating the nextId() is pretty slow once an overflow happened.

Modifications:

Once a possible overflow is detected all ids used by the EpollEventLoop are scrubed and re-assigned to the registered Channels. This way we only need to do extra work each time an overflow is detected.

Result:

More consistent performance even after the first overflow was detected."
6b8ec6b781b3413c3aa98c3e79a562598be83d2d,"[#3378] Automatically increase number of possible handled events

Motivation:

At the moment the max number of events that can be handled per epoll wakup was set during construction.

Modifications:

- Automatically increase the max number of events to handle

Result:

Better performance when a lot of events need to be handled without adjusting the code."
200c6efc750615bc9610c88d16aee6ac9f44ba9c,"[#3364] Not use VoidChannelPromise in SslHandler to guard against IllegalStateException

Motivation:

SslHandler adds a pending write with an empty buffer and a VoidChannelPromise when a user flush and not pending writes are currently stored. This may produce an IllegalStateException later if the user try to add a ChannelFutureListener to the promise in the next ChannelOutboundHandler.

Modifications:

Replace ctx.voidPromise() with ctx.newPromise()

Result:

No more IllegalStateException possible"
3c6cbd40e297b397abe6d942b3c7d8f31062e348,"Fix an sporadic failure in ServerCookieEncoderTest

In testEncodingSingleCookieV0():

Let's assume we encoded a cookie with MaxAge=50 when currentTimeMillis
is 10999.

Because the encoder will not encode the millisecond part for Expires,
the timeMillis value of the encoded Expires field will be 60000. (If we
did not dropped the millisecond part, it would be 60999.)

Encoding a cookie will take some time, so currentTimeMillis will
increase slightly, such as to 11001.

  diff = (60000 - 11001) / 1000 = 48999 / 1000 = 48
  maxAge - diff = 50 - 48 = 2

Due to losing millisecond part twice, we end up with the precision
problem illustrated above, and thus we should increase the tolerance
from 1 second to 2 seconds.

/cc @slandelle"
b19a12b952398dba12e46db452f0b8220d1e0267,"Fixes #3362 (Possible wrong behavior in `HttpResponseDecoder`/`HttpRequestDecoder` for large header/initline/content)

Motivation:

`HttpResponseDecoder` and `HttpRequestDecoder` in the event when the max configured sizes for HTTP initial line, headers or content is breached, sends a `DefaultHttpResponse` and `DefaultHttpRequest` respectively. After this `HttpObjectDecoder` gets into `BAD_MESSAGE` state and ignores any other data received on this connection.
The combination of the above two behaviors, means that the decoded response/request are not complete (absence of sending `LastHTTPContent`). So, any code, waiting for a complete message will have to additionally check for decoder result to follow the correct semantics of HTTP.

If `HttpResponseDecoder` and `HttpRequestDecoder` creates a Full* invalid message then the request/response is a complete HTTP message and hence obeys the HTTP contract.

Modification:

Modified `HttpRequestDecoder`, `HttpResponseDecoder`, `RtspRequestDecoder` and  `RtspResponseDecoder` to return Full* messages from `createInvalidMessage()`

Result:

Fixes the wrong behavior of sending incomplete messages from these codecs"
8bbfcb05a08bc0dd11064d964a77da35fc2e5eb8,"Make flow-controller a write-queue for HEADERS and DATA

Motivation:

Previously flow-controller had to know the implementation details of each frame type in order to write it correctly. That concern is more correctly handled by the encoder. By encapsulating the payload types to be flow-controlled it will be easier to add support for extension types later. This change also fixes #3353.

Modifications:

Add interface FlowControlled which is now delivered to flow-controller.
Implement this interface for HEADERS and DATA
Refactor and improve tests for flow-control.

Result:

Flow control semantics are more cleanly separated for data encoding and implementation is simpler overall."
50a857cecfd19059be37cf643beedca40de56b9b,"SonarQube issues OpenSslEngine

Motivation:
SonarQube (clinker.netty.io/sonar) reported a few 'critical' issues related to the OpenSslEngine.

Modifications:
- Remove potential for dereference of null variable.
- Remove duplicate null check and TODO cleanup.

Results:
Less potential for null dereference, cleaner code, and 1 less TODO."
86cb41bf956dd961851084c4d00eafb63c7e4a8c,"Possible leak in AbstractDiskHttpData

Motivation:
SonarQube (clinker.netty.io/sonar) reported a resource which may not have been properly closed in all situations in AbstractDiskHttpData.

Modifications:
- Ensure file channels are closed in the presence of exceptions.
- Correct instances where local channels were created but potentially not closed.

Result:
Less leaks. Less SonarQube vulnerabilities."
6d07264412d8524d73af2da4d5bb7d54532786c6,Minor idiomatic changes to java docs
f771a97592d95d70cbb6f6b5afb6e4a3a450a499,"Add support for Unix Domain Sockets when using native epoll transport

Motivation:

Using Unix Domain Sockets can be very useful when communication should take place on the same host and has less overhead then using loopback. We should support this with the native epoll transport.

Modifications:

- Add support for Unix Domain Sockets.
- Adjust testsuite to be able to reuse tests.

Result:

Unix Domain Sockets are now support when using native epoll transport."
3030b4afe30f96b59807b24bd4f5250d41de283f,"Allow to recv and send file descriptors when using EpollDomainSocketChannel.

Motiviation:

When using domain sockets on linux it is supported to recv and send file descriptors. This can be used to pass around for example sockets.

Modifications:
- Add support for recv and send file descriptors when using EpollDomainSocketChannel.
- Allow to obtain the file descriptor for an Epoll*Channel so it can be send via domain sockets.

Result:
recv and send of file descriptors is supported now."
bc76bfa1991821dbf9433405b8316a0fc393bbf8,"Consolidating HTTP/2 stream state

Motivation:

Http2Stream has several methods that provide state information. We need
to simplify how state is used and consolidate as many of these fields as
possible.

Modifications:

Since we already have a concept of a stream being active or inactive,
I'm now separating the deactivation of a stream from the act of closing
it.  The reason for this is the case of sending a frame with
endOfStream=true. In this case we want to close the stream immediately
in order to disallow further writing, but we don't want to mark the
stream as inactive until the write has completed since the inactive
event triggers the flow controller to cancel any pending writes on the
stream.

With deactivation separated out, we are able to eliminate most of the
additional state methods with the exception of `isResetSent`.  This is
still required because we need to ignore inbound frames in this case (as
per the spec), since the remote endpoint may not yet know that the
stream has been closed.

Result:

Fixes #3382"
b984ca7979670a86bb4acc3b83eed0b1125824a6,"Allow to change epoll mode

Motivation:
Netty uses edge-triggered epoll by default for performance reasons. The downside here is that a messagesPerRead limit can not be enforced correctly, as we need to consume everything from the channel when notified.

Modification:
- Allow to switch epoll modes before channel is registered
- Some refactoring to share more code

Result:
It's now possible to switch epoll mode."
afa9e71ed37ad1e46a837f3212d6ff1712f12a92,"Allow to use WebSocketClientHandshaker and WebSocketServerHandshaker with HttpResponse / HttpRequest

Motivation:

To use WebSocketClientHandshaker / WebSocketServerHandshaker it's currently a requirement of having a HttpObjectAggregator in the ChannelPipeline. This is not a big deal when a user only wants to server WebSockets but is a limitation if the server serves WebSockets and normal HTTP traffic.

Modifications:

Allow to use WebSocketClientHandshaker and WebSocketServerHandshaker without HttpObjectAggregator in the ChannelPipeline.

Result:

More flexibility"
abf7afca760ec43f1498fa00dd791170abe47e49,"[#3367] Fix re-entrance bug in PendingWriteQueue

Motivation:

Because of a re-entrance bug in PendingWriteQueue it was possible to get the queue corrupted and also trigger an IllegalStateException caused by multiple recycling of the internal PendingWrite objects.

Modifications:

- Correctly guard against re-entrance

Result:

No more IllegalStateException possible"
8b5f2d7716af42ec05decbc8f9de775e81683944,"Http2DefaultFrameWriter direct write instead of copy

Motivation:
The Http2DefaultFrameWriter copies all contents into a buffer (or uses a CompositeBuffer in 1 case) and then writes that buffer to the socket. There is an opportunity to avoid the copy operations and write directly to the socket.

Modifications:
- Http2DefaultFrameWriter should avoid copy operations where possible.
- The Http2FrameWriter interface should be clarified to indicate that ByteBuf objects will be released.

Result:
Hopefully less allocation/copy leads to memory and throughput performance benefit."
0bd89bacea8ea4c845a9f170403116c59f3a592f,Fix #3331 Update Javassist from 3.18.0-GA to 3.19.0-GA
270e0785fd1b62db5638af96c4253c6f2e13e8eb,"Log only on debug log level in OpenSslEngine

Motivation:

At the moment we log priming read and handshake errors via info log level and still throw a SSLException that contains the error. We should only log with debug level to generate less noise.

Modifications:

Change logging to debug level.

Result:

Less noise ."
27a25e29f7c002eb9f4d52b52ecccb2f3a7d6b15,"Ensure channelReadComplete() is called only when necessary

Motivation:

Even if a handler called ctx.fireChannelReadComplete(), the next handler
should not get its channelReadComplete() invoked if fireChannelRead()
was not invoked before.

Modifications:

- Ensure channelReadComplete() is invoked only when the handler of the
  current context actually produced a message, because otherwise there's
  no point of triggering channelReadComplete().
  i.e. channelReadComplete() must follow channelRead().
- Fix a bug where ctx.read() was not called if the handler of the
  current context did not produce any message, making the connection
  stall. Read the new comment for more information.

Result:

- channelReadComplete() is invoked only when it makes sense.
- No stale connection"
ed98ce27e1eedd200d49e199cb14baf6981d3c40,"Faster event processing when epoll transport is used

Motivation:

Before we used a long[] to store the ready events, this had a few problems and limitations:
 - An extra loop was needed to translate between epoll_event and our long
 - JNI may need to do extra memory copy if the JVM not supports pinning
 - More branches

Modifications:

- Introduce a EpollEventArray which allows to directly write in a struct epoll_event* and pass it to epoll_wait.

Result:

Better speed when using native transport, as shown in the benchmark.

Before:
[xxx@xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
 16 threads and 256 connections
 Thread Stats   Avg      Stdev     Max   +/- Stdev
   Latency    14.56ms    8.64ms 117.15ms   80.58%
   Req/Sec   286.17k    38.71k  421.48k    68.17%
 546324329 requests in 2.00m, 73.78GB read
Requests/sec: 4553438.39
Transfer/sec:    629.66MB

After:
[xxx@xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
 16 threads and 256 connections
 Thread Stats   Avg      Stdev     Max   +/- Stdev
   Latency    14.12ms    8.69ms 100.40ms   83.08%
   Req/Sec   294.79k    40.23k  472.70k    66.75%
 555997226 requests in 2.00m, 75.08GB read
Requests/sec: 4634343.40
Transfer/sec:    640.85MB"
720faa4df101c22ff591ae4a916e93648951c374,"Do not suppress channelReadComplete() when a handler was just added

Related:
- 27a25e29f7c002eb9f4d52b52ecccb2f3a7d6b15

Motivation:

The commit mentioned above introduced a regression where
channelReadComplete() event is swallowed by a handler which was added
dynamically.

Modifications:

Do not suppress channelReadComplete() if the current handler's
channelRead() method was not invoked at all, so that a just-added
handler does not suppress channelReadComplete().

Result:

Regression is gone, and channelReadComplete() is invoked when necessary."
730ec357d22bc2dfeade2f7742cc21b3d1e296d9,"Correctly set EPOLLRDHUP for all stream channels.

Motivation:

Fix regression introduced by 585ce1593fdccc5a8d868a96c7643e0d63b1e21b, which missed to set EPOLLRDHUP for all stream channels.

Modifications:

Correctly set EPOLLRDHUP for all stream channels in the AbstractEpollStreamChannel constructor.

Result:

No more test failures in EpollDomain*Channel tests."
a1efd1871bff4566e1666d4ad8c649e7451316fe,"Reorder PlatformDependent.isRoot() check

Motivation:

isRoot() is an expensive operation. We should avoid calling it if
possible.

Modifications:

Move the isRoot() checks to the end of the 'if' block, so that isRoot()
is evaluated only when really necessary.

Result:

isRoot() is evaluated only when SO_BROADCAST is set and the bind address
is anylocal address."
4e6cec0e26e7c690aeff5d262bc7feb29f26f488,"Respect ChannelConfig.getWriteSpinCount() when using epoll transport

Motivation:

The writeSpinCount was ignored in the epoll transport and it just kept on trying writing. This could cause unnessary cpu spinning if a slow remote peer was reading the data very very slow.

Modification:

- Correctly take writeSpinCount into account when writing.

Result:

Less cpu spinning when writing to a slow remote peer."
0a452bef8edbf023fd950eb6d3875acaea553cdb,"Add workaround for bug in older linux kernels handling epoll_wait(...)

Motivation:

Older linux kernels have problems handling a large value for epoll_wait(...) and so wait for ever.

Modifications:

Adjust timeout on the fly if a too big value is passed in.

Result:

Correctly works also on older kernels."
f762b4bb6847cac912a4c2b5920a80d95e42d981,Cleanup code. Part of [#3398]
7a3d91f43d12eb0b23a65662d26026c6cd451d76,"Give compiler hint about inline functions

Motivation:

Some of the methods are frequently called and so should be inlined if possible.

Modifications:

Give the compiler a hint that we want to inline these methods.

Result:

Better performance if inlined."
aa8917115c594b111929c4115cb699327af2ff73,"Determine CompositeByteBuf implementation by using ByteBufAllocator

Motivation:

Currently, using a MessageAggregator in the pipeline always results in the creation of an unpooled heap CompositeByteBuf. By using the ByteBufAllocator the CompositeByteBuf will use the implementation specified by the ByteBufAllocator.

Modifications:

Use the ChannelHandlerContext's ByteBufAllocator to create the CompositeByteBuf for message aggregation

Result:

The CompositeByteBuf is now configured based on the ByteBufAllocator's settings."
a69fbaeed9505f017b144050bd0e1cc49f6585c6,"Not execute shutdownOutput(...) and close(...) in the EventLoop if SO_LINGER is used.

Motivation:

If SO_LINGER is used shutdownOutput() and close() syscalls will block until either all data was send or until the timeout exceed. This is a problem when we try to execute them on the EventLoop as this means the EventLoop may be blocked and so can not process any other I/O.

Modifications:

- Add AbstractUnsafe.closeExecutor() which returns null by default and use this Executor for close if not null.
- Override the closeExecutor() in NioSocketChannel and EpollSocketChannel and return GlobalEventExecutor.INSTANCE if getSoLinger() > 0
- use closeExecutor() in shutdownInput(...) in NioSocketChannel and EpollSocketChannel

 Result:

No more blocking of the EventLoop if SO_LINGER is used and shutdownOutput() or close() is called."
f20439b6d35d47cd13bdee0dd794560bbd7b8090,"Various performance optimizations in OpenSslEngine

Motivation:

There are various places in OpenSslEngine wher we can do performance optimizations.

Modifications:

- Reduce JNI calls when possible
- Detect finished handshake as soon as possible
- Eliminate double calculations
- wrap multiple ByteBuffer if possible in a loop

Result:

Better performance"
daa04cb4f10050919b3aa4df89b0ea6aeebe335b,"Add another test case for channelReadComplete() suppression

Related commit:
- a41b46ff430369112bdc9ab2474cb40667c289a3

Motivation:

We need a test case for the commit above."
865a83c15dd1f2ead03eac35f98457ed2b238175,"Allow to create Epoll*Channel from FileDescriptor

Motivation:

Sometimes it's useful to be able to create a Epoll*Channel from an existing file descriptor. This is especially helpful if you integrade some c/jni code.

Modifications:

- Add extra constructor to Epoll*Channel implementations that take a FileDescriptor as an argument
- Make Rename EpollFileDescriptor to NativeFileDescriptor and make it public
- Also ensure we obtain the correct remote/local address when create a Channel from a FileDescriptor

Result:

It's now possible to create a FileDescriptor and instance a Epoll*Channel via it."
976db9269de581fdb94b42837ae236c1f68ef38e,"Revamp io.netty.handler.codec.socksx

While implementing netty-handler-proxy, I realized various issues in our
current socksx package. Here's the list of the modifications and their
background:

- Split message types into interfaces and default implementations
  - so that a user can implement an alternative message implementations
- Use classes instead of enums when a user might want to define a new
  constant
  - so that a user can extend SOCKS5 protocol, such as:
    - defining a new error code
    - defining a new address type
- Rename the message classes
  - to avoid abbreviated class names. e.g:
    - Cmd -> Command
    - Init -> Initial
  - so that the class names align better with the protocol
    specifications. e.g:
    - AuthRequest -> PasswordAuthRequest
    - AuthScheme -> AuthMethod
- Rename the property names of the messages
  - so that the property names align better when the field names in the
    protocol specifications
- Improve the decoder implementations
  - Give a user more control over when a decoder has to be removed
  - Use DecoderResult and DecoderResultProvider to handle decode failure
    gracefully. i.e. no more Unknown* message classes
- Add SocksPortUnifinicationServerHandler since it's useful to the users
  who write a SOCKS server
  - Cleaned up and moved from the socksproxy example"
daba2b3313077c3be9b424d8bcba2d258d7048d3,"Removing debugging change from unit test.

Motivation:

HttpToHttp2ConnectionHandlerTest was accidentally modified with a
debugging value for WAIT_TIME_SECONDS.

Modifications:

Reverted the change.

Result:

original wait time restored."
41fd857a7c749257c862ffb368af0b926c72ebfe,"Ensure CompositeByteBuf.addComponent* handles buffer in consistent way and not causes leaks

Motivation:

At the moment we have two problems:
 - CompositeByteBuf.addComponent(...) will not add the supplied buffer to the CompositeByteBuf if its empty, which means it will not be released on CompositeByteBuf.release() call. This is a problem as a user will expect everything added will be released (the user not know we not added it).
 - CompositeByteBuf.addComponents(...) will either add no buffers if none is readable and so has the same problem as addComponent(...) or directly release the ByteBuf if at least one ByteBuf is readable. Again this gives inconsistent handling and may lead to memory leaks.

Modifications:

 - Always add the buffer to the CompositeByteBuf and so release it on release call.

Result:

Consistent handling and no buffer leaks."
38015bffa7a58de07186bdc9f98f0f14ab69938d,Fixed broken optional OSGi Import-Package header (#3424).
b8d26d1da3f203033e1f5814d9b72582376cb0b5,"Avoid unnecessary call to ByteBuf.isReadable() from ByteToMessageDecoder

Motivation:

This will avoid one unncessary method invokation which will slightly improve performance.

Modifications:

Instead of calling isReadable we just check for the value of readableBytes()

Result:

Nothing functionally speaking change."
4b83eee1338ab018b802c3e195317fa83f785154,"Fixed ServerBootstrap#group(EventLoopGroup, EventLoopGroup) javadoc"
6e508e60e7f4923f6ea8393eec842254d7fb63ab,"Move generic unix classes/interfaces out of epoll package

Motivation:

As we plan to have other native transports soon (like a kqueue transport) we should move unix classes/interfaces out of the epoll package so we
introduce other implementations without breaking stuff before the next stable release.

Modifications:

Create a new io.netty.channel.unix package and move stuff over there.

Result:

Possible to introduce other native impls beside epoll."
99bd43ed5163bf635ef4c9f1db2d93d7f0232382,"Allow to get existing ChannelOption / AttributeKey from String

Motivation:

We should allow to get a ChannelOption/AttributeKey from a String. This will make it a lot easier to make use of configuration files in applications.

Modifications:

- Add exists(...), newInstance(...) method to ChannelOption and AttributeKey and alter valueOf(...) to return an existing instance for a String or create one.
- Add unit tests.

Result:

Much more flexible usage of ChannelOption and AttributeKey."
c53b8d5a855468a890757b4f0612d7ae192a3592,"Suggestion for supporting single header fields.

Motivation:
At the moment if you want to return a HTTP header containing multiple
values you have to set/add that header once with the values wanted. If
you used set/add with an array/iterable multiple HTTP header fields will
be returned in the response.

Note, that this is indeed a suggestion and additional work and tests
should be added. This is mainly to bring up a discussion.

Modifications:
Added a flag to specify that when multiple values exist for a single
HTTP header then add them as a comma separated string.
In addition added a method to StringUtil to help escape comma separated
value charsequences.

Result:
Allows for responses to be smaller."
fa646255221c6507d277ecd7630cf335d2e6045a,"Add a pax-exam based OSGi test suite

Motivation:

Release 4.0.25 was not usable in OSGi environments due to a simple typo.
An automated test could have caught the problem even before it was
committed.

Modifications:

This patch introduces a new artifact, osgitests, which pulls in all
production artifacts (which we want to be checked for OSGi compliance).
It contains only a single unit test, which runs a pax-exam container
with felix OSGi.

At initialization time, it scans all the artifact's dependencies,
looking for things belonging to io.netty group. The container is
configured to deploy those artifacts as bundles and fail if any bundle
is found to be unresolved. It performs a final check to see if any
bundles were tested this way, to make sure the mechanism is not
completely broken.

We are using wrappedBundle(), as two of our third-party dependencies do
not export packages correctly -- this masks the problem, assuming that
whoever deploys our artifacts depending on them will figure out how to
OSGify them.

Result:

Simple typos and other bundle manifest errors should be caught during
test phase of every build."
5b1b334f01b569fa0e34e4cbaeaff7a67d982a6c,"When null origin is supported then credentials header must not be set.

Motivation:
Currently CORS can be configured to support a 'null' origin, which can
be set by a browser if a resources is loaded from the local file system.
When this is done 'Access-Control-Allow-Origin' will be set to ""*"" (any
origin). There is also a configuration option to allow credentials being
sent from the client (cookies, basic HTTP Authentication, client side
SSL). This is indicated by the response header
'Access-Control-Allow-Credentials' being set to true. When this is set
to true, the ""*"" origin is not valid as the value of
'Access-Control-Allow-Origin' and a browser will reject the request:
http://www.w3.org/TR/cors/#resource-requests

Modifications:
Updated CorsHandler's setAllowCredentials to check the origin and if it
is ""*"" then it will not add the 'Access-Control-Allow-Credentials'
header.

Result:
Is is possible to have a client send a 'null' origin, and at the same
time have configured the CORS to support that and to allow credentials
in that combination."
1e09409604cfb9e0da787a3f493faae3282e6e18,removed an unnecessary local variable for consistency
d3e7a0bcd0c207b78b3c692254e535ac907cf031,"Integrate non-blocking XML parser as Netty codec (#2806)

Motivation:
Provide non-blocking XML parser as Netty codec.

Modifications:
New codec implemented/extracted.

io.netty.handler.codec.xml.XmlDecoder decodes XML fed by Netty without blocking.

Result:
Non-blocking XML stream parsing."
7aeafb9c09c55a001b92975ea8fb895554757aa5,Fixed buffer leaks in DefaultSocks5CommandResponseTest
a70955381993e0a45a97ec732bd784a94bf458d1,"Allow to use EmbeddedChannel.schedule*(...)

Motivation:

At the moment when EmbeddedChannel is used and a ChannelHandler tries to schedule and task it will throw an UnsupportedOperationException. This makes it impossible to test these handlers or even reuse them with EmbeddedChannel.

Modifications:

- Factor out reusable scheduling code into AbstractSchedulingEventExecutor
- Let EmbeddedEventLoop and SingleThreadEventExecutor extend AbstractSchedulingEventExecutor
- add EmbbededChannel.runScheduledPendingTasks() which allows to run all scheduled tasks that are ready

Result:

Embeddedchannel is now usable even with ChannelHandler that try to schedule tasks."
91538d9b53976e4530123934458aec5c15ef56fe,"[#3438] Throw pre-instanced IOException on connection reset

Motivation:

In the native transport we should throw a pre-instanced IOException on connection reset while reading.

Modifications:

Correctly throw pre-instanced IOException when ECONNRESET is received

Result:

Less overhead on connection reset"
93343ff00cc4a338156dffce46d8b8d53099a52b,"Correctly handle autoRead == false when epoll LT is used

Motivation:

When epoll LT is used and autoRead == false when entering epollIn() we need to return without reading any data.

Modifications:

Correctly respect autoRead == false if using epoll LT.

Result:

Consistent and correct behaviour."
88dae15bc20e51f33d22f28ad84b8e62bf7d116d,"Directly receive remote address when call accept(...)

Motivation:

There is a small race in the native transport where an accept(...) may success but a later try to obtain the remote address from the fd may fail is the fd is already closed.

Modifications:

Let accept(...) directly set the remote address.

Result:

No more race possible."
5bb1377072d762f446048943f201c68b64161a30,"[#3443] Fix IllegalStateException which could be triggered when the channel goes inactive during the eventloop processing

Motivation:

This is a regression that was introduced as part of 6b941e9bdbc1b1a9090c280bc6c44903ff7c7b67. The regression could produce an ""infinity"" triggering of IllegalStateException if a channel goes inactive while process the events for it.

Modifications:

Correctly check if the channel is still active before trigger the callbacks.

Result:

No more IllegalStateException"
29f29174047a7d42caa84b39a51963745aba2f3f,"Upgrading HTTP/2 hpack to latest version

Motivation:

Twitter hpack has upgraded to 0.10.1 to fix a parsing bug.

Modifications:

Updated the parent pom to specify the dependency version.

Result:

HTTP/2 updated to the latest hpack release."
237b393a8e7c7f1812ccf2c9510a205fe7772a8e,"Fix regression introduced by 20e32f62ecc90079d1fe940cc70683617a4b3591

Motivation:

Because of a regression sometimes accept could produce an IllegalArgumentException

Modifications:

Correctly respect offset when decode port and scope id.

Result:

No more IllegalArgumentException"
e3edec25c5e5d60e420190093def854c6d8b787e,typo_fix in the comment
01bc2d6d80170b805281109ebf27ba4826ef021d,"Fix byte order when retrieve address from filedescriptor

Motivation:

When create address from filedescriptor we may use incorrect byte order and so end up with an incorrect InetAddress.

Modification:

Not manually shift bytes

Result:

Correct address in all cases."
6c24dd4d8f2be754bc8a42af9c1b0e87c47ba75d,"Pass struct's per pointer to eliminate memory copy.

Motivation:

Before struct's were passed per value and not pointer. This did enforce a memory copy which is not needed.

Modifications:

- Use ""const struct....*"" as replacement

Result:

No more unnecessary memory copies"
91db4b71b2247ed99ef2dba8f914618564b13313,"[#3066] EpollDatagramChannel never calls fireChannelActive() after connect()

Motivation:

EpollDragramChannel never calls fireChannelActive after connect() which is a bug.

Modifications:

Correctly call fireChannelActive if needed

Result:

Correct behaviour"
d6016b7be8ca012b2da5ebf8c08946de7da7bf75,"[#3457] Proper fix for IllegalStateException caused by closed file descriptor / channel

Motivation:

During 6b941e9bdbc1b1a9090c280bc6c44903ff7c7b67 I introduced a regression that could cause an IllegalStateException.
A non-proper fix was commited as part of #3443. This commit add a proper fix.

Modifications:

Remove FileDescriptor.INVALID and add FileDescriptor.isOpen() as replacement. Once FileDescriptor.close() is called isOpen() will return false.

Result:

No more IllegalStateException caused by a close channel."
ca3b1bc4b7eb90f9dacb0c9e9346ab503015e3e2,[maven-release-plugin] prepare release netty-4.1.0.Beta4
fce0989844eb37907da76051c67f83a99782348b,[maven-release-plugin] prepare for next development iteration
4500adb6e03baedce9b9d937dd3c137b11a83f10,"Updates the javadoc of Unpooled to remove mention to methods it does not provide

Motivation:

`Unpooled` javadoc's mentioned the generation of hex dump and swapping an integer's byte order,
which are actually provided by `ByteBufUtil`.

Modifications:

 Sentence moved to `ByteBufUtil` javadoc.

Result:

`Unpooled` javadoc is correct."
6d5c38897ee42da732f082252aa7f1579719354f,"Fix header and initial line length counting

Related: #3445

Motivation:

HttpObjectDecoder.HeaderParser does not reset its counter (the size
field) when it failed to find the end of line.  If a header is split
into multiple fragments, the counter is increased as many times as the
number of fragments, resulting an unexpected TooLongFrameException.

Modifications:

- Add test cases that reproduces the problem
- Reset the HeaderParser.size field when no EOL is found.

Result:

One less bug"
1a83232ab207eac0b904e30f4d7374f8abe13b1a,"[#3463] EpollSocketChannel.localAddress() returns always null if Native.connect() was not able to connect directly

Motivation:

Due a a regression that was introduced by b898bdd we failed to set the localAddress if the connect did not success directly.

Modifications:

Correct set localAddress in doConnect(...)

Result:

Be able to get the localAddress in all cases."
068132f1eabefb1760fec5b53997cd6143995a29,"Fix SocketException in NioSocketChannelUnsafe.closeExecutor()

Related: #3464

Motivation:

When a connection attempt is failed,
NioSocketChannelUnsafe.closeExecutor() triggers a SocketException,
suppressing the channelUnregistered() event.

Modification:

Do not attempt to get SO_LINGER value when a socket is not open yet.

Result:

One less bug"
944e11c0654abe9bde385ee6bc5dbf123ce23271,"Add unit to maxContentLength javadoc of HttpObjectAggregator

Motivation:
Not knowing which unit is used for the maxContentLength of the HttpObjectAggregator when reading the Javadoc is annoying and can be a source of bugs.

Modifications:
Added the mention ""in bytes""

Result:
Javadoc is clear."
01f80d96b6cfd58b1d7c6fe045f68bee500751dd,"Add unit to maxContentLength message javadoc

Motivation:
Not knowing which unit is returned by the maxContentLength() of the Messageggregator when reading the Javadoc is annoying and can be a source of bugs.

Modifications:
Added the mention ""in bytes""

Result:
Javadoc is clear."
8c135cdd55cbc399a66af34e38b3a2b9349b4f7c,"Add a new constructor without handler parameter to TrafficCounter

Related: #3476

Motivation:

Some users use TrafficCounter for other uses than we originally
intended, such as implementing their own traffic shaper.  In such a
case, a user does not want to specify an AbstractTrafficShapingHandler.

Modifications:

- Add a new constructor that does not require an
  AbstractTrafficShapingHandler, so that a user can use it without it.
- Simplify TrafficMonitoringTask
- Javadoc cleanup

Result:

We open the possibility of using TrafficCounter for other purposes than
just using it with AbstractTrafficShapingHandler.  Eventually, we could
generalize it a little bit more, so that we can potentially use it for
other uses."
99c40431b97d8138c3384ef444f801d0e3735035,"Use InetSocketAddress.getHostName() instead of getHostString()

Related: #3478

Motivation:

DefaultNameResolver uses InetSocketAddress.getHostString() instead of
getHostName(). Because Netty uses the DefaultNameResolver by default and
getHostString() is available only since Java 7, a user cannot use Netty
on Java 6 anymore.

Modifications:

Use InetSocketAddress.getHostName() which is practically same and also
is available in Java 6.

Result:

Netty 4.1 runs on Java 6 again."
0767da12fb3f3c9ff169d7c055c87fea3c78731e,"Fix possible AttributeMap corruption on double removal

Motivation:

When remove0() is called multiple times for an DefaultAttribute it can cause corruption of the internal linked-list structure.

Modifications:

- Ensure remove0() can not cause corruption by null out prev and next references.

Result:

No more corruption possible"
88beae6838c6144f41fc6228755908c78e446416,"Fix premature cancelation of pending frames in HTTP2 Flow Control.

Motivation:

If HEADERS or DATA frames are pending due to a too small flow control
window, a frame with the END_STREAM flag set will wrongfully cancel
all pending frames (including itself).

Also see grpc/grpc-java#145

Modifications:

The transition of the stream state to CLOSE / HALF_CLOSE due to a
set END_STREAM flag is delayed until the frame with the flag is
actually written to the Channel.

Result:

Flow control works correctly. Frames with END_STREAM flag will no
longer cancel their preceding frames."
3df7b4dac746c2af2d65528bf85495eb530aba41,"Respect -Djava.net.preferIPv4Stack when using epoll transport

Motivation:

On a system where ipv4 and ipv6 are supported a user may want to use -Djava.net.preferIPv4Stack=true to restrict it to use ipv4 only.
This is currently ignored with the epoll transport.

Modifications:

Respect java.net.preferIPv4Stack system property.

Result:

-Djava.net.preferIPv4Stack=true will have the effect the user is looking for."
44615f6cb2d1ab3e7c2f7bac63ae1a76b290bc34,"Optimizations for Http2FrameLogger

Motivation:

The logger was always performing a hex dump of the ByteBufs regarless whether or not the log would take place.

Modifications:

Fixed the logger to avoid serializing the ByteBufs and calling the varargs method if logging is not enabled.

Result:

The loggers should run MUCH faster when disabled."
c7827dc16a7cdb0c5e84bef4075be82911788c7f,"First load RuntimeException to prevent segfault on error

Motivation:

When an error happens during loading the native library it may try to generate a new RuntimeException before the RuntimeException is loaded.

Modifications:

- Load RuntimeException as first

Result:

No more segfaults possible"
18443efeabb0f4042d1ca4adbb0257b4a7af8acd,"Add support for byte order to LengthFieldPrepender

Motivation:

While the LengthFieldBasedFrameDecoder supports a byte order the LengthFieldPrepender does not.
That means that I can simply add a LengthFieldBasedFrameDecoder with ByteOrder.LITTLE_ENDIAN to my pipeline
but have to write my own Encoder to write length fields in little endian byte order.

Modifications:

Added a constructor that takes a byte order and all other parameters.
All other constructors delegate to this one with ByteOrder.BIG_ENDIAN.
LengthFieldPrepender.encode() uses this byte order to write the length field.

Result:

LengthFieldPrepender will write the length field in the defined byte order."
d5963e069dacd757697349ab8c3b5e0d808b54e1,"Remove Frame class from DefaultHttp2RemoteFlowController. Fixes #3488

Motivation:

For every write of a flow controlled frame (HEADERS, DATA) we are allocating
a Frame object that is not necessary anymore as it does not maintain any
state, besides the payload.

Modifications:

Remove the Frame class and directly add the payload to the pending write queue.

Result:

One few object allocation per write of a flow controlled frame."
fe12d08efe327b81d8fc5d01333eef6b75fcac16,"Remove dead code from DefaultHttp2ConnectionEncoder.

Motivation:

There are two writeRstStream methods in the DefaultHttp2ConnectionEncoder.
One of the two is neither used nor part of the Http2FrameWriter interface.

Modifications:

Delete the method.

Result:

Fewer lines of dead code."
c91eaace5e5691ae05c0854d29a2524d94166e44,"Cleaning up HTTP/2 method names for max_concurrent_streams

Motivation:

The current documentation for Endpoint methods referring to concurrent streams and the SETTINGS_MAX_CONCURRENT_STREAMS setting are a bit confusing.

Modifications:

Renamed a few of the methods and added more clear documentation.

Result:

Fixes #3451"
a97e413a659b8f576112eae803d3a7c6314e36f8,"Ensure server preference order in ALPN

Motivation:
With the current implementation the client protocol preference list
takes precedence over the one of the server, since the select method
will return the first item, in the client list, that matches any of the
protocols supported by the server. This violates the recommendation of
http://tools.ietf.org/html/rfc7301#section-3.2.

It will also fail with the current implementation of Chrome, which
sends back Extension application_layer_protocol_negotiation, protocols:
[http/1.1, spdy/3.1, h2-14]

Modifications:
Changed the protocol negotiator to prefer server’s list. Added a test
case that demonstrates the issue and that is fixed with the
modifications of this commit.

Result:
Server’s preference list is used."
1d061bbb27ca32995d2bf46c0385296889be4c35,"Hide password in exception messages of SocksAuthRequest

Related: #3504

Motivation:

There are two places in the SocksAuthRequest constructor where an
IllegalArgumentException is thrown with a password as part of the
exception message.

This constitutes mishandling of confidential information, which can
compromise user privacy and is flagged as critical by security scanners.

Modifications:

Mask the password in the exception messages

Result:

No unexpected password leak"
9ccc1f31551784075f7115bd8245fa8f23dd8e71,"Update jUnit version to 4.12

Motivation:

Too many new features in the new release of jUnit.
https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.12.md

Modifications:

- Changed version of jUnit from 4.11 to 4.12 in the parent pom.

Result:

Allows using new testing features."
0fe67cfba5f655ab545f5ee103bf71bc4df9d5ba,"Using public LogLevel for HTTP/2 frame logging.

Motivation:

The Http2FrameLogger is currently using the internal logging classes. We should change this so that it's using the public classes and then converts internally.

Modifications:

Modified Http2FrameLogger and the examples to use the public LogLevel class.

Result:

Fixes #2512"
61859eefa02e2870beac268e0f1ece2a101acda5,"Safely encode Strings to ASCII

(Ported @luciferous's changes against 3.10)

Motivation:

The current implementation of the encoder writes each character of the
String as a single byte to the buffer, however not all characters are
mappable to a single byte.

Modifications:

If a character is outside the ASCII range, it's converted to '?'.

Result:

A safer encoder for String to ASCII, which substitutes unmappable
characters with'?'."
baa5990e34747d5035251da96b036dd648bac57a,Fix typo in javadoc
d5e67032b50cdca4b018e37e16d7071c32ac15b5,fix typo
3405aee2abf990d1f6078eb27da1b0035ab34769,"Returns after encoding each message not do check following instance types

Motivation:
Current AbstractMemcacheObjectEncoder does unnecessary message type checking if the message is MemcacheMessage type.

Modifications:
Returns after encoding MemcacheMessage message.

Result:
Small performance improvement for this encoder."
9bad408de54156a99d5f3614f9766ca16d584c0e,"HTTP2: Close encoder and decoder on channelInactive and initialize clientPrefaceString on handlerAdded.

Motivation:

- The encoder and decoder should be closed right after the handler releases its resources.
- The clientPrefaceString is allocated in the constructor but releases in handlerRemoved.
  If the handler is never added to the pipeline, the clientPrefaceString will never be
  released.

Modifications:

- Call encoder.close() and decoder.close() on channelInactive.
- Release the clientPrefaceString on handlerRemoved.

Result:

- The encoder and decoder get closed right after the handler's resources are freed.
- It's easier to verify that the clientPrefaceString will also get released."
8e04d706deaa4433d1ccd80c879cdb9f328831a6,"Have FlowState.cancel take a Throwable and code cleanup.

Motivation:

- In FlowState.write(...) we are currently swalloing an exception.
- In my previous commit I introduced a compiler warning by not making
  a local variabe final.

Modifications:

- Have FlowState.cancel() take a Throwable.
- Make the variable final.

Result:

No more swallowed exceptions and warnings."
2ebf07e62234d02804a6707957288f4292294f16,Small typos fixes in Channel's Javadoc
d94eab76b612d8d8ed018101eaaafea0e63683ee,"HTTP/2 examples run script support

Motivation:
The example script has some changes that have not yet been backported.  These changes should be backported.

Modifications:
run-example.sh changes related to http/2 are backported

Result:
HTTP/2 examples can be run on the 4.1 branch."
a24627aa36d6bb4dd3329a968e1b327d6738250b,"HTTP/2 codec missing from all/pom.xml

Motivation:
The codec-http2 module was excluded from the all/pom.xml.

Modifications:
Include the codec-http2 dependency in the all/pom.xml.

Results:
Projects including the all dependency get codec-http2."
b0e7992c16690fef42bc8ad1d1c3d34eda5922fd,"Jetty ALNPN and NPN updates plus backport

Motivation:
There are new versions of the ALPN and NPN dependencies.  There was also some backport misses in the pom file related to ALPN/NPN.

Modifications:
- Add new versions for ALPN/NPN dependencies.
- Backport missed pieces from pom.xml.

Result:
Updated version of ALPN/NPN versions."
6dfa1f2d9286d9a4cb4d418eeed5c111f40fe968,"Http2 draft 17

Motivation:
There was a new draft for HTTP/2.  We should support the new draft.

Modifications:
- Review the HTTP/2 draft 17 specification, and update code to reflect changes.

Result:
Support for HTTP/2 draft 17."
18abc6d8937773895ee38a3cfb1fd9003f5e3f36,"Fix example in CookieDecoder Javadoc

- CookieDecoder.decode() is a static method."
d857b16d76aec487627df1cea6185714859eb15e,"Http/2 RST_STREAM frame robustness

Motivation:
The Http2ConnectionHandler writeRstStream method allows RST_STREAM frames to be sent when we do not know about the stream and after a RST_STREAM frame has already been sent.  This may lead to sending frames when we should not according to the HTTP/2 spec. There is also the potential to notify the closeListener multiple times if the closeStream method is called multiple times.

Modifications:
- Prevent RST_STREAM from being sent if we don't know about the stream, or if we already sent the RST_STREAM.
- Prevent the closeListener from being notified multiple times.

Result:
More robust writeRstStream logic in boundary conditions."
23f881b382b127b6e0e7016413f389209376e932,"Comment punctuation cleanup

Motivation:
Commit d857b16d76aec487627df1cea6185714859eb15e introduced some comments that had no punctuation.

Modifications:
Add punctuation.

Result:
Comments have punctuation."
2dda917f272f315c84746b83bf91fab785de3bac,"Http2DefaultFrameWriter microbenchmark

Motivation:
A microbenchmark will be useful to get a baseline for performance.

Modifications:
- Introduce a new microbenchmark which tests the Http2DefaultFrameWriter.
- Allow benchmarks to run without thread context switching between JMH and Netty.

Result:
Microbenchmark exists to test performance."
bb059c070f5d3444cd395574e47f8ddcc3e96edf,"Decoupling allocation from writing in HTTP/2 outbound flow control

Motivation:

The current DefaultHttp2RemoteFlowController's writePendingBytes currently operates in 2 passes. The first allocates bytes and optionally writes some frames. The second pass just loops across all active streams and writes all remaining bytes.

If streams can be removed/added as a side effect of writing (EOS or error) then we need to take more care when the write actually occurs. Moving all of the writes to the second loop (across active streams) is simpler since we can just make a copy of the list and not worry about any restructuring of the priority tree that may result.

Modifications:

Modified DefaultHttp2RemoteFlowController.writePendingBytes to only allocate bytes on the first pass and then write any allocated bytes on the second pass.

Result:

Side effects resulting from writing should no longer impact the flow control algorithm."
2bf592c50fccda7d8cda2e5f1b86142a9b2b8c34,"Backport of HTTP/2 Microbenchmark fail.

Motivation:
The backport of a6c729bdf82abd4627cb1b5d90bfe320377f6282 failed.

Modifications:
- Make sure the interfaces are correctly implemented when backporting.

Result:
Microbenchmark compiles and runs on 4.1 branch."
0d3a6e051100993b06f2870d2727d92dabec456c,"HTTP/2 Decoder reduce preface conditional checks

Motivation:
The DefaultHttp2ConnectionDecoder class is calling verifyPrefaceReceived() for almost every frame event at all times.
The Http2ConnectionHandler class is calling readClientPrefaceString() on every decode event.

Modifications:
- DefaultHttp2ConnectionDecoder should not have to continuously call verifyPrefaceReceived() because it transitions boolean state 1 time for each connection.
- Http2ConnectionHandler should not have to continuously call readClientPrefaceString() because it transitions boolean state 1 time for each connection.

Result:
- Less conditional checks for the mainstream usage of the connection."
ab74dccd235dcd10bd14685c7095a6a647b4a037,"Http/2 Priority on CLOSED stream

Motivation:
The encoder/decoder currently do not handle streams which have previously existed but no longer exist because they were closed. The specification requires supporting this.

Modifications:
- encoder/decoder should tolerate the frame or the dependent frame not existing in the streams map due to the fact that it may have previously existed.

Result:
encoder/decoder are more compliant with the specification."
bdf0bddc8544666ce73b0e7e486ddccf214e79ef,"Enforce a release is made with JDK 1.7 (and not w/ 1.8+)

Motivations:

JDK 1.8 adds default methods to collections classes that reference
classes that don't exist in JDK 7. That's binary compatible,
but not source compatible.

Modifications:

Enforce JDK version to be 1.7.* when releasing

Result:

Fixes #3548"
a2428c7e47aa3ebd172f361e5f2b498919062945,"Add supported for X509ExtendedTrustManager when using OpenSslEngine

Motivation:

For some use cases X509ExtendedTrustManager is needed as it allows to also access the SslEngine during validation.

Modifications:

Add support for X509ExtendedTrustManager on java >= 7

Result:

It's now possible to use X509ExtendedTrustManager with OpenSslEngine"
cb63e34bda53adbeb702f7da667d2a59a218d465,"Removing unnecessary sort in remote flow controller.

Motivation:

The DefaultHttp2RemoteFlowController's priority algorithm doesn't really need to sort the children by weight since it already fairly distributes data based on weight.

Modifications:

Removing the sorting in the priority algorithm and updating one test to allow a small bit of variability in the results.

Result:

Slight improvement on the performance of the priority algorithm."
6fbca14f8aedb1f0bdd7bdd62f77f6854ee48f5f,"Cleaning up the initialization of Http2ConnectionHandler

Motivation:

It currently takes a builder for the encoder and decoder, which makes it difficult to decorate them.

Modifications:

Removed the builders from the interfaces entirely. Left the builder for the decoder impl but removed it from the encoder since it's constructor only takes 2 parameters. Also added decorator base classes for the encoder and decoder and made the CompressorHttp2ConnectionEncoder extend the decorator.

Result:

Fixes #3530"
f4e527c64df0b7ce2c5f7997a782eec481ac22a4,"Don't trigger IOException at ChunkedStream.isEndOfInput()

Related: #3368

Motivation:

ChunkedWriteHandler checks if the return value of
ChunkedInput.isEndOfInput() after calling ChunkedInput.close().

This makes ChunkedStream.isEndOfInput() trigger an IOException, which is
originally triggered by PushBackInputStream.read().

By contract, ChunkedInput.isEndOfInput() should not raise an IOException
even when the underlying stream is closed.

Modifications:

Add a boolean flag that keeps track of whether the underlying stream has
been closed or not, so that ChunkedStream.isEndOfInput() does not
propagate the IOException from PushBackInputStream.

Result:

Fixes #3368"
44eeb5f6b4a59b64788f7cfad9410ea6ae71195b,"Fix intermittent test failure in LoggingHandlerTest

Motivation:

LoggingHandlerTest sometimes failure due to unexpected log messages
logged due to the automatic reclaimation of thread-local objects.

  Expectation failure on verify:
    Appender.doAppend([DEBUG] Freed 3 thread-local buffer(s) from thread: nioEventLoopGroup-23-0): expected: 1, actual: 0
    Appender.doAppend([DEBUG] Freed 9 thread-local buffer(s) from thread: nioEventLoopGroup-23-1): expected: 1, actual: 0
    Appender.doAppend([DEBUG] Freed 2 thread-local buffer(s) from thread: nioEventLoopGroup-23-2): expected: 1, actual: 0
    Appender.doAppend([DEBUG] Freed 4 thread-local buffer(s) from thread: nioEventLoopGroup-26-0): expected: 1, actual: 0
    Appender.doAppend(matchesLog(expected: "".+CLOSE$"", got: ""[id: 0xembedded, embedded => embedded] CLOSE"")): expected: 1, actual: 0

Modifications:

Add the mock appender to the related logger only

Result:

No more intermittent test failures"
9737cc6cc9436fcc032daef53e194da46b039ba5,"Include error code and message in GOAWAY events.

Motivation:

The Connection.Listener GOAWAY event handler currently provides no additional information, requiring applications to hack in other ways to get at the error code and debug message.

Modifications:

Modified the Connection.Listener interface to pass on the error code and message that triggered the GOAWAY.

Result:

Application can now use Connection.Listener for all GOAWAY processing."
ba9f2143030d1b781724f04adaac254af3326930,"Removing unnecessary use of Math.ceil in HTTP/2 priority algorithm.

Motivation:

We're currently using Math.ceil which isn't necessary. We should exchange for a lighter weight operation.

Modifications:

Changing the logic to just ensure that we allocate at least one byte to the child rather than always performing a ceil.

Result:

Slight performance improvement in the priority algorithm."
7f2ddb21626c7f0280aab2be0fd762169d3155aa,"HTTP/2 Closed Streams Conditional Priority Tree Removal

Motivation:
The HTTP/2 specification allows for closed (and streams in any state) to exist in the priority tree. The current code removes streams from the priority tree as soon as they are closed (subject to the removal policy). This may lead to undesired distribution of resources from the peer's perspective.

Modifications:
- We should only remove streams from the priority tree when they have no descendant streams in a viable state.
- We should track when tree edges change or nodes are removed if inviable nodes can then be removed.

Result:
Priority tree doesn't remove closed streams until descendant are all closed, or there are no descendants."
2e509f7bb7a365741bdf79948c51b5e91fa3ce0a,"Fix unbounded expansion of cumulative buffer in SslHandler

Related: #3567

Motivation:

SslHandler.channelReadComplete() forgets to call
super.channelReadComplete(), which discards read bytes from the
cumulative buffer.  As a result, the cumulative buffer can expand its
capacity unboundedly.

Modifications:

Call super.channelReadComplete() instead of calling
ctx.fireChannelReadComplete()

Result:

Fixes #3567"
ef729e70213adbfca7b26c2c337eb5d12839fbad,"Allow non-standard HTTP/2 settings

Motivation:

The Http2Settings class currently disallows setting non-standard settings, which violates the spec.

Modifications:

Updated Http2Settings to permit arbitrary settings. Also adjusting the default initial capacity to allow setting all of the standard settings without reallocation.

Result:

Fixes #3560"
35b9aa930209ac070436085efe351f7b522df5ff,"Replace LinkedHashSet by ArrayList to avoid iterators.

Motivation:

In a simple load test that creates and closes several 10k streams per second
I have seen Iterator objects using roughly 1.6% of the total committed heap.

Modifications:

Use an ArrayList instead of a LinkedHashSet to store the connection listeners.
That way we can iterate over the list without creating an iterator every time.

Result:

Zero Iterator allocations due to notifying connection listeners."
330bc39d9142c8b1e34a94aba29cddc361b89b07,"Backporting PrimitiveCollections class

Motivation:
PrimitiveCollections is not in the 4.1 branch.  It is needed by HTTP/2.

Modifications:
Backport this class.

Result:
PrimitiveCollections is in 4.1."
e40c27d9ed1678207c1ca4554e70ed5e2534d93f,"Avoid object allocations for HTTP2 child streams.

Motivation:

We are allocating a hash map for every HTTP2 Stream to store it's children.
Most streams are leafs in the priority tree and don't have children.

Modification:

 - Only allocate children when we actually use them.
 - Make EmptyIntObjectMap not throw a UnsupportedOperationException on remove, but return null instead (as is stated in it's javadoc).

Result:

Fewer unnecessary allocations."
e5d01c4caf07c941199d4531eb8c251664b49ae4,"HTTP/2 HEADERS stream dependency fix

Motivation:
The DefaultHttp2ConnectionDecoder has the setPriority call after the Http2FrameListener is notified of the change. The setPriority call has additional verification logic and may even create the dependency stream and so it must be before the Http2FrameListener is notified.

Modifications:
The DefaultHttp2ConnectionDecoder should treat the setPriority call in the same for the HEADERS and PRIORITY frame (call it before notifying the listener).

Result:
Http2FrameListener should see correct state when a HEADERS frame has a stream dependency that has not yet been created yet.  Fixes https://github.com/netty/netty/issues/3572."
9517edd4983e632f23a58da5633c630fe9c61a51,"HTTP/2 RST_STREAM in IDLE

Motivation:
The spec requires that a RST_STREAM received on an IDLE stream results in a connection error. This is not happening.

Modifications:
Check for this condition when a RST_STREAM is received in DefaultHttp2ConnectionDecoder.

Result:
More spec compliant.  Fixes https://github.com/netty/netty/issues/3573."
609e065fcf830d73b606d2d786af489e0b7dc0b6,"HTTP/2 Headers Code Using String instead of AsciiString

Motivation:
The HTTP/2 headers code should be using binary string (currently AsciiString) objects instead of String objects. The DefaultHttp2HeadersEncoder was still using String for sensitiveHeaders.

Modifications:
- Remove the usage of String from DefaultHttp2HeadersEncoder.
- Introduce an interface to determine if a header name/value is sensitive or not to 1. prevent necessarily creating/copying sets. 2. Allow the name/value to be considered when checking if sensitive.

Result:
No more String in DefaultHttp2HeadersEncoder and less required set creation/operations."
190cbf55e435add782ee2976f40e0e7d11916895,"Fix incorrect null value check in TrafficCounter

In TrafficCounter, a recent change makes the contract of the API (the
constructor) wrong and lead to issue with GlobalChannelTrafficCounter
where executor must be null.

Motivation:
TrafficCounter executor argument in constructor might be null, as
explained in the API, for some particular cases where no executor are
needed (relevant tasks being taken by the caller as in
GlobalChannelTrafficCounter).
A null pointer exception is raised while it should not since it is
legal.

Modifications:
Remove the 2 null checking for this particular attribute.
Note that when null, the attribute is not reached nor used (a null
checking condition later on is applied).

Result:
No more null exception raized while it should not.

This shall be made also to 4.0, 4.1 (present) and master. 3.10 is not
concerned."
86edc88448ce0f27304f33b788afa1d003edb284,"HTTP/2 LifecycleManager and Http2ConnectionHandler interface clarifications

Motiviation:
The interface provided by Http2LifecycleManager is not clear as to how the writeXXX methods should behave.  The implementation of this interface from the Http2ConnectionHandler's perspecitve is unclear what writeXXX means in this context.

Modifications:
- Method names in Http2LifecycleManager and Http2ConnectionHandler should be renamed and comments should clarify the interfaces.

Results:
Http2LifecycleManager is more clear and Http2ConnectionHandler's implementation makes sense w.r.t to return values."
3ae343b768bae5973a5634c8e287ae1173e30248,"HTTP/2 DefaultHttp2Connection recursive call fix

Motivation:
There are methods to manipulate the prioritzable count for streams which have the '0' postfix which are designed to be used during recursion.  However these methods are calling out to an external method without the '0' during the recursive process.  This is doing uneccessary conditional checks during recursion.

Modifications:
Change the decrementPrioritizableForTree to decrementPrioritizableForTree0 while in recursive method.
Change the incrementPrioritizableForTree to incrementPrioritizableForTree0 while in recursive method.

Result:
Less overhead during recursive calls."
d5d932a7399d03b811781b08c23b16c07851ad78,"Fix GOAWAY logic in Http2Encoder and Http2Decoder.

Motivation:

1) The current implementation doesn't allow for HEADERS, DATA, PING, PRIORITY and SETTINGS
   frames to be sent after GOAWAY.

2) When receiving or sending a GOAWAY frame, all streams with ids greater than the lastStreamId
   of the GOAWAY frame should be closed. That's not happening.

Modifications:

1) Allow sending of HEADERS and DATA frames after GOAWAY for streams with ids < lastStreamId.
2) Always allow sending PING, PRIORITY AND SETTINGS frames.
3) Allow sending multiple GOAWAY frames with decreasing lastStreamIds.
4) After receiving or sending a GOAWAY frame, close all streams with ids > lastStreamId.

Result:

The GOAWAY handling is more correct."
83ce8a9187a11b7bf38fd91841fc0b03d3e24d80,"HTTP/2 Prevent modification of activeStreams while iterating

Motivation:
The Http2Connection interface exposes an activeStreams() method which allows direct iteration over the underlying collection. There are a few places that make copies of this collection to avoid modification while iterating, and a few places that do not make copies. The copy operation can be expensive on hot code paths and also we are not consistently iterating over the activeStreams collection.

Modifications:
- The Http2Connection interface should reduce the exposure of the underlying collection and just expose what is necessary for the interface to function.  This is just a means to iterate over the collection.
- The DefaultHttp2Connection should use this new interface and protect it's internal state while iteration is occurring.

Result:
Reduction in surface area of the Http2Connection interface.  Consistent iteration of the set of active streams.  Concurrent modification exceptions are handled in 1 encapsulated spot."
6496d2dbc7badfb586999ea63ff6bc66d76b100a,"Motivation: If there are no readable bytes, it's unnecessary to go through javaChannel().write().

Modification:
If the readableBytes() is zero, then just return.

Result:
The logic can be easy to understand and a little faster than before."
c9adb416362cca3190eafbeaab13e6e8f6ab433c,"Refactor tests for compression codecs

Motivation:

Too many duplicated code of tests for different compression codecs.

Modifications:

- Added abstract classes AbstractCompressionTest, AbstractDecoderTest and AbstractEncoderTest which contains common variables and tests for any compression codec.
- Removed common tests which are implemented in AbstractDecoderTest and AbstractEncoderTest from current tests for compression codecs.
- Implemented abstract methods of AbstractDecoderTest and AbstractEncoderTest in current tests for compression codecs.
- Added additional checks for current tests.
- Renamed abstract class IntegrationTest to AbstractIntegrationTest.
- Used Theories to run tests with head and direct buffers.
- Removed code duplicates.

Result:

Removed duplicated code of tests for compression codecs and simplified an addition of tests for new compression codecs."
3354296c9ff955e4315d32e0f85019ab209475f3,"Auto-generating primitive collections for int and char keys.

Motivation:

Currently we have IntObjectMap/HashMap, but it will be useful to support other primitive-based maps.

Modifications:

Moved the code int the current maps to template files and run Groovy code from  common/pom.xml to apply the templates.

Result:

Autogeneration of int and char-based hash maps."
e3374e5b1d6091b030bc956318fde1da62915c27,"Removing direct access to HTTP/2 child streams.

Motivation:

We've removed access to the activeStreams collection, we should do the same for the children of a stream to provide a consistent interface.

Modifications:

Moved Http2StreamVisitor to a top-level interface. Removed unnecessary child operations from the Http2Stream interface so that we no longer require a map structure.

Result:

Cleaner and more consistent interface for iterating over child streams."
aebbb862acd1ffaec58c05b658f62f6568ffbcc8,"Add support for ALPN when using openssl + NPN client mode and support for CipherSuiteFilter

Motivation:

To support HTTP2 we need APLN support. This was not provided before when using OpenSslEngine, so SSLEngine (JDK one) was the only bet.
Beside this CipherSuiteFilter was not supported

Modifications:

- Upgrade netty-tcnative and make use of new features to support ALPN and NPN in server and client mode.
- Guard against segfaults after the ssl pointer is freed
- support correctly different failure behaviours
- add support for CipherSuiteFilter

Result:

Be able to use OpenSslEngine for ALPN / NPN for server and client."
a87c86dc0d8611fc66b66f0a3d8441a7dee7ca1b,"Change Http2Settings to use char keys.

Motivation:

Now that we have a CharObjectHashMap, we should change Http2Settings to use it.

Modifications:

Changed Http2Settings to extend CharObjectHashMap rather than IntObjectHashMap.

Result:

Http2Settings uses less memory to store keys."
3e42292d8b5c995a2a8342a91a2a3c1ec807628a,"Change PoolThreadCache to use LIFO for better cache performance

Motiviation:

At the moment we use FIFO for the PoolThreadCache which is sub-optimal as this may reduce the changes to have the cached memory actual still in the cpu-cache.

Modification:

- Change to use LIFO as this increase the chance to be able to serve buffers from the cpu-cache

Results:

Faster allocation out of the ThreadLocal cache.

Before the commit:
[xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    14.69ms   10.06ms 131.43ms   80.10%
    Req/Sec   283.89k    40.37k  433.69k    66.81%
  533859742 requests in 2.00m, 72.09GB read
Requests/sec: 4449510.51
Transfer/sec:    615.29MB

After the commit:
[xxx wrk]$ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    16.38ms   26.32ms 734.06ms   97.38%
    Req/Sec   283.86k    39.31k  361.69k    83.38%
  540836511 requests in 2.00m, 73.04GB read
Requests/sec: 4508150.18
Transfer/sec:    623.40MB"
1e8a2e69dbf852775a8ae679edee2d25d60bc392,"[#3592] Flush when writing HttpChunkedInput

Motivation:

We missed to flush the channel when using HttpChunkedInput (this is done when using SSL). This will result in a stale.

Modifications:

Replace ctx.write(...) with ctx.writeAndFlush(...)

Result:

Correctly working example."
7094c7b7976e88bb65b71009ac7501025ca31bc3,"Dereference when calling PooledByteBuf.deallocate()

Motivation:

We missed to dereference the chunk and tmpNioBuf when calling deallocate(). This means the GC can not collect these as we still hold a reference while have the PooledByteBuf in the recycler stack.

Modifications:

Dereference chunk and tmpNioBuf.

Result:

GC can collect things."
d8e5d421e13e05edfea9894aa4f226f8e1b03692,"Revert ""Dereference when calling PooledByteBuf.deallocate()""

This reverts commit 7094c7b7976e88bb65b71009ac7501025ca31bc3."
aa1e537de40c7ecea3516a40e52f1101c0f88908,"[#3373] Rename class to match naming scheme

Motivation:

The ReplayingDecoderBuffer does not match the naming scheme we use for ByteBuf types.

Modifications:

Rename to ReplayingDecoderByteBuf to match naming scheme

Result:

Consistent naming"
18627749a98591b29f4b9040af4608e6facbb429,"Let CompositeByteBuf implement Iterable

Motivation:

CompositeByteBuf has an iterator() method but fails to implement Iterable

Modifications:

Let CompositeByteBuf implement Iterable<ByteBuf>

Result:

Easier usage"
4d02c3a040d47e240fd9574bb6dd48b15b9b7779,"[#2925] Bug fix for NormalMemoryRegionCache overbooked for PoolThreadCache

Motivation:

When create NormalMemoryRegionCache for PoolThreadCache, we overbooked
cache array size. This means unnecessary overhead for thread local cache
as we will create multi cache enties for each element in cache array.

Modifications:

change:
int arraySize = Math.max(1, max / area.pageSize);
to:
int arraySize = Math.max(1, log2(max / area.pageSize) + 1);

Result:

Now arraySize won't introduce unnecessary overhead.

 Changes to be committed:
	modified:   buffer/src/main/java/io/netty/buffer/PoolThreadCache.java"
4a79c5899cceb3e3f6e9bd041aa33e119c9d5274,"HTTP/2 Connection Listener Unchecked Exceptions

Motivation:
The DefaultHttp2Connection is not checking for RuntimeExceptions when invoking Http2Connection.Listener methods. This is a problem for a few reasons: 1. The state of DefaultHttp2Connection will be corrupted if a listener throws a RuntimeException. 2. If the first listener throws then no other listeners will be notified, which may further corrupt state that is updated as a result of listeners being notified.

Modifications:
- Document that RuntimeExceptions are not supported for Http2Connection.Listener methods, and will be logged as an error.
- Update DefaultHttp2Connection to handle and exception for each listener that is notified, and be sure that 1 listener throwing an exception does not prevent others from being notified.

Result:
More robust DefaultHttp2Connection."
cc7ee002dd7e92857efc3c3a842ead22e16d1b57,"HTTP/2 Frame Writer Microbenchmark Fix

Motivation:
The Http2FrameWriterBenchmark JMH harness class name was not updated for the JVM arguments. The number of forks is 0 which means the JHM will share a JVM with the benchmarks.  Sharing the JVM may lead to less reliable benchmarking results and as doesn't allow for the command line arguments to be applied for each benchmark.

Modifications:
- Update the JMH version from 0.9 to 1.7.1.  Benchmarks wouldn't run on old version.
- Increase the number of forks from 0 to 1.
- Remove allocation of environment from static and cleanup AfterClass to using the Setup and Teardown methods. The forked JVM would not shut down correctly otherwise (and wait for 30+ seconds before timeing out).

Result:
Benchmarks that run as intended."
c388f3f085d74fac7204c490ac2f1a9f659cfca9,"Removing Http2StreamRemovalPolicy

Motivation:

Due to a recent flurry of cleanup and fixes, we no longer need the stream removal policy to protect against recently removed streams. We should get rid of it.

Modifications:

Removed Http2StreamRemovalPolicy and everywhere it's used.

Result:

Fixes #3448"
ab158a6ea43beb4990bb53cc991c1e070c98134e,"Adding basic benchmarks for IntObjectHashMap

Motivation:

It needs to be fast :)

Modifications:

Added a simple benchmark to the microbench module.

Result:

Yay, benchmarks!"
e48b8f5c498b6f6e487f5a8d474b6066de7f1411,"[#3539] Correctly handle EPOLLRDHUP

Motivation:

As we missed to correctly handle EPOLLRDHUP we produce an IOException which is unnessary. This leads
to have exceptionCaught(...) methods called.

Modifications:

When EPOLLRDHUP was received just close the socket and fail all pending writes.

Result:

Correctly handle of EPOLLRDHUP and so not miss-leading exceptions."
bd224286f5a9fa00432ecfd2291801b417fd4eb4,"[#3531] Create SslContext.Builder

Motivation:

SslContext factory methods have gotten out of control; it's past time to
swap to a builder.

Modifications:

New Builder class. The existing factory methods must be left as-is for
backward compatibility.

Result:

Fixes #3531"
6c3f5ab34d0f70e5d7c8b8fc9068f88f798b38a8,"Add support for EC Keys when using SslServerContext

Motivation:

Sometimes it's useful to use EC keys and not DSA or RSA. We should support it.

Modifications:

Support EC keys and share the code between JDK and Openssl impl.

Result:

It's possible to use EC keys now."
05498ee938565d90cb88ba096660ebeb44bc7fed,Fix regression introduced by cherry-pick bd224286f5a9fa00432ecfd2291801b417fd4eb4
0d9ba81c061f75bb1cf64dfb5c739a1fa0dd5775,"Document the contract of Attribute.getAndSet(...) and set(...)

Motivation:

Attribute.getAndRemove() will return the value but also remove the AttributeKey itself from the AttributeMap. This may not
what you want as you may want to keep an instance of it and just set it later again. Document the contract so the user know what to expect.

Modifications:

- Make it clear when to use AttributeKey.getAndRemove() / AttributeKey.remove() and when AttributeKey.getAndSet(null) / AttributeKey.set(null).

Result:

Less suprising behaviour."
9a7a85dbe54f8ec7cddef8721f720feaeb7a16c9,"ByteString introduced as AsciiString super class

Motivation:
The usage and code within AsciiString has exceeded the original design scope for this class. Its usage as a binary string is confusing and on the verge of violating interface assumptions in some spots.

Modifications:
- ByteString will be created as a base class to AsciiString. All of the generic byte handling processing will live in ByteString and all the special character encoding will live in AsciiString.

Results:
The AsciiString interface will be clarified. Users of AsciiString can now be clear of the limitations the class imposes while users of the ByteString class don't have to live with those limitations."
e36c1436b80399175fad55d09848c9f29da2174e,"ByteString misses encountered during forward port

Motivation:
While forward porting https://github.com/netty/netty/pull/3579 there were a few areas that had not been previously back ported.

Modifications:
Backport the missed areas to ensure consistency.

Result:
More consistent 4.1 and master branches."
970529e1a80850b30262917b4a1e134f1c2e5aee,"HTTP/2 Priority tree circular link

Motivation:
If an exclusive dependency change stream B should be an exclusive dependency of stream A is requested and stream B is already a child of stream A...then we will add B to B's own children map and create a circular link in the priority tree. This leads to an infinite recursive loop and a stack overflow exception.

Modifications:
-when removeAllChildren is called it should not remove the exclusive dependency.
-unit test to ensure this case is covered.

Result:
No more circular link in the priority tree."
854859ba69f88c115a82a1a84228e2a860a1a873,"Change AggregatedFullHttpMessage to contain a content ByteBuf

Motivation:

Other implementations of FullHttpMessage allow .toString to be called after the Message has been released
This brings AggregatedFullHttpMessage into line with those impls.

Modifications:

- Changed AggregatedFullHttpMessage to no longer be a sub-class of DefaultByteBufHolder
- Changes AggregatedFullHttpMessage to implement ByteBufHolder
- Hold the content buffer internally to AggregatedFullHttpMessage
- Implement the required content() and release() methods that were missing
- Do not check refcnt when accessing content() (similar to DefaultFullHttpMessage)

Result:

A released AggregatedFullHttpMessage can have .toString called without throwing an exception"
4e70523eddb94bfbcaa3ac12fe43435e90692df3,"The ""null"" ClassLoader is the bootstrap ClassLoader

Motivation:
Class.forName() documents that null will use bootstrap loader:
http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#forName-java.lang.String-boolean-java.lang.ClassLoader-

But the link between ""null"" and bootstrap loader is even more explicit
in ClassLoader's documentation:
http://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#getParent--

The current code is trying to use the bootstrap loader but seems to have
not been aware of the meaning of null.

Modifications:
Use ""null"" as the class loader when we want to load classes in the
bootstrap loader.

Result:
More reliable ALPN/NPN loading and simpler code."
7aac50a79ac5e3d8b90808fb4102dddf8369ed6c,"Optimizing KObjectHashMap hashIndex()

Motivation:

The IntObjectHashMap benchmarks show the Agrona collections to be faster on put, lookup, and remove. One major difference is that we're using 2 modulus operations each time we increment the position index while iterating.  Agrona uses a mask instead.

Modifications:

Modified the KObjectHashMap to use masking rather than modulus when wrapping the position index. This requires that the capacity be a power of 2.

Result:

Improved performance of IntObjectHashMap."
221a9f50d4a63d12f177cf1d25d9d2fd3c9b606a,"Fix for ByteString#hashCode()

Motivation:

ByteString#hashCode() trashes its own hash code if it's being accessed concurrently

Modifications:

Pull the ByteString#hash into a local variable and calculate it locally.

Result:

ByteString#hashCode() is no longer returning a junk value."
c2de195f872506dacd5df5cd5507b49e1669790d,"Improve performance of AsciiString.equals(Object).

Motivation:

The current implementation does byte by byte comparison, which we have seen
can be a performance bottleneck when the AsciiString is used as the key in
a Map.

Modifications:

Use sun.misc.Unsafe (on supporting platforms) to compare up to eight bytes at a time
and get closer to the performance of String.equals(Object).

Result:

Significant improvement (2x - 6x) in performance over the current implementation.

Benchmark                                             (size)   Mode   Samples        Score  Score error    Units
i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual       10  thrpt        10 118843477.518 2347259.347    ops/s
i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual       50  thrpt        10 43910319.773   198376.996    ops/s
i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual      100  thrpt        10 26339969.001   159599.252    ops/s
i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual     1000  thrpt        10  2873119.030    20779.056    ops/s
i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual    10000  thrpt        10   306370.450     1933.303    ops/s
i.n.m.i.PlatformDependentBenchmark.arraysBytesEqual   100000  thrpt        10    25750.415      108.391    ops/s
i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual       10  thrpt        10 248077563.510  635320.093    ops/s
i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual       50  thrpt        10 128198943.138  614827.548    ops/s
i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual      100  thrpt        10 86195621.349  1063959.307    ops/s
i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual     1000  thrpt        10 16920264.598    61615.365    ops/s
i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual    10000  thrpt        10  1687454.747     6367.602    ops/s
i.n.m.i.PlatformDependentBenchmark.unsafeBytesEqual   100000  thrpt        10   153717.851      586.916    ops/s"
e48e6e450957868b239de20a588f9c19f06c7f3e,Fix checkstyle
f3fb77f4bce9d11d7b54878e91728674f6ee5342,"Have microbenchmarks produce a deployable artifact. Fix some minor miscellaneous issues.

Motivation:
Allows for running benchmarks from built jars which is useful in development environments that only take released artifacts.

Modifications:
Move benchmarks into 'main' from 'test'
Add @State annotations to benchmarks that are missing them
Fix timing issue grabbing context during channel initialization

Result:
Users can run benchmarks more easily."
2b8104c852a42bc6b39f8bdf2413b9e770b08a82,"HTTP/2 Priority Tree Benchmark

Motivation:
There is no benchmark to measure the priority tree implementation performance.

Modifications:
Introduce a new benchmark which will populate the priority tree, and then shuffle parent/child links around.

Result:
A simple benchmark to get a baseline for the HTTP/2 codec's priority tree implementation."
3850cff0fce020df1c861e866a87ef6ba23006c1,"Allow to get version of available OpenSSL library

Motivation:

Sometimes it's useful to get informations about the available OpenSSL library that is used for the OpenSslEngine.

Modifications:

Add two new methods which allows to get the available OpenSSL version as either
an int or an String.

Result:

Easy to access details about OpenSSL version."
b4b14ea19f343fbe7a0993a92856d573683de810,"Ensure backward-compability with 4.0

Motivation:

Each different *ChannelOption did extend ChannelOption in 4.0, which we changed in 4.1. This is a breaking change in terms of the API so we need to ensure we keep the old hierarchy.

Modifications:

- Let all *ChannelOption extend ChannelOption
- Add back constructor and mark it as @deprecated

Result:

No API breakage between 4.0 and 4.1"
bdfdf3094db00c7bfd610a3fb3e34ecae8e95aba,"Reduce object allocation during wrap/unwrap while handshake is in progress

Motivation:

Unnecessary object allocation is currently done during wrap/unwrap while a handshake is still in progress.

Modifications:

Use static instances when possible.

Result:

Less object creations."
a123c495e1b789f906f59b0227c6ad920460a4a4,"Revert ""Add another test case for channelReadComplete() suppression""

This reverts commit daa04cb4f10050919b3aa4df89b0ea6aeebe335b."
bb692816d28e7943c31a4d44730c4f4bc72cda3b,"Revert ""Do not suppress channelReadComplete() when a handler was just added""

This reverts commit 720faa4df101c22ff591ae4a916e93648951c374."
ccde870b389f9223464c9c03783f1ddb450cb30c,"Revert ""Ensure channelReadComplete() is called only when necessary""

This reverts commit 27a25e29f7c002eb9f4d52b52ecccb2f3a7d6b15."
77e112a6d57430702fdb3a38cee4671464d7bb02,"Correctly test for non-auto-read correctness in testsuite

Motiviation:

Our tests for non-auto-read did actually not test this correctly as auto-read was never disabled on the Bootstrap and ServerBootstrap.

Modifications:

- Correctly disable auto-read on Bootstrap and ServerBootstrap
- Fix tests to call ChannelHandlerContext.read() once a Channel becomes active.

Result:

Correctly test that non-auto-read works."
62057f73d6cda6294c44f562ba0ae8bde1923c96,"Fix handling of non-auto read for ByteToMessageDecoder and SslHandler

Motivation:

Our automatically handling of non-auto-read failed because it not detected the need of calling read again by itself if nothing was decoded. Beside this handling of non-auto-read never worked for SslHandler as it always triggered a read even if it decoded a message and auto-read was false.

This fixes [#3529] and [#3587].

Modifications:

- Implement handling of calling read when nothing was decoded (with non-auto-read) to ByteToMessageDecoder again
- Correctly respect non-auto-read by SslHandler

Result:

No more stales and correctly respecting of non-auto-read by SslHandler."
8b1f247a1af6a17757c491922675f0ed9dd2a8e1,"[#3623] CompositeByteBuf.iterator() should return optimized Iterable

Motivation:

CompositeByteBuf.iterator() currently creates a new ArrayList and fill it with the ByteBufs, which is more expensive then it needs to be.

Modifications:

- Use special Iterator implementation

Result:

Less overhead when calling iterator()"
f467d695be2ae4ee7d5c2978191e1415aef37a9e,"Fix SslContextBuilder swapping client and server

The 'forClient' boolean was swapped to 'forServer' in code review of #3531.
Not all locations were updated."
541137cc933783c5e44cd178f14508d883f21d4b,"HTTP/2 Flow Controller interface updates

Motivation:
Flow control is a required part of the HTTP/2 specification but it is currently structured more like an optional item. It must be accessed through the property map which is time consuming and does not represent its required nature. This access pattern does not give any insight into flow control outside of the codec (or flow controller implementation).

Modifications:
1. Create a read only public interface for LocalFlowState and RemoteFlowState.
2. Add a LocalFlowState localFlowState(); and RemoteFlowState remoteFlowState(); to Http2Stream.

Result:
Flow control is not part of the Http2Stream interface. This clarifies its responsibility and logical relationship to other interfaces. The flow controller no longer must be acquired though a map lookup."
abccf184115129e7f4eb79af6c4fab0fc19ec1ea,"fix the discardedBytes counting on LineBasedFrameDecoder

Motivation:

The LineBasedFrameDecoder discardedBytes counting different compare to
DelimiterBasedFrameDecoder.

Modifications:

Add plus sign

Result:

DiscardedBytes counting correctly"
26a7a5ec25fe81fae38f557e6b44bf9c3ea91fea,"Always consume bytes for closed HTTP/2 streams.

Motivation:

The current local flow controller does not guarantee that unconsumed bytes for a closed stream will be restored to the connection window.  This may lead to degradation of the connection window over time.

Modifications:

Modified DefaultHttp2LocalFlowController to guarantee that any unconsumed bytes are returned to the connection window as soon as the stream is closed. We also immediately consume any bytes when receiving DATA for a closed stream.

Result:

Fixes #3668"
ab925abc7db806ead57f8d9ea50ff322ce2ff891,"Ignore frames for streams that may have previously existed.

Motivation:

The recent PR that discarded the Http2StreamRemovalPolicy causes connection errors when receiving a frame for a stream that no longer exists. We should ignore these frames if we think there's a chance that the stream has existed previously

Modifications:

Modified the Http2Connection interface to provide a `streamMayHaveExisted` method. Also removed the requireStream() method to identify all of the places in the code that need to be updated.

Modified the encoder and decoder to properly handle cases where a stream may have existed but no longer does.

Result:

Fixes #3643"
a7d1dc362ae0ab5998723aae120b36d606a31425,"[#3652] Improve performance of StringUtil.simpleClassName()

Motivation:

static Package getPackage(Class<?> c) uses synchronized block internally.
Thanks to @jingene for the hint and initial report of the issue.

Modifications:

-Use simple lastIndexOf(...) and substring for a faster implementation

Result:

No more lock condition."
ee9233d8fa99e53408cba61d97d9707881fda1e0,"HTTP/2 Flow Controller required memory reduction

Motivation:
Currently we allocate the full amount of state for each stream as soon as the stream is created, and keep that state until the stream is GC. The full set of state is only needed when the stream can support flow controlled frames. There is an opportunity to reduce the required amount of memory, and make memory eligible for GC sooner by only allocating what is necessary for flow control stream state.

Modifications:

Introduce objects which require 'less' state for local/remote flow control stream state.
Use these new objects when streams have been created but will not transition out of idle AND when streams are no longer eligible for flow controlled frame transfer but still must persist in the priority tree.
Result:
Memory allocations are reduced to what is actually needed, and memory is made eligible for GC potentially sooner."
b426fb1618757e3e8d700f90cf5b5e1c55bc9f2a,"Compile error introduced in ee9233d

Motivation:
Commit ee9233d introduced a compile error in microbench.

Modifications:
Fix compile error.

Result:
Code now builds."
70a2608325d148092a2b6c6d6a5fb09522c6e841,"Optimizing user-defined stream properties.

Motivation:

Streams currently maintain a hash map of user-defined properties, which has been shown to add significant memory overhead as well as being a performance bottleneck for lookup of frequently used properties.

Modifications:

Modifying the connection/stream to use an array as the storage of user-defined properties, indexed by the class that identifies the index into the array where the property is stored.

Result:

Stream processing performance should be improved."
f812180c2d9446b5ca7da433688772c12530be4d,"ByteString arrayOffset method

Motivation:
The ByteString class currently assumes the underlying array will be a complete representation of data. This is limiting as it does not allow a subsection of another array to be used. The forces copy operations to take place to compensate for the lack of API support.

Modifications:
- add arrayOffset method to ByteString
- modify all ByteString and AsciiString methods that loop over or index into the underlying array to use this offset
- update all code that uses ByteString.array to ensure it accounts for the offset
- add unit tests to test the implementation respects the offset

Result:
ByteString and AsciiString can represent a sub region of a byte[]."
f67b14bf350abfda113da116e6c9a335aa60f649,"[#3680] Enabled SecurityManager results in ClassNotFoundError during io.netty.util.NetUtil initialization

Motivation:

When a SecurityManager is in place that preven reading the somaxconn file trying to bootstrap a channel later will result in a ClassNotFoundError.

Modifications:

- Reading the file in a privileged block.

Result:

No more ClassNotFoundError when a SecurityManager is in place."
1cce998bb06f42ff47925390872dcc5c487bbf59,"[#3662] Fail the connect future on close

Motivation:

Because of a bug we missed to fail the connect future when doClose() is called. This can lead to a future which is never notified and so may lead to deadlocks in user-programs.

Modifications:

Correctly fail the connect future when doClose() is called and the connection was not established yet.

Result:

Connect future is always notified."
3440eadb3843676e993cf937de1e33c1909270ff,"Http2ConnectionHandler should propagate channelActive and channelInactive events.

Motivation:

The Http2ConnectionHandler incorrectly doesn't propagate channelActive and channelInactive events and thus breaks the pipeline
for other ChannelHandler.

Modification:

- Add calls to super.channelActive() and super.channelInactive().
- Remove unused methods.

Result:

- Http2ConnectionHandler can be used with other ChannelHandlers."
31a6ab9b1d957461ded25269ebc0d8a92a1cf194,Fix compile errors introduced by cherry picking of 3440eadb3843676e993cf from master.
c4d69e982b87481b2cdbec9aaa234913d1699730,"Remove duplicate code in ConstantPool class

Motivation:

Currently, valueOf() and newInstance() use almost same code to create new constant.
For maintainability, it's better to share duplicate code among them.

Motification:

Added new private functions.
- checkNotNullAndNotEmpty() is for checking whether the name of a constant is null and empty.
- newConstant0() is for creating a new constant.

Result:

- Compact source code
- Improvement of maintainability"
891be30a28c6dc5a1edf1cb5a3690644cf4ff66e,"Remove memory copy when extract frame in LengthFieldBasedFrameDecoder

Motivation:

We are currently doing a memory cop to extract the frame in LengthFieldBasedFrameDecoder which can be eliminated.

Modifications:

Use buffer.slice(...).retain() to eliminate the memory copy.

Result:

Better performance."
f250dfedbeafc4707425dabe1fa773ef75f0e855,"HTTP/2 Sending a GO_AWAY with an error code should close conneciton

Motivation:
The specification requires that sending a GO_AWAY frame with an error code results in closing the TCP connection https://tools.ietf.org/html/draft-ietf-httpbis-http2-17#section-5.4.1.

Modifications:
- Close the connection after succesfully sending a GO_AWAY.

Result:
Fixes https://github.com/netty/netty/issues/3653"
af0dd72184581cfff3fdde39bffc470e9e836593,"HTTP/2 Warnings Cleanup

Motiviation:
There are a few spots in the HTTP/2 codec where warnings were generated and can be avoided.

Modifications:
Clean up the cause of the warnings.

Result:
Less warnings."
ad9bec4d9d823d117d37a8a3d1a3fde76da0fe57,"Add support for splice(...)

Motivation:

Linux supports splice(...) to transfer data from one filedescriptor to another without
pass data through the user-space. This allows to write high-performant proxy code or to stream
stuff from the socket directly the the filesystem.

Modification:

Add AbstractEpollStreamChannel.spliceTo(...) method to support splice(...) system call

Result:

Splice is now supported when using the native linux transport.

Conflicts:

	transport-native-epoll/src/main/java/io/netty/channel/epoll/AbstractEpollStreamChannel.java"
05f959335228938d3fa2c46ae743363c2be689a6,"Remove the unreachable checking code

Motivation:
'length2 == 0' is not reachable because length1 and length2 are same at this point.

Motification:
Removed 'length2 == 0'.

Result:
Cleaner code."
6c025b2044728d930f15ea5f822da9cffd27645b,"Add support for SCTP 'unordered' flag.

Motivation:

Some SCTP applications require the SCTP unordered flag.
This flag was not exposed by Netty so applications were unable
to use it.

Modifications:

- Add unordered flag to SctpMessage.
- {Nio,Oio}SctpChannel pass unordered flag to MessageInfo on write.
- SctpOutboundByteStreamHandler may optionally request unordered
  delivery for all outbound messages.
- Added test case to SctpEchoTest using unordered flag.

Result:

Fixes #3698. New constructors and methods added to SctpMessage and
SctpOutboundByteStreamHandler, but changes are backward compatible."
56c98839c3fdc1418475acd003f655383bc97714,"[#3218] Add ChannelPool / ChannelPoolMap abstraction and implementations

Motivation:

Many projects need some kind a Channel/Connection pool implementation. While the protocols are different many things can be shared, so we should provide a generic API and implementation.

Modifications:

Add ChannelPool / ChannelPoolMap API and implementations.

Result:

Reusable / Generic pool implementation that users can use."
a5c8e145ee3f927f5d1793d34188f2ca86b3cbe8,"Remove the condition which is always true when reached

Motivation:
Condition 'isNextCharDoubleQuote' is always 'true' when reached.

Motification:
- Removed Condition 'isNextCharDoubleQuote'.
- Additionally fixed typo in javadoc

Result:
Cleaner code."
ce8c916f1aea3b2f789e1532c2ccbcec4fbd40c2,"Upgrade twitter hpack dependency

Motivation:
Right now the used hpack dependency does not contain a valid osgi manifest.

Modifications:
Upgrade hpack from 0.10.1 to 0.11.0.

Result:
hpack dependency works in osgi containers without wrapping."
8271c8afccf7eb21bf6f994b5f3565f6d55bdee4,"Remove explicit flushes from HTTP2 encoders, decoders & flow-controllers

Motivation:

Allow users of HTTP2 to control when flushes occur so they can optimize network writes.

Modifications:

Removed explicit calls to flush in encoder, decoder & flow-controller
Connection handler now calls flush on read-complete to enable batching writes in response to reads

Result:

Much less flushing occurs for normal HTTP2 request and response patterns."
63a02fc04e6ce45aee38b0437ae0279880e5fe40,"Revamp DNS codec

Motivation:

There are various known issues in netty-codec-dns:

- Message types are not interfaces, which can make it difficult for a
  user to implement his/her own message implementation.
- Some class names and field names do not match with the terms in the
  RFC.
- The support for decoding a DNS record was limited. A user had to
  encode and decode by him/herself.
- The separation of DnsHeader from DnsMessage was unnecessary, although
  it is fine conceptually.
- Buffer leak caused by DnsMessage was difficult to analyze, because the
  leak detector tracks down the underlying ByteBuf rather than the
  DnsMessage itself.
- DnsMessage assumes DNS-over-UDP.
- To send an EDNS message, a user have to create a new DNS record class
  instance unnecessarily.

Modifications:

- Make all message types interfaces and add default implementations
- Rename some classes, properties, and constants to match the RFCs
  - DnsResource -> DnsRecord
  - DnsType -> DnsRecordType
  - and many more
- Remove DnsClass and use an integer to support EDNS better
- Add DnsRecordEncoder/DnsRecordDecoder and their default
  implementations
  - DnsRecord does not require RDATA to be ByteBuf anymore.
  - Add DnsRawRecord as the catch-all record type
- Merge DnsHeader into DnsMessage
- Make ResourceLeakDetector track AbstractDnsMessage
- Remove DnsMessage.sender/recipient properties
  - Wrap DnsMessage with AddressedEnvelope
  - Add DatagramDnsQuest and DatagramDnsResponse for ease of use
  - Rename DnsQueryEncoder to DatagramDnsQueryEncoder
  - Rename DnsResponseDecoder to DatagramDnsResponseDecoder
- Miscellaneous changes
  - Add StringUtil.TAB

Result:

- Cleaner APi
- Can support DNS-over-TCP more easily in the future
- Reduced memory footprint in the default DnsQuery/Response
  implementations
- Better leak tracking for DnsMessages
- Possibility to introduce new DnsRecord types in the future and provide
  full record encoder/decoder implementation.
- No unnecessary instantiation for an EDNS pseudo resource record"
518119d7c0f1577a93449d07d1ce1401c339ed6e,"Fix the flaky SocketSslEchoTest

Motivation:

The SSL peer who did not initiate renegotiation sometimes does not get
the notification for renegotition due to an unknown reason.

Modification:

Until the exact cause is understood, relax the assertions of the flaky
tests.

Result:

Build stability"
abaaa75ddcd2a99fd05ffb70af52437a7d8a47af,"Reduce the memory requirement of heap dump compression

Motivation:

The current heap dump compression preset (9) requires way too much
memory (768 MiB at maximum for dictionary), resulting in OOME in many
cases.

Modifications:

- Use the default preset (6) which uses 8 MiB dictionary.
- Do not fail abruptly even when OOME has been raised.

Result:

More stable heap dump acquisition"
9d70cf33c2ccea42d0fe651be61b2e0a6579fcb1,Fix a test failure in DnsQueryTest
5e0ee6c09522ae573ef03b77dbd609f3db4d15b6,"Fix missing ResourceLeak.close() in AbstractDnsMessage

Motivation:

ResourceLeak.close() must be called when a reference-counted resource is
deallocated, but AbstractDnsMessage.deallocate() forgot to call it.

Modifications:

Call ResourceLeak.close() for the tracked AbstractDnsMessage instances

Result:

Fix the false resource leak warnings"
91e94c956f9a2a949308291d9c3fb0210e9a60bb,"Add more profiles for newer JDK versions

Modifications:

- Add jetty.npn.version.latest and jetty.alpn.version.latest7/8
- Add npn-alpn-7 profile
- Use the *.latest7/8 version properties in alpn-8 and npn-alpn-7
- Add more profiles for newer JDK versions
- Reorder profiles"
a3cea186ce559037b8cf04ea272f09908657e9e3,Have Http2LocalFlowController.consumeBytes indicate whether a WINDOW_UPDATE was written
60a94f0c5fcc5ea34f1ef048732f779b1afa50a2,"Fixing isDone in SimpleChannelPromiseAggregator

Motivation:

The isDone method is currently broken in the aggregator because the doneAllocatingPromises accidentally calls the overridden version of setSuccess, rather than calling the base class version. This causes the base class's version to never be called since allowNotificationEvent will evaluate to false. This means that setSuccess0 will never be set, resulting in isDone always returning false.

Modifications:

Changed setSuccess() to call the base class when appropriate, regardless of the result of allowNotificationEvent.

Result:

isDone now behaves properly for the promise aggregator."
4ae8bdc6ec8d37106f386a7d667a9cd279a8f5d8,"Allowing inbound HTTP/2 frames after sending GOAWAY

Motivation:

If the client closes, a GOWAY is sent with a lastKnownStream of zero (since the remote side never created a stream). If there is still an exchange in progress, inbound frames for streams created by the client will be ignored because our ignore logic doesn't check to see if the stream was created by the remote endpoint. Frames for streams created by the local endpoint should continue to come through after sending GOAWAY.

Modifications:

Changed the decoder's streamCreatedAfterGoAwaySent logic to properly ensure that the stream was created remotely.

Result:

We now propertly process frames received after sending GOAWAY."
cf66edb3a10fa2bb60802e91f14565b551c08f97,"[#3675] Fix livelock issue in MpscLinkedQueue

Motivation:

All read operations should be safe to execute from multiple threads which was not the case and so could produce a livelock.

Modifications:

Modify methods so these are safe to be called from multiple threads.

Result:

No more livelock."
b0a30cbf3952ed3198826706d63b817010e0d90b,"Fix race-condition in SocketSslEchoTest

Motivation:

Because we tried to grab the SSL renegotation future to early we could see test-failures.

Modifications:

Access the future at the correct time.

Result:

No more test-failures."
c94e7f744af5a02016f17c61403399deafc505b9,"DefaultChannelPipeline needs to release objects

Motiviation:
If user events or excpetions reach the tail end of the pipeline they are not released. This could result in buffer leaks.

Motivation:
- Use the ReferenceCountUtil.release to release objects for the userEventTriggered and exceptionCaught methods on DefaultChannelPipeline

Result:
2 less areas where buffer leaks can occur."
5f5cdd10895f6ee4800104d1b95e2960e2b2325e,"Proper handling of epoll_ctl errors

Motivation:

When using epoll_ctl we should respect the return value and do the right thing depending on it.

Modifications:

Adjust java and native code to respect epoll_ctl return values.

Result:

Correct and cleaner code."
d711eb827dbdf75ec2ffada8c409ca629828abd4,"[#3709] Ensure all data is read from socket when EPOLLRDUP is received

Motivation:

When EPOLLRDHUP is received we need to try to read at least one time to ensure
that we read all pending data from the socket. Otherwise we may loose data.

Modifications:

- Ensure we read all data from socket
- Ensure file descriptor is closed on doClose() even if doDeregister() throws an Exception.
- Only handle either EPOLLRDHUP or EPOLLIN as only one is needed to detect connection reset.

Result:

No more data loss on connection reset."
488d9055982eac50a173f13d1001553610d4a553,fix a typo in RecyclableArrayList
52eae1c9b37c5342250d6a39075fd82c10ddf6d6,"Add support for mutual auth when using OpenSslEngine.

Motivation:

Currently mutual auth is not supported when using OpenSslEngine.

Modification:

- Add support to OpenSslClientContext
- Correctly throw SSLHandshakeException when an error during handshake is detected

Result:

Mutual auth can be used with OpenSslEngine"
868eb49cd26ef6e51ced830ce2629692da176002,Only run OpenSslEngineTests if OpenSsl is installed. Related to [#3732]
e276cb796cf6ca3405a8234198cc7a5fd1d3db97,"Correct semantic of LocalChannel.doWrite(...) and remove memory copy

Motivation:

The semantic of LocalChannel.doWrite(...) were a bit off as it notified the ChannelFuture before the data was actual moved to the peer buffer.

Modifications:

- Use our MPSC queue as inbound buffer
- Directly copy to data to the inbound buffer of the peer and either success or fail the promise after each copy.

Result:

Correct semantic and less memory copies."
3c60c9ce32eaddf97d51d46b26142365a8a6d96d,Fix regression introduced by 08e4b076be6402a4f98a2e082b1a292756c570ff.
0ac14b3d3b4ac8953d8f8bb993e8a58a1347c0a5,"Bugfix in channelUDT().

Motivation:

channelUDT() can't handle NioUdtByteRendezvousChannel and NioUdtMessageRendezvousChannel because those are handled by the checking condition of their parent.

Motification:

Reorder checking conditions.

Result:

Bugfixed."
f839f65c1503b9ca16757fb12fa80efefdd861c6,"Do not defer closing of Channel when in flush

Motivation:

Previously, we deferred the closing of the Channel when we were flushing. This is problematic as this means that if the user adds a ChannelFutureListener, that will close the Channel, the closing will not happen until we are done with flushing. This can lead to more data is sent than expected.

Modifications:

- Do not defer closing when in flush

Result:

Correctly respect order of events and closing the Channel ASAP"
57e7571c65f181df97ea7bbab372659a0baedfa1,"Not trigger channelWritabilityChanged if fail messages before close Channel.

Motivation:

We should not trigger channelWritabilityChanged during failing message when we are about to close the Channel as otherwise the use may try again writing even if the Channel is about to get closed.

Modifications:

Add new boolean param to ChannelOutboundBuffer.failFlushed(...) which allows to specify if we should notify or not.

Result:

channelWritabilityChanged is not triggered anymore if we cloe the Channel because of an IOException during write."
e71e40057f7a6adeee8267ce612ba1df22484a66,"Fix possible IllegalStateException caused by closeNotifyTimeout when using SslHandler

Motivation:

In the SslHandler we schedule a timeout at which we close the Channel if a timeout was detected during close_notify. Because this can race with notify the flushFuture we can see an IllegalStateException when the Channel is closed.

Modifications:

- Use a trySuccess() and tryFailure(...) to guard against race.

Result:

No more race."
f6c2c99efcf1ae564bebe0ab8f9f45391bb548f3,[#3740] Add missing parentheses so the fix works as expected.
77d00423108af4e79b74a487da1f9392b8d1aef0,"Allow override of HTTP/2 graceful connection shutdown.

Motivation:

Currently the graceful shutdown of the HTTP/2 connection waits until there are no active streams. There may be use cases that buffer stream creation (due to limits imposed by MAX_CONCURRENT_STREAMS), in which case they may still want those streams to complete before closing.

Modifications:

Added a isGracefulShutdownComplete method to Http2ConnectionHandler, which can be overridden by a subclass.

Result:

Graceful shutdown logic can be overridden."
c85b770ac4d3d03af3b603af89c841ebf6c4d082,"Remove duplicated code in AcceptorChannel classes.

Motivation:

NioUdtByteAcceptorChannel and NioUdtMessageAcceptorChannel have almost same code.
For maintainability, it's better to remove it.

Motification:

- Pulled a member(METADATA) and methods(doReadMessage() and metadata() up.
- Added newConnectorChannel().

Result:

Cleaner code."
97d871a7553a01384b43df855dccdda5205ae77a,"Validate cookie name and value characters Motivation:

RFC6265 specifies which characters are allowed in a cookie name and value.

Netty is currently too lax, which can used for HttpOnly escaping.

Modification:

In ServerCookieDecoder: discard cookie key-value pairs that contain invalid characters.
In ClientCookieEncoder: throw an exception when trying to encode cookies with invalid characters.

Result:

The problem described in the motivation section is fixed."
79c17cf1fdb70476e32affa2c0a9bed6a88ff7c6,"ByteBufUtil use IndexOfProcessor to find occurrence.

Motivation:
The way of firstIndexOf and lastIndexOf iterating the ByteBuf is similar to forEachByte and forEachByteDesc, but have many range checks.
Modifications:
Use forEachByte and a IndexOfProcessor to find occurrence.
Result:
eliminate range checks"
f963401d422d6409c817755bf79880567864e223,"Allow rejection of remote initiated renegotiation

Motivation:

To prevent from DOS attacks it can be useful to disable remote initiated renegotiation.

Modifications:

Add new flag to OpenSslContext that can be used to disable it
Adding a testcase

Result:

Remote initiated renegotion requests can be disabled now."
bace371ca5c84760f0f644ba77212ec7aa9a9cc7,"Addressing a few more comments from #3749.

Motivation:

There were a few outstanding comments that were left unaddressed after committing the changes for #3749.

Modifications:

Changes to Http2ConnectionHandler.goAway():

- Retaining the debugData buffer, rather than always converting it to a string immediately.
- Changing log level for sending a GOAWAY with error to debug.

Result:

Remaining comments from #3749 are addressed."
74627483d7bdcae3130b2ba173e08ec5f2658377,"[#3724] HTTP/2 Headers END_STREAM results in RST_STREAM

Motivation:
If headers are sent on a stream that does not yet exist and the END_STREAM flag is set we will send a RST_STREAM frame. We should send the HEADERS frame and no RST_STREAM.

Modifications:
DefaultHttp2RemoteFlowController should allow frames to be sent if stream is created in the 'half closed (local)' state.

Result:
We can send HEADERS frame with the END_STREAM flag sent without sending a RST_STREAM frame."
871ce43b1f431536e08a36d420875494ef3e9451,[maven-release-plugin] prepare release netty-4.1.0.Beta5
f23b7b4efdba5b60af5b9fdf4ab1680b4db12492,[maven-release-plugin] prepare for next development iteration
2927cdd504332b74e20eb943e0ea92d123d2d31c,"Swap to SslContextBuilder in examples

Motivation:

Using factory methods of SslContext is deprecated. Code should be using
SslContextBuilder instead. This would have been done when the old
methods were deprecated, but memcache and http2 examples didn't exist in
the 4.0 branch which the PR was against.

Modifications:

Swap to the new construction pattern.

Result:

No more deprecated warnings during build of examples. Users are
instructed to use the new pattern."
2dd59e44b7d57432bff29661a7a3ee648d5f939e,"ALPN/NPN Examples Not using failure behavior compatible with all SslProviders

Motivation:
Examples that are using ALPN/NPN are using a failure mode which is not supported by the JDK SslProvider. The examples fail to run and throw an exception if the JDK SslProvider is used.

Modifications:
- Use SelectorFailureBehavior.NO_ADVERTISE
- Use SelectedListenerFailureBehavior.ACCEPT

Result:
Examples can be run with both OpenSsl and JDK SslProviders."
a2cd01b32bffb6fe33d34362670c8bdc4ff9974b,"ByteString test failure bug

Motivation:
There is an error in the ByteString test logic which is resulting in test failures.

Modifications:
- Fix the loop iteration to use the loop iteration variable instead of a fixed index.

Result:
Tests are less buggy."
bb5f9fe078e7d586d04d5858792f10e2fdc20ec3,"Scoring loopback addresses as 0 in DefaultChannelId

Motivation:

As described in #3490, [compareAddresses](https://github.com/netty/netty/blob/master/transport/src/main/java/io/netty/channel/DefaultChannelId.java#L182)  seems to allow loopback addresses to score high, disallowing replacing the loopback address.

Modifications:

Changed [scoreAddress](https://github.com/netty/netty/blob/master/transport/src/main/java/io/netty/channel/DefaultChannelId.java#L283) to score loopback addresses as 0.

Result:

Fixes #3490"
61dced3dcd19513c3b4785c2d40e3c8051c74ab3,"Proposal to fix issue #3768 (3.10)

Motivations:
When using HttpPostRequestEncoder and trying to set an attribute if a
charset is defined, currenlty implicit Charset.toStrng() is used, given
wrong format.
As in Android for UTF-16 = ""com.ibm.icu4jni.charset.CharsetICU[UTF-16]"".

Modifications:
Each time charset is used to be printed as its name, charset.name() is
used to get the canonical name.

Result:
Now get ""UTF-16"" instead.
(3.10 version)"
cbbcdaa249b95c35a18bc2f64eeda44258943056,"Update compression dependencies

Motivation:

New versions of compression libraries, which improve their performance and fix some bugs.

Modifications:

Updated versions of jzlib, compress-lzf, lz4 and commons-compres libraries.

Result:

Better stability and performance of compression codecs."
864f196c672036015e9ab816a06189913e7d90ce,"Add missing SslContextBuilder.forServer(KeyManagerFactory)

Motivation:

keyManager() is required on server-side, and so there is a forServer()
method for each override of keyManager(). However, one of the
forServer() overrides was missing, which meant that if you wanted to use
a KeyManagerFactory you were forced to provide garbage configuration
just to get past null checks.

Modifications:

Add missing override.

Result:

No hacks to use SslContextBuilder on server-side with KeyManagerFactory.
Resolves #3775"
f6299d942c209a37046f9c02f5688a1a579d6dda,"Minor ClientCookieDecoder improvements

Motivation:

* Path attribute should be null, not empty String, if it's passed as ""Path="".
* Only extract attribute value when the name is recognized.
* Only extract Expires attribute value String if MaxAge is undefined as it has precedence.

Modification:

Modify ClientCookieDecoder.
Add ""testIgnoreEmptyPath"" test in ClientCookieDecoderTest.

Result:

More idyomatic Path behavior (like Domain).
Minor performance improvement in some corner cases."
fd22af837725fb2455f6dc72ea897bf8b25250e6,"HTTP/2 GOAWAY Reference Count Issue

Motiviation:
The Http2ConnectionHandler is incrementing the reference count in the goAway method for the debugData buffer after it has already been sent and maybe consumed. This may result in an IllegalRefCountException to be thrown. The unit tests also encounter buffer leaks because they have not been updated to invoke the listener which releases the buffer in the goAway method.

Modifications:
- The retain() call should be before the frameWriter().writeGoAway(...) call
- The unit tests which call goAway must also invoke the operationComplete(..) method for the listener.

Result:
No IllegalRefCountException. Less buffer leaks in tests."
b9342577963833080a0009249a1813e8e9e3664c,"[#3784] Support hostname verification when using OpenSSLEngine

Motivation:

At the moment hostname verification is not supported with OpenSSLEngine.

Modifications:

- Allow to create OpenSslEngine with peerHost and peerPort informations.
- Respect endPointIdentificationAlgorithm and algorithmConstraints when set and get SSLParamaters.

Result:

hostname verification is supported now."
9bf636076a57aa3c58e6ca7a4a465bb0268d944a,Fix typo in FingerprintTrustManagerFactory docs
04c0d77287d861940d3cd5ae8b672e93ad49e97a,"HTTP/2 Server Example No Response for HTTP/1.x Only Clients

Motiviation:
The HTTP/2 server example just hangs when a client is using only HTTP with no ALPN or upgrade attempts. We should still send some kind of response.

Modifications:
The HTTP/2 server example has a special handler to detect no upgrade HTTP clients and generate a response.

Result:
Clients that just use HTTP with no upgrade will no appear hung when interacting with the HTTP/2 server example."
c6d61f9b43d89dc280b6089dee674daa8c180146,"Fix merge issue introduced by 04c0d77

Motiviation:
Interface changes between master and 4.1 branch resulted in a compile failure.

Modifications:
- change messageReceived to channelRead0

Result:
No more compile error."
781a85520c8d3afdba651d39691872f8c9b6c01d,"Add HTTP/2 Netty tiles example

Motivation:

Adding an example that showcases Netty’s HTTP/2 codec and that is
slightly more complex than the existing hello-world example. It is
based on the Gopher tiles example available here:
https://http2.golang.org/gophertiles?latency=0

Modifications:

Moved current http2 example to http2/helloworld.
Added http2 tiles example under http2/tiles.

Result:

A Netty tiles example is available."
92bfeeca1bdc71cada715993f669e2c1a5693b74,"No need to release lock and acquire again when allocate normal size.

Motiviation:

When tried to allocate tiny and small sized and failed to serve these out of the PoolSubPage we exit the synchronization
block just to enter it again when call allocateNormal(...).

Modification:

Not exit the synchronized block until allocateNormal(...) is done.

Result:

Better performance."
9d568586dbb72ec32e3fb04ed86c706808bedaed,"Reset markers when obtain PooledByteBuf.

Motivation:

When allocate a PooledByteBuf we need to ensure to also reset the markers for the readerIndex and writerIndex.

Modifications:

- Correct reset the markers
- Add test-case for it

Result:

Correctly reset markers."
33e443e71a463f57406eef311792512584a98b4d,"Clarify ByteBuf.duplicate() semantics.

Motivation:

From the javadocs of ByteBuf.duplicate() it is not clear if the reader and writer marks will be duplicated.

Modifications:

Add sentence to clarify that marks will not be duplicated.

Result:

Clear semantics."
88b8558ec8da538f66293b51c4ed9103e584fc02,"Add PooledSlicedByteBuf and PooledDuplicatedByteBuf

Motivation:

At the moment when calling slice(...) or duplicate(...) on a Pooled*ByteBuf a new SlicedByteBuf or DuplicatedByteBuf. This can create a lot of GC.

Modifications:

Add PooledSlicedByteBuf and PooledDuplicatedByteBuf which will be used when a PooledByteBuf is used.

Result:

Less GC."
b034cf18f9f0696929fb52dcfe42b851e2560528,"Fixing logging of ping acks in Http2OutboundFrameLogger

Motivation:

The Http2OutboundFrameLogger logs all PING frames as not acks.

Modifications:

Changed the logger to correctly log PING acks.

Result:

PING acks are logged correctly."
271af7c624cf1789a0b13fbf245437c4bf256c16,"Expose metrics for PooledByteBufAllocator

Motivation:

The PooledByteBufAllocator is more or less a black-box atm. We need to expose some metrics to allow the user to get a better idea how to tune it.

Modifications:

- Expose different metrics via PooledByteBufAllocator
- Add *Metrics interfaces

Result:

It is now easy to gather metrics and detail about the PooledByteBufAllocator and so get a better understanding about resource-usage etc."
f3dcad32306aeb953d47f8ca02ef4ac1744d0436,"Do not call System.nanoTime() in ReadTimeoutHandler.channelRead()

Motivation:

We mitigate callouts to System.nanoTime() in SingleThreadEventExecutor
as it is 'relatively expensive'. On a modern system, tak translates to
about 20ns per call. With channelReadComplete() we can side-step this in
channelRead().

Modifications:

Introduce a boolean flag, which indicates that a read batch is currently
on-going, which acts as a flush guard for lastReadTime. Update
lastReadTime in channelReadComplete() just before setting the flag to
false. We set the flag to true in channelRead().

The periodic task examines the flag, and if it observes it to be true,
it will reschedule the task for the full duration. If it observes as
false, it will read lastReadTime and adjust the delay accordingly.

Result:

ReadTimeoutHandler calls System.nanoTime() only once per read batch."
1a5254b5976808a1c394e4bc541d49c434f3fe0b,QueryStringDecoder's javadoc fix
e903979a2878b474f2ef1425bf169fb0ddda2f91,"Not try to write more then Integer.MAX_VALUE / SSIZE_MAX via writev

Motivation:

When trying to write more then Integer.MAX_VALUE / SSIZE_MAX via writev(...) the OS may return EINVAL depending on the kernel or the actual OS (bsd / osx always return EINVAL). This will trigger an IOException.

Modifications:

Never try to write more then Integer.MAX_VALUE / SSIZE_MAX when using writev.

Result:

No more IOException when write more data then Integer.MAX_VALUE / SSIZE_MAX via writev."
c20b38378b7aa5b7fc908c67799f443aa09ecdbb,"Allow manual configuration of initial HTTP/2 SETTINGS frame.

Motivation:

There is currently no good way to configure the initial SETTINGS frame. The individual settings can be configured on the various components, but doing this bypasses the proper setting update logic in the encoder.

Modifications:

Updated Http2ConnectionHandler to optionally take initial settings in the constructor. If not provided, it will default to current behavior.

Result:

Easy manual configuration of initial settings."
e4af176be7e5049b5ae55525cb50bedf1437889b,"Upgrading Jetty alpn-api version

Motivation:

Discussion is in https://github.com/jetty-project/jetty-alpn/issues/8. The new API allows protocol negotiation to properly throw SSLHandshakeException.

Modifications:

Updated the parent pom.xml with the new version.

Result:

Upgraded alpn-api now allows throwing SSLHandshakeException."
4877fffa0a591bdb6fe21af6192986b74102d17d,"SCTP echo client/server multi-homing examples

Motivation:
There are no Netty SCTP examples on multi-homing.

Modifications:
- Added new example classes based on echo client/server example

Result:
Better documentation"
9d675def8109cef350e2786ae1b464a9c946a2e0,"Only call System.nanoTime() if no read batch is ongoing. Related to [#3808]

Motivation:

[#3808] introduced some improvements to reduce the calls to System.nanoTime() but missed one possible optimization.

Modifications:

Only call System.nanoTime() if no reading patch is in process.

Result:

Less System.nanoTime() calls."
ad7f033c061e6d8fbabec6171e52a658310e21df,"Allow writing with void promise if IdleStateHandler is configured in pipeline.

Motivation:

Allow writing with void promise if IdleStateHandler is configured in the pipeline for read timeout events.

Modifications:

Better performance.

Result:

No more ChannelFutureListeners are created if IdleStateHandler is only configured for read timeouts allowing for writing to the channel with void promise."
08d234cdf0ca7a413e8e8eee763e6b0dc25625b0,[#3805] Fix incorrect javadoc in PlatformDependent
757671b7cc494cdd25e50c3a3d94c27f83bb201c,"Support empty http responses when using compression

Motivation:

Found a bug in that netty would generate a 20 byte body when returing a response
to an HTTP HEAD. the 20 bytes seems to be related to the compression footer.

RFC2616, section 9.4 states that responses to an HTTP HEAD MUST not return a message
body in the response.

Netty's own client implementation expected an empty response. The extra bytes lead to a
2nd response with an error decoder result:
java.lang.IllegalArgumentException: invalid version format: 14

Modifications:

Track the HTTP request method. When processing the response we determine if the response
is passthru unnchanged. This decision now takes into account the request method and passthru
responses related to HTTP HEAD requests.

Result:

Netty's http client works and better RFC conformance."
0f28bdf7bba0cb2978459caf050ccb85727f650d,"Update HTTP/2 to RFCs

Motivation:
HTTP/2 RFC 7540 has been released.

Modifications:
- Make changes RFC 7540 introduced since draft 17.

Result:
HTTP/2 RFC 7540 compliant code"
d5f1dc66aa6e7290d3c1e0b8f5982ad553e2b15a,"Consistent use of SSLHandshakeException for ALPN

Motiviation:
The OpenSSL engine uses SSLHandshakeException in the event of failures that occur during the handshake process. The alpn-boot project's getSSLException will also map the no_application_protocol to a SSLHandshakeException exception. We should be consistent and use SSLHandshakeException for handshake failure events.

Modifications:
-Update JdkAlpnSslEngine to propagate an SSLHandshakeException in the event of a failure.

Result:
Consistent usage of SSLHandshakeException during a handshake failure event."
dce0dd9b78106e26e77d83e89bc5ad76a64cc65f,"[#3654] No need to hold lock while destroy a chunk

Motiviation:

At the moment we sometimes hold the lock on the PoolArena during destroy a PoolChunk. This is not needed.

Modification:

- Ensure we not hold the lock during destroy a PoolChunk
- Move all synchronized usage in PoolArena
- Cleanup

Result:

Less condition."
ab1bb9136b384e4722feebe2f0e9377cd88fd39a,"[#3654] Synchronize on PoolSubpage head when allocate / free PoolSubpages

Motivation:

Currently we hold a lock on the PoolArena when we allocate / free PoolSubpages, which is wasteful as this also affects ""normal"" allocations. The same is true vice-verse.

Modifications:

Ensure we synchronize on the head of the PoolSubPages pool. This is done per size and so it is possible to concurrently allocate / deallocate PoolSubPages with different sizes, and also normal allocations.

Result:

Less condition and so faster allocation/deallocation.

Before this commit:
xxx:~/wrk $ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    17.61ms   29.52ms 689.73ms   97.27%
    Req/Sec   278.93k    41.97k  351.04k    84.83%
  530527460 requests in 2.00m, 71.64GB read
Requests/sec: 4422226.13
Transfer/sec:    611.52MB

After this commit:
xxx:~/wrk $ ./wrk -H 'Connection: keep-alive' -d 120 -c 256 -t 16 -s scripts/pipeline-many.lua  http://xxx:8080/plaintext
Running 2m test @ http://xxx:8080/plaintext
  16 threads and 256 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency    15.85ms   24.50ms 681.61ms   97.42%
    Req/Sec   287.14k    38.39k  360.33k    85.88%
  547902773 requests in 2.00m, 73.99GB read
Requests/sec: 4567066.11
Transfer/sec:    631.55MB

This is reproducable every time."
f2ba221e7e70fb7c1bb63d8aa67bdd21aa106886,"[#3785] Correctly handle connection refused with native transport

Motivation:

Due a bug we not correctly handled connection refused errors and so failed the connect promise with the wrong exception.
Beside this we some times even triggered fireChannelActive() which is not correct.

Modifications:

- Add testcase
- correctly detect connect errors

Result:

Correct and consistent handling."
6fce3b79c3225e84f2be50df370198c39da5140c,"Do not try to init TrustManagerFactory if trustCertChainFile is null.

Motivation:

We called TrustManagerFactory.init(...) even when the trustCertChainFile is null. This could lead to exceptions during the handshake.

Modifications:

Correctly only call TurstManagerFactory.init() if trustCertcChainFail is not null.

Result:

Correct behavior."
bac2e3a6d2398e976f47aac0501331d364ed8222,"Reduce calls to System.nanoTime() and object creation in IdleStateHandler. Related to [#3808]

Motivation:

Calling System.nanoTime() for each channelRead(...) is very expensive. See [#3808] for more detailed description.
Also we always do extra work for each write and read even if read or write idle states should not be handled.

Modifications:

- Move System.nanoTime() call to channelReadComplete(...).
- Reuse ChannelFutureListener for writes
- Only add ChannelFutureListener to writes if write and all idle states should be handled.
- Only call System.nanoTime() for reads if idle state events for read and all states should be handled.

Result:

Less overhead when using the IdleStateHandler."
81fee66c78b6afad1d92647669c67bcf44f7cbdf,"Let PoolThreadCache work even if allocation and deallocation Thread are different

Motivation:

PoolThreadCache did only cache allocations if the allocation and deallocation Thread were the same. This is not optimal as often people write from differen thread then the actual EventLoop thread.

Modification:

- Add MpscArrayQueue which was forked from jctools and lightly modified.
- Use MpscArrayQueue for caches and always add buffer back to the cache that belongs to the allocation thread.

Result:

ThreadPoolCache is now also usable and so gives performance improvements when allocation and deallocation thread are different.

Performance when using same thread for allocation and deallocation is noticable worse then before."
9f5a3e553cb00d1763483c7194ba4c455ad34eeb,Fix regression introduced by f765053ae740e300a6b696840d7dfe5de32afeb3 by use Entry after it is recycled
6aa9636e0f45d3dd758d63518c11553767b18001,"Remove the verbose:gc flag from the build

Motivation:

When a faulty never-ending test keeps producing a lot of garbage doing
nothing but generating CPU load, our CI fails to detect the stalled
build, because it determines the 'inactivity time' from console
activity and GC keeps producing console output.

Modifications:

Remove the -verbose:gc flag from pom.xml

Result:

Stalled builds are terminated by our CI server."
2a848ce1c94100e9fd3e063740d66187f17a3e8c,Mention correct order in SimplechannelPool javadocs
70e3d17620061767ce06f69e11a370fb61d69d08,"fixing small leak on exception on the transport-epoll-native allocation

Motivation:

the JNI function ThrowNew won't release any allocated memory.
The method exceptionMessage is allocating a new string concatenating 2 constant strings
What is creating a small leak in case of these exceptions are happening.

Modifications:

Added new methods that will use exceptionMessage and free resources accordingly.
I am also removing the inline definition on these methods as they could be reused by
other added modules (e.g. libaio which should be coming soon)

Result:

No more leaks in case of failures."
c7b164b4090b6675c9efd9f316e339a6a55d38c8,"Fix sporadic assertion failure in SocketSslEchoTest

Motivation:

SocketSslEchoTest.testSslEcho() has a race condition where a renegotiation future can be done before:

    assertThat(renegoFuture.isDone(), is(false));

Modifications:

Remove the offending assertion.

Result:

More build stability"
5f59591a729e31331aafb8a0a40cb8892ef3f1df,"Fix sporadic assertion failure in SingleThreadEventLoopTest

Motivation:

SingleThreadEventLoopTest.testScheduleTaskAtFixedRate() fails often due to:

- too little tolerance
- incorrect assertion (it compares only with the previous timestamp)

Modifications:

- Increase the timestamp difference tolerance from 10ms to 20ms
- Improve the timestamp assertion so that the comparison is performed against the first recorded timestamp
- Misc: Fix broken Javadoc tag

Result:

More build stability"
4d79be44efd9de6e582712033fc1f12d6bf2862b,"Fix sporadic failures in DatagramUnicastTest

Motivation:

DatagramUnitcastTest sometimes fails with BindException for an unknown reason.

Modifications:

Retry up to 3 times with a new free port when bind() fails with BindException

Result:

More build stability"
5121fba466a123ba3b8fc04ff164022e5c3c22a5,"TCP_NOTSENT_LOWAT socket option support

Motiviation:
Linux provides the TCP_NOTSENT_LOWAT socket option. This can be used to control how much unsent data is queued in the tcp kernel buffers. This can be important when application level protocols (SPDY, HTTP/2) have their own priority mechanism and don't want data queued in the kernel.

Modifications:
- The epoll module will have an additional socket option TCP_NOTSENT_LOWAT
- There will be JNI methods to control the underlying linux socket option mechanism

Result:
Linux EPOLL module exposes the TCP_NOTSENT_LOWAT socket option."
0bd6acc5d81672d5d05ee6214b7c5d990f7588b9,Fix typo
3c432b5a1965cab38e4988a8f4484bf182cd8811,"TCP_NOTSENT_LOWAT older kernel compatibility

Motiviation:
TCP_NOTSENT_LOWAT is only supported in linux kernel 3.12 or newer. The addition of this socket option prevents older kernels from building.

Modifications:
- Conditionally define TCP_NOTSENT_LOWAT if it is not defined

Result:
Kernels older than 3.12 can still compile the EPOLL module."
09ecc34924ec26ee603bda5a45bb7c7b0b6057f4,"Linux EPOLL Channel Configuration test unsupported options

Motivation:
The unit tests should not fail due to using a channel option which is not supported by the underlying kernel.

Modifications:
- Ignore RuntimeExceptions which are thrown by JNI code when setsockopt or getsockopt fails.

Result:
Unit tests pass if socket option is not supported by kernel."
311532feb01d0c635684f358060fe562ca2d8b01,"Fix IllegalReferenceCountException in DnsNameResolver

Related: #3797

Motivation:

There is a race condition where DnsNameResolver.query() can attempt to
increase the reference count of the DNS response which was released
already by other thread.

Modifications:

- Make DnsCacheEntry a top-level class for clear access control
- Use 'synchronized' to avoid the race condition
  - Add DnsCacheEntry.retainedResponse() to make sure that the response
    is never released while it is retained
  - Make retainedResponse() return null when the response has been
    released already, so that DnsNameResolver.query() knows that the
    cached entry has been released

Result:

The forementioned race condition has been fixed."
5d11be58ea28c8832a2572acdbef7f467ccc19c0,"More meaningful assertion failure message

We see sporadic failure in EpollSocketConnectionAttemptTest. Generate
more useful failure message using hamcrest to know more."
ed3d26cf7d2ab0ddd4a7c5729a0a6ced60240780,"[#3837] Null out ByteBuffer[] array once done

Motivation:

the ByteBuffer[] that we keep in the ThreadLocal are never nulled out which can lead to have ByteBuffer instances sit there forever.
This is even a bigger problem if nioBuffer() of ByteBuffer returns a new ByteBuffer that can not be destroyed by ByteBuffer.release().

Modifications:

Null out ByteBuffer array after processing.

Result:

No more dangling references after done."
9bcfef0f10694260a0c066278858b1c528f09ee0,"Fix incoherence in WebSocket example

Motivation:

The logic in the current websocket example is confusing and misleading

Modifications:

Remove occurrences of ""http"" and ""https"" and replace them with ""ws"" and ""wss""

Result:

The example code is now coherent and is easier to understand for a new user."
afb46b926f9df6f1da91cbd011fa8f43d1566bb8,"Improve the API design of Http2OrHttpChooser and SpdyOrHttpChooser

Related: #3641 and #3813

Motivation:

When setting up an HTTP/1 or HTTP/2 (or SPDY) pipeline, a user usually
ends up with adding arbitrary set of handlers.

Http2OrHttpChooser and SpdyOrHttpChooser have two abstract methods
(create*Handler()) that expect a user to return a single handler, and
also have add*Handlers() methods that add the handler returned by
create*Handler() to the pipeline as well as the pre-defined set of
handlers.

The problem is, some users (read: I) don't need all of them or the
user wants to add more than one handler. For example, take a look at
io.netty.example.http2.tiles.Http2OrHttpHandler, which works around
this issue by overriding addHttp2Handlers() and making
createHttp2RequestHandler() a no-op.

Modifications:

- Replace add*Handlers() and create*Handler() with configure*()
- Rename getProtocol() to selectProtocol() to make what it does clear
- Provide the default implementation of selectProtocol()
- Remove SelectedProtocol.UNKNOWN and use null instead, because
  'UNKNOWN' is not a protocol
- Proper exception handling in the *OrHttpChooser so that the
  exception is logged and the connection is closed when failed to
  select a protocol
- Make SpdyClient example always use SSL. It was always using SSL
  anyway.
- Implement SslHandshakeCompletionEvent.toString() for debuggability
- Remove an orphaned class: JettyNpnSslSession
- Add SslHandler.applicationProtocol() to get the name of the
  application protocol
  - SSLSession.getProtocol() now returns transport-layer protocol name
    only, so that it conforms to its contract.

Result:

- *OrHttpChooser have better API.
- *OrHttpChooser handle protocol selection failure properly.
- SSLSession.getProtocol() now conforms to its contract.
- SpdyClient example works with SpdyServer example out of the box"
077508949638bd90c11d81ec1ce3b0ab257e5eb6,"Replace SpdyOrHttpChooser and Http2OrHttpChooser with ApplicationProtocolNegotiationHandler

Motivation:

SpdyOrHttpChooser and Http2OrHttpChooser duplicate fair amount code with each other.

Modification:

- Replace SpdyOrHttpChooser and Http2OrHttpChooser with ApplicationProtocolNegotiationHandler
- Add ApplicationProtocolNames to define the known application-level protocol names

Result:

- Less code duplication
- A user can perform dynamic pipeline configuration that follows ALPN/NPN for any protocols."
2b0dfc4e808639e09d427b6df755d25b95230619,"Expose SSL_CTX and SSL pointers

Motivation:

For advanced use-cases it an be helpful to be able to directly access the SSL_CTX and SSL pointers of the underlying openssl objects. This for example allows to register custom C callbacks.

Modifications:

- Expose the SSL_CTX and SSL pointers
- Cleanup the shutdown code

Result:

It's now possible to obtain the c pointes and set native callbacks."
d2615ab532b3d149df175d142bbb423947b1a05b,"Porting BufferingHttp2ConnectionEncoder from gRPC

Motivation:

gRPC's BufferingHttp2ConnectionEncoder is a generic utility that simplifies client-side applications that want to allow stream creation without worrying about violating the SETTINGS_MAX_CONCURRENT_STREAMS limit.  Since it's not gRPC-specific it makes sense to move it into Netty proper.

Modifications:

Adding the BufferingHttp2ConnectionEncoder and it's unit test.

Result:

Netty now supports buffering stream creation."
49643fb5b12fc8426cc8d5cf98adb55687961770,"[#3848] Respect EPOLLERR event

Motivation:

Some glibc/kernel versions will trigger an EPOLLERR event to notify
about failed connect and not an EPOLLOUT. Also EPOLLERR may be triggered
when a connection is broke.

Modification:

React on EPOLLERR like if an EPOLLOUT / EPOLLIN was received, this will work in
all cases as we handle errors in EPOLLOUT / EPOLLIN anyway.

Result:

Correctly detect errors."
6f9eb2cd34de593710fe1a0535575e96ffe45367,"Update javadocs to highlight that derived buffers will not increment the reference count.

Motivation:

We not explain the derived buffers will not retain the parent buffer.

Modifications:

Add docs.

Result:

Correctly document behaviour"
a485ae68dce633a3f2da3ad7e31501561cb3d352,"Guard against race when calling SslHandler.handshakeFuture().sync()

Motivation:

If the handlerAdded(...) callback was not called, the checkDeadLock() of the handshakeFuture will produce an IllegalStateException.
This was first reported at https://github.com/impossibl/pgjdbc-ng/issues/168 .

Modifications:

Pass deadlock check if ctx is null

Result:

No more race and so IllegalStateException."
cf54c042412a5945711799d5fe84fe519cdee2f2,"Correctly respect readerIndex of buffer when dumping.

Motivation:

The current dumping code does not respect the readerIndex and so logs incorrect.

Modifications:

Respect readerIndex of ByteBuf

Result:

Correctly log content of buffer."
e9a2cac16df7cd6911b7032deee8bdb3ec3e3022,"[#3869] Add unit test to ensure adding null header values is not allowed.

Motivation:

We need to ensure we never allow to have null values set on headers, otherwise we will see a NPE during encoding them.

Modifications:

Add unit test that shows we correctly handle null values.

Result:

Verify correct implementation."
49b0d6ed07c50aed9c72076b0c299bdb03b0631f,"HTTP/2 ConnectionHandler close cleanup

Motiviation:
The connection handler stream close operation is unconditionally adding a listener object to a future. We may not have to add a listener at all because the future has already been completed.

Modifications:
- If the future is done, directly invoke the logic without creating/adding a new listener.

Result:
No need to create/add listener if the future is already done in close logic."
5c22a015224d1419e97400b4cff9b592305f9e21,"HTTP/2 shutdown cleanup miss

Motiviation:
https://github.com/netty/netty/pull/3865 was merged from a machine with old code. A test case that was updates was not merged.

Modifications:
- Merge the missing test case updates

Result:
Test case no longer fails."
4570f30dd9f9a4dbc17dd58347b4a6d2c343f17a,"[#3798] Extract dump method to ByteBufUtil

Motivation:

Dumping the content of a ByteBuf in a hex format is very useful.

Modifications:

Move code into ByteBufUtil so its easy to reuse.

Result:

Easy to reuse dumping code."
e72d04509f7d04d2a0a0e96cc5555728ac03aa29,"Fix a buffer leak in StreamBufferingEncoderTest

Related: #3871

Motivation:

StreamBufferingEncoderTest does not release when writeGoAway() is
called.

Modifications:

Release the buffer in mock object arguments

Result:

No buffer leak"
73d79a4b3baf0bad2f04bc8cc60573745befbb15,"Do not use hard-coded handler names in HTTP/2

Motivation:

Our HTTP/2 implementation sometimes uses hard-coded handler names when
adding/removing a handler to/from a pipeline. It's not really a good
idea because it can easily result in name clashes. Unless there is a
good reason, we need to use the reference to the handlers

Modifications:

- Allow null as a handler name for Http2Client/ServerUpgradeCodec
  - Use null as the default upgrade handler name
- Do not use handler name strings in some test cases and examples

Result:

Fixes #3815"
950da2eae1471c436424555f1d79bc08d3ba38c3,"Allow MessageAggregator to disallow non-empty content

Motivation:

A user sometimes just want the aggregated message has no content at
all. (e.g. A user only wants HTTP GET requests.)

Modifications:

- Do not raise IllegalArgumentException even if a user specified
  the maxContentLength of 0

Result:

A user can disallow a message with non-empty content."
0ca65f13739560fb580c0c4e40952f65c609651c,"Lazily instantiate HttpServerUpgradeHandler.UpgradeCodec

Related: #3814

Motivation:

To implement the support for an upgrade from cleartext HTTP/1.1
connection to cleartext HTTP/2 (h2c) connection, a user usually uses
HttpServerUpgradeHandler.

It does its job, but it requires a user to instantiate the UpgradeCodecs
for all supported protocols upfront. It means redundancy for the
connections that are not upgraded.

Modifications:

- Change the constructor of HttpServerUpgradeHandler
  - Accept UpgraceCodecFactory instead of UpgradeCodecs
- The default constructor of HttpServerUpgradeHandler sets the
  maxContentLength to 0 now, which shouldn't be a problem because a
  usual upgrade request is a GET.
- Update the examples accordingly

Result:

A user can instantiate Http2ServerUpgradeCodec and its related objects
(Http2Connection, Http2FrameReader/Writer, Http2FrameListener, etc) only
when necessary."
b169a76d462f346900c8d87f0ff5a65ce2d0bf5d,"Fix the failing HttpObjectAggregatorTest.testInvalidConstructorUsage()

Related: 950da2eae1471c436424555f1d79bc08d3ba38c3"
d1b7f990f22e1792f514d0ed752bec461272e6b6,"Not skip first cert when using OpenSslClientContext

Motivation:

Due a copy and paste error we incorrectly skipped the first cert in the keyCertChainFile when using OpenSslClientContext.

Modifications:

Correctly not skip the first cert.

Result:

The certificate chain is correctly setup when using OpenSslClientContext."
43a558b9e195be2fa795d5d85ed0f44a3c56d1dc,"ChannelOutboundBuffer bytes before writable accessor

Motiviation:
There are currently no accessors which provide visbility into how many bytes must be written in order for a writability change to occur. This feature would be useful for codecs which intent to control how many bytes are queued at any given time.

Modifications:
- add bytesBeforeUnWritable() which will give the number of bytes before the buffer (and associated channel) transitions to not writable
- add bytesBeforeWritable() which will give the number of bytes that must be drained from the queue until the channel becomes writable.

Result:
More visibility into writability for the ChannelOutboundBuffer."
3a4d64bb8404f59861acddec954b4ed3aa02f97b,"Allow to receive a ChannelGroupFuture that will be notified once all Channels are closed.

Motivation:

It's useful to be able to be notified once all Channels that are part of the ChannelGroup are notified. This can for example be useful if you want to do a graceful shutdown.

Modifications:

- Add ChannelGroup.newCloseFuture(...) which will be notified once all Channels are notified that are part of the ChannelGroup at the time of calling.

Result:

Easier to be notified once all Channels within a ChannelGroup are closed."
caa15050204c9757f2a3e34511cf1d9d8447cd9c,"Get uploaded size while upload is in progress

Proposal to fix issue #3636

Motivations:
Currently, while adding the next buffers to the decoder
(`decoder.offer()`), there is no way to access to the current HTTP
object being decoded since it can only be available currently once fully
decoded by `decoder.hasNext()`.
Some could want to know the progression on the overall transfer but also
per HTTP object.
While overall progression could be done using (if available) the global
Content-Length of the request and taking into account each HttpContent
size, the per HttpData object progression is unknown.

Modifications:
1) For HTTP object, `AbstractHttpData` has 2 protected properties named
`definedSize` and `size`, respectively the supposely final size and the
current (decoded until now) size.
This provides a new method `definedSize()` to get the current value for
`definedSize`. The `size` attribute is reachable by the `length()`
method.

Note however there are 2 different ways that currently managed the
`definedSize`:
a) `Attribute`: it is reset each time the value is less than actual
(when a buffer is added, the value is increased) since the final length
is not known (no Content-Length)
b) `FileUpload`: it is set at startup from the lengh provided

So these differences could lead in wrong perception;
a) `Attribute`: definedSize = size always
b) `FileUpload`: definedSize >= size always

Therefore the comment tries to explain clearly the different behaviors.

2) In the InterfaceHttpPostRequestDecoder (and the derived classes), I
add a new method: `decoder.currentPartialHttpData()` which will return a
`InterfaceHttpData` (if any) as the current `Attribute` or `FileUpload`
(the 2 generic types), which will allow then the programmer to check
according to the real type (instance of) the 2 methods `definedSize()`
and `length()`.

This method check if currentFileUpload or currentAttribute are null and
returns the one (only one could be not null) that is not null.

Note that if this method returns null, it might mean 2 situations:
a) the last `HttpData` (whatever attribute or file upload) is already
finished and therefore accessible through `next()`
b) there is not yet any `HttpData` in decoding (body not yet parsed for
instance)

Result:
The developper has more access and therefore control on the current
upload.
The coding from developper side could looks like in the example in
HttpUloadServerHandler."
09d826ed46cba3876d4e35231038c0c9d4e301da,"Channel writable bytes feature

Motivation:
To avoid buffering too much it would be useful to get an estimate of how many bytes can be written to a Channel before it becomes unwritable.

Modifications:
- Update the Channel interface to support 2 new methods. 1 to give how many bytes before unwritable. 1 to give how many bytes before writable.
- Update the AbstractChannel implementation to delegate to the ChannelOutboundBuffer.

Result:
The Channel interface supports 2 new methods which provide more visibility into writability."
4a0d68c50bc8ef11d94538567ce3c8f7deb5d4ab,"[#3881] FixedChannelPool creates 1 more channel than maxConnections

Motivation:

FixedChannelPool should enforce a number of maximal used channels, but due a bug we fail to correctly enforce this.

Modifications:

Change check to correctly only acquire channel if we not hit the limit yet.

Result:

Correct limiting."
29ac2ae3c255fb2fa1c1660f8e35d45c212430aa,"[#3883] OpenSSL SSLSession returns incorrect peer principal

Motivation:

According to the javadocs of SSLSession.getPeerPrincipal should be returning the identity of the peer, while we return the identity of the issuer.

Modifications:

Return the correct indentity.

Result:

Behavior match the documentation."
e0ef01cf9300f940ff432ab3f4e902c4976bae02,"[#3888] Use 2 * cores as default minimum for pool arenas.

Motivation:

At the moment we use 1 * cores as default mimimum for pool arenas. This can easily lead to conditions as we use 2 * cores as default for EventLoop's when using NIO or EPOLL. If we choose a smaller number we will run into hotspots as allocation and deallocation needs to be synchronized on the PoolArena.

Modifications:

Change the default number of arenas to 2 * cores.

Result:

Less conditions when using the default settings."
e1e8a59ad9f01dbe52f5cd2768f2c43225e95c11,"Fix broken constructor chaining for FixedChannelPool class.

Motivation:

Only one of the three FixedChannelPool constructors checks for the constructor
arguments. Therfore it was possible to create a pool with zero maxConnections.

This change chains all constructors together, so that the last one
in the chain always checks the validity of the arguments, regardless of the
constructor used.

Result:

It is no longer possible to create a FixedChannelPool instance with invalid
maxConnections or maxPendingAcquires parameters."
1ecc37fbb23eb1ee1d323f95198527cc4f8cbaa7,"Better error when first HTTP/2 frame is not SETTINGS

Motivation:

Bootstrap of the HTTP/2 can take a lot of paths and a lot of things can go wrong in the initial handshakes leading up to establishment of HTTP/2 between client and server. There have been many times where handshakes have failed silently, leading to very cryptic errors that are hard to debug.

Modifications:

Changed the HTTP/2 handler and decoder to ensure that the very first data on the wire (WRT HTTP/2) is SETTINGS/preface+SETTINGS. When this is not the case, a connection error is thrown with the bytes that were found instead.

Result:

Fixes #3880"
05ce33f5ca8f5e71e9e26351151c4e4f6d5da96d,"Make the flow-controllers write fewer, fatter frames to improve throughput.

Motivation:

Coalescing many small writes into a larger DATA frame reduces framing overheads on the wire and reduces the number of calls to Http2FrameListeners on the remote side.
Delaying the write of WINDOW_UPDATE until flush allows for more consumed bytes to be returned as the aggregate of consumed bytes is returned and not the amount consumed when the threshold was crossed.

Modifications:
- Remote flow controller no longer immediately writes bytes when a flow-controlled payload is enqueued. Sequential data payloads are now merged into a single CompositeByteBuf which are written when 'writePendingBytes' is called.
- Listener added to remote flow-controller which observes written bytes per stream.
- Local flow-controller no longer immediately writes WINDOW_UPDATE when the ratio threshold is crossed. Now an explicit call to 'writeWindowUpdates' triggers the WINDOW_UPDATE for all streams who's ratio is exceeded at that time. This results in
  fewer window updates being sent and more bytes being returned.
- Http2ConnectionHandler.flush triggers 'writeWindowUpdates' on the local flow-controller followed by 'writePendingBytes' on the remote flow-controller so WINDOW_UPDATES preceed DATA frames on the wire.

Result:
- Better throughput for writing many small DATA chunks followed by a flush, saving 9-bytes per coalesced frame.
- Fewer WINDOW_UPDATES being written and more flow-control bytes returned to remote side more quickly, thereby improving throughput."
391df0547b83099a7f89bbee9d986a98ae387e8a,Fixing broken build in the 4.1 branch.
bad8e0d6aba52470046f463cb2069e16a1ad9bb0,"Correctly handle errors when using OpenSSL

Motivation:

We used ERR_get_error() to detect errors and missed to handle different errors. Also we missed to clear the error queue for a thread before invoke SSL operations,
this could lead to detecting errors on different OpenSslEngines then the one in which the error actual happened.

Modifications:

Explicit handle errors via SSL.get_error and clear the error code before SSL operations.

Result:

Correctly handle errors and no false-positives in different OpenSslEngines then the one which detected an error."
c53dbb748e392914b4cebb43258f4500e2079925,"Add ProtocolDetectionResult and use it in HAProxyMessageDecoder for allow detect HAProxy protocol.

Motivation:

Sometimes it is useful to detect if a ByteBuf contains a HAProxy header, for example if you want to write something like the PortUnification example.

Modifications:

- Add ProtocolDetectionResult which can be used as a return type for detecting different protocol.
- Add new method which allows to detect HA Proxy messages.

Result:

Easier to detect protocol."
b39223e295e1d56ac3e1054655ab0baffd0101eb,"Fixing exception in StreamBufferingEncoderTest.

Motivation:

NPE doesn't cause the tests to fail but should get fixed.

Modifications:

Modified the StreamBufferingEncoderTest to mock the ctx to return a promise.

Result:

Fixes #3905"
ba6319eb6cfb41a67951f63d7791da4132daa823,"Fix FixedCompositeByteBuf handling when copying to direct buffers and streams

Motivation:

FixedCompositeByteBuf does not properly implement a number of methods for
copying its content to direct buffers and output streams

Modifications:

Replace improper use of capacity() with readableBytes() when computing offesets during writes

Result:

Copying works correctly"
8c90d602d7f02ae36f1e93714006c1af0bcfbb87,"[#3899] Fix javadoc to use netty 4 API.

Motivation:

The javadoc of ByteBuf contained some out-dated code.

Modifications:

Update code example in javadoc to use netty 4+ API

Result:

Correct javadocs"
ae163d687da1819cc56292c6714860a439dfd54b,"[#3896] Unpooled.copiedBuffer(ByteBuffer) and copiedBuffer(ByteBuffer...) is not thread-safe.

Motivation:

As we modify the position of the passed in ByteBuffer's this methods are not thread-safe.

Modifications:

Duplicate the input ByteBuffers before copy the content to  byte[].

Result:

Unpooled.copiedBuffer(ByteBuffer) and copiedBuffer(ByteBuffer...) is now thread-safe."
dd6ac55fa02ca3127df8df195cf21a649bd55bde,"ServerBootstrap.handler(...) will add handler before Channel is registered.

Motivation:

If you set a ChannelHandler via ServerBootstrap.handler(...) it is added to the ChannelPipeline before the Channel is registered. This will lead to and IllegalStateException if a user tries to access the EventLoop in the ChannelHandler.handlerAdded(...) method.

Modifications:

Delay the adding of the ChannelHandler until the Channel was registered.

Result:

No more IllegalStateException."
11f9e9084b2da5e7a0e48c6a5c86be0f41a584de,"[#3921] EmbeddedChannel should add ChannelHandlers once registered

Motivation:

Currently in EmbeddedChannel we add the ChannelHandlers before the Channel is registered which leads to have the handlerAdded(...) callback
be called from outside the EventLoop and also prevent the user to obtain a reference to the EventLoop in the callback itself.

Modifications:

Delay adding ChannelHandlers until EmbeddedChannel is registered.

Result:

Correctly call handlerAdded(...) after EmbeddedChannel is registered."
0f6559d188f46be591902091f8150ad36c655c4f,"[#3780] Handle ChannelInitializer exception in exceptionCaught()

Motivation:

At the moment we directly closed the Channel when an exception accoured durring initChannel(...) without giving the user any way to do extra or special handling.

Modifications:

Handle the exception in exceptionCaught(...) of the ChannelInitializer which will by default log and close the Channel. This way the user can override this.

Result:

More felixible handling of exceptions."
0f95b85ec2770ce81dafb75329cb4b03d94315dc,"Ensure OpenSslSession informations can be retrieved even after shutdown

Motivation:

If a user tries to access various informations on the OpenSslSession after the SSLEngine was closed it will not work if these were not accessed before as we lazy init most of them.

Modifications:

Directly populate the whole OpenSslSession once the handshake is complete and before the user is notified about it.

Result:

OpenSslSession informations are avaible until it is GC'ed."
ba84a596e2d2976449d86b4c28a2b9f5937c1c84,"Allow servers to specify ENABLE_PUSH to 0 explicitly

Motivation:

If server sends SETTINGS with ENABLE_PUSH, its handled as
PROTOCOL_ERROR in spite of the value. But the value specified to
0 may be allowed in RFC7540.

Modifications:

Check whether ENABLE_PUSH sent from a server is 0 or not.

Result:

When server specifies ENABLE_PUSH to 0 explicitly, client doesn't
handle it as PROTOCOL_ERROR."
ecacd11b06f91a2713db8353104e5370f1e50066,"HTTP/2 limit header accumulated size

Motivation:
The Http2FrameListener requires that the Http2FrameReader accumulate ByteBuf objects. There is currently no way to limit the amount of bytes that is accumulated.

Motiviation:
- DefaultHttp2FrameReader supports maxHeaderSize which will fail fast as soon as the maximum size is exceeded.
- DefaultHttp2HeadersDecoder will respect the return value of endHeaderBlock() and fail if the max size is exceeded.

Result:
Frames which carry header data now respect a maximum number of bytes that can be accumulated."
a7f83aa23ebe14669119aadb2bbd3012f94fdf64,"HTTP/2 Example Needs FullHttpRequest

Motivation:
The HTTP/2 hello world example server should be expecting a FullHttpRequest when falling back to HTTP/1.x mode.

Modifications:
- HelloWorldHttp1Handler should process FullHttpRequestObjects
- Http2ServerInitializer should insert an HttpObjectAggregator into the pipeline if no upgrade was attempted

Result:
Responses from the HelloWorldHttp1Handler should only come after full HTTP requests are received."
61b9da470a777e979a269b56d19d233b333baa44,"[#3945] Http2ConnectionHandler breaks channelReadComplete pipeline notification

Motivation:

Http2ConnectionHandler missed to forward channelReadComplete(...) events.

Modifications:

Ensure we notify the next handler in the pipeline via ctx.fireChannelReadComplete().

Result:

Correctly forwarding of event."
a9d2b5cef00914c80c158759a5892e1d71423bce,"Skip empty buffers and not pass these to BIO_write

Motivation:

When BIO_write is called with an empty buffer it will return 0 for which we call ERR_clear_error(). This is not neccessary as we should just skip these buffers. This eliminates a lot of overhead.

Modifications:

Skip empty src buffers when call unwrap(...).

Result:

Less overhead for unwrap(...) when called with empty buffers."
18356911ab86a3e4fa5e5fcc2e9a21a641a71b47,"Stop calling BIO_write once internal buffer is full.

Motivation:

Previous we called BIO_write until either everything was written into it or it returned an error, which meant that the buffer is full. This then needed a ERR_clear_error() call which is expensive.

Modifications:

Break out of writing loop once we detect that not everything was written and so the buffer is full.

Result:

Less overhead when writing more data then the internal buffer can take."
8d1c6ebf71b116f9a33cce144a49e14f4e84528f,"Only do priming read if there is no space in dsts buffers.

Motivation:

A SSL_read is needed to ensure the bio buffer is flushed, for this we did a priming read. This can be removed in many cases. Also ensure we always fill as much as possible in the destination buffers.

Modifications:

- Only do priming read if capacity of all dsts buffers is zero
- Always produce as must data as possible in the dsts buffers.

Result:

Faster code."
9660e2f6a989d12b4c504e2e7c1b0a85258c9ec7,"Better handling of BUFFER_OVERFLOW when unwrap data.

Motivation:

When we detect a BUFFER_OVERFLOW we should just forward the already produced data and allocate a new buffer and NOT do any extra memory copies while trying to expand the buffer.

Modifications:

When a BUFFER_OVERFLOW is returned and some data was produced just fire this data through the pipeline and allocate a new buffer to read again.

Result:

Less memorycopies and so better performance."
ab43c78c8520b73b6de83e60f41806ed49138781,"Reduce memory usage by EmbeddedChannel

Motivation:

When using an EmbeddedChannel often it either does inbound or outbound processing which means we only often need one queue.

Modifications:

Lazy init the inbound and outbound message queues.

Result:

Less memory usage."
8650679f2963d63d0b1ce26a42da95c64df54e56,"Fix regression introduced by 11f9e9084b2da5e7a0e48c6a5c86be0f41a584de

Motivation:

While cherry-picked 11f9e9084b2da5e7a0e48c6a5c86be0f41a584de I changed the EmbeddedChannel implementation to not allow no ChannelHandlers when constructing it.
This was done by mistake.

Modifications:

Revert change and add unit test.

Result:

Restore old behavior."
6e044b082c1d8bedf5306e40cfeece2c0003b27e,"Proper shutdown of HTTP2 encoder when channelInactive

Motivation:

The problem is described in https://github.com/grpc/grpc-java/issues/605. Basically, when using `StreamBufferingEncoder` there is a chance of creating zombie streams that never get closed.

Modifications:

Change `Http2ConnectionHandler`'s `channelInactive` handling logic to shutdown the encoder/decoder before shutting down the active streams.

Result:

Fixes https://github.com/grpc/grpc-java/issues/605"
cdbf43596de106d735920620943c18032e0c4450,"Add generic utility for enqueuing buffers with promises and dequeueing them in arbitrary byte ranges.

Motivation:
Simplifies writing code that needs to merge or slice a sequence of buffer & promise pairs into chunks of arbitrary sizes.
For example in HTTP2 we merge or split buffers across fixed-size DATA frame boundaries.

Modifications:
Add new utility class CoalescingBufferQueue

Result:
Following this change HTTP2 code will switch to use it instead of CompositeByteBuffer for DATA frame coalescing."
e949dcd94f0cf5ef0e697792c25c79d0b0de3033,"Allow numBytes == 0 when calling Http2LocalFlowController.consumeBytes.

Motivation:

Sometimes people use a data frame with length 0 to end a stream(such as jetty http2-server). So it is possible that data.readableBytes and padding are all 0 for a data frame, and cause an IllegalArgumentException when calling flowController.consumeBytes.

Modifications:

Return false when numBytes == 0 instead of throwing IllegalArgumentException.

Result:

Fix IllegalArgumentException."
60c59f39af539d206c50571dfce94022a53dff5a,"Use CoalescingBufferQueue to merge data writes on a stream in HTTP2 instead of CompositeByteBuf

Motivation:

Slicing a mutable CompositeByteBuf is not the appropriate mechanism to use to track and release buffers that have been written to a channel.
In particular buffers passed over an Embedded or LocalChannel are retained after the ChannelPromise is completed and listening to the
promise to consolidate a CompositeBuffer breaks slices taken from the composite as the offset indices have changed.

In addition CoalescingBufferQueue handles taking arbitrarily sized slices of a sequence of buffers more efficiently.

Modifications:

Convert FlowControlledData to use a CoalescingBufferQueue to handle merging data writes.

Result:

HTTP2 works over LocalChannel and code is considerably simpler."
aaba1b9ed5364db95385cf2134afe794d46080f5,"Accept over 2^31-1 MAX_HEADER_LIST_SIZE

Motivation:

The MAX_HEADER_LIST_SIZE of SETTINGS is represented by
unsigned 32-bit value and this value isn't limited in RFC7540.
But in current implementation, its stored to int variable so
over 2^31-1 value is recognized as minus and handled as
PROTOCOL_ERROR.

Modifications:

If a value of MAX_HEADER_LIST_SIZE is larger than 2^31-1, its
handled as 2^31-1

Result:

Over 2^31-1 MAX_HEADER_LIST_SIZE is became acceptable"
80c59864cf290f9509d415050f5e0229e9b540d7,"Fix DatagramChannel javadoc

there seems to be an extra arrow incorrectly placed there when trying to link ""Channel."""
e6ed3ce6b1bc7424d76a6a8a534592d7ec2ca731,"Make CoalescingBufferQueueTest properly release all buffers including the composites removed from the queue.

Motivation:
Test was leaving composite buffers taken from the queue unreleased.

Modifications:
Make the test release buffers.

Result:
Nagging about leaked buffers should stop."
9747ffe5fcfcfa81ecb0d04d6ef6709ee69a945d,"HTTP/2 Flow Controller should use Channel.isWritable()

Motivation:
See #3783

Modifications:
- The DefaultHttp2RemoteFlowController should use Channel.isWritable() before attempting to do any write operations.
- The Flow controller methods should no longer take ChannelHandlerContext. The concept of flow control is tied to a connection and we do not support 1 flow controller keeping track of multiple ChannelHandlerContext.

Result:
Writes are delayed until isWritable() is true. Flow controller interface methods are more clear as to ChannelHandlerContext restrictions."
b95826385324316896ee3fef3b0ba51b261134c8,"Send full response for unsupported websocket versions

Motivation:

WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse does not
send a LastHttpContent, nor does it flush, and it doesn't send a content
length.

Modifications:

Changed sendUnsupportedVersionResponse to send FullHttpResponse, to
writeAndFlush, and to set a content length of 0. Also added a test for
this method.

Result:

Upstream handlers will be able to determine the end of the response, the
response will actually get written to the client, and the client will be
able to determine the end of the response."
d7cdc469bcb9db35efa1dba11c9e9edac2901527,"HTTP/2 CompressorHttp2ConnectionEncoder bug

Motivation:
The CompressorHttp2ConnectionEncoder is attempting to attach a property to streams before the exist.

Modifications:
- Allow the super class to create the streams before attempting to attach a property to the stream.

Result:
CompressorHttp2ConnectionEncoder is able to set the property and access the compressor."
f1c5f0e0c7200f63e3e0e21a171cc19afcbed0d3,"[#3967] Guard against NPE in PendingWriteQueue

Motivation:

If the Channel is already closed when the PendingWriteQueue is created it will generate a NPE when add or remove is called later.

Modifications:

Add null checks to guard against NPE.

Result:

No more NPE possible."
74dd7f85caa2d70a89049091dc8c59b233ce0248,"HTTP/2 Thread Context Interface Clarifications

Motivation:
It is currently assumed that all usages of the HTTP/2 codec will be from the same event loop context. If the methods are used outside of the assumed thread context then unexpected behavior is observed. This assumption should be more clearly communicated and enforced in key areas.

Modifications:
- The flow controller interfaces have assert statements and updated javadocs indicating the assumptions.

Result:
Interfaces more clearly indicate thread context limitations."
d1344345bbd00f245079a2c166b2a4afa1d62668,"DnsResolver.resolve(...) fails when ipaddress is used.

Motivation:

DnsResolver.resolve(...) fails when an InetSocketAddress is used that was constructed of an ipaddress string.

Modifications:

Don't try to lookup when the InetSocketAddress was constructed via an ipaddress.

Result:

DnsResolver.resolve(...) works in all cases."
05dae57ad762766170f47cae20bbd94c31c471ef,"Ensure cancelled scheduled tasks can be GC'ed ASAP

Motivation:

Prior we used a purge task that would remove previous canceled scheduled tasks from the internal queue. This could introduce some delay and so use a lot of memory even if the task itself is already canceled.

Modifications:

Schedule removal of task from queue via EventLoop if cancel operation is not done in the EventLoop Thread or just remove directly if the Thread that cancels the scheduled task is in the EventLoop.

Result:

Faster possibility to GC a canceled ScheduledFutureTask."
5fb349ca5a005a8d181c9731a2043c853db891cc,"Update ChannelConfig.java

{@link ByteBufAllocator} -> {@link MessageSizeEstimator} on
https://github.com/netty/netty/blob/4.0/transport/src/main/java/io/netty/channel/ChannelConfig.java#L248"
0d73907c581e42c758c4c8286f87ba00b106188a,"Fixing NPE in StreamBufferingEncoderTest

Motivation:

The bufferingNewStreamFailsAfterGoAwayReceived method currently causes an NPE.

Modifications:

Fixed the test so that a valid ByteBuf is passed in.

Result:

The test no longer throws an NPE."
1a5dac175ef16feb58f41e595817e1b34d9f01b5,"Correctly register for EPOLLRDHUP when construct EpollSocketChannel from FileDescriptor

Motivation:

We missed to register for EPOLLRDHUP events when construct the EpollSocketChannel from an existing FileDescriptor. This could cause to miss connection-resets.

Modifications:

Add Native.EPOLLRDHUP to the events we are interested in.

Result:

Connection-resets are detected correctly."
57d28dd42178b35194037a4ded7f26e20e676c62,"Support conversion of HttpMessage and HttpContent to HTTP/2 Frames

Motivation:

HttpToHttp2ConnectionHandler only converts FullHttpMessage to HTTP/2 Frames. This does not support other use cases such as adding a HttpContentCompressor to the pipeline, which writes HttpMessage and HttpContent.

Additionally HttpToHttp2ConnectionHandler ignores converting and sending HTTP trailing headers, which is a bug as the HTTP/2 spec states that they should be sent.

Modifications:

Update HttpToHttp2ConnectionHandler to support converting HttpMessage and HttpContent to HTTP/2 Frames.
Additionally, include an extra call to writeHeaders if the message includes trailing headers

Result:

One can now write HttpMessage and HttpContent (http chunking) down the pipeline and they will be converted to HTTP/2 Frames.  If any trailing headers exist, they will be converted and sent as well."
bd42987143958b4a5232f76229b914249a51cddf,"[#3988] Correctly count acquired channels in FixedChannelPool

Motivation:

We missed to correctly count acquired channels in FixedChannelPool which could produce an assert error.

Modifications:

Only try to decrement acquired count if the channel was really acuired.

Result:

No more assert error possible."
c3ab557f852fab44eb25c1e180f5183a2c938091,"[#3987] Remove RC4 from default ciphers.

Motivation:

Remove RC4 from default ciphers as it is not known as secure anymore.

Modifications:

Remove RC4

Result:

Not use an insecure cipher as default."
ecc01da9ddf18790ac96019710ccaed50133607c,"[#3968] Disallow pass-through of non ByteBufs in SslHandler

Motivation:

We pass-through non ByteBuf when SslHandler.write(...) is called which can lead to have unencrypted data to be send (like for example if a FileRegion is written).

Modifications:

- Fail ChannelPromise with UnsupportedMessageException if a non ByteBuf is written.

Result:

Only allow ByteBuf to be written when using SslHandler."
93fc3c6e45cda454ba74e6430a8b7b22bdf1ee15,"Make IntObjectHashMap extend Map

Motivation:

It would be useful to support the Java `Map` interface in our primitive maps.

Modifications:

Renamed current methods to ""pXXX"", where p is short for ""primitive"". Made the template for all primitive maps extend the appropriate Map interface.

Result:

Fixes #3970"
296649cfc8a7af334db7cb18606da37dbc45c3dd,"Make PrimitiveCollections generated for all primitive maps.

Motivation:

We should support XXXCollections methods for all primitive map types.

Modifications:

Removed PrimitiveCollections and added a template for XXXCollections.

Result:

Fixes #4001"
94f65ed7ff214de3fc9680d80a5ec2d2fe2aaf48,"Use standard syntax for logging HTTP/2 stream ID.

Motivation:

When looking through the logs for entries pertaining to a specific stream, it's difficult because header entries use the syntax ""streamId:<id>"" but all other entries use ""streamId=<id>"". We should make all of the entries consistent.

Modifications:

Changed header entries to use ""streamId=<id>"" to match the other entries.

Result:

Easier HTTP/2 log navigation."
623d9d7202019a56457ffd02524c70ebc86958f2,Fix typo in warning message.
b33c7b12a46d7ca5432170e292bcceba0b76d390,"XmlFrameDecoder is corrupt

Motivation:

Two problems:
1. Decoder assumption that as soon as it finds </ element it can decrement opened xml brackets counter. It can lead to bugs when closing bracket is not in byteBuf yet.
2. Not proper handling of more than two root elements in XML document. First element will be processed properly, second one not. It is caused by assumption that byteBuf readerIndex is 0 at the begging of decoding.

Modifications:

Both problems were resolved by fixes:
1. decrement opened brackets count only if </ > enclosing bracket is found
2. consider readerIndex higher than 0 when counting output frame length

Result:

Both problems were resolved"
083dbe5c5939af0602af9bd01732faaac2191b49,"Correctly count acquired channels when timeout occurs in FixedChannelPool

Motivation:

We don't decrease acquired channel count in FixedChannelPool when timeout occurs by AcquireTimeoutAction.NEW and eventually fails.

Modifications:

Set AcquireTask.acquired=true to call decrementAndRunTaskQueue when timeout action fails.

Result:

Acquired channel count decreases correctly."
a7713069a13b47efbf197a1c7416500c45d14d7c,"HttpObjectDecoder performance improvements

Motivation:
The HttpObjectDecoder is on the hot code path for the http codec. There are a few hot methods which can be modified to improve performance.

Modifications:
- Modify AppendableCharSequence to provide unsafe methods which don't need to re-check bounds for every call.
- Update HttpObjectDecoder methods to take advantage of new AppendableCharSequence methods.

Result:
Peformance boost for decoding http objects."
a91e64850505938cfe3a2079e1ac2c247df6532b,"[#4041] Added sessionPresent to MqttConnAckVariableHeader

Motivation:
As per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718033

Modification:

Add isSessionPresent() method and constructor to set it

Result:
Be able to use it with mqtt 3.1.1"
9236a8d156b2ecef2f544fe45df44a2620b37951,(fix) typo
5ed89648c3bcc201ee9326e0d29ad6ba285dacd2,"MqttEncoder build failure

Motivation:
The MqttEncoder was failing to build because it was using a method that doesn't exist.

Modifications:
Change sessionPresent() to isSessionPresent().

Result:
MqttEnccoder is now able to build."
f65717be827cc8d141daafc96cc6b8e11028aa92,"Add support for IP_FREEBIND when using native transport

Motivation:

IP_FREEBIND allows to bind to addresses without the address up yet or even the interface configured yet.

Modifications:

Add support for IP_FREEBIND.

Result:

It's now possible to use IP_FREEBIND when using the native epoll transport."
209aa28573d06e538272d67288f8c4a8450fe216,"SPDY codec must check headers are lower case

Motivation:
The SPDY spec requires that all header names be lowercase (see https://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3-1#TOC-3.2-HTTP-Request-Response). The SPDY codec header name validator does not enforce this requirement.

Modifications:
- SpdyCodecUtil.validateHeaderName should check for upper case characters and throw an error if any are found.

Result:
SPDY codec header validation enforces specification requirement."
7bd64728041613336a99a67127d8db4883c50a75,"HTTP/2 DataCompressionHttp2Test test complete race condition

Motivation:
The DataCompressionHttp2Test was exiting prematurely leading to unit test failures.

Modifications:
- Fix the race condition so the test does not evaluate final conditions until all expected events occur

Result:
Unit test no longer fails"
6fd0a0c55f1cf721c88bb0df957b2fa50215724c,"Faster and more memory efficient headers for HTTP, HTTP/2, STOMP and SPYD. Fixes #3600

Motivation:

We noticed that the headers implementation in Netty for HTTP/2 uses quite a lot of memory
and that also at least the performance of randomly accessing a header is quite poor. The main
concern however was memory usage, as profiling has shown that a DefaultHttp2Headers
not only use a lot of memory it also wastes a lot due to the underlying hashmaps having
to be resized potentially several times as new headers are being inserted.

This is tracked as issue #3600.

Modifications:
We redesigned the DefaultHeaders to simply take a Map object in its constructor and
reimplemented the class using only the Map primitives. That way the implementation
is very concise and hopefully easy to understand and it allows each concrete headers
implementation to provide its own map or to even use a different headers implementation
for processing requests and writing responses i.e. incoming headers need to provide
fast random access while outgoing headers need fast insertion and fast iteration. The
new implementation can support this with hardly any code changes. It also comes
with the advantage that if the Netty project decides to add a third party collections library
as a dependency, one can simply plug in one of those very fast and memory efficient map
implementations and get faster and smaller headers for free.

For now, we are using the JDK's TreeMap for HTTP and HTTP/2 default headers.

Result:

- Significantly fewer lines of code in the implementation. While the total commit is still
  roughly 400 lines less, the actual implementation is a lot less. I just added some more
  tests and microbenchmarks.

- Overall performance is up. The current implementation should be significantly faster
  for insertion and retrieval. However, it is slower when it comes to iteration. There is simply
  no way a TreeMap can have the same iteration performance as a linked list (as used in the
  current headers implementation). That's totally fine though, because when looking at the
  benchmark results @ejona86 pointed out that the performance of the headers is completely
  dominated by insertion, that is insertion is so significantly faster in the new implementation
  that it does make up for several times the iteration speed. You can't iterate what you haven't
  inserted. I am demonstrating that in this spreadsheet [1]. (Actually, iteration performance is
  only down for HTTP, it's significantly improved for HTTP/2).

- Memory is down. The implementation with TreeMap uses on avg ~30% less memory. It also does not
  produce any garbage while being resized. In load tests for GRPC we have seen a memory reduction
  of up to 1.2KB per RPC. I summarized the memory improvements in this spreadsheet [1]. The data
  was generated by [2] using JOL.

- While it was my original intend to only improve the memory usage for HTTP/2, it should be similarly
  improved for HTTP, SPDY and STOMP as they all share a common implementation.

[1] https://docs.google.com/spreadsheets/d/1ck3RQklyzEcCLlyJoqDXPCWRGVUuS-ArZf0etSXLVDQ/edit#gid=0
[2] https://gist.github.com/buchgr/4458a8bdb51dd58c82b4"
b714297a44ced34643fa60ca854f1880d02ba649,"HttpObjectDecoder half close behavior

Motivation:
In the event an HTTP message does not include either a content-length or a transfer-encoding header [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.3.3) states the behavior must be treated differently for requests and responses. If the channel is half closed then the HttpObjectDecoder is not invoking decodeLast and thus not checking if messages should be sent up the pipeline.

Modifications:
- Add comments to clarify regular decode default case.
- Handle the ChannelInputShutdownEvent in the HttpObjectDecoder and evaluate if messages need to be generated.

Result:
Messages are generated on half closed, and comments clarify existing logic."
cf171ff52555b9e984a3b9103287f6b897dc8626,"maxBytesPerRead channel configuration

Motiviation:
The current read loops don't fascilitate reading a maximum amount of bytes. This capability is useful to have more fine grain control over how much data is injested.

Modifications:
- Add a setMaxBytesPerRead(int) and getMaxBytesPerRead() to ChannelConfig
- Add a setMaxBytesPerIndividualRead(int) and getMaxBytesPerIndividualRead to ChannelConfig
- Add methods to RecvByteBufAllocator so that a pluggable scheme can be used to control the behavior of the read loop.
- Modify read loop for all transport types to respect the new RecvByteBufAllocator API

Result:
The ability to control how many bytes are read for each read operation/loop, and a more extensible read loop."
0be53f296f8c0342fb9f5c4dd69cd2f3f5bd6ddf,"MemoryRegionCache$Entry objects are not recycled

Motivation:

Even though MemoryRegionCache$Entry instances are allocated through a recycler they are not properly recycled,
leaving a lot of instances to be GCed along with Recycler$DefaultHandle objects.
Fixes #4071

Modification:

Recycle Entry when done using it.

Result:

Less GCed objects."
5d011b88958f867e99a94bdfae334dfb8ce1697c,"Improve the logic around acquire channel function is improved.

Motivation:
The acquire channel function resulted in calling itself several times in case when channel polled from the pool queue was unhealthy, which resulted FixedChannelPool to be called several times which in it's turn caused FixedChannelPool.acquire() to be called and resulted into acquireChannelCount to be unnecessary increased.
Example use case:
1) Create FixedChannelPool instance with one channel in the pool: new FixedChannelPool(cb, handler, 1)
2) Acquire channel A from the pool
3) close the channel A
4) Return it back to the pool
5) Acquire channel from the same pool again
Expected result:
new channel created and acquired, channel A that has been closed discarded and removed from the pool from being unhealthy
Actual result:
Channel A had been removed from the pool, how ever the new channel had never be acquired, instead the request to acquire had been added to the pending queue in FixedChannelPool and the acquireChannelCount is increased by one. The reason is that at the time when SimpleChannelPool figured out that the channel was unhealthy called FixedChannelPool.acquire to try to acquire new channel, how ever the request was added to the pendingTakQueue because by the time when FixedChannelPool.acquire was called, the acquireChannelCount was already ""1"" so new channel ould not be created cause of maxChannelsLimit=1.

Modifications:
The suggested approach modifies the SimpleChannelPool in a way so that when channel detected to be unhealthy it calls private method SimpleChannelPool.acquireHealthyFromPoolOrNew() which guarantees that SimpleChannelPool actually either finds a healthy channel in the pool and returns it or causes the promise.cause() in case when new channel was failed to be created.

 Result:
The  ```acquiredChannelCount``` is now calculated correctly as a result of SimpleChannelPool.acquire() of not being recursive on overridable acquire method."
9d417c1626ecc95abda14d2a48fc54edb26e302e,"Fixing compile error, introduce by 5d011b88958f867e99a94bdfae334dfb8ce1697c"
5ac84760c4f5d4f09a61fb5cd2cac7d95a782f9f,"Allow to create SslContext from existing PrivateKey / X509Certificate

Motivation:

Sometimes the user already has a PrivateKey / X509Certificate which should be used to create a new SslContext. At the moment we only allow to construct it via Files.

Modifications:

- Add new methods to the SslContextBuilder to allow creating a SslContext from PrivateKey / X509Certificate
- Mark all public constructors of *SslContext as @Deprecated, the user should use SslContextBuilder
- Update tests to us SslContextBuilder.

Result:

Creating of SslContext is possible with PrivateKay/X509Certificate"
cfd7b391c8b49ae19ce25d17c18a53cb1c857128,Add a property to disable osgi testsuite run
deda3f5b656c19eb42bc063439ba2431ed0477fc,"Add GCC optimization flag when compile native transport

Motivation:

We not set any optimization flag when compile native transport

Modification:

Add -O3 to CFLAGS to have GCC do optimizations

Result:

Ship optimized native code"
2d4bef9b186ca556ae2be218c0123bd9acb31e57,"Http2ConnectionHandler not flushing on writabilityChange

Motivation:
The Http2ConnectionHandler was writing pending bytes, but was not flushing. This may result in deadlock.

Modifications:
- Http2ConnectionHandler must writePendingBytes and also flush.

Result:
Data is now flushed after writabilityChange writes more data to underlying layers."
a4261d481c5f4d3d00eced3684494bc84874756e,"Eclipse SPDY docs moved

Motivation:
We provide a hyperlink to the docs for SPDY if the runtime is not setup correctly to help users. These docs have moved.

Modifications:
- Update the hyperlink to point to the new doc location.

Result:
Users are able to find docs more easily."
c65ef4fed77dff6c9685b281d249d0856f1a9fe4,"Update npn and alpn dependencies

Motivation:
New versions of alpn-boot and npn-boot have been released.

Modifications:
- Update pom to pull in new versions.

Result:
Dependencies more up to date."
d2683c391149332733017aed2aece6ff6de7c4f6,"EPOLLRDHUP infinite loop

Motivation:
If  is enabled and a channel is half closed it is possible for the EPOLL event loop to get into an infinite loop by continuously being woken up on the EPOLLRDHUP event.

Modifications:
- Ensure that the EPOLLRDHUP event is unregistered for to prevent infinite loop.

Result:
1 less infinite loop."
fd27c403d363f5c5c481e558b07766a9407f9e35,"[#4010] Correctly handle whitespaces in HttpPostMultipartRequestDecoder

Motivation:

Due not using a cast we insert 32 and not a whitespace into the String.

Modifications:

Correclty cast to char.

Result:

Correct handling of whitespaces."
75af257a62ab328edeeeed59b636d85910ba934c,"Ignore EpollReuseAddrTest.testMultipleBindDatagramChannel

Motivation:

It keeps failing on some of our CI machines for an unknown reason.

Modifications:

Ignore it temporarily

Result:

Less noise in CI result"
ea18f73a882f4cc6322fba05a73f06b6b9bbe134,Upgrade jacoco-maven-plugin to the latest version
e6ca9882a107c34cf6358c8d7a68561025f06016,"Add support for abstract domain sockets

Motivation:

Because of java custom UTF encoding, it was previously impossible to use
nul-bytes in domain socket names, which is required for abstract domain
sockets.

Modifications:

- Pass the encoded string byte array to the native code
- Modify native code accordingly to work with nul-bytes in the the
array.
- Move the string encoding to UTF-8 in java code.

Result:

Unix domain socket addresses will work properly if they contain nul-
bytes. Address encoding for these addresses changes from UTF-8-like to
real UTF-8."
ba6ce5449ee852b782dde9a11933f6a09b123e22,"Headers Performance Boost and Interface Simplification

Motivation:
A degradation in performance has been observed from the 4.0 branch as documented in https://github.com/netty/netty/issues/3962.

Modifications:
- Simplify Headers class hierarchy.
- Restore the DefaultHeaders to be based upon DefaultHttpHeaders from 4.0.
- Make various other modifications that are causing hot spots.

Result:
Performance is now on par with 4.0."
e796c99b23fa6113582e69af74088e5cc5f7e242,"Add unit tests for HTTP and SPDY headers

Motivation:

When attempting to retrieve a SPDY header using an AsciiString key, if the header was inserted using a String based key, the lookup would fail. Similarly, the lookup would fail if the header was inserted with an AsciiString key, and retrieved using a String key. This has been fixed with the header simplification commit (1a43923aa89769ae3711e0d9451abfdee4a4327c).

Extra unit tests have been added to protect against this issue occurring in the future.  The tests check that a header added using String or AsciiString can be retrieved using AsciiString or String respectively.

Modifications:

Added more unit tests

Result:

Protect against issue #4053 happening again."
a7135e86771f330e28fe11472a87f8e57632e4a1,"HttpObjectAggregator doesn't check content-length header

Motivation:
The HttpObjectAggregator always responds with a 100-continue response. It should check the Content-Length header to see if the content length is OK, and if not responds with a 417.

Modifications:
- HttpObjectAggregator checks the Content-Length header in the case of a 100-continue.

Result:
HttpObjectAggregator responds with 417 if content is known to be too big."
beab89bec522a28a714c7661e240f35e1211b338,"Remove Erroneous imports

Motivation:
As part of merging / cherry-picking there were some Erroneous imports added to AbstractMemcacheObjectAggregator.

Modifications:
- Remove Imports from AbstractMemcacheObjectAggregator.

Result:
Code now builds."
08b73bf9145d60d862b9faf11b95bee60ee061bd,"Unhealthy channel is not offered back to the pool.

Motivation:
When releasing unhealthy channel back to a pool we don't have to offer it since on acquire it will be discarded anyways.
 Also checking healthiness at release is a good idea so we don't end up having tons of unhealthy channels in the pool(unless they became unhealthy after being offered)

Modifications:
private SimpleChannelPool.offerIfHealthy() method added that is called from SimpleChannelPool.doReleaseChannel(). SimpleChannelPool.offerIfHealthy() offers channel back to pool only if channel is healthy.
Otherwise it throws setFailure exception to the promise.

 Result:
The pool is now much cleaner and not spammed with unhealthy channels.

Added ability to choose if channel health has to be validated on release by passing boolean flag.

Motivation:
Depending on performance preferences and individual use cases sometimes we would like to be able force health check of a channel at release time and do not offer it back to the pool. Other times we would want to just release channel and offer it back to the pool and check health only when we try to acquire that channel from the pool. See more details here: https://github.com/netty/netty/issues/4077#issuecomment-130461684

Modifications:
Future<Void> release(Channel channel, Promise<Void> promise, boolean offerHealthyOnly);
The offerHealthyOnly boolean flag allows developers to choose whether to do channel validation before offering it back to pool or not.
Appropriate modifications made to hierarchy of implementations of ChannelPool. offerHealthyOnly=true will force channel health to be checked before offering back to pool. offerHealthyOnly=false  will ignore channel health check and will just try just offer it back to the pool
 offerHealthyOnly=true by default.

Result:
Channel health check before offer back to pool is controlled by a flag now.

Code changed to satisfy checkstyle requirements.

Motivation:
Code needs to satisfy checkstyle requirements.

Modifications:
 SimpleChannelPool.java:279 line split to be less then 120 characters.
 SimpleChannelPool.java:280:31 space added after '{'
 SimpleChannelPool.java:282:17 space added after '{'
 SimpleChannelPoolTest.java:198 - extra white space line removed.

Result:
Code satisfies checkstyle requirements.

 offerHealthyOnly is passed as a constructor parameter now.

Motivation:
Instead of passing offerHealthyOnly as a method parameter it is better to pass it in as SimpleChannelPool or FixedChannelPool constructor.

Modifications:
 Redundant release method that takes offerHealthyOnly removed from ChannelPool.
 offerHealthyOnly parameter added to constructor for FixedChannelPool and SimpleChannelPool.

Result:
SimpleChannelPool and FixedChannelPool are now take offerHealthyOnly as a constructor parameter. Default behavior is: offerHealthyOnly=true.

Code changed to satisfy checkstyle requirements.

Motivation:
Code needs to satisfy checkstyle requirements.

Modifications:
 SimpleChannelPool.java:84: line made to be no longer then 120 characters.
 SimpleChannelPool.java:237: extra white space line removed.

Result:
Code satisfies checkstyle requirements.

Tests do not need to be too  copled to the code. Exception message should not be validated

Motivation:
We don't need our tests to be too coupled to the code. Exception type validation in tests is just good enough.

Modifications:
Exception validation message removed from SimpleChannelPoolTest.testUnhealthyChannelIsNotOffered() test.

Result:
The SimpleChannelPoolTest test is less coupled to the code now.

Stack trace set to empty for UNHEALTHY_NON_OFFERED_TO_POOL.

Motivation:
We don't need stack trace for UNHEALTHY_NON_OFFERED_TO_POOL.

Modifications:
Added  UNHEALTHY_NON_OFFERED_TO_POOL.setStackTrace(EmptyArrays.EMPTY_STACK_TRACE) to static init block.

Result:
UNHEALTHY_NON_OFFERED_TO_POOL's stack trace set to empty.

Minor code re-factorings.

Motivation:
For better code readability we need to apply several minor code re-factorings.

Modifications:
javadocs true -> {@code true}
offerHealthyOnly variable name changed to releaseHeathCheck
<p/> -> <p> in javadocs
offerHealthyOnly removed from doReleaseChannel as it not needed there.

Result:
Code quality is improved.

Code changed to satisfy checkstyle requirements.

Motivation:
Code needs to satisfy checkstyle requirements.

Modifications:
SimpleChannelPool.java:87: line made to be no longer then 120 characters.

Result:
Code satisfies checkstyle requirements.

Pull request needs to contain only necessary changes

Motivation:
The pull request should not contain unnecessary changes that are not needed as part of required functionality of pull request.

Modifications:
private void doReleaseChannel(final Channel channel, final Promise<Void> promise) - >  private void doReleaseChannel(Channel channel, Promise<Void> promise)

Result:
Pull request contains less unnecessary modifications."
fd9ca8bbb3bb5478aee79e633374abfbc9b6d6c3,Fix compilation errors
fdfe3149ba3f68678fa7f73c574c7c61aa33fa2f,"Provide more control over DnsNameResolver.query() / Add NameResolver.resolveAll()

Related issues:
- #3971
- #3973
- #3976
- #4035

Motivation:

1. Previously, DnsNameResolver.query() retried the request query by its
own. It prevents a user from deciding when to retry or stop. It is also
impossible to get the response object whose code is not NOERROR.

2. NameResolver does not have an operation that resolves a host name
into multiple addresses, like InetAddress.getAllByName()

Modifications:

- Changes related with DnsNameResolver.query()
  - Make query() not retry
    - Move the retry logic to DnsNameResolver.resolve() instead.
  - Make query() fail the promise only when I/O error occurred or it
    failed to get a response
  - Add DnsNameResolverException and use it when query() fails so that
    the resolver can give more information about the failure
  - query() does not cache anymore.

- Changes related with NameResolver.resolveAll()
  - Add NameResolver.resolveAll()
  - Add SimpleNameResolver.doResolveAll()

- Changes related with DnsNameResolver.resolve() and resolveAll()
  - Make DnsNameResolveContext abstract so that DnsNameResolver can
    decide to get single or multiple addresses from it
  - Re-implement cache so that the cache works for resolve() and
    resolveAll()
  - Add 'traceEnabled' property to enable/disable trace information

- Miscellaneous changes
  - Use ObjectUtil.checkNotNull() wherever possible
  - Add InternetProtocolFamily.addressType() to remove repetitive
    switch-case blocks in DnsNameResolver(Context)
  - Do not raise an exception when decoding a truncated DNS response

Result:

- Full control over query()
- A user can now retrieve all addresses via (Dns)NameResolver.resolveAll()
- DNS cache works only for resolve() and resolveAll() now."
1856ab3a3516435f5481ff9a3a06233b849b46e7,"Make DnsNameResolverTest.testQueryMx() more robust

Motivation:

DNS servers seem to reply with ServFail(2) response code when it is
busy.

Modifications:

- Retry when response code is ServFail instead of failing the test
- Try all DNS servers instead of retrying twice only

Result:

testQueryMx() is less likely to fail due to public DNS server problems"
ad0b7ca56db391248c95ff2c0e24793cc3a4d9d5,"Add a test case for DNS resolver cache for negative loopups

Related issue: #4065"
052a171a522d2d3edb80725b00a049eebd4bede3,"Fixes infinite loop during handshake in SslHandler in Android devices

Motivation:

On Android devices with version less than Lollipop, HarmonyJSSE is used for SSL. After completion of handshake, handshake status is NOT_HANDSHAKING instead of FINISHED. Also encrypting empty buffer after handshake should cause underflow exception and produce 0 bytes, but here it happily encrypts it causing for loop to never break

Modification:

Since 0 bytes should only be consumed in handshake process. Added a condition to break loop when 0 bytes are consumed and handshake status is NOT_HANDSHAKING

Result:

Sucessful ssl handshake on Android devices, no infinite loop now"
a45e844395ae82b9c69cbb6e6bfd54d1564caa8d,"HttpResponseStatus reasonPhrase equals usage

Motivation:
HttpResponseStatus.reasonPhrase returns an AsciiString, but was compared using equals to a String. Other usages of the reasonPhrase also use the toString() method when not necessary.

Modifications:
- Use the contentEquals method

Result:
Correct comparison, and no toString() when not needed."
34dfa7a2d8679b874ad624ecd735e448eda4f258,"DefaultHttp2ConnectionEncoder private constructors on inner classes

Motivation:
DefaultHttp2ConnectionEncoder.FlowControlledHeaders and DefaultHttp2ConnectionEncoder.FlowControlledData have private constructors which may result in static factory methods being generated to construct instances of these classes.

Modifications:
- Make constructors public for these private classes

Result:
Accessor for inner class constructor more correct and no possibiliy of synthetic method generation."
9bc322a6a834c00b138d7bb231c29a1b259e8d40,"StringUtil not closing Formatter

Motivation:
The StringUtil class creates a Formatter object, but does not close it. There are also a 2 utility methods which would be generally useful.

Modifications:
- Close the Formatter
- Add length and isNullOrEmpty

Result:
No more resource leaks. Additional utility methods."
c2d5a531046c6cd79c5447180b79f4176a3421e5,"HttpUtil class for Http specific utilities

Motivation:
The HTTP specification defines specific request-targets in https://tools.ietf.org/html/rfc7230#section-5.3. Netty does not have a way to distinguish between these differnt types, and there is currently no obvious location where these types of methods would live.

Modifications:
- Add methods to distinguish request-targets as defined in https://tools.ietf.org/html/rfc7230#section-5.3

Result:
Common utitlity methods exist to inpsect request-targets."
559f1b110aeb0d586308d9ad8fb01f78170dd6e2,"HttpScheme class

Motivation:
The HTTP schemes defined by https://tools.ietf.org/html/rfc7230 don't have a common representation in Netty.

Modifications:
- Add a class to represent HttpScheme

Result:
The HTTP Scheme is now defined in 1 common location."
ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1,"EPOLL exception processing feedback loop

Motivation:
Commit cf171ff52555b9e984a3b9103287f6b897dc8626 changed the way read operations were done. This change introduced a feedback loop between fireException and epollInReady.

Modifications:
- All EPOLL*Channel* classes should not call fireException and also continue to read. Instead a read operation should be executed on the eventloop (if the channel's input is not closed, and other conditions are satisfied)

Result:
Exception processing and channelRead will not be in a feedback loop.
Fixes https://github.com/netty/netty/issues/4091"
08477eaf034dfa5e54e3d5b5e714f523d946874b,"HTTP/2 Graceful Shutdown Timeout

Motivation:
If any streams are still active the graceful shutdown code will wait until they are all closed before the connection is closed. In some situations this event may never occur, and thus a timeout should be supported so the socket can be closed even if all streams haven't been closed.

Modifications:
- Add a configurable timeout for when the graceful shutdown process is attempted.
- Update unit tests to be faster, and use this graceful timeout

Result:
Local endpoint can protect from local or remote issues which prevent the channel from being closed during the graceful shutdown process."
2eb680907021c92044bcc9083e598533c8862181,"Correct OSGi manifests in source jars

Related: #3886

Motivation:

We were including OSGi manifests in sources/javadoc JARs, and OSGi
container treats them as correct dependencies when resolving from OBR
repository, which is incorrect. Runtime fails with non-descriptive
ClassNotFoundException as a result.

Modifications:

- Do not include the OSGi manifests in sources/javadoc JARs
- Include Eclipse-related manifest entries in sources/javadoc JARs

Result:

Better OSGi compatibility"
4feafc4a5226c6307f5a9b36665d8fe8d8a05072,"Consistent naming style for enum

Motivation:

We should use camel-case for Enums.

Modifications:

Rename enums to use camel-case.

Result:

Consistent naming"
50b97689285003618dc8b7c43365eb4cda0ffc1d,"[#4095] Correctly handle Upgrade responses with special handling of Hixie 76

Motivation:

Hixie 76 needs special handling compared to other connection upgrade responses. Our detection code of non websocket responses did actually always use the special handling that only should be used for Hixie 76 responses.

Modifications:

Correctly detect connection upgrade responses which are not for websockets.

Result:

Be able to upgrade connections for other protocols then websockets."
e59ae12b4239b08c000bb382cd1d9068fd8a8fea,"[#4079] Fix IllegalStateException when HttpContentEncoder is used and 100 Continue response is used.

Motivation:

Whe a 100 Continue response was written an IllegalStateException was produced as soon as the user wrote the following response. This regression was introduced by 41b0080fcc8fcace7cd62d238f6a932e79ec8bb1.

Modifications:

- Special handle 100 Continue responses
- Added unit tests

Result:

Fixed regression."
1fefe9affb05c7ffe69c05551b2864e7454c76e7,"[#4087] Correctly forward bytes when remove codec and handle channelInactive / channelReadComplete(...)

Motivation:

We missed to correctly implement the handlerRemoved(...) / channelInactive(...) and channelReadComplete(...) method, this leaded to multiple problems:

 - Missed to forward bytes when the codec is removed from the pipeline
 - Missed to call decodeLast(...) once the Channel goes in active
 - No correct handling of channelReadComplete that could lead to grow of cumulation buffer.

Modifications:

- Correctly implement methods and forward to the internal ByteToMessageDecoder
- Add unit test.

Result:

Correct behaviour"
ac9ae14bd949f10ad09eb4ba8c3d12ccccd4093e,"HTTP/2 SimpleChannelPromiseAggregator failure condition

Motivation:
If a SimpleChannelPromiseAggregator is failed before any new promises are generated, the failure is not propegated through to the aggregated promise.

Modifications:
- Failures should be allowed to occur even if no new promises have been generated

Result:
Failures are always allowed."
a55df36ae4d9fdd6541987857b45a40e2ddb3a18,"ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1 buffer leak in EpollSocketChannelTest

Motivation:
ce6931e0e51096c5b6f1fc23ac939fb95ee70bc1 introduced a buffer leak in EpollSocketChannelTest.

Modifications:
- Fix buffer leak

Result:
No more buffer leak."
85c79dbbe4e6b3e74bd84b3c2eb48fab2916fb6b,"HTTP to HTTP/2 tranlation errors

Motivation:
HttpUtil.toHttp2Headers is currently not translating HTTP request headers to HTTP/2 request headers correctly.  The path, scheme, and authority are tranlation process are not respecting the HTTP/2 RFC https://tools.ietf.org/html/rfc7540#section-8.1.2.3 and HTTP RFC https://tools.ietf.org/html/rfc7230#section-5.3.

Modifications:
- path, scheme, authority must be set according to rules defined in https://tools.ietf.org/html/rfc7540#section-8.1.2.3
- HTTP/1.x URIs must be handled as defined in https://tools.ietf.org/html/rfc7230#section-5.3

Result:
More correct translation from HTTP/1.x requests to HTTP/2 requests."
6046adef2b4fe96db975fdf1c0ef8ab1e5bcfee2,"HttpRequestEncoder consistency with master branch

Motivation:
The HttpRequestEncoder.encodeInitialLine can now be consistent with the master branch after 85c79dbbe4e6b3e74bd84b3c2eb48fab2916fb6b

Modifications:
- Use the AsciiString and ByteBufUtil.copy methods

Result:
Consistent behavior/code between 4.1 and master branches."
99d6a97b4a9135a0fd746392a3384bf8cfd6d49c,"HTTP to HTTP/2 translation errors (round 2)

Motivation:
Commit 0d8ce23c83ad7fa67245c721ba4d47437458ddfc failed to fix the Host header processing. Host is not a URI but is instead defined in https://tools.ietf.org/html/rfc3986#section-3.2.2 as host        = IP-literal / IPv4address / reg-name

Modifications:
- Host should not be treated as a URI.
- We should be more explicit about required fields, and unexpected input by throwing exceptions.

Result:
Translation from HTTP/1.x to HTTP/2 is more correct."
719d1dbad1078ea20ea385bd9f2c16847dcb81ae,"Replace infinite Iterable/Iterator with dedicated types

Related: #4065

Motivation:

DnsNameResolver was using a special Iterable/Iterator implementation
that yields an infinite stream of DNS server addresses. However, this
seems to cause confusion.

Modifications:

- Make DnsServerAddresses an abstract class with an abstract stream()
  method that returns DnsServerAddressStream
- Add DnsServerAddressStream that yields DNS server address infinitely
- Remove DnsServerResolver(Group) constructors that accept only a single
  server address, which wasn't very useful in practice
- Extract the DnsServerAddresses implementations to top level
- DnsServerAddresses.defaultAddresses() now returns DnsServerAddresses.
  - Add DnsServerAddresses.defaultAddressList() instead

Result:

Less confusion and more explicitness"
e280251b1504548263937454db04d5cbc09f6443,"Revert ""Add PooledSlicedByteBuf and PooledDuplicatedByteBuf""

Motivation:
Currently the ""derived"" buffer will only ever be recycled if the release call is made on the ""derived"" object, and the ""wrapped"" buffer ends up being ""fully released"" (aka refcount goes to 0). From my experience this is not the common use case and thus the ""derived"" buffers will not be recycled.

Modifications:
- revert https://github.com/netty/netty/pull/3788

Result:
Less complexity, and less code to create new objects in majority of cases."
14dc5719565b1f6f10e8c1b5194d157077c7e60c,"Http2ConnectionHandler channelInactive sequencing

Motivation:
ByteToMessageDecoder may call decode after channelInactive is called. This will lead to a NPE.

Modifications:
- Call super.channelInactive() before we process the event in Http2ConnectionHandler

Result:
No more NPE in decode."
75efe016d6537fc989c69aadf5eced148fa23bcc,"Add more public DNS servers to DnsNameResolverTest

so that we have more chance of passing the test when some DNS servers
are unavailable or throtlling us."
73f472b65d9982997efdf06c1403b73c9460e795,"Fix DNS lookup hang / Remove Comodo Secure DNS

Motivation:

- DNS lookup sometimes hang because it does not call
  tryToFinishResolve()
- Comodo Secure DNS handles negative lookup incorrectly.

Modifications:

- Add missing tryToFinishResolve()
- Remove Comodo Secure DNS servers from the list

Result

- DNS lookup does not hang on non-existent domain names
- More reliable DnsNameResolverTest"
cbc38e938a095b823abc75cb48ed8929deee5ab5,"UNSAFE.throwException null arg crashes JVM

Motivation:
It has been observed that passing a null argument to Unsafe.throwException can crash the JVM.

Modifications:
- PlatformUnsafe0.throwException should honor http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.18 and throw a NPE

Result:
No risk of JVM crashing for null argument.
Fixes https://github.com/netty/netty/issues/4131"
e7f2abbd3642e665c25939b3b60fd454bc107477,"[#4127] Correctly set traffic class and so linger.

Motivation:

The method implementions for setSoLinger(...) and setTrafficClass(...) were swapped by mistake.

Modifications:

Use the correct implementation for setSoLinger(...) and setTrafficClass(...)

Result:

Correct behaviour when setSoLinger(...) and setTrafficClass(...) are used with the epoll transport."
eb1c97b3b99bca59971809260ad2977d5e5c886b,"[#4110] Correct javadocs of MpscLinkedQueue

Motivation:

The javadocs are incorrect and so give false impressions of use-pattern.

Modifications:

- Fix javadocs of which operations are allowed from multiple threads concurrently.
- Let isEmpty() work concurrently.

Result:

Correctly document usage-patterns."
c8fb2a84c58d6350d7dac6bd246bd140d0e46a40,"Fix race condition of DefaultChannelGroup by introducing a closed flag.

Motivation:

Doc of ChannelGroup says, that it can be used to manage server and child channels at once.
However, in DefaultChannelGroup, there is a race condition. When a server channel accepts a child, it schedules its
registration on an event loop, which takes some time. If the ChannelGroup, which is supposed
to close server and child channels at once, is closed after the child channel has been scheduled
for registration and before this registration actually happens, this child channel is not closed
and remains connected. This could lead to connection leaks.

Modifications:

To fix this, the DefaultChannelGroup is changed to has a closed flag.
This flag is set to true, just before the close() method is actually closing channels.
The add() method checks after adding a new channel, if this flag has been set to true.
If yes, the new channel is closed. If not, we have the guarantee, that this channel will be
closed by the ChannelGroup, because setting the closed flag to true happens-before closing any channels.

This behaviour can be activated by two new constructors. The old constructors are still there and behave like before.
Therefore, no existing code should be affected directly.

Result:

If activating this feature, the DefaultChannelGroup can be used, for managing server and child channels at once.
But this activating this feature means also, that a ChannelGroup cannot be reused after calling close()."
b6a4f5de9d213cdbe32ff7772be4bcf6a1ba9094,"Refactor of HttpUtil and HttpHeaderUtil

Motivation:
There currently exists http.HttpUtil, http2.HttpUtil, and http.HttpHeaderUtil. Having 2 HttpUtil methods can be confusing and the utilty methods in the http package could be consolidated.

Modifications:
- Rename http2.HttpUtil to http2.HttpConversionUtil
- Move http.HttpHeaderUtil methods into http.HttpUtil

Result:
Consolidated utilities whose names don't overlap.
Fixes https://github.com/netty/netty/issues/4120"
5498fd12dc8dd42a1a76e3fd62d05993fcbcb3bf,"Fix and add comments to HttpUtil

Motivation:
The comments in HttpUtil need some love.

Modifications
- Update comments in HttpUtil

Result:
Comments are cleaner in HttpUtil."
56cc0bbd4c8a55144e2086cc3dd9286f8d0e374d,"OioSctpChannel iterating over selected keys

Motivation:
OioSctpChannel.doReadMessages is iterating over the selected keys, and ignoring each selected key. It is not known why this is needed and no other channel implementation does this.

Modifications:
- Stop iterating over selected keys, and just read like other channels

Result:
No unnecessary iteration in OioSctpChannel.doReadMessages.
Fixes https://github.com/netty/netty/issues/3884"
4bdd8dacb9a4bbc4097ba8fda4124bc26f67734c,"Restore derived buffer index/mark updates

Motivation:
As part of the revert process in https://github.com/netty/netty/pull/4138 some index and mark updates were lost.

Modifications:
- Restore the index / mark updates made in https://github.com/netty/netty/pull/3788

Result:
Slice and Duplicate buffers index / marks are correctly initialized."
5987cddf7c9f7560fed1e8dc7a0f2835acf3735d,Fixed a typo [testEquansIgnoreCase() --> testEqualsIgnoreCase()]
d45ad9ec68e342a75897efb25238345ebdd85e9c,Add a bunch of OpenNIC DNS servers for more reliable DNS tests
97f5b43a3ef2ecdd2a3aca61c2ef6947f221dff9,"Only try to obtain SO_LINGER on close if fd is still open.

Motivation:

When try to get SO_LINGER from a fd that is closed an Exception is thrown. We should only try to get SO_LINGER if the fd is still open otherwise an Exception is thrown that can be ignored anyway.

Modifications:

First check if the fd is still open before try to obtain SO_LINGER setting when get the closeExecutor. This is also the same that we do in the NIO transport.

Result:

No more exception when calling unsafe.close() on a channel that has a closed file descriptor."
8e5834f711ca6ab2ff4479cdf3c45769dd0243c3,"Upgrade to netty-tcnative-1.3.33.Fork6

Motivation:

A new netty-tcnative bugfix release was released.

Modifications:

Upgrade version.

Result:

Using latest netty-tcnative version"
1a9ea2d349c42f7c7ccb56daea29f083ee60870e,"[#4147] Allow to disable recycling

Motivation:

Sometimes it is useful to disable recycling completely if memory constraints are very tight.

Modifications:

Allow to use -Dio.netty.recycler.maxCapacity=0 to disable recycling completely.

Result:

It's possible to disable recycling now."
6d473e7f390fcbdbd47169b71e9bbc10670c7362,"Allow to get details of the Thread that powers a SingleThreadEventExecutor.

Motivation:

for debugging and metrics reasons its sometimes useful to be able to get details of the the Thread that powers a SingleThreadEventExecutor.

Modifications:

- Expose ThreadProperties
- Add unit test.

Result:

It's now possible to get details of the Thread that powers a SingleThreadEventExecutor."
0365927951e1a80083f384dbf3988cbfd5b393b0,"HTTP/2 InboundHttp2ToHttpAdapterTest race condition

Motivation:
The latches in InboundHttp2ToHttpAdapterTest were volatile and reset during the tests. This resulted in race conditions and sometimes the tests would be waiting on old latches that were not the same latches being counted down when messages were received.

Modifications:
- Remove volatile latches from tests

Result:
More reliable tests with less race conditions."
50cc647804c9f435274aa409f8c5561adf3707f6,"DefaultPropertyKey private member variable accessed outside scope

Motivation:
DefaultPropertyKey.index is currently private and accessed outside the class's scope.

Modifications:
- Change access level to package private

Result:
No chance of synthetic method generation for accessing this field"
48662bf41d84a763c324d4fe3376ba0cc2d202b0,"Build fails with java 1.8_u60

Motivation:
The alpn / npn dependency versions are dependent on java version. If a java version 1.8+ is used that is not explicitly listed in the pom file then ALPN tests will fail because the java 1.7 version of alpn will be loaded by out pom file.

Modifications:
- Ensure there is a latest version to fall back up for npn 1.7+
- Ensure there is a latest version to fall back upon from alpn 1.8+

Result:
Build can complete despite having a newer jdk which is not listed in our pom file."
e37069b9479d7bd4eb09fffdf8c547d0e56a8695,"LocalChannel Event Ordering Error

Motivation:
When a LocalChannel write operation occurs, the promise associated with the write operation is marked successful when it is added to the peer's queue, but before the peer has actually received the data. If the promise callback closes the channel then a race condition exists where the close event may occur before the data is delivered. We should preserve ordering of events.

Modifications:
- LocalChannel should track when a write is in progress, and if a close operation happens make sure the peer gets all pending read operations.

Result:
LocalChannel preserves order of operations.
Fixes https://github.com/netty/netty/issues/4118"
d3dcc7f65824ef09ebc5e50a5e7ba882850a9be5,"LocalChannelWrite event sequencing issue

Motivation:
https://github.com/netty/netty/pull/4143 addressed a few ordering issues but an ordering issue still remained if the Promise for a write completes, and a listener of that promise does a write on a peer channel. The ordering was subject to how potentially 2 different executors would run a task, but it should be coordinated such that the first write is read first.

Modifications:
- Keep track of the finishPeerRead task run on the executor if necessary and ensure it completes before current channel read occurs

Result:
Ordering of events for echo type situations is preserved."
407d5ccdcf6ea1521486213b068fe05725e7843d,"Revert ""Consistent naming style for enum""

This reverts commit 4feafc4a5226c6307f5a9b36665d8fe8d8a05072."
0c835420008bb1767ea1969cd8d63adf1c80e374,"Use ChannelException when ChannelConfig operation fails in epoll.

Motivation:

In NIO and OIO we throw a ChannelException if a ChannelConfig operation fails. We should do the same with epoll to be consistent.

Modifications:

Use ChannelException

Result:

Consistent behaviour across different transport implementations."
d9d488e477c302481bb8fa5028e5bb469eefd492,"[#2677] Remove unnessary synchronized in SpdySessionHandler

Motivation:

As all methods in the ChannelHandler are executed by the same thread there is no need to use synchronized.

Modifications:

Remove synchronized keyword.

Result:

No more unnessary synchronized in SpdySessionHandler."
e1bf9d625762a474fbfa9fbe8dc1ca55cff6074a,"Fix unintended timeout in negative DNS lookup cache test

Motivation:

DNS lookups in DnsNameResolverTest can take longer than expected due to
retries. The hard limit of 5 seconds is being applied to
testNegativeTtl(), making the first uncached lookup cause a timeout.

Modifications:

Do not use JUnit's Timeout annotation but implement simple timeout
mechanism that apples only to cached lookups.

Result:

testNegativeTtl() should not fail when an initial negative lookup
requires a retry."
e556958abc61f487ae2d3a7f1d813f429e9f0ccc,"Fix a buffer leak in BinaryMemcacheEncoderTest

BinaryMemcacheEncoderTest.shouldEncodeContent() did not release one of
the three buffers."
1252f74528fa925eb0ecc5837be332b6df36451f,"[#4171] Fix flacky test introduced by previous commit.

Motivation:

SingleThreadEventExecutorTest was flacky.

Modifications:

Fixed flacky test.

Result:

No more test failures"
9b45e9d015e12db923df39458b36fe3720bdbacd,"Additional configuration for leak detection

Motivation:

Leak detector, when it detects a leak, will print the last 5 stack
traces that touched the ByteBuf. In some cases that might not be enough
to identify the root cause of the leak.
Also, sometimes users might not be interested in tracing all the
operations on the buffer, but just the ones that are affecting the
reference count.

Modifications:

Added command line properties to override default values:
 * Allow to configure max number of stack traces to collect
 * Allow to only record retain/release operation on buffers

Result:
Users can increase the number of stack traces to debug buffer leaks
with lot of retain/release operations."
acf1b0f90b4ec934d27fb52ae965ce8e47f944c2,Fix code styles on MQTT codec classes
de7f9d491345976a5c54569422d394092e5e96f8,"Add TCP_USER_TIMEOUT

Motivation:

See #4174.

Modifications:

Modify transport-native-epoll to allow setting TCP_USER_TIMEOUT.

Result:

Hanging connections that are written into will get timeouted.

Conflicts:
	transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java"
141d4d0101cc1b2fe6b20e134e0796eeccb6b82c,Remove extra empty line introduced by 0c835420008bb1767ea1969cd8d63adf1c80e374
7a9a3159f9681291c0622d10592e0cd8b23dffd9,"Added debug logging with effective value for io.netty.leakDetection.acquireAndReleaseOnly property

Motivation:
The configurable property value recently added was not logged like others properties.

Modifications:
Added debug log with effective value applied.

Result:
Consistent with other properties"
0736a3bc35915ca3b9ae4a0f6362ced20d628ae0,"HTTP/2 SimplePromiseAggregator tryFailure not consistent with setFailure

Motivation:
The SimplePromiseAggregator.setFailure allows a failure to occur before newPromise is called, but tryFailure doesn't. These methods should be consistent.

Modifications:
- tryFailure should use the same logic as setFailure

Result:
Consistent failure routines."
41ee9148e585bda0d6d55ea5b10abe691a2d1332,"HTTP/2 InboundHttp2ToHttpAdapterTest serverChannel NPE

Motivation:
InboundHttp2ToHttpAdapterTest.bootstrapEnv does not wait for the serverConnectedChannel to be initialized before returning. Some methods rely only this behavior and throw a NPE because it may not be set.

Modifications:
- Add a CountDownLatch to ensure the serverConnectedChannel is initialized

Result:
No more NPE."
1e763b6504fa8550c20d49f02c3dfad3fc0c5a76,"LocalChannel write when peer closed leak

Motivation:
If LocalChannel doWrite executes while the peer's state changes from CONNECTED to CLOSED it is possible that some promise's won't be completed and buffers will be leaked.

Modifications:
- Check the peer's state in doWrite to avoid a race condition

Result:
All write operations should release, and the associated promise should be completed."
2eb444ec1da91e7e280418ed65f88becda96bd4e,[maven-release-plugin] prepare release netty-4.1.0.Beta6
34de2667c799bf24ae374ff28c658e9da21bae9f,[maven-release-plugin] prepare for next development iteration
30a770161626b74bf5b194075c77bdf2d2bc2d3c,"Add support for RFC2385 on Linux

Motivation:

There are protocols (BGP, SXP), which are typically deployed with TCP
MD5 authentication to protect sessions from being hijacked/torn down by
third parties. This facility is not available on most operating systems,
but is typically present on Linux.

Modifications:

- add a new EpollChannelOption, which is write-only
- teach Epoll(Server)SocketChannel to track which addresses have keys
  associated
- teach Native how to set the MD5 signature keys for a socket

Result:

Users of the native-epoll transport can set MD5 signature keys and thus
leverage RFC-2385 protection on TCP connections."
50d1f0a680d8fad51673e65a39d996cbb58183cc,"Http2Headers.iterator() comment correction

Motivation:
The javadoc comments on Http2Headers.iterator() are incorrect.

Modifications:
- Correct and clarify the javadoc for Http2Headers.iterator()

Result:
Javadoc for Http2Headers.iterator() is more correct."
983920f25f2319272e085beb8eaf10f0701df5a3,"RecvByteBufAllocator.DelegatingHandle accessor

Motivation:
RecvByteBufAllocator.DelegatingHandle does not provide an accessor to get the delegate handle. This may be useful for classes that extend DelegatingHandle.

Modifications:
- add delegate() method to DelegatingHandle

Result:
Classes which inherit from DelegatingHandle can now access the delegate Handle."
070f1470e8f98d35f9e0fed03716b00aa0058e53,"[#4185] SpdyHttpEncoder fails to convert HttpResponse to SpdyFrame

Motivation:

When SpdyHttpEncoder attempts to create an SpdyHeadersFrame from a HttpResponse an IllegalArgumentException is thrown if the original HttpResponse contains a header that includes uppercase characters. The IllegalArgumentException is thrown due to the additional validation check introduced by #4047.

Previous versions of the SPDY codec would handle this by converting the HTTP header name to lowercase before adding the header to the SpdyHeadersFrame.

Modifications:

Convert the header name to lowercase before adding it to SpdyHeaders

Result:

SpdyHttpEncoder can now convert a valid HttpResponse into a valid SpdyFrame"
58dc7f790231428edf2502ee4c4ca6ff29280832,"Do not bother closing SSL enging inbound if the outbound has already been closed.

Motivation:

Invoking the javax.net.ssl.SSLEngine.closeInbound() method will send a
fatal alert and invalidate the SSL session if a close_notify alert has
not been received.
From the javadoc:
If the application initiated the closing process by calling
closeOutbound(), under some circumstances it is not required that the
initiator wait for the peer's corresponding close message. (See section
7.2.1 of the TLS specification (RFC 2246) for more information on
waiting for closure alerts.) In such cases, this method need not be
called.
Always invoking the closeInbound() method without regard to whether or
not the closeOutbound() method has been invoked could lead to
invalidating perfectly valid SSL sessions.

Modifications:

Added an instance variable to track whether the
SSLEngine.closeOutbound() method has been invoked. When the instance
variable is true, the SSLEngine.closeInbound() method doesn't need to be
invoked.

Result:

SSL sessions will not be invalidated if the outbound side has been
closed but a close_notify alert hasn't been received."
7049d8debb74c05a542233f5b28b1655b07da306,"Add validateHeaders and headersToLowerCase options for SPDY

Motivation:

Related to issue #4185.

HTTP has the option to disable header validation for optimisation purposes.  Introduce the same option for SPDY headers.
Also, optimise SpdyHttpEncoder by allowing the user to specify whether or not the encoder needs to convert header names to lowercase.

Modifications:

Added flags for validation and conversion.

Result:

SpdyHeader validation and conversion can be disabled."
250a09df635d70853e1576a9e522c846e918938e,"Add support for RFC7413 on linux for server sockets

Motivation:

TCP Fast Open allows data to be carried in the SYN and SYN-ACK packets and consumed by the receiving end during the initial connection handshake, and saves up to one full round-trip time (RTT) compared to the standard TCP, which requires a three-way handshake (3WHS) to complete before data can be exchanged. This commit enables support for TFO on server sockets.

Modifications:

Added new Integer Option TCP_FASTOPEN in EpollChannelOption.
Added getters/setters in EpollServerChannelConfig for TCP_FASTOPEN.
Added way to check if TCP_FASTOPEN is supported on server in Native.
Added setting on socket opt TCP_FASTOPEN if value is set on channel options in doBind in EpollServerSocketChannel.
Enhanced EpollSocketTestPermutation to contain a permutation for server socket containing fast open.

Result:

Users of native-epoll can set TCP_FASTOPEN on server sockets and thus leverage fast connect features of RFC7413 if client is capable of it.

Conflicts:
	transport-native-epoll/src/main/java/io/netty/channel/epoll/EpollChannelOption.java"
47726991b21b53bd0c458a6d23a27d5c30b73b0d,"HTTP/2 Header Name Validation

Motivation:
The HTTP/2 header name validation was removed, and does not currently exist.

Modifications:
- Header name validation for HTTP/2 should be restored and set to the default mode of operation.

Result:
HTTP/2 header names are validated according to https://tools.ietf.org/html/rfc7540"
f89dfb0bd53af45eb5f1c1dcc7d9badd889d17f0,"Deprecation cleanup for HTTP headers

Motivaion:
The HttpHeaders and DefaultHttpHeaders have methods deprecated due to being removed in future releases, but no replacement method to use in the current release. The deprecation policy should not be so aggressive as to not provide any non-deprecated method to use.

Modifications:
- Remove deprecated annotations and javadocs from methods which are the best we can do in terms of matching the master's api for 4.1

Result:
There should be non-deprecated methods available for HttpHeaders in 4.1."
ba11879c9f8a2d8aae308d83be9f240606ab0d32,"HTTP/2 codec heap buffer usage

Motivation:
The HTTP/2 codec has a few static buffers sent over the network which are allocated on the heap. This results in a copy operation when the buffer is sent out on the network.

Modifications:
- Ensure these static buffers are allocated using direct memory.

Result:
No copy operation necessary when writing static buffers to network."
b66b38d3e417324e4eae965795b94976baa9eb11,"Update twitter hpack version

Motivation:
https://github.com/twitter/hpack released version v1.0.1.

Modifications:
- Update pom files to pull in new version

Results:
Depend on the most recent hpack library."
2dde3a386bd3652a92c0c862b6588878bd94fe16,"[#3687] Correctly store WebSocketServerHandshaker in Channel attributes

Motivation:

As we stored the WebSocketServerHandshaker in the ChannelHandlerContext it was always null and so no close frame was send if WebSocketServerProtocolHandler was used.

Modifications:

Store WebSocketServerHAndshaker in the Channel attributes and so make it visibile between different handlers.

Result:

Correctly send close frame."
6e3acfeb06e68fb68c7dbb5e5a847298c051c1af,"Correctly throw SSLPeerUnverifiedException if peers identity has not been verified

Motivation:

As stated in the SSLSession javadocs getPeer* methods need to throw a SSLPeerUnverifiedException if peers identity has not be verified.

Modifications:

- Correctly throw SSLPeerUnverifiedException
- Add test for it.

Result:

Correctly behave like descripted in javadocs."
30b30f77c6235a5d47f72d19b23bc58b54d941b2,"Support SSLSession.getLocalCertificates() and getLocalPrincipal() when using OpenSSL

Motivation:

SSLSession.getLocalCertificates() and getLocalPrincipal() was not supported when using OpenSSL, which can produce problems when switch from JDK to OpenSSL impl.

Modifications:

Implement SSLSession.getLocalCertificates() and getLocalPrincipal() for OpenSslEngine.

Result:

More consistent behaving between JDK and OpenSSL based SSLEngine."
cac51ab8d68412a3db6b6c3310e5ed0f842865c2,"Optimize ByteBufUtil.writeUsAscii(...) when AsciiString is used.

Motivation:

When AsciiString is used we can optimize the write operation done by ByteBufUtil.writeUsAscii(...)

Modifications:

Sepcial handle AsciiString.

Result:

Faster writing of AsciiString."
076d4ed5147f186b5e5a25945b77bce63c0d0165,"[#4205] Correctly set EPOLLOUT flag whe writeBytes(...) was not able to write everything

Motivation:

writeBytes(...) missed to set EPOLLOUT flag when not all bytes were written. This could lead to have the EpollEventLoop not try to flush the remaining bytes once the socket becomes writable again.

Modifications:

- Move setting EPOLLOUT flag logic to one point so we are sure we always do it.
- Move OP_WRITE flag logic to one point as well.

Result:

Correctly try to write pending data if socket becomes writable again."
59600f1812969abe2bb84d64439c58286011ea2c,"HTTP/2 to HTTP/1.x headers conversion more accessible

Motivation:
Currently there is a HttpConversionUtil.addHttp2ToHttpHeaders which requires a FullHttpMessage, but this may not always be available. There is no interface that can be used with just Http2Headers and HttpHeaders.

Modifications:
- add an overload for HttpConversionUtil.addHttp2ToHttpHeaders which does not take FullHttpMessage

Result:
An overload for HttpConversionUtil.addHttp2ToHttpHeaders exists which does not require FullHttpMessage."
15450af2e7c533c30cfdd52882a02006ba2fde00,"DefaultHttp2FrameWriter ping payload size check

Motivation:
The HTTP/2 spec states that the ping frame length must be 8 and is otherwise an error https://tools.ietf.org/html/rfc7540#section-6.7. The DefaultHttp2FrameReader enforces this, but the DefaultHttp2FrameWriter allows invalid frames to be written. We should not allow invalid ping frames to be written to the network.

Modifications:
- DefaultHttp2FrameWriter checks the frame size to be 8, or throws an exception

Result:
Fixes https://github.com/netty/netty/issues/3721"
2a4276e1ff8aff5c4986a3c90c0cb60e52e32f65,"SpdyHttpHeaders are not lowercase

Motivation:
According to the SPDY spec https://www.chromium.org/spdy/spdy-protocol/spdy-protocol-draft3-1#TOC-3.2.1-Request header names must be lowercase. Our predefined SPDY extension headers are not lowercase.

Modifications
- SpdyHttpHeaders should define header names in lower case

Result:
Compliant with SPDY spec, and header validation code does not detect errors for our own header names."
2a27d581a9a814a4a2103f7cd0a56c9e7019e339,"Ensure close caused by write will happen before write promise is notified

Motiviation:

We need to ensure the actual close to the transport takes place before the promsie of the write is notified that triggered it. This is needed as otherwise Channel.isActive(), isOpen() and isWritable() may return true even if the Channel should be closed already.

Modifications:

- Ensure the close takes place first

Result:

ChannelFutureListener will see the correct state of the Channel."
1d4d5fe312d6651bcbd5e3aea94f85844d3a0a8c,"DefaultHttp2Headers should throw exception of type Http2Exception

Motivation:
The DefaultHttp2Headers code is throwing a IllegalArgumentException if an invalid character is detected. This is being ignored by the HTTP/2 codec instead of generating a GOAWAY.

Modifications:
- Throw a Http2Exception of type PROTOCOL_ERROR in accordance with https://tools.ietf.org/html/rfc7540#section-8.1.2.6
- Update examples which were building invalid headers

Result:
More compliant with https://tools.ietf.org/html/rfc7540#section-8.1.2.6"
c7e3f6c6fd107624c6463283d88d04865207d32e,"HTTP/2 defines using String instead of CharSequence

Motivation:
Http2CodecUtils has some static variables which are defined as Strings instead of CharSequence. One of these defines is used as a header name and should be AsciiString.

Modifications:
- Change the String defines in Http2CodecUtils to CharSequence

Result:
Types are more consistently using CharSequence and adding the upgrade header will require less work."
3ee44a3dbb3608858d10e8215cf5d01ccb6f6015,"Update Netty to latest netty-tcnative

Motivation:

The latest netty-tcnative fixes a bug in determining the version of the runtime openssl lib.  It also publishes an artificact with the classifier linux-<arch>-fedora for fedora-based systems.

Modifications:

Modified the build files to use the ""-fedora"" classifier when appropriate for tcnative. Care is taken, however, to not change the classifier for the native epoll transport.

Result:

Netty is updated the the new shiny netty-tcnative."
a1d0207ec52639f3ce65801a869565af53d19731,"Adding client auth to SslContextBuilder

Motivation:

To simplify the use of client auth, we need to add it to the SslContextBuilder.

Modifications:

Added a ClientAuth enum and plumbed it through the builder, down into the contexts/engines.

Result:

Client auth can be configured when building an SslContext."
6241bb059cd0d565da2f58391f2490296608208f,"[#4244] Convert urlencoded uri to http2 path correctly

Motivation:

HttpConversionUtil.toHttp2Headers does not convert urlencoded uri to http2 path properly.

Modifications:

Use getRawPath(), getRawQuery(), getRawFragment() in java.net.URI when converts to http2 path

Result:

HttpConversionUtil.toHttp2Headers does not urldecode uri unproperly."
ec20902613a0384300584a4900a11e118bcecf69,"Don't set HTTP/2 flow controller ctx to null

Motivation:

We currently set the flow controller ChannelHandlerContexts to null when the channel becomes inactive. This is bad :)

Modifications:

Just remove that code in Http2ConnectionHandler

Result:

Fixes #4240"
276613c63c05cbdfa56e1ef3f216ca6d95ffedd1,"Not use RC4 for renegation as it is not supported in more recent java versions.

Motivation:

RC4 is not supported by default in more recent java versions as RC4 is considered insecure. We should not use it in tests as these test will fail on more recent java version.

Modifications:

Use SSL_RSA_WITH_3DES_EDE_CBC_SHA for test.

Result:

Non failing test on more recent java versions."
beb75f0a04617faf19d80c9d42bea38c0ee7b22d,"Upgrade to new os-maven-plugin

Motivation:

The last os-maven-plugin had a bug that sometimes missed to correctly detect fedora based linux.

Modifications:

Upgrade to 1.4.1

Result:

Correctly detect on all fedora based linux."
24c94070801d480d2b719de54181b3d60abf0444,"DefaultHttp2RemoteFlowController may not write all pending bytes

Motivation:
DefaultHttp2RemoteFlowController attempts to write as many bytes as possible to transition the channel to not writable, and then relies on notification of channelWritabilityChange to continue writing. However the amount of bytes written by DefaultHttp2RemoteFlowController may not be the same number of bytes that is actually written to the channel due to other ChannelHandlers (SslHandler, compression, etc...) in the pipeline. This means there is a potential for the DefaultHttp2RemoteFlowController to be waiting for a channel writaiblity change event that will never come, and thus not write all queued data.

Modifications:
- DefaultHttp2RemoteFlowController should write pending bytes until there are no more, or until the channel is not writable.

Result:
DefaultHttp2RemoteFlowController will write all pending data.
Fixes https://github.com/netty/netty/issues/4242"
7adc1f9eb424b1a52187e25f6671af9f58474fca,"STOMP Headers Name Comparator

Motivation:
The HashingStrategy for DefaultStompHeaders was using the java .equals() method which would fail to compare String, AsciiString, and other CharSequence objects as equal.

Modification:
- Use AsciiString.CASE_SENSITIVE_HASHER for DefaultStompHeaders

Result:
DefaultStompHeaders work with all CharSequence objects.
Fixes https://github.com/netty/netty/issues/4247"
edb91afcd6cd4347c046372d05f28f0b5985ba99,"Http2LifecycleManager.onException rename

Motivation:
Http2LifecycleManager.onException takes a Throwable as a paramter and not an Exception. There are also onConnectionError and onStreamError methods in the codec. We should rename this method to onError for consistency and clarity.

Modifications:
- Rename Http2LifecycleManager.onException to Http2LifecycleManager.onError

Result:
More consistent and clarified interface."
ed4928f62a5a1c9a951040f279ed43a1705dc000,"StreamBufferingEncoderTest leak

Motivation:
Buffer leak in StreamBufferingEncoderTest

Modifications:
- Make sure buffers are released in StreamBufferingEncoderTest

Result:
Fixes https://github.com/netty/netty/issues/4230"
c116c35ed00c88d8aa9771e930ede0b775ebd3e5,"SelfSignedCertificate configurable valid dates

Motivation:
Users may want to control the valid dates for SelfSignedCertificate.

Modifications:
- Allow NOT_BEFORE and NOT_AFTER to be controlled via java system properties.

Result:
Fixes https://github.com/netty/netty/issues/3978"
c372f691185973f11651878d70c9f5d309542533,"http2.HttpConversionUtil :authority conversion error

Motiviation:
The http2 spec https://tools.ietf.org/html/rfc7540#section-8.1.2.3 states that the :authority header should be copied into the HOST header when converting from HTTP/2 to HTTP/1.x. We currently have an extension header to preserve the authority.

Modifications:
- Remove AUTHORITY extension header
- HTTP/2 :authority should map to HOST header when converting to HTTP/1.x.

Result:
More spec compliant."
4f40913b3352efa9c8e43e535f31276bae6da84f,"Use NetUtil.LOCALHOST4 instead of InetAddress.getLocalHost()

Motivation:

On ubuntu, InetAddress.getLocalHost() will return 127.0.1.1 this causes some tests to fail.
NetUtil.LOCALHOST4 is more portable.

Modifications:

Made changes in EpollSocketTcpMd5Test to make test passing on ubuntu.

Result:

EpollSocketTcpMd5Test now also passes on ubuntu."
6c6c369c68dea9aab20a906793f81363f54c389c,"[#4235] Ensure OpenSslEngine.unwrap(...) / wrap(...) correctly return HandshakeStatus.FINISHED

Motivation:

OpenSslEngine.unwrap(...) / wrap(...) must return HandhsakeStatus.FINISHED if an unwrap or wrap finishes a handshake to behave like descripted in the SSLEngine docs.

Modifications:

- Ensure we return HandshakeStatus.FINISHED

Result:

Behave correctly."
c47106587a465d83344469bb5001b84d442f225d,"Unused paramters introduced by https://github.com/netty/netty/pull/4257

Motivation:
PR https://github.com/netty/netty/pull/4257 introduced paramters and didn't use them.

Modifications:
- Use the new paramters

Result:
No warnings and correct behavior"
115d3576be47804aa985d1749e0cfa427d3714f9,"Update the public DNS server list

Motivation:

Some DNS servers in DnsNameResolverTest are outdated and some of them
returns NoError for non-existent domains.

Modifications:

- Update the DNS server list from http://meo.ws/dnsrec.php again
- Update the web-scraper script

Result:

DnsNameResolverTest.testNegativeTtl() should not fail anymore."
956a757d37c52d550aebdbfaf3d68863baa2a765,"[#3789] Correctly reset markers for all allocations when using PooledByteBufAllocator

Motivation:

We need to ensure all markers are reset when doing an allocation via the PooledByteBufAllocator. This was not the always the case.

Modifications:

Move all logic that needs to get executed when reuse a PooledByteBuf into one place and call it.

Result:

Correct behavior"
747533408dbf3fa04fe0753e0f20cf80b8ac66ed,"[#4170] Shutdown socket before close fd when using epoll transport

Motivation:

We should call shutdown(...) on the socket before closing the filedescriptor to ensure it is closed gracefully.

Modifications:

Call shutdown(...) before close.

Result:

Sockets are gracefully shutdown when using native transport."
93011dd3159e2371d583e84ffae3fa6eac4ed723,"DefaultHttp2RemoteFlowController not allocating all available bytes

Motivation:
DefaultHttp2RemoteFlowController's allocation algorithm may not allocate all bytes that are available in the connection window. If the 'fair share' based upon weight is not fully used by sibling nodes it was not correctly re-distributed to other sibilings which may be able to utilize part / all of that share.

Modifications:
- Add a unit test which demonstrates the issue.
- Modify the allocation algorithm to ensure all available bytes are allocated.

Result:
Fixes https://github.com/netty/netty/issues/4266"
2766fc49e26d4a69c5a374fc53eee5c40d7f86c7,"Expose new way of setting session keys

Motivation:

We should provide a better way to set session keys that not use the deprecated method of netty-tcnative.

Modifications:

- Add OpenSslSessionTicketKey
- Expose new method on OpenSslServerContext and deprecate the old method.

Result:

Easier to use and can remove the deprecated method later on."
7ab132f28aeb1190eff5def4ffda0546f9aa386f,"Making HTTP/2 stream byte assignment pluggable

Motivation:

The DefaultHttp2RemoteFlowController has become very large and is getting difficult to understand and maintain. It is also desirable for some applications to be able to disable the priority algorithm altogether for performance reasons.

Modifications:

Abstract the stream byte assignment logic (renamed allocation->assignment for clarity) behind an interface `StreamByteAssigner` with a single implementation `PriorityStreamByteAssigner`.

Result:

Goes some way towards supporting #4246"
0e9545e94d3128e1069ef96621d1fd984918d4e3,"Http2RemoteFlowController stream writibility listener

Motivation:
For implementations that want to manage flow control down to the stream level it is useful to be notified when stream writability changes.

Modifications:
- Add writabilityChanged to Http2RemoteFlowController.Listener
- Add isWritable to Http2RemoteFlowController

Result:
The Http2RemoteFlowController provides notification when writability of a stream changes."
c8a941d01e85148c21cc01bae80764bc134b1fdd,"[#4275] Discard bytes after X reads to guard against OOME.

Motivation:

If a remote peer writes fast enough it may take a long time to have fireChannelReadComplete(...) triggered. Because of this we need to take special care and ensure we try to discard some bytes if channelRead(...) is called to often in ByteToMessageDecoder.

Modifications:

- Add ByteToMessageDecoder.setDiscardAfterReads(...) which allows to set the number of reads after which we try to discard the read bytes
- Use default value of 16 for max reads.

Result:

No risk of OOME."
2adf6e5358eed27144f9582fdc652a5bf0eb49ce,"Better parsing for STOMP body with no length.

Motivation:

The STOMP decoder used to fail when parsing a frame with no content-length
and a body split across multiple packets.

Modifications:

Support contentLength of -1 (indicating indeterminate length) and added a
check to getContentLength.  Moved the NUL byte searching from the
readHeaders() method out to the main decoder loop.

Result:

A STOMP frame can be properly parsed even if it's missing the
content-length header and the NUL byte is in a later packet."
ca44436ce6c5bf7a7b58c1842f82a4f6aa3ae2d6,"[#4265] Not allow to add/set DefaultHttpHeaders to itself.

Motivation:

We should prevent to add/set DefaultHttpHeaders to itself to prevent unexpected side-effects.

Modifications:

Throw IllegalArgumentException if user tries to pass the same instance to set/add.

Result:

No surprising side-effects."
06fcb569802da6be93ad30f6e75dacebdb1dd59b,"Upgrade to netty-tcnative 1.1.33.Fork8

Motivation:

A new version of netty-tcnative was released with some important bug-fixes.

Modifications:

Bump up version.

Result:

Using latest netty-tcnative version"
173ebb95385ef316700d71f8443232cf4feed634,Fix enforcer rule for new os detection plugin
2ffe7bd72e640d2c9df5cca3818e0d36e91622ce,"Fail build on warnings in the native transport

Motivation:

We should fail the build on warnings in the JNI/c code.

Modifications:

- Add GCC flag to fail build on warnings.
- Fix warnings (which also fixed a bug when using splice with offsets).

Result:

Better code quality."
1485a87e25f6615534241d32e69a19134ba76317,"Http2ConnectionHandler and Http2FrameListener cyclic dependency

Motivation:
It is often the case that implementations of Http2FrameListener will want to send responses when data is read. The Http2FrameListener needs access to the Http2ConnectionHandler (or the encoder contained within) to be able to send responses. However the Http2ConnectionHandler requires a Http2FrameListener instance to be passed in during construction time. This creates a cyclic dependency which can make it difficult to cleanly accomplish this relationship.

Modifications:
- Add Http2ConnectionDecoder.frameListener(..) method to set the frame listener. This will allow the listener to be set after construction.

Result:
Classes which inherit from Http2ConnectionHandler can more cleanly set the Http2FrameListener."
179cd9a4a124e08ca650729835d9873af10ea6bc,"Correctly update internal handshake state on beginHandshake()

Motivation:

We missed to correctly update the internal handshake state on beginHandshake() if we was able to finish the handshake directly. Also we not handled the case correctly when beginHandshake() was called after the first handshake was finished, which incorrectly throw an Error.

Modifications:

- Correctly set internal handshake state in all cases
- Correctly handle beginHandshake() once first handshake was finished.

Result:

Correctly handle OpenSslEngine.beginHandshake()"
284e3702d87a7efdae5ebacd7d42c54b54dd569a,"Http2ConnectionHandler Builder instead of constructors

Motivation:
Using the builder pattern for Http2ConnectionHandler (and subclasses) would be advantageous for the following reasons:
1. Provides the consistent construction afforded by the builder pattern for 'optional' arguments. Users can specify these options 1 time in the builder and then re-use the builder after this.
2. Enforces that the Http2ConnectionHandler's internals (decoder Http2FrameListener) are initialized after construction.

Modifications:
- Add an extensible builder which can be used to build Http2ConnectionHandler objects
- Update classes which inherit from Http2ConnectionHandler

Result:
It is easier to specify options and construct Http2ConnectionHandler objects."
5deec9631f31efaea105988a1a814f15881f699a,"Add support for server-side renegotiation when using OpenSslEngine.

Motivation:

JDK SslEngine supports renegotion, so we should at least support it server-side with OpenSslEngine as well.

That said OpenSsl does not support sending messages asynchronly while the renegotiation is still in progress, so the application need to ensure there are not writes going on while the renegotiation takes place. See also https://rt.openssl.org/Ticket/Display.html?id=1019 .

Modifications:

- Add support for renegotiation when OpenSslEngine is used in server mode
- Add unit tests.
- Upgrade to netty-tcnative 1.1.33.Fork9

Result:

Better compatibility with the JDK SSLEngine implementation."
06c3ae07a0900cb3ffedaf1769b81c64d0948d39,"DefaultHttp2ConnectionDecoder write ping buffer

Motivation:
DefaultHttp2ConnectionDecoder writes a ACK when receiving a ping frame and sends the same data buffer it received. The data buffer is also passed to the listener, but the indexes are shared between the send and the listener. We should ensure the indexes are independent for these two operations.

Modifications:
- Call slice on the buffer that is being sent

Result:
Listener now has access to a buffer that will not appear to be already consumed."
d4680c55d826f30b275bb625aaa7277c87945f7b,"AsciiString contains utility methods

Motivation:
When dealing with case insensitive headers it can be useful to have a case insensitive contains method for CharSequence.

Modifications:
- Add containsCaseInsensative to AsciiString

Result:
More expressive utility method for case insensitive CharSequence."
67ddb61ecaba71cfd6840cd9fc751e899085c069,"ByteBufUtilTest test failure

Motivation:
ByteBufUtilTest.notEqualsBufferSubsections is testing non-equality but just uses random numbers to assume they will not be equal. Even after the random bytes are generated we should check they are infact not equal so the test has no chance of failing when it should not.

Modifications:
- Loop through bytes in notEqualsBufferSubsections after they are randomly generated to ensure there is atleast 1 difference.

Result:
More reliable unit tests."
dc6cb7545b1e4651e4928a30267f4f952d47dc94,"Lazy compute SSLSession creation time.

Motivation:

As a SSL session may be created later at some time we should compute the creation time in a lazy fashion.

Modifications:

- Lazy compute creation time
- Add some unit test

Result:

More correct behavior"
5a43de10f7470f7132070565fbcb1ac9da6c599d,[maven-release-plugin] prepare release netty-4.1.0.Beta7
2ff2806ada06d4ba902eb9918a0f3375de4515d9,[maven-release-plugin] prepare for next development iteration
b2399c2475db14c1038432129545845785a73563,"EPOLL Shutdown Input Half Closed

Motivation:
EPOLL attempts to support half closed socket, but fails to call shutdown to close the read portion of the file descriptor.

Motivation:
- If half closed is supported shutting down the input should call underlying Native.shutdown(...) to make sure the peer is notified of the half closed state.

Result:
EPOLL half closed is more correct."
32231ee2e05e2979e4c76220945b99c6712fd582,"EPOLL RDHUP and IN at same time

Motivation:
If a RDHUP and IN event occurred at the same time it is possible we may not read all pending data on the channel. We should ensure we read data before processing the RDHUP event.

Modifications:
- Process the RDHUP event before the IN event.

Result:
Data will not be dropped.
Fixes https://github.com/netty/netty/issues/4317"
2f8bc24c622790e94181d19cd054987a1a4498cb,Fix compile error introduced by 32231ee
e4195334988236e7e30a4a802630b14956ce5b4b,"Remove unused parameter from method declaration.

Motivation:

We had an unused paramter on a method, we should just remove it to keep code clean.

Modifications:

- Remove parameter
- Fix typo in javadoc

Result:

Cleanup done."
fbaf5d06e65f9adaf57bc6bb9d566b64b40a3830,"[#4316] Ensure pending tasks are run when EmbeddedChannel.close(...) or disconnect(...) is called.

Motivation:

We missed to run all pending tasks when EmbeddedChannel.close(...) or disconnect(...) was called. Because of this channelInactive(...) / channelUnregistered(...) of the handlers were never called.

Modifications:

Correctly run all pending tasks and cancel all not ready scheduled tasks when close or disconnect was called.

Result:

Correctly run tasks on close / disconnect and have channelInactive(...) / channelUnregistered(...) called."
66c3c58d3e52c22d32a1b41bdbb6b9ab47bdc2fe,"Reduce object creation for for unwrap/wrap if no ByteBuffer[] is used.

Motivation:

Often unwrap(...), wrap(...) is used with a single ByteBuffer and not with a ByteBuffer[]. We should reduce the array creations in this case.

Modifications:

Reuse ByteBuffer[1] for dst/src ByteBuffer.

Result:

Less object creation and so less GC"
11e8163aa9d29074d5002da662c5284e82ecd0d4,"[#4284] Forward decoded messages more frequently

Motivation:

At the moment we only forward decoded messages that were added the out List once the full decode loop was completed. This has the affect that resources may not be released as fast as possible and as an application may incounter higher latency if the user triggeres a writeAndFlush(...) as a result of the decoded messages.

Modifications:

- forward decoded messages after each decode call

Result:

Forwarding decoded messages through the pipeline in a more eager fashion."
81a913ced197c2a1c3219ab602c49ded9ec195e7,"ByteBufUtilTest bug

Motivation:
The logic in ByteBufUtilTest.ByteBufUtilTest is wrong. It is attempting to ensure at least 1 byte is different in the ranges that will be subsequently compared, but does so before the copy operation.

Modifications:
- Move the code which ensures there is a difference to after the copy
- Simplify the logic which ensures there is a difference

Result:
Unit test now operates as designed."
2d7e957a2388e660af8350342437e29271636a23,"Cleanup PendingWriteQueueTest

Motivation:

PendingWriteQueueTest needs some cleanup.

Modifications:

- Cleanup code to remove deprecation warnings
- use static imports

Result:

No more warnings"
99b11c95b4d9efc180fe2d6f35436a7d49b54106,"[#4327] Ensure toString() will not throw IllegalReferenceCountException

Motivation:

As toString() is often used while logging we need to ensure this produces no exception.

Modifications:

Ensure we never throw an IllegalReferenceCountException.

Result:

Be able to log without produce exceptions."
0740f703c1cdde0f7d6147c4131814825b83bc72,change type definition of pipeline from DefaultChannelPipeline to ChannelPipeline
42e6b8fa86c86f0dfa7c4af621acf8e184094814,"[#4289] Use a mock DNS Server for dns tests.

Motivation:

As relaying on external DNS Server can result to test-failures we should better use a mock DNS Server for the dns tests.

Modifications:

- Refactor the DnsNameResolverTest to use a mock DNS Server which is using apacheds.
- Allow to disable adding an opt resources as some servers not support it.

Result:

More stable testsuite."
30dc1c1fa4249609551608c20fb0f42475502eab,"[#4313] ByteBufUtil.writeUtf8 should use fast-path for WrappedByteBuf

Motivation:

ByteBufUtil.writeUtf8(...) / writeUsAscii(...) can use a fast-path when writing into AbstractByteBuf. We should try to unwrap WrappedByteBuf implementations so
we are able to do the same on wrapped AbstractByteBuf instances.

Modifications:

- Try to unwrap WrappedByteBuf to use the fast-path

Result:

Faster writing of utf8 and usascii for WrappedByteBuf instances."
b58036aeea21497797b648506b75b25b187b35a2,"Improve flexibility of EmbeddedChannel ID

Motivation:

EmbeddedChannelId#hashCode() and equals() do not behave correctly if an
instance is serialized and then deserialized. Additionally,
EmbeddedChannel does not allow use of any other type of ChannelId, and
EmbeddedChannelId is (mostly) a singleton instance. This creates a
problem for unit tests that construct multiple EmbeddedChannels and
expect each channel to have a unique ID.

Modifications:

EmbeddedChannelId is modified so equals() will return true and
hashCode() will return the same value for any instance of the class.
EmbeddedChannel is modified to allow a ChannelId to be specified when
the channel is constructed. Tests added for both changes.

Result:

EmbeddedChannelId now behaves correctly when deserialized, and
EmbeddedChannels can now have unique IDs."
6ebf4d1f5be83c1f87284c61828beeb166a857d4,"[#4347] Remove not needed write operation from example.

Motivation:

The proxy example contains some code that is not needed. This can confuse the reader.

Modifications:

Remove the not needed ctx.write(...).

Result:

Less confusing code."
077af8c019921e2b5a66fd72e7105a680b7f9327,"Remove encoderMaxConcurrentStreams

Motivation:

Remove encoderMaxConcurrentStreams(...) and use the default settings. Also throw an exception if server mode is used.

Modifications:

- Remove encoderMaxConcurrentStreams(...) method
- Throw exception if server mode is used and trying to enforce conncurrent streams.

Result:

Correctly support settings stuff via builder"
ffe7aafd8252a382aa0a651d3e9fb84065304da6,"Optimize and minimize bound checks

Motivation:

We should minimize and optimize bound checks as much as possible to get the most out of performance.

Modifications:

- Use bitwise operations to remove branching
- Remove branches when possible

Result:

Better performance for various operations."
9697afc1062fb43943e652e87196ac7785b5516f,"Allow to disable reference count checks on every access of the ByteBuf

Motiviation:

Checking reference count on every access on a ByteBuf can have some big performance overhead depending on how the access pattern is. If the user is sure that there are no reference count errors on his side it should be possible to disable the check and so gain the max performance.

Modification:

- Add io.netty.buffer.bytebuf.checkAccessible system property which allows to disable the checks. Enabled by default.
- Add microbenchmark

Result:

Increased performance for operations on the ByteBuf."
0555b0aefd93d2ddbf68f0163ec9751a5e80b3c8,"HTTP Headers Over Deprecation

Motivation:
As part of recent efforts to rectify performance and make 4.1 headers more similar to 5.0 some methods were deprecated. Some of these methods were deprecated because they used String instead of CharSequence in the signature, which may require casting at the user level. Some of the deprecated methods have no direct alternatives and were done to inform a user the method will go away in future releases.

Modifications:
- Remove the deprecated qualifier from methods where no direct replacement exists

Result:
Less warnings in user code."
4aa19a09bd543852c917aa86e1f4b5697b7f5c94,"Implement SSLSession.invalidate() and isValid() for OpenSSLEngine.

Motivation:

The SSLSession allows to invalidate a SSLSession and so disallow resume of a session. We should support this for OpenSSLEngine as well.

Modifications:

- Correctly implement SSLSession.isValid() and invalidate() in OpenSSLEngine
- Add unit test.

Result:

Invalidate of SSL sessions is supported when using OpenSSL now."
2aef4a504fd01a82be2097ac44610d6a6ced54b8,"Minimize object allocation when calling AbstractByteBuf.toString(..., Charset)

Motivation:

Calling AbstractByteBuf.toString(..., Charset) is used quite frequently by users but produce a lot of GC.

Modification:

- Use a FastThreadLocal to store the CharBuffer that are needed for decoding.
- Use internalNioBuffer(...) when possible

Result:

Less object creation / Less GC"
8c93f4b1efbbb6e75038a6a7a18cf005d3792c84,"Added DuplicatedAbstractByteBuf that can provide fast-path for _get* and _set* methods

Motivation:

DuplicatedByteBuf can be used for any ByteBuf implementations and so can not do any optimizations that could be done
when AbstractByteBuf is duplicated.

Modifications:

- Add DuplicatedAbstractByteBuf that can eliminate range and reference count checks for _get* and _set* methods.

Result:

Faster DuplicatedByteBuf implementations for AbstractByteBuf sub-classes."
4c287d4e27179997822bf490946382d073120a88,"Added SlicedAbstractByteBuf that can provide fast-path for _get* and _set* methods

Motivation:

SlicedByteBuf can be used for any ByteBuf implementations and so can not do any optimizations that could be done
when AbstractByteBuf is sliced.

Modifications:

- Add SlicedAbstractByteBuf that can eliminate range and reference count checks for _get* and _set* methods.

Result:

Faster SlicedByteBuf implementations for AbstractByteBuf sub-classes."
d5f502d940fb5a577fd9c55463ee675af44a3262,"Native getSoError bug

Motivation:
Java_io_netty_channel_epoll_Native_getSoError incorrectly returns the value from the get socket option function.

Modifications:
- return the value from the result of the get socket option call

Result:
Java_io_netty_channel_epoll_Native_getSoError returns the correct value."
8f13e333dd7b18fa6a287bb91e50f7b029a804ef,"Always return a real slice even when the length is 0

Motivation:

We need to always return a real slice even when the requested length is 0. This is needed as otherwise we not correctly share the reference count and so may leak a buffer if the user call release() on the returned slice and expect it to decrement the reference count of the ""parent"" buffer.

Modifications:

- Always return a real slice
- Add unit test for the bug.

Result:

No more leak possible when a user requests a slice of length 0 of a SlicedByteBuf."
bd4df20eb3f97f9d73d49667ddebaa7a14f701b1,"Cleanup buffer tests.

Motivation:

Some of the tests in the buffer module contained unused code. Some of the tests also used unnecessary inheritance which could be avoided to simplify code.

Modifications:

Cleanup the test cases.

Result:

Cleaner code, less cruft."
b7e947709ef28f0e60177f99298ef137ea46f18c,"[#4357] Fix possible assert error in GlobalEventExecutor

Motivation:

We started the thread before store it in a field which could lead to an assert error when the thread is executed before we actually store it.

Modifications:

Store thread before start it.

Result:

No more assert error possible."
5a6238ed4c1f9c81de5cb0e9106e886420eb97a0,"Minimize reference count checks in SlicedByteBuf

Motivation:

SlicedByteBuf did double reference count checking for various bulk operations, which affects performance.

Modifications:

- Add package private method to AbstractByteBuf that can be used to check indexes without check the reference count
- Use this new method in the bulk operation os SlicedByteBuf as the reference count checks take place on the wrapped buffer anyway
- Fix test-case to not try to read data that is out of the bounds of the buffer.

Result:

Better performance on bulk operations when using SlicedByteBuf (and sub-classes)"
27c68647df61562984b279d7e2c2d21b56d4075e,"In (Pooled|Unpooled)UnsafeDirectByteBuf copy memory directly to and from ByteBuffer

Motivation:

When moving bytes between a PooledUnsafeDirectByteBuf or an UnpooledUnsafeDirectByteBuf
and a ByteBuffer, a temp ByteBuffer is allocated and will need to be GCed. This is a
common case since a ByteBuffer is always needed when reading/writing on a file,
for example.

Modifications:

Use PlatformDependent.copyMemory() to avoid the need for the temp ByteBuffer

Result:

No temp ByteBuffer allocated and GCed."
f30a51b905187c3cb2af69bf238f5dd3c6991b2f,"Correctly handle byte shifting if system does not support unaligned access.

Motivation:

We had a bug in our implemention which double ""reversed"" bytes on systems which not support unaligned access.

Modifications:

- Correctly only reverse bytes if needed.
- Share code between unsafe implementations.

Result:

No more data-corruption on sytems without unaligned access."
7d4c077492ba5b40595b0742e7b22182c544f7b7,"Add *UnsafeHeapByteBuf for improve performance on systems with sun.misc.Unsafe

Motivation:

sun.misc.Unsafe allows us to handle heap ByteBuf in a more efficient matter. We should use special ByteBuf implementation when sun.misc.Unsafe can be used to increase performance.

Modifications:

- Add PooledUnsafeHeapByteBuf and UnpooledUnsafeHeapByteBuf that are used when sun.misc.Unsafe is ready to use.
- Add UnsafeHeapSwappedByteBuf

Result:

Better performance when using heap buffers and sun.misc.Unsafe is ready to use."
b90685d3c9f88765471af444e7e49a5825929fef,"Not share FixedRecvByteBufAllocator.HandleImpl

Motivation:

As MaxMessageHandle is stateful we can not share the same HandleImpl instance as otherwise we will see race conditions.

Modifications:

Create a new HandleImpl instance on each newHandle() call.

Result:

No more races."
992f8db0b4559216a52b26a339f4f7f823807a4b,"Share code between Heap ByteBuf implementations

Motiviation:

We have a lot of duplicated code which makes it hard to maintain.

Modification:

Move shared code to HeapByteBufUtil and use it in the implementations.

Result:

Less duplicated code and so easier to maintain."
2be4bb74a5538b76650b1e6992a8c0eec279f31b,"Share code between Unsafe ByteBuf implementations

Motiviation:

We have a lot of duplicated code which makes it hard to maintain.

Modification:

Move shared code to UnsafeByteBufUtil and use it in the implementations.

Result:

Less duplicated code and so easier to maintain."
8687475eb77e794ed56e8285aa0dc982d93a1048,"[#4373] Fix assert error when trying to release Channel to closed FixedChannelPool

Motivation:

Once a FixedChannelPool was closed we must not allow to acquire or release Channels to prevent assert errors.

Modifications:

Fail release and acquire calls when FixedChannelPool is closed.

Result:

No more assert errors.1"
85236d5446b4858df20dc6bd270735490c807666,"[#4355] OpenSslServerContext reinitializes the provided TrustManagerFactory with the key cert chain.

Motivation:

OpenSslServerContext should not reinitialize the provided TrustManagerFactory with the key cert chain as the user should be able to pass a fully initialized TrustManagerFactory. This is also in line with how JdkSslServerContext works.

Modifications:

Not reinitialize the provided TrustManagerFactory with the key cert chain.

Result:

Correct and consistent behavior."
d93f9062554d07eec6d376d85d886e40b6a907f7,"[#4198] Fix race-condition when allocate from multiple-thread.

Motivation:

Fix a race condition that was introduced by f18990a8a507d52fc40416d169db340105b10ec0 that could lead to a NPE when allocate from the PooledByteBufAllocator concurrently by many threads.

Modifications:

Correctly synchronize on the PoolSubPage head.

Result:

No more race."
c068ae8d84787d618e6bebf942af50dea2c19c16,Fix the 'branches to look' section
e121c68e0fb633b1fceca24ad0f5b04d14879990,"Created RTSPEncoder and RTSPDecoder which are now common for both requests and responses to be able to handle both types of messages on the same channel.

Keep RTSPRequestEncoder, RTSPRequestDecoder, RTSPResponseEncoder and
RTSPResponseDecoder for backwards compatibility but they now just extends
the generic encoder/decoder and are markes as deprecated.

Renamed the decoder test, because the decoder is now generic. Added
testcase for when ANNOUNCE request is received from server.

Created testcases for encoder.

Mark abstract base classes RTSPObjectEncoder and RTSPObjectDecoder as
deprecated, that functionality is now in RTSPEncoder and RTSPDecoder.

Added annotation in RtspHeaders to suppress warnings about deprecation, no need when
whole class is deprecated."
2100a83e30d3d9b3622c17d58b8c072d2d7e2acf,"[#4363] Improve size calculation of messages when written from outside the EventLoop

Motiviation:

If a user writes from outside the EventLoop we increase the pending bytes of the outbound buffer before submitting the write request. This is done so the user can stop writing asap once the channel turns unwritable. Unfortunally this doesn't take the overhead of adding the task into the account and so it is very easy for an user to full up the task queue. Beside this we use a value of 0 for an unown message by default which is not ideal.

Modifications:

- port the message calculation we used in netty 3.x into AbstractChannelHandlerContext and so better calculate the overhead of a message that is submitted from outside the EventLoop
- change the default estimated size for an unknown message to 8.

Result:

Better behaviour when submiting writes from outside the EventLoop."
c6474f92185fa2ec58c686cce0822983f2ec9af3,"Exclude native transport related test and dependency when not running under Linux, close #4409

Motivation:

The build fails on OSX, due to it trying to pull in an epoll specific OSX dependency. See #4409.

Modifications:

* move netty-transport-native-epoll to linux profile
* exclude Http2FrameWriterBenchmark from compiler
* include Http2FrameWriterBenchmark back only in linux profile (please check)

Result:

Build succeeds on OSX."
d66520db1b54d07a447f7c58ed1a794de991db59,"Http2ConnectionHandler.BaseBuilder exception cleanup

Motivation:
Http2ConnectionHandler.BaseBuilder is constructing objects which have 'close' methods, but is not calling these methods in the event of an exception.

Modifications:
- Objects which implement 'close' should have this method called if an exception is thrown and the build operation can not complete normally.

Result:
Objects are closed even if the build process encounters an error."
ed98cd82006be72107e9b654e0c8e53d444a77fd,"DefaultPromise StackOverFlowException

Motivation:
When the ImmediateEventExecutor is in use it is possible to get a StackOverFlowException if when a promise completes a new listener is added to that promise.

Modifications:
- Protect against the case where LateListeners.run() smashes the stack.

Result:
Fixes https://github.com/netty/netty/issues/4395"
a47685b24379f221a5260897fc72297328cd1be9,"Use bitwise operation when sampling for resource leak detection.

Motivation:

Modulo operations are slow, we can use bitwise operation to detect if resource leak detection must be done while sampling.

Modifications:

- Ensure the interval is a power of two
- Use bitwise operation for sampling
- Add benchmark.

Result:

Faster sampling."
94e907fa39825faddfc985449de376e04000ea40,"Only call ReferenceCountUtil.touch(...) if ResourceLeakDetection was enabled when Channel was created.

Motivation:

We should only call ReferenceCountUtil.touch(...) if needed as otherwise we pay the overhead of instanceof and cast
everytime.

Modifications:

Add boolean flag which indicates if touch(...) should be called.

Result:

Less overhead when leak detection is not enabled."
2e36ac45944299676f0df994443b2c973b008b47,"Add benchmark for HeapByteBuf implementations.

Motivation:

To prove one implementation is faster as the other we should have a benchmark.

Modifications:

Add benchmark which benchmarks the unsafe and non-unsafe implementation of HeapByteBuf.

Result:

Able to compare speed of implementations easily."
c9364616c800553f4a98bd11c26ef61397a11c6d,"Fix performance regression in FastThreadLocal microbenchmark. Fixes #4402

Motivation:

As reported in #4402, the FastThreadLocalBenchmark shows that the JDK ThreadLocal
is actually faster than Netty's custom thread local implementation.

I was looking forward to doing some deep digging, but got disappointed :(.

Modifications:

The microbenchmark was not using FastThreadLocalThreads and would thus always hit the slow path.
I updated the JMH command line flags, so that FastThreadLocalThreads would be used.

Result:

FastThreadLocalBenchmark shows FastThreadLocal to be faster than JDK's ThreadLocal implementation,
by about 56% in this particular benchmark. Run on OSX El Capitan with OpenJDK 1.8u60.

Benchmark                                    Mode  Cnt      Score      Error  Units
FastThreadLocalBenchmark.fastThreadLocal    thrpt   20  55452.027 ±  725.713  ops/s
FastThreadLocalBenchmark.jdkThreadLocalGet  thrpt   20  35481.888 ± 1471.647  ops/s"
d0f3cd383d2bdda3b55c3f071fa5622f65928f73,"Fix a bug where DefaultPromise.toString() says 'incomplete' when it's done

Motivation:

DefaultPromise.toString() returns 'DefaultPromise(incomplete)' when it's
actually complete with non-null result.

Modifications:

Handle the case where the promise is done and its result is non-null in
toString()

Result:

The String returned by DefaultPromise.toString() is not confusing
anymore."
07d861c5ffbbbfde18ebfef12e3d57ba4dc2be42,"Fix a bug where DnsNameResolver attempts to send extra queries

Motivation:

When DnsNameResolverContext succeeds to get the address(es), it cancels
the promise of other queries in progress.

Unlike expectation, DnsNameResolverContext.query() attempts to retry
even when the query has failed due to cancellation.

As a result, the resolver sends unnecessary extra queries to a DNS
server and then tries to mark the promised that's been fulfilled
already, leading to unnecessarily verbose 'failed to notify success to a
promise' messages.

Modifications:

Do not perform an extra query when the previous query has failed due to
cancellation

Result:

DnsNameResolver does not send unnecessary extra queries and thus does
not log the 'failed to notify success to a promise' message."
19658e9cd80b57340df58ae573fa9dcbd141416a,"HTTP/2 Headers Type Updates

Motivation:
The HTTP/2 RFC (https://tools.ietf.org/html/rfc7540#section-8.1.2) indicates that header names consist of ASCII characters. We currently use ByteString to represent HTTP/2 header names. The HTTP/2 RFC (https://tools.ietf.org/html/rfc7540#section-10.3) also eludes to header values inheriting the same validity characteristics as HTTP/1.x. Using AsciiString for the value type of HTTP/2 headers would allow for re-use of predefined HTTP/1.x values, and make comparisons more intuitive. The Headers<T> interface could also be expanded to allow for easier use of header types which do not have the same Key and Value type.

Motivation:
- Change Headers<T> to Headers<K, V>
- Change Http2Headers<ByteString> to Http2Headers<CharSequence, CharSequence>
- Remove ByteString. Having AsciiString extend ByteString complicates equality comparisons when the hash code algorithm is no longer shared.

Result:
Http2Header types are more representative of the HTTP/2 RFC, and relationship between HTTP/2 header name/values more directly relates to HTTP/1.x header names/values."
dbbdbe11a6237cc08a9a6eafeeac9c7d80924305,"Decouple Unix from Linux in Native Transport

Motivation:
transport-native-epoll is designed to be specific to Linux. However there is native code that can be extracted out and made to work on more Unix like distributions. There are a few steps to be completely decoupled but the first step is to extract out code that can run in a more general Unix environment from the Linux specific code base.

Modifications:
- Move all non-Linux specific stuff from Native.java into the io.netty.channel.unix package.
- io.netty.channel.unix.FileDescriptor will inherit all the native methods that are specific to file descriptors.
- io_netty_channel_epoll_Native.[c|h] will only have code that is specific to Linux.

Result:
Code is decoupled and design is streamlined in FileDescriptor."
c7cb104dc48f179b61ed1146b6c0529c2e1115bc,"EPOLL Shutdown and Half Closed

Motivation:
The EPOLL module was not completly respecting the half closed state. It may have missed events, or procssed events when it should not have due to checking isOpen instead of the appropriate shutdown state.

Modifications:
- use FileDescriptor's isShutdown* methods instead of isOpen to check for processing events.

Result:
Half closed code in EPOLL module is more correct."
8f334885ef58aa0dda4107391200c29527106df7,"Reject the first SETTINGS ack on HTTP/2 Preface

Motivation:

Http2ConnectionHandler verifies if the first frame after the preface is
a SETTINGS frame.  However, it does not reject the SETTING ack frame
which is not expected actually.

Modifications:

Reject a SETTINGS-ack frame as well

Result:

When the first frame is a SETTINGS-ack frame, connection does not
proceed to further frame handling. (simplicity)"
1b2e43e70ceb11b1188d4cc8dc05f506a3a5bee8,"Correctly construct Executor in microbenchmarks.

Motivation:

We should allow our custom Executor to shutdown quickly.

Modifications:

Call super constructor which correct arguments.

Result:

Custom Executor can be shutdown quickly."
91b8ef3d10e35156808c47994c369fcdc3b3572d,"HTTP/2 PriorityStreamByteDistributor exceptions and reentry

Motivation:
PriorityStreamByteDistributor saves exception state and attempts to reset state. This could be simplified by just throwing a connection error and closing the connection. PriorityStreamByteDistributor also does not handle or detect re-entry in the distribute method.

Motivation:
- PriorityStreamByteDistributor propagate an INTERNAL_ERROR if an exception occurs during writing
- PriorityStreamByteDistributor to handle re-entry on the write method

Result:
PriorityStreamByteDistributor exception code state simplified, and re-entry is detected."
98eb69f169b862a813468ecf1ad1cc14daa896df,"Remove synchronization overhead on generateName.

Motivation:

Changing the chache of generated names to use a cache per thread. This will remove the bottleneck when many eventloops are used and names need to generate.

Modifications:

Use a FastThreadLocal to store the cached names.

Result:

Less locking between threads."
a4f3e72e7187e22f2772de542b877dece0fa4baa,"configurable service thread name prefix

Motivation:

If netty used as part of application, should be a way to prefix service thread name to easy distinguish such threads (for example, used in IntelliJ Platform)

Modifications:

Introduce system property io.netty.serviceThreadPrefix

Result:

ThreadDeathWatcher thread has a readable name ""Netty threadDeathWatcher-2-1"" if io.netty.serviceThreadPrefix set to ""Netty"""
6504d52b9431e7ec785377e29c34584f7f876f88,"Add HTTP/2 local flow control option for auto refill

Motivation:

For many HTTP/2 applications (such as gRPC) it is necessary to autorefill the connection window in order to prevent application-level deadlocking.

Consider an application with 2 streams, A and B.  A receives a stream of messages and the application pops off one message at a time and makes a request on stream B. However, if receiving of data on A has caused the connection window to collapse, B will not be able to receive any data and the application will deadlock.  The only way (currently) to get around this is 1) use multiple connections, or 2) manually refill the connection window.  Both are undesirable and could needlessly complicate the application code.

Modifications:

Add a configuration option to DefaultHttp2LocalFlowController, allowing it to autorefill the connection window.

Result:

Applications can configure HTTP/2 to avoid inter-stream deadlocking."
3eb65797ed11b2fd8297837dc023c0a58adf9c89,"Make headers.set(self) a no-op instead of throwing. Makes it consistent with setAll

Motivation:

Makes the API contract of headers more consistent and simpler.

Modifications:

If self is passed to set then simply return

Result:

set and setAll will be consistent"
7cc320ce47f1d346cc46cf68022c75e9d15b22c8,"Fix memory leak in DefaultHttp2Headers

Motivation:

Memory leak makes headers non-reusable.

Modifications:

Correctly reset firstNonPseudo header reference

Result:

No leak"
187efca9aa30b4c74bccd5356dd19b34cbf3f010,"Improved DefaultChannelPipeline#destroy() to avoid spinning continuously in case of custom executors.

Motivation:

The previous DefaultChannelPipeline#destroy() implementation, introduced in #3156, is suboptimal as it can cause the for loop to continuously spin if the executor used by a given handler is unable to ""recognize"" the event loop.
It could be objected that it's the custom executor responsibility to properly implement the inEventLoop() method, but some implementetaions might not be able to do that for performance reasons, and even so, it's always better to be safe against API misuse, in particular when it is not possible to fail fast and the alternative is rather some sutle behaviour.

Modifications:

The patch simply avoids the recursive spin by explicitly passing the ""in event loop"" condition as a boolean parameter, preserving the same guarantees offered by #3156. A unit test has also been added.

Result:

All channel events are correctly called and no high CPU usage is seen anymore."
6e108cb96a39725d7cebb7a3e8963347499b4512,"Improve the performance of copying header sets when hashing and name validation are equivalent.

Motivation:
Headers and groups of headers are frequently copied and the current mechanism is slower than it needs to be.

Modifications:
Skip name validation and hash computation when they are not necessary.
Fix emergent bug in CombinedHttpHeaders identified with better testing
Fix memory leak in DefaultHttp2Headers when clearing
Added benchmarks

Result:
Faster header copying and some collateral bug fixes"
21e27da4107357d2c0a2b8d56ae58749bb6cf8aa,"ApplicationProtocolNegotiationHandler failure behavior

Motivation:
Child classes of ApplicationProtocolNegotiationHandler may want to override the behavior when a handshake failure is detected.

Modifications:
- Provide a method which can be overriden when a handshake failure is detected.

Result:
Child classes can override ApplicationProtocolNegotiationHandler handshake failure behavior."
8f07416baf4263aa88d43da9c1b3434ffc383b4c,"Update ALPN boot version

Motivation:
A new version of ALPN boot has been released.

Modifications:
- Update the pom to pull in this new version

Result:
New JDK get new ALPN boot."
2f81364522f004afbce6895a22908512d1e9d169,"DefaultHttp2HeadersTest updates

Motivation:
Recently a bug was found in DefaultHttp2Headers where the state of the headers could be corrupted due to the extra tracking to make pseudo headers first during iteration. Unit tests did not catch this bug.

Modifications:
- Update unit tests to cover more methods

Result:
Unit tests for DefaultHttp2Headers have better code coverage."
035053be4ad0e1961b434eedd9f93946ee119463,"HTTP/2 Client Example TLS Pipeline Initialization

Motivation:
The HTTP/2 client example is not validating the results of ALPN if TLS is enabled.

Modifications:
- Use ApplicationProtocolNegotiationHandler to validate ALPN results.

Result:
Client example validates ALPN results."
a18416df60809d5ec9c703bfbc15658a8d4443fc,"Export defaults from PooledByteBufAcclocator static fields

Motivation:

Allow external application to tune initialization of PooledByteBufAllocator

Modifications:

Added new static methods

Result:

Exported
DEFAULT_NUM_HEAP_ARENA
DEFAULT_NUM_DIRECT_ARENA
DEFAULT_PAGE_SIZE
DEFAULT_MAX_ORDER
DEFAULT_TINY_CACHE_SIZE
DEFAULT_SMALL_CACHE_SIZE
DEFAULT_NORMAL_CACHE_SIZE"
120ffaf880b81c260141c9e46cec239ac235aeb9,"Use separate query ID space for different DNS servers

Related: #3972

Motivation:

DnsNameResolver limits the number of concurrent in-progress DNS queries
to 65536 regardless the number of DNS servers it communicates with. When
the number of available DNS servers are more than just one, we end up
using much less (65536 / numDnsServers) query IDs per DNS server, which
is non-optimal.

Modifications:

- Replace the query ID and context management with
  DnsQueryContextManager
  - Eash DNS server gets its own query ID space

Result:

Much bigger query ID space, and thus there's less chance of getting the
'query ID space exhaustion' error"
0d71744d5b813cbd72e7a7cbc78b27add4f87938,"IllegalRefCountException in FullHttp[Request|Response].hashCode()

Motivation:
FullHttp[Request|Response].hashCode() uses a releasable object and in vulnerable to a IllegalRefCountException if that object has been released.

Modifications:
- Ensure the released object is not used.

Result:
No more IllegalRefCountException."
b4b791353d7884115637030cc893f9222bc0d220,"AsciiString optimized hashCode

Motivation:
The AsciiString.hashCode() method can be optimized. This method is frequently used while to build the DefaultHeaders data structure.

Modification:
- Add a PlatformDependent hashCode algorithm which utilizes UNSAFE if available

Result:
AsciiString hashCode is faster."
6a93f331d3b12bbebcb2b6c2f65fd4ee00a134ea,[maven-release-plugin] prepare release netty-4.1.0.Beta8
2ecce8fa56a06c50c121145a96b425a7a580136c,[maven-release-plugin] prepare for next development iteration
8accc52b0313ac4148a591881ff66a3c60ef4707,"Forking Twitter's hpack

Motivation:

The twitter hpack project does not have the support that it used to have.  See discussion here: https://github.com/netty/netty/issues/4403.

Modifications:

Created a new module in Netty and copied the latest from twitter hpack master.

Result:

Netty no longer depends on twitter hpack."
a4ebdd0eca8dfca3d9eaaeae9dded473cd1542c5,"Fix setBytes on read-only ByteBuffer

Motivation:

The method setBytes did not work correctly because read-only ByteBuffer
does not allow access to its underlying array.

Modifications:

New case was added for ByteBuffer's that are not direct and do not have an array.
These must be handled by copying the data into a temporary array. Unit test was
added to test this case.

Result:

It is now possible to use read-only ByteBuffer as the source
for the setBytes method."
96f9b0b91ba63c1f6232c6acca4358afe01fbb7f,"Remote flow controller incorrectly updates stream state

Motivation:

The `DefaultHttp2RemoteFlowController` does not correctly determine `hasFrame` when updating the stream state for the distributor. Adding a check to enforce `hasFrame` when `streamableBytes > 0` causes several test failures.

Modifications:

Modified `DefaultHttp2RemoteFlowController` to simplify the writing logic and to correct the bookkeeping for `hasFrame`.

Result:

The distributors are always called with valid arguments."
64409ad10bba16b150169b9afd88970295e2c13e,fixed word - issue #4469
2a65ae256ec2170edaa50c9360a0afbfea15319c,"[#4331] Helper methods to get charset from Content-Type header of HttpMessage

Motivation:

HttpHeaders already has specific methods for such popular and simple headers like ""Host"", but if I need to convert POST raw body to string I need to parse complex ContentType header in my code.

Modifications:

Add getCharset and getCharsetAsString methods to parse charset from Content-Length header.

Result:

Easy to use utility method."
b640de2d94c987617141900bc9bfa9acb78b6c2f,"Epoll Shutdown Input Exception Handling

Motivation:
If ChannelOption.ALLOW_HALF_CLOSURE is true and the shutdown input operation fails we should not propagate this exception, and instead consider this socket's read as half closed.

Modifications:
- AbstractEpollChannel.shutdownInput should not propagate exceptions when attempting to shutdown the input, but instead should just close the socket

Result:
Users expecting a ChannelInputShutdownEvent will get this event even if the socket is already shutdown, and the shutdown operation fails."
2a2059d97683206a23488e8c96256f2f6fb1bed0,"Adding UniformStreamByteDistributor

Motivation:

The current priority algorithm can yield poor per-stream goodput when either the number of streams is high or the connection window is small. When all priorities are the same (i.e. priority is disabled), we should be able to do better.

Modifications:

Added a new UniformStreamByteDistributor that ignores priority entirely and manages a queue of streams.  Each stream is allocated a minimum of 1KiB on each iteration.

Result:

Improved goodput when priority is not used."
edb2250d355134d1c24c577d921add01b34cbd5f,"Store reference to IovArray in the EpollEventLoop to reduce thread local access.

Motivation:

If we have a lot of writes going on we currently need to lookup the IovArray for each Channel that does writes. This can have quite some perf overhead. We should not need to do this and just store a reference of the IovArray on the EpollEventLoop itself.

Modifications:

- Remove IoArrayThreadLocal
- Store the IoArray in the EventLoop itself

Result:

Less FastThreadLocal lookups"
2d2e07578aff583875ccad1e33566eaef3f78f9f,"Remove HashMap for lookup name / ctx from DefaultChannelPipeline to reduce memory footprint

Motivation:

If you start to have 1M+ concurrent connections memory footprint can be come a big issue. We should try to reduce it as much as possible in the core of netty.

Modifications:

- Remove HashMap that was used to store name to ctx mapping. This was only used for validation and access a handler by name. As a pipeline is not expected to be very long (like 100+ handlers) we can just walk the linked list structure to find the ctx with a given name.

Result:

Less memory footprint of the DefaultChannelPipeline."
cfa76f6326e157e16cdc0786e04bd47815c56975,"Remove unnecessary reference to AbstractChannel from AbstractChannelHandlerContext

Motivation:

We not need to store another reference to AbstractChannel as we can access it through DefaultChannelHandlerContext.

Modifications:

Remove reference.

Result:

Cleaner code."
1f3fc983c050a011546d75587f47e02566174f95,"DefaultPromise LateListener notification order

Motivation:
There is a notification ordering issue in DefaultPromise when the lateListener collection is in use. The ordering issue can be observed in situations where a late listener is added to a Future returned from a write operation. It is possible that this future will run after a read operation scheduled on the I/O thread, even if the late listener is added on the I/O thread. This can lead to unexpected ordering where a listener for a write operation which must complete in order for the read operation to happen is notified after the read operation is done.

Modifications:
- If the lateListener collection becomes empty, it should be treated as though it was null when checking if lateListeners can be notified immediatley (instead of executing a task on the executor)

Result:
Ordering is more natural and will not be perceived as being out of order relative to other tasks on the same executor."
7bee318fc703d319c53dd88430e4e4946eb8a905,"Use OneTimeTask where possible to reduce object creation

Motivation:

We should use OneTimeTask where possible to reduce object creation.

Modifications:

Replace Runnable with OneTimeTask

Result:

Less object creation"
49cd00da1c7f9a748d1305a8e99d0d4b5a84e74e,"Backport of benchmark broke build

Motivation:
2a2059d97683206a23488e8c96256f2f6fb1bed0 was backported from master, and included an overriden method which does not exist in 4.1.

Modifications:
- Remove the invoker method from NoPriorityByteDistributionBenchmark

Result:
No more build error"
6cb6282699b2ae24d36c35af142497a90df6042f,"Lazy Initialization of epoll splice queue

Motivation:
AbstractEpollStreamChannel has a queue which collects splice events. Splice is assumed not to be the most common use case of this class and thus the splice queue could be initialized in a lazy fashion to save memory. This becomes more significant when the number of connections grows.

Modifications:
- AbstractEpollStreamChannel.spliceQueue will be initialized in a lazy fashion

Result:
Less memory consumption for most use cases"
b6fcced64cdff325c49861922e56bcebe3447b73,"Require RHEL/CentOS 6.7 for releasing Netty

Motivation:

6.7 is the latest stable release in RHEL/CentOS 6 line. Given that most
RHEL/CentOS users have upgraded to 6.7 via yum upgrade, we should bump
our requirement.

Modification:

s/6.6/6.7/g

Result:

'mvn release:*' must be run on RHEL/CentOS 6.7 instead of 6.6."
41e03adf249ee9d23938fecf9be980a096710b36,"Mark ChannelHandler.exceptionCaught(...) as deprected.

Motivation:

exceptionCaught(...) will only handle inbound exceptions which means it makes not much sense to have it also on ChannelOutboundHandler. Because of this we should move it to ChannelInboundHandler.

Modifications:

Add @deprecated annotation to ChannelHandler.exceptionCaught(...).

Result:

Preapre to cleanup the API in later release."
a890abcf89ea60033bcbf230c498acef3e43e922,"update pom due to alpn provided

Motiviation:
According to jetty docs the alpn-api should use the provided scope.

Modificaitons:
- change scope to provided for alpn-api
- update for new jdk

Result:
Users of Netty don't run into alpn version conflicts.
Fixes https://github.com/netty/netty/issues/4480"
cfcee5798d6680d87aec3ae68cdded74a1402f84,"Adjustable size of DefaultHeaders array

Motivation:
DefaultHeaders creates an array of size 16 for all headers. This may waste a good deal of memory if applications only have a small number of headers. This memory may be critical when the number of connections grows large.

Modifications:
- Make the size of the array for DefaultHeaders configurable

Result:
Applications can control the size of the DefaultHeaders array and save memory."
79ab756fa337dd034e97df715065e8440b600656,"Use a single queue in UniformStreamByteDistributor

Motivation:

The UniformStreamByteDistributor currently processes all zero-length frames, regardless of add order. This means that we would always send HEADERS for all streams, possibly taking away bandwidth for streams that actually have data.

Modifications:

Empty frames are now treated the same as any other frame except that the algorithm will pop off the any empty frames at the head of the queue.

Result:

Empty frames require no extra processing."
dbaeb3314e32b7f707fd4d2ea8ee78abb370ed59,"Allow HTTP2 frame writer to accept arbitrarily large frames

Motivation:

The encoder is currently responsible for chunking frames when writing in order to conform to max frame size. The frame writer would be a better place for this since it could perform a reuse the same promise aggregator for all the write and could also perform a single allocation for all of the frame headers.

Modifications:

Modified `DefaultHttp2FrameWriter` to perform the chunking and modified the contract in the `Http2FrameWriter` interface. Modified `DefaultHttp2ConnectionEncoder` to send give all allocated bytes to the writer.

Result:

Fixes #3966"
3fa4603120f0ec0c2df3bcda5eab77d4778d2de5,"Cleanup ChannelOption.AUTO_CLOSE javadocs

Motivation:
The javadocs for ChannelOption.AUTO_CLOSE say the default is false, but the default is currently true.

Modifications:
- Make javadocs consistent with code

Result:
Less confusing docs."
227e67900e35f0d01fbf3f4aca86877aefa52d79,"Fixing spammy logging for CoalescingBufferQueueTest

Motivation:

The CoalescingBufferQueueTest is somewhat relaxed with its releasing of test buffers, using safeRelease to generically deal with tests that may or may not release the buffers. SafeRelease generates logs, however, when the release fails.

Modifications:

Tightened up the individual test methods to verify that the buffers are released properly.

Result:

Fixes #4497"
8cd259896e313e7537c26e1f41242d0b21dff8c1,"No HTTP/2 RST_STREAM if no prior HEADERS were sent

Motivation:

Because we flow control HEADERS frames, it's possible that an intermediate error can result in a RST_STREAM frame being sent for a frame that the other endpoint is not yet aware of. This is a violation of the spec and will either result in spammy logs at the other endpoint or broken connections.

Modifications:

Modified the HTTP/2 handler so that it only sends RST_STREAM if it has sent at least one HEADERS frame to the remote endpoint for the stream.

Result:

Fixes #4465"
641505a5d210ffdb0550629439a15a2848e68756,"DefaultChannelConfig maxMessagesPerRead default not always set

Motivation:
ChannelMetadata has a field minMaxMessagesPerRead which can be confusing. There are also some cases where static instances are used and the default value for channel type is not being applied.

Modifications:
- use a default value which is set unconditionally to simplify
- make sure static instances of MaxMessagesRecvByteBufAllocator are not used if the intention is that the default maxMessagesPerRead should be derived from the channel type.

Result:
Less confusing interfaces in ChannelMetadata and ChannelConfig. Default maxMessagesPerRead is correctly applied."
0f9492c9affc528c766f9677952412564d4a3f6d,"Add first-class Little Endian support to ByteBuf and descendants

As discussed in	#3209, this PR adds Little Endian accessors
to ByteBuf and descendants.

Corresponding accessors were added to UnsafeByteBufUtil,
HeapByteBufferUtil to avoid calling `reverseBytes`.

Deprecate `order()`, `order(buf)` and `SwappedByteBuf`."
4978266d52a90252ae00b40894a4398292830d7f,"Make cookie encoding conform better to RFC 6265 in STRICT mode.

Motivation:

- On the client, cookies should be sorted in decreasing order of path
  length. From RFC 6265:

      5.4.2. The user agent SHOULD sort the cookie-list in the following
      order:

        *  Cookies with longer paths are listed before cookies with
           shorter paths.

        *  Among cookies that have equal-length path fields, cookies with
           earlier creation-times are listed before cookies with later
           creation-times.

      NOTE: Not all user agents sort the cookie-list in this order, but
      this order reflects common practice when this document was
      written, and, historically, there have been servers that
      (erroneously) depended on this order.

  Note that the RFC does not define the path length of cookies without a
  path. We sort pathless cookies before cookies with the longest path,
  since pathless cookies inherit the request path (and setting a path
  that is longer than the request path is of limited use, since it cannot
  be read from the context in which it is written).

- On the server, if there are multiple cookies of the same name, only one
  of them should be encoded. RFC 6265 says:

      Servers SHOULD NOT include more than one Set-Cookie header field in
      the same response with the same cookie-name.

  Note that the RFC does not define which cookie should be set in the case
  of multiple cookies with the same name; we arbitrarily pick the last one.

Modifications:

- Changed the visibility of the 'strict' field to 'protected' in
  CookieEncoder.

- Modified ClientCookieEncoder to sort cookies in decreasing order of path
  length when in strict mode.

- Modified ServerCookieEncoder to return only the last cookie of a given
  name when in strict mode.

- Added a fast path for both strict mode in both client and server code
  for cases with only one cookie, in order avoid the overhead of sorting
  and memory allocation.

- Added unit tests for the new cases.

Result:

- Cookie generation on client and server is now more conformant to RFC 6265."
0ec34b5f761f88bbb88def1216f5bae64a0a2d4b,"Fix race-condition when closing a NioSocketChannel or EpollSocketChannel

Motivation:

Fix a race-condition when closing NioSocketChannel or EpollSocketChannel while try to detect if a close executor should be used and the underlying socket was already closed. This could lead to an exception that then leave the channel / in an invalid state and so could lead to side-effects like heavy CPU usage.

Modifications:

Catch possible socket exception while try to get the SO_LINGER options from the underlying socket.

Result:

No more race-condition when closing the channel is possible with bad side-effects."
ef3a9b0acdc59d0d85de8f844499225ad225360c,"Relax the sanity check in HttpClientUpgradeHandler

Motivation:

HttpClientUpgradeHandler currently throws an IllegalStateException when
the server sends a '101 Switching Protocols' response that has no
'Upgrade' header.

Some servers do not send the 'Upgrade' header on a successful protocol
upgrade and we could safely assume that the server accepted the
requested protocol upgrade in such a case, looking from the response
status code (101)

Modifications:

- Do not throw an IllegalStateException when the server responded 101
  without a 'Upgrade' header
- Note that we still check the equality of the 'Upgrade' header when it
  is present.

Result:

- Fixes #4523
- Better interoperability"
9dd68d0c3e413dfde7c0cb8ae94ee2998f91b4ec,"Fix IllegalReferenceCountException caused by HttpClientCodec.upgradeFrom()

Motivation:

On a successful protocol upgrade in HTTP, HttpClientUpgradeHandler calls
HttpClientCodec.upgradeFrom(), which removed both the HTTP encoder and
decoder from the pipeline immediately.

However, because the decoder is in the middle of the decode loop,
removing it from the pipeline immediately will cause the cumulation
buffer to be released prematurely.

This often leads to an IllegalReferenceCountException or missing first
response after the upgrade response.

Modifications:

- Remove the decoder *after* the decode loop is done

Result:

Fixes #4504"
c1f3200c872c502aa141eafc5cc45fa92b37ce68,"Fix the incorrect usage/value of 'Connection: upgrade'

Motivation:

HttpClientUpgradeHandler uses HttpHeaderNames.UPGRADE as the value of
the 'Connection' header, which is incorrect. It should use
HttpHeaderValues.UPGRADE instead (note Names vs Values.)

Also, HttpHeaderValues.UPGRADE should be 'upgrade' rather than
'Upgrade', as defined in:

- https://tools.ietf.org/html/rfc7230#section-6.7

Modifications:

- Use HttpHeaderValues.UPGRADE for a 'Connection' header
- Lowercase the value of HttpHeaderValues.UPGRADE

Result:

- Fixes #4508
- Correct behavior"
43ebbc3fa065155fa67732b0cbd7c12843b0f3f7,"Update JDK SSL Tests to use SSL Context Builder.

Motivation:

Use new / non-deprecated APIs for creating SSL Context
in tests, in order to be able to implement OpenSsl
tests with maximum code reuse.

Modifications:

Use `SslContextBuilder.(forServer|forClient)` instead
of deprecated `JdkSslServerContext` constructor.
Use `ApplicationProtocolConfig` instead of Protocol
Negotiator.
Use custom exception type for skipping tests to avoid
swallowing exceptions arising from tests.

Result:

Exceptions from tests aren't swallowed.
Using new APIs allows reusing same test code for
OpenSsl tests."
a3bdd8c948ba22ff224ee7c70a8b05b3db2aebb3,"Don't cycle DNS servers while cycling DNS record types.

Motivation:

Each server should be checked for every record type. Currently, if there
are only two configured servers and the first is down, it is impossible
to query for IPv4 addresses because the second server is only ever
queried for type AAAA.

Modifications:

Do not cycle DNS servers while cycling DNS record types (A and AAAA)

Result:

Name resolution is less fragile when the number of available DNS servers
is 2."
2fefb2f79c30bcda5b43815d64174aac900e740c,"Make DnsNameResolverGroup non-final and overridable

Motivation:

There's no way to override the default settings of the DnsNameResolvers
created by DnsNameResolverGroup because DnsNameResolverGroup is final.

Modifications:

- Make DnsNameResolverGroup non-final
- Add a new overridable protected method 'newResolver()' so that a user
  can override it to create an alternative DnsNameResolver instance or
  set the non-default properties

Result:

A user can configure the DnsNameResolver."
6257091d121903f0ad83ae43ecb6697b861727a8,"HttpConversionUtil does not account for COOKIE compression

Motivation:
The HTTP/2 RFC allows for COOKIE values to be split into individual header elements to get more benefit from compression (https://tools.ietf.org/html/rfc7540#section-8.1.2.5). HttpConversionUtil was not accounting for this behavior.

Modifications:
- Modify HttpConversionUtil to support compressing and decompressing the COOKIE values

Result:
HttpConversionUtil is compatible with https://tools.ietf.org/html/rfc7540#section-8.1.2.5)
Fixes https://github.com/netty/netty/issues/4457"
088ee712225f45c239dd5e297a2ee24c80080c14,"Remove unused method in SslContext

Motivation:

We missed to remove a method in SslContext while refactored the implementation. We should remove the method to keep things clean.

Modifications:

Remove unused method.

Result:

Code cleanup."
d67fea606bcc218bdd45eba01b64500c26db8afa,"Use ByteBuf.*LE methods for write and read LE

Motivation:

We recently added methods to ByteBuf to directly write and read LE values. We should use these in the Snappy implementation and so reduce duplication.

Modifications:

Replace manually swapping of values with LE write and read methods of ByteBuf.

Result:

Cleaner code with less duplication."
c6d43667d491cdc8327db000dfe261bea0ad4bbb,"Add Http2HeadersEncoder.ALWAYS_SENSITIVE instance

Motivation:

We already provide a NEVER_SENSITIVE instance,we should add ALWAYS_SENSITIVE as well.

Modifications:

Add ALWAYS_SENSITIVE instance which will always return true when check for sesitive.

Result:

User can reuse code."
f31be51774f49091020a007b0537fa30a99bad0c,"[#4505] Correctly handle whitespaces in websocket uri's.

Motivation:

If a uri contains whitespaces we need to ensure we correctly escape these when creating the request for the handshake.

Modifications:

- Correctly encode path for uri
- Add tests

Result:

Correctly handle whitespaces when doing websocket upgrade requests."
f4386fb8e9088f4ec5a30d8b98f8db6bf042e51e,"Allow to set Http2HeaderEncoder.SensitivityDetector in the Http2ConnectionHandler

Motivation:

Some times the user wants to set a Http2HeaderEncoder.SensitivityDetector when building a Http2ConnectionHandler.

Modifications:

Allow to set Http2HeaderEncoder.SensitivityDetector via builder.

Result:

More flexible building of Http2ConnectionHandler possible."
1f6b95737797de22228d79d24fb4e15027617626,"Ensure we retain the original hostname when connect to a remote peer when using epoll transport.

Motivation:

We should retain the original hostname when connect to a remote peer so the user can still query the origin hostname if getHostString() is used.

Modifications:

Compute a InetSocketAddress from the original remote address and the one returned by the Os.

Result:

Same behavior when using epoll transport and nio transport."
32933821bb488c683e6bf8acad54be7f9a7b033b,"AbstractFuture should not wrap CancellationException

Motivation:
AbstractFuture currently wraps CancellationException in a ExecutionException. However the interface of Future says that this exception should be directly thrown.

Modifications:
- Throw CancellationException from AbstractFuture.get

Result:
Interface contract for CancellationException is honored in AbstractFuture."
1d0b6ad75e1f8ca2934a7fe8d00953a430806184,"DefaultPromiseTest dead code removal

Motivation:
DefaultPromiseTest has dead code which was left over from a code restructure. Shared code between 2 tests was moved into a common method, but some code which was not cleaned up in each of these methods after the code was moved.

Modifications:
- Delete dead code in DefaultPromiseTest

Result:
Less dead code"
e5386b05e61da1d1791b40af3f50155b58470a4b,"Move Hex dump related util from ByteBufUtil to inner class

Motivation:

Initialisation of the ByteBufUtil class, a class frequently used is
delayed because a significant number of String operations is performed to
fill a HEXDUMP_ROWPREFIXES array. This array also sticks to the Strings
forever.
It is quite likely that applications never use the hexdump facility.

Modification:

Moved the static initialisation and references to a static inner class.
This delays initialisation (and memory usage) until actually needed.
The API is kept as is.

Result:

Faster startup time, less memory usage for most netty using applications."
e8eda1b99fa0a1765e590357e2b0b4d859d4aebc,"Fix AsciiString.contentEqualsIgnoreCase

Motivation:

Related to issue #4564.

AsciiString.contentEqualsIgnoreCase fails when comparing two AsciiStrings of the same length

Modifications:

Compare the values of the first AsciiString to the second AsciiString

Result:

AsciiString.contentEqualsIgnoreCase works as expected"
89ff831a670d4303881db17a91a9c54e9f41987e,"[#4449] Remove registered events from eventloop before close

Motivation:

We need to remove all registered events for a Channel from the EventLoop before doing the actual close to ensure we not produce a cpu spin when the actual close operation is delayed or executed outside of the EventLoop.

Modifications:

Deregister for events for NIO and EPOLL socket implementations when SO_LINGER is used.

Result:

No more cpu spin."
6393506b97f71ed109548946b86db9b88bbfe44d,"Extract SocketAdress logic from NameResolver

Motivation:

As discussed in #4529, NameResolver design shouldn't be resolving SocketAddresses (or String name + port) and return InetSocketAddresses. It should resolve String names and return InetAddresses.
This SocketAddress to InetSocketAddresses resolution is actually a different concern, used by Bootstrap.

Modifications:

Extract SocketAddress to InetSocketAddresses resolution concern to a new class hierarchy named AddressResolver.
These AddressResolvers delegate to NameResolvers.

Result:

Better separation of concerns.

Note that new AddressResolvers generate a bit more allocations because of the intermediate Promise and List<InetAddress>."
27b330d8b1094ce9875f121aef5ec525e6b35030,"Moving KObjectHashMapTest to propert directory

Motivation:

The KObjectHashMapTest is in a directory called ""io.netty.util.collection"" rather than ""io/netty/util/collection"". This causes the generated tests to be created in the wrong directory as well.

Modifications:

Moved the file.

Result:

Fixes #4546"
eb577c5bd9ff4986ce4fe9e18acde9b0de6b2097,"Respect ClientAuth set via OpenSslEngine constructor

Motivation:

When ClientAuth is set via SslContextBuilder we pass it into the OpenSslEngine constructor. Due a bug we missed to call the correct native methods and so never enabled ClientAuth in this case.

Modifications:

Correctly call setClientAuth(...) in the constructor if needed.

Result:

client auth also works when configured via the SslContextBuilder and OPENSSL is used."
253cd694ef6317d52d41b220f4dcf5fd69f44ec3,"Ensure we not leave data in the BIO when error happens.

Motivation:

We need to ensure we consume all pending data in the BIO on error to correctly send the close notify for the remote peer.

Modifications:

Correctly force the user to call wrap(...) if there is something left in the BIO.

Result:

close_notify is not lost."
2202e8f967fa8b45149e794bcc0813a0177da42e,"Revamp the Http2ConnectionHandler builder API

Related: #4572

Motivation:

- A user might want to extend Http2ConnectionHandler and define his/her
  own static inner Builder class that extends
  Http2ConnectionHandler.BuilderBase. This introduces potential
  confusion because there's already Http2ConnectionHandler.Builder. Your
  IDE will warn about this name duplication as well.
- BuilderBase exposes all setters with public modifier. A user's Builder
  might not want to expose them to enforce it to certain configuration.
  There's no way to hide them because it's public already and they are
  final.
- BuilderBase.build(Http2ConnectionDecoder, Http2ConnectionEncoder)
  ignores most properties exposed by BuilderBase, such as
  validateHeaders, frameLogger and encoderEnforceMaxConcurrentStreams.
  If any build() method ignores the properties exposed by the builder,
  there's something wrong.
- A user's Builder that extends BuilderBase might want to require more
  parameters in build(). There's no way to do that cleanly because
  build() is public and final already.

Modifications:

- Make BuilderBase and Builder top-level so that there's no duplicate
  name issue anymore.
  - Add AbstractHttp2ConnectionHandlerBuilder
  - Add Http2ConnectionHandlerBuilder
  - Add HttpToHttp2ConnectionHandlerBuilder
- Make all builder methods in AbstractHttp2ConnectionHandlerBuilder
  protected so that a subclass can choose which methods to expose
- Provide only a single build() method
  - Add connection() and codec() so that a user can still specify
    Http2Connection or Http2Connection(En|De)coder explicitly
  - Implement proper state validation mechanism so that it is prevented
    to invoke conflicting setters

Result:

Less confusing yet flexible builder API"
dd9fc289fd73b1156e03ab41bdaccea3f45de3e8,"Throw exception if KeyManagerFactory is used with OpenSslServerContext

Motivation:

We currently not supported using KeyManagerFactory with OpenSslServerContext and so should throw an exception if the user tries to do so. This will at least not give suprising and hard to debug problems later.

Modifications:

Throw exception if a user tries to construct a OpenSslServerContext with a KeyManagerFactory

Result:

Fail fast if the user tries to use something that is not supported."
4e467f5c6fe9254ae3c143788dbc3593cb2bb8fc,"Throw ReadOnlyBufferException if unsafe buffer is used and dst is direct

Motivation:

We missed to check if the dst is ready only before using unsafe to copy data into it which lead to data-corruption. We need to ensure we respect ready only ByteBuffer.

Modifications:

- Correctly check if the dst is ready only before copy data into it in UnsafeByteBufUtil
- Also make it work for buffers that are not direct and not have an array

Result:

No more data corruption possible if the dst buffer is readonly and unsafe buffer implementation is used."
8d4db050f36929430e6699eec640de8eab1f3df2,"Have hosts file support for DnsNameResolver, close #4074

Motivation:

On contrary to `DefaultNameResolver`, `DnsNameResolver` doesn't currently honor hosts file.

Modifications:

* Introduce `HostsFileParser` that parses `/etc/hosts` or `C:\Windows\system32\drivers\etc\hosts` depending on the platform
* Introduce `HostsFileEntriesResolver` that uses the former to resolve host names
* Make `DnsNameResolver` check his `HostsFileEntriesResolver` prior to trying to resolve names against the DNS server
* Introduce `DnsNameResolverBuilder` so we now have a builder for `DnsNameResolver`s
* Additionally introduce a `CompositeNameResolver` that takes several `NameResolver`s and tries to resolve names by delegating sequentially
* Change `DnsNameResolver.asAddressResolver` to return a composite and honor hosts file

Result:

Hosts file support when using `DnsNameResolver`.
Consistent behavior with JDK implementation."
904e70a4d4065a8e9da882e8319c7d05846c799d,"HTTP/2 Weighted Fair Queue Byte Distributor

Motivation:
PriorityStreamByteDistributor uses a homegrown algorithm which distributes bytes to nodes in the priority tree. PriorityStreamByteDistributor has no concept of goodput which may result in poor utilization of network resources. PriorityStreamByteDistributor also has performance issues related to the tree traversal approach and number of nodes that must be visited. There also exists some more proven algorithms from the resource scheduling domain which PriorityStreamByteDistributor does not employ.

Modifications:
- Introduce a new ByteDistributor which uses elements from weighted fair queue schedulers

Result:
StreamByteDistributor which is sensitive to priority and uses a more familiar distribution concept.
Fixes https://github.com/netty/netty/issues/4462"
b62c5290ed0fbe8ddd67a9ae7e05312bb59dc22a,"Let SniHandler accept Mapping as well as DominaNameMapping

Related: #4470 #4473

Motivation:

A user might want to:

- implement dynamic mapping from hostname to SslContext
- server large number of domain names whose SslContext can be
  initialized lazily and destroyed when unused

Modifications:

- Let SniHandler accept Mapping<String, SslContext> as well as
  DomainNameMapping
- Make the default constructor of SslContext so that a user can create
  his or her own SslContext wrapper

Result:

Flexibility"
412f719aa82a830966d6aa7ee0164ccd18b9280c,"Extract the builder of CorsConfig to top level

Motivation:

Consistency in API design

Modifications:

- Deprecate CorsConfig.Builder and its factory methods
- Deprecate CorsConfig.DateValueGenerator
- Add CorsConfigBuilder and its factory methods
- Fix typo (curcuit -> circuit)

Result:

Consistency with other builder APIs such as SslContextBuilder and
Http2ConnectionHandlerBuilder"
b39380ad83cda7ebe79d692216e204b8b6b67568,"Revamp InboundHttp2ToHttpAdapter builder API

Related: #4572 #4574

Motivation:

Consistency in our builder API design

Modifications:

- Add AbstractInboundHttp2ToHttpAdapterBuilder
- Replace the old 'Builder's with InboundHttp2ToHttpAdapterBuilder and
  InboundHttp2ToHttpPriorityAdapterBuilder

Result:

Builder API consistency"
dc615ecaaf9749edd227413c32c2f288dfc1309e,"[#4212] Backport WebSocket Extension handlers for client and server.

Motivation:

We have websocket extension support (with compression) in old master. We should port this to 4.1

Modifications:

Backport relevant code.

Result:

websocket extension support (with compression) is now in 4.1."
1a2162ec35c6ab4b4c93d08ce7e1627cc1d63d50,Fix broken tests introduced by dc615ecaaf9749edd227413c32c2f288dfc1309e
9b171beb92ce759e0c4c2dd7ddbb5e345a789e83,Trivial javadoc fixes in ChannelHandlerContext
ee56a4a5c6e27649c0ff13b50e1654016ffa94fc,"Fixing broken HTTP/2 benchmark

Motivation:

The `NoPriorityByteDistibbutionBenchmark` was broken with a recent commit.

Modifications:

Fixed the benchmark to use the new HTTP2 handler builder.

Result:

It builds."
63426fc3ed083513c07a58b45381f5c10dd47061,"Prevent adding newline if Base64 buffer encoded ends directly on MAX_LINE_LENGTH

Motivation:

We need to ensure we not add a newline if the Base64 encoded buffer ends directly on the MAX_LINE_LENGTH. If we miss to do so this produce invalid data.
Because of this bug OpenSslServerContext and OpenSslClientContext may fail to load a cert.

Modifications:

- Only add NEW_LINE if we not are on the end of the dst buffer.
- Add unit test

Result:

Correct result in all cases"
693633eeff106febf4403208f9eed2117931f45a,"Not use Unpooled to allocate buffers in Base64 but use a ByteBufAllocator

Motivation:

We should not use Unpooled to allocate buffers for performance reasons.

Modifications:

Allow to pass in ByteBufAllocate which is used to allocate buffers or use the allocate of the src buffer.

Result:

Better performance if the PooledByteBufAllocator is used."
f750d6e36c80e88fb302c99b5b7413e5649e6738,"ByteBufUtil.writeUtf8 Surrogate Support

Motivation:
UTF-16 can not represent the full range of Unicode characters, and thus has the concept of Surrogate Pair (http://unicode.org/glossary/#surrogate_pair) where 2 16-bit code units can be used to represent the missing characters. ByteBufUtil.writeUtf8 is currently does not support this and is thus incomplete.

Modifications:
- Add support for surrogate pairs in ByteBufUtil.writeUtf8

Result:
ByteBufUtil.writeUtf8 now supports surrogate pairs and is correctly converting to UTF-8."
7c1602125a94583c3004cb30ead329845c2a679c,"Builder to construct DomainNameMapping.

Motivation:

DomainNameMapping.add() makes DomainNameMapping look like it's safe to call add() anytime, and this is never true. It's probably better deprecate add() and introduce DomainNameMappingBuilder.

Modifications:

Made an immutable implementation of DomainNameMapping;
Added Builder for immutable DomainNameMapping;
Replaced regex pattern with String::startsWith check;
Replaced HashMap with two arrays in ImmutableDomainNameMapping;
Deprecated mutable API;
Estimation for StringBuilder initial size in ImmutableDomainNameMapping#toString()
Added StringUtil#commonSuffixOfLength
Replaced unnecessary substrings creation in DomainNameMapping#matches with regionMatches

Result:

Clients will be able to create immutable instances of DomainNameMapping with builder API."
c22f1aa4acad4234623c31121f33b2b2f3afffc5,"Clear selectedKeys in OioSctpChannel.doReadMessages

Motivation:
The fix for https://github.com/netty/netty/issues/3884 breaks SctpEchoTest because Selector.select will always return 0 if you do not clear last selectedKeys.

Modifications:
Clear readSelector.selectedKeys() if it is not empty.

Result:
SctpEchoTest is green again."
9ac430f16fec1d3b0d0e433b953c0197d70dff10,"HTTP/2 DefaultHttp2RemoteFlowController Stream writability notification broken

Motivation:
DefaultHttp2RemoteFlowController.ListenerWritabilityMonitor no longer reliably detects when a stream's writability change occurs.

Modifications:
- Ensure writiability is reliabily reported by DefaultHttp2RemoteFlowController.ListenerWritabilityMonitor
- Fix infinite loop issue (https://github.com/netty/netty/issues/4588) detected when consolidating unit tests

Result:
Reliable stream writability change notification, and 1 less infinite loop in UniformStreamByteDistributor.
Fixes https://github.com/netty/netty/issues/4587"
72accceeacf15d13358d5c46d5c414fc49f6c38d,"HTTP/2 remove PriorityStreamByteDistributor

Motivation:
PriorityStreamByteDistributor is now obsolete and can be replaced by WeightedFairQueueByteDistributor.

Modifications:
- Remove PriorityStreamByteDistributor and use WeightedFairQueueByteDistributor by default.

Result:
PriorityStreamByteDistributor no longer has to be maintained and is replaced by a better algorithm."
b5d90388eaf3725757bc0c5dd7a0fa86ec0683ef,"Fix HttpHeaderValues.IDENTITY equals usage

Motivation:

HttpHeaderValues.IDENTITY is an AsciiString, but was compared using equals to a String.

Modifications:

Use contentEquals instead.

Result:
Correct comparison."
f22ad97cf30c63c0d93d7c40541da10a4de66f5f,"Remove PriorityStreamByteDistributor from http2 microbench

Motivation:
PriorityStreamByteDistributor has been removed but NoPriorityByteDistributionBenchmark in microbench still need it and causes compile error

Modifications:
Remove PriorityStreamByteDistributor from NoPriorityByteDistributionBenchmark

Result:
The compile error has been fixed"
e4cb163be2dc6cf6bd417acd62d3cc4e74f7473b,Fix javadoc link
7b2f55ec2fa83873c4eeacb7fbccaecfedece63e,"HTTP/2 Remove RemoteFlowController.streamWritten

Motivation:
RemoteFlowController.streamWritten is not currently required. We should remove it to keep interfaces minimal.

Modifications:
- Remove RemoteFlowController.streamWritten

Result:
1 Less method in RemoteFlowController interface.
Fixes https://github.com/netty/netty/issues/4600"
e3d5ca82c002eeb189c2a27a396a5f62498710ae,"[#4604] EpollSocketChannelConfig.isKeepAlive(...) throws UnsatisfieldLinkError

Motivation:

We missed to define the actual c function for isKeepAlive(...) and so throw UnsatisfieldLinkError.

Modifications:

- Add function
- Add unit test for Socket class

Result:

Correctly work isKeepAlive(...) when using native transport"
80cff236e461191d2fd9acf850be728c0415c9e4,"HTTP/2 UniformStreamByteDistributor negative window shouldn't write

Motivation:
If the stream window is negative UniformStreamByteDistributor may write data. This is prohibited by the RFC https://tools.ietf.org/html/rfc7540#section-6.9.2.

Modifications:
- UniformStreamByteDistributor should use StreamState.isWriteAllowed()

Result:
UniformStreamByteDistributor is more complaint with HTTP/2 RFC.
Fixes https://github.com/netty/netty/issues/4545"
cfd6793bb7b1ae6769cf0b3eaffd1aecfa6fbd32,"Customizable estimation for messages written outside the EventLoop

Motivation:

Estimation algorithm currently used for WriteTasks is complicated and
wrong. Additionally, some code relies on outbound buffer size
incremented only on actual writes to the outbound buffer.

Modifications:

- Throw away the old estimator and replace with a simple algorithm that
  uses the client-provided estimator along with a statically configured
  WriteTask overhead (io.netty.transport.writeTaskSizeOverhead system
  property with the default value of 48 bytes)
- Add a io.netty.transport.estimateSizeOnSubmit boolean system property
  allowing the clients to disable the message estimation outside the
  event loop

Result:

Task estimation is user controllable and produces better results by
default"
80f45d6ae5919c4eb4135914571ebc73cf88f60d,"Ensure closing a Socket / FileDescriptor multiple times will not throw exception

Motivation:

If an user will close a Socket / FileDescriptor multiple times we should handle the extra close operations as NOOP.

Modifications:

Only do the actual closing one time

Result:

No exception if close is called multiple times."
507feb560296dc426423805fb8c122da0e9c01c7,"Close FileInputStream after consuming it in SelfSignedCertificate

Motivation:

FileInputStream opened by SelfSignedCertificate wasn't closed.

Modifications:

Use a try-finally to close the opened FileInputStream.

Result:

FileInputStream will be closed properly."
d59bf84ef2670ab830782f8e8036f0b3c1f46f34,"[#4435] Always invoke the actual deregisteration later in the EventLoop.

Motivation:

As a user may call deregister() from within any method while doing processing in the ChannelPipeline,  we need to ensure we do the actual deregister operation later. This is needed as for example,  we may be in the ByteToMessageDecoder.callDecode(...) method and so still try to do processing in the old EventLoop while the user already registered the Channel to a new EventLoop. Without delay, the deregister operation this could lead to have a handler invoked by different EventLoop and so threads.

Modifications:

Ensure the actual deregister will be done later on and not directly when invoked.

Result:

Calling deregister() within ByteToMessageDecoder.decode(..) is safe."
fd5316ed6fcde05274df38c26b9481771c182c5c,"ChunkedInput.readChunk parameter of type ByteBufAllocator

Motivation:
ChunkedInput.readChunk currently takes a ChannelHandlerContext object as a parameters. All current implementations of this interface only use this object to get the ByteBufAllocator object. Thus taking a ChannelHandlerContext as a parameter is more restrictive for users of this API than necessary.

Modifications:
- Add a new method readChunk(ByteBufAllocator)
- Deprecate readChunk(ChannelHandlerContext) and updates all implementations to call readChunk(ByteBufAllocator)

Result:
API that only requires ByteBufAllocator to use ChunkedInput."
a96d52fe66536ae0633e1a066d4ee008b3173f8f,"Fix javadoc links and tags

Motivation:

There are some wrong links and tags in javadoc.

Modifications:

Fix the wrong links and tags in javadoc.

Result:

These links will work correctly in javadoc."
475d9011313ce875d2a5c48d7621664320ad413a,"Fix errors reported by javadoc

Motivation:

Javadoc reports errors about invalid docs.

Modifications:

Fix some errors reported by javadoc.

Result:

A lot of javadoc errors are fixed by this patch."
0efb6795855505f0778612d05bd04cd0b30eb8c0,replace ends -> starts
ba22b0b9442b4d1fd4bd1897153430746af07534,"Implement OpenSSL Engine tests for NPN / ALPN.
Motivation:

Currently there are no tests for OpenSSL Engine,
only for JdkSSL engine.

Modifications:

Common methods from `JdkSslEngine` test moved
to `SSLEngineTest`, JdkSslEngine now implements
NPN and ALPN tests.

Result:

OpenSSL Engine is now covered with unit tests."
87327452640adb3407d1ffae8987eec98e166e2f,"OpenSslEngine skip ALPN tests if OpenSsl version doesn't support ALPN

Motivation:
OpenSslEngine now tests ALPN behavior. However it is possible that OpenSSL is present, but the version does not support ALPN. This will result in test failures instead of just skipping the test.

Modifications:
- Skip ALPN tests in OpenSslEngineTest if the version of OpenSSL does not support ALPN

Result:
Tests don't fail due to unsupported feature in OpenSSL."
79bc90be3215509e98a86239217226572e7887e5,"Fix buffer leak introduced by 693633eeff106febf4403208f9eed2117931f45a

Motivation:

As we not used Unpooled anymore for allocate buffers in Base64.* methods we need to ensure we realease all the buffers.

Modifications:

Correctly release buffers

Result:

No more buffer leaks"
6ee5341cdfa397a7b2ca123b0f8a5f3170133429,"Fix typo Motivation:

MessageReciever should be MessageReceiver

Modifications:

Refactor MessageReciever to MessageReceiver

Result:

No more typo"
f90032933df8b27e8542fdeb40fb6381f2062563,"javadoc fix and better cleanup for WriteTimeoutHandler

Motivation:

- Javadoc is not correct (#4353)
- WriteTimeoutHandler does not always cancel the timeout task (#2973)

Modifications:

Fix the javadoc and cleanup timeout task in handlerRemoved

Result:

WriteTimeoutHandler's javadoc describes the correct behavior and it will cancel timeout tasks when it's removed."
0b16c3c513aea440ab3c929dd5175924252b21f2,"Add a possibility to create HttpMessage instances with pre-existing Headers

Motivation:

Allow passing HttpHeaders instance to DefaultHttpMessage
in order to avoid eager creation of Headers to
allow users reuse their Headers instance.

Modifications:

Added a constructor with HttpHeaders to DefaultHttpMessage,
Modified DefaultHttpResponse and DefaultHttpRequest
to receive HttpHeaders instances.
Modified DefaultFullHttpReqest and DefaultFullHttpResponse
to receive HttpHeaders, and updated `duplicate` and
`copy` to use new constructors.

Result:

Users can now pass HttpHeaders instance when
constructing Http Requests and Responses."
0ae6f172851345b02fecc6b11a7dfea1eb60a9d5,"Fix unnecessary boxing and incorrect Serializable

Motivation:

- AbstractHttp2ConnectionHandlerBuilder.encoderEnforceMaxConcurrentStreams can be the primitive boolean
- SpdySession.StreamComparator should not be Serializable since SpdySession is not Serializable

Modifications:

Use boolean instead and remove Serializable

Result:

- Minor improvement for AbstractHttp2ConnectionHandlerBuilder
- StreamComparator is not Serializable any more"
79634e661b000b5f229fdde20e44fdeab15c5ae2,"Obtain MessageDigest via FastThreadLocal

Motivation:

Creating a new MessageDigest every time is wasteful, we should store them in FastThreadLocal.

Modifications:

Change WebSocketUtil to store MD5 and SHA1 MessageDigest in FastThreadLocal and use these.

Result:

Less overhead and less GC."
8716b9d4bd5bccd98187718dafbb2d6f3c6b42a2,"Revert ""Fix unnecessary boxing and incorrect Serializable""

This reverts commit 0ae6f172851345b02fecc6b11a7dfea1eb60a9d5."
78c4bd474e9b67f40536714a028da5091a98e81f,"IllealRefCountException should be IllegalReferenceCountException, fix typos

Motivation:

Typos in javadoc, in ""combine"" and ""recommendations"", IllegalReferenceCountException

Modification:

Rename incorrect reference, typos are modified

Result:

Reference is correct, typos are fixed"
1b0adb334be468c7148dca36a26caf032bc5b33e,"Fix incorrect Serializable

Motivation:

SpdySession.StreamComparator should not be Serializable since SpdySession is not Serializable

Modifications:

Remove Serializable fom SpdySession.StreamComparator

Result:

StreamComparator is not Serializable any more"
bc2559ceb1fba6b1f97d99494be90e83b3ead6e7,fix links to github issues in javadoc
8dc164ace6b9e981d68d6ad57d50f9d2c8ad67b5,"Correctly reset MessageDigest before reusing it.

Motivation:

I missed to reset the MessageDigest before reusing it. This bug was introduced by 79634e661b000b5f229fdde20e44fdeab15c5ae2.

Modifications:

Call reset() on the MessageDigest.

Result:

Correctly reset MessageDigest before re-using"
619d82b56fa41850cfbfedde0eef84fa788661ed,"Removed unused imports

Motivation:

Warnings in IDE, unclean code, negligible performance impact.

Modification:

Deletion of unused imports

Result:

No more warnings in IDE, cleaner code, negligible performance improvement."
55af6f155226259d19a570e9021c2d91161b9986,"Use jetty-alpn-agent to simplify pom.xml

Motivation:

We had to add a new profile for each OpenJDK/OracleJDK release to make
Maven choose the correct alpn-boot.jar and npn-boot.jar. As a result,
our pom.xml has a large number of `<profile/>` sections.

Modifications:

- Use jetty-alpn-agent, which chooses the correct alpn-boot.jar and
  npn-boot.jar automatically to remove all the nasty profile sections
  from pom.xml
  - Visit https://github.com/trustin/jetty-alpn-agent for more info

Result:

Cleaner pom.xml"
bf2a99518c3ebc484464fc35279452ddd24c0ea9,"Simplify synchronized syntax

Motivation:

We often used synchronized(this) while the whole method was synchronized, which can be simplified by just mark the whole method as synchronized.

Modifications:

Replace synchronized(this) with synchronized on the method

Result:

Cleaner code"
9e1e4f79c76f39c8d6efccbf8351e7d13ced8007,"Fix SctpMessage.duplicate() behavior

Motivation:

SctpMessage.duplicate() copied message content that leads to additional buffer
allocation and memory copying.

Modifications:

Duplicate message content instead of copying it.

Result:

Better performace and less memory consumption."
4cdbe3928424b5b38695967c0cc1062dccf1a83c,"[#4635] Stop decoding if decoder was removed

Motivation:

We need to check if this handler was removed before continuing with decoding.
If it was removed, it is not safe to continue to operate on the buffer.

Modifications:

Check if decoder was removed after fire messages through the pipeline.

Result:

No illegal buffer access when decoder was removed."
a157528ec27a2d75b827b81397738e7ad2effbff,"Ensure we only add OpenSslEngine to the OpenSslEngineMap when handshake is started

Motivation:

We need to ensure we only add the OpenSslEngine to the OpenSslEngineMap when the handshake is started as otherwise we may produce a memory leak when the OpenSslEngine is created but not actually used. This can for example happen if we encounter a connection refused from the remote peer. In this case we will never remove the OpenSslEngine from the OpenSslEngineMap and so it will never be collected (as we hold a reference). This has as affect that the finalizer will never be run as well.

Modifications:

- Lazy add the OpenSslEngine to the OpenSslEngineMap to elimate possible leak.
- Call OpenSslEngine.shutdown() when SslHandler is removed from the ChannelPipeline to free memory asap in all cases.

Result:

No more memory leak with OpenSslEngine if connection is refused."
4eaa59d516357de12f7017da937e2e3d86091897,"Improve SctpMessage.hashCode method

Motivation:

Not all fields of SctpMessage which used to check message equality are used
to generate hashcode.

Modifications:

Use value of 'unordered' field in hashCode method.

Result:

Better hash function of SctpMessage."
c205e2be76bf5672af36138ac62b69bc10971277,"Set DSCP bits for IPv6 when setting traffic class.

Motivation:

Linux uses different socket options to set the traffic class (DSCP) on IPv6

Modifications:

Also set IPV6_TCLASS for IPv6 sockets

Result:

TrafficClass will work on IPv4 and IPv6 correctly"
e7af3ee9709a7b7ce5373601f571f94fc4aa5fc9,"[#4658] Fix encoding of pom.xml file

Motivation:

transport-native-epoll has its pom.xml encoding attribute set to ISO-8859-15. Because
of this gradle, and other dependency management systems, can't correctly resolve this
library from wherever it happens to be published.

Modifications:

netty/transport-native-epoll/pom.xml had its xml encoding changed to UTF-9

Result:

Gradle, and other dependency management systems, will now be able to correctly resolve this module."
e578134b5710a4d57027d0d7a1796e12423d0b44,"Unpooled and Wrapped Buffer Leak

Motivation:
There are a few buffer leaks related to how Unpooled.wrapped and Base64.encode is used.

Modifications:
- Fix usages of Bas64.encode to correct leaks
- Clarify interface of Unpooled.wrapped* to ensure reference count ownership is clearly defined.

Result:
Reference count code is more clearly defined and less leaks are possible."
1bee71fb1c2066035a6afcba151a1515338d0db9,"Fix PlatformDependent.newAtomic*FieldUpdater type safety

Motivation:

* newAtomicIntegerFieldUpdater and newAtomicLongFieldUpdater take a
class<?> so they're too lax
* newAtomicReferenceFieldUpdater takes a Class<U> so it's too strict
and can only be passe a rawtype parameter when dealing w/ generic
classes

Modifications:

Take a Class<? super T> parameter instead.

Result:

Better type safety and generics support."
0c733e14256715e64003a47aa75083c47c781208,"[#2363] Correctly null out SelectionKey[] when selectAgain

Motivation:

The prefix fix of #2363 did not correctly handle the case when selectAgain is true and so missed to null out entries.

Modifications:

Move the i++ from end of loop to beginning of loop

Result:

Entries in the array will be null out so allow to have these GC'ed once the Channel close"
07d0bcab8cdaa8f4d9ebc1bcc5c1ca4b2f765a8b,"Fix deprecated Maven expressions usage

Motivation:

Parent pom.xml uses deprecated maven expressions, such as `${groupId}`
which should be ${project.groupId}.
This causes tons of warnings on every module in the build.

Modifications:

Use up to date syntax.

Result:

No more maven warnings."
b4be040f30a30b8f30d936838e3c25d7812311af,"Introduce DnsCache API + DnsResolver extensibility

Motivation:
Caching is currently nested in DnsResolver.
It should also be possible to extend DnsResolver to ba able to pass a different cache on each resolution attemp.

Modifications:

* Introduce DnsCache, NoopDnsCache and DefaultDnsCache. The latter contains all the current caching logic that was extracted.
* Introduce protected versions of doResolve and doResolveAll that can be used as extension points to build resolvers that bypass the main cache and use a different one on each resolution.

Result:

Isolated caching logic. Better extensibility."
751ed6cc94cb4db502144aa28cf9de339ea20cf4,"Avoid unnecessary boxing/unboxing

Motivation:

Boxing/unboxing can be avoided.

Modifications:

Use parseInt/parseLong to avoid unnecessary boxing/unboxing.

Result:

Remove unnecessary boxing/unboxing."
5c05629da1bc9022a053a7dce697a1b33b81bfd4,"Fix issue #4676

Fixed spelling mistake at EmbeddedChannel#readOutbound()"
6fe0db4001ebb9801705f6f3ca8911ff5fd5fe1e,"Fix IndexOutOfBoundsException for CompositeByteBuf #4679

Motivation:

Modifications:

Use the correct start index

Result:

Fixes #4679"
9ae155d25701591697dfe8b47d4b4b592807531f,"Fix InternalAttribute.equals

Motivation:

InternalAttribute doesn't extend Attribute, but its equals only returns true when it compares with an Attribute. So it will return false when comparing with itself.

Modifications:

Make sure InternalAttribute return false for non InternalAttribute objects.

Result:

InternalAttribute's equals works correctly."
da01b1daec1d015deba08af8b2df5c272d719c43,"Decryption failed or bad mac record in Android 5.0

Motivation:

Android 5.0 (API version 21) has a bug which not correctly set the bytesConsumed of SSLEngineResult when HandshakeStatus is FINISHED.  Because of this we need to special handle the status and so workaround the Android bug.

Modifications:

- Break the unwrap for (;;) loop when HandshakeStatus is FINISHED and bytesConsumed == 0 && bytesProduced == 0.

Result:

SslHandler works with all known version of Android."
f41aa306e9d48cb717f57df468c5631c688a7c79,"Remove multiple calls to recordLeakNonRefCountingOperation() in AdvancedLeakAwareByteBuf.forEachByteDesc

Motivation:

AdvancedLeakAwareByteBuf.forEachByteDesc(...) called recordLeakNonRefCountingOperation() two times which resulted in incorrect leak detection reports.

Modifications:

Remove duplicated call to recordLeakNonRefCountingOperation()

Result:

Correct leak detection results"
45674baf3e02239a967e4db8eded75f521df8af4,"Correctly report *LE operations when advanced leak detection is used.

Motivation:

We missed reporting *LE operations when AdvancedLeakAwareByteBuf was used. This could lead to incomplete access reports.

Modifications:

Correctly record access for *LE operations.

Result:

Correct leak reports."
4d854cc1496ab3397cad543e0a0557efe1106f0c,"Allow to change if EmbeddedChannel should handle close() and disconnect() different.

Motivation:

At the moment EmbeddedChannel always handle close() and disconnect() the same way which also means that ChannelOutboundHandler.disconnect(...) will never called. We should allow to specify if these are handle different or not to make the use of EmbeddedChannel more flexible.

Modifications:

Add 2 other constructors which allow to specify if disconnect / close are handled the same way or differently.

Result:

More flexible usage of EmbeddedChannel possible."
3c5abaa39aa434ac39260164d2e71fda23998bc3,"Correctly handle non handshake commands when using SniHandler

Motivation:

As we can only handle handshake commands to parse SNI we should try to skip alert and change cipher spec commands a few times before we fallback to use a default SslContext.

Modifications:

- Use default SslContext if no application data command was received
- Use default SslContext if after 4 commands we not received a handshake command
- Simplify code
- Eliminate multiple volatile fields
- Rename SslConstants to SslUtils
- Share code between SslHandler and SniHandler by moving stuff to SslUtils

Result:

Correct handling of non handshake commands and cleaner code."
8b123a554608aa677d1fe30af47776bf6197cd2c,"Fix AbstractChannelTest errors caused by incorrect mocking

Motivation:

In AbstractChannelTest we not correctly mocked some methods which could lead to test errors. That said it only showed up here when running from the IDE and not from the cmdLine.

Modifications:

Mock methods that are needed for the test

Result:

Test pass in the IDE as well."
f7c83c8565a695e226cac118fb353e161c90a7ea,"Don't enforce JZlibDecoder on JDK7+, close #4707

Motivation:

`JdkZlibDecoder` is available since Netty 4.0.8 and works with JDK7+.
However, `io.netty.noJdkZlibDecoder` System prop evaluation always defaults to
true, causing Netty to always use JZLib when decompressing on the
client side when the property insn't explictly set to `false`.

Modifications:

Default to `false` instead of `true` when JDK7+.

Result:

JZLib optional as expected on JDK7+."
7dba13f276953a983165898206808b14ca0827b6,"HttpConversionUtil remove throws from method signature

Motivation:
HttpConversionUtil.toHttp2Headers currently has a throws Exception as part of the signature. This comes from the signature of ByteProcessor.process, but is not necessary because the ByteProcessor used does not throw.

Modifications:
- Remove throws Exception from the signature of HttpConversionUtil.toHttp2Headers.

Result:
HttpConversionUtil.toHttp2Headers interface does not propagate a throws Exception when it is used."
bf24ffd3354123a7a8602046462973f74963639c,"[#4694] Ensure native transport can also be compiled on 32bit systems.

Motivation:

We should also be able to compile the native transport on 32bit systems.

Modifications:

Add cast to intptr_t for pointers

Result:

It's possible now to also compile on 32bit."
dea337b4cf3abbf58e48b3a7dc86f13d5ea3cfa7,"Native Transport Netty Class Package Prefix

Motivation:
transport-native-epoll finds java classes from JNI using fully qualified class names. If a shaded version of Netty is used then these lookups will fail.

Modifications:
- Allow a prefix to be appended to Netty class names in JNI code.

Result:
JNI code can be used with shaded version of Netty."
b9ae48589b59e4e5f90f73057c36de5d614556dc,"Make codec-dns can support build a dns server, reply answer from client.

Motivation:

codec-dns has great function to solve dns packet, but only make a query, not answer query from other client.

i make a change of add two classes to fill last pieces of map, finish the server function.

Modifications:

in this change, add two classes of DatagramDnsQueryDecoder and DatagramDnsResponseEncoder to handle client query, reply answer.

Result:

nothing code change after this commit, except two new classes."
1848e73ce6ce563af315b6a51b60e2cd1a164fbe,"Ensure connectPromise is not notified before fireChannelActive() is called.

Motivation:

Our contract in Channels is that the promise should always be notified before the actual callbacks of the ChannelInboundHandler are called. This was not done in the LocalChannel and so the behavior was different to other Channel implementations.

Modifications:

- First complete the ChannelPromise then call fireChannelActive()
- Guard against NPE when doClose() was called before the task was executed.

Result:

Consistent behavior between LocalChannel and other Channel implementations."
9e76b5319ef9790d8bce27eacbc2aff4ba312cac,"Fix testResolveIp to make it work in some special environment

Motivation:

As ""getHostName"" may do a reverse name lookup and return a host name based on the system configured name lookup service, testResolveIp may fail in some special environment. See #4720

Modifications:

Use getHostAddress instead of getHostName

Result:

testResolveIp works in all environments"
e969b6917c848c83f02617386f0f73d8f0e130a2,"Let CombinedChannelDuplexHandler correctly handle exceptionCaught. Related to [#4528]

Motivation:

ChannelInboundHandler and ChannelOutboundHandler both can implement exceptionCaught(...) method and so we need to dispatch to both of them.

Modifications:

- Correctly first dispatch exceptionCaught to the ChannelInboundHandler but also make sure the next handler it will be dispatched to will be the ChannelOutboundHandler
- Add removeInboundHandler() and removeOutboundHandler() which allows to remove one of the combined handlers
- Let *Codec extends it and not ChannelHandlerAppender
- Remove ChannelHandlerAppender

Result:

Correctly handle events and also have same behavior as in 4.0"
cdb70d31eebdf19e93191840bb817bcb351cbe3c,"[#4017] Implement proper resource leak detection for CompositeByteBuf

Motivation:

CompositeByteBuf only implemented simple resource leak detection and how it was implemented was completly different to the way it was for ByteBuf. The other problem was that slice(), duplicate() and others would not return a resource leak enabled buffer.

Modifications:

- Proper implementation for all level of resource leak detection for CompositeByteBuf

Result:

Proper resource leak detection for CompositeByteBuf."
7bcae8919d047e987c699beacc66e37632bcac3d,"Log the current channel in Http2FrameLogger

Motivation:
Currently it's impossible to distinguish which
connection the corresponding logged message	is
related to.

Modifications:
Http2FrameLogger is extended to support channel
id logging, usages in Inbound/Outbound Frame
Loggers are adjusted accordingly.

Result:
Logger outputs the channel id."
7b51412c3c0503492d5ddd6310e4b4619a8086f9,"Allow to do async mappings in the SniHandler

Motivation:

Sometimes a user want to do async mappings in the SniHandler as it is not possible to populate a Mapping up front.

Modifications:

Add AsyncMapping interface and make SniHandler work with it.

Result:

It is possible to do async mappings for SNI"
3785ca9311270763119a81bc2048e23ce2be0ef7,"added support for Protobuf codec nano runtime

Motivation:

Netty was missing support for Protobuf nano runtime targeted at
weaker systems such as Android devices.

Modifications:

Added ProtobufDecoderNano and ProtobufDecoderNano
in order to provide support for Nano runtime.

modified ProtobufVarint32FrameDecoder and
ProtobufLengthFieldPrepender in order to remove any
on either Nano or Lite runtime by copying the code
for handling Protobuf varint32 in from Protobuf
library.

modified Licenses and NOTICE in order to reflect the
changes i made.

added Protobuf Nano runtime as optional dependency

Result:

Netty now supports Protobuf Nano runtime."
38f27b06e7ccc6fac395d0ed85c763b7a14d6471,"[#4725] Ensure correct cause of handshake error is included in the SSLHandshakeException when using OpenSslEngine.

Motivation:

We need to ensure we add the correct handshake error to the SSLHandshakeException before throwing it when failing the
handshake.

Modifications:

Use the correct error string when creating the SSLHandshakeException.

Result:

Correct SSLHandshakeException message included."
391a4112643940c82ae0be27496da73662d2ee16,"Init DnsNameResolverBuilder#nameServerAddresses

Motivation:

DnsNameResolverBuilder#nameServerAddresses isn’t initialized with a
default value. In most cases, user will want
DefaultDnsServerAddresses#defaultAddresses.

Modifications:

Initialize DnsNameResolverBuilder#nameServerAddresses with
DefaultDnsServerAddresses#defaultAddresses

Result:

DnsNameResolverBuilder more convenient usage."
7494e84208d10c2ec8e940754d857215fb1cdbe8,"PlatformDependent static initialization ExceptionInInitializerError

Motivation:
PlatformDependent allows some exceptions to escape during static initialization. If an exception escapes it will be translated into a java.lang.ExceptionInInitializerError and render the application unable to run.

Modifications:
- Make sure to catch Throwable during static initialization.

Result:
PlatformDependent static initialization doesn't result in java.lang.ExceptionInInitializerError."
ae4e9ddc2d66f23c3cad6f8adeed72392aae67da,"Ensure we flush out all pending data on SslException. Related to [#3900]

Motivation:

We need to ensure we flush out all pending data when an SslException accours so the remote peer receives all alerts.

Modifications:

Ensure we call ctx.flush() when needed.

Result:

Correctly receive alerts in all cases on the remote peer."
d1ef33b8f419ac8ae591e864df2cdd24b36ef765,"Change 64 to 63 in Snappy.decodeLiteral

Motivation:

According to https://github.com/google/snappy/blob/master/format_description.txt#L55 , Snappy.decodeLiteral should handle the cases of 60, 61, 62 and 63. However right now it processes 64 instead of 63. I believe it's a typo since `tag >> 2 & 0x3F` must be less than 64.

Modifications:

Use the correct value 63.

Result:

Snappy.decodeLiteral handles the correct case."
6dbb610f5b5db1851af0e15b77857a071d84f959,"Add ChannelHandlerContext.invoker()

Motivation:

Being able to access the invoker() is useful when adding additional
handlers that should be running in the same thread. Since an application
may be using a threading model unsupported by the default invoker, they
can specify their own. Because of that, in a handler that auto-adds
other handlers:

// This is a good pattern
ctx.pipeline().addBefore(ctx.invoker(), ctx.name(), null, newHandler);
// This will generally work, but prevents using custom invoker.
ctx.pipeline().addBefore(ctx.executor(), ctx.name(), null, newHandler);

That's why I believe in commit 110745b0, for the now-defunct 5.0 branch,
when ChannelHandlerAppender was added the invoker() method was also
necessary.

There is a side-benefit to exposing the invoker: in certain advanced
use-cases using the invoker for a particular handler is useful. Using
the invoker you are able to invoke a _particular_ handler, from possibly
a different thread yet still using standard exception processing.

ChannelHandlerContext does part of that, but is unwieldy when trying to
invoke a particular handler because it invokes the prev or next handler,
not the one the context is for. A workaround is to use the next or prev
context (respectively), but this breaks when the pipeline changes.

This came up during writing the Http2MultiplexCodec which uses a
separate child channel for each http/2 stream and wants to send messages
from the child channel directly to the Http2MultiplexCodec handler that
created it.

Modifications:

Add the invoker() method to ChannelHandlerContext. It was already being
implemented by AbstractChannelHandlerContext. The two other
implementations of ChannelHandlerContext needed minor tweaks.

Result:

Access to the invoker used for a particular handler, for either reusing
for other handlers or for advanced use-cases. Fixes #4738"
ff11fe894d9cca5a52e8381606764935e8b54c4c,"Fix the last value in AsciiString.trim

Motivation:

In AsciiString.trim, last should be `arrayOffset() + length() - 1`. See #4741.

Modifications:

Fix the last value.

Result:

AsciiString.trim works correctly."
7090d1331c327f9093ef260f9d0e3eef1a3d6715,"Clear disabled SSL protocols before enabling provided SSL protocols

Motivation:

Attempts to enable SSL protocols which are currently disabled fail when using the OpenSslEngine. Related to https://github.com/netty/netty/issues/4736

Modifications:

Clear out all options that have disabled SSL protocols before attempting to enable any SSL protocol.

Result:

setEnabledProtocols works as expected."
40fd9979203dc393dc44a46ac1c0ff23a3bd3475,"Fixing OsgiBundleTest

Motivation:

Twitter hpack is no longer a dependency so the test fails.

Modifications:

Removed the reference to twitter hpack.

Result:

It builds."
c681a40a78cabf34138ad48126b99b5c683882b5,[maven-release-plugin] prepare release netty-4.1.0.CR1
1c417e5f8264271f785c18972a55d9e216d1b20b,[maven-release-plugin] prepare for next development iteration
58a038d398f85235683ccb01cfd7fb97c35ddece,"Fix ChannelOutboundHandlerAdapter javadoc

Motivation:

ChannelOutboundHandlerAdapter's javadoc has some minor issues.

Modifications:

Fix the minor javadoc issues and resolves #4752.

Result:

ChannelOutboundHandlerAdapter's javadoc issues are fixed."
af4f70ba2807843a63fb325d36a8f8123d9c9fa6,"More efficiently allocate header buffer.

Motivation
----------
Currently, only the fixed 24 bytes are allocated for the header and
then all the params as well as the optional extras and key are written
into the header section.

It is very likely that the buffer needs to expand at least two times
if either the extras and/or the key take up more space.

Modifications
-------------
Since at the point of allocation we know the key and extras length,
the buffer can be preallocated with the exact size, avoiding unnecessary
resizing and even allocating too much (since it uses power of two
internally).

Result
------
Less buffer resizing needed when encoding a memcache operation."
a6fd8a96bf54fb369927c0375f90502c2ac3d41e,"Set default CONTENT_TYPE when it is absent in multipart request body

Motivation:

I am use netty as a http server, it fail to decode some POST request when the request absent Content-Type in the multipart/form-data body.

Modifications:

Set content_type with default application/octet-stream to parse the uploaded file data when the Content-Type is absent in multipart request body

Result:

Can decode the http request as normal."
d4a16659412af852dd849b0e87b46779d9541fa0,"Fix SSLEngineTest handshake method.

Motivation:

We used && in the handshake method of SSLEngineTest but it must be ||.

Modifications:

Changed && to ||

Result:

Correctly check condition"
ca305d86fb45a40ad03a2e7270d58da65eb4aa06,"PlatformDependent String char[] optimization

Motivation:
PlatformDependent0 has an optimization which grabs the char[] from a String. Since this code was introduced http://openjdk.java.net/jeps/254 has been gaining momentum in JDK 9. This JEP changes the internal storage from char[] to byte[], and thus the existing char[] only based optimizations will not work.

Modifications:
- The ASCII encoding char[] String optimizations should also work for byte[].

Result:
ASCII encoding char[] String optimizations don't break if the underlying storage in String is byte[]."
e8850072e25cdeeff9443bbccc63d20fee81d516,"HTTP/2 DefaultHttp2RemoteFlowController frame merging with padding bug

Motivation:
DefaultHttp2RemoteFlowController does not correctly account for the padding in the event frames are merged. This causes the internal stat of DefaultHttp2RemoteFlowController to become corrupt and can result in attempting to write frames when there are none.

Modifications:
- Update DefaultHttp2RemoteFlowController to account for frame sizes not necessarily adding together.

Result:
DefaultHttp2RemoteFlowController internal state does not become corrupt when padding is present.
Fixes https://github.com/netty/netty/issues/4573"
ee2558bdf3a27871a3fb61a02b48aa6850bcb5ca,"[#4722] Ensure the whole certificate chain is used when creating SslContext for client mode and SslProvider.OPENSSL is used

Motivation:

We incorrectly added the trustCertChain as certificate chain when OpenSslClientContext was created. We need to correctly add the keyCertChain.

Modifications:

Correctly add whole keyCertChain.

Result:

SSL client auth is working when usin OpenSslClientContext and more then one cert is contained in the certificate chain."
a2732c6542d24cb28ee32f612f7c97c9d2216a54,"[#4755] Make WebSocketClientCompressionHandler @Sharable

Motivation:

WebSocketClientCompressionHandler is stateless so it should be @Sharable.

Modifications:

Add @Sharable annotation to WebSocketClientCompressionHandler, make constructor private and add static field to get the instance.

Result:

Less object creation."
af39cb6b12d9c1a8cf97018dc038fbecc3ea1277,"Ensure ChannelHandler.handlerAdded(...) is always called as first method of the handler

Motivation:

If a user adds a ChannelHandler from outside the EventLoop it is possible to get into the situation that handlerAdded(...) is scheduled on the EventLoop and so called after another methods of the ChannelHandler as the EventLoop may already be executing on this point in time.

Modification:

- Ensure we always check if the handlerAdded(...) method was called already and if not add the currently needed call to the EventLoop so it will be picked up after handlerAdded(...) was called. This works as if the handler is added to the ChannelPipeline from outside the EventLoop the actual handlerAdded(...) operation is scheduled on the EventLoop.
- Some cleanup in the DefaultChannelPipeline

Result:

Correctly order of method executions of ChannelHandler."
e1d34ef05da757743ef613247e75c8dc2c17b7e1,"SslHandler should call beginHanshake once for the initial handshake

Motivation:
Not all SSLEngine implementations permit beginHandshake being called while a handshake is in progress during the initial handshake. We should ensure we only go through the initial handshake code once to prevent unexpected exceptions from being thrown.

Modifications:
- Only call beginHandshake if there is not currently a handshake in progress

Result:
SslHandler's handshake method is compatible with OpenSSLEngineImpl in Android 5.0+ and 6.0+.
Fixes https://github.com/netty/netty/issues/4718"
3616d9e814d57a7613e46c576eeaf8730cec7bd0,"Correctly handle wildcard address when bind to socket and using native transport

Motivation:

When a wildcard address is used to bind a socket and ipv4 and ipv6 are usable we should accept both (just like JDK IO/NIO does).

Modifications:

Detect wildcard address and if so use in6addr_any

Result:

Correctly accept ipv4 and ipv6"
c3e5604f59e0c6354dd6458fb62e5b83edadbda2,"Do not throw IndexOutOfBoundsException on an invalid SSL record

Motivation:

When an SSL record contains an invalid extension data, SniHandler
currently throws an IndexOutOfBoundsException, which is not optimal.

Modifications:

- Do strict index range checks

Result:

No more unnecessary instantiation of exceptions and their stack traces"
78b508a7eb05ba26ffa84e3e508d8cebb7505620,"AbstractHttp2ConnectionHandlerBuilder validateHeaders cannot be set with encoder/decoder

Motivation:
If validateHeaders is set in combination with the encoder/decoder it will be silently ignored. We should enforce the constraint that validateHeaders and encoder/decoder are mutually exclusive.

Modifications:
- Make sure either validateHeaders can be set or encoder/decoder.

Result:
AbstractHttp2ConnectionHandlerBuilder does not allow conflicting options to be set."
4606890513f72a620aa29fb7b446cd8e2d3ae5fc,"Retain AbstractBinaryMemcacheDecoder.currentMessage when sending it out and release it when it's not used.

Motivation:

AbstractBinaryMemcacheDecoder.currentMessage is not retained after sending it out. Hence, if a message contains `extras`, `io.netty.util.IllegalReferenceCountException` will be thrown in `channelInactive`.

Modifications:

Retain AbstractBinaryMemcacheDecoder.currentMessage After putting it to `out` and release it when it's not used.

Result:

No IllegalReferenceCountException or leak."
8ba4b63cb639e1cf4786d7c8229b3f04b6a7d649,"OioServerChannel Default Max Messages Per Read Too High

Motivation:
A few implementations of OioServerChannel have a default max messages per read set to 16. We should set the default to 1 to prevent blocking on a read before setting a socket that has just been accepted.

Modifications:
- OioSctpServerChannel and OioServerSocketChannel metadata changed to use the default (1) max messages per read

Result:
Oio based servers will complete accepting a socket before potentially blocking waiting to accept other sockets."
11bcb8790cb2471a50a857fcae44fb42d410aa83,"Http2Connection stream id generation to support queueing

Motivation:
StreamBufferingEncoder provides queueing so that MAX_CONCURRENT_STREAMS is not violated. However the stream id generation provided by Http2Connection.nextStreamId() only returns the next stream id that is expected on the connection and does not account for queueing. The codec should provide a way to generate the next stream id for a given endpoint that functions with or without queueing.

Modifications:
- Change Http2Connection.nextStreamId to Http2Connection.incrementAndGetNextStreamId

Result:
Http2Connection can generate the next stream id in queued and non-queued scenarios.
Fixes https://github.com/netty/netty/issues/4704"
501c35afff01be0e06943b9fffb87fad1838ce5a,"Retain ByteBuf extras when aggregating

Motivation:

BinaryMemcacheObjectAggregator doesn't retain ByteBuf `extras`. So `io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1` will be thrown when aggregating a message containing `extras`. See the unit test for an example.

Modifications:

`ratain` extras to fix IllegalReferenceCountException.

Result:

`extras` is retained."
210ebe13541900807d43a8af1e4941cf40bbb9e5,"Allow to specify tcnative artifactId and verion to allow run tests easily with different tcnative flavors

Motivation:

As we now can easily build static linked versions of tcnative it makes sense to run our netty build against all of them.
This helps to ensure our code works with libressl, openssl and boringssl.

Modifications:

Allow to specify -Dtcnative.artifactId= and -Dtcnative.version=

Result:

Easy to run netty build against different tcnative flavors."
2a9d392a31c0786e99a9189ddb9f66b0dd4921b2,"Motivation:

Fix a spell mistake.

Modifications:

Change 'treshold' to 'threshold'

Result:

The spellchecker warnings of the IDE disappeared."
b354868dd83fa720a1956e3366b5931f7f5f1885,"Fix spelling in javadocs and field name.

Motivation:

Fix a spell mistake.

Modifications:

Change 'treshold' to 'threshold'

Result:

The spellchecker warnings of the IDE disappeared."
b7415a3307d9a36f2a67339c7596e0ee2b2a5644,"Add a reusable ArrayList to InternalThreadLocalMap

Motivation:

See #3411. A reusable ArrayList in InternalThreadLocalMap can avoid allocations in the following pattern:

```
List<...> list = new ArrayList<...>();

add something to list but never use InternalThreadLocalMap

return list.toArray(new ...[list.size()]);

```

Modifications:

Add a reusable ArrayList to InternalThreadLocalMap and update codes to use it.

Result:

Reuse a thread local ArrayList to avoid allocations."
17df8171b3ad5a0b51aec2d5a54e8f1d220a1892,"Use AbstractReferenceCounted to clean up the codes for codec-memcache

Motivation:

Some duplicated methods in message types of codec-memcache can be cleaned using AbstractReferenceCounted.

Modifications:

Use AbstractReferenceCounted to avoid duplicated methods.

Result:

Duplicated methods are cleaned."
4d6ab1d30de2fd06bc7544ce6301fd6b85d183d7,"Fix missing trailing data on HTTP client upgrade

Motivation:

When HttpClientUpgradeHandler upgrades from HTTP/1 to another protocol,
it performs a two-step opertion:

1. Remove the SourceCodec (HttpClientCodec)
2. Add the UpgradeCodec

When HttpClientCodec is removed from the pipeline, the decoder being
removed triggers channelRead() event with the data left in its
cumulation buffer. However, this is not received by the UpgradeCodec
becuase it's not added yet. e.g. HTTP/2 SETTINGS frame sent by the
server can be missed out.

To fix the problem, we need to reverse the steps:

1. Add the UpgradeCodec
2. Remove the SourceCodec

However, this does not work as expected either, because UpgradeCodec can
send a greeting message such as HTTP/2 Preface. Such a greeting message
will be handled by the SourceCodec and will trigger an 'unsupported
message type' exception.

To fix the problem really, we need to make the upgrade process 3-step:

1. Remove/disable the encoder of SourceCodec
2. Add the UpgradeCodec
3. Remove the SourceCodec

Modifications:

- Add SourceCodec.prepareUpgradeFrom() so that SourceCodec can remove or
  disable its encoder
- Implement HttpClientCodec.prepareUpgradeFrom() properly
- Miscellaneous:
  - Log the related channel as well When logging the failure to send a
    GOAWAY

Result:

Cleartext HTTP/1-to-HTTP/2 upgrade works again."
5fb18e3415377fd022ac46d3a898b905617cf232,"InboundHttp2ToHttpAdapter leak and logic improvements

Motivation:
In HttpConversionUtil's toHttpRequest and toHttpResponse methods can
allocate FullHttpMessage objects, and if an exeception is thrown during
the header conversion then this object will not be released. If a
FullHttpMessage is not fired up the pipeline, and the stream is closed
then we remove from the map, but do not release the object. This leads
to a ByteBuf leak. Some of the logic related to stream lifetime management
and FullHttpMessage also predates the RFC being finalized and is not correct.

Modifications:
- Fix leaks in HttpConversionUtil
- Ensure the objects are released when they are removed from the map.
- Correct logic and unit tests where they are found to be incorrect.

Result:
Fixes https://github.com/netty/netty/issues/4780
Fixes https://github.com/netty/netty/issues/3619"
f990f9983dd0e33fb4efb2212856ce5f9749cf85,"HTTP/2 Don't Flow Control Iniital Headers

Motivation:
Currently the initial headers for every stream is queued in the flow controller. Since the initial header frame may create streams the peer must receive these frames in the order in which they were created, or else this will be a protocol error and the connection will be closed. Tolerating the initial headers being queued would increase the complexity of the WeightedFairQueueByteDistributor and there is benefit of doing so is not clear.

Modifications:
- The initial headers will no longer be queued in the flow controllers

Result:
Fixes https://github.com/netty/netty/issues/4758"
d97f17060f56f4ca1c43ac2fe1a2dc8850cee845,"Support non chunked HTTP request bodies larger than Integer.MAX_VALUE.

Motivation:

Request bodies can easily be larger than Integer.MAX_VALUE in practice.
There's no reason, or intention, for Netty to impose this artificial constraint.

Worse, it currently does not fail if the body is larger than this value;
it just silently only reads the first Integer.MAX_VALUE bytes and discards the rest.

This restriction doesn't effect chunked transfers, with no Content-Length header.

Modifications:

Force the use of `long HttpUtil.getContentLength(HttpMessage, long)` instead of
`long HttpUtil.getContentLength(HttpMessage, long)`.

Result:

Netty will support HTTP request bodies of up to Long.MAX_VALUE length."
a75dcb275665a4cf621088d6665e60d0f2f189e0,"Made it easier to use custom ChannelId instances with Channel implementations that rely on the AbstractChannel(Channel parent) constructor.

Motivation:

The AbstractChannel(Channel parent) constructor was previously hard-coded to always
call DefaultChannelId.newInstance(), and this made it difficult to use a custom
ChannelId implementation with some commonly used Channel implementations.

Modifications:

Introduced newId() method in AbstractChannel, which by default returns
DefaultChannelId.newInstance() but can be overridden by subclasses. Added
ensureDefaultChannelId() test to AbstractChannelTest, to ensure the prior
behavior of calling DefaultChannelId.newInstance() still holds with the
AbstractChannel(Channel parent) constructor.

Result:

AbstractChannel now has the protected newId() method, but there is no functional
difference."
7a7160f176597e97f451748a05c54d6b1518524c,"HTTP/2 Buffer Leak if UTF8 Conversion Fails

Motivation:
Http2CodecUtil uses ByteBufUtil.writeUtf8 but does not account for it
throwing an exception. If an exception is thrown because the format is
not valid UTF16 encoded UTF8 then the buffer will leak.

Modifications:
- Make sure the buffer is released if an exception is thrown
- Ensure call sites of the Http2CodecUtil.toByteBuf can tolerate and
  exception being thrown

Result:
No leak if exception data can not be converted to UTF8."
6312c2f00b6c53fa4b84830b03126f7430bec4ed,"CompositeByteBuf.addComponent always assume reference count ownership

Motivation:
The current interface for CompositeByteBuf.addComponent is not clear under what conditions ownership is transferred when addComponent is called. There should be a well defined behavior so that users can ensure that no leaks occur.

Modifications:
- CompositeByteBuf.addComponent should always assume reference count ownership

Result:
Users that call CompositeByteBuf.addComponent do not have to independently check if the buffer's ownership has been transferred and if not independently release the buffer.
Fixes https://github.com/netty/netty/issues/4760"
a06708f81bc69ae6fbbe2638b25e7eee922f5efc,"fix the issue netty#2944 in 4.1

Motivation:

fix the issue netty#2944

Modifications:

use - instead of =>, use ! instead of :> due to the connection is bidirectional. What's more, toString() method don't know the direction or there is no need to know the direction when only log channel information.
add L： before local address and R: before remote address.

Result:

after the fix, log won't confuse the user"
e220c568232fe9b479e3ac7a5b66f5a97dcc2c39,"[#4746] Support SNI when using OpenSSL

Motivation:

When using SslProvider.OPENSSL we currently not handle SNI on the client side.

Modifications:

Correctly enable SNI when using clientMode and peerHost != null.

Result:

SNI works even with SslProvider.OPENSSL."
eb1d9da76c3938dba74c01dd18ccffca8a778931,"Enable SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER when using OpenSslContext

Motivation:

We need to enable SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER when using OpenSslContext as the memory address of the buffer that is passed to OpenSslEngine.wrap(...) may change during calls and retries. This is the case as
if the buffer is a heap-buffer we will need to copy it to a direct buffer to hand it over to the JNI layer. When not enable this mode we may see errors like: 'error:1409F07F:SSL routines:SSL3_WRITE_PENDING: bad write retry'.
Related to https://github.com/netty/netty-tcnative/issues/100.

Modifications:

Explitict set mode to SSL.SSL_MODE_RELEASE_BUFFERS | SSL.SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER . (SSL.SSL_MODE_RELEASE_BUFFERS was used before implicitly).

Result:

No more 'error:1409F07F:SSL routines:SSL3_WRITE_PENDING: bad write retry' possible when writing heap buffers."
075a54af3e607c20eeaf7809a2a08602abd5d735,"Native EPOLL Library Allows Shading

Motivation:
If Netty's class files are renamed and the type references are updated (shaded) the native libraries will not function. The native epoll module uses implicit JNI bindings which requires the fully qualified java type names to match the method signatures of the native methods. This means EPOLL cannot be used with a shaded Netty.

Modifications:
- Make the JNI method registration dynamic
- support a system property io.netty.packagePrefix which must be prepended to the name of the native library (to ensure the correct library is loaded) and all class names (to allow classes to be correctly referenced)
- remove system property io.netty.native.epoll.nettyPackagePrefix which was recently added and the code to support it was incomplete

Result:
transport-native-epoll can be used when Netty has been shaded.
Fixes https://github.com/netty/netty/issues/4800"
ef0e05320272be28940db2ecb07be7d70a50e958,"Preserve the host name of address when parsing /etc/hosts file

Motivation:

When an InetNameResolver resolves a name, it is expected to reserve the
requested host name in the resolved InetAddress.

DefaultHostsFileEntriesResolver does not preserve the host name. For
example, resolving 'localhost' will return an InetAddress whose address
is '127.0.0.1', but its getHostString() will not return 'localhost' but
just '127.0.0.1'.

Modifications:

Fix the construction of parsed InetAddresses in HostsFileParser

Result:

Host name is preserved in the resolved InetAddress"
7a562943ad5dfc430c75de8cdeb2a2aa0a68244e,"[#4533] Ensure replacement of decoder is delayed after finishHandshake() is called

Motivation:

If the user calls handshake.finishHandshake() we need to ensure that the user has the chance to setup the pipeline before any WebSocketFrames are read. Because of this we need
to delay the removal of the HttpRequestDecoder.

Modifications:

- Remove the HttpRequestDecoder via the EventLoop and so delay it which gives the user a chance to setup the pipeline after finishHandshake() completes
- Add unit test for this.

Result:

Less surpising and correct behaviour even if the http response and websocket frame are received in one read operation."
a0758e7e60e326b13ca8eeccf1a078d413793b41,"[#4794] Support window size flag by default if ZlibCodecFactory supports it.

Motivation:

If the ZlibCodecFactory can support using a custom window size we should support it by default in the websocket extensions as well.

Modifications:

Detect if a custom window size can be handled by the ZlibCodecFactory and if so enable it by default for PerMessageDeflate*ExtensionHandshaker.

Result:

Support window size flag by default in most installations."
7ef6db3ffd2f10cce835685359dec642bd3c874c,"[#4754] Correctly detect websocket upgrade

Motivation:

If the Connection header contains multiple values (which is valid) we fail to detect a websocket upgrade

Modification:

- Add new method which allows to check if a header field contains a specific value (and also respect multiple header values)
- Use this method to detect handshake

Result:

Correct detect handshake if Connection header contains multiple values (seperated by ',')."
08a7ca374740133b6579f7d48c0c8a4ce34a21e7,"Correctly pass ChannelPromise on to the next ChannelOutboundHandler when use CombinedChannelDuplexHandler.

Motivation:

Due a regression introduced by e969b6917c848c83f02617386f0f73d8f0e130a2 we missed to pass the original ChannelPromise to the next ChannelOutboundHandler and so
may never notify the origin ChannelPromise. This is related to #4805.

Modifications:

- Correctly pass the ChannelPromise
- Add unit test.

Result:

Correctly pass the ChannelPromise on deregister(...)"
465a190c3f5c06de7ac4fa21e093b3d005904d67,"[#4805] Respect isAutoRead() once re-register Channel

Motivation:

When a channel was registered before and is re-registered we need to respect ChannelConfig.isAutoRead() and so start reading one the registration task completes. This was done ""by luck"" before 15162202fb82e2293624a86bfc27a9c5c35960be.

Modifications:

Explicit start reading once a Channel was re-registered if isAutoRead() is true.

Result:

Correctly receive data after re-registration completes."
7eb3a60dba59cce87d1ad5c77771fdcd560a6812,[maven-release-plugin] prepare release netty-4.1.0.CR2
75a2ddd61c3df0b7a1e6db1cc5c588177b24c3cf,[maven-release-plugin] prepare for next development iteration
19907030d105079fee4fe6db70431f7f6b928149,"[#4841] Fix segfault if UnpooledUnsafeHeapByteBuf.getShort(..) is used and UNALGINED access is not possible.

Motivation:

We missed to take the byte[] into account when try to access the bytes and so produce a segfault.

Modifications:

Correctly pass the byte[] in.

Result:

No more segfault."
d9f938ca03dbfe0e8132b9cb9c816bd1214de7d2,"[#4828] OpenSslContext throws UnsupportedOperationException when Unsafe not available

Motivation:

OpenSslContext constructor fails with a UnsupportedOperationException if Unsafe is not present on the system.

Modifications:

Make OpenSslContext work also when Unsafe is not present by fallback to using JNI to get the memory address.

Result:

Using OpenSslContext also works on systems without Unsafe."
a51e2c87697bb57fede3744a8f3280791be3fa70,"Expose Helper to obtain the ""best"" mac address.

Motivation:

The implementation of obtaining the best possible mac address is very good. There are many sub-par implementations proposed on stackoverflow.
While not strictly a netty concern, it would be nice to offer this util also to netty users.

Modifications:

extract DefaultChannelId#defaultMachineId code obtaining the ""best"" mac into a new helper called MacAddress, keep the random bytes fallback in DefaultChannelID.

Result:

New helper available."
0f3d47199b95098b04ee774eb2730c2812bf4dd0,"[#4834] Fix race in AddressResolverGroup

Motivation:

We miss to use synchronized when remove the executor from the map.

Modifications:

Add synchronized(...) keyword

Result:

No more race."
0f91ad841d572c5b9db72802e5c460e85fafe2da,Fix possible testfailure due not waiting on Channel.close() (introduced by e220c568232fe9b479e3ac7a5b66f5a97dcc2c39)
61f812ea2a38fe20845ae72cbee8729606e01aa3,"Allow InputStreams for key/trust managers in SslContextBuilder

Motivation:

Sometimes it's easier to get keys/certificates as `InputStream`s than it is to
get an actual `File`. This is especially true when operating in a container
environment and `getResourceAsInputStream` is the best way to load resources
packaged with an application.

Modifications:

- Add read-from-`InputStream` methods to `PemReader`
- Allow `SslContext` to get keys/certificates from `InputStreams`
- Add `InputStream`-based setters for key/trust managers to `SslContextBuilder`

Result:

Callers may pass an `InputStream` instead of a `File` to `SslContextBuilder`."
acbf1b9e7e9c98e1f5209d5ef82c552e41d2bb6a,"Update jetty-alpn-agent version

Motivation:
Builds fail with java 1.8.0_72 because jetty-alpn-boot has absorbed new code from openjdk and older version are now incompatible.

Modifications:
- Updated jetty-alpn-agent version

Result:
We can now build/develop using java 1.8.0_72"
65b34704567dd101b1daa452bfff68de6b7842d4,"[#4793] Correctly add newlines when encode base64

Motivation:

We not correctly added newlines if the src data needed to be padded. This regression was introduced by '63426fc3ed083513c07a58b45381f5c10dd47061'

Modifications:

- Correctly handling newlines
- Add unit test that proves the fix.

Result:

No more invalid base64 encoded data."
a88c89a426de0544e0e292c2104f579fbaa8828e,"Add maven profile to run tests with -Dio.netty.noUnsafe=true

Motivation:

We had reports of failures before when sun.misc.Unsafe was not present. We should run our tests also with it disable to ensure everything works even if sun.misc.Unsafe is not present on the system.

Modifications:

Add a new profile which allows to run tests without Unsafe (using -PnoUnsafe)

Result:

Better testing of netty for systems where sun.misc.Unsafe is not present."
f10d66b45e6152f51879c7a6a7bc7f464a2172e4,"Epoll.isAvailable() must return false if sun.misc.Unsafe is not present.

Motivation:

Currently our epoll native transport requires sun.misc.Unsafe and so we need to take this into account for Epoll.isAvailable().

Modifications:

Take into account if sun.misc.Unsafe is present.

Result:

Only return true for Epoll.isAvailable() if sun.misc.Unsafe is present."
b9682a26b1198bc276823b0465cb9d7039cbbb7b,"EPOLL dladdr unexpected return value

Motivation:
netty_epoll_native.c uses dladdr in attempt to get the name of the library that the code is running in. However the address passed to this funciton (JNI_OnLoad) may not be unique in the context of the application which loaded it. For example if another JNI library is loaded this address may first resolve to the other JNI library and cause the path name parsing to fail, which will cause the library to fail.

Modifications:
- Pass an addresses which is local to the current library to dladdr

Result:
EPOLL JNI library can be loaded in an environment where multiple JNI libraries are loaded.
Fixes https://github.com/netty/netty/issues/4840"
f59392d9f5aba4a7e5f4cbc663b428becf53db61,"Make ""CorsConfigBuilder.allowNullOrigin()"" public

Motivation:

""CorsConfigBuilder.allowNullOrigin()"" should be public otherwise people can not set it. See #4835

Modifications:

Make ""CorsConfigBuilder.allowNullOrigin()"" public.

Result:

The user can call ""CorsConfigBuilder.allowNullOrigin()"" now."
a15ff32608f000b5b01ab00262f8b2df34b2d08c,"HttpObjectDecoder configurable initial buffer size

Motivation:
The initial buffer size used to decode HTTP objects is currently fixed at 128. This may be too small for some use cases and create a high amount of overhead associated with resizing/copying. The user should be able to configure the initial size as they please.

Modifications:
- Make HttpObjectDecoder's AppendableCharSequence initial size configurable

Result:
Users can more finely tune initial buffer size for increased performance or to save memory.
Fixes https://github.com/netty/netty/issues/4807"
f43dc7d5513bb6f29a4bcb12ffeea739b64b47c3,"Add unescapeCsv to StringUtil

Motivation:

See #3435

Modifications:

Add unescapeCsv to StringUtil

Result:

StringUtil has the counter part of escapeCsv: unescapeCsv"
36aa11937d661385461b4c1c488356347751e9f9,"ByteBuf for Key instead of String for codec-memcache

Motivation:

The key can be ByteBuf to avoid converting between ByteBuf and String. See #3689.

Modifications:

Replace the type of key with ByteBuf.

Result:

The type of key becomes ByteBuf."
56e6e07b25b968a27cdc25209664dc95f67721d1,"HTTP/2 RST_STREAM Regression f990f99

Motivation:
Commit f990f99 introduced a bug into the RST_STREAM processing that would prevent a RST_STREAM from being sent when it should have been. The promise would be marked as successful even though the RST_STREAM frame would never be sent.

Modifications:
- Fix conditional in Http2ConnectionHandler.resetStream to allow reset streams to be sent in all stream states besides IDLE.

Result:
RST_STREAM frames are now sent when they are supposed to be sent
Fixes https://github.com/netty/netty/issues/4856"
cd56f87ca12664fdec3aba8b44ee425cac5cd4be,"Remove invalid return

Motivation:

JNI_OnUnload(...) does not return anything (has void in its signature) so we should not try to return something.

Modifications:

Remove return.

Result:

Fix incorrect but harmless code."
691bc1690e9542d6093b91ffe1fbdf7d075bcd42,"ByteBufUtil.writeUtf8 not consistent with String.getBytes(Charset)

Motivation:
f750d6e36c80e88fb302c99b5b7413e5649e6738 added support for surrogates in the writeUtf8 conversion. However exceptions are thrown if invalid input is detected, but the JDK (and slow path of writeUtf8) uses a replacement character and does not throw. We should behave the same way.

Modificiations:
- Don't throw in ByteBufUtil.writeUtf8, and instead use a replacement character consistent with the JDK

Result:
ByteBufUtil.writeUtf8 behavior is consistent with the JDK UTF_8 conversion."
fdc6a5e87fe0d72cf79ec007b4ae5b32568dede6,"Leak Detector disclosing when records dropped

Motivation:
ResourceLeakDetector enforces a limit as to how large the queue is allowed to grow for stack traces in order to keep memory from growing too large. However it is not always clear when records are dropped, or how many have been dropped. This can make interpreting leak reports more difficult if you assume all information is present when it may not be. Also we should increase the limit (currently 4) when running tests on the CI servers.

Modifications:
- Increase leak detector record limit on CI servers from 4 to 32.
- Track how many records have been discarded and disclose this in the leak report.

Result:
Leak reports clarify how many records were dropped, and how to increase the limit."
c6a3729e4c7c1ebcc9400d4a1285924c4bc55aa4,"Ensure handlerAdded(...) and handlerRemoved(...) is always called from the right thread

Motiviation:

We should ensure that handlerAdded(...) and handlerRemoved(...) is always called from the EventExecutor that also invokes the other methods of the ChannelHandler. Also we need to ensure we always call handlerAdded(...) before any other method can be calld to ensure correct ordering.

Motifications:

- Ensure that the right thread is used to call the methods
- Ensure correct ordering
- Add tests

Result:

Respect the thread-model for handlerAdded(...) and handlerRemoved(...) and preserve correct ordering in all cases."
06e29e0d1b4ebf16b47969d5fbc71bdaf19fe3e8,"HTTP/2 codec may not always call Http2Connection.onStreamRemoved

Motivation:
Http2Connection.onStreamRemoved is not always called if Http2Connection.onStreamAdded is called. This is problematic as users may rely on the onStreamRemoved method to be called to release ByteBuf objects and do other cleanup.

Modifications:
- Http2Connection.close will remove all streams existing streams and prevent new ones from being created
- Http2ConnectionHandler will call the new close method in channelInactive

Result:
Http2Connection.onStreamRemoved is always called when Http2Connection.onStreamRemoved is called to preserve the Http2Connection guarantees.
Fixes https://github.com/netty/netty/issues/4838"
b112673554bafc1eccfd43913a3e8605337dd7fb,"ByteToMessageDecoder ChannelInputShutdownEvent support

Motivation:
b714297a44ced34643fa60ca854f1880d02ba649 introduced ChannelInputShutdownEvent support for HttpObjectDecoder. However this should have been added to the super class ByteToMessageDecoder, and ByteToMessageDecoder should not propegate a channelInactive event through the pipeline in this case.

Modifications:
- Move the ChannelInputShutdownEvent handling from HttpObjectDecoder to ByteToMessageDecoder
- ByteToMessageDecoder doesn't call ctx.fireChannelInactive() on ChannelInputShutdownEvent

Result:
Half closed events are treated more generically, and don't get translated into a channelInactive pipeline event."
ccb08706003b4aed2a6a95d009f7fd736f723b23,"Add methods with position independent FileChannel calls to ByteBuf

Motivation

See ##3229

Modifications:

Add methods with position independent FileChannel calls to ByteBuf and its subclasses.

Results:

The user can use these new methods to read/write ByteBuff without updating FileChannel's position."
333f55e9ce5eeb68b7d159443d0f7f5f92a6fe9d,"Add unescapeCsvFields to parse a CSV line and implement CombinedHttpHeaders.getAll

Motivation:

See #4855

Modifications:

Unfortunately, unescapeCsv cannot be used here because the input could be a CSV line like `""a,b"",c`. Hence this patch adds unescapeCsvFields to parse a CSV line and split it into multiple fields and unescaped them. The unit tests should define the behavior of unescapeCsvFields.

Then this patch just uses unescapeCsvFields to implement `CombinedHttpHeaders.getAll`.

Result:

`CombinedHttpHeaders.getAll` will return the unescaped values of a header."
94f2748f1b76237a513783ac1fdb5aef4b622a21,"Upgrade to netty-tcnative-1.1.33.Fork13

Motivation:

netty-tcnative-1.1.33.Fork was released, we should upgrade. Also we should skip renegotiate tests if boringssl is used because boringssl does not support renegotiation.

Modifications:

- Upgrade to netty-tcnative-1.1.33.Fork13
- Skip renegotiate tests if boringssl is used.

Result:

Use newest version of netty-tcnative and be able to build if boringssl is used."
f0f0b69d90be9eee51434a0c9abce0db5c2b66d2,"fixed ""sensative"" typo to read ""sensitive"""
74495fd27f65277530214ed09ef858ab4f39498e,"Add advanced leakdetection for methods introduced by [#4842]

Motivation:

[#4842] introduced 4 new methods but missed to implement advanced leak detection for these.

Modifications:

Correctly implement advanced leak detection for these methods.

Result:

Advanced leak detection works for all methods as expected."
0b1c82b25444bb244a33008d23863d5a0e82a323,"Ensure read components can be discarded when COMPOSITE_CUMULATOR is used.

Motivation:

ByteToMessageDecoder must ensure that read components of the CompositeByteBuf can be discard by default when discardSomeReadBytes() is called. This may not be the case before as because of the default maxNumComponents that will cause consolidation.

Modifications:

Ensure we not do any consolidation to actually be abel to discard read components

Result:

Less memory usage and allocations."
839e2ca50803c17419a88f7b3b15c2b8c87a73ca,"Revert JDK GCM direct buffer crash workaround

Motivation:
Commit 108dc23cab13eea074397f0ade80859da4744323 introduced a workaround due to a JDK crash when GCM cipher was used during an unwrap operation. Attempting to reproduce this issue with the latest JDK (1.8.0_72-b15) demonstrate that this issue no longer exists while it can be reliably reproduced on earlier JDKs (1.8.0_25-b17 and earlier)

Modifications:
- Remove the copy-to-heap-buffer workaround for JDK engine

Result:
Fixes https://github.com/netty/netty/issues/3256"
41d0a816912f32ff0405882cca347682549a709d,"Use ByteBufAllocator to allocate ByteBuf for FullHttpMessage Motivation: When converting SPDY or HTTP/2 frames to HTTP/1.x, netty always used an unpooled heap ByteBuf.

Modifications:
When constructing the FullHttpMessage pass in the ByteBuf to use via the ByteBufAllocator assigned via the context.

Result:
The ByteBuf assigned to the FullHttpMessage can now be configured as a pooled/unpooled, direct/heap based ByteBuf via the ByteBufAllocator used."
23f7fc67a4aee858b6526885167c422a7339d593,Enable shutdownOutput for EpollDomainSocketChannel
83c4aa6ad880445856551de1f7d4aeb40ee06df4,"HTTP/2 Writes GO_AWAY on channelInactive

Motivation:
Http2ConnectionHandler inherits from ByteToMessageDecoder. ByteToMessageDecoder.channelInactive will attempt to decode any remaining data by calling the abstract decode method. If the Http2ConnectionHandler is in server mode, and no data has been exchanged yet, it will try to treat this data as an invalid connection preface and write a GO_AWAY. This is noisy in the logs and creates an illusion that there is a protocol violation when there has not been.

Modifications:
- If the channel is inactive the connection preface decode should not be executed.

Result:
Log files don't include misleading error messages related to connection preface errors."
6e9d2bf13c33757b5d1d44e1fbe20f4257239885,"Correctly set the alert type depending of the CertificateException

Motivation:

Depending on the actual CertificateException we should set the correct alert type so it will be sent back to the remote peer and so make it easier for them to fix it.

Modification:

Correctly set the alert and not always just use a general alert.

Result:

It's easier for the remote peer to fix the problems."
050ac709ba3db2a1c2df27f558bdcb348c4ac6f2,"PromiseNotifier does not propagate cancel events

Motivation:
If the Future that the PromiseNotifier is listening to is cancelled, it does not propagate the cancel to all the promises it is expected to notify.

Modifications:
- If the future is cancelled then all the promises should be cancelled
- Add a UnaryPromiseNotifier if a collection of promises is not necessary

Result:
PromiseNotifier propagates cancel events to all promises"
f39eb9a6b26cf86a2eff56aa0ce59f0df0b2ccf9,[maven-release-plugin] prepare release netty-4.1.0.CR3
ca443e42e03b6053676c239e5afb28fedcdb7aad,[maven-release-plugin] prepare for next development iteration
c7aadb5469601074526155d7330bcf355b27fcb7,"Fork SpscLinkedQueue and SpscLinkedAtomicQueue from JCTools

Motivation:

See #3746.

Modifications:

Fork SpscLinkedQueue and SpscLinkedAtomicQueue from JCTools based on https://github.com/JCTools/JCTools/tree/7846450e2817d6eb9653111e3b7a85b76fbbcfd1

Result:

Add SpscLinkedQueue and SpscLinkedAtomicQueue and apply it in LocalChannel."
b42656661778474bc89dfce8d354deb6b19ca6da,"DnsNameResolver: makes possible to define additional records in DNS query

Motivation:

Current DnsNameResolver api don't allow to define additional records in DNS query.
It can be useful in many cases. For example when we want to query dns server with
real client address (EDNS-CLIENT-SUBNET extension:
http://tools.ietf.org/html/draft-vandergaast-edns-client-subnet-02 )

Modifications:

This change add new query methods with list of additional DnsRecord-s for query.

Result:

It is possible to create dns query with EDNS-CLIENT-SUBNET extension for example."
6423e1b9c82aeae0ed29cf47f3381380b2a1961f,"Adding support for tcnative uber jar

Motivation:

We want to allow the use of an uber jar that contains the shared libraries for all platforms.

Modifications:

Modified OpenSsl to first check for a platform-specific lib before using the default lib.

Result:

uber support."
5ce504070f20d6c8d356b92187f791e3eed0f8f4,Remove a unused import
0bea10b0b064d7983a1422af792eeb70e511eac4,"[#4892] Make Snappy class public

Motivation:

Some people may want to use the Snappy class directly to encode / decode ByteBufs.

Modifications:

Make the Snappy class public and final.

Result:

Easier for people to reuse parts of Netty."
a4846e615390ddd9ebf2a51e46072aedbaa63384,"issues/4909 - Adding paxexam version

Motivation:

Build warning message is shown when building netty project. Due to missing paxexam version below[1] warning message is shown when building netty project.

Modifications:

Added paxexam plugin version into root pom

Result:

paxexam related warning will not be displayed when building the project.

[1]. #4909"
a2e113b987291ddb78f23c0af2c4ed6776e2a344,"Use ByteProcessor.FIND_LF to find end of line

Motivation:

Each call of ByteBuf.getByte(int) method does boundary checking. This can be eliminated by using ByteBuf.forEachByte(ByteProcessor) method and ByteProcessor.FIND_LF processor.

Modifications:

Find end of line with ByteProcessor.FIND_LF

Result:

A little better performance of LineBasedFrameDecoder."
4a5e484c5a833a4611779fcea0a7457933d3bb83,"Add xml-maven-plugin to check indentation and fix violations

Motivation:

See https://github.com/netty/netty-build/issues/5

Modifications:

Add xml-maven-plugin to check indentation and fix violations

Result:
pom.xml will be checked in the PR build"
94f27be59b637c74763cc3b9fd27cf628b59f7bd,"ByteBufUtil writeUtf8 and writeAscii helper methods

Motivation:
Utility methods in ByteBufUtil to writeUtf8 and writeAscii expect a buffer to already be allocated. If the user does not have a buffer allocated they have to know details of the encoding in order to know the size of the buffer to allocate.

Modifications:
- Add writeUtf8 and writeAscii which take a ByteBufAllocator and allocate a ByteBuf of the correct size for the user

Result:
ByteBufUtil methods which are easier to use if the user doesn't already have a ByteBuf."
c4fbc0642de213774c479b3fb61d5f05abc8fc62,"HTTP/2 stream removed from map before onStreamClosed called

Motivation:
The interface contract of Http2Connection.Listener.onStreamClosed says that the stream will be removed from the active stream map, and not necessarily the stream map. If the channel becomes inactive we may remove from the stream map before calling onStreamClosed.

Modifications:
- Don't remove from the stream map during iteration until after onStreamClosed is called

Result:
Expectations of onStreamClosed interface are not violated"
9aac6dac2e934c7fdcca234607afbd2595b4aebe,"[#4386] ByteToMessage.decodeLast(...) should not call decode(...) if buffer is empty.

Motivation:

If the input buffer is empty we should not have decodeLast(...) call decode(...) as the user may not expect this.

Modifications:

- Not call decode(...) in decodeLast(...) if the input buffer is empty.
- Add testcases.

Result:

decodeLast(...) will not call decode(...) if input buffer is empty."
4b5b23080231275733361d2dda966fce760cc295,"HTTP/2 DefaultHttp2HeadersDecoder weighted average error

Motiviation:
cfcee5798d6680d87aec3ae68cdded74a1402f84 introduced code to resize the headers based upon a weighted average. The weight used for new entries was initialized using integer arithmetic when it should have been floating point arithmetic and so new values contribute 0 weight.

Modifications:
- Cast to float when initializing

Result:
Weighted average does not give 0 weight to new headers in DefaultHttp2HeadersDecoder."
0d3eda38e15582d1dac05920787f1c9f3a9f781e,Helper method to get mime-type from Content-Type header of HttpMessage
68bbd4e9669aab4c29dcc1d23ef331aaa2aee333,"Handle only those http requests that equal to adjusted websocket path

Motivation:

It will be easier to support websockets in server application by using WebSocketServerProtocolHandshakeHandler class and not reinvent its functionality. But currently it handles all http requests as if they were websocket handshake requests.

Modifications:

Check if http request path is equals to adjusted websocket path.
Fixed example of websocket server implementation.

Result:

WebSocketServerProtocolHandshakeHandler handles only websocket handshake requests."
c295f2239049a677527fa2be7ab14d7e413da4b9,"Add junit timeout listener to print the full thread dump on test timeout

Motivation:

See #3172

Modifications:

https://github.com/netty/netty-build/pull/6 added a junit timeout listener to the netty-build project. This patch just set it up.

Result:

If a test is set the timeout parameter using junit's @Test(timeout = ...) and the timeout is triggered, a full stack trace dump will be outputted and also output the deadlocks if any."
900353af5212b090e65b279777fb021a88136622,"HTTP/2 Reduce Log Level

Motivation:
https://github.com/netty/netty/commit/83c4aa6ad880445856551de1f7d4aeb40ee06df4 changed the log level to warn, but should have changed to debug.

Modifications:
- Change the log level to debug in Http2ConnectionHandler if the GO_AWAY fails to send. The write failure could be the result of the channel already being closed.

Result:
Fixes https://github.com/netty/netty/issues/4930."
4095cb253aa3895d0cbd1e0d9eb022fa0cee32d0,Just a couple of minor javadoc fixes
d8658989e1a9a998373886738a17ba8cc9e270ae,"Use smaller connect timeout to speed up tests.

Motivation:

For on tests we expected a ConnectTimeoutException but used the default timeout of 10 seconds. This slows down testing.

Modifications:

Use connect timeout of 1 second in unit test.

Result:

Faster execution of unit test."
e2d4e222431014506d592af7d379824e21034970,"Add CharsetUtil.encoder/decoder() methods

Motivation:

See #3321

Modifications:

1. Add CharsetUtil.encoder/decoder() methods
2. Deprecate CharsetUtil.getEncoder/getDecoder() methods

Result:

Users can use new CharsetUtil.encoder/decoder() to specify error actions"
ef8dcae9afa672d6081f343754de577fd8e0f689,"Fix potential infinite loop when resolving CNAME records

Related: #4771

Motivation:

A malicious or misconfigured DNS server can send the CNAME records that
resolve into each other, causing an unexpected infinite loop in
DnsNameResolverContext.onResponseCNAME().

Modifications:

- Remove the dereferenced CNAME from the alias map so that infinite loop
  is impossible.
- Fix inspection warnings and typos in DnsNameResolverTest

Result:

Fixes #4771"
e2f5012f3bbbdccc0d6e1736f4d68a83c4b3101f,"DefaultChannelHandlerInvoker write leak

Motivation:
DefaultChannelHandlerInvoker.invokeWrite calls a utility method validatePromise which may throw if the arguments are not valid. If this method throws then the message will not be released.

Modifications:
- If an exception is thrown the message should be released

Result:
No more leak in DefaultChannelHandlerInvoker.invokeWrite"
d0f7f98d22e1c9be6b4a00025e7bc6ebab42d4ea,"e2f5012 unit test cleanup

Motivation:
e2f5012 added unit tests which did not verify the buffer was released as it was intended to.

Modification:
- Unit tests must verify release is called

Result:
Unit tests enforce that ByteBufs are released."
d09547deb8d0b1de43637f206d49711535fd9e09,"Add support for TCP_DEFER_ACCEPT and TCP_QUICKACK

Motivation:

When using the native transport have support for TCP_DEFER_ACCEPT or / and TCP_QUICKACK can be useful.

Modifications:

- Add support for TCP_DEFER_ACCEPT and TCP_QUICKACK
- Ad unit tests

Result:

TCP_DEFER_ACCEPT and TCP_QUICKACK are supported now."
45d291bb15904de91a519c542ff1f91bac1a873a,"Add asserts so users will see errors when try to use methods from outside the EventLoop.

Motivation:

We should guard users from using Unsafe methods from outside the EventLoop if not designed to do so.

Modifications:

Add asserts

Result:

Easier for users to detect miss-use."
58c63b788857e503f3b48bc0d2d794d504495acb,"Add support for directly decoding/encoding DNS PTR Records

Motivation:

The current implementation will provide a DnsRawRecord, which, while
containing the host name it resolves to, would require the user to
decode the name using the decode method currently private to
DefaultDnsRecordDecoder, which in fact means copying it.

Modifications:

Introduce DnsPtrRecord, which is a specialization of DnsRecord which
provides a decoded host name.

Result:

PTR Records are much easier to work with, as the name is decoded already."
3d7cec63769b32ad323e86d168a2e1237667ff32,"Bug fix for HttpPostMultipartRequestDecoder part decoding with an invalid charset not reported as an ErrorDataDecoderException

Motivation:

The current HttpPostMultipartRequestDecoder can decode multipart/form-data parts with a Content-Type that specifies a charset. When this charset is invalid the Charset.forName() throws an unchecked UnsupportedCharsetException. This exception is not catched by the decoder. It should actually be rethrown as an ErrorDataDecoderException, because the developer using the API would expect this validation failure to be reported as such.

Modifications:

Add a catch block for UnsupportedCharsetException and rethrow it as an ErrorDataDecoderException.

Result:

UnsupportedCharsetException are now rethrown as ErrorDataDecoderException."
6536c7c4efda734d268802658838e57a2ec444a4,Updating Branches to look section to match the current branching structure of the project
bd6040a36e335f3586df9dd81655b3d73b35da2a,"HTTP/2 DefaultHttp2Connection NPE

Motivation:
If while iterating the active streams a close operation occurs this will be queued and process after the iteration has completed to avoid a concurrent modification exception. However it is possible that during the iteration the stream which was closed could have been removed from the priority tree and its parent would be set to null. Then after the iteration completes the close operation will attempt to dereference the parent and results in a NPE.

Modifications:
- pending close operations should verify the stream's parent is not null before processing the event

Result:
No More NPE."
bfbef036a8c1121083b485a98b9cb04a84e7dfea,"EPOLL ET AutoRead

Motivation:
EPOLL does not support autoread when in ET mode.

Modifications:
- EpollRecvByteAllocatorHandle should not unconditionally force reading just because ET is enabled
- AbstractEpollChannel and all derived classes which implement epollInReady must support a variable which indicates
there may be more data to read. The variable will be used when read is called to simulate a EPOLL wakeup and call epollInReady if necessary. This will ensure that if we don't read until EAGAIN that we will try to read again and not rely on EPOLL to notify us.

Result:
EPOLL ET supports auto read."
404666d247504e1bbffbeb87445628735b9e2342,"HTTP/2 ByteBufUtil.writeUtf8 cleanup

Motiviation:
691bc1690e9542d6093b91ffe1fbdf7d075bcd42 made writeUtf8 consistent with String.getBytes() so that it never throws.
94f27be59b637c74763cc3b9fd27cf628b59f7bd provided a writeUtf8 method which takes a ByteBufAllocator to do an appropriately sized buffer allocation.

Result:
- Assume writeUtf8 will not throw in HTTP/2 codec
- Use the new writeUtf8 method

Result:
Cleaner code in codec-http2."
e7ee6abd707f3f0b3cae6a4190b7bb9415a1a568,"Guard against re-entrance in PendingWriteQueue.

Motivation:

PendingWriteQueue should guard against re-entrant writes once
removeAndFailAll() is run.

Modifications:

removeAndFailAll() should repeat until the queue is finally empty.

Result:

assertEmpty() will always hold."
35771dd1cdd20e291a4a1a15ef04da57329c41db,"Fix race in PoolArena.allocate. Fixes #4829

Motivation:

The statistic counters PoolArena.(allocationsTiny|allocationsSmall) are
not protected by a per arena lock, but by a per size class lock. Thus,
two concurrent allocations of different size (class) could lead to a
race and ultimately to wrong statistics.

Modifications:

Use a thread-safe LongCounter instead of a plain long data type.

Result:

Fewer data races."
97df3cb03939eabe30c3cc091eddbe4cb9be2fda,"[#4936] NetUtil can prevent using Netty due to SecurityManager denial

Motivation:

A custom SecurityManager may prevent calling File.exists() and so throw a SecurityException in the static init block of NetUtil.

Modifications:

Correctly catch the exception and so allow to static init NetUtil.

Result:

Allow static init method of NetUtil to work even with custom SecurityManager."
c65165c491680e8c11253c116fe39e11f64d66c5,"Remove TCP_MD5 from EpollServerChannelConfig.

Motivation:

TCP_MD5 is only supported by SocketChannels so remove it from EpollServerChannelConfig which is generic.

Modifications:

Remove invalid code.

Result:

Remove invalid / dead code."
52bfaae1a023de27d6c84d03d4db71ef7ac46d39,"Fix EpollServerSocketConfig.isFreebind()

Motivation:

EpollServerSocketConfig.isFreebind() throws an exception when called.

Modifications:

Use the correct getsockopt arguments.

Result:

No more exception when call EpollServerSocketConfig.isFreebind()"
4fb585965cf7613dc1011b23f09114135a254399,"Add DatagramPacketEncoder and DatagramPacketDecoder

Motivation:

UDP-oriented codec reusing the existing encoders and decoders would be helpful. See #1350

Modifications:

Add DatagramPacketEncoder and DatagramPacketDecoder to reuse the existing encoders and decoders.

Result:

People can use DatagramPacketEncoder and DatagramPacketDecoder to wrap existing encoders and decoders to create UDP-oriented codec."
e3bf6799983eea213f33266d60a44428d3b19da5,"Ensure connect promise is notifed before fireChannelActive() is called. Related to [#4927]

Motivation:

We should always first notify the promise before trigger an event through the pipeline to be consistent.

Modifications:

Ensure we notify the promise before fire event.

Result:

Consistent behavior"
45849b2fa86070a4320b0756cf024012f5291b02,"Deprecate PromiseAggregator

Motivation:
PromiseAggregator's API allows for the aggregate promise to complete before the user is done adding promises. In order to support this use case the API structure would need to change in a breaking manner.

Modifications:
- Deprecate PromiseAggregator and subclasses
- Introduce PromiseCombiner which corrects these issues

Result:
PromiseCombiner corrects the deficiencies in PromiseAggregator."
6a2425b846ec04c40da3bf7482f4c464334cb2b2,"HTTP/2 SimpleChannelPromiseAggregator don't fail fast

Motivation:
Http2Codec.SimpleChannelPromiseAggregator currently fails fast if as soon as a tryFailure or setFailure method is called. This can lead to write operations which pass the result of SimpleChannelPromiseAggregator.newPromise to multiple channel.write calls throwing exceptions due to the promise being already done. This behavior is not expected by most of the Netty codecs (SslHandler) and can also create unexpected leaks in the http2 codec (DefaultHttp2FrameWriter).

Modifications:
- Http2Codec.SimpleChannelPromiseAggregator shouldn't complete the promise until doneAllocatingPromises is called
- Usages of Http2Codec.SimpleChannelPromiseAggregator should be adjusted to handle the change in behavior
- What were leaks in DefaultHttp2FrameWriter should be fixed to catch any other cases where ctx.write may throw

Result:
SimpleChannelPromiseAggregator won't generate promises which are done when newPromise is called."
26811b53ab7caa19014ed274e4ef96ce482de2b5,"Adding support for tcnative fedora flavour in uber jar

Motivation:

We want to allow the use of an uber jar that contains shared dynamic libraries for all platforms (including fedora).

Modifications:

Modified OpenSsl to try and load the fedora library if the OS is Linux and the platform specified library fails before using the default lib.

Result:

True uber support."
b88a980482d2aef1163a9abe759f68e685550052,"Change arena to thread cache mapping algorithm to be closer to ideal.

Motivation:
Circular assignment of arenas to thread caches can lead to less than optimal
mappings in cases where threads are (frequently) shutdown and started.

Example Scenario:
There are a total of 2 arenas. The first two threads performing an allocation
would lead to the following mapping:

Thread 0 -> Arena 0
Thread 1 -> Arena 1

Now, assume Thread 1 is shut down and another Thread 2 is started. The current
circular assignment algorithm would lead to the following mapping:

Thread 0 -> Arena 0
Thread 2 -> Arena 0

Ideally, we want Thread 2 to use Arena 1 though.

Presumably, this is not much of an issue for most Netty applications that do all
the allocations inside the eventloop, as eventloop threads are seldomly shut down
and restarted. However, applications that only use the netty-buffer package
or implement their own threading model outside the eventloop might suffer from
increased contention. For example, gRPC Java when using the blocking stub
performs some allocations outside the eventloop and within its own thread pool
that is dynamically sized depending on system load.

Modifications:

Implement a linear scan algorithm that assigns a new thread cache to the arena
that currently backs the fewest thread caches.

Result:

Closer to ideal mappings between thread caches and arenas. In order to always
get an ideal mapping, we would have to re-balance the mapping whenever a thread
dies. However, that's difficult because of deallocation."
acbca192bd93b2691c86c5cec06e4fc1f15d6a05,"ChannelConfig operations should wrap ClosedChannelException if Channel was closed before.

Motivation:

To be consistent with the JDK we should ensure our native methods throw a ClosedChannelException if the Channel was previously closed. This will then be wrapped in a ChannelException as usual. For all other errors we continue to just throw a ChannelException directly.

Modifications:

Ensure getsockopt and setsockopt will throw a ClosedChannelException if the channel was closed before, on other errors we throw a ChannelException as before diretly.

Result:

Consistent with the NIO Channel implementations."
83c349ffa94d3992c4ee511d3625afc0c97c12bb,"Fix wrong use of assertTrue in unit test.

Motivation:

My previous commit b88a980482d2ae introduced a flawed unit test,
that executes an assertion in a different thread than the test thread.
If this assertion fails, the test doesn't fail.

Modifications:

Replace the assertion by a proper workaround.

Result:

More correct unit test"
7d12333c3842c92942d8a1d9a5e5cb34876c6bbe,"Add final keyword which was missing in 47b598e6ce6c1f0e57d6955d10652dd5e5bc1462

Motivation:

The two fields should have final keyword.

Modifications:

Add final keyword

Result:

Cleaner code."
6796604f4653450e2579dc097b6c58f79ddb40c6,"Remove double spacing

Motivation:

We had some double spacing in the methods which should be removed to keep things consistent.

Modifications:

Remove redundant spaces.

Result:

Cleaner / consistent coding style."
c3c1b4a6d2bc66b7ae01a1731656d4bd6dc915b1,"[#4937] [#4935] Correctly valid domain name length and convert to ASCII.

Motivation:

Domain name labels must be converted to ASCII and not be longer then 63 chars.

Modifications:

Correctly convert to ASCII which also will enforce the 63 chars length.

Result:

Correctly guard against invalid input."
6e840d8e62e98590e129ab6f21e2deba46bfcacf,"trivial javadoc fixes

- fix the formatting of the diagram in ChannelFuture's javadoc
- update external link in AutobahnServer
- fix various spelling issues"
abbdc70d8bed7fffc9b32eae7031e6caa0832a42,"Validate MQTT CONNECT reserved flag in variable header

Motivation:

According to the MQTT 3.1.1 Protocol Specification: The Server MUST validate that the reserved flag in the CONNECT Control Packet is set to zero and disconnect the Client if it is not zero. (http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349230)

Resolves #4182

Modifications:

Check the CONNECT reserved flag for MQTT 3.1.1. If it's not 0, throw an exception.

Result:

If the CONNECT reserved flag, a decode failure will be emitted."
01835fdf18d2e40b1ac13682995a119edc05d590,"Add LineEncoder to append a line separator automatically

Motivation:

See #1811

Modifications:

Add LineEncoder and LineSeparator

Result:

The user can use LineEncoder to write a String with a line separator automatically"
8dbf5d02e53a72c42467b8dc0a5e1482d5f49af4,"EPOLL SO_LINGER=0 sends FIN+RST

Motivation:
If SO_LINGER is set to 0 the EPOLL transport will send a FIN followed by a RST. This is not consistent with the behavior of the NIO transport. This variation in behavior can cause protocol violations in streaming protocols (e.g. HTTP) where a FIN may be interpreted as a valid end to a data stream, but RST may be treated as the data is corrupted and should be discarded.

https://github.com/netty/netty/issues/4170 Claims the behavior of NIO always issues a shutdown when close occurs. I could not find any evidence of this in Netty's NIO transport nor in the JDK's SocketChannel.close() implementation.

Modifications:
- AbstractEpollChannel should be consistent with the NIO transport and not force a shutdown on every close
- FileDescriptor to keep state in a consistent manner with the JDK and not allow a shutdown after a close
- Unit tests for NIO and EPOLL to ensure consistent behavior

Result:
EPOLL is capable of sending just a RST to terminate a connection."
daa4efcfef0f747b7ce8e77335881fbd5692bffa,"Add proper synchronization when access metrics.

Motivation:

We also need to add synchronization when access fields to ensure we see the latest updates.

Modifications:

Add synchronization when read fields that are written concurrently.

Result:

Ensure correct visibility of updated."
5c023976899d7b218dac91d7e8ff160545583dd4,"Support private key encrypted with empty password

Motivation:

A user may use a private key which is encrypted with an empty password. Because of this we should only handle a null password in a special way.

Modifications:

- Correctly handle private key that is encrypted with empty password.
- Make OpenSsl*Context implementions consistent in terms of initialization in the constructor.

Result:

Correctly support private key that is encrypted with empty password."
8d499a2419e616342c6076f1994deba87447fbb5,Fix calculation of PoolArena metrics after introducing a regression in 89da788fd23f3e745c799abb575a98696ebcdc2c
ed9d6c79bca67c181b1325a5059af47d40952a01,"[#4972] Remove misleading argument from HttpServerUpgradeHandler.UpgradeCodec.upgradeTo

Motivation:

upgradeTo(...) takes the response as paramater, but the respone itself was already written to the Channel. This gives the user the impression the response can be changed or even act on it which may not be safe anymore once it was written and has been released.

Modifications:

Remove the response param from the method.

Result:

Less confusion and safer usage."
0320ccb59f3d391a17a6af90b823f390e2314087,"Let getSoError() throw IOException as well

Motivation:

In commit acbca192bd93b2691c86c5cec06e4fc1f15d6a05 we changed to have our native operations which either gall getsockopt or setsockopt throw IOExceptions (to be more specific we throw a ClosedChannelException in some cases). Unfortunally I missed to also do the same for getSoError() and missed to add throws IOException to the native methods.

Modifications:

- Correctly throw IOException from getSoError()
- Add throws IOException to native methods where it was missed.

Result:

Correct declaration of getSoError() and other native methods."
d747438366cffbbfaec80ac114a5b7fad2e9cf2c,"Add ! to allowed cookie value chars

Motivation:

! is missing from allowed cookie value chars, as per https://tools.ietf.org/html/rfc6265#section-4.1.1.
Issue was originally reported on Play!, see https://github.com/playframework/playframework/issues/4460#issuecomment-198177302.

Modifications:

Stick to RFC6265 ranges.

Result:

RFC6265 compliance, ! is supported"
8ec594c6eb32f34f154979bf2bd35368055912a1,"Change HttpServerUpgradeHandler.UpgradeCodec to allow aborting upgrade

Motivation:

HttpServerUpgradeHandler.UpgradeCodec.prepareUpgradeResponse should allow to abort the upgrade and so just continue with using HTTP. Beside this we should only pass in the response HttpHeaders as this is inline with the docs.

Modifications:

- UpgradeCodec.prepareUpgradeResponse now allows to return a boolean and so allows to specifiy if the upgrade should take place.
- Change the param from FullHttpResponse to HttpHeaders to be inline with the javadocs.

Result:

More flexible and correct handling of upgrades."
fc099292fda032289f656ebff7413d5a570a06a2,"HTTP/2 DefaultHttp2ConnectionEncoder data frame size incorrect if error

Motivation:
If an error occurs during a write operation then DefaultHttp2ConnectionEncoder.FlowControlledData will clear the CoalescingBufferQueue which will reset the queue's readable bytes to 0. To recover from an error the DefaultHttp2RemoteFlowController will attempt to return bytes to the flow control window, but since the frame has reset its own size this will lead to invalid flow control accounting.

Modifications:
- DefaultHttp2ConnectionEncoder.FlowControlledData should not reset its size if an error occurs

Result:
No more flow controller errors due to DefaultHttp2ConnectionEncoder.FlowControlledData setting its size to 0 if an error occurs."
4e3a4130470626fbaa0bad712001887b0e4ad8f7,"Correctly handle UpgradeEvent.release(decrement).

Motivation:

We missed to pass the decrement value to the wrapped FullHttpRequest and so missed to decrement the reference count in the correct way.

Modifications:

Correctly pass the decrement value to the wrapped request.

Result:

UpgradeEvent.release(decrement) works as expected."
15b1a94b2f3f713b65c7b8ab38136ebd4f487ee6,"Ensure native memory is released when OpenSslServercontext constructor throws exception

Motivation:

We need to ensure we do all checks inside of the try / catch block so we free native memory that was allocated in the constructor of the super class in a timely manner.
Modifications:

Move all checks inside of the try block.

Result:

Correctly release native memory (and not depend on the finalizer) when a check in the constructors fails"
ebfb2832b232644adc5900135d2ff38252b02b70,"Throw exception if KeyManagerFactory is used with OpenSslClientContext

Motivation:

We currently not supported using KeyManagerFactory with OpenSslClientContext and so should throw an exception if the user tries to do so. This will at least not give suprising and hard to debug problems later.

Modifications:

Throw exception if a user tries to construct a OpenSslClientContext with a KeyManagerFactory

Result:

Fail fast if the user tries to use something that is not supported."
b26652a934d8e75d36ff14ac9d7cf5665f998f90,"Fix typo in log message during static init of Recycler.

Motivation:

Fix a typo in the log message of the static initializer of Recycler.

Modifications:

Fix typo.

Result:

Correctly log system property io.netty.recycler.maxCapacity."
4e1760c91bacad2b3287f737df5806498fea70bf,"Allow disable Recycler via -Dio.netty.recycler.maxCapacity=0

Motivation:

It should be possible to disable the Recycler with -Dio.netty.recycler.maxCapacity=0, but because of a typo this is not the case.

Modifications:

Replace <= with < to make it posible to disable the Recycler.

Result:

Correct behaviour when using -Dio.netty.recycler.maxCapacity=0"
93306310972cb36c8cb04ac0bb4e3b9ef58c410d,"Ensure all pending SSL data is written before closing channel during handshake error.

Motivation:

We need to ensure we call ctx.flush() before closing the actual channel when an handshake failure took place. If we miss to do so we may not send all pending data to the remote peer which also include SSL alerts.

Modifications:

Ensure we call ctx.flush() before ctx.close() on a handshake error.

Result:

All pending data (including SSL alerts) are written to the remote peer on a handshake error."
4653dc1d05cfac8766bed63c4dd28c8d06128423,[maven-release-plugin] prepare release netty-4.1.0.CR4
28d03adbfef2cd445b7844f3aca14266a718c243,[maven-release-plugin] prepare for next development iteration
42419d918d26fa33c4a000e927df32b081eb73b9,"Fix setBytes when source is read-only ByteBuffer and target is pooled buffer

Motivation:

The method setBytes creates temporary heap buffer when source buffer is read-only.
But this temporary buffer is not used correctly and may lead to data corruption.
This problem occurs when target buffer is pooled and temporary buffer
arrayOffset() is not zero.

Modifications:

Use correct arrayOffset when calling PlatformDependent.copyMemory.
Unit test was added to test this case.

Result:

Setting buffer content works correctly when target is pooled buffer and source
is read-only ByteBuffer."
48506f5b055da028c37b4961ce9a2620b4789e59,"[#4993] Correctly handle trailing dot in DNS requests and responses for the hostname.

Motivation:

We need to handle the trailing dot in the correct manner when creating DNS questions and responses.

Modifications:

- Add a trailing dot if not given to the hostname when construct a AbstractDnsRecord (this is the same as dig does).

Result:

Correctly handle trailing dots."
881ff3cd98a210bad6c4a137aa031cd221804450,"Drop broken DefaultCookie name validation, close #4999

Motivation:

DefaultCookie constructor performs a name validation that doesn’t match
RFC6265. Moreover, such validation is already performed in strict
encoders and decoders.

Modifications:

Drop DefaultCookie name validation, rely on encoders and decoders.

Result:

no more duplicate broken validation"
9ebb4b7164b39a6ef9719d6ac15624ba80597191,"Using distinct aliases when building the trust manager factory, and renamed trustCertChain into trustCertCollection.

Motivation:

SSLContext.buildTrustManagerFactory(...) builds a KeyStore to
initialize the TrustManagerFactory from an array of X509Certificates,
assuming that array is a chain and that each certificate will have a
unique Subject Distinguised Name.
However, the collection of certificates used as trust anchors is generally
not a chain (it is an unordered collection), and it is legitimate for it
to contain multiple certificates with the same Subject DN.
The existing code uses the Subject DN as the alias name when filling in
the `KeyStore`, thereby overwriting other certificates with the same
Subject DN in this collection, so some certificates may be discarded.
In addition, the code related to building trust managers can take an array of
X509Certificate instances to use as trust anchors. The variable name is
usually trustCertChain, and the documentation refers to them as a ""chain"".
However, while it makes sense to talk about a ""chain"" from a keymanager
point of view, these certificates are just an unordered collection in a
trust manager. (There is no chaining requirement, having the Subject DN
matching its predecessor's Issuer DN.)
This can create confusion to for users not used with PKI concepts.

Modifications:

SSLContext.buildTrustManagerFactory(...) now uses a distinct alias for each
array (simply using a counter, since this name is never used for reference
later). This patch also includes a unit test with CA certificates using the
same Subject DN.
Also renamed trustCertChain into trustCertCollection, and changed the
references to ""chain"" in the Javadoc.

Result:

Each loaded certificate now has a unique identifier when loaded, so it is
now possible to use multiple certificates with the same Subject DN as
trust anchors.
Hopefully, renaming the parameter should also reduce confusion around PKI
concepts."
b0242585d74f4307cd75e32a5d8f59f45346de45,"Cleanup code and so eliminate warnings.

Motivation:

There were some warning in the resolver-dns code base.

Modifications:

- Fix javadocs
- Use the base class to call static method.

Result:

Cleaner code."
ee4d2c4b74eef3208cac0e4e13f5916d886655f1,"Correctly handle DefaultStompFrame.retain(increment)

Motivation:

DefaultStompFrame.retain(increment) missed to pass on the increment parameter.

Modifications:

Correctly pass on increment paramter.

Result:

Correctly handle the retain when increment value is given."
e7b7b77efc6e3e8ba99cd7028a7f51ce938a87ae,"[#5013] Fix typo in DefaultStompFrame.toString() method.

Motivation:

DefaultStompFrame.toString() implementations returned a String that contained DefaultFullStompFrame.

Modifications:

Replace DefaultFullStompFrame with DefaultStompFrame.

Result:

Less confusing and more correct return value of toString()"
a11412fab025d4963f0bab6589314ae1103db19a,"Cleanup transport-native-epoll code.

Motivation:

The code of transport-native-epoll missed some things in terms of static keywords, @deprecated annotations and other minor things.

Modifications:

- Add missing @deprecated annotation
- Not using FQCN in javadocs
- Add static keyword where possible
- Use final fields when possible
- Remove throws IOException from method where it is not needed.

Result:

Cleaner code."
3ad55eb83915259dc9faef1a379ccd39fb35ec6f,"Speed up the slow path of FastThreadLocal

Motivation:

The current slow path of FastThreadLocal is much slower than JDK ThreadLocal. See #4418

Modifications:

- Add FastThreadLocalSlowPathBenchmark for the flow path of FastThreadLocal
- Add final to speed up the slow path of FastThreadLocal

Result:

The slow path of FastThreadLocal is improved."
2941c8393a6cd27d0ea5bd9ccd0f5ec374d6bdd0,"Upgrade netty-tcnative to 1.1.33.Fork15

Motivation:

We should upgrade to latest netty-tcnative version.

Modifications:

Upgrade to version 1.1.33.Fork15

Result:

Latest netty-tcnative version is used."
d6bf388343a4aa0aaa8100830193f2b99b124247,"Prevent nepotism with generational GCs.

Motivation:

If a single Encoder object is promoted to the old generation then every object
reachable from the promoted object will eventually be promoted as well. A queue
illustrates the problem very well. Say a sequence of inserts and deletions
generate an object graph:

   A -> B -> C -> D -> E -> F -> G -> H,

the head of the queue is E, the tail of the queue is H, and A, B, C, D are
dead. If all queue nodes are in the young generation, then a young gc will
clean up the object graph and leave us with:

   E -> F -> G -> H

on the other hand, if B and C were previously promoted to the old generation,
then a young collection assumes the refernece from C to D is from a live object
(this is a key result of generational gc, no need to mark the old generation).
Hence the young collection assumes the refence to D is a gc root and leave us
with the object graph:

   B-> C -> D -> E -> F -> G -> H.

Eventually D, E, F, G, H, and all queue nodes ever seen from this point on will
be promoted, regardless of their global live or dead status. It is generally
trivial to fix nepotism issues by simply breaking the reference chain after
dequeuing a node.

Currently Encoder objects do not null their references when removed from the
hash map. We have observed a 20X increase in promoted Encoder objects due to
nepotism.

Modifications:

Null before, after, and next fields when removing Encoder objects from maps.

Result:

Fewer promoted Encoder objects, fewer Encoder objects in the old generation,
shorter young collection times, old collections spaced further apart (nepotism
is just really bad). Enjoy."
3d115349b51f86d7bd3506b0c079f8efe903a820,"Fix type inference w/ JDK8

Motivation:

Compile crash w/ JDK8:

```
[ERROR]
/Users/slandelle/Documents/dev/workspaces/workspace-ahc2/async-http-clie
nt-project/netty-bp/codec-dns/src/main/java/io/netty/handler/codec/dns/D
nsMessageUtil.java:[176,16] reference to append is ambiguous
  both method append(java.lang.String) in java.lang.StringBuilder and
method append(java.lang.StringBuffer) in java.lang.StringBuilder match
```

Modification:

Force type explicitly

Result:

Class compile w/ JDK8"
2c390ae66b42fc7f28e3aa3b5f6eebdd1fd1cbfc,"[#5029] Fix type of EpollChannelOption.TCP_QUICKACK

Motivation:

TCP_QUICKACK uses Integer but needs to be Boolean

Modifications:

Fix type

Result:

Be able to use EpollChannelOption.TCP_QUICKACK"
269677820df53b1b26cc17f772049cd6b7e88c9b,"Cleanup of codec-mqtt

Motivation:

codec-mqtt had some typos and was not restrict enough in terms of making things final and private constructors.

Modifications:

- Fix typos
- Make most pojos final
- Remove redundant else blocks.

Result:

Cleaner and more restrict code."
9a183ec38f27ccc1dc541d9a5e6a6cc541a6b0b0,"Add methods to easily release messages from inbound / outbound buffer of EmbeddedChannel

Motivation:

Often the user uses EmbeddedChannel within unit tests where the only ""important"" thing is to know if any pending messages were in the buffer and then release these.
We should provide methods for this so the user not need to manually loop through these and release.

Modifications:

Add methods to easily handle releasing of messages.

Result:

Less boiler-plate code for the user to write."
6bf7e2438916bc666d49940af1ff18c68e9d79da,"[#5014] Correctly encode / decode zero-length names when encoding DnsRecords.

Motivation:

Zero-length names needs to be ""prefixed"" by the length as well when encoded into a ByteBuf. Also some servers not correctly prefix these so we should ensure we can workaround this and even decode in such case.

Modifications:

- Always encode the length of the name into the ByteBuf even if its zero-length.
- If there are no readable bytes for the name just asume its an empty name to workaround dns servers that not fully respect the RFC.

Result:

Correctly encode zero-length names and be able to decode empty names even when the rfc is not strictly followed."
15f3b69b9e3d7b0d61ec32b51cca37f962dece1c,"[#5033] Fix typo in exception message introduced by acbca192bd93b2691c86c5cec06e4fc1f15d6a05

Motivation:

I introduced a typo as part of acbca192bd93b2691c86c5cec06e4fc1f15d6a05.

Modifications:

Fix typo

Result:

Correct message in exception."
99c85ef4f55d098cab482da0955ef3f05617758e,"cf171ff52555b9e984a3b9103287f6b897dc8626 Close Regression

Motivation:
cf171ff52555b9e984a3b9103287f6b897dc8626 introduced a change in behavior when dealing with closing channel in the read loop. This changed behavior may use stale state to determine if a channel should be shutdown and may be incorrect.

Modifications:
- Revert the usage of potentially stale state

Result:
Closing a channel in the read loop is based upon current state instead of potentially stale state."
5eab79a464b79683114f2dc9ef1ea87d3e6a8bc6,"EPOLL Socket Shutdown Fix

Motivation:
8dbf5d02e53a72c42467b8dc0a5e1482d5f49af4 modified the shutdown code for Socket but did not correctly calculate the change in shutdown state and only applying this change. This is significant because if sockets are being opening and closed quickly and the underlying FD happens to be reused we need to take care that we don't unintentionally change the state of the new FD by acting on an object which represents the old incarnation of that FD.

Modifications:
- Calculate the shutdown change, and only apply what has changed, or exit if no change.

Result:
Socket.shutdown can not inadvertently affect the state of another logical FD."
e24a5d8839f97677341cc20d370b0b45be9b94e1,"Map HTTP/2 Streams to Channels

Motivation:

This allows using handlers for Streams in normal Netty-style. Frames are
read/written to the channel as messages, not directly as a
callback/method call. Handlers allow mixing and can ease HTTP/1 and
HTTP/2 interoperability by eventually supporting HTTP/1 handlers in
HTTP/2 and vise versa.

Modifications:

New handler Http2MultiplexCodec that converts from the current HTTP/2
API to a message-based API and child channels for streams.

Result:

The basics are done for server-side: new streams trigger creation of new
channels in much the same appearance to how new connections trigger new
channel creation. The basic frames HEADERS and DATA are handled, but
also GOAWAY and RST_STREAM.

Inbound flow control is implemented, but outbound is not. That will be
done later, along with not completing write promises on the child
channel until the write actually completes on the parent.

There is not yet support for outbound priority/weight, push promises,
and many other features.

There is a generic Object that may be set on stream frames. This also
paves the way for client-side support which needs a way to refer to
yet-to-be-created streams (due to how HEADERS allocates a stream id, and
the allocation order must be the same as transmission order)."
61cfdd767197dafcc4f201c5ec7577601b20ce25,"e24a5d8 compile error

Motivation:
e24a5d8 was cherry-picked but had a compile error.

Modifications:
- Fix the compile error in e24a5d8

Result:
Build now compiles."
f0f014d0c755b7b2e11853aa822ba0b88d7a48cc,"[#4637] More helpful exception message when a non PKCS#8 key is used.

Motivation:

We should throw a more helpful exception when a non PKCS#8 key is used by the user.

Modifications:

Change exception message to give a hint what is wrong.

Result:

Easier for user to understand whats wrong with their used key."
84bbbf7e09513e761496fe1faf3407fc06a32228,"Read if needed on NEED_UNWRAP

Motivation:

There are some use cases when a client may only be willing to read from a channel once
its previous write is finished (eg: serial dispatchers in Finagle). In this case, a
connection with SslHandler installed and ctx.channel().config().isAutoRead() == false
will stall in 100% of cases no matter what order of ""channel active"", ""write"", ""flush""
events was.

The use case is following (how Finagle serial dispatchers work):

1. Client writeAndFlushes and waits on a write-promise to perform read() once it's satisfied.
2. A write-promise will only be satisfied once SslHandler finishes with handshaking and
   sends the unencrypted queued message.
3. The handshaking process itself requires a number of read()s done by a client but the
   SslHandler doesn't request them explicitly assuming that either auto-read is enabled
   or client requested at least one read() already.
4. At this point a client will stall with NEED_UNWRAP status returned from underlying engine.

Modifiations:

Always request a read() on NEED_UNWRAP returned from engine if

a) it's handshaking and
b) auto read is disabled and
c) it wasn't requested already.

Result:

SslHandler is now completely tolerant of whether or not auto-read is enabled and client
is explicitly reading a channel."
4950a523a77f920134a47175322578895a48e918,"Not attempt to read from fd when channel is closed during read loop. Related to [#5031]

Motivation:

We need to break out of the read loop for two reasons:

- If the input was shutdown in between (which may be the case when the user did it in the
  fireChannelRead(...) method we should not try to read again to not produce any
  miss-leading exceptions.

- If the user closes the channel we need to ensure we not try to read from it again as
  the filedescriptor may be re-used already by the OS if the system is handling a lot of
  concurrent connections and so needs a lot of filedescriptors. If not do this we risk
  reading data from a filedescriptor that belongs to another socket then the socket that
  was ""wrapped"" by this Channel implementation.

Modification:

Break the reading loop if the input was shutdown from within the channelRead(...) method.

Result:

No more meaningless exceptions and no risk to read data from wrong socket after the original was closed."
86b96561671e0ee4e4874c96877987297aeb27f0,"Correctly run pending tasks before flush and also remove incorrect assert.

Motivation:

We need to ensure we run all pending tasks before doing any flush in writeOutbound(...) to ensure all pending tasks are run first. Also we should remove the assert of the future and just add a listener to it so it is processed later if needed. This is true as a user may schedule a write for later execution.

Modifications:

- Remove assert of future in writeOutbound(...)
- Correctly run pending tasks before doing the flush and also before doing the close of the channel.
- Add unit tests to proof the defect is fixed.

Result:

Correclty handle the situation of delayed writes."
9cd9e7daeb04d825bcb418f389b9cab8c21fac9b,[maven-release-plugin] prepare release netty-4.1.0.CR5
cee38ed2b6ba93a351047f718941c1c11880f1c7,[maven-release-plugin] prepare for next development iteration
2facb7affd485b2b96625dc160614b6028791cd3,"Change DefaultChannelId visibility to default. Related to [#5053]

Motivation:

There is no need to make DefaultChannelId package private as it may be useful for the user. For example EmbeddedChannel allows to inject a ChannelId when it is constructed. For this case the user can just use DefaultChannelId.

Modifications:

Change visibility of DefaultChannelId to public.

Result:

It's possible to create a new instance of DefaultChannelId by the user."
5d76daf33b645248a1cde150cbefbd3c24824f78,"Allow to customize NIO (channel) select strategies.

Motivation:

Under high throughput/low latency workloads, selector wakeups are
degrading performance when the incoming operations are triggered
from outside of the event loop. This is a common scenario for
""client"" applications where the originating input is coming from
application threads rather from the socket attached inside the
event loops.

As a result, it can be desirable to defer the blocking select
so that incoming tasks (write/flush) do not need to wakeup
the selector.

Modifications:

This changeset adds the notion of a generic SelectStrategy which,
based on its contract, allows the implementation to optionally
defer the blocking select based on some custom criteria.

The default implementation resembles the original behaviour, that
is if tasks are in the queue `selectNow()` and move on, and if no
tasks need to be processed go into the blocking select and wait
for wakeup.

The strategy can be customized per `NioEventLoopGroup` in the
constructor.

Result:

High performance client applications are now given the chance to
customize for how long the actual selector blocking should be
deferred by employing a custom select strategy."
0c839d9e0ae7e93c9a2fd5b5029b7d72abdfc9bc,"EPOLL SelectStrategy

Motivation:
NIO now supports a pluggable select strategy, but EPOLL currently doesn't support this. We should strive for feature parity for EPOLL.

Modifications:
- Add SelectStrategy to EPOLL transport.

Result:
EPOLL transport supports SelectStategy."
9d4fae308c09a2c759dc67db765d311154c8d977,"ChannelInitializer: change propagation of channelRegistered event

Motivation:

If a handler is added to the pipeline within ChannelInitializer::initChannel via
addFirst(...) then it will not receive the channelRegistered event.  The same
handler added via addLast(...) will receive the event.  This different behavior
is unlikely to be expected by users and can cause confusion.

Modifications:

Let ChannelInitializer::channelRegistered propagate the event by passing it to
the pipeline instead of firing it on the ChannelHandlerContext.

Result:

The channelRegistered event is propagated to handlers regardless of the method
used to add it to the pipeline (addFirst/addLast)."
3e5dcb5f3efbb26d5e6cf4cd229b03c285d62462,"[#3806] Setting WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception

Motivation:

Setting the WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception (appears only in the logs) if the value is larger than the default high water mark value. The WRITE_BUFFER_HIGH_WATER_MARK call appears to have no effect in this context.

Setting the values in the reverse order works.

Modifications:

- deprecated ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK and
ChannelOption.WRITE_BUFFER_LOW_WATER_MARK.
- add one new option called ChannelOption.WRITE_BUFFER_WATER_MARK.

Result:
The high/low water mark values limits caused by default values are removed.

Setting the WRITE_BUFFER_LOW_WATER_MARK before WRITE_BUFFER_HIGH_WATER_MARK results in an internal Exception (appears only in the logs) if the value is larger than the default high water mark value. The WRITE_BUFFER_HIGH_WATER_MARK call appears to have no effect in this context.

Setting the values in the reverse order works."
4a18bcaa5926b717d0fc1a50b2aede4fda946697,"[#5062] Mark MqttEncoder @Sharable

Motivation:

Commit 2696778 changed MqttEncoder to be a singelton but missed to add @Sharable annotation. This broke the encoder as it can not be added to multiple pipelines.

Modifications:

Add @Sharable annotation

Result:

MqttEncoder can be used in multiple pipelines again."
441aa4c5756b975e8ee1dccbe2902633e0f587e8,"EPOLL ET Missed Reads

Motivation:
bfbef036a8c1121083b485a98b9cb04a84e7dfea made EPOLL respect autoRead while in ET mode. However it is possible that we may miss data pending on the RECV queue if autoRead is off. This is because maybeMoreDataToRead is updated after fireChannelRead and if a user calls read() from here maybeMoreDataToRead will be false because it is updated after the fireChannelRead call. The way maybeMoreDataToRead was updated also causes a single channel to continuously read on the event loop and not relinquish and give other channels to try reading.

Modifications:
- Ensure maybeMoreDataToRead is always set after all user events, and is evaluated with readPending to execute a epollInReady on the EventLoop
- Combine the checkResetEpollIn and maybeMoreDataToRead logic to invoke a epollInReady later into the epollInFinally method due to similar responsibilities
- Update unit tests to reflect the user calling read() on the event loop from channelRead()

Result:
EPOLL ET with autoRead set to false will not leave data on the RECV queue."
4b38b72a0d789a2e812bd11685244ba6583751bb,"Fix incorrect name encoding/decoding in DNS records

Motivation:

- The decoded name should always end with a dot (.), but we currently
  strip it, which is incorrect.
  - (O) 0 -> "".""
  - (X) 0 -> """"
  - (O) 5 netty 2 io 0 -> ""netty.io.""
  - (X) 5 netty 2 io 0 -> ""netty.io""
- The encoded name should end with a null-label, which is a label whose
  length is 0, but we currently append an extra NUL, causing FORMERR(1)
  on a strict DNS server:
  - (O) . -> 0
  - (X) . -> 0 0
  - (O) netty.io. -> 5 netty 2 io 0
  - (X) netty.io. -> 5 netty 2 io 0 0

Modifications:

- Make sure to append '.' when decoding a name.
- Improve index checks so that the decoder can raise
  CorruptFrameException instead of IIOBE
- Do not encode extra NUL
- Add more tests

Result:

Robustness and correctness"
7368ccc539a2ebe624fc99018d1a6ca5a2058d71,[maven-release-plugin] prepare release netty-4.1.0.CR6
3b941c2a7c539b7dcc6e54dd5bd65d45005e17ac,[maven-release-plugin] prepare for next development iteration
516e4933c4044d6da3b66aebee567c7dc8712c9d,Remove an unused import
fcbeebf6dff759a1e0cfe2e20fe5103e4c40075c,"ApplicationProtocolNegotiationHandler doesn't work with SniHandler

Motivation:
ApplicationProtocolNegotiationHandler attempts to get a reference to an SslHandler in handlerAdded, but when SNI is in use the actual SslHandler will be added to the pipeline dynamically at some later time. When the handshake completes ApplicationProtocolNegotiationHandler throws an IllegalStateException because its reference to SslHandler is null.

Modifications:
- Instead of saving a reference to SslHandler in handlerAdded just search the pipeline when the SslHandler is needed

Result:
ApplicationProtocolNegotiationHandler support SniHandler.
Fixes https://github.com/netty/netty/issues/5066"
b32e07c75a903300b43b8d606f9f2e41579efdff,"PoolThreadCache uses wrong variable in IllegalArgumentException

Motivation:

PoolThreadCache includes the wrong value when throwing a IllegalArgumentException because of freeSweepAllocationThreshold.

Modifications:

Use the correct value.

Result:

Correct exception message."
1d23e358b49edcbad168a8aef75aee57a386d8fe,"Only increment metric for huge / normal allocations after the allocation was really done.

Motivation:

We should only increment the metric for the huge / normal allocation after it is done. Also we should only decrement once deallocate.

Modifications:

- Move increment after the allocation.
- Fix deallocation metric and move it after deallocation

Result:

More correct metrics."
4e779cd6b071309a2530ac02e4657f845c102ac0,"Allow to disable leak detection for all buffers when using UnpooledByteBufAllocator.

Motivation:

Sometimes it is useful to allow to disable the leak detection of buffers if the UnpooledByteBufAllocator is used. This is for example true if the app wants to leak buffers into user code but not want to put the burden on the user to always release the buffer.

Modifications:

Add another constructor to UnpooledByteBufAllocator that allows to completely disable leak-detection for all buffers that are allocator out of the UnpooledByteBufAllocator.

Result:

It's possible to disable leak-detection when the UnpooledByteBufAllocator is used."
ea94336689047fcd505a4e4040d55b3f46728054,"DefaultChannelHandlerInvoker should work with non AbstractChannelHandlerContext sub-classes.

Motivation:

DefaultChannelHandlerInvoker currently blindly cast to AbstractChannelHandlerContext without checking if the ChannelHandlerContext is really a sub-type of it. It should check it first and if not just use slow-path implementation.

Modifications:

Do instanceof check first and if it fails just create a new Runnable instance of used the cached.

Result:

DefaultChannelHandlerInvoker works with any ChannelHandlerContext implementations."
105df33d8d66701652ecc2159e7c8f01ad5d6a08,"Add Log4J2LoggerFactory and Log4J2Logger

Motivation:

See #3095

Modifications:

Add Log4J2LoggerFactory and Log4J2Logger which is an InternalLogger implementation based on log4j2.

Result:

The user can use log4j2 directly without a special slf4j binding."
f46cfbc590263ee2bfe0a16e0bdfb6d6d603f621,"[#5059] Deprecate method with typo and introduce a new one without typo

Motivation:

There is a spelling error in FileRegion.transfered() as it should be transferred().

Modifications:

Deprecate old method and add a new one.

Result:

Fix typo and can remove the old method later."
7fb475a2237e603767abb8bd940f444ff28e212f,Fix typo missed in f46cfbc590263ee2bfe0a16e0bdfb6d6d603f621
d6022772047bf0e5b4031bcaab5608d1f1342cc0,"Include cause that was used to notify the promise when logging an failed try to notify it.

Motivation:

When a promise is notified that was already added to the ChannelOutboundBuffer and we try to notify it later on we only see a warning that it was notified before. This is often not very useful as we have no idea where it was notified at all. We can do better in case it was failed before (which is most of the times the case) and just also log the cause that was used for it.

Modifications:

Add the cause that was used to notify the promise when we fail to notify it as part of the ChannelOutboundBuffer.

Result:

Easier to debug user errors."
7d60699a4951b4dcaba4cb06029d4432a863b171,"Fix compile error caused by 7fb475a2237e603767abb8bd940f444ff28e212f, because I missed to adjust jni code."
9fb86a380d0b3d2082a0d97a217d221392177625,"NIO/EPOLL readPending set to false incorrectly

Motivation:
441aa4c5756b975e8ee1dccbe2902633e0f587e8 introduced a bug in transport-native-epoll where readPending is set to false before a read is attempted, but this should happen before fireChannelRead is called. The NIO transport also only sets the readPending variable to false on the first read in the event loop. This means that if the user only calls read() on the first channelRead(..) the select loop will still listen for read events even if the user does not call read() on subsequent channelRead() or channelReadComplete() in the same event loop run. If the user only needs 2 channelRead() calls then by default they will may get 14 more channelRead() calls in the current event loop, and then 16 more when the event loop is woken up for a read event. This will also read data off the TCP stack and allow the peer to queue more data in the local RECV buffers.

Modifications:
- readPending should be set to false before each call to channelRead()
- make NIO readPending set to false consistent with EPOLL

Result:
NIO and EPOLL transport set readPending to false at correct times which don't read more data than intended by the user.
Fixes https://github.com/netty/netty/issues/5082"
8033faa03bd3b46dc8c337674126883d252483d1,"fcbeebf6dff759a1e0cfe2e20fe5103e4c40075c unit test bug

Motivation:
fcbeebf6dff759a1e0cfe2e20fe5103e4c40075c introduced a unit test to verify ApplicationProtocolNegotiationHandler is compatible with SniHandler. However only the server attempts ALPN and verifies that it completes and the client doesn't verify the handshake is completed. This can lead to the client side SSL engine to prematurely close and throw an exception.

Modifications:
- The client should wait for the SSL handshake and ALPN to complete before the test exits.

Result:
SniHandlerTest.testSniWithApnHandler is more reliable."
ea3ffb85368ab135087debff003de30aee7d9091,"Fix PoolChunkList.minUsage() and maxUsage() for head and tail

Motivation:

The PoolChunkList.minUsage() and maxUsage() needs to take special action to translate Integer.MIN_VALUE / MAX_VALUE as these are used internal for tail and head of the linked-list structure.

Modifications:

- Correct the minUsage() and maxUsage() methods.
- Add unit test.

Result:

Correct metrics"
d0943dcd30b08eb4043aeb88fd983bcebf8c3432,"[#5028] Fix re-entrance issue with channelWritabilityChanged(...) and write(...)

Motivation:

When always triggered fireChannelWritabilityChanged() directly when the update the pending bytes in the ChannelOutboundBuffer was made from within the EventLoop. This is problematic as this can cause some re-entrance issue if the user has a custom ChannelOutboundHandler that does multiple writes from within the write(...) method and also has a handler that will intercept the channelWritabilityChanged event and trigger another write when the Channel is writable. This can also easily happen if the user just use a MessageToMessageEncoder subclass and triggers a write from channelWritabilityChanged().

Beside this we also triggered fireChannelWritabilityChanged() too often when a user did a write from outside the EventLoop. In this case we increased the pending bytes of the outboundbuffer before scheduled the actual write and decreased again before the write then takes place. Both of this may trigger a fireChannelWritabilityChanged() event which then may be re-triggered once the actual write ends again in the ChannelOutboundBuffer.

The third gotcha was that a user may get multiple events even if the writability of the channel not changed.

Modification:

- Always invoke the fireChannelWritabilityChanged() later on the EventLoop.
- Only trigger the fireChannelWritabilityChanged() if the channel is still active and if the writability of the channel changed. No need to cause events that were already triggered without a real writability change.
- when write(...) is called from outside the EventLoop we only increase the pending bytes in the outbound buffer (so that Channel.isWritable() is updated directly) but not cause a fireChannelWritabilityChanged(). The fireChannelWritabilityChanged() is then triggered once the task is picked up by the EventLoop as usual.

Result:

No more re-entrance possible because of writes from within channelWritabilityChanged(...) method and no events without a real writability change."
4fa5d2cf52cd1fc4a57fb7722e9d8adad5804be6,"Do now swallow an exception triggered by late listener notification

Related: #3449

Motivation:

When a user shut down an EventExecutor/Loop prematurely, a Promise will
fail to execute its listeners. When it happens, DefaultPromise will log
a message at ERROR level, but there's no way to get notified about it
programmatically.

Modifications:

Do not catch and log the RejectedExecutionException unconditionally,
but only catch and log for non-late listener notifications, so that a
user gets notified on submission failure at least when the listener is
late.

Result:

Remedies #3449 to some extent, although we will need fundamental fix for
that, such as #3566"
88b093c4811b9ec26d7cd1710173d6a0c64c91e0,"PoolChunkList not correctly move PoolChunks when these are moved.

Motivation:

When a PoolChunk needs to get moved to the previous PoolChunkList because of the minUsage / maxUsage constraints we always just moved it one level which is incorrect and so could lead to have PoolChunks in the wrong PoolChunkList (in respect to their minUsage / maxUsage settings). This then could have the effect that PoolChunks are not released / freed in a timely fashion and so.

Modifications:

- Correctly move PoolChunks between PoolChunkLists, which includes moving it multiple ""levels"".
- Add unit test

Result:

Correctlty move the PoolChunk to PoolChunkList when it is freed, even if its multiple layers."
c024dc92d0ef40d13c72871315fc2bc9c0065f58,"Explicit thread group on DefaultThreadFactory.

Motivation:

Fixes #5084. We (gRPC) encountered a bug that was triggered by
grpc/grpc-java@d927180. After that commit, event loop threads are
created per task by NioEventLoopGroup, and inherits the thread group of
the caller, which in our case is an application-provided request-scope
thread. Things go south when the application tries to manipulate (e.g.,
interrupt and join) all threads of the request-scope thread group, which
unexpectedly include the event loop threads.

Modifications:

DefaultThreadFactory will save the current thread group in constructor,
and apply it to all new threads.

Result:

Threads created by DefaultThreadFactory will be in the same thread group
as the thread where the factory is created."
7b121c26aee2f53ad7e03bcc492b40545825aff4,"Use Math.min(...) and Math.max(...) as these are intrinsics.

Motivation:

We should better use Math utilities as these are intrinsics. This is a cleanup for ea3ffb85368ab135087debff003de30aee7d9091.

Modifications:

Use Math utilities.

Result:

Cleaner code and use of intrinsics."
5b48fc284ebe85ca4974985e3be005d37626e980,"Make OIO/NIO/EPOLL autoReadClear consistent

Motivation:
OIO/NIO use a volatile variable to track if a read is pending. EPOLL does not use a volatile an executes a Runnable on the event loop thread to set readPending to false. These mechansims should be consistent, and not using a volatile variable is preferable because the variable is written to frequently in the event loop thread.
OIO also does not set readPending to false before each fireChannelRead operation and may result in reading more data than the user desires.

Modifications:
- OIO/NIO should not use a volatile variable for readPending
- OIO should set readPending to false before each fireChannelRead

Result:
OIO/NIO/EPOLL are more consistent w.r.t. readPending and volatile variable operations are reduced
Fixes https://github.com/netty/netty/issues/5069"
e053b96b5c81922e1972ac2e304746a84af459bb,"Set the length fields of memcache messages automatically

Motivation:

People need to set all length fields manually when creating a memcache message and it's error prone. See #2736 for more dicussion.

Modifications:

This patch adds the logic to update the keyLength, extrasLength and totalBodyLength when key, extras or content is set.

Result:

The length fields of memcache messages will be updated automatically."
24254b159f3df12ce6b3c99b2f90dc8d27f8f234,"Propagate h2c upgrade success event to the next handler before removing source codec

Motivation:

When upgrading h2c, I found that sometimes both of http2 settings frame and http response message was arrived before receiving upgrade success event. It was because ByteToMessageDecoder propagated its internally buffered message to the next handler when removing itself from pipeline.(refer to ByteToMessageDecoder#handlerRemoved)
I think it's better to propagate upgrade success event when handling 101 switching protocol response.

Modifications:

Upgrade success event will be propagated before removing source codec.

Result:

It guarantees that upgrade success event will be arrived first at the next handler."
562d8d220028fbb3d62028bc5879a121dff2fdbd,"Add smtp codec (client side only).

Motivation:

When writing a SMTP client a provided SMTP codec that follows RFC2821 is useful.

Modification:

Add client side codec and test.

Results:

People who want to write a SMTP client can reuse the codec."
0bc93dda081499dfe4f96a1507d24fa46bf0f31f,"NIO autoReadClear should also clear the SelectionKey

Motivation:
Prior to 5b48fc284ebe85ca4974985e3be005d37626e980 setting readPending to false when autoReadClear was called was enough because when/if the EventLoop woke up with a read event we would first check if readPending was true and if it is not, we would return early. Now that readPending will only be set in the EventLoop it is not necessary to check readPending at the start of the read methods, and we should instead remove the OP_READ from the SelectionKey when we also set readPending to false.

Modifications:
- autoReadCleared should call AbstractNioUnsafe.removeReadOp

Result:
NIO is now consistent with EPOLL and removes the READ operation on the selector when autoRead is cleared."
bc6adab48c18263822b76477717763ae2e7e0099,"Make all InternalLoggerFactory implementations be singletons

Motivation:

It's better to make all InternalLoggerFactory implementations be singletons according to the discussions in #5047

Modifications:

Make all InternalLoggerFactory implementations be singletons and hide the construtors.

Result:

All InternalLoggerFactory implementations be singletons."
84e281ced9826eb5331223209c79aa88d4e7e15c,"fix one java doc issue: extra }

Motivation:

There is one extra } for WriteBufferWaterMark's javadoc:
{@linkplain #high}  high water mark}

The generated javadoc will show the content: ""the high high water mark}""

Modifications:

remove the }

Result:
The generated javadoc will show the content: ""the high water mark"" instead of ""the high high water mark}"""
c1a3cc32e7e8d6c02308a1c198e00a8b4a7bf191,"Fix an assertion error introduced by 0bc93dda081499dfe4f96a1507d24fa46bf0f31f

Motivation:
    
Commit 0bc93dda081499dfe4f96a1507d24fa46bf0f31f introduced an assertion
failure.

Modifications:

Fix the assertion error.

Result:

Regression removed"
32cfe25132b7b83ec0db3ca03dc51365827091f4,Fix checkstyle
9a63aafe226d73e119b9a3b4795988159a9fc7a3,"EPOLL ET Set ReadFlag and Limit epollInReadyRunnable

Motivation:
441aa4c5756b975e8ee1dccbe2902633e0f587e8 conditionally set the readFlag based upon if maybeMoreDataToRead is set. It is possible that the read flag will not be set, and nothing will be read by executeEpollInReadyRunnable and no actual data will be read even though the user requested it.

Modifications:
- Always set the readFlag in doBeginRead
- Make it so only a single epollInReadyRunnable can execute for a channel at a time

Result:
Less chance of missing read events in EPOLL transport."
a0b28d6c82abec5f953e6f5e8df829850756c7dd,"Fix potential assertion error introduced by 0bc93dd

Motivation:
Commit 0bc93dd introduced a potential assertion failure, if the deprecated method would be used.

Modifications:
Fix the potential assertion error.

Result:
Regression removed"
1b4a5609d31e667a268fd882883a3b6ff356dfb8,"Not try to allocate out of the PoolChunkList that contains only full PoolChunks

Motivation:

When doing a normal allocation in PoolArena we also tried to allocate out of the PoolChunkList that only contains completely full PoolChunks. This makes no sense as these are full anyway so an allocation will never work here and just gives a perf hit as we need to walk the whole list of PoolChunks in the list.

Modifications:

Not try to allocate from PoolChunkList that only contains full PoolChunks

Result:

Faster allocation times when a new PoolChunk must be created."
d08185115602ba4a5a6b02586fdcae1a7c40d094,"Remove ByteBuf.readBytes(int) calls when possible

Motivation:

We use ByteBuf.readBytes(int) in various places where we could either remove it completely or use readSlice(int).retain().

Modifications:

- Remove ByteBuf.readBytes(int) when possible or replace by readSlice(int).retain().

Result:

Faster code."
787a55874b9e7f38580365f355c38ba10004ee43,"Cleanup PoolChunk and PoolArena

Motivation:

To make it easier to understand PoolChunk and PoolArena we should cleanup duplicated code.

Modifications:

- Move reused code into methods
- Use Math.max(...)

Result:

Cleaner code and easier to understand."
2ae97946dd7cfe3c2df22aa1b7904bcea3541e10,"Allow to retrieve the number of active bytes per PoolArena.

Motivation:

To better understand how much memory is used by Netty for ByteBufs it is useful to understand how many bytes are currently active (allocated) per PoolArena.

Modifications:

- Add PoolArenaMetric.numActiveBytes()

Result:

The user is able to get better insight into the PooledByteBufAllocator."
cfa258e096bf93cceac424c55779cf0e4f1cde66,"PoolChunkList.allocate(...) should return false without the need to walk all the contained PoolChunks when the requested capacity is too big.

Motivation:

PoolChunkList.allocate(...) should return false without the need to walk all the contained PoolChunks when the requested capacity is larger then the capacity that can be allocated out of the PoolChunks in respect to the minUsage() and maxUsage() of the PoolChunkList.

Modifications:

Precompute the maximal capacity that can be allocated out of the PoolChunks that are contained in the PoolChunkList and use this to fast return from the allocate(...) method if an allocation capacity larger then that is requested.

Result:

Faster detection of allocations that can not be handled by the PoolChunkList and so faster allocations in general via the PoolArena."
eb14e5b2f53b9c84dd5f8300671599497caa884b,"Ensure EpollSocketChannel.localAddress() returns correct address after connect(...) call.

Motivation:

We missed to correctly retrieve the localAddress() after we called Socket.connect(..) and so the user would always see an incorrect address when calling EpollSocketChannel.localAddress().

Modifications:

- Ensure we always retrieve the localAddress() after we called Socket.connect(...) as only after this we will be able to receive the correct address.
- Add unit test

Result:

Correct and consistent behaviour across different transports (NIO/OIO/EPOLL)."
9498d1a9b30e13df75a8af20ed3382967375554f,"Allow to create a JdkSslContext from an existing JDK SSLContext. Related to [#5095] and [#4929]

Motivation:

Sometimes a user only has access to a preconfigured SSLContext but still would like to use our ssl sub-system. For this situations it would be very useful if the user could create a JdkSslContext instance from an existing SSLContext.

Modifications:

- Create new public constructors in JdkSslContext which allow to wrap an existing SSLContext and make the class non-abstract
- Mark JdkSslServerContext and JdkSslClientContext as deprecated as the user should not directly use these.

Result:

It's now possible to create an JdkSslContext from an existing SSLContext."
200ca39b5c947cfeed153d7cb683ead86fe3e879,"Add PooledByteBufAllocator.dumpStats() which allows to obtain a human-readable status of the allocator.

Motiviation:

Sometimes it is useful to dump the status of the PooledByteBufAllocator and log it. Doing this is currently a bit cumbersome as the user needs to basically iterate through all the metrics and compose the String. we would better provide an easy way to do this.

Modification:

Add dumpStats() method.

Result:

Easier to get a view into the status of the allocator."
69070c37baf55e181f9270270f7cbf25958ba9b3,"ByteBuf.readBytes(...) should use the allocator of the buffer to create the new buffer. Related to [#5093]

Motivation:

ByteBuf.readBytes(...) uses Unpooled.buffer(...) internally which will use a heap ByteBuf and also not able to make use of the allocator which may be pooled. We should better make use of the allocator.

Modifications:

Use the allocator for thenew buffer.

Result:

Take allocator into account when copy bytes."
abce89d1bc609ffbc42275ad0f062ffeae4e98a1,"Revert ""[#5028] Fix re-entrance issue with channelWritabilityChanged(...) and write(...)""

Motivation:
Revert d0943dcd30b08eb4043aeb88fd983bcebf8c3432. Delaying the notification of writability change may lead to notification being missed. This is a ABA type of concurrency problem.

Modifications:
- Revert d0943dcd30b08eb4043aeb88fd983bcebf8c3432.

Result:
channelWritabilityChange will be called on every change, and will not be suppressed due to ABA scenario."
4cdd51509a72607b6fdd805a26245be6c2caa338,[maven-release-plugin] prepare release netty-4.1.0.CR7
6e919f70f8b55ae52f74b0992a7ecb89b5e91cf1,[maven-release-plugin] rollback the release of netty-4.1.0.CR7
4652223dec1e4cd9f9a2978e4a0e6d4086c3b24a,Fix resource leak in test introduced by 69070c37baf55e181f9270270f7cbf25958ba9b3
c6121a6f494c84ff5bf88a2bb290dd7a5885eefd,[maven-release-plugin] prepare release netty-4.1.0.CR7
572bdfb4944f1cf6074171a0662d874b7ba4fc17,[maven-release-plugin] prepare for next development iteration
379ad2c02ed0c0ae9f94e4081e3f910ece6380b7,"Support preloading of tcnative share lib

Motivation:

Some applications may use alternative methods of loading the tcnative JNI symbols. We should support this use case.

Modifications:

Separate the loading and initialzation of the tcnative library so that each can fail independently.

Result:

Fixes #5043"
718bf2fa459fd6f79a3c06d835faa180ef9604a1,Fix resource-leak which was reported as a result of commit 69070c37baf55e181f9270270f7cbf25958ba9b3
de2515ddd89129e59dc6703a099d6bf44356a093,"Support preloading of native epoll lib

Motivation:

Some applications may use alternative methods of loading the epoll JNI symbols. We should support this use case.

Modifications:

Attempt to use a side effect free JNI method. If that fails, load the library.

Result:

Fixes #5122"
57063b6db0193f3d53847f3754005a1cd63d463a,"Implement the ByteBuf methods that should have been overridden

Motivation:

Some ByteBuf implementations do not override all necessary methods,
which can lead to potentially sub-optimal behavior.

Also, SlicedByteBuf does not perform the range check correctly due to
missing overrides.

Modifications:

- Add missing overrides
- Use unwrap() instead of direct member access in derived buffers for
  consistency
- Merge unwrap0() into unwrap() using covariant return type
- Deprecate AbstractDerivedByteBuf and its subtypes, because they were
  not meant to be public

Result:

Correctness"
0b078314b29fecdf6b241d06df9dc686ee04e50c,"Add ByteBuf.isReadOnly()

Motivation:

It is sometimes useful to determins if a buffer is read-only.

Modifications:

Add ByteBuf.isReadOnly()

Result:

One more feature"
2537880e5d9f790b622a7268057f91d8599b81e2,"Fix typo in exception message

Motivation:

Typo in exception message.

Modifications:

Fix the typo.

Result:

No more typo."
4ddb81f36fc1ccf244250124d91eda98dadef779,"Not cache SwappedByteBuf in AbstractByteBuf to reduce memory footprint.

Motivation:

We should not cache the SwappedByteBuf in AbstractByteBuf to reduce the memory footprint.

Modifications:

Not cache the SwappedByteBuf.

Result:

Less memory footprint."
7d3ca7fb923e7ad5aeb6af80f87fe816286c9e13,"Fix IndexOutOfBoundsException when FixedCompositeByteBuf is constructed with an empty array.

Motivation:

When FixedCompositeByteBuf was constructed with new ByteBuf[0] and IndexOutOfboundsException was thrown.

Modifications:

Fix constructor

Result:

No more exception"
1861461db230267fec4e887b6b06eff68fa61d6c,"[#4635] Stop decoding if decoder was removed in ReplayingDecoder

We need to check if this handler was removed before continuing with decoding.
If it was removed, it is not safe to continue to operate on the buffer. This was already fixed for ByteToMessageDecoder in 4cdbe3928424b5b38695967c0cc1062dccf1a83c  but missed for ReplayingDecoder.

Modifications:

Check if decoder was removed after fire messages through the pipeline.

Result:

No illegal buffer access when decoder was removed."
89268659f33be8637f8dea927c7974eed0b5dabd,"[#4836] Enforce 64bit JDK when build netty.

Motivation:

As we only provide tcnative jars for 64bit we should enforce 64bit when try to build netty, to make it easier for the user to understand why the build fails.

Modifications:

Add enforce rule.

Result:

Ensure 64bit is used when build netty."
0035630bd077a67c86fc0fd4a8e07b6911bcf850,"We need to ensure we correct reset decoder in decodeLast() to not produce multiple LastHttpContent instances.

Motivation:

We missed to reset the decoder when asked for it in HttpObjectDecoder and so sometimes could produce more then one LastHttpContent in a sequence during channelInactive.

This did show up as AssertionError:

22:22:35.499 [nioEventLoopGroup-3-1] WARN  i.n.channel.DefaultChannelPipeline - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
java.lang.AssertionError: null
	at io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:205) ~[classes/:na]
	at io.netty.handler.codec.http.HttpObjectAggregator.decode(HttpObjectAggregator.java:57) ~[classes/:na]
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89) ~[classes/:na]
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:292) [classes/:na]
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:278) [classes/:na]
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:428) [classes/:na]
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:277) [classes/:na]
	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:343) [classes/:na]
	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:309) [classes/:na]
	at io.netty.handler.codec.http.HttpClientCodec$Decoder.channelInactive(HttpClientCodec.java:228) [classes/:na]
	at io.netty.channel.CombinedChannelDuplexHandler.channelInactive(CombinedChannelDuplexHandler.java:213) [classes/:na]
        ...

Modifications:

Correctly reset decoder.

Result:

Correctly only produce one LastHttpContent per sequence."
7c734fcf7387eec804e52deb1c61c50a61b67601,Fix resource leak in tests introduced by 69070c37baf55e181f9270270f7cbf25958ba9b3.
6108b7297b0cb8359dc2f486b01ab440692b9433,"Correctly handle ChannelInputShutdownEvent in ReplayingDecoder

Motivation:

b112673554bafc1eccfd43913a3e8605337dd7fb added ChannelInputShutdownEvent support to ByteToMessageDecoder but missed updating the code for ReplayingDecoder. This has the effect:

- If a ChannelInputShutdownEvent is fired ByteToMessageDecoder (the super-class of ReplayingDecoder) will call the channelInputClosed(...) method which will pass the incorrect buffer to the decode method of ReplayingDecoder.

Modifications:

Share more code between ByteToMessageDEcoder and ReplayingDecoder and so also support ChannelInputShutdownEvent correctly in ReplayingDecoder

Result:

ChannelInputShutdownEvent is corrrectly handle in ReplayingDecoder as well."
96455a95584dd4e3bbefefb9c208e5927a8b919f,"Implement codec-redis

Motivation:

- To encode/decode RESP (REdis Serialization Protocol) using Netty
- http://redis.io/topics/protocol

Modifications:

- Add RedisEncoder, RedisDecoder
- Add RedisBulkStringAggregator and RedisArrayAggregator
- Add tests

Result:

- Added codec-redis
- codec-redis can encode/decode RESP (REdis Serialization Protocol)"
d6987466096e32f497ea2ada910f66addae2a6d9,"Add ByteBuf.asReadOnly()

Motivation:

We lately added ByteBuf.isReadOnly() which allows to detect if a buffer is read-only or not. We should add ByteBuf.asReadOnly() to allow easily access a read-only version of a buffer.

Modifications:

- Add ByteBuf.asReadOnly()
- Deprecate Unpooled.unmodifiableBuffer(Bytebuf)

Result:

More consistent api."
4fb55beed1f342bc6a6ba583f15031616125965b,Re-add codec-smtp which was removed by 96455a95584dd4e3bbefefb9c208e5927a8b919f by mistake.
03638869b9069d4fbe0f370d0254b480cbd109e8,"Update dependencies

Motivation:

Before release 4.1.0.Final we should update all our dependencies.

Modifications:

Update dependencies.

Result:

Up-to-date dependencies used."
38d05abd84c2971c68230289aad14066218a6141,Reorganize imports
e08a361bfc531c6842a6e224082baf1646ef5527,"Motivation:

We had unused import in  RedisEncoderTest, we should remove it to keep code clean.

Modifications:

Remove unused import.

Result:

Cleanup done."
f60698a538e007e1e31c2fa16fa5fd7e4ccda293,"EpollEventLoopGroup support Executor

Motivation:
NioEventLoopGroup supports constructors which take an executor but EpollEventLoopGroup does not. EPOLL should be consistent with NIO where ever possible.

Modifications:
- Add constructors to EpollEventLoopGroup which accept an Executor as a parameter

Result:
EpollEventLoopGroup is more consistent with NioEventLoopGroup
Fixes https://github.com/netty/netty/issues/5161"
04e33fd2d8d81ee114718744893ba9c8a47fd883,"NioEventLoop closes channel even if channel is not registered

Motivation:
If a channel is deregistered from an NioEventLoop the associated SelectionKey is cancelled. If the NioEventLoop has yet to process a pending event as a result of that SelectionKey then the NioEventLoop will see the SelecitonKey is invalid and close the channel. The NioEventLoop should not close a channel if it is not registered with that NioEventLoop.

Modifications:
- NioEventLoop.processSelectedKeys should check that the channel is still registered to itself before closing the channel

Result:
NioEventLoop doesn't close a channel that is no longer registered to it when the SelectionKey is invalid
Fixes https://github.com/netty/netty/issues/5125"
5eb0127c2a0baa4bf178d244db919c9fb3a7d36a,"A new ChannelHandler that allows the user to control the flow of messages if upstream handlers emit more than one event for each read()

Motivation:

Some handlers such as HttpObjectDecoder can emit more than one event per read()
which leads to problems in downstream handlers that expect only one event and hope
that ChannelConfig#setAutoRead(false) prevents further events being sent while they're
processing the one they've just received.

Modifications:

A new handler called FlowControlHandler that feeds off read() and isAutoRead() and acts
as a holding buffer if auto reading gets turned off and more events arrive while auto reading
is off.

Result:

Fixes issues such as #4895."
946d03337920655998fba5cc988587a9ecdea638,"Add an example client for codec-redis

Motivation:

- Add an example Redis client using codec-redis.

Modifications:

- Add an example Redis client that reads input from STDIN and writes output to STDOUT.

Result:

- Added an example Redis client using codec-redis."
5b5925065796471c2d00ad53d8aaff888f24b752,"TreeMap extra get operation removed.

Motivation:
Checking if a key exists on a TreeMap has a Big O of ""log 2 N"",
doing it twice is not cheap.

Modifications:
Get the key instead which has the same cost and check if it is null.

Result:
Faster code due to one expensive operation removed."
467e5a1019675619b69dec9a32969897014549df,"DefaultHttp2FrameReader stops reading if stream error

Motivation:
DefaultHttp2FrameReader will stop reading data if any exception is thrown. However some exceptions are recoverable and we will lose data if we don't continue reading. For example some stream errors are recoverable.

Modifications:
- DefaultHttp2FrameReader should attempt to continue reading if a stream error is encountered.

Result:
Fixes https://github.com/netty/netty/issues/5186"
6b427aaee5ca6409cf3783f0cdb26e0d680a871a,"Improve client SNI in testSniWithApnHandler

Motivations
The test SniHandlerTest#testSniWithApnHandler() does not actually
involve SNI: given the client setup, the ClientHello in the form of hex
strings is not actually written to the wire, so the server never receives that.
We may need to write in somewhere else (e.g., channelActive()) instead of in
initChannel() in order for the hex strings to reach the server. So here
what's actually going on is an ordinary TLS C/S communication without SNI.

Modifications
The client part is modified to enable SNI by using an SslHandler with an
SSLEngine created by io.netty.handler.ssl.SslContext#newEngine(), where
the server hostname is specified. Also, more clauses are added to verify that
the SNI is indeed successful.

Results
Now the test verifies that both SNI and APN actually happen and succeed."
7db9f454fe34c9f0136ef2d77185264de4154d06,"Fix decoding null bulk string of RedisDecoder

Motivation:

- `RedisBulkStringAggregator` raises errors for multiple null bulk strings.
- Null or empty bulk string has no content, but current `RedisDecoder` generates header and contents.

Modifications:

- Fix decoding null bulk string of `RedisDecoder` for `RedisBulkStringAggregator`.

Result:

- Fixes #5184."
cf07f984b16d95719a9ece8c39ed6c11d8c57829,"Add @Deprecated when the javadoc says its deprecated

Motivation:

Reduce nag warnings when compiling, make it easier for IDEs to display what's deprecated.

Modifications:

Added @Deprecated in a few places

Result:

No more warnings."
9ed2f01853d82940b42c795eb541046872c3086b,"Revert ""Returns after encoding each message not do check following instance types""

Motivation:
This reverts commit 3405aee2abf990d1f6078eb27da1b0035ab34769. This commit introduces a bug and the encoder no longer encodes FullMemcacheMessage objects correctly.

Modifications:
- Revert commit

Result:
Fixes https://github.com/netty/netty/issues/5197"
9b9819c17804fa83155cc6cdf11eb2e64feb2d1a,"Rewrite misleading Note in FingerprintTrustManagerFactory javadoc

Motivation:

The current note reads as if this class is dangerous and advises the reader to ""understand what this class does"".

Modifications:

Rewrite the Javadoc note to describe what fingerprint checks are and what problems remain.

Result:

Clearer description which no longer causes the impression this class is dangerous."
0557927b655d8ae66933170657e4aad160f8c56e,"Updating allowNullOrigin to return 'null' instead of '*'.

Motivation:
Currently the way a 'null' origin, a request that most often indicated
that the request is coming from a file on the local file system, is
handled is incorrect. We are currently returning a wildcard origin '*'
but should be returning 'null' for the 'Access-Control-Allow-Origin'
which is valid according to the specification [1].

Modifications:
Updated CorsHandler to add a 'null' origin instead of the '*' origin in
the case the request origin is 'null.

Result:
All test pass and the CORS example as does the cors.html example if you
try to serve it by opening the file directly in a web browser.

[1]
https://www.w3.org/TR/cors/#access-control-allow-origin-response-header"
d0cfe24972cd44609a1b1e97aca641a35445134c,Clarifying the that a null String is returned by using @{code}
a974fff07d9c3c5ff08d3f120f629abe618e2ab6,"Add regression tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse

Motivation:

It's better to have some tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse to avoid regression like #5197.

Modifications:

Add tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse.

Result:

There are some basic tests for FullMemcacheMessageRequest and FullMemcacheMessageResponse."
ce1ae0eb8bfec1fc77a2c1c67b34ac1ea1eb327c,"Handle the backslash with double quote in JsonObjectDecoder

Motivation:

The double quote may be escaped in a JSON string, but JsonObjectDecoder doesn't handle it. Resolves #5157.

Modifications:

Don't end a JSON string when processing an escaped double quote.

Result:

JsonObjectDecoder can handle backslash and double quote in a JSON string correctly."
ef13d19b8b5d876463d4365b76d3046410a7811a,"[#5202] Correctly throw ErrorDataDecoderException when invalid encoded form parameters are present.

Motivation:

At the moment we let the IllegalArgumentException escape when parsing form parameters. This is not expected.

Modifications:

Correctly catch IllegalArgumentException and rethrow as ErrorDataDecoderException.

Result:

Throw correct exception."
06436efaa1b118eac3526d8f77d9e159d0292959,"[#5190] Ensure memory is not leaked when readEndOfLine(...) throws an exception.

Motivation:

We need to ensure we not retain the buffer until readEndOfLine(...) completes as otherwise we may leak memory in the case of an exception.

Modifications:

Only call retain after readEndOfLine(...) returns.

Result:

No more leak in case of exception while decoding redis messages."
2b6525856868ab1788db957ff8af8eb22b42c774,"FlowControlHandlerTest invalid condition

Motivation:
FlowControlHandlerTest attempts to validate the expected contents of the underlying queue in FlowControlHandler. However the condition which triggers the check is too early and the queue contents may not yet contain all expected objects. For example a CountDownLatch is counted down in a handler's channelRead which is  after the FlowControlHandler in the pipeline. At this point if there is a thread context switch the queue may not yet contain all the expected objects and checking the queue contents is not valid.

Modifications:
- Remove checking the queues contents in FLowControlHandlerTest and instead only check the empty condition at the end of the tests

Result:
FlowControlHandlerTest won't fail due to invalid checks of the contents of the queue."
c745ac0e16ffdbc60b6e96fe01947a1da773be78,"[#3297] Fix race while resolve remote address that can cause NPE

Motivation:

We may produce a NPE due a race that can happen while check if a resolution was done and failed.

Modifications:

Correctly first check if the resultion is done before try to detect if it failed and so remove the race that can produce a NPE.

Result:

No more race possible while resolve address during connect."
b2bb72b2de7d2a04899c971242b5808390232265,"[#5171] Ensure NioDatagramChannelConfig can be instanced on android

Motivation:

NioDatagramChannelConfig currently uses NetworkChannel in its static { } block and so fails to init on android which not has this class.

Modifications:

Use reflection to load the NetworkChannel.class

Result:

Be able to use NIO Datagram on android as well."
9f5eb7d698477fdabdeadeb66403360984e33954,"Add CharSequence operations to ByteBuf

Motivation:

Often users either need to read or write CharSequences to a ByteBuf. We should add methods for this to ByteBuf as we can do some optimizations for this depending on the implementation.

Modifications:

Add setCharSequence, writeCharSequence, getCharSequence and readCharSequence

Result:

Easier reading / writing of CharSequence with ByteBuf."
b17ee6066fd1f204a65ead2ff8f88cba20473dda,"HTTP/2 Log Cleanup

Motivation:
The format of some log lines used the printf style formatting instead of the logger {} formatting for variables. This would lead to printing out the literal printf tokens instead of substituting the value.

Modifications:
- Fix the format string for log statements which use printf style formatting

Result:
Logs actually capture the value of the variables instead of fixed string tokens."
2472d8c3cff4fc199276c623b153e5942e50f6d7,"[#5216] Correctly increment deallocationsHuge when call PoolArena.free

Motivation:

We called deallocationsHuge.decrement() but it needs to be increment()

Modifications:

Replace decrement() with increment()

Result:

Correct metrics."
b39c53ce17c1bfadf59e8417c684c01090074efa,"[#5218] Zero out private key copied to ByteBuf before release.

Motivation:

We should zero-out the private key as soon as possible when we not need it anymore.

Modifications:

zero out the private key before release the buffer.

Result:

Limit the time the private key resist in memory."
9229ed98e2eb3159abe3195459e0ffc78200d358,"[#5088] Add annotation which marks packages/interfaces/classes as unstable

Motivation:

Some codecs should be considered unstable as these are relative new. For this purpose we should introduce an annotation which these codecs should us to be marked as unstable in terms of API.

Modifications:

- Add UnstableApi annotation and use it on codecs that are not stable
- Move http2.hpack to http2.internal.hpack as it is internal.

Result:

Better document unstable APIs."
ffd2450e1154ede31b4b1d7e20c887a9e60f2d00,"Add logging configuration to pom.xml

Motivation:
Currently the default log level when running tests is debug. When
running the build on the CI server it might be nice to avoid this debug
level and allow for the level to be configured.

Modifications:
Added a logback-test.xml configuration that has been added to the
common module. This allows for the logLevel to be configured.
The default level will still be debug.

Result:
The log level can now be configured from the command line:
$ mvn test -DlogLevel=error"
f2ed3e6ce8039d142e4c047fcc9cf09409105243,"DefaultPromise LateListener Logic Issues

Motivation:
The LateListener logic is prone to infinite loops and relies on being processed in the EventExecutor's thread for synchronization, but this EventExecutor may not be constant. An infinite loop can occur if the EventExecutor's execute method does not introduce a context switch in LateListener.run. The EventExecutor can be changed by classes which inherit from DefaultPromise. For example the DefaultChannelPromise will return w/e EventLoop the channel is registered to, but this EventLoop can change (re-registration).

Modifications:
- Remove the LateListener concept and instead use a single Object to maintain the listeners while still preserving notification order
- Make the result member variable an atomic variable so it can be outside the synchronized(this) blocks
- Cleanup/simplify existing state management code

Result:
Fixes https://github.com/netty/netty/issues/5185"
9ce84dcb21168c45fe6714d3673c9253f35e5cd2,"Http2 to Http1.1 converter on new Http2 server API

Motivation:

http/2 and http/1.1 have similar protocols, and it's useful to be able
to implement a single server against a single interface. There's an
injection from http/1.1 messages to http/2 ones, so it makes sense to
make folks program against http/1.1 and upgrade them under the hood.

Modifications:

added a MessageToMessageCodec<Http2StreamFrame, HttpObject> which turns
every kind of Http2StreamFrame domain object into an HttpObject domain
object, and then back again on the way out.  This one is specialized for
servers, but it should be straightforward to make a symmetric one for
clients, or else extend this one.

Result:

fixes #5199, and it's now simple to make your Http2MultiplexCodec speak
Http1.1"
d580245afc77f11e4b82a7f3320f5619b555c2ec,"DefaultHttp2Connection.close Reentrant Modification

Motivation:
The DefaultHttp2Conneciton.close method accounts for active streams being iterated and attempts to avoid reentrant modifications of the underlying stream map by using iterators to remove from the stream map. However there are a few issues:

- While iterating over the stream map we don't prevent iterations over the active stream collection
- Removing a single stream may actually remove > 1 streams due to closed non-leaf streams being preserved in the priority tree which may result in NPE

Preserving closed non-leaf streams in the priority tree is no longer necessary with our current allocation algorithms, and so this feature (and related complexity) can be removed.

Modifications:
- DefaultHttp2Connection.close should prevent others from iterating over the active streams and reentrant modification scenarios which may result from this
- DefaultHttp2Connection should not keep closed stream in the priority tree
  - Remove all associated code in DefaultHttp2RemoteFlowController which accounts for this case including the ReducedState object
  - This includes fixing writability changes which depended on ReducedState
- Update unit tests

Result:
Fixes https://github.com/netty/netty/issues/5198"
24784bfcd17edd6109fe9ffb22fbcaa72779871e,"Change hosts file resolver to be case-insensitive

Motivation:

Resolving hosts via the /etc/hosts file should be case-insensitive, e.g. localhost and LOCALHOST refer to the same host, this is the same that is applied to dns queries.

Modifications:

Store hosts Map with lowercase keys, lookup the keys as lowercase
Add to unit test for the hosts file parser to use an UPPERCASE file entry
Add unit test for DefaultHostsFileEntriesResolver to resolve both localhost and LOCALHOST

Result:

host resolution for local hosts file should match the rules applied to ""getent hosts"" or ""ping"""
4d2e91a10dd6b2b3a1ec25a26e2f64d9c4212fe9,"codec-http2: Stop leaking in header downgrader test

Motivation:

We're leaking requests in our Http2ServerDowngrader tests when we
allocate a buffer using the local allocator.

Modification:

Release the request later when the request is constructed with the local
allocator.

Result:

Less leaky tests."
15711d938dd7311b54b744a9ef98e0e6bacf32d3,"Fix address aliasing in sendmmsg0

Motivation:

When epoll datagram channel invokes sendmmsg0, _all_ of the messages go
on the wire with the address of the _last_ packet in the list.

Modifications:

An array of addresses equal to the length of the messages is allocated
on the stack to hold the address for each msg_hdr.msg_name.

Result:

Each message goes on the wire with the correct address."
b225144a5791eeef848a02ba0f51f894e79ee854,"Upgrade to netty-tcnative-1.1.33.Fork16

Motivation:

A new netty-tcnative version was released.

Modifications:

Upgrade to latest version.

Result:

Use up-to-date dependency"
4b24b0aac88636ad448bde9dfc204259619b2085,"Annotate Http2ServerDowngrader with @UnstableApi

Motivation:

Everything in the http2 package should be considered unstable for now

Modifications:

Add missing annotation on Http2ServerDowngrader

Result:

Clearly mark class as unstable."
ea61b5b5b368a3e2ea556bb92edc1bc6c4216d20,"[#5223] Remove indirection in DefaultChannelPipeline.executorSafe(...)

Motivation:

We use channel.unsafe().invoker().executor() in DefaultChannelPipeline.executorSafe(...) which is an unnecessary indirection to channel.eventLoop().

Modifications:

Remove indirection by using channel.eventLoop().

Result:

Cleaner code."
30bb3094c16f8c3bf0f570f34f62a4a098cdb9b6,"[#5227] Fix race-condition in PooledByteBufAllocatorTest

Motivation:

PooledByteBufAllocatorTest.testNumThreadCachesWithNoDirrectArenas() had a race as it just used LockSupport.parkNanos(). We should better use a CountdownLatch and so be sure we really have init everything.

Modifications:

Replace LockSupport.parkNanos(...) with CountdownLatch usage

Result:

No more race in test."
5ffa3b1c466f8a4c22b1cb96312d2809c653fc1b,"Only try to bind if late registration not failed.

Motivation:

We should not try to call bind if registration failed.

Modifications:

Only call doBind0(...) when the registration not failed.

Result:

Not try to to bind if the registration failed."
690ab563e746aee8209680b6c2b9a0a2b15dd078,"Ensure ChannelHandlerContext.attr(...) and ChannelHandlerContext.hasAttr(...) has no semantic change

Motivation:

The ChannelHandlerContext.attr(...) and ChannelHandlerContext.hasAttr(...) delegated to Channel for the attributes which is a semantic change compared to 4.0 releases. We should not change the semantic to not break users applications when upgrading to 4.1.0

Modifications:

- Revert semantic change
- Mark ChannelHandlerContext.attr(...) and hasAttr(...) as @deprecated so we can remove these later

Result:

Semantic of attribute operations on ChannelHandlerContext is the same in 4.1 as in 4.0 again."
341a235fea2f11e368038a832453cec72246dca2,"Fix possible leaks in Http2ServerDowngraderTest

Motivation:

We need to ensure we release all ReferenceCounted objects during tests to not leak.

Modifications:

Fix possible leaks by calling release()

Result:

No more leaks in tests."
979dc3e3e4b3f95d51b5e5c471f2f1ab4648a8b6,Fix one more possible leak as a follow up of 341a235fea2f11e368038a832453cec72246dca2
c5faa142fb25abe20b69eae0c03a8f5c9e4b3165,"KObjectHashMap probeNext improvement

Motivation:
KObjectHashMap.probeNext(..) usually involves 2 conditional statements and 2 aritmatic operations. This can be improved to have 0 conditional statements.

Modifications:
- Use bit masking to avoid conditional statements

Result:
Improved performance for KObjecthashMap.probeNext(..)"
88a52f73671dd91630b2bc0da0ae8fbc910d763b,"KObjectHashMap PrimitiveIterator NPE

Motivation:
KObjectHashMap.remove(int index) attempts to move back items which may have been displaced because their spot in the hash based array was taken by another item. If this happens the nextIndex reference in PrimitiveIterator will not be updated. At this time the PrimitiveEntry will reference the incorrect index and may result in a NPE.

Modifications:
- If KObjectHashMap.remove(int index) moves entries back then PrimitiveIterator should adjust its nextIndex

Result:
PrimitiveIterator.remove() updates its internal state to reference the new nextIndex and will not NPE.
Fixes https://github.com/netty/netty/issues/5198"
1f8e192e21fbb5a0689967919507fe4d7aacd226,"Remove EventExecutor.children

Motivation:
EventExecutor.children uses generics in such a way that an entire colleciton must be cast to a specific type of object. This interface is not very flexible and is impossible to implement if the EventExecutor type must be wrapped. The current usage of this method also does not have any clear need within Netty. The Iterator interface allows for EventExecutor to be wrapped and forces the caller to make assumptions about types instead of building the assumptions into the interface.

Motivation:
- Remove EventExecutor.children and undeprecate the iterator() interface

Result:
EventExecutor interface has one less method and is easier to wrap."
89eae94542ae3d522a78e1f8b0172782c9786901,"Allow to extend IdleStateHandler and so provide more details for IdleStateEvents

Motivation:

Sometimes it is useful to include more details in the IdleStateEvents that are produced by the IdleStateHandler. For this users should be able to create their own IdleStateEvents that encapsulate more informations.

Modifications:

- Make IdleStateEvent constructor protected and the class non-final
- Add protected method to IdleStateHandler that users can override and so create their own IdleStateEvents.

Result:

More flexible and customizable IdleStateEvents / IdleStateHandler"
775dd139ea477afe9210b8d7b2a5928c1d697e3f,"Ensure Bootstrap.connect(...) not throw IllegalStateException when registration is delayed.

Motivation:

Bootstrap.connect(...) tries to obtain the EventLoop of a Channel before it may be registered. This will cause an IllegalStateException. We need to ensure we handle the cause of late registration and not throw in this case.

Modifications:

Ensure we only try to access the EventLoop after the Channel is registered and handle the case of late registration.

Result:

Bootstrap.connect(...) not fails on late registration."
c1827114e90cd89864578b00abe392db43a26a43,"Use ConnectException when connection failed for LocalChannel

Motivation:

To be more consistent we should use ConnectException when we fail the connect attempt because no LocalServerChannel exists with the given address.

Modifications:

Use correct exception.

Result:

More consistent handling of connection refused between different transports."
01109dd63513f355a7c553484b1e666b49c7c640,Fix test-failures introduces by c1827114e90cd89864578b00abe392db43a26a43.
27a392b87760a501f1519c0838b44194f236629f,"Add ChannelInboundInvoker and ChannelOutboundInvoker

Motivation:

ChannelHandlerContext, ChannelPipeline and Channel share various method signatures. We should provide an interface to share.

Modifications:

Add ChannelInboundInvoker and ChannelOutboundInvoker and extend these.

Result:

Better API abstraction."
c249926784a58884690c62a3ca0bf227fc439c2c,"[#3127] Allow to write with VoidPromise to Channels in ChannelGroup

Motivation:

Users sometimes want to use Channel.voidPromise() when write to a Channel to reduce GC-pressure. This should be also possible when write via a ChannelGroup.

Modifications:

Add new write(...) and writeAndFlush(...) overloads which allow to signale that a VoidPromise should be used to write to the Channel

Result:

Users can write with VoidPromise when using ChannelGroup"
877767da00f7ab93d401b4df7351040eb0c36a8b,"EpollEventLoop ensures that all submitted tasks are executed immediately.

Motivation:
If a task was submitted when wakenUp value was 1, the task didn't get a chance to produce wakeup event. So we need to check task queue again before calling epoll_wait. If we don't, the task might be pended until epoll_wait was timed out. It might be pended until idle timeout if IdleStateHandler existed in pipeline.

Modifications:
Execute epoll_wait in a non-blocking manner if there's a task submitted when wakenUp value was 1.

Result:
Every tasks in EpollEventLoop will not be pended."
f44f3e7926f1676315ae86d0f18bdd9b95681d9f,"NioEventLoop ensures that all submitted tasks are executed immediately.

Motivation:
If a task was submitted when wakenUp value was true, the task didn't get a chance to call Selector#wakeup.
So we need to check task queue again before executing select operation. If we don't, the task might be pended until select operation was timed out.
It might be pended until idle timeout if IdleStateHandler existed in pipeline.

Modifications:
Execute Selector#select in a non-blocking manner if there's a task submitted when wakenUp value was true.

Result:
Every tasks in NioEventLoop will not be pended."
a56ef03f24da04c608e47a9769ee08a2f97b4e32,"Add DomainNameMapping.entries to allow retrieving the domain match lists

Motivation:

See #4200.

Modifications:

Add DomainNameMapping.entries to allow retrieving the domain match lists.

Result:

People can use DomainNameMapping.entries to retrive the match list in DomainNameMapping."
68cd670eb9b8827b4d3b7602f4ea8e14c38691ac,"Remove ChannelHandlerInvoker

Motivation:

We tried to provide the ability for the user to change the semantics of the threading-model by delegate the invoking of the ChannelHandler to the ChannelHandlerInvoker. Unfortunually this not really worked out quite well and resulted in just more complexity and splitting of code that belongs together. We should remove the ChannelHandlerInvoker again and just do the same as in 4.0

Modifications:

Remove ChannelHandlerInvoker again and replace its usage in Http2MultiplexCodec

Result:

Easier code and less bad abstractions."
3a9f47216143082bdfba62e8940160856767d672,"Make retained derived buffers recyclable

Related: #4333 #4421 #5128

Motivation:

slice(), duplicate() and readSlice() currently create a non-recyclable
derived buffer instance. Under heavy load, an application that creates a
lot of derived buffers can put the garbage collector under pressure.

Modifications:

- Add the following methods which creates a non-recyclable derived buffer
  - retainedSlice()
  - retainedDuplicate()
  - readRetainedSlice()
- Add the new recyclable derived buffer implementations, which has its
  own reference count value
- Add ByteBufHolder.retainedDuplicate()
- Add ByteBufHolder.replace(ByteBuf) so that..
  - a user can replace the content of the holder in a consistent way
  - copy/duplicate/retainedDuplicate() can delegate the holder
    construction to replace(ByteBuf)
- Use retainedDuplicate() and retainedSlice() wherever possible
- Miscellaneous:
  - Rename DuplicateByteBufTest to DuplicatedByteBufTest (missing 'D')
  - Make ReplayingDecoderByteBuf.reject() return an exception instead of
    throwing it so that its callers don't need to add dummy return
    statement

Result:

Derived buffers are now recycled when created via retainedSlice() and
retainedDuplicate() and derived from a pooled buffer"
8fe3c83e4ca9a64c03f5adcb9f056d9e9440a389,"[#5104] Fix possible deadlock in DefaultChannelPipeline

Motivation:

When a user has multiple EventLoops in an EventLoopGroup and calls pipeline.add* / remove* / replace from an EventLoop that belongs to another Channel it is possible to deadlock if the other EventLoop does the same.

Modification:

- Only ensure the actual modification takes place in a synchronized block and not wait until the handlerAdded(...) / handlerRemoved(...) method is called. This is ok as we submit the task to the executor while still holding the look and so ensure correct order of pipeline modifications.
- Ensure if an AbstractChannelHandlerContext is put in the linked-list structure but the handlerAdded(...) method was not called we skip it until handlerAdded(...) was called. This is needed to ensure handlerAdded(...) is always called first.

Result:

Its not possible to deadlock when modify the DefaultChannelPipeline."
a517cce92fee24f2967bba7c84eea835b79fcab1,"Do not send duplicate DNS queries when the same query is in progress already

Related issue: #5179

Motivation:

When you attempt to make a lot of connection attempts to the same target
host at the same time and our DNS resolver does not have a record for it
in the cache, the DNS resolver will send as many DNS queries as the
number of connection attempts.

As a result, DNS server will reject or drop the requests, making the
name resolution attempt fail.

Modifications:

- Add InflightNameResolver that keeps the list of name resolution
  queries and subscribes to the future of the matching query instead of
  sending a duplicate query.

Result:

- The AddressResolvers created by DnsAddressResolverGroup do not send
  duplicate DNS queries anymore"
1cb706ac932bab732257e02fc095d91ff7ed3788,"HTTP/2 HPACK Header Name Validation and Trailing Padding

Motivation:
The HPACK code currently disallows empty header names. This is not explicitly forbidden by the HPACK RFC https://tools.ietf.org/html/rfc7541. However the HTTP/1.x RFC https://tools.ietf.org/html/rfc7230#section-3.2 and thus HTTP/2 both disallow empty header names, and so this precondition check should be moved from the HPACK code to the protocol level.
HPACK also requires that string literals which are huffman encoded must be treated as an encoding error if the string has more than 7 trailing padding bits https://tools.ietf.org/html/rfc7541#section-5.2, but this is currently not enforced.

Result:
- HPACK to allow empty header names
- HTTP/1.x and HTTP/2 header validation should not allow empty header names
- Enforce max of 7 trailing padding bits

Result:
Code is more compliant with the above mentioned RFCs
Fixes https://github.com/netty/netty/issues/5228"
2b340df452d5ec282b7cefd15f887f31604b9425,"DuplexChannel to support shutdownInput

Motivation:
The DuplexChannel is currently incomplete and only supports shutting down the output side of a channel. This interface should also support shutting down the input side of the channel.

Modifications:
- Add shutdownInput and shutdown methods to the DuplexChannel interface
- Remove state in NIO and OIO for tracking input being shutdown independent of the underlying transport's socket type. Tracking the state independently may lead to inconsistent state.

Result:
DuplexChannel supports shutting down the input side of the channel
Fixes https://github.com/netty/netty/issues/5175"
55dd7d035fad00ef8681b0007eade6232f832e3a,"Fix a class loader leak in ForkJoinPool

Motivation:

As reported in #4211, when using Netty in Tomcat (or other container based deployment), ForkJoinPool leaks an instance of `Submitter` so that the class loader of `Submitter` won't be GCed. However, since `Submitter` is just a wrapper of `int`, we can replace it with `int[1]`.

Modifications:

Replace `Submitter` with `int[1]`.

Result:

No class loader leak in ForkJoinPool when using in a container."
ea1f60dbf06cf7ab8618afff74e55dec344c3620,"Replace DomainNameMapping.entries() with asMap()

Motivation:

DomainNameMapping.entries() returns Set<Map.Entry<String, V>>, which
doesn't sound very natural.

Modifications:

Replace entries() with asMap() which returns a Map<String, V> instead.

Result:

- Better looking API
- User can do a lookup because it's a Map"
f11a35af3217aaa2b657438b7f319d30d36861f4,"Replace DomainMappingBuilder with DomainNameMappingBuilder

Motivation:

DomainMappingBuilder should have been named as DomainNameMappingBuilder
because it builds a DomainNameMapping.

Modifications:

- Add DomainNameMappingBuilder that does the same job with
  DomainMappingBuilder
- Deprecate DomainMappingBuilder and delegate its logic to
  DomainNameMappingBuilder
- Remove the references to the deprecated methods and classes related
  with domain name mapping
- Miscellaneous:
  - Fix Javadoc of DomainNameMapping.asMap()
  - Pre-create the unmodifiable map in DomainNameMapping

Result:

- Consistent naming
- Less use of deprecated API"
da46928950c3b5defdc7e871614c2dea2d67af7d,Fix NPE when creating DomainNameMapping via a builder
a425a8551db1008f007003d00ac924cd26af0d92,"[#5174] Expose Bootstrap getter methods and add some additional ones

Motivation:

The Bootstrap class (applies also to AbstractBootstrap and ServerBootstrap) has a few package private getter methods and some things such as #attr() and #options() aren't exposed at all.

Modifications:

Expose ""getters"" for configured things in a safe-manner via the config() method.

Result:

Easier for the user to check what is configured for a Bootstrap/ServerBootstrap."
e59d0e9efb8d1d18a07465c53d0356373be55b6d,"Introduce CodecOutputList to reduce overhead of encoder/decoder

Motivation:

99dfc9ea799348430a1c25776ce30a95bc10a1ff introduced some code that will more frequently try to forward messages out of the list of decoded messages to reduce latency and memory footprint. Unfortunally this has the side-effect that RecycleableArrayList.clear() will be called more often and so introduce some overhead as ArrayList will null out the array on each call.

Modifications:

- Introduce a CodecOutputList which allows to not null out the array until we recycle it and also allows to access internal array with extra range checks.
- Add benchmark that add elements to different List implementations and clear them

Result:

Less overhead when decode / encode messages.

Benchmark                                     (elements)   Mode  Cnt         Score        Error  Units
CodecOutputListBenchmark.arrayList                     1  thrpt   20  24853764.609 ± 161582.376  ops/s
CodecOutputListBenchmark.arrayList                     4  thrpt   20  17310636.508 ± 930517.403  ops/s
CodecOutputListBenchmark.codecOutList                  1  thrpt   20  26670751.661 ± 587812.655  ops/s
CodecOutputListBenchmark.codecOutList                  4  thrpt   20  25166421.089 ± 166945.599  ops/s
CodecOutputListBenchmark.recyclableArrayList           1  thrpt   20  24565992.626 ± 210017.290  ops/s
CodecOutputListBenchmark.recyclableArrayList           4  thrpt   20  18477881.775 ± 157003.777  ops/s

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 246.748 sec - in io.netty.handler.codec.CodecOutputListBenchmark"
43e91c2476e19f58744edb1263a79e8d3e67bc47,"Correctly implement DefaultByteBufHolder.equals(...) and hashCode()

Motivation:

DefaultByteBufHolder.equals(...) and hashCode() should be implemented so it works correctly with instances that share the same content.

Modifications:

Add implementations and a unit-test.

Result:

Have correctly working equals(...) and hashCode() method"
b83ffcc4471ce5cc68b39fc3545853ac5e2a5f1b,"Add timeout to PooledByteBufAllocatorTest

Motivation:

Some tests in PooledByteBufAllocatorTest are blocking on a CountDownLatch. We should use a timeout on these tests so these will not block forever on a failure.

Modifications:

Add timeout param to @Test annotation

Result:

Have sane timeouts on tests."
2e352b75ac249b334459dabcab4a5e7030b4080f,"Remove unused class

Motivation:

We should remove unused classes that are package-private

Modifications:

Remove unused class

Result:

Less cruft in code-base."
d41f0764190c7e24d44eadeeb87471400e3580ae,"Add more tests for PoolArenaMetric

Motivation:

We should add some more tests for PoolarenaMetric

Modifications:

Add more tests

Result:

Better test coverage for metrics"
e10dca76017fee3bcea251f28933c16f4238ad52,"Mark Recycler.recycle(...) deprecated and update usage.

Motivation:

Recycler.recycle(...) should not be used anymore and be replaced by Handle.recycle().

Modifications:

Mark it as deprecated and update usage.

Result:

Correctly document deprecated api."
2a14f749796ad754ab43d89e69f55ea44ee758a6,"Ensure all methods are correctly override in *LeakAware*ByteBuf implementations

Motivation:

We missed to override a few methods and so some actions on the ByteBuf failed.

Modifications:

- Override all methods
- Add unit tests to ensure all is fixed.

Result:

All *LeakAware*ByteBuf have correct implementations"
7547a448e00e4766108baa7ee21886647dee5b52,"[#4906] Ensure addLast(...) works as expected in EmbeddedChannel

Motivation:

If the user will use addLast(...) on the ChannelPipeline of EmbeddedChannel after its constructor was run it will break the EmbeddedChannel as it will not be able to collect inbound messages and exceptions.

Modifications:

Ensure addLast(...) work as expected by move the logic of handling messages and exceptions ti protected methods of DefaultChannelPipeline and use a custom implementation for EmbeddedChannel

Result:

addLast(...) works as expected when using EmbeddedChannel."
0838f223e1cd63539eae2828ce4d883d9a58925f,"Decouple AbstractChannel and AbstractChannelHandlerContext

Motivation:

We do a ""blind"" cast to AbstractChannel in AbstractChannelHandlerContext which we should better no do. It would be better to decouble AbstractChannelHandlerContext from AbstractChannel.

Modifications:

Decouble AbstractChannelHandlerContext from AbstractChannel by move logic to DefaultChannelPipeline

Result:

Less coubling and less casting."
a729e0fcd94009905d219665bdd069eb31433b7c,"Decouple DefaultChannelPipeline from AbstractChannel

Motivation:

DefaultChannelPipeline was tightly coupled to AbstractChannel which is not really needed.

Modifications:

Move logic of calling handlerAdded(...) for handlers that were added before the Channel was registered to DefaultChannelPipeline by making it part of the head context.

Result:

Less coupling and so be able to use DefaultChannelPipeline also with other Channel implementations that not extend AbstractChannel"
a5006c1969e6bfab2d78699de190441e518f34b8,"Add a EventLoopGroup.register(ChannelPromise)

Motivation:

EventLoopGroup.register doesn't need the Channel paramter when ChannelPromise is provided as we can get the Channel from ChannelPromise. Resolves #2422.

Modifications:

- Add EventLoopGroup.register(ChannelPromise)
- Deprecate EventLoopGroup.register(Channel, ChannelPromise)

Result:

EventLoopGroup.register is more convenient as people only need to set one parameter."
7b25402e80979a075387fae5a55cf99fe1ada425,"Add CompositeByteBuf.addComponent(boolean ...) method to simplify usage

Motivation:

At the moment the user is responsible to increase the writer index of the composite buffer when a new component is added. We should add some methods that handle this for the user as this is the most popular usage of the composite buffer.

Modifications:

Add new methods that autoamtically increase the writerIndex when buffers are added.

Result:

Easier usage of CompositeByteBuf."
06d76eeea4667a5b9a64ea892bf2865e30408ea0,"Update tcnative version

Motivation:

Previous tcnative version had a bug with the uberjar on windows.

Modifications:

Update version.

Result:

Depend on latest tcnative version."
26a175cd94c50aebdd3bdcba8e3cd0a30f664870,Fix flacky test which was missed when commit 8fe3c83e4ca9a64c03f5adcb9f056d9e9440a389
2618c2a649772624bb6011e5e63455c3c81be0b0,"[#5239] Allow adding handlers to pipeline with null name.

Motivation:

While doing 8fe3c83e4ca9a64c03f5adcb9f056d9e9440a389 I made a change which disallowed using null as name for handlers in the pipeline (this generated a new name before).

Modifications:

Revert to old behaviour and adding test case.

Result:

Allow null name again"
f5d58e2e1ae8f3eae8e69fb67aff4544bab50ee3,"DefaultPromise concurrency bug

Motivation:
If the executor changes while listeners are added and notification of listeners is being done then listeners can be notified out of order and concurrently. We should ensure that only one executor is used at any given time to notify listeners and ensure the listeners are notified in FIFO order.

Modifications:
- Move the notifyingListeners member variable from DefaultPromise into the synchronized block to prevent concurrent notification of listeners and preserve FIFO notification order

Result:
If the executor is changed for a DefaultPromise the listener notification order should be FIFO."
b3c56d5f694b281f986916cbe623be1cba258c11,"DefaultPromise StackOverflowError protection

Motivation:
f2ed3e6ce8039d142e4c047fcc9cf09409105243 removed the previous mechanism for StackOverflowError because it didn't work in all cases (i.e. ImmediateExecutor). However if a chain of listeners which complete other promises is formed there is still a possibility of a StackOverflowError.

Modifications:
- Use a ThreadLocal to save any DefaultPromises which could not be notified due to the stack being too large. After the first DefaultPromise on the stack completes notification this ThreadLocal should be used to notify any DefaultPromises which have not yet been notified.

Result:
DefaultPromise has StackOverflowError protection that works with all EventExecutor types."
79a06eaede237e28ef72e9e4c72c9e8615967a87,"Fix NPE in Http2ConnectionHandler.onHttpServerUpgrade

Motivation:

Performing a server upgrade with a new initial flow control window will cause an NPE in the DefaultHttp2RemoteFlowController. This is due to the fact that the monitor does not check whether or not the channel is writable.

Modifications:

Added a check for channel writability before calling `writePendingBytes`. Also fixed a unit test that was supposed to be testing this :).

Result:

Fixes #5301"
446b38db5220a3934064ee4e26f40d81dfa6b714,[maven-release-plugin] prepare release netty-4.1.0.Final
6ca49d133693fc583e439f87ac91874bd602a21f,[maven-release-plugin] prepare for next development iteration
3b72ee0fd02d89c23e53611a6a01f7840dd30283,"Add includeScope to not include test dependencies for maven-dependency-plugin

Motivation:

maven-dependency-plugin will include dependencies of all scopes by default. We should limit the scope to avoid pulling test dependencies. See #5317.

Modifications:

Add includeScope to avoid pulling test dependencies.

Result:

netty-all doesn't include codes from netty-build"
86f53083e75a525ebd9f53c863da596fbd6c9961,"[#5297] Ensure calling NioEventLoop.pendingTasks() and EpollEventLoop.pendingTasks() will not produce livelock

Motivation:

SingleThreadEventExecutor.pendingTasks() will call taskQueue.size() to get the number of pending tasks in the queue. This is not safe when using MpscLinkedQueue as size() is only allowed to be called by a single consumer.

Modifications:

Ensure size() is only called from the EventLoop.

Result:

No more livelock possible when call pendingTasks, no matter from which thread it is done."
528b83e27738af887955665a0ba82e081c7d8729,"Set the session id context properly to make client authentication work with open ssl provider.

Motivation:

When netty is used with open ssl provider and client authentication the following errors can occur:
error:140D9115:SSL routines:ssl_get_prev_session:session id context uninitialized
error:140A1175:SSL routines:ssl_bytes_to_cipher_list:inappropriate fallback
error:140760FC:SSL routines:SSL23_GET_CLIENT_HELLO:unknown protocol

Modifications:

Set the session id context in OpenSslServerContext so that sessions which use client authentication
which are cached have the same context id value.

Result:

Client authentication now works with open ssl provider."
dcd93e3be026a312939b5c895bcb484d25776f78,"Remove volatile where not needed.

Motivation:

We can remove the volatile keyword from the cached Runnables as at worse these will just be re-created.

Modifications:

Remove volatile.

Result:

Less overhead."
339b512e70caa562dc36aae769ac720c22d91699,"Fix small race in DefaultChannelPipeline introduced by a729e0fcd94009905d219665bdd069eb31433b7c

Motivation:

There is a small race while adding handlers to the pipeline because callHandlerAddedForAllHandlers() may not be run when the user calls add* but the Channel is already registered.

Modifications:

Ensure we always delay handlerAdded(..) / handlerRemoved(...) until callHandlerAddedForAllHandlers() was called.

Result:

No more race on pipeline modifications possible."
db6b72da199f80c64d19d2d9bb1dfeec281dfd50,"Add optimized version of setZero(...) / writeZero(...) for Unsafe*ByteBuf implementations

Motivation:

Unsafe offers a method to set memory to a specific value. This can be used to implement an optimized version of setZero(...) and writeZero(...)

Modifications:

Add implementation for all Unsafe*ByteBuf implementations.

Result:

Faster setZero(...) and writeZero(...)"
4c186c4c41d6eaa55086e4017fb6e3b4af13397f,"Make netty-transport-native-epoll-*-linux-x86_64.jar working in OSGi

Motivation:

Currenlty, netty-transport-native-epoll-*-linux-x86_64.jar is not packed as OSGi bundle
and thus not working in OSGi environment.

Modifications:

In netty-transport-native-epoll's pom.xml added configuration
to attach manifest to the jar with a native library.
In netty-common's pom.xml added configuration instruction (DynamicImport-Package)
to maven bnd plugin to make sure the native code is loaded from
netty-transport-native-epoll bundle.

Result:

The netty-transport-native-epoll-*-linux-x86_64.jar is a bundle (MANIFEST.MF attached)
and the inluced native library can be successfuly loaded in OSGi environment.
Fixing #5119"
844976a0a2a940eb28293e3f74bc133cbbde0bac,"Ensure the same ByteBufAllocator is used in the EmbeddedChannel when compress / decompress. Related to [#5294]

Motivation:

The user may specify to use a different allocator then the default. In this case we need to ensure it is shared when creating the EmbeddedChannel inside of a ChannelHandler

Modifications:

Use the config of the ""original"" Channel in the EmbeddedChannel and so share the same allocator etc.

Result:

Same type of buffers are used."
c43b424f56ef013fce638c647e8367796ff90ae4,Add missing null check that was missed in 844976a0a2a940eb28293e3f74bc133cbbde0bac
1dfcfc17fabb065fa87f8c2f7c2b25a653d24cb2,"Allow to change link capacity via system property

Motivation:

Sometimes people may want to trade GC with memory overhead. For this it can be useful to allow to change the capacity of the array that is hold in the Link that is used by the Recycler internally.

Modifications:

Introduce a new system property , io.netty.recycler.linkCapacity which allows to change the capcity.

Result:

More flexible configuration of netty."
bbed330468b5b82c9e4defa59012d0fcdb70f1aa,"Fix the possible reference leak in Recycler

Motivation:

Under very unlikely (however possible) circumstances, Recycler may leak
references. This happens _only_ when the object was already recycled
at least once (which means it's got written to the stack) and then
taken out again, and never returned.

The ""never returned"" part may be the fault of the user (forgotten
`finally` clause) or the situation when Recycler drops the possibly
youngest item itself.

Modifications:

Nullify the item taken from the stack.

Result:

Reference is cleaned up. If the object is lost, it will be a subject for
GC. The rest of Stack / Recycler functionality remains unaffected."
e200e4811b69cc74f97d485843cc4d35ca11b56a,"SocketRstTest fails due to exception message check

Motivation:
For lack of a better way the SocketRstTest inspects the content of the exception message to check if a RST occurred. However on windows the exception message is different than on other Unix based platforms and the assertion statement fails.

Modifications:
- Hack another string check in the unit test

Result:
SocketRstTest passes on windows
Fixes https://github.com/netty/netty/issues/5335"
af7b0a04a03f5e93a7705b40df492fed59bcc2fe,"Fix DefaultHeaders.toString() for keys with multiple values.

Motivation:

For example,

DefaultHttp2Headers headers = new DefaultHttp2Headers();
headers.add(""key1"", ""value1"");
headers.add(""key1"", ""value2"");
headers.add(""key1"", ""value3"");
headers.add(""key2"", ""value4"");

produces:

DefaultHttp2Headers[key1: value1key1: value2key1: value3, key2: value4]

while correctly it should be

DefaultHttp2Headers[key1: value1, key1: value2, key1: value3, key2: value4]

Modifications:

Change the toString() method to produce the beforementioned output.

Result:

toString() format is correct also for keys with multiple values."
f6ad9df8acfad15e2a0986d9d2c91730f138163d,"DefaultPromise StackOverflowError protection updates

Modifications:
DefaultPromise provides a ThreadLocal queue to protect against StackOverflowError because of executors which may immediately execute runnables instead of queue them (i.e. ImmediateEventExecutor). However this may be better addressed by fixing these executors to protect against StackOverflowError instead of just fixing for a single use case. Also the most commonly used executors already provide the desired behavior and don't need the additional overhead of a ThreadLocal queue in DefaultPromise.

Modifications:
- Remove ThreadLocal queue from DefaultPromise
- Change ImmediateEventExecutor so it maintains a queue of runnables if reentrant condition occurs

Result:
DefaultPromise StackOverflowError code is simpler, and ImmediateEventExecutor protects against StackOverflowError."
3d29bcfc8ddeda50e0bff0234d0c5240f404ddb5,"Allow to create Unsafe ByteBuf implementations that not use a Cleaner to clean the native memory.

Motivation:

Using the Cleaner to release the native memory has a few drawbacks:

- Cleaner.clean() uses static synchronized internally which means it can be a performance bottleneck
- It put more load on the GC

Modifications:

Add new buffer implementations that can be enabled with a system flag as optimizations. In this case no Cleaner is used at all and the user must ensure everything is always released.

Result:

Less performance impact by direct buffers when need to be allocated and released."
6fb5b14ef59b2188174d1286730bd818cbb99bb6,"[#5308] Ensure InetSocketAddressResolver.close() will close the wrapped NameResolver.

Motivation:

InetSocketAddressResolver.close() must call close() on the wrapped NameResolver.

Modifications:

Correctly call close() on wrapped NameResolver and added test.

Result:

close() is correctly propergated to the wrapped resolver."
f7cf00cb5f20cc42ae963eef395ebeefc2ab93ec,"OpenSslEngine remove unecessary rejectRemoteInitiatedRenegation call

Motivation:
OpenSslEngine calls rejectRemoteInitiatedRenegation in a scenario where the number of handshakes has not been observed to change. The number of handshakes has only been observed to change after readPlaintextData is called.

Modifications:
- Remove the call to rejectRemoteInitiatedRenegation before calls to readPlaintextData

Result:
Less code."
0b8a647f4eeff161f7914afe6de2eed8292f7dde,"Fix harmless typo in native code

Motivation:

We used transfered in native code which is not correct spelling. It should be transferred.

Modifications:

Fix typo.

Result:

Less typos in source code."
f8b306f61c682455390cf09d253a8b334d167d36,"[#5313] Correctly catch errors during bootstrap.

Motivation:

We not correctly catched errors during resolving in bootstrap and so may not have notified the future correctly.

Modifications:

Move code into try / catch block and try to fail the promise.

Result:

Promise is always notified"
e847ac0443ea1d7996b392d9adcfcd06e4094b78,"Fix possible deadlock in DefaultChannelPipeline.destroyDown(...)

Motivation:

We need to ensure we not hold a lock while executor callHandlerRemoved(...) as this may lead to a deadlock if handlerRemoved(...) will call another method in DEfaultChannelPipeline from another thread that will need to obtain the lock as well and wait for the result.

Modifications:

Release the lock before call handlerRemoved0(...).

Result:

No more deadlock possible"
dc816e9807e551f8a80027569407d4e812ad748b,"Ensure we null out cumulation buffer before fire through the pipeline in handlerRemoved(...)

Motivation:

We should ensure we null out the cumulation buffer before we fire it through the pipleine in handlerRemoved(...) as in theory it could be possible that another method is triggered as result of the fireChannelRead(...) or fireChannelReadComplete() that will try to access the cumulation.

Modifications:

Null out cumulation buffer early in handlerRemoved(...)

Result:

No possible to access the cumulation buffer that was already handed over."
9bd94ea021b9e43ca2318eeda6640b19e93b12c8,"Make DnsAddressResolverGroup easier to extend

Motivation:

DnsAddressResolverGroup allows to override the newResolver(...) method to change the settings used by the user. We should better let the user override another method and always apply the InflightNameResolver.

Modifications:

- Mark newResolver(...) method as deprecated, we will make it private soon.
- Add newNameResolver(...) method that user can override.

Result:

Easier to extend DnsAddressResolverGroup"
3a7dcde32099fad6e600d2eebfda9250006d587e,"[#5224] Allow to use Unsafe.reallocateMemory(...) in UnpooledUnsafeNoCleanerDirectByteBuf.

Motivation:

If the user uses unsafe direct buffers with no cleaner we can use Unsafe.reallocateMemory(...) as optimization when we need to expand the buffer.

Modifications:

Use Unsafe.relocateMemory(...) in UnpooledUnsafeNoCleanerDirectByteBuf.

Result:

Less expensive expanding of buffers."
584fbac6ed7a0b58068bd0acf8ac784a572274ad,"[#3419] Only use SecureRandom to generate initialSeed if requested

Motivation:

We tried to always use SecureRandom to generate the initialSeed for our ThreadLocalRandom, this can sometimes give warnings under normal usage. We should better not use SecureRandom as default (just as the implementation in jsr166y does) and only try if the user specified -Djava.util.secureRandomSeed=true .

Modifications:

Only try to use SecureRandom when -Djava.util.secureRandomSeed=true is used.

Result:

Less likely to see entropy warnings."
ee5969edfd26c3bec7302d283323d669f6db1cf7,"Use higher maxQueriesPerResolve and make exception message more clear.

Motivation:

We use a default of 3 for maxQueriesPerResolve when using the DnsNameResolverBuilder, which is too low if you want to resolve a hostname that uses a lot of CNAME records.

Modifications:

- Use higher default (16)
- Make exception message more clear why it failed.

Result:

Be able to resolve more domains by default and be able to better trouble shoot why a resolver failed."
7137d22994bb1b477cb1ed918bc76d4173f26bde,"Ensure the correct wrapped buffer is released in AbstractPooledDerivedByteBuf.deallocate()

Motivation:

We need to first store a reference to the wrapped buffer before recycle the AbstractPooledDerivedByteBuf instance. This is needed as otherwise it is possible that the same AbstractPooledDerivedByteBuf is again obtained and init(...) is called before we actually have a chance to call release(). This leads to call release() on the wrong buffer.

Modifications:

Store a reference to the wrapped buffer before call recycle and call release on the previous stored reference.

Result:

Always release the correct wrapped buffer when deallocate the AbstractPooledDerivedByteBuf."
b461c9d54c40b79403d21aa6980ae4c4abcb3283,"Allow to specify a custom EventExecutorChooserFactory. Related to [#1230]

Motivation:

Sometimes it may be benefitially for an user to specify a custom algorithm when choose the next EventExecutor/EventLoop.

Modifications:

Allow to specify a custom EventExecutorChooseFactory that allows to customize algorithm.

Result:

More flexible api."
79f2e3604e4c2f1ff6ed6edf04e660c3f46e0200,"HTTP/2 close only send GO_AWAY if one has not already been sent

Motivation:
Http2ConnectionHandler will always send a GO_AWAY when the channel is closed. This may cause problems if the user is attempting to control when GO_AWAY is sent and the content of the GO_AWAY.

Modifications:
- When the channel is closed Http2ConnectionHandler should only send a GO_AWAY if one has not already been sent

Result:
The user has more control over when GO_AWAY is sent
Fixes https://github.com/netty/netty/issues/5307"
a14eda7db055cbe3b32dc34370701c841879d2ae,typo: Skelton
9e2c400f89c5badc39919f811179d3d42ac5257c,"OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer

Motivation:
CVE-2016-4970

OpenSslEngine.wrap calls SSL_write which may return SSL_ERROR_WANT_READ, and if in this condition there is nothing to read from the BIO the OpenSslEngine and SslHandler will enter an infinite loop.

Modifications:
- Use the error code provided by OpenSSL and go back to the EventLoop selector to detect if the socket is closed

Result:
OpenSslEngine correctly handles the return codes from OpenSSL and does not enter an infinite loop."
cf670fab75ad3c77d6b37883104b259894d4bd71,[maven-release-plugin] prepare release netty-4.1.1.Final
4dec7f11b73a15c5ee97a3af4d775c2a457a9f81,[maven-release-plugin] prepare for next development iteration
829be86223c8ac92c8eb0396dce10c2b915f54c8,"Use a default resolver with bootstrap.resolver(null).

Motivation:

`Bootstrap` has a notion of a default resolver group, but it's hidden from the public. To allow callers to reset a `Bootstrap` instance's resolver group, we could either make `DEFAULT_RESOLVER` public, or we could allow callers to pass `null` as an argument to `Bootstrap#resolver(AddressResolverGroup<?>)`. This pull request does the latter.

Modifications:

- Allow `Bootstrap#resolver(AddressResolverGroup<?>)` to accept `null` as an argument

Result:

Callers may pass `null` to `Bootstrap#resolver(AddressResolverGroup<?>)` to cause the `Bootstrap` instance to use its default resolver group."
783567420fd8109f172b5ab3f299ef750bac8805,"OpenSslEngine encrypt more data per wrap call

Motivation:
OpenSslEngine.wrap will only encrypt at most 1 buffer per call. We may be able to encrypt multiple buffers per call.

Modifications:
- OpensslEngine.wrap should continue encrypting data until there is an error, no more data, or until the destination buffer would be overflowed.

Result:
More encryption is done per OpenSslEngine.wrap call"
56a2f64665494ee0d52fba7f391de0bea6144e29,"Clarify Future.removeListener[s] javaDocs

Motivation:
The javaDocs for Future.removeListener do not clarify that only the first occurrence of the listener is guaranteed to be removed.

Modifications:
- Clarify the javaDocs for Future.removeListener[s] so it is known that the only the first occurrence of the listener will be removed.

Result:
Fixes https://github.com/netty/netty/issues/5351"
52bbfd3310aaa45996673749c66b3137893c5849,"epoll_wait timeout reset when called multiple times

Motivation:
epoll_wait accepts a timeout argument which will specify the maximum amount of time the epoll_wait will wait for an event to occur. If the epoll_wait method returns for any reason that is not fatal (e.g. EINTR) the original timeout value is re-used. This does not honor the timeout interface contract and can lead to unbounded time in epoll_wait.

Modifications:
- The time taken by epoll_wait should be decremented before calling epoll_wait again, and if the remaining time is exhausted we should return 0 according to the epoll_wait interface docs http://man7.org/linux/man-pages/man2/epoll_wait.2.html
- link librt which is needed for some platforms to use clock_gettime

Result:
epoll_wait will wait for at most timeout ms according to the epoll_wait interface contract."
88dbd96376b7878bf4eec217da158419692fae17,"[#5372] Ensure OpenSslClientContext / OpenSslServerContext can be garbage collected

Motivation:

OpenSslClientContext / OpenSslServerContext can never be garbage collected as both are part of a reference to a callback that is stored as global reference in jni code.

Modifications:

Ensure the callbacks are static and so not hold the reference.

Result:

No more leak due not collectable OpenSslClientContext / OpenSslServerContext"
398efb1f7186abb458fcc7463dbe900066aabbc9,"Ensure valid message sequence if channel is closed before receive headers.

Motivation:

When the channel is closed while we still decode the headers we currently not preserve correct message sequence. In this case we should generate an invalid message with a current cause.

Modifications:

Create an invalid message with a PrematureChannelClosureException as cause when the channel is closed while we decode the headers.

Result:

Correct message sequence preserved and correct DecoderResult if the channel is closed while decode headers."
c3abb9146e47b1c8de5a26b7ae5076845fc80c28,"Use shaded dependency on JCTools instead of copy and paste

Motivation:
JCTools supports both non-unsafe, unsafe versions of queues and JDK6 which allows us to shade the library in netty-common allowing it to stay ""zero dependency"".

Modifications:
- Remove copy paste JCTools code and shade the library (dependencies that are shaded should be removed from the <dependencies> section of the generated POM).
- Remove usage of OneTimeTask and remove it all together.

Result:
Less code to maintain and easier to update JCTools and less GC pressure as the queue implementation nt creates so much garbage"
cc580e3ba162af434928f835befee85f0f6b9cba,"Let OpenSslContext take pre-encoded pkcs#8 private key/cert bytes

Motivation

OpenSslContext is expecting Java's PrivateKey and X509Certificate objects as input
(for JdkSslContext API compatibility reasons) but doesn't really use them beyond
turning them into PEM/PKCS#8 strings.

This conversion can be entirely skipped if the user can pass in private keys and
certificates in a format that Netty's OpenSSL code can digest.

Modifications

Two new classes have been added that act as a wrapper around the pre-encoded byte[]
and also retain API compatibility to JdkSslContext.

Result

It's possible to pass PEM encoded bytes straight into OpenSSL without having to
parse them (e.g. File to Java's PrivateKey) and then encode them (i.e. PrivateKey
into PEM/PKCS#8).

File pemPrivateKeyFile;
byte[] pemBytes = readBytes(pemPrivateKeyFile);
PemPrivateKey pemPrivateKey = PemPrivateKey.valueOf(pemBytes);

SslContextBuilder.forServer(pemPrivateKey)
    .sslProvider(SslProvider.OPENSSL)"
b921f800579c95fe61c5c844423e0da146524759,"Make JCtools available (provided scope) for tests and optional OSGI, issue #5383"
428c61673bf5acd4f4807d950bb03e13d83f2223,"Logs in invokeExceptionCaught have been made consistent and full

Motivation:

In case of exception in invokeExceptionCaught() only original exception passed to invokeExceptionCaught() will be logged on any log level.
+ AbstractChannelHandlerContext and CombinedChannelDuplexHandler log different exceptions.

Modifications:

Fix inconsistent logging code and add ability to see both stacktraces on DEBUG level.

Result:

Both handlers log now both original exception and thrown from invokeExceptionCaught. To see full stacktrace of exception thrown from invokeExceptionCaught DEBUG log level must be enabled."
eb1d9324667988ed0dcb39ce94a5de4c90ce8988,"Support WebSocket data chunked transfer

Motivation:
Support fetches data chunk by chunk for use with WebSocket chunked transfers.

Modifications:
Create a WebSocketChunkedInput.java that add to io.netty.handler.codec.http.websocketx package

Result:
The WebSocket transfers/fetches data chunk by chunk."
a7496ed83df3cf13c24fa9b5ce9494914fcd07ec,"FlowControlHandlerTest synchronization issues

Motivation:
2b6525856868ab1788db957ff8af8eb22b42c774 only partially addressed the synchronization issues that are present in FlowControlHandlerTest. A few tests are attempting to validate state changes made across an EventLoop thread and the JUnit thread but are not properly synchronized.

Modifications:
- Ensure that conditions which verify expectations set in another thread have synchronization gates to ensure the event has actually occurred.
- Remove the message counter verification in favor of using individual CountDownLatch objects

Result:
FLowControlHanderTest has less race conditions which may lead to test failures."
9bfeab2c8a802b24e867c8f1ba424969ce206903,"AbstractBootstrap can crash instead of failing promise, close #5387

Motivation:
When `ChannelFactory#newChannel` crashed, `AbstractBootstrap#initAndRegister` propagates the exception to the caller instead of failing the promise.

Modifications:
- Catch exceptions from `ChannelFactory#newChannel`.
- Notify promise of such failure.

Result:
`AbstractBootstrap` gracefully handles connect failures."
fe569ea7a31f2a85393eea1bb4fd0b648a0d5a97,"Fix for a newly intrduced bug in #5377

Motivation

This bug was introduced with #5377 and affects only users who'd like to share/cache/re-use `PemPrivateKey` and `PemX509Certificate` instances.

Modifications

Use `ByteBuf#writeBytes(src, readerIndex, length)` so that the src's readerIndex doesn't change and can consequently be used more than once.

Result

It's possible to share/cache/re-use `PemPrivateKey` and `PemX509Certificate` instances as long as their refCnt remains >= 1."
819b26b4bc7d116f184af3dd129a68a7fa936220,"Add more HttpHeaders values

Motivation:
Some commons values are missing from HttpHeader values constants.

Modifications:
- Add constants for ""application/json"" Content-Type
- Add constants for ""gzip,deflate"" Content-Encoding

Result:
More HttpHeader values constants available, both in
`HttpHeaders.Values` and `HttpHeaderValues`."
328a1ec01b29fef601ec645e915213573de18dc6,"cleanup from 819b26b

Motivation:
I cherry-picked 819b26b too soon. There were entries added to a deprecated class which should only go into the non-deprecated version of the class.

Modifications:
- Remove the static final variables that were added as duplicates to the deprecated class

Result:
Deprecated code does not grown in volume without need."
3dbbf06e9bb611db6beb3c65c00204935c7d71fa,"Fix typo in the assert description in MqttCodecTest

Motivation:

There is a spelling error in MqttCodecTest, where ""bout got"" shoud be ""but got"".

Modifications:

Replace the error spelling with correct one.

Result:

Fix typo in the assert description in MqttCodecTest."
5e86325a8cb3bbe78440662290980c597c1a2d67,"Remove unused method from native epoll

Motivation:

Unused methods create warnings on some C compilers.  It may not be feasible to selectively turn them off.

Modifications:

Remove createInetSocketAddress as it is unused.

Result:

Less noisy compilation"
418550914a8bb01a7eae060f89244ad32bf39318,"Log Selector instance when Selector needs to be rebuild

Motivation:

To better debug why a Selector need to be rebuild it is useful to also log the instance of the Selector.

Modifications:

Add logger instance to the log message.

Result:

More useful log message."
8f3a5e5b18d6e27281e3dba1d41e352065b129ad,"Fix typo in log message

Motivation:

We had a typo in the log message.

Modifications:

Remove extra ""s"" in log message.

Result:

Correct spelling in log message."
8ccc795314f7c7591410ed5be78b8277e61f10b0,"Expose DefaultThreadFactory.threadGroup to sub-classes

Motivation:

DefaultThreadFactory allows to override the newThread(...) method and so should have access to all fields that are set via the constructor.

Modifications:

Change threadGroup from private to protected visibility.

Result:

Easier to extend DefaultThreadFactory."
f5eea4698d0bf3f0ce23ea07cad5c8474ce64fb7,"Fix possible NPE in HttpCunkedInput if wrapped ChunkedInput.readChunk(...) return null.

Motivation:

Its completly fine for ChunkedInput.readChunk(...) to return null to indicate there is currently not any data to read. We need to handle this in HttpChunkedInput to not produce a NPE when constructing the HttpContent.

Modifications:

If readChunk(...) return null just return null as well.

Result:

No more NPE."
78f6f07f994374f9965a35ba4cc0195681af0ddb,"Correctly handle user home directory with spaces when construct javaagent argument

Motivation:

When the user home and so the path to the local maven repository contains spaces it currently fails to run the tests (at least on windows).

Modifications:

Put double quotes around the ${settings.localRepository}

Result:

Be able to run build and tests even when user home path has spaces in it."
4a1e0ceb4dc7a3eb49222b048665ab734bd4ed6f,"[5382] HttpContentEncoder should not set chunked transfer-encoding for HTTP/1.0

Motivation:

When using HttpContentCompressor and the HttpResponse is protocol version 1.0, HttpContentEncoder.encode() should not set the transfer-encoding header to chunked. Chunked transfer-encoding is not valid for HTTP 1.0 - this causes ERR_CONTENT_DECODING_FAILED errors in chrome and similar failures in IE.

Modifications:

Skip HTTP/1.0 messages

Result:

Be able to serve HTTP/1.0 as well when HttpContentEncoder is in the pipeline."
65d1fb474d8456fd5dcc6e664c500698f1b566bb,"Guard against possible segfault when OpenSslContext is gc'ed and user still hold reference to OpenSslSessionContext / OpenSslSessionStats

Motivation:

When the OpenSslContext is gc'ed and the user still hold a reference to OpenSslSessionContext / OpenSslSessionStats it is possible to produce a segfault when calling
a method on any of these that tries to pass down the ctx pointer to the native methods. This is because the OpenSslContext finalizer will free the native pointer.

Modifications:

Change OpenSslSessionContext / OpenSslSessionContext to store a reference to OpenSslContext and so prevent the GC to collect it as long as the user has a reference to OpenSslSessionContext / OpenSslSessionContext.

Result:

No more sefault possible."
87d9ecc2c94c188e7cc6c8c0dd88d6dc64e61719,"Correctly skip OpenSsl* tests if OpenSsl.isAvailable() is false.

Motivation:

We missed to skip some tests for OpenSsl when OpenSsl.isAvailable() is false.

Modifications:

- Correctly skip tests when OpenSsl.isAvailable() is false.
- Simplify some code by using @BeforeClass.

Result:

Be able to compile netty even when OpenSsl is not present on the system."
aa8f7b395b3808dfd19d3371ad5d9a59a788e8ed,"Ensure examples are runnable in the ide

Motivation:

It seems like intellij / idea is confused because of shading of jctools.

Modifications:

Add jctools as dependency with scope runtime to the examples as workaround

Result:

Its possible again to run the examples in the ide."
c7a0a0f325479e9fa0b34ce19b00909f240d5b8e,"[#5391] DnsNameResolver does not resolve property A+CNAME answer

Motivation:

The current DnsNameResolver fails to resolve an A+CNAME answer. For example:

dig moose.rmq.cloudamqp.com

...
;; ANSWER SECTION:
moose.rmq.cloudamqp.com. 1800   IN  CNAME   ec2-54-152-221-139.compute-1.amazonaws.com.
ec2-54-152-221-139.compute-1.amazonaws.com. 583612 IN A 54.152.221.139
...

The resolver constructs a map of cnames but forgets the trailing ""."" in the values which lead to not resolve the A record.

Modifications:

Reuse the code of DefaltDnsRecordDecoder which correctly handles the trailing dot.

Result:

Correctly resolve."
9602535b7d0bc349a8912286d3812629175b79e4,"Added `isText` to validate if a ByteBuf is compliant with the specified charset.

Motivation:

See #82.

Modifications:

- Added `isText` to validate if the given ByteBuf is compliant with the specified charset.
- Optimized for UTF-8 and ASCII. For other cases, `CharsetDecoder.decoder` is used.

Result:

Users can validate ByteBuf with given charset."
ee0897a1d9d80119990964834d62f906f800afb8,"HttpContentDecompressor should change decompressed requests to chunked encoding. Fixes issue #5428

`HttpContentDecoder` was removing `Content-Length` header but not adding a `Transfer-Encoding` header which goes against the HTTP spec.

Added `Transfer-Encoding` header with value `chunked` when `Content-Length` is removed.
Modified existing unit test to also check for this condition.

Compliance with HTTP spec."
e14a385a8833ce0cde1735af4544a664c4028e40,"Add support for SNIHostName when using Java8+

Motivation:

Java8 added support for using SNIHostName with SSLParameters. We currently ignore it in OpenSslEngine.

Modifications:

Use reflection to support SNIHostName.

Result:

People using Java8 can use SNIHostName even when OpenSslEngine is used."
e4d21abfc102dc053f139125aa273756937a7c4d,"Add support for SSLParameters.setCipherSuiteOrder() when using Java8+

Motivation:

When using java8+ we should support SSLParameters.setCipherSuiteOrder()

Modifications:

Add support of SLParameters.setCipherSuiteOrder() by using reflection, so we can compile with java7 but still support it.

Result:

Users that use java8+ can use SSLParameters.setCipherSuiteOrder()"
f2efd68c396e9b02fed5c594943c8be920243a06,"Correctly support SSLSession.getId() when using OpenSslEngine

Motivation:

At the moment SSLSession.getId() may always return an empty byte array when OpenSSLEngine is used. This is as we not set SSL_OP_NO_TICKET on the SSLContext and so SSL_SESSION_get_id(...) will return an session id with length of 0 if tickets are not used.

Modifications:

- Set SSL_OP_NO_TICKET by default and only clear it if the user requests the usage of session tickets.
- Add unit test

Result:

Ensure consistent behavior between different SSLEngine implementations."
3288cacf8dee818a7432b3baae41d617ba168b96,"Pluggable resource leak detector

Allow users of Netty to plug in their own leak detector for the purpose
of instrumentation.

Motivation:

We are rolling out a large Netty deployment and want to be able to
track the amount of leaks we're seeing in production via custom
instrumentation. In order to achieve this today, I had to plug in a
custom `ByteBufAllocator` into the bootstrap and have it initialize a
custom `ResourceLeakDetector`. Due to these classes mostly being marked
`final` or having private or static methods, a lot of the code had to
be copy-pasted and it's quite ugly.

Modifications:

* I've added a static loader method for the `ResourceLeakDetector` in
`AbstractByteBuf` that tries to instantiate the class passed in via the
`-Dio.netty.customResourceLeakDetector`, otherwise falling back to the
default one.
* I've modified `ResourceLeakDetector` to be non-final and to have the
reporting broken out in to methods that can be overridden.

Result:

You can instrument leaks in your application by just adding something
like the following:

```java
public class InstrumentedResourceLeakDetector<T> extends
ResourceLeakDetector<T> {

    @Monitor(""InstanceLeakCounter"")
    private final AtomicInteger instancesLeakCounter;

    @Monitor(""LeakCounter"")
    private final AtomicInteger leakCounter;

    public InstrumentedResourceLeakDetector(Class<T> resource) {
        super(resource);
        this.instancesLeakCounter = new AtomicInteger();
        this.leakCounter = new AtomicInteger();
    }

    @Override
    protected void reportTracedLeak(String records) {
        super.reportTracedLeak(records);
        leakCounter.incrementAndGet();
    }

    @Override
    protected void reportUntracedLeak() {
        super.reportUntracedLeak();
        leakCounter.incrementAndGet();
    }

    @Override
    protected void reportInstancesLeak() {
        super.reportInstancesLeak();
        instancesLeakCounter.incrementAndGet();
    }
}
```"
16be36a55fded330a92a4869e127b6b7249c6d13,"[#5402] sec-websocket-origin should mention HTTPS

Motivation:

When HTTPS is used we should use https in the sec-websocket-origin / origin header

Modifications:

- Correctly generate the sec-websocket-origin / origin header
- Add unit tests.

Result:

Generate correct header."
e84567004324c0bfd04b0ca9e1e182ed89394b16,"Set some StackTraceElement on pre-instantiated static exceptions

Motivation:

We use pre-instantiated exceptions in various places for performance reasons. These exceptions don't include a stacktrace which makes it hard to know where the exception was thrown. This is especially true as we use the same exception type (for example ChannelClosedException) in different places. Setting some StackTraceElements will provide more context as to where these exceptions original and make debugging easier.

Modifications:

Set a generated StackTraceElement on these pre-instantiated exceptions which at least contains the origin class and method name. The filename and linenumber are specified as unkown (as stated in the javadocs of StackTraceElement).

Result:

Easier to find the origin of a pre-instantiated exception."
9687d77b5ab1ca6b3bfd57dab8b71b796ad45b52,"Move validation of arguments out of synchronized block

Motivation:

There is no need already use synchronized when validate the args of the methods.

Modifications:

First validate arguments and then use synchronized

Result:

Less code executed in synchronized block."
6aa5f76d4225ea54c344fab28f0393d9b4af19b3,"HTTP/2 DelegatingDecompressorFrameListener return bytes to flow control

Motivation:
If a single DATA frame ends up being decompressed into multiple frames by DelegatingDecompressorFrameListener the flow control accounting is delayed until all frames have been decompressed. However it is possible the user may want to return bytes to the flow controller which were not included in the onDataRead return value. In this case the amount of processed bytes has not been incremented and will lead to negative value for processed bytes.

Modifications:
- Http2Decompressor.incrementProcessedBytes should be called each time onDataRead is called to ensure all bytes are accounted for at the correct time

Result:
Fixes https://github.com/netty/netty/issues/5375"
31e0ac1d22a5f948694bb0e63ca8c9bb71b5fbc2,"Expose the SelectorProvider used by the NioEventLoop

Motivation:

If a user writes an own nio based transport which uses a special SelectorProvider it is useful to be able to get the SelectorProvider that is used by a NioEventLoop. This way this can be used when implement AbstractChannel.isCompatible(...) and check that the SelectorProvider is the correct one.

Modifications:

Expose the SelectorProvider.

Result:

Be able to get the SelectorProvider used by a NioEventLoop."
d964bf6f1838d7dda55e00207802106741011a50,"Remove usages of deprecated methods group() and childGroup().

Motivation:

These methods were recently deprecated. However, they remained in use in several locations in Netty's codebase.

Modifications:

Netty's code will now access the bootstrap config to get the group or child group.

Result:

No impact on functionality."
a725b970928bc993de81c6b883fc0af454672d51,"[#5386] DnsNameResolver does not resolve localhost on Windows

Motivation:

On Windows localhost is not in hosts file and the DNS server does not resolve this address either, i.e it is handled by the Windows API. So using a Bootstrap (among others) with the resolver based on DnsNameResolver will not resolve localhost.

Modifications:

Workaround behavior of Windows

Result:

Correctly resolve localhost on Windows when using DnsNameResolver"
b4d4c0034d6f9e5e5884cc70e625d9f2655008bd,"Optimize HPACK usage to align more with Netty types and remove heavy object creations. Related to [#3597]

Motivations:

The HPACK code was not really optimized and written with Netty types in mind. Because of this a lot of garbage was created due heavy object creation.

This was first reported in [#3597] and https://github.com/grpc/grpc-java/issues/1872 .

Modifications:

- Directly use ByteBuf as input and output
- Make use of ByteProcessor where possible
- Use AsciiString as this is the only thing we need for our http2 usage

Result:

Less garbage and better usage of Netty apis."
f52b07dedee99c0d0cf08a3b6732d56290185825,"Fix HTTP version and Host header in HttpProxyHandler

Motivation:

  The current implementation does not comply with RFC2817 on two points:

  - The HTTP version required to support the CONNECT method is 1.1,
    but the current implementation specifies 1.0.

  - The HOST header should hold the name or address of the Target Host,
    but the current implementation uses the proxy address instead.

Modifications:

  - Specify HTTP version 1.1,
  - The HOST header is now set using the Target Host's name (or address,
    if it is resolved).

Result:

  The CONNECT request is RFC2817-compliant."
278c36af0ca9f0e97d6d321a88c413155483c509,"Merge ThrowableUtils into ThrowableUtil.

Motivation:

We should merge ThrowableUtils into ThrowableUtil as this name is more consistent with the naming of utility classes in netty.

Modifications:

Merge classes.

Result:

More consistent naming"
7c1374dd54fda385ceb384c3d27c6a8d9bab3d10,"OpenSslEngine.getSupportedCipherSuites() must return java names as well.

Motivation:

At the moment OpenSslEngine.getSupportedCipherSuites() only return the original openssl cipher names and not the java names. We need also include the java names.

Modifications:

Correctly return the java names as well.

Result:

Correct implementation of OpenSslEngine.getSupportedCipherSuites()"
d495792c481f33ccdeafd9e79adda53a48f7f4bd,"Allow to wrap another SslContext implementation and do extra init steps on the SSLEngine.

Motivation:

Sometimes its needed to customize the SSLEngine (like setting protocols etc). For this it would be useful if the user could wrap an SslContext and do init steps on the SSLEngine.

Modifications:

Add new SslContext implementation which can wrap another one and allow to customize the SSLEngine

Result:

More flexible usage of SslContext."
77c6d7a67249423a21cd8a8323133cb205f58710,"Correctly implement SSLSession.getLastAccessedTime() for OpenSSLEngine

Motivation:

We need to return a correct time for SSLSession.getLastAccessedTime() so it reflect when the handshake was done when the session was reused.

Modifications:

Correctly reflect handshake time in getLastAccessedTime().

Result:

More conform SSLSession implementation."
a0d4fb16fc1d71230c6633402e7a4d2a3b112e4d,"Allow to set max capacity for task queue for EventExecutors and EventLoops

Motivation:

To restrict the memory usage of a system it is sometimes needed to adjust the number of max pending tasks in the tasks queue.

Modifications:

- Add new constructors to modify the number of allowed pending tasks.
- Add system properties to configure the default values.

Result:

More flexible configuration."
731f52fdf73852a8fc597b1f08ed86b63caee375,"Allow to inject RejectedExecutionHandler for different EventLoops and EventExecutors

Motiviation:

Sometimes it is useful to allow to specify a custom strategy to handle rejected tasks. For example if someone tries to add tasks from outside the eventloop it may make sense to try to backoff and retries and so give the executor time to recover.

Modification:

Add RejectedEventExecutor interface and implementations and allow to inject it.

Result:

More flexible handling of executor overload."
73c4ad5f0a233844aa8629224c46d758a06225c1,"http2: count pad length field toward flow control. Fixes #5434

Motivation:
The HTTP/2 specification requires the pad length field of DATA, HEADERS and PUSH_PROMISE frames to be counted towards the flow control window. The current implementation doesn't do so (See #5434).

Furthermore, it's currently not possible to add one byte padding, as this would add the one byte pad length field as well as append one padding byte to the end of the frame.

Modifications:
Include the one byte pad length field in the padding parameter of the API. Thereby extending the allowed value range by one byte to 256 (inclusive). On the wire, a one byte padding is encoded with a pad length field with value zero and a 256 byte padding is encoded with a pad length field with value 255 and 255 bytes append to the end of the frame.

Result:
More correct padding."
f0a5ee068f5ee73a0c53e4e12d0ae2fcf8038a9b,"Update dependencies and plugins to latest possible versions.

Motivation:
It is good to have used dependencies and plugins up-to-date to fix any undiscovered bug fixed by the authors.

Modification:
Scanned dependencies and plugins and carefully updated one by one.

Result:
Dependencies and plugins are up-to-date."
2562ef7cbebe5eb4345cdde6323aeb0113c3f86c,"Fix a bug of DnsNameResolver while working with NoopDnsCache.

Motivation:

If DnsNameResolver works with NoopDnsCache, IndexOutOfBoundsException will
be thrown.

Modifications:

Test if the result of DnsNameResolver.get(hostname) is empty before
accessing it's elements."
ee3c8e0580781a0497f365a0337b9be8e590f547,"Test that CompositeByteBuf releases its components

Motivation:

In order to prevent a regression, add test case for a bug that caused a CompositeByteBuf to not release its components.

Modifications:

Add a test case that asserts a CompositeByteBuf's component buffers have indeed been released.

Result:

AbstractCompositeByteBuf gains a test case that will prevent future regressions."
2546d99864cf75597fe80ae314036d719534a504,"Expose session ticket statistics.

Motivation:

We recently added support for session ticket statistics which we can expose now.

Modifications:

Expose the statistics.

Result:

Be able to obtain session ticket statistics."
70651cc58d56749c9c9f9376f8c2fa47ca3ef471,"HpackUtil.equals performance improvement

Motivation:
PR #5355 modified interfaces to reduce GC related to the HPACK code. However this came with an anticipated performance regression related to HpackUtil.equals due to AsciiString's increase cost of charAt(..). We should mitigate this performance regression.

Modifications:
- Introduce an equals method in PlatformDependent which doesn't leak timing information and use this in HpcakUtil.equals

Result:
Fixes https://github.com/netty/netty/issues/5436"
3a69adfefb6136e5c63727d389b784b921dee08c,"[#5401] Support -Djdk.tls.ephemeralDHKeySize=num when using OpenSslContext

Motivation:

Java8+ adds support set a DH key size via a System property (jdk.tls.ephemeralDHKeySize). We should respect this when using OpenSSL.

Modifications:

Respect system property.

Result:

More consistent SSL implementation."
5e649850898889a8d2f1e526db610a8fca19c1ff,"Add support for KeyManagerFactory when using SslProvider.OpenSsl.

Motivation:

To be able to use SslProvider.OpenSsl with existing java apps that use the JDK SSL API we need to also provide a way to use it with an existing KeyManagerFactory.

Modification:

Make use of new tcnative apis and so hook in KeyManagerFactory.

Result:

SslProvider.OpenSsl can be used with KeyManagerFactory as well."
804e058e27e16e346b565ce4490f6177574e267d,"DnsNameResolver should not bind locally. Fixes #5457 Motivation: Dns resolution failures happen when using the DnsNameResolver and the JVM is not authorized to bind datagram channels. The current DnsNameResolver binds locally a DatagramChannel which is not necessary (and not always permitted).

Modifications:
The DnsNameResolver Bootstrap does not bind anymore, instead it registers and use the channel directly. The localAddress has also been removed from the DnsAddressResolverGroup, DnsNameResolver and DnsNameResolverBuilder as it is not necessary anymore and the API is marked as @UnstableApi.

Result:
Dns resolution does not require anymore to bind locally."
3613d15bca15727a4376aeadd9966bc8f4f50a97,"Split Http2MultiplexCodec into Frame- and MultiplexCodec + Tests. Fixes #4914

Motivation:

Quote from issue 4914:
""Http2MultiplexCodec currently does two things: mapping the existing h2 API to frames and managing the child channels.

It would be better if the two parts were separated. This would allow less-coupled development of the HTTP/2 handlers (flow control could be its own handler, for instance) and allow applications to insert themselves between all streams and the codec, which permits custom logic and could be used, in part, to implement custom frame types.

It would also greatly ease testing, as the child channel could be tested by itself without dealing with how frames are encoded on the wire.""

Modifications:

- Split the Http2MultiplexCodec into Http2FrameCodec and Http2MultiplexCodec. The Http2FrameCodec interacts with the existing HTTP/2 callback-based API, while the Http2MulitplexCodec is completely independent of it and simply multiplexes Http2StreamFrames to the child channels. Additionally, the Http2Codec handler is introduced, which is a convenience class that simply sets up the Http2FrameCodec and Http2MultiplexCodec in the channel pipeline and removes itself.

- Improved test coverage quite a bit.

Result:

- The original Http2MultiplexCodec is split into Http2FrameCodec and Http2MultiplexCodec.
- More tests for higher confidence in the code."
df41be6fc84adc116bc46ff703c4b9d7248fa099,"HTTP/2 Decoder validate that GOAWAY lastStreamId doesn't increase

Motivation:
The HTTP/2 RFC states in https://tools.ietf.org/html/rfc7540#section-6.8 that Endpoints MUST NOT increase the value they send in the last stream identifier however we don't enforce this when decoding GOAWAY frames.

Modifications:
- Throw a connection error if the peer attempts to increase the lastStreamId in a GOAWAY frame

Result:
RFC is more strictly enforced."
857ad73676c23da2eb6a892a799f0f26358d60ea,"DefaultPromise make MAX_STACK_DEPTH configurable

Motivation:
Some Netty use cases may want to configure the max allowed stack depth for promise listener notification.

Modifications:
- Add a system property so that this value can be configured.

Result:
DefaultPromise's max stack depth is configurable."
bd0a74fca3bd97543d4757c6abe82081abc11e14,"Allow to disable ResourceLeak creation when worker thread is deamon in HashedWheelTimer

Motivation:

Sometimes a shared HashedWheelTimer can not easily be stopped in a good place. If the worker thread is daemon this is not a big deal and we should allow to not log a leak.

Modifications:

Add another constructor which allows to disable resource leak detection if worker thread is used.

Result:

Not log resource leak when HashedWheelTimer is not stopped and the  worker thread is a deamon thread."
57672d985440eb5a5451190ca88d2f6aed1439ba,"Use ResourceLeakDetectorFactory in HashedWheelTimer

Motivation:

We recently added the ResourceLeakDetectorFactory but missed to updated HashedWheelTimer to use it.

Modifications:

- Add new abstract method to ResourceLeakDetectorFactory that allows to provide also samplingInterval and maxActive args.
- Deprecate most constructors in ResourceLeakDetector and add doc explaining that people should use ResourceLeakDetectorFactory

Result:

Custom ResourceLeakDetectorFactory will also be used in HashedWheelTimer if configured."
f3dc483c990364e62b66e8dadc01c599a0a61eec,"Fix NPE in OpenSslEngine

Motivation:

The gRPC interop tests fail due to a NPE in OpenSslEngine.

Caused by: java.lang.NullPointerException
at io.netty.handler.ssl.OpenSslEngine.setSSLParameters(OpenSslEngine.java:1473)

Modifications:

Add a null check

Result:

No more NPE exceptions :-)"
a7f7d9c8e004aa13801424e6e665b1ec525a822f,"Remove unsafe char[] access in PlatformDependent

Motivation:
PlatformDependent attempts to use reflection to get the underlying char[] (or byte[]) from String objects. This is fragile as if the String implementation does not utilize the full array, and instead uses a subset of the array, this optimization is invalid. OpenJDK6 and some earlier versions of OpenJDK7 String have the capability to use a subsection of the underlying char[].

Modifications:
- PlatformDependent should not attempt to use the underlying array from String (or other data types) via reflection

Result:
PlatformDependent hash code generation for CharSequence does not depend upon specific JDK implementation details."
6af56ffe76ce1c012456726175698ee85fee0e7f,"HPACK Encoder headerFields improvements

Motivation:
HPACK Encoder has a data structure which is similar to a previous version of DefaultHeaders. Some of the same improvements can be made.

Motivation:
- Enforce the restriction that the Encoder's headerFields length must be a power of two so we can use masking instead of modulo
- Use AsciiString.hashCode which already has optimizations instead of having yet another hash code algorithm in Encoder

Result:
Fixes https://github.com/netty/netty/issues/5357"
9d933091bfc82cbf5d65c2b27a1ff9dc10577d6a,"Add version check for JDK9 and beyond.

Motivation:

Netty's platform dependent parts should know about JDK9.

Modifications:

JDK9 introduce Runtime$Version Runtime.version() which has an int major()
method that always return the major Java version. I call that method to
get the Java major version.

Result:

Netty will recognize all future JDK versions."
8780062a43240b195c8ad2ecf4167d26474d5a7a,"Removed HeapByteBuffer address field check.

Motivation:

In JDK9 heap byte buffers have an address field, so we have to remove
the current check as it is invalid in JDK9.

Modifications:

Removed the address field check for heap byte buffers.

Result:
Netty continues to find sun.misc.Unsafe in JDK9 as in previous JDKs."
34d8b514d7a3b62e6101bade10a445bc448a0e65,"Use reflection to call cleaner on direct byte buffers in JDK9.

Motivation:

Project Jigsaw in JDK9 has moved the direct byte buffer cleaner from
sun.misc.Cleaner to java.lang.ref.Cleaner$Cleanable. This cause the
current platform tests to throw a ClassNotFoundException, disabling the
use of direct byte buffer cleaners.

Modifications:

I use reflection to find the clean method in either sun.misc.Cleaner or
java.lang.ref.Cleaner$Cleanable.

Result:

Netty uses direct byte buffers on JDK9 as it already do on earlier JDKs."
ad270c02b928a56cb1a51574536566cc2f0d5fb8,[maven-release-plugin] prepare release netty-4.1.2.Final
4676a2271cdce18f8524642b4f87923f93120113,[maven-release-plugin] prepare for next development iteration
181c159c240c166cd9ba83dd23de12e3db6bc38d,"Remove unneeded calls to hasScheduledTasks() when fetching from scheduled task queue for event executors.

Motivation:

Currently in the single threaded and global event executors when the scheduled task queue is drained, there is a call to hasScheduledTasks(). If there are scheduled tasks then the the code polls the queue for tasks. The poll method duplicates the exact logic of hasScheduledTasks(). This involves two calls to nanoTime when one seems sufficient.

Modifications:

Directly poll the queue for tasks and break if the task returned is null.

Result:

Should be no noticeable impact on functionality. Two calls to nanoTime have been coarsened into a single call."
5c124ae8e2a5412499403e1342a66c266ef8b017,"OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer unit test

Motivation:
Unit test for the OpenSslEngine ""OpenSslEngine writePlaintextData WANT_READ with no data in BIO buffer"" issue.

Modifications:
- Update SslEngine test to include renegotiation

Result:
More test coverage in OpenSslEngine."
be3e6972a18e9a673ef54a63cd2fb16b20ee936e,"Add a test case to check sub strings' AsciiString hash code

Motivation:

AsciiString.hashCode(o) , if ""o"" is a subString, the hash code is not always same, when netty’s version is 4.1.1.Final and jdk’s version is 1.6.

Modifications:

Use a test to assert hash codes are equal between a new string and any sub string (a part of  a char array),If their values are equal.

Result:

Create a test method to AsciiStringCharacterTest."
b0a5d4c266ed4117282decf06dc5053190423230,"Fix improper synchronization in DefaultPromise. Fixes #5489

Motivation:

A race detector found that DefaultPromise.listeners is improperly synchronized [1].
Worst case a listener will not be executed when the promise is completed.

Modifications:

Make DefaultPromise.listeners a volatile.

Result:

Hopefully, DefaultPromise is more correct under concurrent execution.

[1] https://github.com/grpc/grpc-java/issues/2015"
009680488e73c0f65eddb3c2465ae092f0a8cb39,"Fix set100ContinueExpected(...) jsvadoc

Motivation:

We don't have an argument named {@code value} but have {@code set} and
{@code expected} in HttpHeaders and HttpUtil respectively.

Modifications:

I replaced {@code value} to {@code set} and {@code expected} in HttpHeaders
and HttpUtil respectively.

Result:

Now javadoc says;
If {@code set} is {@code true}, the {@code ""Expect: 100-continue""} header is
set and all other previous {@code ""Expect""} headers are removed. Otherwise,
all {@code ""Expect""} headers are removed completely. in HttpHeaders

If {@code expected} is {@code true}, the {@code ""Expect: 100-continue""} header
is set and all other previous {@code ""Expect""} headers are removed. Otherwise,
all {@code ""Expect""} headers are removed completely. in HttpUtil"
987ebb90ec43b928823f2591a558072b6de3e798,"Share code between ReadTimeoutHandler and IdleStateHandler

Motivation:

ReadTimeoutHandler and IdleStateHandler have duplicated code, we should share whatever possible.

Modifications:

Let ReadTimeoutHandler extend IdleStateHandler.

Result:

Remove code duplication."
d97129b4c016d7c2252ed28a3ab9e3a34512b8ab,"Log listener Throwables in default promise

Motivation:

The logging statements in i.n.u.c.DefaultPromise do not emit the
caught Throwable when a Throwable is thrown while a listener is being
notified of completed or progressed operations.

Modifications:

This issue arises because the logging message has a single placeholder
but is passing two additional arguments, the second one being the
caught Throwable that is thus quietly not logged. We address this by
modifying the logging statements to ensure the caught Throwable is
logged. In this case, the preferred approach is to use the logger
override that accepts a message and a Throwable parameter since logger
implementations might have special handling for this case.

Result:

Log messages from i.n.u.c.DefaultPromise when a Throwable is thrown
while notifying a listener of completed or progressed operations will
contain the caught Throwable."
44b942e5077d0d3018befd7a66d44a37dd294578,"Rename future to promise in the ChannelDuplexHandler method arguments.

Motivation:

We used future in many method of ChannelDuplexHandler as argument name of ChannelPromise. We should make it more consistent and correct.

Modifications:

Replace future with promise.

Result:

More correct and consistent naming."
df033e150c71e2569105520fca853136841cb579,"EPOLL Cached ECONNREFUSED Exception

Motivation:
ECONNREFUSED can be a common type of exception when attempting to finish the connection process. Generating a new exception each time can be costly and quickly bloat memory usage.

Modifications:
- Expose ECONNREFUSED from JNI and cache this exception in Socket.finishConnect

Result:
ECONNREFUSED during finish connect doesn't create a new exception each time."
0fbb791ad629144dae5a169e8253850b05afe286,"Make AbstractChannel.outboundBuffer volatile.

Motivation:

The field can be read from arbitrary threads via Channel.(isWritable()|bytesBeforeWritable()|bytesBeforeUnwritable()), WriteAndFlushTask.newInstance(), PendingWriteQueue, etc.

Modifications:

Make AbstractChannel.outboundBuffer volatile.

Result:

More correct in a concurrent use case."
195d7476d505f26bd34e53e1b391db51b7169773,"Deprecate methods in AbstractChannel that have no real usage.

Motivation:

We should deprecate methods that are not used.

Modifications:

Add @Deprecated to methods

Result:

Be able to cleanup stuff sooner."
c393374cf5152e376d9fe3d6b9028a46fc6f624e,"[#5455] Clarify ChannelPool javadocs

Motivation:

We should make it clear that each acquired Channel needs to be released in all cases.

Modifications:

More clear javadocs.

Result:

Harder for users to leak Channel."
e3c8a924993018e5d8e7d724fc89cc1f9d691387,"Add FlushConsolidationHandler which consolidates flush operations as these are expensive

Motivation:

Calling flush() and writeAndFlush(...) are expensive operations in the sense as both will produce a write(...) or writev(...) system call if there are any pending writes in the ChannelOutboundBuffer. Often we can consolidate multiple flush operations into one if currently a read loop is active for a Channel, as we can just flush when channelReadComplete is triggered. Consolidating flushes can give a huge performance win depending on how often is flush is called. The only ""downside"" may be a bit higher latency in the case of where only one flush is triggered by the user.

Modifications:

Add a FlushConsolidationHandler which will consolidate flushes and so improve the throughput.

Result:

Better performance (throughput). This is especially true for protocols that use some sort of PIPELINING."
4d8132ff246c95cf677c525f8dfce6de00685842,"DefaultPromise make listeners not volatile

Motivation:
DefaultPromise has a listeners member variable which is volatile to allow for an optimization which makes notification of listeners less expensive when there are no listeners to notify. However this change makes all other operations involving the listeners member variable more costly. This optimization which requires listeners to be volatile can be removed to avoid volatile writes/reads for every access on the listeners member variable.

Modifications:
- DefaultPromise listeners is made non-volatile and the null check optimization is removed

Result:
DefaultPromise.listeners is no longer volatile."
6492cb98b2e40df4a93a12aef21d5bc89dc8aadb,"Revert ""DefaultPromise make listeners not volatile""

This reverts commit 4d8132ff246c95cf677c525f8dfce6de00685842 as I missed something I want to discuss first."
29fdb160f33776c76f0b46aada48a9c9f3babcbf,"[#5486] Not operate on serial execution assumption when using EventExecutor in the DefaultChannelPipeline.

Motivation:

In commit f984870ccca133d6056e8b0df0b2352f8f90b0fe I made a change which operated under invalide assumption that tasks executed by an EventExecutor will always be processed in a serial fashion. This is true for SingleThreadEventExecutor sub-classes but not part of the EventExecutor interface contract.

Because of this change implementations of EventExecutor which not strictly execute tasks in a serial fashion may miss events before handlerAdded(...) is called. This is strictly speaking not correct as there is not guarantee in this case that handlerAdded(...) will be called as first task (as there is no ordering guarentee).

Cassandra itself ships such an EventExecutor implementation which has no strict ordering to spread load across multiple threads.

Modifications:

- Add new OrderedEventExecutor interface and let SingleThreadEventExecutor / EventLoop implement / extend it.
- Only expose ""restriction"" of skipping events until handlerAdded(...) is called for OrderedEventExecutor implementations
- Add ThreadPoolEventExecutor implementation which executes tasks in an unordered fashion. This is used in added unit test but can also be used for protocols which not expose an strict ordering.
- Add unit test.

Result:

Resurrect the possibility to implement an EventExecutor which does not enforce serial execution of events and be able to use it with the DefaultChannelPipeline."
02850da4808bd64bf131a083ddedb8856189dd20,"Rename `ChannelHandlerContext#fireUserEventTriggered()` argument from `event` to `evt` so it matches the `ChannelInboundHandler#userEventTriggered()` argument's name.

Motivation

When I override ChannelHandler methods I usually (always) refire events myself via
ChannelHandlerContext instead of relieing on calling the super method (say
`super.write(ctx, ...)`). This works great and the IDE actually auto completes/generates
the right code for it except `#fireUserEventTriggered()` and `#userEventTriggered()`
which have a mismatching argument names and I have to manually ""intervene"".

Modification

Rename `ChannelHandlerContext#fireUserEventTriggered()` argument from `event` to `evt`
to match its handler counterpart.

Result

The IDE's auto generated code will reference the correct variable."
4baff691b41c26b9c24266e2ae32c228ebda76a8,"DefaultPromise make listeners not volatile

Motivation:
DefaultPromise has a listeners member variable which is volatile to allow for an optimization which makes notification of listeners less expensive when there are no listeners to notify. However this change makes all other operations involving the listeners member variable more costly. This optimization which requires listeners to be volatile can be removed to avoid volatile writes/reads for every access on the listeners member variable.

Modifications:
- DefaultPromise listeners is made non-volatile and the null check optimization is removed

Result:
DefaultPromise.listeners is no longer volatile."
64bf1674238c62438136fbcca69f5c4dd7ee8193,Fix flacky test introducd by 29fdb160f33776c76f0b46aada48a9c9f3babcbf
061899f2a7b4fb1f6c1f3dfe723109e863c9a35d,"Allow to remove pinning of EventExecutor for EventExecutorGroup

Motivation:

We pinned the EventExecutor for a Channel in DefaultChannelPipeline. Which means if the user added multiple handlers with the same EventExecutorGroup to the ChannelPipeline it will use the same EventExecutor for all of these handlers. This may be unexpected and even not what the user wants. If the user want to use the same one for all of them it can be done by obtain an EventExecutor and pass the same instance to the add methods. Because of this we should allow to not pin.

Modifications:

Allow to disable pinning of EventExecutor for Channel based on EventExecutorGroup via ChannelOption.

Result:

Less confusing and more flexible usage of EventExecutorGroup when adding ChannelHandlers to the ChannelPipeline."
79c8ec4d33506ed39b4d941a8bc218eb914f348d,"DnsNameResolver search domains support

Motivation:

The current DnsNameResolver does not support search domains resolution. Search domains resolution is supported out of the box by the java.net resolver, making the DnsNameResolver not able to be a drop in replacement for io.netty.resolver.DefaultNameResolver.

Modifications:

The DnsNameResolverContext resolution has been modified to resolve a list of search path first when it is configured so. The resolve method now uses the following algorithm:

if (hostname is absolute (start with dot) || no search domains) {
 searchAsIs
} else {
  if (numDots(name) >= ndots) {
    searchAsIs
  }
  if (searchAsIs wasn't performed or failed) {
    searchWithSearchDomainsSequenciallyUntilOneSucceeds
  }
}

The DnsNameResolverBuilder provides configuration for the search domains and the ndots value. The default search domains value is configured with the OS search domains using the same native configuration the java.net resolver uses.

Result:

The DnsNameResolver performs search domains resolution when they are present."
50a74e95f2d1843a244fd7ccedb1645e8fed7079,"Ensure ChannelHandler.handlerAdded(...) callback is executed directly when added from ChannelFutureListener added to the registration future.

Motivation:

Commit 4c048d069d99891d6a83859b469c39b4ff0f4ae1 moved the logic of calling handlerAdded(...) to the channelRegistered(...) callback of the head of the DefaultChannelPipeline. Unfortunatlly this may execute the callbacks to late as a user may add handlers to the pipeline in the ChannelFutureListener attached to the registration future. This can lead to incorrect ordering.

Modifications:

Ensure we always invoke ChannelHandler.handlerAdded(...) for all handlers before the registration promise is notified.

Result:

Not possible of incorrect ordering or missed events."
ce95c50444cc2507769574b3e39fdbffccb7fc1b,"[#5507] SingleThreadEventExecutor should reject call invoke*() from within the EventLoop.

Motivation:

ExecutorService.invoke*(...) methods may block by API definition. This can lead to deadlocks if called from inside the EventLoop in SingleThreadEventExecutor as it only has one Thread that does all the work.

Modifications:

Throw a RejectedExectionException if someone tries to call SingleThreadEventExecutor.invoke*(...) while in the EventLoop.

Result:

No more deadlock possible."
b37a41a535e41b573c09a00226865561327fb01a,"Allow to get the number of bytes queued in PendingWriteQueue

Motivation:

For some use-cases it would be useful to know the number of bytes queued in the PendingWriteQueue without the need to dequeue them.

Modifications:

Add PendingWriteQueue.bytes().

Result:

Be able to get the number of bytes queued."
cfd6db79150fdb9ea91a3ff2eb6117c23299a12c,"Avoid missed signals on a default promise

Motivation:

Today when awaiting uninterruptibly on a default promise, a race
condition can lead to a missed signal. Quite simply, the check for
whether the condition holds is not made inside a lock before
waiting. This means that the waiting thread can enter the wait after the
promise has completed and will thus not be notified, thus missing the
signal. This leads to the waiting thread to enter a timed wait that will
only trip with the timeout elapses leading to unnecessarily long waits
(imagine a connection timeout, and the waiting thread missed the signal
that the connection is ready).

Modification:

This commit fixes this missed signal by checking the condition inside a
lock. We also add a test that reliably fails without the non-racy
condition check.

Result:

Timed uninterruptible waits on default promise will not race against the
condition and possibly wait longer than necessary."
77770374fbe6b0767cfe5eccd0b59a5d66ec998a,"Ability to run a task at the end of an eventloop iteration.

  Motivation:

This change is part of the change done in PR #5395 to provide an `AUTO_FLUSH` capability.
Splitting this change will enable to try other ways of implementing `AUTO_FLUSH`.

Modifications:  

Two methods:

```java
void executeAfterEventLoopIteration(Runnable task);
  boolean removeAfterEventLoopIterationTask(Runnable task);
```
are added to `SingleThreadEventLoop` class for adding/removing a task to be executed at the end of current/next iteration of this `eventloop`.

In order to support the above, a few methods are added to `SingleThreadEventExecutor`

```java
protected void afterRunningAllTasks() { }
```

This is invoked after all tasks are run for this executor OR if the passed timeout value for `runAllTasks(long timeoutNanos)` is expired.

Added a queue of `tailTasks` to `SingleThreadEventLoop` to hold all tasks to be executed at the end of every iteration.
 
Result:  

`SingleThreadEventLoop` now has the ability to execute tasks at the end of an eventloop iteration."
9de90d07a973ed2b1a2d8f8c6547f7466a75539a,"DefaultHttp2RemoteFlowController reentry infinite loop

Motivation:
DefaultHttp2RemoteFlowController.writePendingBytes does not support reentry but does not enforce this constraint. Reentry is possible if the channel transitions from Writable -> Not Writable -> Writable during the distribution phase. This can happen if the user flushes when notified of the channel transitioning to the not writable state, and may be done if the user wants to fill the channel outbound buffer before flushing.

Modifications:
- DefaultHttp2RemoteFlowController.writePendingBytes should protect against reentry

Result:
DefaultHttp2RemoteFlowController will not allocate unexpected amounts or enter an infinite loop."
f2ce28bf18368edcfb285fe76b64aca36dd077e7,"Satisfy write promise when writing an Http2WindowUpdateFrame to Http2FrameCodec.

Motivation:

When writing an Http2WindowUpdateFrame to an Http2FrameCodec, the
ChannelPromise is never satisfied, so callers cannot generically rely on the
write future being satisfied on success.

Modifications:

When writing Http2WindowUpdateFrame, Http2FrameCodec now satisfies the
ChannelPromise immediately.

Result:

The write future is satisfied on successful writes.

Fixes netty/netty#5530."
771cfaec22248a52b97400e9b29522b94c7be536,"[#5520] Correctly include all PoolSubpage metrics

Motivation:

Because of a bug we missed to include the first PoolSubpage when collection metrics.

Modifications:

- Correctly include all subpages
- Add unit test

Result:

Correctly include all subpages"
afafadd3d7caf1e4b346da049baab0afeae0a4bc,"[#5505] Enforce Recycler limit when recycling from different threads

Motivation:

Currently, the recycler max capacity it's only enforced on the
thread-local stack which is used when the recycling happens on the
same thread that requested the object.

When the recycling happens in a different thread, then the objects
will be queued into a linked list (where each node holds N objects,
default=16). These objects are then transfered into the stack when
new objects are requested and the stack is empty.

The problem is that the queue doesn't have a max capacity and that
can lead to bad scenarios. Eg:

- Allocate 1M object from recycler
- Recycle all of them from different thread
- Recycler WeakOrderQueue will contain 1M objects
- Reference graph will be very long to traverse and GC timeseems to be negatively impacted
- Size of the queue will never shrink after this

Modifications:

Add some shared counter which is used to manage capacity limits when recycle from different thread then the allocation thread. We modify the counter whenever we allocate a new Link to reduce the overhead of increment / decrement it.

Result:

More predictable number of objects mantained in the recycler pool."
c735b3e14762bdc45716371c11e65366ac1782f5,"[#5514] Fix DiskFileUpload and MemoryFileUpload equals(...) method.

Motivation:

DiskFileUpload and MemoryFileUpload.equals(...) are broken.

Modifications:

Fix implementation and add unit test.

Result:

Equals method are correct now."
25c37cf44ad2ec7f9dfcde783eb776459107e3da,"Include Bundle-NativeCode manifest entry in transport-native-epoll jar.

Motivation:

The build generates a OSGi bundle with missing Bundle-NativeCode manifest entry.

Modifications:

Add missing manifest entry.

Result:

Be able to use transport-native-epoll in osgi container."
c221d32b926df33bc3f33feff3354be421d73474,"Upgrade to netty-tcnative-1.1.33.Fork19

Motivation:

New version of tcnative was released.

Modifications:

Bump up version.

Result:

Use latest tncative version."
27520f5208535935757014744647854f86286d37,"Non-sticky thread groups in DefaultThreadFactory

Motivation:

A recent change to DefaultThreadFactory modified it so that it is sticky
with respect to thread groups. In particular, this change made it so
that DefaultThreadFactory would hold on to the thread group that created
it, and then use that thread group to create threads.

This can have problematic semantics since it can lead to violations of a
tenet of thread groups that a thread can only modify threads in its own
thread group and descendant thread groups. With a sticky thread group, a
thread triggering the creation of a new thread via
DefaultThreadFactory#newThread will be modifying a thread from the
sticky thread group which will not necessarily be its own nor a
descendant thread group. When a security manager is in place that
enforces this requirement, these modifications are now impossible. This
is especially problematic in the context of Netty because certain global
singletons like GlobalEventExecutor will create a
DefaultThreadFactory. If all DefaultThreadFactory instances are sticky
about their thread groups, it means that submitting tasks to the
GlobalEventExecutor singleton can cause a thread to be created from the
DefaultThreadFactory sticky thread group, exactly the problem with
DefaultThreadFactory being sticky about thread groups. A similar problem
arises from the ThreadDeathWatcher.

Modifications:

This commit modifies DefaultThreadFactory so that a null thread group
can be set with the behavior that all threads created by such an
instance will inherit the default thread group (the thread group
provided by the security manager if there is one, otherwise the thread
group of the creating thread). The construction of the instances of
DefaultThreadFactory used by the GlobalEventExecutor singleton and
ThreadDeathWatcher are modified to use this behavior. Additionally, we
also modify the chained constructor invocations of the
DefaultThreadFactory that do not have a parameter to specify a thread
group to use the thread group from the security manager is available,
otherwise the creating thread's thread group. We also add unit tests
ensuring that all of this behavior is maintained.

Result:

It will be possible to have DefaultThreadFactory instances that are not
sticky about the thread group that led to their creation. Instead,
threads created by such a DefaultThreadFactory will inherit the default
thread group which will either be the thread group from the security
manager or the current thread's thread group."
3a33f5eb9d900d9122e9d769c4ef238882a9e66b,"Fix JDK9 direct ByteBuffer cleaner invocation and initialize Cleaner0 when PlatformDependent0 is initialized.

Motivation:
The clean method in java.base/jdk.internal.ref.Cleaner is not accessible
to methods outside java.base.  This prevents Cleaner0.freeDirectBuffer
from actually calling the clean method on JDK9.

The issue could have been caught earlier if Cleaner0 is initialized when
PlatformDependent0 is initialized and logging statements in the static
initializer in Cleaner0 would be close to the logging statements in the
static initializer in PlatformDependent0.

Modifications:
Try casting the cleaner obtained from a ByteBuffer to Runnable and use
Runnable.run if possible. All Cleaners in JDK9 implements Runnable. Fall
back to the clean method if the cleaner does not implement Runnable.
The fallback preserves the behavior on JDK8 and earlier.

Try to free the direct ByteBuffer allocated during static initialization
of PlatformDependent0. This cause Cleaner0 to be initialized when
PlatformDependent0 is initialized, and logging statements from the
static initializers will be close together.

Result:

Cleaner0.freeDirectBuffer works as intended on JDK9 and logging shows
that Cleaner0.freeDirectBuffer works as intended."
b2adea87a0e3173aeefae86f64f4fd29b673c82c,[maven-release-plugin] prepare release netty-4.1.3.Final
047f6aed289219e7461b4c6bbcbb6c88d7082b06,[maven-release-plugin] prepare for next development iteration
328510468c3da0f6a37d9710d7723f817eff8ce8,"Complete ChannelPromise for Http2WindowUpdateFrames in Http2FrameCodec. Fixes #5530

Motivation:

The channel promise of a window update frame is not completed correctly,
depending on the failure or success of the operation.

Modification:

Succeed / Fail the promise if the window update succeeds / fails.

Result:

Correctly succeed / fail the promise."
3d7ae973590fb6fdd9d2224f9b9e87decd27be84,"Make Epoll ChannelMetadata more consistent with NIO

Motivation:
In 4.0 AbstractNioByteChannel has a default of 16 max messages per read. However in 4.1 that constraint was applied at the NioSocketChannel which is not equivalent. In 4.1 AbstractEpollStreamChannel also did not have the default of 16 max messages per read applied.

Modifications:
- Make Nio consistent with 4.0
- Make Epoll consistent with Nio

Result:
Nio and Epoll both have consistent ChannelMetadata and are consistent with 4.0."
e00b797936a02fea1c43b04ba23a3400e5b3f639,"Acquire Java version simply

Motivation:

The Java version is used for platform dependent logic. Yet, the logic
for acquiring the Java version requires special permissions (the runtime
permission ""getClassLoader"") that some downstream projects will never
grant. As such, these projects are doomed to have Netty act is their
Java major version is six.  While there are ways to maintain the same
logic without requiring these special permissions, the logic is
needlessly complicated because it relies on loading classes that exist
in version n but not version n - 1. This complexity can be removed. As a
bonanza, the dangerous permission is no longer required.

Modifications:

Rather than attempting to load classes that exist in version n but not
in version n - 1, we can just parse the Java specification version. This
only requires a begign property (property permission
""java.specification.version"") and is simple.

Result:

Acquisition of the Java version is safe and simple."
73c0fb0e23c6cc2474ee6aeba7a5b199edf590b8,"Construct LOCALHOST4 and LOCALHOST6 object with hostname ""localhost""

Motivation:

When resolving localhost on Windows where the hosts file does not contain a localhost entry by default, the resulting InetAddress object returned by the resolver does not have the hostname set so that getHostName returns the ip address 127.0.0.1. This behaviour is inconsistent with Windows where the hosts file does contain a localhost entry and with Linux in any case. It breaks at least some unit tests.

Modifications:

Create the LOCALHOST4 and LOCALHOST6 objects with hostname localhost in addition to the address.
Add unit test domain localhost to DnsNameResolverTest to check the resolution of localhost with ipv4 at least.

Result:

The resolver returns a InetAddress object for localhost with the hostname localhost in all cases."
d262f7c1892d1cc93eaffe77144419174ea6e3e7,"Reduce permissions needed for process ID

Motiviation:

DefaultChannelId attempts to acquire a default process ID by determining
the process PID. However, to do this it attempts to punch through to the
system classloader, a permission that in the face of a restrictive
security manager is unlikely to be granted. Looking past this, it then
attempts to load a declared method off a reflectively loaded class,
another permission that is not likely to be granted in the face of a
restrictive security manager. However, neither of these permissions are
necessary as the punching through to the system security manager is
completely unneeded, and there is no need to load a public method as a
declared method.

Modifications:

Instead of punching through to the system classloader requiring
restricted permissions, we can just use current classloader. To address
the access declared method permission, we instead just reflectively
obtain the desired public method via Class#getMethod.

Result:

Acquiring the default process ID from the PID will succeed without
requiring the runtime permissions ""getClassLoader"" and
""accessDeclaredMembers""."
b8400f96283fec0b1f60232aab52da06a9921ad6,"[#5553] SimpleChannelPool#notifyConnect() may leak Channels

Motivation:

The SimpleChannelPool#notifyConnect() method will leak Channels if the user cancelled the Promise in between.

Modifications:

Release the channel if the Promise was complete before.

Result:

No more channel leaks."
bb3c4a43d8c904236b681414b30a9089575de65b,"Lz4FrameDecoder should reduce memory copies whenever possible

Motivation:

When the user constructs Lz4FrameDecoder with a Checksum implementation like CRC32 or Adler32 and uses Java8 we can directly use a ByteBuffer to do the checksum work. This way we can eliminate memory copies.

Modifications:

Detect if ByteBuffer can be used for checksum work and if so reduce memory copies.

Result:

Less memory copies when using JDK8"
fa84e86f78206a4ef035c1e58c9ea2d13d3a1b05,"Lz4FrameEncoder should prefer direct buffers for its output.

Motivation:

We should prefer direct buffers for the output of Lz4FrameEncoder as this is what is needed for writing to the socket.

Modification:

Use direct buffers for the output

Result:

Less memory copies needed."
9151739577b9270ee8ae50cbda705942c927e8ff,"Remove unnessary memory copy when doing Bzip2 encoding

Motivation:

We did an unessary memory copy when doing bzip2 encoding.

Modifications:

Remove memory copy and just use a ByteProcessor.

Result:

Less memory copies and so faster."
87551fc751fb1086a176545113b50fc1564f86d6,"Remove memory copy when checksum non heap backed ByteBuf implementations using Snappy

Motivation:

We should try to minimize memory copies whenever possible.

Modifications:

- Refactor ByteBufChecksum to work with heap and direct ByteBuf always
- Remove memory copy in Snappy by let Crc32c extend ByteBufChecksum

Result:

Less memory copies when using Snappy"
2ce1d29d4deb30ca60dc94e0db25047ea2a639d8,"Elliminated some buggy behavior when using a KeyManagerFactory with OpenSslServerContext.

Motivation:

PR #5493 added support for KeyManagerFactories when using the OpenSsl context. This commit corrects a bug causing a NullPointerException that occurs when using a KeyManagerFactory without a certificate chain and private key.

Modifications:

Removes assertNotNull() assertions which were causing a certificate chain and private key to be required even when using a KeyManagerFactory. Also removed a redundant call to buildKeyManagerFactory() which was also causing a exception when a KeyManagerFactory is provided but a certificate chain and private key is not.

Result:

A KeyManagerFactory can now be used in the OpenSslServerContext without an independent certificate chain and private key."
3ebbd9682006826fd9128b2e30efecd53c109653,"Remove memory copies when doing CRC32 processing in JdkZlibDecoder

Motivation:

We not need to do any memory copies when doing CRC32 processing.

Modifications:

Use ByteBufChecksum to eliminate memory copies.

Result:

Less memory copies."
94d7557dead5e7780769d44bbb4aa7530149ca34,"Ensure WeakOrderQueue can be collected fast enough

Motivation:

Commit afafadd3d7caf1e4b346da049baab0afeae0a4bc introduced a change which stored the Stack in the WeakOrderQueue as field. This unfortunally had the effect that it was not removed from the WeakHashMap anymore as the Stack also is used as key.

Modifications:

Do not store a reference to the Stack in WeakOrderQueue.

Result:

WeakOrderQueue can be collected correctly again."
7db3e01498ded8de43ed18b9fe2f14c11ac2d846,"Ensure uncompressed ByteBuf is released when an exception happens during decoding.

Motivation:

We need to ensure the uncompressed ByteBuf is released if an exception happens while calling decode(...). If we miss to do so we leak buffers.

Modifications:

Correctly release buffer on exception.

Result:

No more memory leak."
9c0d1a99bce9dd9507387fdf4354af297dc0b4e9,"Ensure attributes and contained object can be collected as fast as possible.

Motivation:

Due an implementation flaw in DefaultAttributeMap it was possible that an attribute and its stored value/key could not be collected until the DefaultAttributeMap could be collected. This can lead to unexpected memory usage and strong reachability of objects that should be collected.

Modifications:

Use an special empty DefaultAttribute as head of the each bucket which will not store any key / value. With this change everything can be collected as expected as we not use any DefaultAttribute created by the user as head of a bucket.

Result:

DefaultAttributeMap does not store user data and thus the lifetime of this user data is not tied to the lifetime of the DefaultAttributeMap."
f25f1f255d1ab49d21d27c6d44f5c24763fd5979,"No need to do a memory copy to verify snappy identifier

Motivation:

We are currently doing a memory copy to verify the snapy version. This is not needed.

Modifications:

Remove memory copy and just compare byte per byte.

Result:

Less memory copies and allocations"
8d4cfd90025cb54cdba4037f21e9b723e1e098ac,"Allow ndots=0 in DnsNameResolver and search domains - fixes #5570

Motivation:

The ndots = 0 is a valid value for ndots, it means that when using a non dotted name, the resolution should first try using a search and if it fails then use subdomains. Currently it is not allowed. Docker compose uses this when wiring up containers as names have usually no dots inside.

Modification:

Modify DnsNameResolver to accept ndots = 0 and handle the case in the resolution procedure. In this case a direct search is done and then a fallback on the search path is performed.

Result:

The ndots = 0 case is implemented."
fe4af7e32c2b49665bf4f0534872135501929bd6,"Ensure shared capacity is updated correctly when WeakOrderQueue is collected.

Motivation:

We use a shared capacity per Stack for all its WeakOrderQueue elements. These relations are stored in a WeakHashMap to allow dropping these if memory pressure arise. The problem is that we not ""reclaim"" previous reserved space when this happens. This can lead to a Stack which has not shared capacity left which then will lead to an AssertError when we try to allocate a new WeakOderQueue.

Modifications:

- Ensure we never throw an AssertError if we not have enough space left for a new WeakOrderQueue
- Ensure we reclaim space when WeakOrderQueue is collected.

Result:

No more AssertError possible when new WeakOrderQueue is created and also correctly reclaim space that was reserved from the shared capacity."
d315f1b3ba844f510423aeac30afb1e647a9949e,"[#5551] Fix sporadic GlobalEventExecutorTest.testAutomaticStartStop test failure

Motivation:

We saw some sporadic test failures for GlobalEventExecutorTest.testAutomaticStartStop test. This is caused parallel execution of tests in combination with assert checks that will be affected.

Modifications:

Remove fragile assert checks.

Result:

No more sporadic test failures"
01523e78358830d4c22ca7c866df4691c8331bd8,"Reduce conditionals in AbstractReferenceCounted

Motivation:
AbstractReferenceCounted as independent conditional statements to check the bounds of the retain IllegalReferenceCountException condition. One of the exceptions also uses the incorrect increment.

Modifications:
- Combined independent conditional checks into 1 where possible
- Correct IllegalReferenceCountException with incorrect increment
- Remove the subtract to check for overflow and re-use the addition and check for overflow to remove 1 arithmetic operation (see http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.2)

Result:
AbstractReferenceCounted has less independent branch statements and more correct IllegalReferenceCountException. Compilation size of AbstractReferenceCounted.retain() is reduced from 58 bytes to 47 bytes."
cebf255951a257068bbcab4781d4c6085e3289bd,"FlushConsolidationHandler remove conditional

Motivation:
FlushConsolidationHandler#flushIfNeeded has a conditional which is fixed based upon code path. This conditional can be removed and instead just manually set in each fixed code path.

Modifications:
- Remove boolean parameter on FlushConsolidationHandler#flushIfNeeded and set readInprogess to false manually when necessary

Result:
Less conditionals in FlushConsolidationHandler"
dc6c6d956a9409e4ca13ed0586af80b3e2753e14,"[#5541] Ensure failing a Promise in SimpleChannelPool will not result in stack overflow.

Motivation:

We used Promise.setFailure(...) when fail a Promise in SimpleChannelPool. As this happens in multiple levels this can result in stackoverflow as setFailure(...) may throw an IllegalStateException which then again is propergated.

Modifications:

Use tryFailure(...)

Result:

No more possibility to cause a stack overflow when failing the promise."
445a5472651cd6257af43adccdc1b002cb5f8a94,"Set Recycler DEFAULT_INITIAL_MAX_CAPACITY to a more sane value

Motivation:

We used a very high number for DEFAULT_INITIAL_MAX_CAPACITY (over 200k) which is not very relastic and my lead to very surprising memory usage if allocations happen in bursts.

Modifications:

Use a more sane default value of 32k

Result:

Less possible memory usage by default"
4638df20628a8987c8709f0f8e5f3679a914ce1a,"[#5566] Ensure using a ChannelInitializer via ServerBootstrap.handler(...) produce correct ordering.

Motivation:

When a ChannelInitializer is used via ServerBootstrap.handler(...) the users handlers may be added after the internal ServerBootstrapAcceptor. This should not happen.

Modifications:

Delay the adding of the ServerBootstrapAcceptor until the initChannel(....) method returns.

Result:

Correct order of handlers in the ServerChannels ChannelPipeline."
b97a36a10f738d946cb8ff920c8e1177db40c74b,"Add test to verify that its possible to add another ChannelInitializer in the initChannel(...) method.

Motivation:

I received a report the its not possible to add another ChannelInitialiter in the initChannel(...) method, so we should add a test case for it.

Modifications:

Added testcase.

Result:

Validate that all works as expected."
835f901d5f30fb125672cfd8ae32061e55c5b58f,"Fix #5590 QueryStringDecoder#path should decode the path info

Motivation:

Currently, QueryStringDecoder#path simply returns the path info as is, without decoding it as the Javadoc states.

Modifications:

* Make QueryStringDecoder#path decode the path info.
* Add tests to QueryStringDecoderTest.

Result:

QueryStringDecoder#path now decodes the path info as expected."
5f4f295600e49071fb8da53cfd161935bbb5a609,"Correctly return a retained slice if called SwappedByteBuf.retainedSlice(...)

Motivation:

SwappedByteBuf.retainedSlice(...) did not return a retained buffer.

Modifications:

Correctly delegate to retainedSlice(..) calls.

Result:

Correctly return retained slice."
9466b32d05ecf63b7e3a16e8e432ca5def21dc1e,[maven-release-plugin] prepare release netty-4.1.4.Final
cb7cf4491c59c4e3b44a54c18aadb2dcbad1d69c,[maven-release-plugin] prepare for next development iteration
7f8b5f8efd1b49665b89485eb49e11e6ad50c139,"[#4351] Add warnings for Attribute.remove() and Attribute.getAndRemove()

Motivation:

Using Attribute.remove() and Attribute.getAndRemove() in a multi-threaded enviroment has its drawbacks. Make sure we document these.

Modifications:

Add javadocs and mark Attribute.remove() and Attribute.getAndRemove() as @Deprecated.

Result:

Hopefully less suprising behaviour."
d92c5f5f5b93570c4f80b7ec9e6510e261f71b25,"Introduce allocation / pooling ratio in Recycler

Motivation:

At the moment the Recyler is very sensitive to allocation bursts which means that if there is a need for X objects for only one time these will most likely end up in the Recycler and sit there forever as the normal workload only need a subset of this number.

Modifications:

Add a ratio which sets how many objects should be pooled for each new allocation. This allows to slowly increase the number of objects in the Recycler while not be to sensitive for bursts.

Result:

Less unused objects in the Recycler if allocation rate sometimes bursts."
82b617dfe9d28b6361006e6e9943fc83248aa7dd,"retainSlice() unwrap ByteBuf

Motivation:
retainSlice() currently does not unwrap the ByteBuf when creating the ByteBuf wrapper. This effectivley forms a linked list of ByteBuf when it is only necessary to maintain a reference to the unwrapped ByteBuf.

Modifications:
- retainSlice() and retainDuplicate() variants should only maintain a reference to the unwrapped ByteBuf
- create new unit tests which generally verify the retainSlice() behavior
- Remove unecessary generic arguments from AbstractPooledDerivedByteBuf
- Remove unecessary int length member variable from the unpooled sliced ByteBuf implementation
- Rename the unpooled sliced/derived ByteBuf to include Unpooled in their name to be more consistent with the Pooled variants

Result:
Fixes https://github.com/netty/netty/issues/5582"
f585806a746cf78c4d07b9efd1ba45e761215384,"[#5598] Ensure SslHandler not log false-positives when try to close the channel due timeout.

Motivation:

When we try to close the Channel due a timeout we need to ensure we not log if the notification of the promise fails as it may be completed in the meantime.

Modifications:

Add another constructor to ChannelPromiseNotifier and PromiseNotifier which allows to log on notification failure.

Result:

No more miss-leading logs."
e85d43739819e6408c3a4a4e2f9e71bcf6905a2e,"[#5597] Not try to double release empty buffer in Unpooled.wrappedBuffer(...)

Motivation:

When Unpooled.wrappedBuffer(...) is called with an array of ByteBuf with length >= 2 and the first ByteBuf is not readable it will result in double releasing of these empty buffers when release() is called on the returned buffer.

Modifications:

- Ensure we only wrap readable buffers.
- Add unit test

Result:

No double release of buffers."
a4d8f930af1f17a6c48a9abd94f49e5fd719fc31,"small performance fixes : unnecessary unboxing operations removed

Motivation :

Unboxing operations allocate unnecessary objects when it could be avoided.

Modifications:
Replaced Float.valueOf with Number.parseFloat where possible.

Result:

Less unnecessary objects allocations."
1975fcefe49896e6ce11df16a48b0bad7a074668,"StringUtil cleanup. NewLine char initializing simplified and code in static section simplified.

Motivation:

NewLine initializing is complex, with unnecessary allocations and non-standard.
Static section is overloaded with StringBuilders for simple ""s"" + ""s"" concatenation pattern that compiler optimizes perfectly.

Modifications:

NewLine initializing replaced with standard System.getProperty(""line.separator"").
Removed StringBuilders in static section.

Result:

Less complex code."
ba80fbbe05489227d64dcbd4f5e91bef68072c37,"UnknownHostException mentions hostname with search domain added

Motivation:

When a hostname cannot be resolved, the message in the UnknownHostException mentions the hostname with the last attempted search domain appended, which is kind of confusing. I would prefer to see the original hostname supplied to the method in the exception.

Modifications:

Store the pristine hostname in the resolver context and use it to create the exception message instead of the hostname with search domain.
Add unit test to check that the exception does not mention the search domain.

Result:

The exception mentions the unmodified hostname in the message."
b2f1ef57c8ad0fd9f4cc2b42f5518487d6771b98,"Fix RejectedExecutionException when using DnsAddressResolverGroup

Motivation:

AddressResolverGroup adds a listener to the termination future of an
EventExecutor when a new AddressResolver is created. The listener calls
AddressResolver.close() when the EventExecutor is terminated to give the
AddressResolver a chance to release its resources.

When using DnsAddressResolverGroup, the AddressResolver.close() will
eventually trigger DnsNameResolver.close(), which closes its underlying
DatagramChannel.

DatagramChannel.close() (or any Channel.close()) will travel through
pipeline and trigger EventExecutor.execute() because
DnsNameResolver.close() has been invoked from a non-I/O thread.
(NB: A terminationFuture is always notified from the GlobalEventExecutor
thread.)

However, because we are doing this in the listener of the termination
future of the terminated EventLoop we are trying to execute a task upon,
the attempt to close the channel fails due to RejectedExecutionException.

Modifications:

- Do not call Channel.close() in DnsNameResolver.close() if the Channel
  has been closed by EventLoop already

Result:

No more RejectedExecutionException when shutting down an event loop."
6bd810210dcd12344325331361758723479e1ea1,"Servers should not send duplicate intermediate certificates.

Motivation:
Servers sometimes send duplicate intermediate certificates.

Modifications:
OpenSslKeyMaterialManager.setKeyMaterial() dedups aliases before calling SSL.setCertificateChainBio().

Result:
Servers no longer send duplicate itermediate certificates."
a80ea46b8e6d3b225547ae138a357101b0381268,Removed custom split method as it is not effective anymore.
82b22d6f11e016b660b888645f1134ef608129ab,"findNextPositivePowerOfTwo out of bounds

Motivation:
Some usages of findNextPositivePowerOfTwo assume that bounds checking is taken care of by this method. However bounds checking is not taken care of by findNextPositivePowerOfTwo and instead assert statements are used to imply the caller has checked the bounds. This can lead to unexpected non power of 2 return values if the caller is not careful and thus invalidate any logic which depends upon a power of 2.

Modifications:
- Add a safeFindNextPositivePowerOfTwo method which will do runtime bounds checks and always return a power of 2

Result:
Fixes https://github.com/netty/netty/issues/5601"
b427a8c8bdb453b45d9f3e39f3fdb15927356e42,"Cleanup : outdated code removed and unnecessary static section and variables

Motivation:

Old code doesn't needed anymore due to logger factory initialization.

Modifications :

Removed static section and useless static variables;
Logging concatenations replaced with placeholders.

Result:

Cleaner, simpler code doing the same"
f769bb3376782fcaee8c9b168f12edd4ea8ce98e,Cleanup : removed unused empty arrays and simplified initialization
26aa34853a8974d212e12b98e708790606bea5fa,"Ensure correct ordering if a ChannelInitializer adds another ChannelInitializer

Motivation:

At the moment we call initChannel(...) in the channelRegistered(...) method which has the effect that if another ChannelInitializer is added within the initChannel(...) method the ordering of the added handlers is not correct and surprising. This is as the whole initChannel(...) method block is executed before the initChannel(...) block of the added ChannelInitializer is handled.

Modifications:

Call initChannel(...) from within handlerAdded(...) if the Channel is registered already. This is true in all cases for our DefaultChannelPipeline implementation. This way the ordering is always as expected. We still keep the old behaviour as well to not break code for other ChannelPipeline implementations (if someone ever wrote one).

Result:

Correct and expected ordering of ChannelHandlers."
a06afe8b7745a4e9b49ea86ae4650117cdc01981,"Improvement: simplified AbstractConstant compareTo.

Motivation:

AbstractConstant.compareTo seems complex and hard to understand. Also it allocates unnecessary 1 byte in direct buffer and holds unnecessary pointer to this byte butter.

Modifications:

uniquifier (id) variable now initialized during Constant creation and thus no need in volatile and no need in uniquifier() method as it could be easily replaced with AtomicLong.

Result:

Every Constant instance now consumes less bytes for pointer, don't consume anything in direct buffer."
3bc97962f8a52289ba310e344e0b678145abb5fa,removed unnecessary static holders
0b086a9625cd2e8219711e04579466a43d4a4e99,"Do not log on explicit no unsafe

Motivation:

When Netty components are initialized, Netty attempts to determine if it
has access to unsafe. If Netty is not able to access unsafe (because of
security permissions, or because the JVM was started with an explicit
flag to tell Netty to not look for unsafe), Netty logs an info-level
message that looks like a warning:

Your platform does not provide complete low-level API for accessing
direct buffers reliably. Unless explicitly requested, heap buffer will
always be preferred to avoid potential system unstability.

This log message can appear in applications that depend on Netty for
networking, and this log message can be scary to end-users of such
platforms. This log message should not be emitted if the application was
started with an explicit flag telling Netty to not look for unsafe.

Modifications:

This commit refactors the unsafe detection logic to expose whether or
not the JVM was started with a flag telling Netty to not look for
unsafe. With this exposed information, the log message on unsafe being
unavailable can be modified to not be emitted when Netty is explicitly
told to not look for unsafe.

Result:

No log message is produced when unsafe is unavailable because Netty was
told to not look for it."
c13908adb5a90869338dece42b893e373acc364d,"deprecated old loggers

Motivation:

Commons logger is dead and not updated for more than 2 years. #5615.

Modifications:

Added @Deprecated annotation to CommonsLoggerFactory and CommonsLogger.

Result:

Commons logger now deprecated."
d3dc9c9e74fd0b82e43443683a5440d39b3a8906,"Allow to limit the maximum number of WeakOrderQueue instances per Thread.

Motivation:

To better restrict resource usage we should limit the number of WeakOrderQueue instances per Thread. Once this limit is reached object that are recycled from a different Thread then the allocation Thread are dropped on the floor.

Modifications:

Add new system property io.netty.recycler.maxDelayedQueuesPerThread and constructor that allows to limit the max number of WeakOrderQueue instances per Thread for Recycler instance. The default is 2 * cores (the same as the default number of EventLoop instances per EventLoopGroup).

Result:

Better way to restrict resource / memory usage per Recycler instance."
fc14ca31cb36715690bdf785d6713ae2b0919159,"Add NonStickyEventExecutorGroup

Motivation:

We offer DefaultEventExecutorGroup as an EventExecutorGroup which return OrderedEventExecutor and so provide strict ordering of event execution. One limitations of this implementation is that each contained DefaultEventExecutor will always be tied to a single thread, which can lead to a very unbalanced execution as one thread may be super busy while others are idling.

Modifications:

- Add NonStickyEventExecutorGroup which can be used to wrap another EventExecutorGroup (like UnorderedThreadPoolEventExecutor) and expose ordering while not be sticky with the thread that is used for a given EventExecutor. This basically means that Threads may change between execution of tasks for an EventExecutor but ordering is still guaranteed.

Result:

Better utalization of threads in some use-cases."
c6a13e28b93b7b4d1f99f556cc894765a4c8e2f1,"Improvement : constant pool now less concurrent

Current constant pool holds all data within HashMap and all access to this HashMap is done via synchronized blocks. Thus CuncurrentHashMap will be here more efficient as it designed for higher throughput and will use less locks. Also valueOf method was not very efficient as it performed get operation 2 times.

Modifications :

HashMap -> PlatformDependent.newConcurrentHashMap().
ValueOf is more efficient now, threadsafe and uses less locks. Downside is that final T tempConstant = newConstant(nextId(), name); could be called more than 1 time during high contention.

Result :

Less contention, cleaner code."
5513514d083c37bacc4fcd312d70ae9505704fab,"Take readerIndex into account when write to BIO.

Motivation:

We should take the readerIndex into account whe write into the BIO. Its currently not a problem as we slice before and so the readerIndex is always 0 but we should better not depend on this as this will break easily if we ever refactor the code and not slice anymore.

Modifications:

Take readerIndex into acount.

Result:

More safe and correct use."
e5b45f120ade01ad08740c93604ebe0dfc1c88b8,"Allow to explicit disable usage of KeyManagerFactory when using OpenSsl

Motivation:

Sometimes it may be useful to explicit disable the usage of the KeyManagerFactory when using OpenSsl.

Modifications:

Add io.netty.handler.ssl.openssl.useKeyManagerFactory which can be used to explicit disable KeyManagerFactory usage.

Result:

More flexible usage."
76a3ea699ddc50f7aa9348a71b36578cda85a65c,"[#5629] Ensure direct ByteBuffer are wrapped in as direct ByteBuf.

Motivation:

We need to check if a ByteBuffer is direct via isDirect() to detect if its direct as hasArray() may also return true for a direct ByteBuffer.

See also:
https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html#allocateDirect-int-

Modifications:

Add isDirect() check.

Result:

Correct wrap a direct ByteBuffer in all cases."
aa6e6ae307b3d6d98b61cc8f3be6649e48131cab,"[#4241] Ensure NioEventLoopGroup.shutdownGracefully(...) with no quiet period shutdown as fast as expected.

Motivation:

If the user uses 0 as quiet period we should shutdown without any delay if possible.

Modifications:

Ensure we not introduce extra delay when a shutdown quit period of 0 is used.

Result:

EventLoop shutdown as fast as expected."
3fa8f31055bc16ebe23969ea17f9cc13908a624f,"Reduce conditionals in AbstractReferenceCountedByteBuf

Motivation:
AbstractReferenceCountedByteBuf as independent conditional statements to check the bounds of the retain IllegalReferenceCountException condition. One of the exceptions also uses the incorrect increment. The same fix was done for AbstractReferenceCounted as 01523e78358830d4c22ca7c866df4691c8331bd8.

Modifications:
- Combined independent conditional checks into 1 where possible
- Correct IllegalReferenceCountException with incorrect increment
- Remove the subtract to check for overflow and re-use the addition and check for overflow to remove 1 arithmetic operation (see http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.18.2)

Result:
AbstractReferenceCountedByteBuf has less independent branch statements and more correct IllegalReferenceCountException. Compilation size of AbstractReferenceCountedByteBuf.retain() is reduced."
7d774584c8fbf6652e1efbaf80afd64d6b82f324,"OpenSslEngine with no finalizer

Motivation:
OpenSslEngine and OpenSslContext currently rely on finalizers to ensure that native resources are cleaned up. Finalizers require the GC to do extra work, and this extra work can be avoided if the user instead takes responsibility of releasing the native resources.

Modifications:
- Make a base class for OpenSslENgine and OpenSslContext which does not have a finalizer but instead implements ReferenceCounted. If this engine is inserted into the pipeline it will be released by the SslHandler
- Add a new SslProvider which can be used to enable this new feature

Result:
Users can opt-in to a finalizer free OpenSslEngine and OpenSslContext.
Fixes https://github.com/netty/netty/issues/4958"
d44017189eb73d8b1bdc45da1fca84cd05cc228b,"Remove extra conditional check in retain

Motivation:

We not need to do an extra conditional check in retain(...) as we can just check for overflow after we did the increment.

Modifications:

- Remove extra conditional check
- Add test code.

Result:

One conditional check less."
30a293c74baec21c1f5688ba0a8e8cb34bf00869,"[#4204] Broken support of SCTP_INIT_MAXSTREAMS in *SctpServerChannel

Motivation:

The SCTP_INIT_MAXSTREAMS property is ignored on NioSctpServerChannel / OioSctpServerChannel.

Modifications:

- Correctly use the netty ChannelOption
- Ensure getOption(...) works
- Add testcase.

Result:

SCTP_INIT_MAXSTREAMS works.

Conflicts:
	transport-sctp/src/main/java/io/netty/channel/sctp/DefaultSctpServerChannelConfig.java"
32629078a2a5381f9dc8310f4a367a086aa7ceed,"Mark setting of sun.nio.ch.bugLevel as privileged

Motivation:

Writing to a system property requires permissions. Yet the code for
setting sun.nio.ch.bugLevel is not marked as privileged. In a
restrictive environment (e.g., under a security policy that only grants
the requisite permissions the Netty transport jar but not to application
code triggering the Netty initialization), writing to this system
property will not succeed even if the security policy would otherwise
permit it.

Modifications:

This commt marks the necessary code block as privileged. This enables
writing to this system property. The idea is that we are saying the
Netty code is trusted, and as long as the Netty code has been granted
the necessary permissions, then we will allow the caller access to these
resources even though the caller itself might not have the requisite
permissions.

Result:

The system property sun.nio.ch.bugLevel can be written to in a
restrictive security environment."
a6dfd08812da2fc14aa048d5742ac077be2e6b3f,"Mark initialization of selector as privileged

Motivation:

Instrumenting the NIO selector implementation requires special
permissions. Yet, the code for performing this instrumentation is
executed in a manner that would require all code leading up to the
initialization to have the requisite permissions. In a restrictive
environment (e.g., under a security policy that only grants the
requisite permissions the Netty transport jar but not to application
code triggering the Netty initialization), then instrumeting the
selector will not succeed even if the security policy would otherwise
permit it.

Modifications:

This commit marks the necessary blocks as privileged. This enables
access to the necessary resources for instrumenting the selector. The
idea is that we are saying the Netty code is trusted, and as long as the
Netty code has been granted the necessary permissions, then we will
allow the caller access to these resources even though the caller itself
might not have the requisite permissions.

Result:

The selector can be instrumented in a restrictive security environment."
54e41df65dc3700b8804aa31b07208f4a1d2b482,"Ensure people are aware recycler capacity is per thread.

Motivation:

Its not clear that the capacity is per thread.

Modifications:

Rename system property to make it more clear that the recycler capacity is per thread.

Result:

Less confusing."
e44c562932ed4310a6915b58b1d8dcb5e964c6f8,"Mark initialization of unsafe as privileged

Motiviation:

Preparing platform dependent code for using unsafe requires executing
privileged code. The privileged code for initializing unsafe is executed
in a manner that would require all code leading up to the initialization
to have the requisite permissions. Yet, in a restrictive environment
(e.g., under a security policy that only grants the requisite
permissions the Netty common jar but not to application code triggering
the Netty initialization), then initializing unsafe will not succeed
even if the security policy would otherwise permit it.

Modifications:

This commit marks the necessary blocks as privileged. This enables
access to the necessary resources for initialization unsafe. The idea is
that we are saying the Netty code is trusted, and as long as the Netty
code has been granted the necessary permissions, then we will allow the
caller access to these resources even though the caller itself might not
have the requisite permissions.

Result:

Unsafe can be initialized in a restrictive security environment."
064c0d7826f99382a0a54f6a6caea8ad7d5a52a1,"Upgrade log4j2 dependency to 2.6.2

Motivation:

The log4j2 project has released version 2.6.2, a bug fix release of
log4j2.

Modifications:

The commit upgrades the log4j2 dependency by modifying the
log4j2.version property in the parent POM to contain version 2.6.2.

Result:

The log4j2 dependency is upgraded to version 2.6.2."
9fef4ba1bf27b61c004fcecb43d446113db2d623,"Disable IPv6 address lookups when -Djava.net.preferIPv4Stack=true

Motivation:

According to the Oracle documentation:

> java.net.preferIPv4Stack (default: false)
>
> If IPv6 is available on the operating system, the underlying native
> socket will be an IPv6 socket. This allows Java applications to connect
> to, and accept connections from, both IPv4 and IPv6 hosts.
>
> If an application has a preference to only use IPv4 sockets, then this
> property can be set to true. The implication is that the application
> will not be able to communicate with IPv6 hosts.

which means, if DnsNameResolver returns an IPv6 address, a user (or
Netty) will not be able to connect to it.

Modifications:

- Move the code that retrieves java.net.prefer* properties from
  DnsNameResolver to NetUtil
- Add NetUtil.isIpV6AddressesPreferred()
- Revise the API documentation of NetUtil.isIpV*Preferred()
- Set the default resolveAddressTypes to IPv4 only when
  NetUtil.isIpv4StackPreferred() returns true

Result:

- Fixes #5657"
65dea8aeec2055432de7474dc46e001129a2498c,"Fix Assume.assumeTrue(...) checks in *UnssafeNoCleanerDirectByteBufTest

Motivation:

We used incorrect assumeTrue(...) checks.

Modifications:

Fix check.

Result:

Be able to run tests also if java.nio.DirectByteBuffer.<init>(long, int) could not be accessed."
1bcc0709436100c62cfa19ef744f486a5295de4a,"cleanup, duplicated static final fields

Motivation:

There are few duplicated byte[] CRLF fields in code.

Modifications:

Removed duplicated fields as they could be inherited from parent encoder.

Result:

Less static fields."
129aee8a920361dec1a1c3dabac62f58e25cf143,"Remove unused imports and not needed throws declarations.

Motivation:

In latest refeactoring we failed to cleanup imports and also there are some throws declarations which are not needed.

Modifications:

Cleanup imports and throws declarations

Result:

Cleaner code."
a4ad68239ef372ae097c6fd35e47f3e5c130ba13,"Http2ConnectionDecoder remove localSettings setter method

Motivation:
Http2ConnectionDecoder#localSettings(Http2Settings) is not used in codec-http2 and currently results in duplicated code.

Modifications:
- Remove Http2ConnectionDecoder#localSettings(Http2Settings)

Result:
Smaller interface and less duplicated code."
1abdbe6f6798732447df6dd3af15f6cd871d6279,"AbstractByteBuf forEach minimize byte code

Motivation:
The default limit for the maximum amount of bytes that a method will be inlined is 35 bytes. AbstractByteBuf#forEach and AbstractByteBuf#forEachDesc comprise of method calls which are more than this maximum default threshold and may prevent or delay inlining for occuring. The byte code for these methods can be reduced to allow for easier inlining. Here are the current byte code sizes:

AbstractByteBuf::forEachByte (24 bytes)
AbstractByteBuf::forEachByte(int,int,..) (14 bytes)
AbstractByteBuf::forEachByteAsc0 (71 bytes)
AbstractByteBuf::forEachByteDesc (24 bytes)
AbstractByteBuf::forEachByteDesc(int,int,.) (24 bytes)
AbstractByteBuf::forEachByteDesc0 (69 bytes)

Modifications:
- Reduce the code for each method in the AbstractByteBuf#forEach and AbstractByteBuf#forEachDesc call stack

Result:
AbstractByteBuf::forEachByte (25 bytes)
AbstractByteBuf::forEachByte(int,int,..) (25 bytes)
AbstractByteBuf::forEachByteAsc0 (29 bytes)
AbstractByteBuf::forEachByteDesc (25 bytes)
AbstractByteBuf::forEachByteDesc(int,int,..) (27 bytes)
AbstractByteBuf::forEachByteDesc0 (29 bytes)"
ef159db3203e00302c587bd0d4056ff723439c21,"Delete temporary .so file after loading

Motivation:

Our current strategy in NativeLibraryLoader is to mark the temporary .so file to be deleted on JVM exit. This has the drawback to not delete the file in the case the JVM dies or is killed.

Modification:

Just directly try to delete the file one we loaded the native library and if this fails mark the file to be removed once the JVM exits.

Result:

Less likely to have temporary files still on the system in case of JVM kills."
fef2940f328c40ebeead8e9931594028914d521e,"Update for netty-tcnative API changes

Motivation:
netty-tcnative API has changed to remove a feature that contributed to a memory leak.

Modifications:
- Update to use the modified netty-tcnative API

Result:
Netty can use the latest netty-tcnative."
cb5f71782ea202a3018f099f42841a940dce2e51,"Ensure we only call ReferenceCountUtil.safeRelease(...) in finalize() if the refCnt() > 0

Motivation:

We need to ensure we only call ReferenceCountUtil.safeRelease(...) in finalize() if the refCnt() > 0 as otherwise we will log a message about IllegalReferenceCountException.

Modification:

Check for a refCnt() > 0 before try to release

Result:

No more IllegalReferenceCountException produced when run finalize() on OpenSsl* objects that where explicit released before."
be77dfb1ca5a8df86a9798b045e35b769c7c950b,"Just cast Cleaner to Runnable in Java9+ to prevent IllegalAccessException

Motivation:

When try to call Cleaner.run() via reflection on Java9 you may see an IllegalAccessException.

Modifications:

Just cast the Cleaner to Runnable to prevent IllegalAccessException to be raised.

Result:

Free direct buffers also work on Java9+ as expected."
979d775f5f439200fa24088ab4163d82bd8c5ed0,"Remove volatile from field as its not needed.

Motivation:

We not need to mark the field as volatile and so this may confuse people.

Modifications:

Remove volatile and add comment to explain why its not needed.

Result:

More correct example."
260e9ece9035a8102387aedeed8078f3d5ff78e7,"Upgrade netty-tcnative

Motivation:

A new version of netty-tcnative was released.

Modifications:

Upgrade to new netty-tcnative.

Result:

Not depend on old version anymore."
47d55339c947badf0aa1c8786f0fbca80e270082,"[#5648] Detect if netty-tcnative is in classpath or just tcnative

Motivation:

If netty is used in a tomcat container tomcat itself may ship tcnative. Because of this we will try to use OpenSsl in netty and fail because it is different to netty-tcnative.

Modifications:

Ensure if we find tcnative it is really netty-tcnative before using it.

Result:

No more problems when using netty in a tomcat container that also has tcnative installed."
765e944d4d105863ccb8e3e745285aaea0b8105b,"HTTP/2 limit streams in all states

Motivation:
SETTINGS_MAX_CONCURRENT_STREAMS does not apply to idle streams and thus we do not apply any explicit limitations on how many idle streams can be created. This may allow a peer to consume an undesirable amount of resources.

Modifications:
- Each Endpoint should enforce a limit for streams in a any state. By default this limit will be the same as SETTINGS_MAX_CONCURRENT_STREAMS but can be overridden if necessary.

Result:
There is now a limit to how many IDLE streams can be created."
4d74bf3984a7f13ee0c2d1f8adf6266565ea8c59,"HTTP/2 MaxStreams cleanup

Motivation:
765e944d4d105863ccb8e3e745285aaea0b8105b imposed a limit on the maximum number of stream in all states. However the default limit did not allow room for streams in addition to SETTINGS_MAX_CONCURRENT_STREAMS. This can mean streams in states outside the states which SETTINGS_MAX_CONCURRENT_STREAMS applies to may not be reliably created.

Modifications:
- The default limit should be larger than SETTINGS_MAX_CONCURRENT_STREAMS

Result:
More lenient limit is applied to maxStreams by default."
c1d50669295906fd1881ff246aa3af34f932da13,"Ensure BIO is only used one time

Motivation:

Its not safe to reuse a BIO, we need to ensure we only use it once.

Modifications:

Only use the BIO once.

Result:

Correctly usage of BIO"
95ee705e17d5829c46a99a95d5cba62858d6e1d5,fix typo in javadoc
21e8d84b7961c36435714cdb16eec31ad08213bc,"HTTP/2 Simplify Headers Decode Bounds Checking

Motivation:
The HPACK decoder keeps state so that the decode method can be called multiple times with successive header fragments. This decoder also requires that a method is called to signify the decoding is complete. At this point status is returned to indicate if the max header size has been violated. Netty always accumulates the header fragments into a single buffer before attempting to HPACK decode process and so keeping state and delaying notification that bounds have been exceeded is not necessary.

Modifications:
- HPACK Decoder#decode(..) now must be called with a complete header block
- HPACK will terminate immediately if the maximum header length, or maximum number of headers is exceeded
- Reduce member variables in the HPACK Decoder class because they can now live in the decode(..) method

Result:
HPACK bounds checking is done earlier and less class state is needed."
f73c4f24ee36c671562840e941c914f79566cf97,"HTTP/2 HPACK Bounds Check Fix

Motivation:
21e8d84b7961c36435714cdb16eec31ad08213bc changed the way bounds checking was done, but however a bounds check in the case of READ_LITERAL_HEADER_NAME_LENGTH_PREFIX was using an old value. This would delay when the bounds check would actually be done and potentially allow more allocation than necessary.

Modifications:
- Use the new length (index) in the bounds check instead of an old length (nameLength) which had not yet been assigned to the new value.

Result:
More correct bounds checking."
00deb2efd560cb9b2d85ccdefbcfa5b13ab1b463,"Remove missleading javadoc

Motivation:

Its completely fine to start writing before the handshake completes when using SslHandler. The writes will be just queued.

Modifications:

Remove the missleading and incorrect javadoc.

Result:

Correct javadoc."
3a4d30df4e3aba7cdc5c8343016e7e13de3ada86,"Make SocksServer example compatible with `curl --socks5-hostname`

Motivation:

Socks5 proxy supports resolve domain at the server side. When testing
with curl, the SocksServer in example package only works for proxy
request with IP, not with domain name (`--socks5` vs
`--socks5-hostname`). As curl is widely used, it should work with
the example provided.

Modifications:

Passing address and port to the Socks5CommandResponse, so that it
works for curl.

Result:

`curl --socks5-hostname` works as expected."
b963595988d729e83cedddb180a5e24085b9e494,"Fix handling of non direct backed PemEncoded.

Motivation:

The private key and certificate that are passed into #serKeyMaterial() could be PemEncoded in which case the #toPEM() methods return the identity of the value.

That in turn will fail in the #toBIO() step because the underlying ByteBuf is not necessarily direct.

Modifications:

- Use toBIO(...) which also works with non direct PemEncoded values
- Add unit test.

Result:

Correct handling of PemEncoded."
15222c084d8153752d5d008938750fc6c9fcd962,"Never expose user.dir to the web on directory listing

Motivation:

When Netty HTTP Static File Server does directory listing, it does expose the user.dir environment variable to the user. Although it doesn't a security issue, it is a bad practice to show it, and the user does expect to see the server virtual root instead, which is the absolute path as mentioned in the RFC.

Modifications:

the sendListing method receives a third argument, which is the requested URI, and this is what should be displayed on the page instead of the filesystem path.

Result:

The directory listing pages will show the virtual path as described in the URI and not the real filesystem path.

Removed fallback method"
fa6b0e262eb26e8b2f06902963373295e0c72120,"Support Unicode filenames and spaces in directory listing

Motivation:

The HTTP Static File Server seems to ignore filenames that doesn't contains only latin characters, but these days people wish to serve files in other languages, or even include some emojis in the filename. Although these files are not displayed on the directory listing, they are accessible by HTTP requests. This fix will make such files more visible.

Modifications:

I've changed the ALLOWED_FILE_NAME pattern to disallow only files that starts with underline, minus or a dot (such as .htaccess), and hide other ""unsafe"" filenames that may be used to trigger some security issues. Other filenames, including the space character are allowed.

I've also added charset encoding to the directory listing, because the browser default MAY be configured for ISO-8859-1 instead of UTF-8.

Result:

Directory listing will work for files that contains the space character, as well as other Unicode characters."
fb3dc84e5b032323d842e07880f4b045a4fd459b,"Only run PemEncodedTest if OpenSsl.useKeyManagerFactory() returns false.

Motivation:

Commit b963595988d729e83cedddb180a5e24085b9e494 added a unit that will not work when KeyManagerFactory is used.

Modifications:

Only run the test if OpenSsl.useKeyManagerFactory() returns false.

Result:

Builds with boringssl"
8d043cc4ddf585261b86fafbee52625be9a38f04,"Do not return Access-Control-Allow-Headers on Non-Preflight Cors requests

Motivation:

The CorsHandler currently returns the Access-Control-Allow-Headers
header as on a Non-Preflight CORS request (Simple request).
As per the CORS specification the Access-Control-Allow-Headers header
should only be returned on Preflight requests. (not on simple requests).

https://www.w3.org/TR/2014/REC-cors-20140116/#access-control-allow-headers-response-header

http://www.html5rocks.com/static/images/cors_server_flowchart.png

Modifications:

Modified CorsHandler.java to not add the Access-Control-Allow-Headers
header when responding to Non-preflight CORS request.

Result:

Access-Control-Allow-Headers header will not be returned on a Simple
request (Non-preflight CORS request)."
00f74b92fa4e10e26ea8b99f2bb95681085a3dc8,"Fix the tcnative lib loading problem in OSGi

Motivation:

As the issue #5539 say, the OpenSsl.class will throw `java.lang.UnsatisfiedLinkError: org.apache.tomcat.jni.Library.version(I)I` when it is invoked. This path try to resolve the problem by modifying the native library loading logic of OpenSsl.class.

Modifications:

The OpenSsl.class loads the tcnative lib by `NativeLibraryLoader.loadFirstAvailable()`. The native library will be loaded in the bundle `netty-common`'s ClassLoader, which is diff with the native class's ClassLoader. That is the root cause of throws `UnsatisfiedLinkError` when the native method is invoked.
So, it should load the native library by the its bundle classloader firstly, then the embedded resources if failed.

Result:

First of all, the error threw by native method problem will be resolved.
Secondly, the native library should work as normal in non-OSGi env. But, this is hard. The loading logic of `Library.class` in `netty-tcnative` bundle is simple: try to load the library in PATH env. If not found, it falls back to the originally logic `NativeLibraryLoader.loadFirstAvailable()`.

Signed-off-by: XU JINCHUAN <xsir@msn.com>"
e7449b1ef361c55457ed21d44d6ed8387ec1fa45,"[#5645] Allow to create ByteBuf from existing memory address.

Motivation:

Sometimes it is useful to be able to wrap an existing memory address (a.k.a pointer) and create a ByteBuf from it. This way its easier to interopt with other libraries.

Modifications:

Add a new Unpooled.wrappedBuffer(....) method that takes a memory address.

Result:

Be able to wrap an existing memory address into a ByteBuf."
d568cfc14ae18750a2792241ddb5a72de090ad3b,"HTTP/2: Treat MAX_CONCURRENT_STREAMS exceeded as a stream error.

Motivation:

As per the HTTP/2 spec, exceeding the MAX_CONCURRENT_STREAMS should be treated as a stream error as opposed to a connection error.

""An endpoint that receives a HEADERS frame that causes its advertised concurrent stream limit to be exceeded MUST treat this as a stream error (Section 5.4.2) of type PROTOCOL_ERROR or REFUSED_STREAM."" http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2

Modifications:

Make the error a stream error.

Result:

It's a stream error."
382f8eacaf71a37db8675e9dd3a6a98c2cfb9b4e,"Correctly fail all promises SSLENGINE_CLOSED once the engine is closed

Motivation:

We should fail all promises with the correct SSLENGINE_CLOSED exception one the engine is closed. We did not fail the current promise with this exception if the ByteBuf was not readable.

Modifications:

Correctly fail promises.

Result:

More correct handling of promises if the SSLEngine is closed."
6d70f4b38a2c9117b27199cc584d9670f7c002e6,"Guard against re-entrance in PendingWriteQueue.removeAndWriteAll()

Motivation:

PendingWriteQueue should guard against re-entrant writes once removeAndWriteAll() is run.

Modifications:

Continue writing until queue is empty.

Result:

Correctly guard against re-entrance."
5fd239c29c6102185ef7833441b4c67da15f7ed2,"Ensure we not log missleading errors if the promise was already failed due errors

Motivation:

In DefaultHttp2ConnectionEncoder we fail the promise in in the FlowControlledData.error(...) method but also add it the CoalescingBufferQueue. Which can lead to have the promise failed by error(...) before it can be failed in CoalescingBufferQueue.

This can lead to confusing and missleading errors in the log like:
    2016-08-12 09:47:43,716       nettyIoExecutorGroup-1-9 [WARN ] PromiseNotifier                - Failed to mark a promise as failure because it's done already: DefaultChannelPromise@374225e0(failure: javax.net.ssl.SSLException: SSLEngine closed already)
    javax.net.ssl.SSLException: SSLEngine closed already
        at io.netty.handler.ssl.SslHandler.wrap(...)(Unknown Source) ~[netty-all-4.1.5.Final-SNAPSHOT.jar:?]

Modifications:

Ensure we only fail the queue (which will also fail the promise).

Result:

No more missleading logs."
9bc3e56647e4794178a721f2d06128a4ca868b79,"ReferenceCountedOpenSslEngineTest cleanup sequencing bug

Motivation:
ReferenceCountedOpenSslEngine depends upon the the SslContext to cleanup JNI resources. If we don't wait until the ReferenceCountedOpenSslEngine is done with cleanup before cleaning up the SslContext we may crash the JVM.

Modifications:
- Wait for the channels to close (and thus the ReferenceCountedOpenSslEngine to be cleaned up) before cleaning up the associated SslContext.

Result:
Cleanup sequencing is correct and no more JVM crash.
Fixes https://github.com/netty/netty/issues/5692"
3451b3cbb3eb0e225bda0b29ba36b87035645ef8,"Cookie name must be case sensitive

Motivation:

RFC 6265 does not state that cookie names must be case insensitive.

Modifications:

Fix io.netty.handler.codec.http.cookie.DefaultCookie#equals() method to
use case sensitive String#equals() and String#compareTo().

Result:

It is possible to parse several cookies with same names but with
different cases."
8d1e46ffd148324e8b385ec99b60c720241e5b45,"Remove reference to 5.0 release.

Motivation:

Comments stating that AUTO_CLOSE will be removed in Netty 5.0 are wrong,
as there is no Netty 5.0.

Modifications:

Removed comment.

Result:

No more references to Netty 5.0"
e4154bcb0b91acfe5cf041208fc255aff16143be,"[#5720] Static initializers can cause deadlock

Motivation:

SystemPropertyUtil requires InternalLoggerFactory requires ThreadLocalRandom requires SystemPropertyUtil. This can lead to a dead-lock.

Modifications:

Ensure ThreadLocalRandom does not require SystemPropertyUtil during initialization.

Result:

No more deadlock possible."
2d111e098050f420782005cc2735ec619d455cef,"Ensure SslHandler.close(...) will not throw exception if flush of pending messages fails

Motivation:

When SslHandler.close(...) is called (as part of Channel.close()). it will also try to flush pending messages. This may fail for various reasons, but we still should propergate the close operation

Modifications:

- Ensure flush(...) itself will not throw an Exception if we was able to at least fail one pending promise (which should always be the case).
- If flush(...) fails as part of close ensure we still close the channel and then rethrow.

Result:

No more lost close operations possible if an exception is thrown during close"
8ce7e73e78dd4d46f823cae356f0e976e7152327,"Prevent extra peformance hit by fillInStackTrace() when create a new annotated connect exception.

Motivation:

To make it easier to debug connect exceptions we create new exceptions which also contain the remote address. For this we basically created a new instance and call setStackTrace(...). When doing this we pay an extra penality because it calls fillInStackTrace() when calling the super constructor.

Modifications:

Create special sub-classes of Exceptions that override the fillInStackTrace() method and so eliminate the overhead.

Result:

Less overhead when ""annotate"" connect exceptions."
43626ac6ea2426af7cbf9a12baf31447e7408cdf,"Use NIO methods when using Java7+ in the NIO transport

Motivation:

We use often javachannel().socket().* in NIO as these methods exists in java6. The problem is that these will throw often very general Exceptions (Like SocketException) while it is more expected to throw the Exceptions listed in the nio interfaces. When possible we should use the new methods available in java7+ which throw the correct exceptions.

Modifications:

Check for java version and depending on it using the socket or the javachannel.

Result:

Throw expected Exceptions."
2c1f17faa268b9a1b8ef8f1ddaf832d1397719a3,"Throw correct NotYetConnectedException when ENOTCONN errno is set

Motivation:

We should throw a NotYetConnectedException when ENOTCONN errno is set. This is also consistent with NIO.

Modification:

Throw correct exception and add test case

Result:

More correct and consistent behavior."
5e148d56705d0770e124216fde2790f5e220ca5e,"[#5639] Ensure fireChannelActive() is also called if Channel is closed in connect promise.

Motivation:

We need to ensure we also call fireChannelActive() if the Channel is directly closed in a ChannelFutureListener that is belongs to the promise for the connect. Otherwise we will see missing active events.

Modifications:

Ensure we always call fireChannelActive() if the Channel was active.

Result:

No missing events."
ecd6e5ce6d82756475e88ae69d2bfef1082edb68,"CorsHandler to respect http connection (keep-alive) header.

Motivation:

The CorsHandler currently closes the channel when it responds to a preflight (OPTIONS)
request or in the event of a short circuit due to failed validation.

Especially in an environment where there's a proxy in front of the service this causes
unnecessary connection churn.

Modifications:

CorsHandler now uses HttpUtil to determine if the connection should be closed
after responding

Result:

Channel will stay open when the CorsHandler responds unless the client specifies otherwise
or the protocol version is HTTP/1.0"
a8b8553ad1096f4f90f2d4868644ded1aa2d9a9b,"Revert ""CorsHandler to respect http connection (keep-alive) header.""

This reverts commit ecd6e5ce6d82756475e88ae69d2bfef1082edb68."
4accd300e55b9f234ef5f460a7f4243bb19178e5,"Fix write watermarks comparison to use less than and greater than.

Motivation:

The API documentation in ChannelConfig states that a a channel is writable,
if the number of pending bytes is below the low watermark and a
channel is not writable, if the number of pending bytes exceeds the high
watermark.

Therefore, we should use < operators instead of <= as well as > instead of >=.

Using <= and >= is also problematic, if the low watermark is equal to the high watermark,
as then a channel could be both writable and unwritable with the same number of pending
bytes (depending on whether remove() or addMessage() is called first).

The use of <= and >= was introduced in PR https://github.com/netty/netty/pull/3036, but
I don't understand why, as there doesn't seem to have been any discussion around that.

Modifications:

Use < and > operators instead of <= and >=.

Result:

High and low watermarks are treated as stated in the API docs."
208893aac98ecb94ec190f1834db928e2e7908a0,"HTTP/2 Hpack Encoder Cleanup

Motivation:
The HTTP/2 HPACK Encoder class has some code which is only used for test purposes. This code can be removed to reduce complexity and member variable count.

Modifications:
- Remove test code and update unit tests
- Other minor cleanup

Result:
Test code is removed from operational code."
acb40a87c31c524e9f7fe9a06a9c1ac7ee96c2aa,"SniHandler reference count leak if pipeline replace fails

Motivation:
The SniHandler attempts to generate a new SslHandler from the selected SslContext in a and insert that SslHandler into the pipeline. However if the underlying channel has been closed or the pipeline has been modified the pipeline.replace(..) operation may fail. Creating the SslHandler may also create a SSLEngine which is of type ReferenceCounted. The SslHandler states that if it is not inserted into a pipeline that it will not take reference count ownership of the SSLEngine. Under these conditions we will leak the SSLEngine if it is reference counted.

Modifications:
- If the pipeline.replace(..) operation fails we should release the SSLEngine object.

Result:
Fixes https://github.com/netty/netty/issues/5678"
5b46cf25c1c8db7c7e4d31c4b39a68a90217e86e,"Fulfill the write promise of empty HTTP/2 DATA frames sooner

Motivation:

DefaultHttp2ConnectionEncoder.FlowControlledData.write() does not
complete the write promise of empty HTTP/2 DATA frames until either a
non-DATA frame, a non-empty DATA frame or a DATA frame with endOfStream
set. This makes the write promise of the empty DATA frame is notified
much later than it could be.

Modifications:

- Notify the write promise of the empty DATA frames immediately is the
  queue contains empty DATA frames only

Result:

The write promise of an empty DATA frame is notified sooner."
a01519e4f86690323647b5db45d9ffcb184b1a84,"[#5718] Result of ByteBufUtil.compare(ByteBuf a, ByteBuf b) is dependent on ByteOrder of supplied ByteBufs

Motivation:

Result of ByteBufUtil.compare(ByteBuf a, ByteBuf b) is dependent on ByteOrder of supplied ByteBufs which should not be the case (as stated in the javadocs).

Modifications:

Ensure we get a consistent behavior when calling ByteBufUtil.compare(ByteBuf a, ByteBuf b) and not depend on ByteOrder.

Result:

ByteBufUtil.compare(ByteBuf a, ByteBuf b) and so AbstractByteBuf.compare(...) works correctly as stated in the javadocs."
3a6157e2aa84c7f134b5610013b0e3e432eadcb9,"Unit Test for SslHandler's handlerRemoved()

Motivation

SslHandler's handlerRemoved() is supposed to release the SSLEngine (which it does) but there is no Test for it to make sure it really happens and doesn't unexpectedly change in the future.

Modifications

Add a Unit Test that makes sure that SslHandler releases the SSLEngine when the Channel gets closed.

Result

Assurance that SslHandler will not leak (ReferenceCounted) SSLEngines."
d3cb95ef005269e939622829e8daff610473ee22,"Make NIO and EPOLL transport connect errors more consistent with the JDK

Motivation:

The NIO transport used an IllegalStateException if a user tried to issue another connect(...) while the connect was still in process. For this case the JDK specified a ConnectPendingException which we should use. The same issues exists in the EPOLL transport. Beside this the EPOLL transport also does not throw the right exceptions for ENETUNREACH and EISCONN errno codes.

Modifications:

- Replace IllegalStateException with ConnectPendingException in NIO and EPOLL transport
- throw correct exceptions for ENETUNREACH and EISCONN in EPOLL transport
- Add test case

Result:

More correct error handling for connect attempts when using NIO and EPOLL transport"
1fef3872fbe12d222c356d6975a4f488017a1168,"Update CertificateRequestCallback usage to match new tcnative

Motiviation:

Previously the way how CertificateRequestCallback was working had some issues which could cause memory leaks and segfaults. Due of this tcnative code was updated to change the signature of the method provided by the interface.

Modifications:

Update CertificateRequestCallback implementations to match new interface signature.

Result:

No more segfaults / memory leaks when using boringssl or openssl >= 1.1.0"
d0dc02d82670196f0183582ba4879f012174ce93,"Correctly guard against NotYetConnectedExceptions when handling RDHUP.

Motivation:

Commit 2c1f17faa268b9a1b8ef8f1ddaf832d1397719a3 introduced a regression which could cause NotYetConnectedExceptions when handling RDHUP events.

Modifications:

Correct ignore NotYetConnectedException when handling RDHUP events.

Result:

No more regression."
1208b90f57b12b081074e02cdd543992c7f1e6d9,[maven-release-plugin] prepare release netty-4.1.5.Final
f97866dbc6e7edc987de9bf7d31f563ce726833e,"Expose SniHandler's replaceHandler() so that users can implement custom behavior.

Motivation

The SniHandler is currently hiding its replaceHandler() method and everything that comes with it. The user has no easy way of getting a hold onto the SslContext for the purpose of reference counting for example. The SniHandler does have getter methods for the SslContext and hostname but they're not very practical or useful. For one the SniHandler will remove itself from the pipeline and we'd have to track a reference of it externally and as we saw in #5745 it'll possibly leave its internal ""selection"" object with the ""EMPTY_SELECTION"" value (i.e. we've just lost track of the SslContext).

Modifications

Expose replaceHandler() and allow the user to override it and get a hold onto the hostname, SslContext and SslHandler that will replace the SniHandler.

Result

It's possible to get a hold onto the SslContext, the hostname and the SslHandler that is about to replace the SniHandler. Users can add additional behavior."
f6c16f4897ce395011c70c0351a0ddc3d6c21337,"Attempt at improving docs in HttpObjectAggregator

Motivation:

Documentation was added in #2401 to aid developers in understanding
how HttpObjectAggregator works and that it needs an encoder before it.

In #2471 it was pointed out that the documentation added can actually
add to the confusion and that it might have a typo.

This is an attempt at clearing up that confusion.  Feedback is welcome.

Modifications:

- Adjust class level javadoc for HttpObjectAggregator
  * Remove reference to HttpRequestEncoder
  * Point out when HttpResponseEncoder is needed
  * Point out that either HttpRequestDecoder or HttpResponseDecoder is needed
  * Make clear everything must be added before HttpObjectAggregator
  * Mention HttpServerCodec

Result:

Avoid confusion about dependencies for HttpObjectAggregator on the pipeline."
4477eb2f48199a4940dc82e48dd8d4b7f795b2ff,"Fix native library loading in Windows

Motivation:

Windows refuses to load a .DLL file when it's opened by other process.
Recent modification in NativeLibraryLoader causes NativeLibraryLoader to
attempt to load a .DLL before closing its OutputStream. As a result,
loading a .DLL file in Windows always fails.

Modifications:

Close the OutputStream explicitly before loading a shared library.

Result:

Native library loading in Windows works again."
00c0664ef8518cb9ba8ee8796d5bfa7f73355af4,"Avoid inaccessible object exception replacing set

Motivation:

When attempting to set the selectedKeys fields on the selector
implementation, JDK 9 can throw an inaccessible object exception.

Modications:

Catch and log this exception as an possible course of action if the
sun.nio.ch package is not exported from java.base.

Result:

The selector replacement will fail gracefully as an expected course of
action if the sun.nio.ch package is not exported from java.base."
3051df8961273fb39fe282a46c7f76124b39112f,"Ensure accessing System property is done via AccessController.

Motivation:

When a SecurityManager is in place it may dissallow accessing the property which will lead to not be able to load the application.

Modifications:

Use AccessController.doPrivileged(...)

Result:

No more problems with SecurityManager."
eb450d8b2f477b74f71c48d96a5b7b55fa0c3af4,"Correct throw ClosedChannelException when attempt to call shutdown*(...) on closed EpollSocketChannel.

Motivition:

NIO throws ClosedChannelException when a user tries to call shutdown*() on a closed Channel. We should do the same for the EPOLL transport

Modification:

Throw ClosedChannelException when a user tries to call shutdown*() on a closed channel.

Result:

Consistent behavior."
6fd8bb8c630d3e43e35fd34f6277a1a4dd0daca9,"[#5763] DefaultEventLoopGroup doesn't expose ctor variant that accepts custom Executor

Motivation:

The DefaultEventLoopGroup class extends MultithreadEventExecutorGroup but doesn't expose the ctor variants that accept a custom Executor like NioEventLoopGroup and EpollEventLoopGroup do.

Modifications:

Add missing constructor.

Result:

Be able to use custom Executor with DefaultEventLoopGroup."
463b5cf21b6fe6e0e8b08615f3e47beb31f39025,"[#5773] AbstractByteBuf.forEachByteDesc(ByteProcessor) starts from wrong index

Motivation:

We introduced a regression in 1abdbe6f6798732447df6dd3af15f6cd871d6279 which let the iteration start from the wrong index.

Modifications:

Fix start index and add tests.

Result:

Fix regression."
8cf90f05127e3eda77a8749342709ab5776f7129,"[#5760] Do not change writerIndex when decode DnsPtrRecord

Motivation:

We need to not change the original writerIndex when decode a DnsPtrRecord as otherwise we will not be able to decode other records that follow it.

Modifications:

Slice the data out and so not increase the writerIndex.

Result:

No more problems when decoding."
515f8964b42dc34bd42cf0708a11147e2279076f,"HTTP/2: Fix some errors reported by h2spec.

Motivation:

h2spec [1] reported 32 issues [2] with Netty's HTTP/2 implementation.

Modifications:

Fixed 11 of those issues. Mostly wrong error codes or added missing validation
code in the frame reader.

Result:

11 fewer errors. h2spec now reports: 70 tests, 48 passed, 1 skipped, 21 failed

[1] https://github.com/summerwind/h2spec
[2] https://github.com/netty/netty/issues/5761"
31cbb85073d31005af7c5f657668e32ad7b17d93,"Cleanup and simplify SslHandler

Motivation:

SslHandler can be cleaned up a bit in terms of naming and duplicated code.

Modifications:

- Fix naming of arguments
- Not schedule timeout event if not really needed
- share some code and simplify

Result:

Cleaner code."
54b1a100f48fd06c902ba84d1e10f3f6ec6b66c9,[maven-release-plugin] prepare for next development iteration
30fe2e868fcc99d24046e505f9406067ba6e9d07,"Call finishConnect() before try to call read(...) / write(...) when using NIO

Motivation:

The JDK implementation of SocketChannel has an internal state that is tracked for its operations. Because of this we need to ensure we call finishConnect() before try to call read(...) / write(...) as otherwise it may produce a NotYetConnectedException.

Modifications:

First process OP_CONNECT flag.

Result:

No more possibility of NotYetConnectedException because OP_CONNECT is handled not early enough when processing interestedOps for a Channel."
3103f0551cc0d16c7dda5bad385fc7d6a34bce6b,"Share code between retain(...) and release(...) implementations.

Motivation:

We can share the code in retain() and retain(...) and also in release() and release(...).

Modifications:

Share code.

Result:

Less duplicated code."
4af685569541c46dff101b2b12cb1712da482f79,"Remove @Deprecated for primitive WriteWaterMark getters and setters

Motivation:

For use cases that demand frequent updates of the write watermarks, an
API that requires immutable WriteWaterMark objects is not ideal, as it
implies a lot of object allocation.

For example, the HTTP/2 child channel API uses write watermarks for outbound
flow control and updates the write watermarks on every DATA frame write.

Modifications:

Remote @Deprecated tag from primitive getters and setters, however the corresponding
channel options remain deprecated.

Result:

Primitive getters and setters for write watermarks are no longer marked @Deprecated."
147d427adc089a269c0f25aacedb9336cb0318bd,"[#5712] Allow clients to override userDefinedWritabilityIndex from AbstractTrafficShapingHandler

Motivation:

AbstractTrafficShapingHandler has a package-private method called ""userDefinedWritabilityIndex()"" which a user may need to override if two sub-classes wants to be used in the ChannelPipeline.

Modifications:

Mark method protected.

Result:

Easier to extend AbstractTrafficShapingHandler."
af632278d2b966fcb45327a79345b567b56ab02c,"Ensure we not sent duplicate certificates when using OpenSslEngine

Motivation:

We need to ensure we not set duplicated certificates when using OpenSslEngine.

Modifications:

- Skip first cert in chain when set the chain itself and so not send duplicated certificates
- Add interopt unit tests to ensure no duplicates are send.

Result:

No more duplicates."
bd7806dd4f1cee226fc4330da9fa55510024f516,"Ensure SSLEngineTest works on different jvm versions.

Motivation:

af632278d2b966fcb45327a79345b567b56ab02c introduced a test which only worked on some jvm versions and specific os'es.

Modifications:

Fix test to work on different java versions and os'es

Result:

No flacky test."
dfa3bbbf0035e6eb39403194c9aabae0f9c2c1a3,"Add support for Client Subnet in DNS Queries (RFC7871)

Motivation:

RFC7871 defines an extension which allows to request responses for a given subset.

Modifications:

- Add DnsOptPseudoRrRecord which can act as base class for extensions based on EDNS(0) as defined in RFC6891
- Add DnsOptEcsRecord to support the Client Subnet in DNS Queries extension
- Add tests

Result:

Client Subnet in DNS Queries extension is now supported."
e3aca1f3d6f8ee2a2c016b65fab19728eb01bc6f,"CorsHandler to respect http connection (keep-alive) header.

Motivation:

The CorsHandler currently closes the channel when it responds to a preflight (OPTIONS)
request or in the event of a short circuit due to failed validation.

Especially in an environment where there's a proxy in front of the service this causes
unnecessary connection churn.

Modifications:

CorsHandler now uses HttpUtil to determine if the connection should be closed
after responding and to set the Connection header on the response.

Result:

Channel will stay open when the CorsHandler responds unless the client specifies otherwise
or the protocol version is HTTP/1.0"
b604a22395f64bca52d155127e2453aa3178af6c,"Expose the ChannelHandlerContext from SniHandler's select() step to the user.

Motivation

I'm looking to harden our SSL impl. a little bit and add some guards agaist certain types of abuse. One can think of invalid hostname strings in the SNI extenstion or invalid SNI handshakes altogether. This will require measuring, velocity tracking and other things.

Modifications

Adding a protected `lookup(ctx, hostname)` method that is called from SniHandler's `select(...)` method which users can override and implement custom behaviour. The default implementation will simply call the AsyncMapper.

Result

It's possible to get a hold onto the ChannelHandlerContext. Users can override that method and do something with it right there or they can delegate it to something else. SniHandler is happy as long as a `Future<SslContext>` is being returned."
8566fd10191f86487433ece7e4c3ba70383dcf08,"Add startTls parameter to SslContextBuilder

Motivation:

There is an incoherence in terms of API when one wants to use
startTls: without startTls one can use the SslContextBuilder's
method newHandler, but with startTls, the developper is forced
to call directly the SslHandler constructor.

Modifications:

Introduce startTls as a SslContextBuilder parameter as well as a
member in SslContext (and thus Jdk and OpenSsl implementations!).
Always use this information to call the SslHandler constructor.
Use false by default, in particular in deprecated constructors of
the SSL implementations.
The client Context use false by default

Results:

Fixes #5170 and more generally homogenise the API so that
everything can be done via SslContextBuilder."
6bbf32134ac8efbb40e9adf177659fd8325ab596,"Log more details if notification of promise fails in PromiseNotifier and AbstractChannelHandlerContext

Motivation:

To make it easier to debug why notification of a promise failed we should log extra info and make it consistent.

Modifications:

- Create a new PromiseNotificationUtil that has static methods that can be used to try notify a promise and log.
- Reuse this in AbstractChannelHandlerContext, ChannelOutboundBuffer and PromiseNotifier

Result:

Easier to debug why a promise could not be notified."
05fb6981662b00e99b69fe502c0492f1e1c6feba,"[#5759] Allow websocket extensions in websocketx example.

Motivation:

As we use compression in the websocketx example we need to allow extensions as ohterwise the example not works.

Modifications:

Allow extensions.

Result:

websocketx example does work."
67d3a78123fa3faa85c1a150bd4ee69425079b3d,"Reduce bytecode size of PlatformDependent0.equals.

Motivation:

PP0.equals has a bytecode size of 476. This is above the default inlining threshold of OpenJDK.

Modifications:

Slightly change the method to reduce the bytecode size by > 50% to 212 bytes.

Result:

The bytecode size is dramatically reduced, making the method a candidate for inlining.
The relevant code in our application (gRPC) that relies heavily on equals comparisons,
runs some ~10% faster. The Netty JMH benchmark shows no performance regression.

Current 4.1:

PlatformDependentBenchmark.unsafeBytesEqual      10  avgt   20     7.836 ±   0.113  ns/op
PlatformDependentBenchmark.unsafeBytesEqual      50  avgt   20    16.889 ±   4.284  ns/op
PlatformDependentBenchmark.unsafeBytesEqual     100  avgt   20    15.601 ±   0.296  ns/op
PlatformDependentBenchmark.unsafeBytesEqual    1000  avgt   20    95.885 ±   1.992  ns/op
PlatformDependentBenchmark.unsafeBytesEqual   10000  avgt   20   824.429 ±  12.792  ns/op
PlatformDependentBenchmark.unsafeBytesEqual  100000  avgt   20  8907.035 ± 177.844  ns/op

With this change:

PlatformDependentBenchmark.unsafeBytesEqual      10  avgt   20      5.616 ±   0.102  ns/op
PlatformDependentBenchmark.unsafeBytesEqual      50  avgt   20     17.896 ±   0.373  ns/op
PlatformDependentBenchmark.unsafeBytesEqual     100  avgt   20     14.952 ±   0.210  ns/op
PlatformDependentBenchmark.unsafeBytesEqual    1000  avgt   20     94.799 ±   1.604  ns/op
PlatformDependentBenchmark.unsafeBytesEqual   10000  avgt   20    834.996 ±  17.484  ns/op
PlatformDependentBenchmark.unsafeBytesEqual  100000  avgt   20   8757.421 ± 187.555  ns/op"
d2389a9339b72e12bdab20f11f745df01b190e8a,"[#5762] HTTP/2: SETTINGS_HEADER_TABLE_SIZE should be an unsigned int

Motivation:

he HTTP/2 spec demands that the max value for SETTINGS_HEADER_TABLE_SIZE should be an unsigned 32-bit integer.

Modifications:

Change the limit to unsigned 32-bit integer and add tests.

Result:

Complient to rfc."
245fb52c901a4de59d9444757fa5672a16bbbeec,"Provide extra info together with handshake complete event.

Motivation:

As described in #5734

Before this change, if the server had to do some sort of setup after a
handshake was completed based on handshake's information, the only way
available was to wait (in a separate thread) for the handshaker to be
added as an attribute to the channel. Too much hassle.

Modifications:

Handshake completed event need to be stateful now, so I've added a tiny
class holding just the HTTP upgrade request and the selected subprotocol
which is fired as an event after the handshake has finished.
I've also deprecated the old enum used as stateless event and I left the
code that fires it for backward compatibility. It should be removed in
the next mayor release.

Result:

It should be much simpler now to do initialization stuff based on
subprotocol or request headers on handshake completion. No asynchronous
waiting needed anymore."
9008e72c2b6855d024db54f283cb627bb322fec7,"Fix javadoc

Removes unmatched brace"
51629245d041718ca7d704a61474c7a365577cbb,"Call debugData.retain() before we forward the frame to the pipeline

Motivation:

We need to call debugData.retain() before we forward the frame to the pipeline as ByteToMessageDecoder will call release() on the buffer.

Modifications:

Correctly retain debugData and fix the unit test to test for it.

Result:

No more IllegalReferenceCountException when using the Http2FrameCodec."
4beb075dd3244d940c34de07a77ab15b7555f3a4,"Ensure we only call debugData.release() if we called  debugData.retain()

Motivation:

We need to ensure we only call debugData.release() if we called debugData.retain(), otherwise we my see an IllegalReferenceCountException.

Modifications:

Only call release() if we called retain().

Result:

No more IllegalReferenceCountException possible."
f375772ff0b3dc1ddc005cd8c98391907883b4e1,"Remove OSGi import of JCTools since it is shaded.

Motivation:

Since netty shaded JCTools the OSGi manifest no longer is correct. It claims to
have an optional import ""org.jctools.queues;resolution:=optional,org.jctools.qu
eues.atomic;resolution:=optional,org.jctools.util;resolution:=optional""
However since it is shaded, this is no longer true.
This was noticed when making JCTools a real bundle and netty resolved it as
optional import.

Modifications:

Modify the generated manifest by no longer analyzing org.jctools for imports.
A manual setting of sun.misc as optional was required.

Result:

Netty OSGi bundle will no longer interfere with a JCTools bundle."
4a18a143d2907812f5ab6ddeaa99063ecabc5614,"Only set lastReadTime if an read actually happened before in IdleStateHandler.

Motivation:

IdleStateHandler and ReadTimeoutHandler could mistakely not fire an event even if no channelRead(...) call happened.

Modifications:

Only set lastReadTime if a read happened before.

Result:

More correct IdleStateHandler / ReadTimeoutHandler."
eb7f751ba519cbcab47d640cd18757f09d077b55,"Log less confusing message when try to load native library

Motivation:

At the moment we log very confusing messages when trying to load a native library which kind of suggest that the whole loading process failed even if just one mechanism failed and the library could be loaded at the end.

Modifications:

Make the mesage less confusing and also log a successful load of the native library.

Result:

Less confusing logs."
e3462a79c74b9d8f775e05ca256e130a66845566,"MessageAggregator Potential Leak

Motivation:
MessageAggregator has a potential to leak if a new message is received before the existing message has completed, and if a HttpContent is received but maxContentLength has been exceeded, or the content length is too long.

Modifications:

- Make the HttpObjectAggregator more robust to leaks
- Reduce dependance on handlingOversizedMessage but instead rely on the more general check of a null currentMessage

Result:
More robust MessageAggregator with less chance of leaks"
908464f161385361c450826bb1242c06f78d931e,"make the http2 codec void promise ready.

Motivation:

Void promises need special treatment, as they don't behave like normal promises. One
cannot add a listener to a void promise for example.

Modifications:

Inspected the code for addListener() calls, and added extra logic for void promises
where necessary. Essentially, when writing a frame with a void promise, any errors
are reported via the channel pipeline's exceptionCaught event.

Result:

The HTTP/2 codec has better support for void promises."
0b5e75a614ca29810c7ef1b695c0ca962ec7b004,"IdleStateHandler volatile member variables

Motivation:
IdleStateHandler has a number of volatile member variables which are only accessed from the EventLoop thread. These do not have to be volatile. The accessibility of these member variables are not consistent between private and package private. The state variable can also use a byte instead of an int.

Modifications:
- Remove volatile from member variables
- Change access to private for member variables
- Change state from int to byte

Result:
IdleStateHandler member variables cleaned up."
da8734a6f9213cfdcf92b63fe8d014989e0ced18,"codec-http2: Mark requests as chunked in Http2ServerDowngrader

Motivation:

Http2ServerDowngrader doesn't mark chunked requests as chunked, even
though the natural conversion from http/2 requests to http/1.1 requests
is to chunked ones.

Modifications:

Mark requests that aren't already complete as chunked.

Result:

Requests will be chunked, and can later be aggregated if necessary."
c57d4bed91eff61515f25713618101cc4072ade5,"Add HttpServerKeepAliveHandler

Motivation:

As discussed in #5738, developers need to concern themselves with setting
connection: keep-alive on the response as well as whether to close a
connection or not after writing a response.  This leads to special keep-alive
handling logic in many different places.  The purpose of the HttpServerKeepAliveHandler
is to allow developers to add this handler to their pipeline and therefore
free themselves of having to worry about the details of how Keep-Alive works.

Modifications:

Added HttpServerKeepAliveHandler to the io.netty.handler.codec.http package.

Result:

Developers can start using HttpServerKeepAliveHandler in their pipeline instead
of worrying about when to close a connection for keep-alive."
2c4a7a253912458908d45dc653b52ff3a3aaab99,"[#5800] Support any FileRegion implementation when using epoll transport

Motivation:

At the moment only DefaultFileRegion is supported when using the native epoll transport.

Modification:

- Add support for any FileRegion implementation
- Add test case

Result:

Also custom FileRegion implementation are supported when using the epoll transport."
3c62a2051942190ea7ecd7df06d9ce6911132a09,"Revert ""Ensure we only call debugData.release() if we called  debugData.retain()""

This reverts commit 4beb075dd3244d940c34de07a77ab15b7555f3a4."
e3fbfe564178470f4bf52a9cf5a9944d321ecb1c,"HTTP/2 example upgrade refcnt bug

Motivation:
Http2ServerInitializer uses a SimpleChannelHandler in an attempt to ease putting an HttpObjectAggregator in the pipeline when no upgrade is attempted. However the message is double released because it is fired up the pipeline (which will be released) and also released by SimpleChannelHandler in a finally block.

Modifications:
- Retain the message if we fire it up the pipeline

Result:
HTTP/2 examples don't encounter a reference count error if no upgrade was attempted."
e94db103c96587d00429dcd68e7dcc4489fc80e8,"Ensure flowController().writePendingBytes() is triggered when writing response in example

Motivation:

We called ctx.flush() which is not correct as it will not call flowController().writePendingBytes().

Modifications:

Call flush(ChannelHandlerContext) and so also call flowController().writePendingBytes().

Result:

Correct http2 example"
4a5340eae738058263e9cc232a5c3172b9eed90a,"Fix IndexOutOfBoundsException in HelloWorldHttp2Handler

Motivation:

We need to duplicate the buffer before passing it to writeBytes(...) as it will increase the readerIndex().

Modifications:

Call duplicate().

Result:

No more IndexOutOfBoundsException when runing the multiplex example."
8d6f0a3ce4c2d61c843021b77c924087a5f6ea19,"Improve SctpMessageCompletionHandler

Motivation:

Avoid multiple search in fragments map

Modifications:

Replace usage of Map.containsKey by Map.remove

Result:

During packet process, fragment is only search once in the map instead of 3 times in the previous worst case"
9a18159bfedd1a3185a45dd860526d3afb2f15ea,"Catch+fire Exceptions thrown from SniHandler's select() method

Motivation

Give the user the ability to back out from SNI negoations.

Modifications

Put a try-catch around the select() call and re-fire any caught Exceptions.

Result

Fixes #5787"
9b6cbf8ab1b3cd651e9ad6ef19af21605f270dac,"Fix typo for max leak records system property

Motivation:
For the leak profile we attempted to increase the number of leak hints that were retained to make debugging easier, but there was a typo.

Modifications:
- maxRecord -> maxRecords

Result:
Fix typo in pom.xml so leak profile provides more context for leaks."
4145fae91909ee42be1013290d2a6873f7f14eef,"HTTP/2 HPACK Decoder VarInt Improvement

Motivation:
HTTP/2 Decoder#decodeULE128 current will tolerate more bytes than necessary when attempted to detect overflow. The usage of this method also currently requires an additional overflow conditional.

Modifications:
- Integrate the first byte into Decoder#decodeULE128 which allows us to detect overflow reliably and avoid overflow checks outside of this method.

Result:
Less conditionals and earlier overflow detection in Decoder#decodeULE128"
dd1ba2a2521dca5f25bbe34314a8d66fe462b053,"HttpObjectDecoder resetRequested not updated after reset

Motivation:
HttpObjectDecoder maintains a resetRequested flag which is used to determine if internal state should be reset when a decode occurs. However after a reset is done the resetRequested flag is not set to false. This leads to all data after this point being discarded.

Modifications:
- Set resetRequested to false when a reset is done

Result:
HttpObjectDecoder can still function after a reset."
506ac2ca71ab44ebb8db9441da954422a75fe251,"NetUtil.bytesToIpAddress bug

Motivation:
NetUtil.bytesToIpAddress does not correctly translate IPv4 address to String. Also IPv6 addresses may not follow minimization conventions when converting to a String (see rfc 5952).

Modifications:
- NetUtil.bytesToIpAddress should correctly handle negative byte values for IPv4
- NetUtil.bytesToIpAddress should leverage existing to string conversion code in NetUtil

Result:
Fixes https://github.com/netty/netty/issues/5821"
0d2baaf6aeb1ffdb9b9a9e2bb26f4c21c5e949b0,"codec-http2: Let users configure per-frame logs

Motivation:

codec-http2 is really loud!

Modification:

Allow users to select how to log in the Http2Codec.

Result:

We can run Http2Codec and log however we like."
5986c229c463f064e7b787a4547c0689d2302a03,"[#5833] Ensure direct memory is released when DirectPoolArena is collected

Motivation:

We need to ensure we release all direct memory once the DirectPoolArena is collected. Otherwise we may never reclaim the memory and so leak memory.

Modifications:

Ensure we destroy all PoolChunk memory when DirectPoolArena is collected.

Result:

Free up unreleased memory when DirectPoolArena is collected."
3a8b8c9219901bb3fe6dd8b8b87b41eec3e275fc,"Consolidate flushes even when no read in progress

Motivation:

Currently FlushConsolidationHandler only consolidates if a read loop is
active for a Channel, otherwise each writeAndFlush(...) call will still
be flushed individually. When these calls are close enough, it can be
beneficial to consolidate them even outside of a read loop.

Modifications:

When we allow a flush to ""go through"", don't perform it immediately, but
submit it on the channel's executor. Under high pressure, this gives
other writes a chance to enqueue before the task gets executed, and so
we flush multiple writes at once.

Result:

Lower CPU usage and less context switching."
6a6d422702735f6af73a55036e2e12629e8a1f2f,"Complete documentation of StreamBufferingEncoder.

Motivation:

The StreamBufferingEncoder is missing documentation of what happens
to buffered frames when it's closed.

Modifications:

Added this missing piece of documentation.

Result:

Improved documentation."
149916d052180dd2b0e0e98598f349454ea200ba,"Adding ability omit the implicit #flush() call in EmbeddedChannel#writeOutbound() and
the implicit #fireChannelReadComplete() in EmbeddedChannel#writeInbound().

Motivation

We use EmbeddedChannels to implement a ProxyChannel of some sorts that shovels
messages between a source and a destination Channel. The latter are real network
channels (such as Epoll) and they may or may not be managed in a ChannelPool. We
could fuse both ends directly together but the EmbeddedChannel provides a nice
disposable section of a ChannelPipeline that can be used to instrument the messages
that are passing through the proxy portion.

The ideal flow looks abount like this:

source#channelRead() -> proxy#writeOutbound() -> destination#write()
source#channelReadComplete() -> proxy#flushOutbound() -> destination#flush()

destination#channelRead() -> proxy#writeInbound() -> source#write()
destination#channelReadComplete() -> proxy#flushInbound() -> source#flush()

The problem is that #writeOutbound() and #writeInbound() emit surplus #flush()
and #fireChannelReadComplete() events which in turn yield to surplus #flush()
calls on both ends of the pipeline.

Modifications

Introduce a new set of write methods that reain the same sematics as the #write()
method and #flushOutbound() and #flushInbound().

Result

It's possible to implement the above ideal flow.

Fix for EmbeddedChannel#ensureOpen() and Unit Tests for it

Some PR stuff."
789c9a53df5e6a973ab096a3b024d235d30ed1e2,"Pre-increment leakCheckCnt to prevent false leak-detectation for very first time

Motivation:
ResourceLeakDetector reports leak for first call to open(obj) as its leakCheckCnt starts with value 0 and increment subsequently. with value of leakCheckCnt =0, it always returns ResourceLeak. Our application calls ResourceLeakDetector.open(obj) to validate Leak and it fails at very first call even though there is no leak in application.

Modifications:
ResourceLeakDetector.leakCheckCnt value will not be 0 while deriving leak and it will not return incorrect value of ResourceLeak.

Result:
Fix false leak report on first call on ResourceLeakDetector."
3240e9742021354dddf3d182526e350f73a4315e,"[#5862] Http2EventAdapter#onUnknownFrame(...) should throw Http2Exception

Motivation:

Http2EventAdapter implements the Http2FrameListener interface but implements the #onUnknownFrame(...) method without the interface's throws Http2Exception.

Modifications:

Add throws Http2Exception.

Result:

More correct method signature."
5bb677e7c2a37d40c7dac6bb770df5915cbda90d,"This PR fixes an issue with the PROXY protocol where the reader index of a consumed byte array was not set correctly.

Motivation:

When using the AF_UNIX PROXY protocol, the reader index was not set correctly after consuming the message bytes of the original header ByteBuf. This caused no immediate harm because after the codepath there is no consumer of the ByteBuf in the current implementation. It’s a bug nevertheless, because consumers of the ByteBuf for extensions (like TLVs, which are allowed by the PROXY protocol spec) would consume a ByteBuf that has a wrong readerIndex when using AF_UNIX instead of e.g. IPv4 (which has correct behaviour)

Modifications:

Increase the reader index of the ByteBuf after it was read

Result:

Correct and consistent behaviour of the AF_UNIX codepath"
20da5383ce50570ecda48ce84fd13d432fef83b2,"Upgrade JMH to 1.14.1

Motivation:
It'd be usually good to use the latest library version.

Modification:
Bumped JMH to the latest version as of today.

Result:
Now we use JMH version 1.14.1 for our benchmark."
cf8f6e3e2f608f3ac35b1cdf34934bd885108dd0,"[#5861] HttpUtil.getContentLength(HttpMessage, long) throws unexpected NumberFormatException

Motivation:

The Javadocs of HttpUtil.getContentLength(HttpMessage, long) and its int overload state that the provided default value is returned if the Content-Length value is not a number. NumberFormatException is thrown instead.

Modifications:

Correctly handle when the value is not a number.

Result:

API works as stated in javadocs."
15ac6c4a1f8c9283177715899c7cf334590a64be,"Clean-up unused imports

Motivation:

the build doesnt seem to enforce this, so they piled up

Modifications:

removed unused import lines

Result:

less unused imports

Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>"
1c588ce7e9573a6327f0a8a86cf1d754fd10e775,"[#5841] Add test-case for mutual auth when using certificate chain

Motivation:

Add test-case for doing mutal auth with a certificate chain that holds more then one certificate.

Modifications:

Add test case

Result:

more tests."
01af0baaf7ab2da23ffbf46b2a35cbe11fdbf494,Fix typo in UnstableApi javadocs
d1d954da3539d3bdaa0578bb27a4f7e9c174b039,"[#5866] HttpToHttp2ConnectionHandler / InboundHttp2ToHttpAdapter ignores STREAM_DEPENDENCY_ID and STREAM_WEIGHT.

Motivation:

HttpToHttp2ConnectionHandler.write(ctx, msg, promise) ignores HttpConversionUtil.ExtensionHeaderNames.STREAM_DEPENDENCY_ID header in outbound message. Beside this InboundHttp2ToHttpAdapter also not add the STREAM_DEPENDENCY_ID and STREAM_WEIGHT headers.

Modifications:

Respect STREAM_DEPENDENCY_ID and STREAM_WEIGHT

Result:

Correctly respect STREAM_DEPENDENCY_ID and STREAM_WEIGHT."
f010033590ab8b9498a9c486bc8f9c21c65fecac,"h2childchan: Ability to open outbound/local streams. Fixes #4913

Motivation:

The HTTP/2 child channel API does not allow to create local/outbound HTTP/2 streams.

Modifications:

Add a Http2StreamChannelBootstrap that allows to create outbound streams.

Result:

The HTTP/2 child channel API now supports outbound streams."
540c26bb56067523e3a76eb484205997fa6727e7,"HTTP/2 Ensure default settings are correctly enforced and interfaces clarified

Motivation:
The responsibility for retaining the settings values and enforcing the settings constraints is spread out in different areas of the code and may be initialized with different values than the default specified in the RFC. This should not be allowed by default and interfaces which are responsible for maintaining/enforcing settings state should clearly indicate the restrictions that they should only be set by the codec upon receipt of a SETTINGS ACK frame.

Modifications:
- Encoder, Decoder, and the Headers Encoder/Decoder no longer expose public constructors that allow the default settings to be changed.
- Http2HeadersDecoder#maxHeaderSize() exists to provide some bound when headers/continuation frames are being aggregated. However this is roughly the same as SETTINGS_MAX_HEADER_LIST_SIZE (besides the 32 byte octet for each header field) and can be used instead of attempting to keep the two independent values in sync.
- Encoding headers now enforces SETTINGS_MAX_HEADER_LIST_SIZE at the octect level. Previously the header encoder compared the number of header key/value pairs against SETTINGS_MAX_HEADER_LIST_SIZE instead of the number of octets (plus 32 bytes overhead).
- DefaultHttp2ConnectionDecoder#onData calls shouldIgnoreHeadersOrDataFrame but may swallow exceptions from this method. This means a STREAM_RST frame may not be sent when it should for an unknown stream and thus violate the RFC. The exception is no longer swallowed.

Result:
Default settings state is enforced and interfaces related to settings state are clarified."
0b939a96cf5f87686bfa3cf16a47a44632a9097b,Fix typo in ProtobufDecoder comment
3cf7ccbd3cabbbf8e799255b3e7f9e9e3aa87bcf,"Process OP_WRITE before OP_READ to free memory faster

Motivation:

We should better first process OP_WRITE before OP_READ as this may allow us to free memory in a faster fashion for previous queued writes.

Modifications:

Process OP_WRITE before OP_READ

Result:

Free memory faster for queued writes."
a09e56850e96577fcdb84835f194a39aded046b5,"[#5882] Ensure we even process tasks if processing of ready channels throws an Exception in event loop.

Motivation:

If an exception is thrown while processing the ready channels in the EventLoop we should still run all tasks as this may allow to recover. For example a OutOfMemoryError may be thrown and runAllTasks() will free up memory again. Beside this we should also ensure we always allow to shutdown even if an exception was thrown.

Modifications:

- Call runAllTasks() in a finally block
- Ensure shutdown is always handles.

Result:

More robust EventLoop implementations for NIO and Epoll."
e102a008b63d0063581ba242539f0a8d473cae00,"[#5893] Ensure we not close NioDatagramChannel when SocketException is received.

Motivation:

When using java.nio.DatagramChannel we should not close the channel when a SocketException was thrown as we can still use the channel.

Modifications:

Not close the Channel when SocketException is thrown

Result:

More robust and correct handling of exceptions when using NioDatagramChannel."
be8b6c6f24e21eb8704720200b84a4a9c8b0ce9f,"Correctly add STREAM_WEIGHT header in InboundHttp2ToHttpAdapter.onPushPromiseRead(...)

Motivation:

The weight header with the default value is not set but it should be (rfc7540#5.3.5: …Pushed streams initially depend on their associated stream … are assigned a default weight of 16).

Modifications:

Add STREAM_WEIGHT header.

Result:

Correctly add headers."
39997814bfa3ea70d5f63a7c9bacdf34c962d823,"[#5860] Ensure removal of SslHandler not produce IllegalReferenceCountException

Motivation:

If the user removes the SslHandler while still in the processing loop we will produce an IllegalReferenceCountException. We should stop looping when the handlerwas removed.

Modifications:

Ensure we stop looping when the handler is removed.

Result:

No more IllegalReferenceCountException."
efd118ddec47a31676bb53342ce8861124c41a18,"Support aggressive round-robin dns

Motivation:

Suppose the domain `foo.example.com` resolves to the following ip
addresses `10.0.0.1`, `10.0.0.2`, `10.0.0.3`. Round robin DNS works by
having each client probabilistically getting a different ordering of
the set of target IP’s, so connections from different clients (across
the world) would be split up across each of the addresses. Example: In
a `ChannelPool` to manage connections to `foo.example.com`, it may be
desirable for high QPS applications to spread the requests across all
available network addresses. Currently, Netty’s resolver would return
only the first address (`10.0.0.1`) to use. Let say we are making
dozens of connections. The name would be resolved to a single IP and
all of the connections would be made to `10.0.0.1`. The other two
addresses would not see any connections. (they may see it later if new
connections are made and `10.0.0.2` is the first in the list at that
time of a subsequent resolution). In these changes, I add support to
select a random one of the resolved addresses to use on each resolve
call, all while leveraging the existing caching and inflight request
detection. This way in my example, the connections would be make to
random selections of the resolved IP addresses.

Modifications:

I added another method `newAddressResolver` to
`DnsAddressResolverGroup` which can be overriden much like
`newNameResolver`. The current functionality which creates
`InetSocketAddressResolver` is still used. I added
`RoundRobinDnsAddressResolverGroup` which extends
DnsAddressResolverGroup and overrides the `newAddressResolver` method
to return a subclass of the `InetSocketAddressResolver`. This subclass
is called `RoundRobinInetSocketAddressResolver` and it contains logic
that takes a `resolve` request, does a `resolveAll` under the hood, and
returns a single element at random from the result of the `resolveAll`.

Result:

The existing functionality of `DnsAddressResolverGroup` is left
unchanged. All new functionality is in the
`RoundRobinInetSocketAddressResolver` which users will now have the
option to use."
6c8cd023bf896ac9f6ceb9674e96e320371180e0,"[#5770] Use heapbuffers by default when using LocalChannel and LocalServerChannel.

Motivation:

The local transport is used to communicate in the same JVM so we should use heap buffers.

Modifications:

Use heapbuffers by default if not requested otherwise.

Result:

No allocating of direct buffers by default when using local transport"
32a560e42ccf7c74645969bb541c90800959052e,Update AlpnAgent version
eb1dfb8f5e797e9da3268322ac74440d50d41644,"SingleThreadEventLoopTest failures

Motivation:
Some unit tests in SingleThreadEventLoopTest rely upon Thread.sleep for sequencing events between threads. This can be unreliable and result in spurious test failures if thread scheduling does not occur in a fair predictable manner.

Modifications:
- Reduce the reliance on Thread.sleep in SingleThreadEventLoopTest

Result:
Fixes https://github.com/netty/netty/issues/5851"
8ba5b5f740d0d87eebd2aedacff8bd196d6da795,"Update Default Cipher List

Motivation:
Our default cipher list has not been updated in a while. We current support some older ciphers not commonly in use and we don't support some newer ciphers which are more commonly used.

Modifications:
- Update the default list of ciphers for JDK and OpenSSL.

Result:
Default cipher list is more likely to connect to peers.
Fixes https://github.com/netty/netty/issues/5859"
7e62f9fcdb319661b303266bc15296ddc44bb324,"SocketSslEchoTest failure

Motivation:
8ba5b5f740d0d87eebd2aedacff8bd196d6da795 removed some ciphers from the default list, and SocketSslEchoTest had one of these ciphers hard coded in the test. The test will fail if the cihper is not supported by default.

Modifications:
SocketSslEchoTest should ensure a cipher is used which will be supported by the peer

Result:
Test result no longer depends upon default cipher list."
0b7bf49c165e682644a53279f75a44ba084201cd,"Convert X509TrustManager into X509ExtendedTrustManager for Java 7+

Motivation:

Since Java 7, X509TrustManager implementation is wrapped by a JDK class
called AbstractTrustManagerWrapper, which performs an additional
certificate validation for Socket or SSLEngine-backed connections.

This makes the TrustManager implementations provided by
InsecureTrustManagerFactory and FingerprintTrustManagerFactory not
insecure enough, where their certificate validation fails even when it
should pass.

Modifications:

- Add X509TrustManagerWrapper which adapts an X509TrustManager into an
  X509ExtendedTrustManager
- Make SimpleTrustManagerFactory wrap an X509TrustManager with
  X509TrustManagerWrapper is the provided TrustManager does not extend
  X509ExtendedTrustManager

Result:

- InsecureTrustManagerFactory and FingerprintTrustManagerFactory are now
  insecure as expected.
- Fixes #5910"
97bf3c0a9bcd6e3f7f9ad5465779242c0edde390,"Correctly throw IndexOutOfBoundsException when dst.remaining() is too big.

Motivation:

In some ByteBuf implementations we not correctly implement getBytes(index, ByteBuffer).

Modifications:

Correct code to do what is defined in the javadocs and adding test.

Result:

Implementation works as described."
af8ef3e40cb8a4e7d9648fbd8f1574ce55eaa8be,"Correctly release debugData and notify the promise when goAway was already sent

Motivation:

Commit 908464f161385361c450826bb1242c06f78d931e also introduced a change to guard against re-entrance but failed to correctly handle the debugData and promise.

Modifications:

Release debugData and correctly notify the promise.

Result:

No more buffer leak and promise is always notified."
35fb0babe269d8e584521d069492c910569b244c,[maven-release-plugin] prepare release netty-4.1.6.Final
5f533b7358b84868904baa5d8eb690d8f12eb4d4,[maven-release-plugin] prepare for next development iteration
c9918de37b630396a21e58ca733a89dc763372d4,"http2: Make MAX_HEADER_LIST_SIZE exceeded a stream error when encoding.

Motivation:

The SETTINGS_MAX_HEADER_LIST_SIZE limit, as enforced by the HPACK Encoder, should be a stream error and not apply to the whole connection.

Modifications:

Made the necessary changes for the exception to be of type StreamException.

Result:

A HEADERS frame exceeding the limit, only affects a specific stream."
efca9d180e239db4c3ee57919b41deb7c836f543,HTTP/2 HPACK Encoder remove unsued import
cfa5b85075f9f3a74e7eb46e344f44775dbcea57,"DefaultDnsRecordDecoder compression and index decode bug

Motivation:
8cf90f05127e3eda77a8749342709ab5776f7129 switch a duplicate opreration to a slice operation. Typically this would be fine but DNS supports a compression (https://www.ietf.org/rfc/rfc1035 4.1.4. Message compression) where the payload contains absolute indexes which refer back to previously referenced content. Using a slice will break the ability for the indexes in the payload to correctly self reference to the index of the originial payload, and thus decoding may fail.

Modifications:
- Use duplicate instead of slice so DNS message compression and index references are preserved.

Result:
Fixes DefaultDnsRecordDecoder regression"
9cfa4675548e368f3c905c0df31d18912d43cf08,"PlatformDependent ASCII hash code broken on big endian machines

Motivation:
PlatformDependent has a hash code algorithm which utilizes UNSAFE for performance reasons. This hash code algorithm must also be consistent with CharSequence objects that represent a collection of ASCII characters. In order to make the UNSAFE versions and CharSequence versions the endianness should be taken into account. However the big endian code was not correct in a few places.

Modifications:
- Correct bugs in PlatformDependent class related to big endian ASCII hash code computation

Result:
Fixes https://github.com/netty/netty/issues/5925"
23f033ac08906b8db4dbb5695d6f0701ad14e4d3,"Read if needed on ProxyHandler's handshake. Fixes #5933.

Motivation:

When auto-read is disabled and no reads are issued by a user, ProxyHandler will stall the connection on the proxy handshake phase waiting for the first response from a server (that was never read).

Modifications:

Read if needed when very first handshake message is send by ProxyHandler.

Result:

Proxy handshake now succeeds no matter if auto-read disabled or enabled. Without the fix, the new test is failing on master."
b2379e62f4ae50b55bce7c43e5bd008cf9aacfd1,"Allow customization of LocalChannel instances that are being created by LocalServerChannel.

Motivation

It's possible to extend LocalChannel as well as LocalServerChannel but the LocalServerChannel's serve(peer) method is hardcoded to create only instances of LocalChannel.

Modifications

Add a protected factory method that returns by default new LocalChannel(...) but users may override it to customize it.

Result

It's possible to customize the LocalChannel instance on either end of the virtual connection."
bff951ca07da117f1086dc928b452dd94bc8978d,"codec-http: HttpClientUpgradeHandler can handle streamed responses

Motivation:

We want to reject the upgrade as quickly as possible, so that we can
support streamed responses.

Modifications:

Reject the upgrade as soon as we inspect the headers if they're wrong,
instead of waiting for the entire response body.

Result:

If a remote server doesn't know how to use the http upgrade and tries to
responsd with a streaming response that never ends, the client doesn't
buffer forever, but can instead pass it along.  Fixes #5954"
947216b70e775f0d5f65a22e61b67de393ea5342,"Use latest centos/redhat version to verify against when release.

Motivation:

A new version of centos was released we should verify against it when release.

Modifications:

Bump up version.

Result:

Release on latest centos version."
273778c96c32cf093b99f1118cc01187192d2b96,"Correctly add futures to list in test

Motivation:

We missed to add the futures to the list in the test.

Modifications:

Add futures to list.

Result:

More correct test."
b6099bc193368259cd7db1ae6848ca410b571086,"Fix unbalanced quotes in Bundle-NativeCode manifest header

Motivation:

The previously generated manifest causes a parse exception when loaded into an Apache Felix OSGI container.

Modifications:

Fix parameter delimiter and unbalanced quotes in manifest entry. Suffixed with asterisk so the bundle is resolved on other architectures as well even if native libs won't be loaded.

Result:

Bundle will load properly in OSGI containers."
8269e0f046debf561b42adf4bd9aa9b3c18d6672,"[#5892] Correct handle HttpMessage that is EOF terminated

Motivation:

We need to ensure we not add the Transfer-Encoding header if the HttpMessage is EOF terminated.

Modifications:

Only add the Transfer-Encoding header if an Content-Length header is present.

Result:

Correctly handle HttpMessage that is EOF terminated."
eb7f8e4dc5802fa7ec1ffbfbc8ac8ef1aacf8918,"Expose RoundRobinInetAddressResolver

Motivation:
Make small refactoring for recently merged PR #5867 to make the code more flexible and expose aggressive round robin as a NameResolver too with proper code reuse.

Modifications:
Round robin is a method of hostname resolving - so Round robin related code fully moved to RoundRobinInetAddressResolver implements NameResolver<InetAddress>, RoundRobinInetSocketAddressResolver is deleted as a separate class, instance with the same functionality could be created by calling #asAddressResolver.

Result:
New forced Round Robin code exposed not only as an AddressResolver but as a NameResolver too, more proper code and semantic reusing of InetNameResolver and InetSocketAddressResolver classes."
42fba015ce82ab4ab30e547c888db82fe74094e9,"reduce lock contention in resource leak

Motivation:
ResourceLeakDetector shows two main problems, racy access and heavy lock contention.

Modifications:
This PR fixes this by doing two things:
1.  Replace the sampling counter with a ThreadLocalRandom.  This has two benefits.
    First, it makes the sampling ration no longer have to be a power of two.  Second,
    it de-noises the continuous races that fight over this single value.  Instead,
    this change uses slightly more CPU to decide if it should sample by using TLR.
2.  DefaultResourceLeaks need to be kept alive in order to catch leaks.  The means
    by which this happens is by a singular, doubly-linked list.  This creates a
    large amount of contention when allocating quickly.  This is noticeable when
    running on a multi core machine.

    Instead, this uses a concurrent hash map to keep track of active resources
    which has much better contention characteristics.

Results:
Better concurrent hygiene.  Running the gRPC QPS benchmark showed RLD taking about
3 CPU seconds for every 1 wall second when runnign with 12 threads.

There are some minor perks to this as well.  DefaultResourceLeak accounting is
moved to a central place which probably has better caching behavior."
4ee361e3024b33ac3a160e8124ee7f0e5a1f4b42,"OpenSslSession#initPeerCerts creates too long almost empty arrays.

Motivation:

https://github.com/netty/netty/issues/5945

Modifications:

Refactored initialization of arrays. Fixed arrays length

Result:

Cert arrays have proper length. Testing added"
e3cb9935c0b63357e3d51867cffe624129e7e1dd,"Take memory overhead of ChannelOutboundBuffer / PendingWriteQueue into account

Motivation:

To guard against the case that a user will enqueue a lot of empty or small buffers and so raise an OOME we need to also take the overhead of the ChannelOutboundBuffer / PendingWriteQueue into account when detect if a Channel is writable or not. This is related to #5856.

Modifications:

When calculate the memory for an message that is enqueued also add some extra bytes depending on the implementation.

Result:

Better guard against OOME."
b3fa976028960be96ecefb2097180c8ae142e92c,"Added support to fetch the UID, GID, and PID of the connected unix domain socket (EG: SO_PEERCREDS)

Motivation:

I had a need to know the user credentials of a connected unix domain socket.

Modifications:

Added a class to encapsulate user credentials (UID, GID, and the PID).
Augemented the Socket class to provide the JNI native interface to return this new class
Augemented the c code to call getSockOpts passing <a href=http://man7.org/linux/man-pages/man7/socket.7.html>SO_PEERCRED</a>
Then surfaced the ability to get user credentials in the EpollDomainSocketChannel

Result:

The EpollDomainSocketChannel now has a the following function signature:
public PeerCredentials peerCredentials() throws IOException allowing a caller to get the UID, GID, and PID of the linux process
connected to the unix domain socket."
b4e5965424e2c90e653cc4cfb2f45da046743b99,Cleanup inappropriate @throws javadoc of some AsciiString util methods
5eebe9a06c6873e797b5f8c847086c35ae990ef5,"Implement RoundRobin logic in RoundRobinInetAddressResolver#resolveAll

Motivation:
Now the ```resolveAll``` method of RoundRobinInetAddressResolver returns results without any rotation and shuffling. As a result, it doesn't force any round-robin for clients that get a result of ```resolveAll``` and use addresses from the result one by one for a connection establishing until success. This commit implements round-robin in RoundRobinInetAddressResolver#resolveAll. These improvements inspired by the discussion here: https://github.com/AsyncHttpClient/async-http-client/issues/1285

Modifications:
Rotate collection from internal ```resolveAll``` call by index, which is incremented every call to RoundRobinInetAddressResolver#resolveAll method.
Random replaced by an incrementing counter, which makes code cheaper and guarantees predictable address order in tests.

Result:
Improved ```RoundRobinInetAddressResolver``` is compatible with clients that use ```resolveAll``` result."
f0f0edbf7829ddaf9d795124cf6ce6a8ec5b2f51,"HttpObjectAggregator adds 'Connection: close' header if necessary

Motivation:

The HttpObjectAggregator never appends a 'Connection: close' header to
the response of oversized messages even though in the majority of cases
its going to close the connection.

Modification:

This PR addresses that by ensuring the requisite header is present when
the connection is going to be closed.

Result:

Gracefully signal that we are about to close the connection."
895a92cb2208906e0cabba21063e604c10c4d5ae,"Unable to initialize PlatformDependent when sun.misc.Unsafe is unavailable

Motivation:

PlatformDependent0 should not be referenced directly when sun.misc.Unsafe is unavailable.

Modifications:

Guard byteArrayBaseOffset with hasUnsafe check.

Result:

PlatformDependent can be initialized when sun.misc.Unsafe is unavailable."
5b5f6a60317eceff8726c4bb9802f8b1f00dea47,"Allow non-default Http/2 server initial settings

Motivation:

Currently it is not possible to have an Http/2 server send non default
initial settings to clients when doing the initial connection handshake

Modifications:

Add additional constructors to Http2Codec allowing users to specify the
initial settings to send to the client and apply locally

Result:

You can now specify non default initial settings"
3f20b8adee1d86285acc508308c07d67b36c1fc6,"Added optional pending timeouts counter parameter to HashedWheelTimer constructor and ensured that pending timeouts don't exceed provided max pending timeouts.

Motivation:
If the rate at which new timeouts are created is very high and the created timeouts are not cancelled, then the JVM can crash because of out of heap space. There should be a guard in the implementation to prevent this.

Modifications:
The constructor of HashedWheelTimer now takes an optional max pending timeouts parameter beyond which it will reject new timeouts by throwing RejectedExecutionException.

Result:
After this change, if the max pending timeouts parameter is passed as constructor argument to HashedWheelTimer, then it keeps a track of pending timeouts that aren't yet expired or cancelled. When a new timeout is being created, it checks for current pending timeouts and if it's equal to or greater than provided max pending timeouts, then it throws RejectedExecutionException."
705e3f629ab802539586c7d92f7888697a44c450,"Not use InternalThreadLocalMap where access may be done from outside the EventLoop.

Motivation:

We should not use the InternalThreadLocalMap where access may be done from outside the EventLoop as this may create a lot of memory usage while not be reused anyway.

Modifications:

Not use InternalThreadLocalMap in places where the code-path will likely be executed from outside the EventLoop.

Result:

Less memory bloat."
e47da7be778ec1a56d06cbdafe2b8af1e3951610,"CompatibleObjectEncoder cached ObjectOutputStream backed by release buffer bug

Motivation:
ObjectOutputStream uses a Channel Attribute to cache a ObjectOutputStream which is backed by a ByteBuf that may be released after an object is encoded and the underlying buffer is written to the channel. On subsequent encode operations the cached ObjectOutputStream will be invalid and lead to a reference count exception.

Modifications:
- CompatibleObjectEncoder should not cache a ObjectOutputStream.

Result:
CompatibleObjectEncoder doesn't use a cached object backed by a released ByteBuf."
fc3c9c9523150190760801dd0fbf014909519942,"Let OpenSslEngine.wrap(...) / OpenSslEngine.unwrap(...) behave like stated in the javadocs.

Motivation:

OpenSslEngine.wrap(...) and OpenSslEngie.unwrap(...) may consume bytes even if an BUFFER_OVERFLOW / BUFFER_UNDERFLOW is detected. This is not correct as it should only consume bytes if it can process them without storing data between unwrap(...) / wrap(...) calls. Beside this it also should only process one record at a time.

Modifications:

- Correctly detect BUFFER_OVERFLOW / BUFFER_UNDERFLOW and only consume bytes if non of them is detected.
- Only process one record per call.

Result:

OpenSslEngine behaves like stated in the javadocs of SSLEngine."
75728faf9b7748a268502d6b986f8bba24d82835,"Add more HttpHeaders values

Motivation:
Some commons values are missing from HttpHeader values constants.

Modifications:
- Add constants for ""application/json"" Content-Type
- Add constants for ""gzip,deflate"" Content-Encoding

Result:
More HttpHeader values constants available, both in
`HttpHeaders.Values` and `HttpHeaderValues`."
baac352f74d7e5b2980ed9c1071515e6f85598eb,"WebSocketClientHandshaker.rawPath(URI) should use the raw query

Motivation:

If the wsURL contains an encoded query, it will be decoded when generating the raw path.  For example if the wsURL is http://test.org/path?a=1%3A5, the returned raw path would be /path?a=1:5

Modifications:

Use wsURL.getRawQuery() rather than wsURL.getQuery()

Result:

rawPath will now return /path?a=1%3A5"
00fc239995ce7b683993c88bb82b30dbd5fe7982,"HashWheelTimerTest cleanup

Motivation:
HashWheelTimerTest has busy/wait and sleep statements which are not necessary. We also depend upon a com.google.common.base.Supplier which isn't necessary.

Modifications:
- Remove buys wait loops and timeouts where possible

Result:
HashWheelTimerTest more explicit in verifying conditions and less reliant on wait times."
d479e939b03cf37746647647917e028b1817e413,"Buffer Leaks in Compression Tests

Motivation:
The unit tests for the compression encoders/decoders may write buffers to an EmbeddedChannel but then may not release buffer or close the channel after the test. This may result in buffer leaks.

Modifications:
- Call channel.finishAndReleaseAll() after each test

Result:
Fixes https://github.com/netty/netty/issues/6007"
c1932a8537b742aaf15a7cfacf9f76ad8239f3c7,"ByteBuf Input Stream Reference Count Ownership

Motivation:
Netty provides a adaptor from ByteBuf to Java's InputStream interface. The JDK Stream interfaces have an explicit lifetime because they implement the Closable interface. This lifetime may be differnt than the ByteBuf which is wrapped, and controlled by the interface which accepts the JDK Stream. However Netty's ByteBufInputStream currently does not take reference count ownership of the underlying ByteBuf. There may be no way for existing classes which only accept the InputStream interface to communicate when they are done with the stream, other than calling close(). This means that when the stream is closed it may be appropriate to release the underlying ByteBuf, as the ownership of the underlying ByteBuf resource may be transferred to the Java Stream.

Motivation:
- ByteBufInputStream.close() supports taking reference count ownership of the underyling ByteBuf

Result:
ByteBufInputStream can assume reference count ownership so the underlying ByteBuf can be cleaned up when the stream is closed."
c4e96d010e3d16810d7130c93169817b3d72b421,"HTTP/2 WeightedFairQueueByteDistributor Bug

Motivation:
If a stream is not able to send any data (flow control window for the stream is exhausted) but has descendants who can send data then WeightedFairQueueByteDistributor may incorrectly modify the pseudo time and also double add the associated state to the parent's priority queue. The pseudo time should only be modified if a node is moved in the priority tree, and not if there happens to be no active streams in its descendent tree and a descendent is moved (e.g. removed from the tree because it wrote all data and the last data frame was EOS). Also the state objects for WeightedFairQueueByteDistributor should only appear once in any queue. If this condition is violated the pseudo time accounting would be biased at and assumptions in WeightedFairQueueByteDistributor would be invalidated.

Modifications:
- WeightedFairQueueByteDistributor#isActiveCountChangeForTree should not allow re-adding to the priority queue if we are currently processing a node in the distribution algorithm. The distribution algorithm will re-evaluate if the node should be re-added on the tail end of the recursion.

Result:
Fixes https://github.com/netty/netty/issues/5980"
c8575c42d0964812c0d2617f98efa7cb64c46be8,"[#5976] Ensure we only consume as much data on wrap(...) as we can handle.

Motiviation:

We need to ensure we only consume as much da as we can maximal put in one ssl record to not produce a BUFFER_OVERFLOW when calling wrap(...).

Modification:

- Limit the amount of data that we consume based on the maximal plain text size that can be put in one ssl record
- Add testcase to verify the fix
- Tighten up testcases to ensure the amount of produced and consumed data in SslEngineResult matches the buffers. If not the tests will fail now.

Result:

Correct and conform behavior of OpenSslEngine.wrap(...) and better test coverage during handshaking in general."
2c78902ebc7a81caa0ee6e3892438455f06dec9c,"LzmaFrameEncoderTest leak due to LzmaInputStream close behavior

Motivation:
c1932a8537b742aaf15a7cfacf9f76ad8239f3c7 made an assumption that the LzmaInputStream which wraps a ByteBufInputStream would delegate the close operation to the wrapped stream. This assumption is not true and thus we still had a leak. An issue has been logged with our LZMA dependency https://github.com/jponge/lzma-java/issues/14.

Modifications:
- Force a close on the wrapped stream

Result:
No more leak."
86bbf242b4775183de1012645103ddf8e83bdcaa,"[#5874] [#5971] Ensure SniHandlerTest.testServerNameParsing not fails with SslProvider.JDK

Motivation:

The SniHandlerTest.testServerNameParsing did fail when SslProvider.JDK was used as it the JDK SSLEngineImpl does not send an alert.

Modifications:

Ensure tests pass with JDK and OPENSSL ssl implementations.

Result:

SniHandlerTest will run with all SslProvider and not fail when SslProvider.JDK is used."
e7631867d30e26961e121ca05f5e3c078345984f,"LzmaFrameEncoderTest double release

Motivation:
2c78902ebc7a81caa0ee6e3892438455f06dec9c ensured buffers were released in the general case but didn't clean up an extra release in LzmaFrameEncoderTest#testCompressionOfBatchedFlowOfData which lead to a double release.

Modifications:
LzmaFrameEncoderTest#testCompressionOfBatchedFlowOfData should not explicitly release the buffer because decompress will release the buffer

Result:
No more reference count exception and failed test."
4bba7526e2f58018817972f38279cc232f519100,"retained[Slice|Duplicate] buffer reference count bug

Motivation:
Currently the ByteBuf created as a result of retained[Slice|Duplicate] maintains its own reference count, and when this reference count is depleated it will release the ByteBuf returned from unwrap(). The unwrap() buffer is designed to be the 'root parent' and will skip all intermediate layers of buffers. If the intermediate layers of buffers contain a retained[Slice|Duplicate] then these reference counts will be ignored during deallocation. This may lead to deallocating the 'root parent' before all derived pooled buffers are actually released. This same issue holds if a retained[Slice|Duplicate] is in the heirachy and a 'regular' slice() or duplicate() buffer is created.

Modifications:
- AbstractPooledDerivedByteBuf must maintain a reference to the direct parent (the buffer which retained[Slice|Duplicate] was called on) and release on this buffer instead of the 'root parent' returned by unwrap()
- slice() and duplicate() buffers created from AbstractPooledDerivedByteBuf must also delegate reference count operations to their immediate parent (or first ancestor which maintains an independent reference count).

Result:
Fixes https://github.com/netty/netty/issues/5999"
9725a4d004f10dc60d0406c197e1583f91461341,"Restructuring SslHandler to support new engines

Motivation:

In preparation for support of Conscrypt, I'm consolidating all of the engine-specific details so that it's easier to add new engine types that affect the behavior of SslHandler.

Modifications:

Added an enum SslEngineType that provides SSL engine-specific details.

Result:

SslHandler is more extensible for other engine types."
4bce554c905a85a51094b0ad8f2f058d0eaca75f,Revert counter optimization in RoundRobin until better implementation found
a0e375bbc0a33ad083fd090046c1ec2c74d730ff,"00fc239995ce7b683993c88bb82b30dbd5fe7982 HashedWheelTimer introduced test failure

Motivation:
00fc239995ce7b683993c88bb82b30dbd5fe7982 introduced a change to HashedWheelTimerTest which attempted to wait for an explicit event notification until more timer events can be added. However HashedWheelTimer will execute the timer Runnable before removing it from the queue and decrementing the total count. This make it difficult for users to know when it is safe to add another timer task as the limit is approached.

Modifications:
- HashedWheelTimer should remove the timer Runnable before executing the task.

Result:
Users can more reliably add new timers when the limit is reached and HashedWheelTimerTest will no longer fail spuriously due to this race condition."
0bc30a123e88bc7b038e0c260937581097a903f7,"Eliminate usage of releaseLater(...) to reduce memory usage during tests

Motiviation:

We used ReferenceCountUtil.releaseLater(...) in our tests which simplifies a bit the releasing of ReferenceCounted objects. The problem with this is that while it simplifies stuff it increase memory usage a lot as memory may not be freed up in a timely manner.

Modifications:

- Deprecate releaseLater(...)
- Remove usage of releaseLater(...) in tests.

Result:

Less memory needed to build netty while running the tests."
edc4842309ad0491b7f2088c8116318b3d680db8,"Fix cookie date parsing, close #6016

Motivation:
* RFC6265 defines its own parser which is different from RFC1123 (it accepts RFC1123 format but also other ones). Basically, it's very lax on delimiters, ignores day of week and timezone. Currently, ClientCookieDecoder uses HttpHeaderDateFormat underneath, and can't parse valid cookies such as Github ones whose expires attribute looks like ""Sun, 27 Nov 2016 19:37:15 -0000""
* ServerSideCookieEncoder currently uses HttpHeaderDateFormat underneath for formatting expires field, and it's slow.

Modifications:
* Introduce HttpHeaderDateFormatter that correctly implement RFC6265
* Use HttpHeaderDateFormatter in ClientCookieDecoder and ServerCookieEncoder
* Deprecate HttpHeaderDateFormat

Result:
* Proper RFC6265 dates support
* Faster ServerCookieEncoder and ClientCookieDecoder
* Faster tool for handling headers such as ""Expires"" and ""Date"""
c2565d8dd224e8c3cfd6138d80fc8ef9dfac8725,Remove usage of releaseLater(...) that was missed in 0bc30a123e88bc7b038e0c260937581097a903f7
a043cf4a983465cd7c221cefc8915121a30f621e,"Catch exceptions from PlatformDependent#getSystemClassLoader

Motivation:
PlatformDependent#getSystemClassLoader may throw a wide variety of exceptions based upon the environment. We should handle all exceptions and continue initializing the slow path if an exception occurs.

Modifications:
- Catch Throwable in cases where PlatformDependent#getSystemClassLoader is used

Result:
Fixes https://github.com/netty/netty/issues/6038"
782b7bcf4a1db5f33078fe8f7ded8059770f7fc4,"Fix HTTP/2 test cleanup with LocalChannel

Motivation:
When a LocalChannel is closed it is responsible to ensure all queued objects are released. When a LocalChannel is closed it will also close its peer channel. However in HTTP/2 unit tests we may not wait until all channels have completed the shutdown process before destroying the threads and exiting the test. This may mean buffers are GCed before they are released and be reported as a leak.

Modifications:
- In HTTP/2 tests when we use LocalChannel we should wait for all channels to close before exiting the test and cleaning up the associated EventLoopGroups.

Result:
More correct usage of LocalChannel in HTTP/2 tests."
0b3122d8ff632e409524b6f3d54435156e70ffa2,"Deprecate HttpUtil.getCharsetAsString(...) and introduce HttpUtil.getCharsetAsSequence(...).

Motivation:

The method HttpUtil.getCharsetAsString(...) is missleading as its return type is CharSequence and not String.

Modifications:

Deprecate HttpUtil.getCharsetAsString(...) and introduce HttpUtil.getCharsetAsSe
quence(...).

Result:

Less confusing method name."
e5070b726613cc6c1297ce2cc2dd5ab377cf0fbc,"[#6023] Ensure LastInboundHandler correctly handle different events / data

Motivation:

LastInboundHandler maintains 2 queues which may contain the same data and tries to match these up when you read elements out of it. Because of this it can happen that you remove an element only out of one queue and so double free stuff later.

Modifications:

Just use one ""queue"" to store things.

Result:

Not possible to only remove things from one queue and so get into trouble later when release everything that sits in the handler."
9b7fb2f3620449c8cfafa62fd294cb82600f043a,"Use the correct alert depending on the CertificateException when using OpenSslEngine

Motivation:

We tried to detect the correct alert to use depending on the CertificateException that is thrown by the TrustManager. This not worked all the time as depending on the TrustManager implementation it may also wrap a CertPathValidatorException.

Modification:

- Try to unwrap the CertificateException if needed and detect the right alert via the CertPathValidatorException.
- Add unit to verify

Result:

Send the correct alert depending on the CertificateException when using OpenSslEngine."
886a7aae465cceb5f90ede01d98de31e35ae404a,"Fix timestamp parsing in HttpHeaderDateFormatter

Motivation:
code assumes a numeric value of 0 means no digits were read between separators, which fails for timestamps like 00:00:00.
also code accepts invalid timestamps like 0:0:000

Modifications:
explicitly check for number of digits between separators instead of relying on the numeric value.
also add tests.

Result:
timestamps with 00 successfully parse, timestamps with 000 no longer

Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>"
eb4d317b9d64f3945a209804fec4c3fe695f4f9f,"Fix LocalChannel close sequence

Motivation:
LocalChannel attempts to close its peer socket when ever it is closed. However if the channels are on different EventLoops we may attempt to process events for the peer channel on the wrong EventLoop.

Modifications:
- Ensure the close process ensures we are on the correct thread before accessing data

Result:
More correct LocalChannel close code."
a25101dd0bb040d340b999dcec48953314202182,"Now that LocalChannel#releaseInboundBuffers is only called from the EventLoop (eb4d317b9d64f3945a209804fec4c3fe695f4f9f) it should clear readInProgress and drain/release the queue. Otherwise if a read event is pending (doBeginRead) was called we may later call channelRead or channelReadComplete after we have closed the channel.

Modifications:
LocalChannel#releaseInboundBuffers should always clear/release the queue and set readInProgress to false

Result:
LocalChannel queue is more reliably cleaned up."
f289ebf7fab65c9a9bf491a5060ce75c294ca60c,"Ensure alert is send when SSLException happens during calling SslHandler.unwrap(...)

Motivation:

When the SslHandler.unwrap(...) (which is called via decode(...)) method did produce an SSLException it was possible that the produced alert was not send to the remote peer. This could lead to staling connections if the remote peer did wait for such an alert and the connection was not closed.

Modifications:

- Ensure we try to flush any pending data when a SSLException is thrown during unwrapping.
- Fix SniHandlerTest to correct test this
- Add explicit new test in SslHandlerTest to verify behaviour with all SslProviders.

Result:

The alert is correctly send to the remote peer in all cases."
930633350d6b42831bc079675e521ee8f4d4e7e4,"Consistency between pooled/unpooled derived buffers

Motivation:
4bba7526e2f58018817972f38279cc232f519100 introduced changes which made pooled and unpooled derived buffers inconsistent in a few ways:
- Pooled derived buffers always generated a duplicate buffer when duplicate() was called and always generated a sliced buffer when slice() was called. Unpooled derived buffers some times generated a sliced buffer when duplicate() was called.
- The indexes that were set for duplicate buffers generated from slices were not always consistent.
There were also some various bugs in the derived pooled buffer implementation.

Modifications:
- Make pooled/unpooled consistently generate duplicate buffers when duplicate() is called and sliced buffers when slice() is called.
- Fix bugs in the derived pooled buffer

Result:
More consistent behavior from the derived pooled/unpooled buffers."
f755e584638e20a4ae62466dd4b7a14954650348,"Clean up following #6016
Motivation:

* DefaultHeaders from netty-codec has some duplicated logic for header date parsing
* Several classes keep on using deprecated HttpHeaderDateFormat

Modifications:

* Move HttpHeaderDateFormatter to netty-codec and rename it into HeaderDateFormatter
* Make DefaultHeaders use HeaderDateFormatter
* Replace HttpHeaderDateFormat usage with HeaderDateFormatter

Result:

Faster and more consistent code"
4e2530c171edc98a94ea91fda1e988963b0cbf38,"fix 5868 -fix DefaultHostsFileEntriesResolverTest to pass on windows 7

Motivation:

Windows 7 hosts file is empty by default (at least on my machine? see
http://serverfault.com/questions/4689/windows-7-localhost-name-resolution-is-handled-within-dns-itself-why
for details and reasoning.

the test relies on the file containing an entry for localhost.

Modifications:

refactor class code to 1st normalize the input host name and then look it up, change the test to verify
that hostnames are normalized in a case-insensitive way before being looked up (which was the intent
of the original test)

Result:

test should pass on vanilla windows 7 (and any other machine with no
localhost in the hosts file). no effect anywhere else or on actual netty
code.

Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>"
ba95c401a7cf8c7923fce660e16c8ba567d62f30,"Misc clean up

Motivation:
IntelliJ issues several warnings.

Modifications:

* `ClientCookieDecoder` and `ServerCookieDecoder`:
  * `nameEnd`, `valueBegin` and `valueEnd` don't need to be initialized
  * `keyValLoop` loop doesn't been to be labelled, as it's the most inner one (same thing for labelled breaks)
  * Remove `if (i != headerLen)` as condition is always true
* `ClientCookieEncoder` javadoc still mention old logic
* `DefaultCookie`, `ServerCookieEncoder` and `DefaultHttpHeaders` use ternary ops that can be turned into simple boolean ones
* `DefaultHeaders` uses a for(int) loop over an array. It can be turned into a foreach one as javac doesn't allocate an iterator to iterate over arrays
* `DefaultHttp2Headers` and `AbstractByteBuf` `equal` can be turned into a single boolean statement
Result:

Cleaner code"
f6b37a38bac6dbea5dd2282c68a0f41c456f67a2,Removed final keyword from FixedChannelPool
b9959c869b49a57316de034d94404d372cfbe571,"Do not eagerly initialize the logger factory

Motivation:

For applications that set their own logger factory, they want that
logger factory to be the one logger factory. Yet, Netty eagerly
initializes this and then triggers initialization of other classes
before the application has had a chance to set its preferred logger
factory.

Modifications:

With this commit there are two key changes:
 - Netty does not attempt to eagerly initialize the default logger
   factory, only doing so if the application layer above Netty has not
   already set a logger factory
 - do not eagerly initialize unrelated classes from the logger factory;
   while the motivation behind this was to initialize ThreadLocalRandom
   as soon as possible in case it has to block reading from /dev/random,
   this can be worked around for applications where it is problematic by
   setting securerandom.source=file:/dev/urandom in their Java system
   security policy (no, it is not less secure; do not even get me
   started on myths about /dev/random)

Result:

Netty uses the logger factory that the application prefers, and does not
initialize unrelated classes."
7dac4fdd250c5638e02511e00d22ddf2a6ecf4d1,"Do not try to be unsafe when told not to be unsafe

Motivation:

Netty has a flag (io.netty.noUnsafe) for specifying to Netty to not be
unsafe. Yet, when initializing PlatformDependent0, Netty still tries to
be unsafe. For application that specify to Netty to not be unsafe and
run under a security manager, this can lead to an obnoxious (debug
level) stack trace. Since Netty was told not to be unsafe, Netty should
not try to be unsafe.

Modifications:

The initialization logic in PlatformDependent0 should take into account
that Netty was told not to be unsafe. This means that we need to
initialize PlatformDependent#IS_EXPLICIT_NO_UNSAFE as soon as possible,
before the static initializer for PlatformDependent0 has a chance to
run. Thus the following modifications are made:
 - initialize PlatformDependent#IS_EXPLICIT_NO_UNSAFE before any other
   code in PlatformDependent causes PlatformDependent0 to initialize
 - expose the value of PlatformDependent#IS_EXPLICIT_NO_UNSAFE for
   reading in PlatformDependent0
 - take the value of PlatformDependent#IS_EXPLICIT_NO_UNSAFE into
   account in PlatformDependent0

Result:

Netty does not try to be unsafe when told not to be unsafe."
55c291ae5bdb7ac79464c4f838ca0aaaba6518fe,"SslHandlerTest ByteBuf leak

Motivation:
We are now more careful to flush alerts that are generated when errors occur. We should also be more careful in unit tests to release any buffers that may be queued due to potential errors wich result in alerts.

Modifications:
- When SslHandlerTest uses EmbeddedChannel we should always call finishAndReleaseAll

Results:
Fixes https://github.com/netty/netty/issues/6057"
ea0ddc0ea2cd11071bb960c7ff1aeade7bc1c1cb,"fix #6066 Support optional filename in HttpPostRequestEncoder

Motivation:

According to https://www.ietf.org/rfc/rfc2388.txt 4.4, filename after ""content-disposition"" is optional and arbitrary (does not need to match a real filename).

Modifications:

This change supports an extra addBodyFileUpload overload to precise the filename (default to File.getName). If empty or null this argument should be ignored during encoding.

Result:
- A backward-compatible addBodyFileUpload(String, File, String, boolean) to use file.getName() as filename.
- A new addBodyFileUpload(String, String, File, String, boolean) overload to precise filename
- Couple of tests for the empty use case"
f70757da2a71db93c3b2108cef86d8a45ef67c08,"[#6015] Fix racy PooledByteBufAllocatorTests

Motivation:

We had a few tests PooledByteBufAllocatorTests which used parkNanos(...) to give a resource enough time to get destroyed. This is race and may not be good enough.

Modifications:

Ensure the ThreadCache is really destroyed.

Result:

No more racy tests that depend on ThreadCaches."
d1c8b099a50b5960c91f3ac938f2dc202cd3cec7,"Correct release buffers in RedisEncoderTest

Motivation:

RedisEncoderTest did not release all buffers correctly which could lead to leaks.

Modifications:

Call ByteBuf.release() after buffer is read.

Result:

No more leaks in RedisEncoderTest."
6dbec4181cabe2d836e4a46b253d2f400fa296ac,"Ensure we not complete the same promise that may be failed because of outbound handler exception.

Motivation:

It's important that we do not pass in the original ChannelPromise to safeClose(...) as when flush(...) will throw an Exception it will be propagated to the AbstractChannelHandlerContext which will try to fail the promise because of this. This will then fail as it was already completed by safeClose(...).

Modifications:

Create a new ChannelPromise and pass it to safeClose(...).

Result:

No more confusing logs because of failing to fail the promise."
feae0435b5bc17d6e72a5370947564c891517387,"SwappedByteBuf.unwrap() should return wrapped buffer.

Motivation:

SwappedByteBuf.unwrap() not returned the wrapped buffer but the buffer that was wrapped by the original buffer. This is not correct.

Modifications:

Correctly return wrapped buffer and fix test.

Result:

SwappedByteBuf.unwrap() works as expected."
5bc447c539e3560391bd9df78f23055d69971a66,"Allow to build netty when sun.misc.Unsafe is not avaible or -Dio.netty.noUnsafe=true is used.

Motivation:

We support using Netty without sun.misc.Unsafe, so we should also support building it without it. This way we can also run all tests without sun.misc.Unsafe and so see if it works as expected.

Modifications:

Correctly skip tests that depend on sun.misc.Unsafe if its not present or -Dio.netty.noUnsafe=true is used.

Result:

Be able to build netty without sun.misc.Unsafe"
2de644224cfa383d282c960107a88ebbd5d1409c,"Correctly mark EpollServerDomainSocketChannel.isActive() as true after bind is complete.]

Motivation:

We missed to set active = true in EpollServerDomainSocketChannel.doBind(...) which also means that channelActive(...) was never triggered.

Modifications:

Correct set active = true in doBind(...)

Result:

EpollServerDomainSocketChannel is correctly set to active when bound."
fd0ae840b64120efd2a29ba96f0467fda0f21dad,"Small performance improvements in ResourceLeakDetector

Motivation:

42fba015ce82ab4ab30e547c888db82fe74094e9 changed the implemention of ResourceLeakDetector to improve performance. While this was done a branch was missed that can be removed. Beside this  using a Boolean as value for the ConcurrentMap is sub-optimal as when calling remove(key, value) an uncessary instanceof check and cast is needed on each removal.

Modifications:

- Remove branch which is not needed anymore
- Replace usage of Boolean as value type of the ConcurrentMap and use our own special type which only compute hash-code one time and use a == operation for equals(...) to reduce overhead present when using Boolean.

Result:

Faster and cleaner ResourceLeakDetector."
2b8fd8d43be916e29836943fc9d57ec494251756,"Allow to disable caching in PooledByteBufAllocator for non FastThreadLocalThreads

Motivation:

If a user allocates a lot from outside the EventLoop we may end up creating a lot of caches in the PooledByteBufAllocator. This may be wasteful and so it may be useful for an other to configure that caches should only be used from within EventLoops.

Modifications:

Add new constructor which allows to configure the caching behaviour.

Result:

More flexible configuration of PooledByteBufAllocator possible"
243b2b9f193c8459c56ad9196401c46f9584b7e4,"PooledByteBufAllocatorTest may has memory visiblity issues as it uses non concurrent queue

Motivation:

PooledByteBufAllocatorTest uses an ArrayQueue but access it from multiple threads (not concurrently but still from different threads). This may leak to memory visibility issues.

Modifications:

- Use a concurrent queue
- Some cleanup

Result:

Non racy test code."
efeb4cd8cbb148bb252a07f8a2664cd77ea7b5ea,"Add codec-smtp to all jar.

Motivation:

562d8d220028fbb3d62028bc5879a121dff2fdbd added codec-smtp but we missed to add it to the all jar.

Modifications:

Include codec-smtp in the all jar.

Result:

Include all codecs in the all jar."
39aefdfa06f89ae69cdb42481bdea2194ad2b62c,"Fix buffer leaks in tests

Motivation:

While working on #6087 some buffer leaks showed up.

Modifications:

Correctly release buffers.

Result:

No more buffer leaks in memcache and stomp codec tests."
f332a00e1a1b131d866dc2b86916d97f3a1bcf17,"Support compiling netty with Java9

Motivation:

Java9 will be released soon so we should ensure we can compile netty with Java9 and run all our tests. This will help to make sure Netty will be usable with Java9.

Modification:

- Add some workarounds to be able to compile with Java9, note that the full profile is not supported with Java9 atm.
- Remove some usage of internal APIs to be able to compile on java9
- Not support Alpn / Npn and so not run the tests when using Java9 for now. We will do a follow up PR to add support.

Result:

Its possible to build netty and run its testsuite with Java9."
ae1234c3033d81027c766c0f6d01eafd811b3a08,Replace internal class usage to make it compile on java9. This was missed in f332a00.
0ca2c3016b1e8aa1fa8d789ce3eac68ffff3d912,"Correct guard against non SSL data in ReferenceCountedOpenSslEngine

Motivation:

When non SSL data is passed into SSLEngine.unwrap(...) we need to throw an SSLException. This was not done at the moment. Even worse we threw an IllegalArgumentException as we tried to allocate a direct buffer with capacity of -1.

Modifications:

- Guard against non SSL data and added an unit test.
- Make code more consistent

Result:

Correct behaving SSLEngine implementation."
7ce0f35b69a30fcfcd37c9602a1be30077336d3e,"Correctly not try to call handshake() when engine is already closed.

Motivation:

We need to ensure we not call handshake() when the engine is already closed. Beside this our implementation of isOutboundDone() was not correct as it not took the pending data in the outbound buffer into acount (which may be also generated as part of an ssl alert). Beside this we also called SSL_shutdown(...) while we were still in init state which will produce an error and so noise in the log with openssl later versions.

This is also in some extend related to #5931 .

Modifications:

- Ensure we not call handshake() when already closed
- Correctly implement isOutboundDone()
- Not call SSL_shutdown(...) when still in init state
- Added test-cases

Result:

More correct behaviour of our openssl SSLEngine implementation."
c2f4daa7398a9363fde8e51bf52c0d0323f870a5,"Fix false-positives when using ResourceLeakDetector.

Motivation:

We need to ensure the tracked object can not be GC'ed before ResourceLeak.close() is called as otherwise we may get false-positives reported by the ResourceLeakDetector. This can happen as the JIT / GC may be able to figure out that we do not need the tracked object anymore and so already enqueue it for collection before we actually get a chance to close the enclosing ResourceLeak.

Modifications:

- Add ResourceLeakTracker and deprecate the old ResourceLeak
- Fix some javadocs to correctly release buffers.
- Add a unit test for ResourceLeakDetector that shows that ResourceLeakTracker has not the problems.

Result:

No more false-positives reported by ResourceLeakDetector when ResourceLeakDetector.track(...) is used."
fc1cdc991e71f504cf0d9fdb5aa60034fda04a28,"[#6095] Remove catching of ConcurrentModificationException as this can not happen.

Motivation:

We should not catch ConcurrentModificationException as this can never happen because things are executed on the EventLoop thread.

Modifications:

Remove try / catch

Result:

Cleaner code."
13a8ebade49781c7a645c7595d39020604d65490,Correctly handle the case when no ResourceLeakTracker was created for derived pooled buffers. This was missed in c2f4daa7398a9363fde8e51bf52c0d0323f870a5
eed6791f8e9ce0a37f655a0bccfc521794d86e99,Cleanup after commit fc1cdc991e71f504cf0d9fdb5aa60034fda04a28
002c99e751ec24e80236a310bd46e0098bdb636d,"NIO ServerChannel shouldn't close because of Exception

Motivation:
e102a008b63d0063581ba242539f0a8d473cae00 changed a conditional where previously the NIO ServerChannel would not be closed in the event of an exception.

Modifications:
- Restore the logic prior to e102a008b63d0063581ba242539f0a8d473cae00 which does not automatically close ServerChannels for IOExceptions

Result:
NIO ServerChannel doesn't close automatically for an IOException."
8d664fa0fdf05339e52e195709838dc7cc290eca,"Include frame-pointer to improve epoll flamegraph tracing

Motivation:

When attempting to flamegraph netty w/ epoll it was noticed the stacks are lost going from
java to epoll lib.

Modifications:

added the -fno-omit-framepointer flag to compiler flags to ensure the fp is kept intact

Result:

Flamegraphs will now show native code in the same stack as java code using perf-java-flames"
41ea9fa3b6ea463d82f043f9d7c0f4c34f1c6376,"Ensure SSLErrorTest also works with boringssl

Motivation:

boringssl uses different messages for the ssl alerts which are all uppercase. As we try to match case as well this fails in SSLErrorTest as we expect lower-case.

This test was introduced by 9b7fb2f3620449c8cfafa62fd294cb82600f043a.

Modifications:

Ensure we first translate everything to lower-case before doing the assert.

Result:

SSLErrorTest also pass when boringssl is used."
3539ba6f08a6c832dc9048cf5d6a6c71d6513708,"Use GitHub Issue/PR Template Feature

Motivation:
GitHub recently added the ability to setup PR and Issue templates https://github.com/blog/2111-issue-and-pull-request-templates. We should take advantage of this feature to ensure Issues / PRs are properly formed.

Modifications:
- add a .github directory with a CONTRIBUTING.md, ISSUE_TEMPLATE.md, and PULL_REQUEST_TEMPLATE.md file

Result:
Fixes https://github.com/netty/netty/issues/6074."
2055f4cf127519e337e19fb236a107587dd03950,"Correctly handle the case when BUFFER_OVERFLOW happens during unwrap but the readable bytes are bigger then the expected applicationBufferSize

Motivation:

We need to ensure we handle the case when BUFFER_OVERFLOW happens during unwrap but the readable bytes are bigger then the expected applicationBufferSize. Otherwise we may produce an IllegalArgumentException as we will try to allocate a buffer with capacity < 0.

Modifications:

- Guard against this case.
- Ensure we not double release buffer on exception when doing unwrap.

Result:

No more exception when running testsuite with java 9."
24b39bc2874fd87d7f892727d45bf8cc102e5955,"Only schedule a ThreadDeathWatcher task if caches are used.

Motivation:

If caches are disabled it does not make sense to schedule a task that will free up memory consumed by the caches.

Modifications:

Do not schedule if caches are disabled.

Result:

Less overhead."
3c92f2b64a1c6803860ab310348abc9f1cb47ff4,"Disallow setting logger factory twice

Motivation:

InternalLoggerFactory either sets a default logger factory
implementation based on the logging implementations on the classpath, or
applications can set a logger factory explicitly. If applications wait
too long to set the logger factory, Netty will have already set a logger
factory leading to some objects using one logging implementation and
other objets using another logging implementation. This can happen too
if the application tries to set the logger factory twice, which is
likely a bug in the application. Yet, the Javadocs for
InternalLoggerFactory warn against this saying that
InternalLoggerFactory#setLoggerFactory ""should be called as early as
possible and shouldn't be called more than once"". Instead, Netty should
guard against this.

Modications:

We replace the logger factory field with an atomic reference on which we
can do CAS operations to safely guard against it being set twice. We
also add an internal holder class that captures the static interface of
InternalLoggerFactory that can aid in testing.

Result:

The logging factory can not be set twice, and applications that want to
set the logging factory must do it before any Netty classes are
initialized (or the default logger factory will be set)."
42fca7a2fb71835ee64f3dd1a55c881038f00b19,"Allow to run tests with extra commandline arguments

Motivation:

Often its useful to run the tests with different commandline arguments (like different system properties).

Modifications:

Introduce argLine.javaProperties which can be set from the commandline as well to add arguments that should be append when run the unit tests.

Result:

More flexible way to run the tests."
f6ac8b5d321fff908446c72a8546643f53e7c277,"[#6114] Increase test timeout for test introduced in c2f4daa7398a9363fde8e51bf52c0d0323f870a5

Motivation:

c2f4daa7398a9363fde8e51bf52c0d0323f870a5 added a unit test but used a too small test timeout.

Modifications:

Increase timeout.

Result:

Test should have enough time to complete on the CI."
712c16ad83f892933f16916f8586354daf3d731a,"Ensure leak aware buffers correctly close the ResourceLeakTracker

Motivation:

We should assert that the leak aware buffers correctly close the ResourceLeakTracker in the unit tests.

Modifications:

- Keep track of NoopResourceLeakTrackers and check if these were closed once the test completes
- Fix bugs in tests so the buffers are all released.

Result:

Better tests for leak aware buffers"
4639d56596f5dd023bcb515d3d9e3f16cbc3217e,"HttpToHttp2ConnectionHandlerTest increase setup timeout

Motivation:
The 2 second timeout to bootstrap the test can timeout on the build servers. We should increase the timeout so it is less likely under powered or over worked machines are less likely to generate false failures.

Modifications:
- HttpToHttp2ConnectionHandlerTest setup timeout changed from 2 to 5 seconds

Result:
Less false build failures."
cb139043f321836746915e7ada2d507ca45ed734,"[#5831] HttpServerCodec cannot encode a respons e to HEAD
 request with a 'content-encoding: chunked' header

Motivation:

It is valid to send a response to a HEAD request that contains a transfer-encoding: chunked header, but it is not valid to include a body, and there is no way to do this using the netty4 HttpServerCodec.

The root cause is that the netty4 HttpObjectEncoder will transition to the state ST_CONTENT_CHUNK and the only way to transition back to ST_INIT is through the encodeChunkedContent method which will write the terminating length (0\r\n\r\n\r\n), a protocol error when responding to a HEAD request

Modifications:

- Keep track of the method of the request and depending on it handle the response differently when encoding it.
- Added a unit test.

Result:

Correclty handle HEAD responses that are chunked."
5fec897ef789a4004c59d844c971230da6a6949c,"Fail build when unused c code is detected

Motivation:

To keep our code clean we should fail the build when unused c code is detected.

Modifications:

- Add '-Wunused-variable' to build flags

Result:

Cleaner code."
89e93968ac601cbe3d6ca105abbefc99adcb56be,"Remove usage of own Atomic*FieldUpdater in favor of JDKs

Motivation:

In later Java8 versions our Atomic*FieldUpdater are slower then the JDK implementations so we should not use ours anymore. Even worse the JDK implementations provide for example an optimized version of addAndGet(...) using intrinsics which makes it a lot faster for this use-case.

Modifications:

- Remove methods that return our own Atomic*FieldUpdaters.
- Use the JDK implementations everywhere.

Result:

Faster code."
cd458f10bcd0ecd0532515c4b880c6a30a6c02f5,"Server returns status 431 on header size errors

Motivation:

Currently clients attempting to send headers that are too large recieve
a RST frame. This makes it harder than needed for implementations on top
of netty to handle this in a graceful way.

Modifications:

When the Decoder throws a StreamError of type FRAME_SIZE_ERROR, the
Http2ConnectionHandler will now attempt to send an Http2Header with
status 431 and endOfStream=true

Result:

Implementations now do not have to subclass parts of netty to handle
431s"
89cb50aefaceac53dfafa7bf8d20637bcbb3bfa8,"Explicit disable support of SSL / TLS Compression

Motivation:

Our ReferenceCountedOpenSslEngine does not support compression so we should explicit disable it.
This is related to #3722.

Modifications:

Set SSL_OP_NO_COMPRESSION option.

Result:

Not use compression."
fe2b55cea124507a9613955d698ca8788f9ed225,"Allow to disable deleting of the native library file after it is loaded.

Motivation:

When profiling it is sometimes needed to still have the native library file avaible. We should allow to disable the explicit deletion and just delete it when the JVM stops.

This is related to #6110

Modifications:

Add io.netty.native.deleteLibAfterLoading system property which allows to disable the explicit delete after laoding

Result:

Possible to profile native libraries better."
06e7627b5f39b96c05042d7bd85218560293fc19,"Read Only Http2Headers

Motivation:
A read only implementation of Http2Headers can allow for a more efficient usage of memory and more performant combined construction and iteration during serialization.

Modifications:
- Add a new ReadOnlyHttp2Headers class

Result:
ReadOnlyHttp2Headers exists and can be used for performance reasons when appropriate.

```
Benchmark                                            (headerCount)  Mode  Cnt    Score   Error  Units
ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders               1  avgt   20   96.156 ± 1.902  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders               5  avgt   20  157.925 ± 3.847  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders              10  avgt   20  236.257 ± 2.663  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultClientHeaders              20  avgt   20  392.861 ± 3.932  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders               1  avgt   20   48.759 ± 0.466  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders               5  avgt   20  113.122 ± 0.948  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders              10  avgt   20  192.698 ± 1.936  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultServerHeaders              20  avgt   20  348.974 ± 3.111  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultTrailers                    1  avgt   20   35.694 ± 0.271  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultTrailers                    5  avgt   20   98.993 ± 2.933  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultTrailers                   10  avgt   20  171.035 ± 5.068  ns/op
ReadOnlyHttp2HeadersBenchmark.defaultTrailers                   20  avgt   20  330.621 ± 3.381  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders              1  avgt   20   40.573 ± 0.474  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders              5  avgt   20   56.516 ± 0.660  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders             10  avgt   20   76.890 ± 0.776  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyClientHeaders             20  avgt   20  117.531 ± 1.393  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders              1  avgt   20   29.206 ± 0.264  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders              5  avgt   20   44.587 ± 0.312  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders             10  avgt   20   64.458 ± 1.169  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyServerHeaders             20  avgt   20  107.179 ± 0.881  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                   1  avgt   20   21.563 ± 0.202  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                   5  avgt   20   41.019 ± 0.440  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                  10  avgt   20   64.053 ± 0.785  ns/op
ReadOnlyHttp2HeadersBenchmark.readOnlyTrailers                  20  avgt   20  113.737 ± 4.433  ns/op
```"
cfd8fb10db1df77183ffe464a7f2c7228f834715,"[#6134] Do not limit the PID to be <= 4194304

Motivation:

On some platforms the PID my be bigger then 4194304 so we should not limit it to 4194304.

Modifications:

Only check that the PID is a valid Integer

Result:

No more warnings on systems where the PID is bigger then 4194304."
16ddf460a62d9946f49d7169a077840bcdf6dc0e,"Added checkStartsWith option for WebSocketServerProtocolHandler

Motivation:

Enables optional .startsWith() matching of req.uri() with websocketPath.

Modifications:

New checkStartsWith boolean option with default false value added to both WebSocketServerProtocolHandler and WebSocketServerProtocolHandshakeHandler. req.uri() matching is based on this option.

Result:

By default old behavior matching via .equal() is preserved. To use checkStartsWith use constructor shortcut: new WebSocketServerProtocolHandler(websocketPath, true) or fill this flag on full form of constructor among other options."
7c630feefc62b739afea123547165b9efb4281c0,"Document and generalize `PromiseCombiner`

Motivation:

`PromiseCombiner` is really handy, but it's not obvious how to use it from its existing documentation/method signatures.

Modification:

- Added javadoc comments to explain the theory of operation of `PromiseCombiner`.
- Generalized `PromiseCombiner` to work with `Futures` so it's clearer that the things for which it's listening won't be modified.

Result:

`PromiseCombiner` is easier to understand."
3f82b53bae4120eaf452269f204595b78353ec2b,"Add unit test for HttpObjectDecoder with message split on buffer boundaries

Motivation:
We should have a unit test which explicitly tests a HTTP message being split between multiple ByteBuf objects.

Modifications:
- Add a unit test to HttpRequestDecoderTest which splits a request between 2 ByteBuf objects

Result:
More unit test coverage for HttpObjectDecoder."
3d1133415179daab602db1709bdf01d7a297e9f3,"Fix DefaultChannelId MAC address parsing bug

Motivation:
DefaultChannelId provides a regular expression which validates if a user provided MAC address is valid. This regular expression may allow invalid MAC addresses and also not allow valid MAC addresses.

Modifications:
- Introduce a MacAddressUtil#parseMac method which can parse and validate the MAC address at the same time. The regular expression check before hand is additional overhead if we have to parse the MAC address.

Result:
Fixes https://github.com/netty/netty/issues/6132."
28c39a31832145cd7568099d65201a6f01f651c5,"Ensure we use a MPMC queue in ThreadDeathWatcher as it may be used from multiple threads at the same time.

Motivation:

We used a MPSC queue in ThreadDeathWatcher and checked if it empty via isEmpty() from multiple threads if very unlucky. Depending on the implementation this is not safe and may even produce things like live-locks.

Modifications:

Change to use a MPMC queue.

Result:

No more risk to run into issues when multiple threads call watch(...) / unwatch(...) concurrently."
31da0ddbac1a07e6efa5e50334e09955b94ae62b,"Revert ""Disallow setting logger factory twice""

This reverts commit 3c92f2b64a1c6803860ab310348abc9f1cb47ff4 which needs more thoughts and so will go into the next release."
074075de7ee8b67867af3494e6bc3dc1a7952522,"Expose channel pool configuration to subclasses.

Motivation:

`SimpleChannelPool` subclasses are likely to override the `connectChannel` method, and are likely to clobber the cloned `Bootstrap` handler in the process. To allow subclasses to properly notify the pool listener of new connections, we should expose (at least) the `handler` property of the pool to subclasses.

Modifications:

Expose `SimpleChannelPool` properties to subclasses via `protected` getters.

Result:

Subclasses can now use the bootstrap, handler, health checker, and health-check-on-release preoperties from their superclass."
0eeeb764391490585f690c8b424d9ce2d43e6a9b,"Fix handling of FullHttpResponse when respond to HEAD in HttpServerCodec

Motivation:

cb139043f321836746915e7ada2d507ca45ed734 introduced special handling of response to HEAD requests. Due a bug we failed to handle FullHttpResponse correctly.

Modifications:

Correctly handle FullHttpResponse for HEAD requests.

Result:

Works as expected."
56ddc47f23611f6e1c8009caf0b67f535a41802c,"Extends HttpPostRequestEncoder to support all methods except TRACE

Motivation:

In Netty, currently, the HttpPostRequestEncoder only supports POST, PUT, PATCH and OPTIONS, while the RFC 7231 allows with a warning that GET, HEAD, DELETE and CONNECT use a body too (but not TRACE where it is explicitely not allowed).
The RFC in chapter 4.3 says:
""A payload within a XXX request message has no defined semantics;
sending a payload body on a XXX request might cause some existing
implementations to reject the request.""
where XXX can be replaced by one of GET, HEAD, DELETE or CONNECT.

Current usages, on particular in REST mode, tend to use those extra HttpMethods for such queries.

So this PR proposes to remove the current restrictions, leaving only TRACE as explicitely not supported.

Modification:

In the constructor, where the test is done, replacing all by checking only against TRACE, and adding one test to check that all methods are supported or not.

Result:

Fixes #6138."
68a941c091f5a5b5d69715327db9ca77b53e1864,"Detecting actual Channel write idleness vs. slowness

Motivation

The IdleStateHandler tracks write() idleness on message granularity but does not take into consideration that the client may be just slow and has managed to consume a subset of the message's bytes in the configured period of time.

Modifications

Adding an optional configuration parameter to IdleStateHandler which tells it to observe ChannelOutboundBuffer's state.

Result

Fixes https://github.com/netty/netty/issues/6150"
a8950dfc4cd0f0acc9900e315b98f518c3694e8f,"InternalThreadLocalMap.arrayList should create a reusable ArrayList only if arrayList field is NULL.

Motivation:

InternalThreadLocalMap.arrayList returns a new ArrayList every time it's called that defeats the purpose of having a reusable ArrayList.

Modification:

Modified InternalThreadLocalMap.arrayList to create an ArrayList only if arrayList field is NULL.

Result:

InternalThreadLocalMap.arrayList now creates a reusable ArrayList only if arrayList field is NULL."
2457f386d8873d4b401571eb676c0b8b84288c76,"Set `prev` to null when setting `cursor` to `head` in `scavengeSome`.

Motivation:

`scavengeSome()` has a corner case: when setting `cursor` to `head`, `this.prev` may point to the tail of the  `WeakOrderQueue` linked list. Then it's possible that the following while loop will link the tail to the head, and cause endless loop.

I made a reproducer in https://github.com/zsxwing/netty/commit/36522e7b72d61af8e4455162b2e33ce42194774d . The unit test will just run forever. Unfortunately, I cannot change it to a unit test because it needs to add some codes to `scavengeSome` to control the execution flow.

Modification:

Set `prev` to null when setting `cursor` to `head` in `scavengeSome`

Result:

Fixes #6153."
c1830c8b4ecf15fd3f06787e333dcd3b775dd5fb,"Fix missleading comment in AbstractChannelHandlerContext.invokeHandler()

Motivation:

The comment on AbstractChannelHandlerContext.invokeHandler() is incorrect and missleading. See [#6177]

Modifications:

Change true to false to correct the comment.

Result:

Fix missleading and incorrect comment."
72c9fc20844ba83295ad3df60c0251db6a736458,"Use href in WebSocketServer javadoc

Motivation:

We should use <a href=....> in the javadoc of WebSocketServer. See [#6172].

Modifications:

Use href.

Result:

Fix link in xref."
2368f238ad75935f68221f35330934c4ee734ee8,"Fix typo in inner-class name

Motivation:

There is a typo in the inner-class name.

Modifications:

Fix typo.

Result:

One typo less. Fixes [#6185]."
583a59abb1c1b2cd99aeac5cbbd2e58c4b087880,"ByteBufUtil.compare int underflow

Motivation:
ByteBufUtil.compare uses long arithmetic but doesn't check for underflow on when converting from long to int to satisfy the Comparable interface. This will result in incorrect comparisons and violate the Comparable interface contract.

Modifications:
- ByteBufUtil.compare should protect against int underflow

Result:
Fixes https://github.com/netty/netty/issues/6169"
631077c79391fde22afdb1e43d0f642ba530101e,"EPOLL RDHUP processing

Motivation:
EpollRecvByteAllocatorHandle will read unconditionally if EPOLLRDHUP has been received. However we can just treat this the same was we do as data maybe pending in ET mode, and let LT mode notify us if we haven't read all data.

Modifications:
- EpollRecvByteAllocatorHandle should not always force a read just because EPOLLRDHUP has been received, but just treated as an indicator that there maybe more data to read in ET mode

Result:
Fixes https://github.com/netty/netty/issues/6173."
7a4b0c32972b5d3b8d440f98e151b25d6d135ad3,"Add unit test that shows LineBasedFrameDelimiter correctly splits line.

Motivation:

Thought there may be a bug so added a testcase to verify everything works as expected.

Modifications:

Added testcase

Result:

More test-coverage."
3c5e677964f3bc1bc8588a60116b4c35b6225e72,"Add assert to ensure we not create an endless loop and fix unsafe publication

Motivation:

[#6153] reports an endless loop that existed in the Recycler, while this was fixed adding a few asserts to ensure this remains fixed is a good thing. Beside this we also should ensure this can not escape the constructor to avoid unsafe publication.

Modifications:

- Add asserts
- Fix unsafe publication

Result:

More correct code."
ec3d077e0d7058eec332b46d8b87d73d821be734,"DefaultHttp2Connection modifying child map while iterating

Motivation:
When DefaultHttp2Connection removes a stream it iterates over all children and adds them as children to the parent of the stream being removed. This process may remove elements from the child map while iterating without using the iterator's remove() method. This is generally unsafe and may result in an undefined iteration.

Modifications:
- We should use the Iterator's remove() method while iterating over the child map

Result:
Fixes https://github.com/netty/netty/issues/6163"
d771526f8cfe262914ef40f0613e1e4b9e3a3aca,"HTTP/2 HelloWorld Client Example Bug

Motivation:
The HTTP/2 helloworld client example has 2 bugs:
1. HttpResponseHandler has a map which is accessed from multiple threads, but the map is not thread safe.
2. Requests are flushed and maybe completely written and the responses may be received/processed by Netty before an element is inserted into the HttpResponseHandler map. This may result in an 'unexpected message' error even though the message has actually been sent.

Modifications:
- HttpResponseHandler should use a thread safe map
- Http2Client shouldn't flush until entries are added to the HttpResponseHandler map

Result:
Fixes https://github.com/netty/netty/issues/6165."
84410f97af5223876071c4601b80fa76ebc8a57b,"Add unit test that shows LineBasedFrameDelimiter correctly handles fragmented data.

Motivation:

Verify everything works as expected.

Modifications:

Added testcase.

Result:

More test-coverage."
eb5dc4bcedc7503738e19ee8635f4df58f7062a2,"Correctly handle IPV6 in HttpProxyHandler

Motivation:

The HttpProxyHandler is expected to be capable of issuing a valid CONNECT request for a tunneled connection to an IPv6 host.

Modifications:

- Correctly format the IPV6 address.
- Add unit tests

Result:

HttpProxyHandler works with IPV6 as well. Fixes [#6152]."
dd055c01c78c3a6ce5b9195890486a6e1ab072d2,"Ensure ReferenceCountedOpenSslEngine not swallow the close_notify

Motivation:

We need to ensure we not swallow the close_notify that should be send back to the remote peer. See [#6167]

Modifications:

- Only call shutdown() in closeInbound() if there is nothing pending that should be send back to the remote peer.
- Return the correct HandshakeStatus when the close_notify was received.
- Only shutdown() when close_notify was received after closeOutbound() was called.

Result:

close_notify is correctly send back to the remote peer and handled when received."
be8c16cd0c54f9013b539741bf2a1db13ddc0126,"[#6141] OpenSSLContext Mutual Auth does not announce acceptable CAs

Motivation:

Openssl provider should behave same as JDK provider when mutual authentication is required and a specific set of trusted Certificate Authorities are specified. The SSL handshake should return back to the connected peer the same list of configured Certificate Authorities.

Modifications:

Correctly set the CA list.

Result:

Correct and same behaviour as the JDK implementation."
7a21eb1178c8ed0072adcd5f2ac6e8d68c7caa05,[maven-release-plugin] prepare release netty-4.1.7.Final
7f01da8d0f65b5254ce515ef21d11ec603fea9fe,[maven-release-plugin] prepare for next development iteration
c590e3bd63c43e9c1104ce2ab3a5307f14bee960,"HTTP/2 relax test timeouts

Motivation:
Build failures have been observed with 2 second timeouts on the CI servers. We should make the timeouts longer to reduce false positive test failures due to tests timing out prematurely.

Modifications:
- Increase timeouts from 2 and 3 seconds to 5 seconds.

Result:
Less false positive test failures."
3ea807e375e6f311c26aca92e3445c7fbd58a7e5,"Flush LZ4FrameEncoder buffer when channel flush() is received.

Motivation:

LZ4FrameEncoder maintains an internal buffer of incoming data compress, and only writes out compressed data when a size threshold is reached. LZ4FrameEncoder does not override the flush() method, and thus the only way to flush data down the pipeline is via more data or close the channel.

Modifications:

Override the flush() function to flush on demand. Also overrode the allocateBuffer() function so we can more accurately size the output buffer (instead of needing to potatntially realloc via buffer.ensureWritable()).

Result:

Implementation works as described."
b701da8d1c79b4a2f02e3ff2d22a31f1bf084d00,"HTTP/2 HPACK Integer Encoding Bugs

Motivation:
- Decoder#decodeULE128 has a bounds bug and cannot decode Integer.MAX_VALUE
- Decoder#decodeULE128 doesn't support values greater than can be represented with Java's int data type. This is a problem because there are cases that require at least unsigned 32 bits (max header table size).
- Decoder#decodeULE128 treats overflowing the data type and invalid input the same. This can be misleading when inspecting the error that is thrown.
- Encoder#encodeInteger doesn't support values greater than can be represented with Java's int data type. This is a problem because there are cases that require at least unsigned 32 bits (max header table size).

Modifications:
- Correct the above issues and add unit tests.

Result:
Fixes https://github.com/netty/netty/issues/6210."
821501717ba3215a81863ad1c329ab8cb130dec4,"Fix possible IOOBE when calling ReferenceCountedSslEngine.unwrap(...) with heap buffers.

Motivation:

fc3c9c9523150190760801dd0fbf014909519942 introduced a bug which will have ReferenceCountedSslEngine.unwrap(...) produce an IOOBE when be called with an BŷteBuffer as src that contains multiple SSLRecords and has a position != 0.

Modification:

- Correctly set the limit on the ByteBuffer and so fix the IOOBE.
- Add test-case to verify the fix

Result:

Correctly handle heap buffers as well."
91951a51addb6a16115e34f2556c04efe5fbcb81,"Ensure calling ReferenceCountedSslEngine.unwrap(...) / wrap(...) can be called after it was closed

Motivation:

The JDK implementation of SSLEngine allows to have unwrap(...) / wrap(...) called even after closeInbound() and closeOutbound() were called. We need to support the same in ReferenceCountedSslEngine.

Modification:

- Allow calling ReferenceCountedSslEngine.unwrap(...) / wrap(...) after the engine was closed
- Modify unit test to ensure correct behaviour.

Result:

Implementation works as expected."
d37702aa69b67e419c83fb170ccaec164598857d,"Ensure SslHandler.sslCloseFuture() is notified in all cases.

Motivation:

The SslHandler.sslCloseFuture() may not be notified when the Channel is closed before a closify_notify is received.

Modifications:

Ensure we try to fail the sslCloseFuture() when the Channel is closed.

Result:

Correctly notify the ssl close future."
d7ff71a3d1d0ba16818ebe8ab44691197c2ffd48,"Check if DnsCache is null in DnsNameResolver constructor.

Motivation:

We miss checking if DnsCache is null in DnsNameResolver constructor which will later then lead to a NPE. Better fail fast here.

Modifications:

Check for null and if so throw a NPE.

Result:

Fail fast."
0c4826586f48106267092160b8b9343d3f3e88df,"Cleanup PlatformDependent* code

Motivation:

PlatformDependent* contains some methods that are not used and some other things that can be cleaned-up.

Modifications:

- Remove unused methods
- cleanup

Result:

Code cleanup."
4f6ef695822253715dc75cd7355f3325505cae67,Follow-up cleanup of 0c4826586f48106267092160b8b9343d3f3e88df
fac0ca83194252e3ea231e927972c1d2c74aa459,"Warn about not-supported ChannelOption when bootstrap Channels.

Motivation:

We not warned about not-supported ChannelOptions when set the options for the ServerChannel.

Modifications:

- Share code for setting ChannelOptions during bootstrap

Result:

Warning is logged when a ChannelOption is used that is not supported during bootstrap a Channel. See also [#6192]"
141554f5d15d0014eccefa8de42388bda1bfa255,"Removed unnecessary pattern matching during number paring and unnecessary toLowerCase() invocation.

Motivation:

Pattern matching not necessary for number parsing.

Modification:

Removed pattern matching for number parsing and removed unnecessary toLowerCase() operation.

Result:

No static variable with pattern, removed unnecessary matching operation and toLowerCase() operation."
86020a2858de8c8cf31892a3bf1010d6f9defa4a,"Typo error: Method invoker() no longer exists

Method invoker() no longer exists"
9a4aa617f42578c87c6d500a627d90d844b6ef49,"PlatformDependent#getClassLoader fails in restrictive classloader environment

Motivation:
https://github.com/netty/netty/pull/6042 only addressed PlatformDependent#getSystemClassLoader but getClassLoader is also called in an optional manner in some common code paths but fails to catch a general enough exception to continue working.

Modifications:
- Calls to getClassLoader which can continue if results fail should catch Throwable

Result:
More resilient code in the presense of restrictive class loaders.
Fixes https://github.com/netty/netty/issues/6246."
0e654f77e24d15100332648ed3f910e7760b553f,Level initialization cleanup.
cd9008f95b61f92d30eff7c351cb0bf5db97643a,Remove unnecessray for loop missed by fac0ca83194252e3ea231e927972c1d2c74aa459
d55c321306dc6f3c01cbbd5f5c080fabe1128583,"Add SslCloseCompletionEvent that is fired once a close_notify was received

Motivation:

For the completion of a handshake we already fire a SslHandshakeCompletionEvent which the user can intercept. We should do the same for the receiving of close_notify.

Modifications:

Add SslCloseCompletionEvent and test-case.

Result:

More consistent API."
cf8e07f62f91f1963d501f6f670a6eef8e548da0,"Run all tests in SSLEngineTest with heap, direct and mixed buffers

Motivation:

As we use different execution path in our SSLEngine implementation depending on if heap, direct or mixed buffers are used we should run the tests with all of them.

Modification:

Ensure we run all tests with different buffer types.

Result:

Better test-coverage"
71efb0b39e4410001abb9d96c6a87316a567c16f,"Do not replace System.err during Slf4JLoggerFactory construction

Motivation:

Replacing System.err during Slf4JLoggerFactory construction is problematic as another class may optain the System.err reference before we set it back to the original value.

Modifications:

Remove code that temporary replaced System.err.

Result:

Fixes [#6212]."
ead87b7df8d923417475ead2d7680747b1a72f07,"Respect resolvedAddressTypes when follow CNAME records.

Motivation:

When we follow CNAME records we should respect resolvedAddressTypes and only query A / AAAA depending on which address types are expected.

Modifications:

Check if we should query A / AAAA when follow CNAMEs depending on resolvedAddressTypes.

Result:

Correct behaviour when follow CNAMEs."
2fd42cfc6b32dacb812c6f2ecef8522cd94718d4,"HTTP/2 Max Header List Size Bug

Motivation:
If the HPACK Decoder detects that SETTINGS_MAX_HEADER_LIST_SIZE has been violated it aborts immediately and sends a RST_STREAM frame for what ever stream caused the issue. Because HPACK is stateful this means that the HPACK state may become out of sync between peers, and the issue won't be detected until the next headers frame. We should make a best effort to keep processing to keep the HPACK state in sync with our peer, or completely close the connection.
If the HPACK Encoder is configured to verify SETTINGS_MAX_HEADER_LIST_SIZE it checks the limit and encodes at the same time. This may result in modifying the HPACK local state but not sending the headers to the peer if SETTINGS_MAX_HEADER_LIST_SIZE is violated. This will also lead to an inconsistency in HPACK state that will be flagged at some later time.

Modifications:
- HPACK Decoder now has 2 levels of limits related to SETTINGS_MAX_HEADER_LIST_SIZE. The first will attempt to keep processing data and send a RST_STREAM after all data is processed. The second will send a GO_AWAY and close the entire connection.
- When the HPACK Encoder enforces SETTINGS_MAX_HEADER_LIST_SIZE it should not modify the HPACK state until the size has been checked.
- https://tools.ietf.org/html/rfc7540#section-6.5.2 states that the initial value of SETTINGS_MAX_HEADER_LIST_SIZE is ""unlimited"". We currently use 8k as a limit. We should honor the specifications default value so we don't unintentionally close a connection before the remote peer is aware of the local settings.
- Remove unnecessary object allocation in DefaultHttp2HeadersDecoder and DefaultHttp2HeadersEncoder.

Result:
Fixes https://github.com/netty/netty/issues/6209."
2d113315917bee1991bc2ee409287477edfd8fc9,Typo fix in post encoder and replaced static hashmap with array.
3344cd21acc61819c327976ed5281daa49b0c05e,"Wrap operations requiring SocketPermission with doPrivileged blocks

Motivation:

Currently Netty does not wrap socket connect, bind, or accept
operations in doPrivileged blocks. Nor does it wrap cases where a dns
lookup might happen.

This prevents an application utilizing the SecurityManager from
isolating SocketPermissions to Netty.

Modifications:

I have introduced a class (SocketUtils) that wraps operations
requiring SocketPermissions in doPrivileged blocks.

Result:

A user of Netty can grant SocketPermissions explicitly to the Netty
jar, without granting it to the rest of their application."
ac5f701a5c33b5565d7762bc52d29911829bce8e,"Use less memory during writes when using SslHandler with SslProvider.OpenSsl

Motivation:

In commit fc3c9c9523150190760801dd0fbf014909519942 I changes the way how we calculate the capacity of the needed ByteBuf for wrap operations that happen during writes when the SslHandler is used. This had the effect that the same capacity for ByteBufs is needed for the JDK implementation of SSLEngine but also for our SSLEngine implementation that uses OpenSSL / BoringSSL / LibreSSL. Unfortunally this had the side-effect that applications that used our SSLEngine implementation now need a lot more memory as bascially the JDK implementation always needs a 16kb buffer for each wrap while we can do a lot better for our SSLEngine implementation.

Modification:

- Resurrect code that calculate a better ByteBuf capacity when using our SSLEngine implementation and so be able to safe a lot of memory
- Add test-case to ensure it works as expected and is not removed again later on.

Result:

Memory footprint of applications that uses our SSLEngine implementation based on OpenSSL / BoringSSL / LibreSSL is back to the same amount of before commit fc3c9c9523150190760801dd0fbf014909519942."
1b313972492c1259db23c5481986bb21d2309dec,"Deprecate methods on SslHandler that have other replacements

Motivation:

SslHandler has multiple methods which have better replacements now or are obsolete. We should mark these as `@Deprecated`.

Modifications:

Mark methods as deprecated.

Result:

API cleanup preparation."
4e04b63746d66aa1c1ef38d1505a9f0cdd62c26b,"Update netty-tcnative

Motivation:

We released a new netty-tcnative version as a memory leak was fixed.

Modifications:

Update netty-tcnative.

Result:

Fixes [#6249]."
e9fa40d7707d08ecc3c1f649a13817670b76613a,"Ensure calling ReferenceCountedOpenSslEngine.wrap(...) after closeOutbound() was called will not throw an SSLException

Motivation:

PR [#6238] added guards to be able to call wrap(...) / unwrap(...) after the engine was shutdown. Unfortunally one case was missed which is when closeOutbound() was called and produced some data while closeInbound() was not called yet.

Modifications:

Correctly guard against SSLException when closeOutbound() was called, produced data and someone calls wrap(...) after it.

Result:

No more SSLException. Fixes [#6260]."
907726988dec6841933afa18d70f07830097b56a,"Update hpack Decoder CTOR to allow for overflow in maxHeaderList size, as we do when we apply our ack'ed settings
This prevents us from having the first request, that hasn't ack'ed the setting causing a GOAWAY when we'd would
be under the maxHeaderListSizeGoAway that would have been set after the settings ack."
640ef615be1bbf48f8506151518c0c55065e7f99,"Allow to configure SslHandler to wait for close_notify response before closing the Channel and fix racy flush close_notify timeout scheduling.

Motivation:

SslHandler closed the channel as soon as it was able to write out the close_notify message. This may not be what the user want as it may make sense to only close it after the actual response to the close_notify was received in order to guarantee a clean-shutdown of the connection in all cases.

Beside this closeNotifyFlushTimeoutMillis is volatile so may change between two reads. We need to cache it in a local variable to ensure it not change int between. Beside this we also need to check if the flush promise was complete the schedule timeout as this may happened but we were not able to cancel the timeout yet. Otherwise we will produce an missleading log message.

Modifications:

- Add new setter / getter to SslHandler which allows to specify the behavior (old behavior is preserved as default)
- Added unit test.
- Cache volatile closeNotifyTimeoutMillis.
- Correctly check if flush promise was complete before we try to forcibly close the Channel and log a warning.
- Add missing javadocs.

Result:

More clean shutdown of connection possible when using SSL and fix racy way of schedule close_notify flush timeouts and javadocs."
a416b79d865fd6ce11ecce74d53ce2dfd8be007f,"DnsNameResolver.resolve*(...) never notifies the Future when empty hostname is used.

Motivation:

When an empty hostname is used in DnsNameResolver.resolve*(...) it will never notify the future / promise. The root cause is that we not correctly guard against errors of IDN.toASCII(...) which will throw an IllegalArgumentException when it can not parse its input. That said we should also handle an empty hostname the same way as the JDK does and just use ""localhost"" when this happens.

Modifications:

- If the try to resolve an empty hostname we use localhost
- Correctly guard against errors raised by IDN.toASCII(...) so we will always noify the future / promise
- Add unit test.

Result:

DnsNameResolver.resolve*(...) will always notify the future."
d5093659743ee8cc67c06c0ecfa72ba70bb6dae5,"Move location of where oversized headers that don't exceed the go away limit is done
so that the check occurs after all headers have been read"
9bec25a6eb491a3aa2b680d098113581bbc29bf1,"Set the Transfer-Encoding header instead of adding

Motivation:

HttpUtil.setTransferEncodingChunked could add a second Transfer-Encoding
header if one was already present. While this is technically valid, it
does not appear to be the intent of the method.

Result:

Only one Transfer-Encoding header is present after calling this method."
44add3c5255479eb0a6bdd266e53f50d11c76684,"Log correct value for useCacheForAllThreads

Motivation:

Log about ""-Dio.netty.allocator.useCacheForAllThreads"" is missing log placeholder, and so can't output correct value.

Modification:

- Add placeholder

Result:

Fixes #6265 ."
b69c7723f2cb54ce52d2f1b5a19febd66b725772,"Update jetty-alpn-agent to support latest JDK releases.

Motivation:

We need to update jetty-alpn-agent to support latest JDK releases.

Modifications:

Update jetty-alpn-agent to 2.0.6

Result:

Be able to run tests with latest JDK releases."
5cd8133477aa87445fe4277550094237fd2585ed,"Add unit test that shows we correctly return BUFFER_UNDERFLOW

Motivation:

We should test that we correctly return BUFFER_UNDERFLOW if the src buffer not contains enough data to unwrap it.

Modification:

Add unit test to verify behaviour.

Result:

Better test coverrage of SSLEngine implementations."
f4c2c1926f47e38a9d6156af1e651daa79ea0e0a,"Fixed rfc violation about sending extension frame in the middle of headers

Motivation:

At rfc7540 5.5, it said that it's not permitted to send extension
frame in the middle of header block and need be treated as
protocol error

Modifications:

When received a extension frame, in netty it's called unknown frame,
will verify that is there an headersContinuation exists

Result:

When received a extension frame in the middle of header block,
will throw connection error and closed the connection"
8dda984afe9477fa09fe166305381d9ed1afa7c4,"Null out references to tmpNioBuf and chunk to allow quicker collecting

Motivation:

In PooledByteBuf we missed to null out the chunk and tmpNioBuf fields before recycle it to the Recycler. This could lead to keep objects longer alive then necessary which may hold a lot of memory.

Modifications:

Null out tmpNioBuf and chunk before recycle.

Result:

Possible to earlier GC objects."
81735c2535591a036a534efd41c5f2b56fa04fbb,"Check if Epoll is avaible when construct EpollEventLoopGroup

Motivation:

We should call Epoll.ensureAvailability() when init EpollEventLoopGroup to fail fast and with a proper exception.

Modifications:

Call Epoll.ensureAvailability() during EpollEventLoopGroup init.

Result:

Fail fast if epoll is not availability (for whatever reason)."
e13da218e9509058d99ba2ec9b60bbf46d6d67ce,"HTTP/2 revert Http2FrameWriter throws API change

Motivation:
2fd42cfc6b32dacb812c6f2ecef8522cd94718d4 fixed a bug related to encoding headers but it also introduced a throws statement onto the Http2FrameWriter methods which write headers. This throws statement makes the API more verbose and is not necessary because we can communicate the failure in the ChannelFuture that is returned by these methods.

Modifications:
- Remove throws from all Http2FrameWriter methods.

Result:
Http2FrameWriter APIs do not propagate checked exceptions."
91f050d2ef6b22b7aec187aa1cf4593955dcea82,"More precise calculate the maximum record size when using SslProvider.OPENSSL* and so decrease mem usage.

Motivation:

We used ca 2k as maximum overhead for encrypted packets which is a lot more then what is needed in reality by OpenSSL. This could lead to the need of more memory.

Modification:

- Use a lower overhead of 86 bytes as defined by the spec and openssl itself
- Fix unit test to use the correct session to calculate needed buffer size

Result:

Less memory usage."
7a39afd031accea9ee38653afbd58eb1c466deda,"Correctly detect which protocols are supported when using OpenSSL

Motivation:

We failed to properly test if a protocol is supported on an OpenSSL installation and just always returned all protocols.

Modifications:

- Detect which protocols are supported on a platform.
- Skip protocols in tests when not supported. This fixes a build error on some platforms introduced by [#6276].

Result:

Correctly return only the supported protocols"
94cb389c04bd084f698345aac4cb70b02e5da086,"Restore add(Promise) and addAll(Promise...) methods to PromiseCombiner.

Motivation:

A testing goof in 7c630fe introduced a binary incompatibility when the old Promise-specific `add` and `addAll` methods in PromiseCombiner were generalized to accept `Futures`.

Modification:

- Restore (but mark as `@Deprecated`) old PromiseCombiner methods.
- Fixed a couple minor documentation typos because sure why not.

Result:

`PromiseCombiner` is binary-compatible with previous versions of Netty."
f10f8a31318a2e408b979de6a8ed49caa615d86a,"Calculate correct count for tiny/small/normal allocation

Motivation:

Disable ThreadLocal Cache, then allocate Pooled ByteBuf and release all these buffers, PoolArena's tiny/small/normal allocation count is incorrect.

Modifications:

- Calculate PoolArena's tiny/small/normal allocation one time
- Add testAllocationCounter TestCase

Result:

Fixes #6282 ."
7736534b34bff54b6c874b2f45ab73138071d3ee,"Ensure tests added in 91f050d2ef6b22b7aec187aa1cf4593955dcea82 work with different openssl installations

Motivation:

Tests were added in 91f050d2ef6b22b7aec187aa1cf4593955dcea82 to run with different protocols / ciphers. These may fail currently when openssl was compiled without support for the protocol / ciphers.

Modifications:

- Refactor tests to easier understand for which protocol / cipher it failed
- Not fail the test if the protocol is not supported with the used openssl version.

Result:

More robust testing."
76e22e63f35f52d17b407a7f29f709e4c1efb46b,[maven-release-plugin] prepare release netty-4.1.8.Final
735d6dd63687b5bb5a6cb87b8074468fe9ea4991,[maven-release-plugin] prepare for next development iteration
ead993898002a8252b5c005cb26693911c934871,"Include Http 1 request in error message

Motivation:

When An HTTP server is listening in plaintext mode, it doesn't have
a chance to negotiate ""h2"" in the tls handshake.  HTTP 1 clients
that are not expecting an HTTP2 server will accidentally a request
that isn't an upgrade, which the HTTP/2 decoder will not
understand.  The decoder treats the bytes as hex and adds them to
the error message.

These error messages are hard to understand by humans, and result
in extra, manual work to decode.

Modification:

If the first bytes of the request are not the preface, the decoder
will now see if they are an HTTP/1 request first.  If so, the error
message will include the method and path of the original request in
the error message.

In case the path is long, the decoder will check up to the first
1024 bytes to see if it matches.  This could be a DoS vector if
tons of bad requests or other garbage come in.  A future optimization
would be to treat the first few bytes as an AsciiString and not do
any Charset decoding.  ByteBuf.toCharSequence alludes to such an
optimization.

The code has been left simple for the time being.

Result:

Faster identification of errant HTTP requests."
0d5b665fba20035d805377f668b021d37984d4df,"Automatically decode DNS domain name to unicode

Motivation:

DnsNameResolver will return the domain / host name as ascii code using punycode (https://tools.ietf.org/html/rfc3492). This is different to what the JDK does which always convert it to unicode. We should do the same by default but allow to also not do it.

Modifications:

- Add new builder method on DnsNameResolverBuilder which allow to disable / enable converting. Default is to convert just like the JDK does.
- Add unit tests for it.

Result:

DnsNameResolver and JDK impl behave the same way."
66b17310418230d12c21f1f91287c22022d8d847,"PooledByteBuf.capacity(...) not enforces maxCapacity()

Motivation:

PooledByteBuf.capacity(...) miss to enforce maxCapacity() and so its possible to increase the capacity of the buffer even if it will be bigger then maxCapacity().

Modifications:

- Correctly enforce maxCapacity()
- Add unit tests for capacity(...) calls.

Result:

Correctly enforce maxCapacity()."
6e5b25733f49d2ea843a89b4d547b856142212ec,"HTTP/2 Connection Preface User Event

Motivation:
If an HTTP/2 client writes data before the connection preface the peer will shutdown the socket. Depending on what is in the pipeline (SslHandler) may require different evaluation criteria to infer when the codec-http2 has written the connection preface on behalf of the client. This can lead to unnecessarily complexity and error prone/racy application code.

Modifications:
- Introduce a user event that is fired up the pipeline when codec-http2 writes the connection preface

Result:
Reliable mechanism for applications to use to know when connection preface has been written (related to https://github.com/netty/netty/issues/6272)."
3482651e0c29edfa02f189751c704ebe4fe8f54c,"HTTP/2 Non Active Stream RFC Corrections

Motivation:
codec-http2 couples the dependency tree state with the remainder of the stream state (Http2Stream). This makes implementing constraints where stream state and dependency tree state diverge in the RFC challenging. For example the RFC recommends retaining dependency tree state after a stream transitions to closed [1]. Dependency tree state can be exchanged on streams in IDLE. In practice clients may use stream IDs for the purpose of establishing QoS classes and therefore retaining this dependency tree state can be important to client perceived performance. It is difficult to limit the total amount of state we retain when stream state and dependency tree state is combined.

Modifications:
- Remove dependency tree, priority, and weight related items from public facing Http2Connection and Http2Stream APIs. This information is optional to track and depends on the flow controller implementation.
- Move all dependency tree, priority, and weight related code from DefaultHttp2Connection to WeightedFairQueueByteDistributor. This is currently the only place which cares about priority. We can pull out the dependency tree related code in the future if it is generally useful to expose for other implementations.
- DefaultHttp2Connection should explicitly limit the number of reserved streams now that IDLE streams are no longer created.

Result:
More compliant with the HTTP/2 RFC.
Fixes https://github.com/netty/netty/issues/6206.

[1] https://tools.ietf.org/html/rfc7540#section-5.3.4"
1d128c7a6594e1ffd986fee9723c4305082e23cf,"Switch to netty-tcnative 2.0.0 which uses different package names

Motivation:

Previous versions of netty-tcnative used the org.apache.tomcat namespace which could lead to problems when a user tried to use tomcat and netty in the same app.

Modifications:

Use netty-tcnative which now uses a different namespace and adjust code to some API changes.

Result:

Its now possible to use netty-tcnative even when running together with tomcat."
d688e35e70ea307759976fc32d177b2748d0a14e,"Fixing argument names

Motivation

Misleading argument names

Modifications

Stripping xMillis suffix from arguments because there's a TimeUnit

Result

Less confusion"
1a05463c56c5d93d21de6cfed125969a1033b72f,"More strict testing of handshake behaviour

Motiviation:

We should ensure we not need any extra wrap / unwrap calls during handshake once the handshake was signaled as finished

Modifications:

More strict testing

Result:

Better testing of handshake behaviour"
b9abd3c9fc90cda1781a6f2f181735460a13b75d,Cleanup : for loops for arrays to make code easier to read and removed unnecessary toLowerCase()
0f9b739508ccb57ec6a5fe3296ec138a669cbbc8,"AggregatedFullHttpMessage.replace should also copy a decoder result

Motivation:

HttpObjectAggregator yields full HTTP messgaes (AggregatedFullHttpMessages) that don't respect decoder result when copied/replaced.

Modifications:

Copy the decoding result over to a new instance produced by AggregatedFullHttpRequest.replace or AggregatedFullHttpResponse.replace .

Result:

DecoderResult is now copied over when an original AggregatedFullHttpMessage is being replaced (i.e., AggregatedFullHttpRequest.replace or AggregatedFullHttpResponse.replace is being called).

New unit tests are passing on this branch but are failing on master."
756b78b7dfcf235ea84450a741312d6292b2040b,"Add common tests for ByteBufAllocator / AbstractByteBufAllocator implementations.

Motivation:

We not had tests for ByteBufAllocator implementations in general.

Modifications:

Added ByteBufAllocatorTest, AbstractByteBufAllocatorTest and UnpooledByteBufAllocatorTest

Result:

More tests for allocator implementations."
48f6541cb3b70c4d6b1aeffa0301b88d0e200581,"delete no useful intermediate variables

delete no useful intermediate variables"
66b9be3a469a2cdcc5d18a8b94c679940ce002a9,"Allow to allign allocated Buffers

Motivation:

64-byte alignment is recommended by the Intel performance guide (https://software.intel.com/en-us/articles/practical-intel-avx-optimization-on-2nd-generation-intel-core-processors) for data-structures over 64 bytes.
Requiring padding to a multiple of 64 bytes allows for using SIMD instructions consistently in loops without additional conditional checks. This should allow for simpler and more efficient code.

Modification:

At the moment cache alignment must be setup manually. But probably it might be taken from the system. The original code was introduced by @normanmaurer https://github.com/netty/netty/pull/4726/files

Result:

Buffer alignment works better than miss-align cache."
8a5e42ad2ea091ccc88e02993927f9dd9d4c8205,"Correct fail write with NotYetConnectedException when OioDatagramChannel is not connected yet.

Motivation:

NioDatagramChannel fails a write with NotYetConnectedException when the DatagramChannel was not yet connected and a ByteBuf is written. The same should be done for OioDatagramChannel as well.

Modifications:

Make OioDatagramChannel consistent with NioDatagramChannel

Result:

Correct and consistent implementations of DatagramChannel"
661ff2538e48977b974a78a870fec0712452dd93,"Implement correct handling of recursive DNS

Motivation:

DnsNameResolver does not handle recursive DNS and so fails if you query a DNS server (for example a ROOT dns server) which provides the correct redirect for a domain.

Modification:

Add support for redirects (a.k.a. handling of AUTHORITY section').

Result:

Its now possible to use a DNS server that redirects."
42c035982093d6e08201af9572ea43c7cf269adf,"Do not prefer empty MAC address

Motivation:

When comparing MAC addresses searching for the best MAC address, if
locally-administered address (e.g., from a Docker container) is compared
against an empty MAC address, the empty MAC address will be marked as
preferred. In cases this is the only available MAC address, this leaves
Netty using a random machine ID instead of using a perfectly valid
machine ID from the locally-adminstered address.

Modifications:

This commit modifies the MAC address logic so that the empty MAC address
is not preferred over a locally-administered address. This commit also
simplifies the comparison logic here.

Result:

Empty MAC addresses will not be preferred over locally-administered
addresses thus permitting the default machine ID to be the
locally-adminstered MAC address if it is the only available MAC address."
a7c0ff665cf47dd4ce98e268fda5fcee335cbbb8,"Only use Mockito for mocking.

Motivation:

We used various mocking frameworks. We should only use one...

Modifications:

Make usage of mocking framework consistent by only using Mockito.

Result:

Less dependencies and more consistent mocking usage."
72916b99606b3ddb71ee5a8ace7e4914dd81efec,"Add unit test on DefaultHttp2FrameReader

Motivation:

DefaultHttp2FrameReader contains the logic for how it parsed the network
traffic from http2 client,
it also validate the content is legal or not.
So keep high coverage rate on it will increase the stability of api.

Modifications:

Add unit test on DefaultHttp2FrameReader

Result:

Coverage rate increased"
6353c229fd11c6e6306011d55993775f7685d122,"SslHandler avoid calling wrap/unwrap when unnecessary

Motivation:
The SSLEngine wrap and unwrap methods can be called in a way that has no side effects, but this could involve costly validation and allocation. The SslHandler should avoid calling into these methods if possible.

Modifications:
- wrapNonAppData should provide additional status which can be used by wrap to breakout early if possible

Result:
SslHandler invokes the SSLEngine less."
ccd1d777144d88edd78cb25c17887347d2b80bb2,"Simplification of boolean expression

Motivation:

Simplify code and reduction the logical operations.

Modifications:

Simplify boolean expression.

Result:

Code less and simpler."
14b902fced27440c499bc2500d2410a6bab99805,"Deprecate and ignore ResourceLeakDetector's maxActive parameter

Motivation:
ResourceLeakDetector supports a parameter called maxActive. This parameter is used in attempt to limit the amount of objects which are being tracked for leaks at any given time, and generates an error log message if this limit is exceeded. This assumes that there is a relationship between leak sample rate and object lifetime for objects which are already being tracked. This relationship may appear to work in cases were there are a single leak record per object and those leak records live for the lifetime of the application but in general this relationship doesn't exist. The original motivation was to provide a limit for cases such as HashedWheelTimer to limit the number of instances which exist at any given time. This limit is not enforced in all circumstances in HashedWheelTimer (e.g. if the thread is a daemon) and can be implemented outside ResourceLeakDetector.

Modifications:
- Deprecate all methods which interact with maxActive in ResourceLeakDetectorFactory and ResourceLeakDetector
- Remove all logic related to maxActive in ResourceLeakDetector
- HashedWheelTimer implements its own logic to impose a limit and warn users if too many instances exists at any given time.

Result:
Fixes https://github.com/netty/netty/issues/6225."
3462a86a3ac41230965e3f06d527da6db9b39e04,"Ensure we release the previous retained AddressedEnvelope when we fail to notify the promise.

Motivation:

We need to ensure we release the AddressedEnvelope if we fail to notify the future (as it may be notified before because of an timeout). Otherwise we may leak.

Modifications:

Call release() if we fail to notify the future.

Result:

No more memory leak on notify failure."
9d45f514a47ee8ad5259ee782fcca240017fc3a3,"Add a constant for Cookie ""undefined maxAge""

Motivation:

DefaultCookie currently used an undocumented magic value for undefined
maxAge.

Clients need to be able to identify such value so they can implement a
proper CookieJar.

Ideally, we should add a `Cookie::isMaxAgeDefined` method but I guess
we can’t add a new method without breaking API :(

Modifications:

Add a new constant on `Cookie` interface so clients can use it to
compare with value return by `Cookie.maxAge` and decide if `maxAge` was
actually defined.

Result:

Clients have a better documented way to check if the maxAge attribute
was defined."
007048dddda0eb922952f8b07ea2521d9a5eadef,"DnsNameResolver empty/null hostname missed by a416b79

Motivation:
a416b79 introduced a check for null or empty host name to be compatible with the JDK resolution. However the doResolve(String, Promise) method, and if the doResolve(String, DnsRecord[], Promise, DnsCache) method was overridden the empty/null hostname would not be correctly resolved.

Modifications:
- Move the empty/null host name check into the lowest level doResolve method in DnsNameResolver
- Remove the duplicate logic in InetNameResolver.java which can be bypassed anyways

Result:
By default (unless behavior is overridden) DnsNameResolver resolves null/empty host names to local host just like the JDK."
d06990f43458e9ac7cea803269e83d072ada61f6,"OpenSSL ByteBuffer BIO

Motivation:
Currently Netty utilizes BIO_new_bio_pair so we can control all FD lifetime and event notification but delegates to OpenSSL for encryption/decryption. The current implementation sets up a pair of BIO buffers to read/write encrypted/plaintext data. This approach requires copying of data from Java ByteBuffers to native memory BIO buffers, and also requires both BIO buffers to be sufficiently large to hold application data. If direct ByteBuffers are used we can avoid coyping to/from the intermediate BIO buffer and just read/write directly from the direct ByteBuffer memory. We still need an internal buffer because OpenSSL may generate write data as a result of read calls (e.g. handshake, alerts, renegotiation, etc..), but this buffer doesn't have to be be large enough to hold application data.

Modifications:
- Take advantage of the new ByteBuffer based BIO provided by netty-tcnative instead of using BIO_read and BIO_write.

Result:
Less copying and lower memory footprint requirement per TLS connection."
9c03d49f144f15b796294f2221c85cfe1a3c73a6,"Update to netty-tcnative 2.0.0.Beta2

Motivation:

A new version of netty-tcnative is out.

Modifications:

Update to netty-tcnative 2.0.0.Beta2

Result:

Use latest release."
c95517f7592b4c629cd6d9111c4c0021390841f7,"Cleanup : removed unnecessary 'continue', explicit array creation, unwrapping"
64838f150584385f6d8608ae11959836c5a8eaf9,"Cleanup : validatePromise ranamed to isNotValidPromise and added more tests for corner cases.

Motivation:

Result of validatePromise() is always inverted with if (!validatePromise()).

Modification:

validatePromise() renamed to isNotValidPromise() and now returns inverted state so you don't need to invert state in conditions. Also name is now more meaningful according to returned result.
Added more tests for validatePromise corner cases with Exceptions.

Result:

Code easier to read. No need in inverted result."
64abef5f5b283551f85fab4a1b20627275cffc3f,"Add exposeHeaders and allowedRequestHeaders that accept CharSequence, close #6328

Motivation:

Netty 4.1 introduced AsciiString and defines HttpHeaderNames constants
as such.

It would be convenient to be able to pass them to `exposeHeaders` and
`allowedRequestHeaders` directly without having to call `toString`.

Modifications:

Add `exposeHeaders` and `allowedRequestHeaders` overloads that take a
`CharSequence`.

Result:

More convenient API"
81f9de423c03ec4538f1ba04b89ae049959b698c,"HostsFileParser should allow both IPv4 and IPv6 for a given host

Motivation:

HostsFileParser only retains the first address for each given hostname.
This is wrong, and it’s allowed to have both an IPv4 and an IPv6.

Modifications:

* Have `HostsFileParser` now return a `HostsFileEntries` that contains IPv4 entries and IPv6 entries
* Introduce `ResolvedAddressTypes` to describe resolved address types preferences
* Add a new `ResolvedAddressTypes` parameter to `HostsFileEntriesResolver::address` to account for address types preferences
* Change `DnsNameResolver` constructor to take a `ResolvedAddressTypes`, allowing for a null value that would use default
* Change `DnsNameResolverBuilder::resolvedAddressTypes` to take a `ResolvedAddressTypes`
* Make `DnsNameResolver::resolvedAddressTypes` return a `ResolvedAddressTypes`
* Add a static `DnsNameResolverBuilder::computeResolvedAddressTypes` to ease converting from `InternetProtocolFamily`

Result:

We now support hosts files that contains IPv4 and IPv6 pairs for a same
hostname."
667cbe992314c28bf7a8cfda353874841d2bc91f,Fix compilation error introduced by 81f9de423c03ec4538f1ba04b89ae049959b698c
fe522fb18e829226ffcc4cdb92fe4b98e2664d08,"Update Groovy to 2.4.8 for Java 9-ea+154 support.

Motivation:

Update of Groovy is needed to compile on recent java9 releases.

Modification:

Update to Groovy 2.4.8

Result:

This change allows Netty to be successfully compiled on more recent Java 9 previews."
54c9ecf682eeafaaf7c826903c60f1c783b84dea,"DnsNameResolver should respect /etc/resolv.conf and /etc/resolver

Motivation:
The JDK uses gethostbyname for blocking hostname resoltuion. gethostbyname can be configured on Unix systems according to [1][2]. This may impact the name server that is used to resolve particular domains or just override the default fall-back resolver. DnsNameResolver currently ignores these configuration files which means the default resolution behavior is different than the JDK. This may lead to unexpected resolution failures which succeed when using the JDK's resolver.

Modifications:
- Add an interface which can override what DnsServerAddressStream to use for a given hostname
- Provide a Unix specific implementation of this interface and implement [1][2]. Some elements may be ignored sortlist, timeout, etc...

Result:
DnsNameResolver behaves more like the JDK resolver by default.

[1] https://linux.die.net/man/5/resolver
[2] https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/resolver.5.html"
b91dd0678d290a70817ddc44bb5ced2baed275fd,"Resolver package is unstable

Motivation:
The resolver package had some changes late in the 4.1.CR phase and the intention was to mark this package as unstable until these interfaces solidify, but we forgot to mark the package and public classes with the unstable annotation.

Modifications:
- resolver package public interfaces and package-info should be annotated with @UnstableApi

Result:
The unstable nature of the resolver package is more clearly communicated."
6765e9f99db352a7f814e10d77338760432db155,"CipherSuiteConverter NPE

Motivation:
CipherSuiteConverter may throw a NPE if a cipher suite from OpenSSL does not match the precomputed regular expression for OpenSSL ciphers. This method shouldn't throw and instead just return null.

Modifications:
- if cacheFromOpenSsl(..) fails the conversion toJava should return null

Result:
Fixes https://github.com/netty/netty/issues/6336."
a1b5b5dcca8542e51b69bcd4d7ccbc51fe7ce7f4,"EpollRecvByteAllocatorHandle doesn't inform delegate of more data

Motivation:
EpollRecvByteAllocatorHandle intends to override the meaning of ""maybe more data to read"" which is a concept also used in all existing implementations of RecvByteBufAllocator$Handle but the interface doesn't support overriding. Because the interfaces lack the ability to propagate this computation EpollRecvByteAllocatorHandle attempts to implement a heuristic on top of the delegate which may lead to reading when we shouldn't or not reading data.

Modifications:
- Create a new interface ExtendedRecvByteBufAllocator and ExtendedHandle which allows the ""maybe more data to read"" between interfaces
- Deprecate RecvByteBufAllocator and change all existing implementations to extend ExtendedRecvByteBufAllocator
- transport-native-epoll should require ExtendedRecvByteBufAllocator so the ""maybe more data to read"" can be propagated to the ExtendedHandle

Result:
Fixes https://github.com/netty/netty/issues/6303."
9ce74d46c19a5f7ad12d8d814ef6e779f29dbfef,"Correct unit test flaw introduced in 54c9ecf682eeafaaf7c826903c60f1c783b84dea

Motivation:
54c9ecf682eeafaaf7c826903c60f1c783b84dea introduced a unit tests which attempted to exclude addresses which resolved to loop back addresses from an assert statement. This was done with a static check for localhost but depending on machine configuration it is possible for other interfaces to be resolved.

Modifications:
- Use InetAddress#isLoopbackAddress() instead of string match on localhost

Result:
DnsNameResolverTest#testNameServerCache is more reliable."
413d6eba53232778703e76689c7e6481d5dc8f0f,"EPOLL include error description and cause in exceptions

Motivation:
EPOLL annotates some exceptions to provide the remote address, but the original exception is not preserved. This may make determining a root cause more difficult. The static EPOLL exceptions references the native method that failed, but does not provide a description of the actual error number. Without the description users have to know intimate details about the native calls and how they may fail to debug issues.

Modifications:
- annotated exceptions should preserve the original exception
- static exceptions should include the string description of the expected errno

Result:
EPOLL exceptions provide more context and are more useful to end users."
d8596d2d9065002072235d81dbb70fe1a9bcf3b3,"Two tests are missing `@Test` annotations

Motivation:

ReadOnlyByteBufTest contains two tests which are missing the `@Test` annotation and so will never run.

Modifications:

Add missing annotation.

Result:

Tests run as expected."
54339c08ac8dbba2ad72216293ad6d2eaa931314,"Only try to calculate direct memory offset when sun.misc.Unsafe is present

Motivation:

We should only try to calculate the direct memory offset when sun.misc.Unsafe is present as otherwise it will fail with an NPE as PlatformDependent.directBufferAddress(...) will throw it.
This problem was introduced by 66b9be3a469a2cdcc5d18a8b94c679940ce002a9.

Modifications:

Use offset of 0 if no sun.misc.Unsafe is present.

Result:

PooledByteBufAllocator also works again when no sun.misc.Unsafe is present."
9b2b3e251263f101fb594651659cb6aed01a4a42,"Ensure tests pass when sun.misc.Unsafe is not present

Motivation:

We need to ensure we pass all tests when sun.misc.Unsafe is not present.

Modifications:

- Make *ByteBufAllocatorTest work whenever sun.misc.Unsafe is present or not
- Let Lz4FrameEncoderTest not depend on AbstractByteBufAllocator implementation details which take into account if sun.misc.Unsafe is present or not

Result:

Tests pass even without sun.misc.Unsafe."
34ea09e5524fa9da4f482822bf7b1a16ef69731f,Add missing assumeTrue(...) that were not added in 54339c08ac8dbba2ad72216293ad6d2eaa931314
f7c8cf9cb913e6bb5e55a1676f36187bfccba808,"Cleanup code in ssl package.

Motivation:

There were some warnings for the code in the ssl package.

Modifications:

- Remove not needed else blocks
- Use correctly base class for static usage
- Replace String.length() == 0 with String.isEmpty()
- Remove unused code

Result:

Less warnings and cleaner code."
974a251de892681aa9e363c1c7c0751412b77770,"Not fail tests when running on JDK9+ and init of MarshallingFactory fails

Motivation:

To use jboss-marshalling extra command-line arguments are needed on JDK9+ as it makes use of reflection internally.

Modifications:

Skip jboss-marshalling tests when running on JDK9+ and init of MarshallingFactory fails.

Result:

Be able to build on latest JDK9 release."
0cf3f54a8d284d76726150a72d1b109969f8b72a,"Adding 'final' keyword for private fields where possible

Motivation

Missing 'final' keyword for fields

Modifications

Add 'final' for fields where possible

Result

More safe and consistent code"
adcde84253e7ae6d6ae8e64c73c176d9272b26da,"Allow to unwrap ByteBuffer > MAX_ENCRYPTED_PACKET_LENGTH

Motivation:

We should remove the restriction to only allow to call unwrap with a ByteBuffer[] whose cumulative length exceeds MAX_ENCRYPTED_PACKET_LENGTH.

Modifications:

Remove guard.

Result:

Fixes [#6335]."
371c0ca0f855b5c03ac7a784d5767a86bccbf2e8,"Eliminate unnessary wrapping when call ByteBuf.asReadOnly() in some cases

Motivation:

We can eliminate unnessary wrapping when call ByteBuf.asReadOnly() in some cases to reduce indirection.

Modifications:

- Check if asReadOnly() needs to create a new instance or not
- Add test cases

Result:

Less object creation / wrapping."
f09a721d7fa62ca951e7bed17ba94180aaa1d8ae,"Expose the chunkSize used by PooledByteBufAllocator.

Motivation:

Sometimes it may be useful to know the used chunkSize.

Modifications:

Add method to expose chunkSize.

Result:

More exposed details."
fd2e142e745b8e99983d74c71a0fd3574449e188,"Update to latest jmh version

Motivation:

We use an outdated jmh version.

Modifications:

Update to jmh 1.17.4.

Result:

Using latest jmh version."
78586a99b6c23dc7f847838aaae6be70d6d7ca9b,"Ensure CombinedChannelDuplexHandler can not be shared.

Motivation:

CombinedChannelDuplexHandler must not be shared as it contains state.

Modifications:

Enforce that it is not shared.

Result:

Fixes [#6333]"
90bc60547784877366a3294e6b945a5241b7099f,"Initialization of PlatformDependent0 fails on Java 9

Motivation:

Initialization of PlatformDependent0 fails on Java 9 in static initializer when calling setAccessible(true).

Modifications:

Add RefelectionUtil which can be used to safely try if setAccessible(true) can be used or not and if not fail back to non reflection.

Result:

Fixed [#6345]"
506f0d8f8c10e1b24924f7d992a726d7bdd2e486,"Cleanup : String.length() == 0 replaced with String.isEmpty, removed unnecessary assert, class cast"
591293bfb4f6a48a311d195303ce772fb801ec95,"Change minimum JDK version for compilation to 1.8

Motivation:

We previously changed netty to always compile with java7 as otherwise source compatibility was broken.

This was reported in [#3548] but was fixed in the meantime:
- https://bugs.openjdk.java.net/browse/JDK-8029240
- https://bugs.openjdk.java.net/browse/JDK-8030855

Modifications:

Change minimum JDK version for compilation to 1.8

Result:

Easier to maintain code."
cd3bf3df58c3ab4462578284e7378571603a1721,"Consume tcnative options update

Motivation:
tcnative has updated how constants are defined and removed some constants which are either obsolete or now set directly in tcnative.

Modifications:
- update to compile against tcnative changes.

Result:
Netty compiles with tcnative options changes."
fdcad3150efde5676a4b895236703710ae15e9e4,"Use tcnative's new setVerify modes

Modifications:
tcnative made some fixes and API changes related to setVerify. We should absorb these changes in Netty.

Modifications:
- Use tcnatives updated APIs
- Add unit tests to demonstrate correct behavior

Result:
Updated to latest tcnative code and more unit tests to verify expected behavior."
84ebb4c315eb741e9ddc848422cf544706811434,Fix checkstyle issues introduced by fdcad3150efde5676a4b895236703710ae15e9e4
c521c72178691dc9a0fe12a726c09590ca085738,"SSLEngineTest cleanup

Motivation:
OpenSslEngineTest has unused imports and SSLEngineTest uses a fixed port which was used for debugging.

Modifications:
- Remove unused imports
- Use ephemeral port

Result:
Cleaner test code."
d60e37cb3da83af9541709284bb3532f489e0318,"OpenSslEngine wrap may not consume all data

Motivation:
If the OpenSslEngine has bytes pending in the non-application buffer and also generates wrapped data during the handshake then the handshake data will be missed. This will lead to a handshake stall and eventually timeout. This can occur if the non-application buffer becomes full due to a large certificate/hello message.

Modification:
- ReferenceCountedOpenSslEngine should not assume if no data is flushed from the non-application buffer that no data will be produced by the handshake.

Result:
New unit tests with larger certificate chains don't fail."
c12908d608114856900d0f1a37dafd4cdcd6eacf,"Allow to compile and run tests with different java versions

Motivation:

As we now need to compile with java8 we should still allow to run the tests with a different java version to ensure everythin also works with java 7 and 6.

Modifications:

Allow to pass ""-DtestJavaHome"" to the build and so use a different java version during running the tests.

Result:

Be able to run tests with different java versions."
5728e0eb2cf0d2fe267d25c9f85a0a061dc7ab5f,"Use the correct arguments when run with jdk9

Motivation:

We need to pass special arguments to run with jdk9 as otherwise some tests will not be able to run.

Modifications:

Allow to define extra arguments when running with jdk9

Result:

Tests pass with jdk9"
b7acae03f286d8374f19db067348b247d503b883,"Update tcnative package names

Motivation:

tcnative was moved into an internal package.

Modifications:

Update package for tcnative imports.

Result:

Use correct package names for tcnative."
c92565d5c7000d2bd74355fe18cbdf98bfc5ba0d,"Correct expect header handling

Motivation:

Today, the HTTP codec in Netty responds to HTTP/1.1 requests containing
an ""expect: 100-continue"" header and a content-length that exceeds the
max content length for the server with a 417 status (Expectation
Failed). This is a violation of the HTTP specification. The purpose of
this commit is to address this situation by modifying the HTTP codec to
respond in this situation with a 413 status (Request Entity Too
Large). Additionally, the HTTP codec ignores expectations in the expect
header that are currently unsupported. This commit also addresses this
situation by responding with a 417 status.

Handling the expect header is tricky business as the specification (RFC
2616) is more complicated than it needs to be. The specification defines
the legitimate values for this header as ""100-continue"" and defines the
notion of expectatation extensions. Further, the specification defines a
417 status (Expectation Failed) and this is where implementations go
astray. The intent of the specification was for servers to respond with
417 status when they do not support the expectation in the expect
header.

The key sentence from the specification follows:

    The server MUST respond with a 417 (Expectation Failed) status if
    any of the expectations cannot be met or, if there are other
    problems with the request, some other 4xx status.

That is, a server should respond with a 417 status if and only if there
is an expectation that the server does not support (whether it be
100-continue, or another expectation extension), and should respond with
another 4xx status code if the expectation is supported but there is
something else wrong with the request.

Modifications:

This commit modifies the HTTP codec by changing the handling for the
expect header in the HTTP object aggregator. In particular, the codec
will now respond with 417 status if any expectation other than
100-continue is present in the expect header, the codec will respond
with 413 status if the 100-continue expectation is present in the expect
header and the content-length is larger than the max content length for
the aggregator, and otherwise the codec will respond with 100 status.

Result:

The HTTP codec can now be used to correctly reply to clients that send a
100-continue expectation with a content-length that is too large for the
server with a 413 status, and servers that use the HTTP codec will now
no longer ignore expectations that are not supported (any value other
than 100-continue)."
43a2315372a8d642ce4df14db2ebfd001b9538e0,"Skip SSLEngineTests that depend on KeyManagerFactory when this is not supported by the openssl version.

Motivation:

Some version of openssl dont support the needed APIs to use a KeyManagerFactory. In this case we should skip the tests.

Modifications:

- Use assumeTrue(...) to skip tests that need a KeyManagerFactory and its not supported.

Result:

Tests pass on all openssl versions we support."
847359fd36c28fa360090459d1243a9603e47786,"Fix incorrect delegate in overriden method in JdkOpenSslEngineInteroptTest

Motivation:

JdkOpenSslEngineInteroptTest.mySetupMutualAuthServerIsValidClientException(...) delegated to the wrong super method.

Modifications:

Fix delegate

Result:

Correct test-code."
84188395be36893b214fcf63cea1544e35b2a654,"Remove backports of JDK8 classes

Motivation:

Java8 is out now for some time and JDK7 is no longer supported officially. We should remove all our backports and just use what the JDK provides us. This also will allow us to use intrinsics that are offered by the JDK implementations.

Modifications:

Remove all backports of jdk8 classes.

Result:

Use what the JDK offers us. This also fixes [#5458]"
d59b4840c15d80f34a208aa090054c2e363b4426,"Cleanup ChannelId handling of basic methods

Motiviation:

Simplify implementation of compareTo/equals/hashCode for ChannelIds.

Modifications:

We simplfy the hashCode implementation for DefaultChannelId by not
making it random, but making it based on the underlying data. We fix the
compareTo implementation for DefaultChannelId by using lexicographic
comparison of the underlying data array. We fix the compareTo
implementation for CustomChannelId to avoid the possibility of overflow.

Result:

Cleaner code that is easier to maintain."
544d771152a128d24a3bad77c68f00a31adc112c,Checkstyle cleanup from d59b4840c15d80f34a208aa090054c2e363b4426
4431ad894dab3848ec2f80d1da16fad2cc253ad7,"OpenSslEngine may lose data if the non-application buffer is small/full

Motivation:
If an event occurs which generates non-application data (shutdown, handshake failure, alert generation, etc...) and the non-application buffer in the ByteBuffer BIO is full (or sufficiently small) we may not propagate all data to our peer before tearing down the socket.

Modifications:
- when wrap() detects the outbound is closed, but there is more data pending in the non-application buffers, we must also check if OpenSSL will generate more data from calling SSL_shutdown again
- when wrap() detects a handshakeExcpetion during failure we should check if OpenSSL has any pending data (in addition to the non-application buff) before throwing the handshake exception

Result:
OpenSslEngine more reliably transmits data to the peer before closing the socket."
b2f7e8648eaa1c18ef6fb7c1d60c6bf1fe77a627,"Fix ReferenceCountedOpenSslEngine.getEnabledProtocols() when using boringssl

Motivation:

Commit cd3bf3df58c3ab4462578284e7378571603a1721 made netty observe the latest version of netty-tcnative which changed the way how static fields are computed for various SSL.* values. This lead to have SSL_OP_NO_SSLv2 become 0 when using boringssl as boringssl not supports SSLv2 at all. In the logic of ReferenceCountedOpenSslEngine.getEnabledProtocols() we not expect to have a zero value and so our logic fails.

Modifications:

Check we actual support the protocol before return it as enabled.

Result:

SSLEngineTest.testEnablingAnAlreadyDisabledSslProtocol passes again with boringssl"
8a3a3245df64351283714773dc23cee8322b14d3,"Ensure Unsafe buffer implementations are used when sun.misc.Unsafe is present

Motivation:

When sun.misc.Unsafe is present we want to use *Unsafe*ByteBuf implementations. We missed to do so in PooledByteBufAllocator when the heapArena is null.

Modifications:

- Correctly use UnpooledUnsafeHeapByteBuf
- Add unit tests

Result:

Use most optimal ByteBuf implementation."
1843b318850ac7a3990c13b1d275e0e37491301e,"Guard against having NetworkInterface.getNetworkInterfaces() return null

Motivation:

NetworkInterface.getNetworkInterfaces() may return null if no network interfaces are found. We should guard against it.

Modifications:

Check for null return value.

Result:

Fixes [#6384]"
9ee4cc0ada3d8e46b139671dabfbfd35c8be3308,"Correct comment for allowMaskMismatch parameter

Motivation:

The allowMaskMismatch parameter used throughout websocketx allows frames
with noncompliant masks when set to true, not false.

Modification:

Changed the javadoc comment everywhere it appears.

Result:

Fixes #6387"
f3dd4101425165496490f9c975ca2e556773c663,"EPOLLRDHUP prematurely marking input as shutdown

Motivation:
When the EPOLLRDHUP event is received we assume that the read side of the FD is no longer functional and force the input state to be shutdown. However if the channel is still active we should rely upon EPOLLIN and read to indicate there is no more data before we update the shutdown state. If we do not do this we may not read all pending data in the FD if the RecvByteBufAllocator doesn't want to consume it all in a single read operation.

Modifications:
- AbstractEpollChannel#epollRdHupReady() shouldn't force shutdown the input if the channel is active

Result:
All data can be read even if the RecvByteBufAllocator doesn't read it all in the current read loop.
Fixes https://github.com/netty/netty/issues/6303"
0befcd8431dc9debc0fc78961d79116d69f4e8b1,"EpollDatagramChannel avoid getOption

Motivation:
EpollDatagramChannel uses getOption in the isActive method. getOption is backed by a relatively large conditional if/else if block and this conditional checking can be avoided in the epoll transport.

Modifications:
- Add EpollDatagramChannelConfig#getActiveOnOpen and use this in EpollDatagramChannel

Result:
Conditional checking due to getOption is removed from EpollDatagramChannel."
ddd0e2f1842340eac03b2954145324712b078549,"Enforce java8 for compilation

Motivation:

Commit 591293bfb4f6a48a311d195303ce772fb801ec95 changed the build to need java8 but missed to adjust the enforce rule as well.

Modifications:

Enforce java8+

Result:

Quickly fail when user tries to compile with pre java8"
c5324ea48c1f1e2d4bacbf84899a67034474c4e0,"Make netty build work on Java9

Motivation:

We missed some stuff in 5728e0eb2cf0d2fe267d25c9f85a0a061dc7ab5f and so the build failed on java9

Modifications:

- Add extra cmdline args when needed
- skip the autobahntestsuite as jython not works with java9
- skip the osgi testsuite as the maven plugin not works with java9

Result:

Build finally passed on java9"
6ac5f35077925ebe2d76e9e2e1eab51a8b5eb35b,"Use Unsafe to read ByteBuffer.address field to make it work on Java9 as well.

Motivation:

Java9 does not allow changing access level via reflection by default. This lead to the situation that netty disabled Unsafe completely as ByteBuffer.address could not be read.

Modification:

Use Unsafe to read the address field as this works on all Java versions.

Result:

Again be able to use Unsafe optimisations when using Netty with Java9"
4d7d478a3dd7ef79e8d18707e573e46b3babe64e,Update JCTools to 2.0.1
795f318c3c11ec0520e7acd963ad4b310c287c20,"Use a single array in SelectedSelectionKeySet

Motivation:
SelectedSelectionKeySet currently uses 2 arrays internally and users are expected to call flip() to access the underlying array and switch the active array. However we do not concurrently use 2 arrays at the same time and we can get away with using a single array if we are careful about when we reset the elements of the array.

Modifications:
- Introduce SelectedSelectionKeySetSelector which wraps a Selector and ensures we reset the underlying SelectedSelectionKeySet data structures before we select
- The loop bounds in NioEventLoop#processSelectedKeysOptimized can be defined more precisely because we know the real size of the underlying array

Result:
Fixes https://github.com/netty/netty/issues/6058"
38496a23da6eba10f719c68678cae35f8ac1c75c,Update to netty-tcnative 2.0.0.Beta4
fbf0e5f4ddad88a9d593cfb357c5f466c72ae977,"Prefer JDK ThreadLocalRandom implementation over ours.

Motivation:

We have our own ThreadLocalRandom implementation to support older JDKs . That said we should prefer the JDK provided when running on JDK >= 7

Modification:

Using ThreadLocalRandom implementation of the JDK when possible.

Result:

Make use of JDK implementations when possible."
56694ebc0f3f9711d9a5e29e8763b3bf87902718,"Cleanup from fbf0e5f4ddad88a9d593cfb357c5f466c72ae977

Motivation:
ThreadLocalInsecureRandom still referenced ThreadLocalRandom directly, but shouldn't.

Modifications:
ThreadLocalInsecureRandom should reference PlatformDependent#threadLocalRandom() in comments

Result:
Less usage of internal.ThreadLocalRandom."
5de4029b43cbd6ab257480066d655008a573371c,Checkstyle fix from 56694eb
67be7c5b9f5920d5f99d40e8b483df112e103ba8,"Log why it was not possible to use ByteBuffer.cleaner

Motivation:

We should log why we can not use ByteBuffer.cleaner and so maybe allow the user to fix it.

Modifications:

- Use Unsafe to access the field
- Log the exception when we can not use ByteBuffer.cleaner

Result:

Easier to debug why using cleaner is not possible."
d8e6fbb9c3656663f41797a15f38bb25fdcab834,"OpenSslEngine should respect hostname verification

Motivation:
OpenSSL doesn't automatically verify hostnames and requires extract method calls to enable this feature [1]. We should allow this to be configured.

Modifications:
- SSLParamaters#getEndpointIdentificationAlgorithm() should be respected and configured via tcnative interfaces.

Result:
OpenSslEngine respects hostname verification.

[1] https://wiki.openssl.org/index.php/Hostname_validation"
ad51cda2cd96400ef07a3b0107baba3b13b473a4,Introduced MqttMessageBuilders to fluently create MQTT messages
d0a3877535814153306f8f934e2120204cd22fd7,"Ensure trying to recover from exceptionCaught on the ServerChannel works as expected

Motivation:

When ""Too many open files"" happens,the URLClassLoader cannot do any classloading because URLClassLoader need a FD  for findClass. Because of this the anonymous inner class that is created to re-enable auto read may cause a problem.

Modification:

Pre-create Runnable that is scheduled and so ensure it is not lazy loaded.

Result:

No more problems when try to recover."
007e8969c1ed652169e37b1039f3c5f87baac3f1,"Missing release modules in netty-all project

Motivation:

codec-redis and codec-xml are release modules and should be included in netty-all.

Modifications:

Add codec-redis and codec-xml modules to netty-all pom.

Result:

codec-redis and codec-xml can be used with the netty-all artifact."
c57a1bdb2d4471af543399f46d344802986c6cd9,"Log used native library by netty-tcnative

Motivation:

As netty-tcnative can be build against different native libraries and versions we should log the used one.

Modifications:

Log the used native library after netty-tcnative was loaded.

Result:

Easier to understand what native SSL library was used."
576baf8e6c2cfaebdbb2c85022d57e3d0dcc74ff,"Update to autobahntestsuite-maven-plugin 0.1.4 to support Java9

Motivation:

autobahntestsuite-maven-plugin 0.1.4 was released and supports Java9.

Modifications:

Update plugin to be able to run tests on Java9

Result:

Autobahntestsuite can also be run on Java9."
2dffc2f9fb89966e4a7d227e52a8d937ef0875b0,"SSLEngineTest issue introduced by d8e6fbb9c3656663f41797a15f38bb25fdcab834

Motivation:
d8e6fbb9c3656663f41797a15f38bb25fdcab834 attempted to account for the JDK not throwing the expected SSLHandshakeException by allowing a SSLException to also pass the test. However in some situations the SSLException will not be the top level exception and the Throwable must be unwrapped to see if the root cause is an SSLException.

Modifications:
- Unwrap exceptions thrown by the JDK's SSLEngine to check for SSLException.

Result:
SSLEngineTest (and derived classes) are more reliable."
08e0c612cf1670a263c5a0c3198b27213c55fd78,"HTTP/2 Unit Test LocalChannel Leaks

Motivation:
Some unit HTTP/2 unit tests use LocalChannel. LocalChannel's doClose method will ensure any pending items in the queue will be released, but it may execute a Runnable on the peer's EventLoop to ensure the peer's queue is also cleaned up. The HTTP/2 unit tests close the event loop groups with no wait time so that unit tests will execute quickly, but if the doClose Runnable is in the EventLoop's queue it will not run and thus the items in the queue will not be released.

Modifications:
- Ensure all HTTP/2 unit tests which use LocalChannel wait for both client and server channels to be closed before closing the EventLoop.

Result:
Related to https://github.com/netty/netty/issues/5850."
e08a3b1f3570c930592540e6391bb52f2f2da7f2,Fix SSLException check for JDK work around missed by 2dffc2f9fb89966e4a7d227e52a8d937ef0875b0
b1436e80ef2b39049c0fcb1a963b6541bac7a5a9,"Cleanup DefaultHttp2FrameReader about verifyUnknownFrame

Motivation:

In previous PR about handling unknwon frame in the middle of header
block, I didn't notice and re-use about checking is processing header
. And I added a redundant method for same functionality.
I think that the redundant method would lead to some misleading
situation.

Modifications:

Removed redundant code on DefaultHttp2FrameReader

Result:

The code is more readable"
e148b53c67b482544be0cc4ce540ed1dfe3d7383,"Add unit test for DefaultHttp2FrameWriter

Motivation:

DefaultHttp2FrameWriter contains important logic for how http2
frame encode into binary, currently, netty had no unit test
just for DefaultHttp2FrameWriter.

Modifications:

Write DefaultHttp2FrameWriterTest to test DefaultHttp2FrameWriter

Result:

The coverage of DefaultHttp2FrameWriter is increased, and the
class was more reliable"
2a72c876734abfdfa1fe12041b7d3f0e808cc4ab,"Move AutobahnTestsuite to extra module

Motivation:
We should move the AutobahnTestsuite to an extra module. This allows easier to run only the testsuite or only the autobahntestsuite

Modifications:

Create a new module (testsuite-autobahn)

Result:

Better project structure."
ce222308a6d0e3df009dbcce3288b2aff0834992,"Update to netty-tcnative 2.0.0.Beta6

Motivation:

New version of netty-tcnative was released.

Modifications:

Bump up version number

Result:

Using latest netty-tcnative"
634a8afa533ca0efcc49242681cde581339962dc,"Fix some warnings at generics usage

Motivation:

Existing warnings from java compiler

Modifications:

Add/fix type parameters

Result:

Less warnings"
0623c6c5334bf43299e835cfcf86bfda19e2d4ce,"Fix javadoc issues

Motivation:

Invalid javadoc in project

Modifications:

Fix it

Result:

More correct javadoc"
7feb92959e80628d47f8e61b0d171d7d837c22f3,"Improve performance of Base64.decode and encode methods.

Motivation:

The decode and encode method uses getByte(...) and setByte(...) in loops which can be very expensive because of bounds / reference-count checking. Beside this it also slows-down a lot when paranoid leak-detection is enabled as it will track each access.

Modifications:

- Pack bytes into int / short and so reduce operations on the ByteBuf
- Use ByteProcessor to reduce getByte calls.

Result:

Better performance in general. Also when you run the build with -Pleak the handler module will build in 1/4 of the time it took before."
77e65fe6bb2141151b4d5b4e3d477092be7ee9bf,"Base64 reduce byte manipulation operations

Motivation:
Base64#decode4to3 generally calculates an int value where the contents of the decodabet straddle bytes, and then uses a byte shifting or a full byte swapping operation to get the resulting contents. We can directly calculate the contents and avoid any intermediate int values and full byte swap operations. This will reduce the number of operations required during the decode operation.

Modifications:
- remove the intermediate int in the Base64#decond4to3 method.
- manually do the byte shifting since we are already doing bit/byte manipulations here anyways.

Result:
Base64#decode4to3 requires less operations to compute the end result."
7d08b4fc357e12ee2487e87d8fdcbeee1152e5a0,"Remove optional dependency on javassist

Motivation:

We shipped a javassist based implementation for typematching and logged a confusing debug message about missing javassist. We never were able to prove it really gives any perf improvements so we should just remove it.

Modifications:

- Remove javassist dependency and impl
- Fix possible classloader deadlock as reported by intellij

Result:

Less code to maintain and less confusing log message."
943f4ec7ff6c5753fb79c76cabc043f5e4cdcd32,"Make methods 'static' where it missed

Motivation:

Calling a static method is faster then dynamic

Modifications:

Add 'static' keyword for methods where it missed

Result:

A bit faster method calls"
deb90923a2f4f5a766597ec241f62a94a25d837e,"Ensure PooledByteBuf.initUnpooled(...) correctly set the allocator

Motivation:

Commit 8dda984afe9477fa09fe166305381d9ed1afa7c4 introduced a regression which lead to the situation that the allocator is not set when PooledByteBuf.initUnpooled(...) is called. Thus it was possible that PooledByteBuf.alloc() returns null or the wrong allocator if multiple PooledByteBufAllocator are used in an application.

Modifications:

- Correctly set the allocator
- Add test-case

Result:

Fixes [#6436]."
a80d3411ee1ec76be81a8c1c982968f252f67b0e,"Move all the microbenchmark code into one directory.

Motivation:

Allmost all our benchmarks are in src/main/java but a few are in src/test/java. We should make it consistent.

Modifications:

Move everything to src/main/java

Result:

Consistent code base."
325cc84a2ebbf4f5e362ec9ca09202b4647bd100,"Throw if SSLParameters contains settings that are not supported by ReferenceCountedOpenSslEngine

Motivation:

We not support all SSLParameters settings so we should better throw if a user try to use them.

Modifications:

- Check for unsupported parameters
- Add unit test

Result:

Less surprising behavior."
4f78bae2eb756ccd95e879c9d049ba56046ab90e,"DatagramPacketEncoder|Decoder should take into account if wrapped handler is sharable

Motivation:

DatagramPacketEncoder|Decoder should respect if the wrapped handler is sharable or not and depending on that be sharable or not.

Modifications:

- Delegate isSharable() to wrapped handler
- Add test-cases

Result:

Correct behavior"
7aff6b0330694d17c4fb7e887f28ec7b36db9a9d,"Increase timeouts in Http2ConnectionRoundtripTest

Motivation:

The timeouts used in the Http2ConnectionRoundtripTest seems to be too low when leak-detection is enabled so we sometimes get failed tests due timeout.

Modifications:

Increase timeouts.

Result:

Fixes [#6442]."
d73477c7bd1fe7665a382a90796efba87c95dd18,"Add benchmarks for SSLEngine implementations

Motivation:

As we provide our own SSLEngine implementation we should have benchmarks to compare it against JDK impl.

Modifications:

Add benchmarks for wrap / unwrap and handshake performance.

Result:

Benchmarks FTW."
22ccf6c7b1d4e4bbd674be3bc79d5e0e545e72ba,"Fix test-failures introduced 325cc84a2ebbf4f5e362ec9ca09202b4647bd100 on Java7

Motivation:

325cc84a2ebbf4f5e362ec9ca09202b4647bd100 introduced new tests which uses classes only provided by Java8+. We need to ensure we only try to load classes needed for these when we run the tests on Java8+ so we still can run the testsuite with Java7.

Modifications:

Add extra class which only gets loaded when Java8+ is used and move code there.

Result:

No more class-loader issue when running tests with Java7."
c0cd3db5b12d87d76f8c3372c5b1026a6fd3a4da,"Fix class references of its subclass issue

Motivation:

Realization of `AbstractTrafficShapingHandler.userDefinedWritabilityIndex()` has references to subclasses.
In addition, one of the subclasses overriding it, but the other does not.

Modifications:

Add overriding to the second subclass. Remove references to subclasses from parent class.

Result:

More consistent and clean code (OOP-stylish)."
90a61046c7be6515d52577397cebb06a713f58e0,"Add benchmarks for UnpooledUnsafeNoCleanerDirectByteBuf vs UnpooledUnsafeDirectByteBuf

Motivation:

Issue [#6349] brought up the idea to not use UnpooledUnsafeNoCleanerDirectByteBuf by default. To decide what to do a benchmark is needed.

Modifications:

Add benchmarks for UnpooledUnsafeNoCleanerDirectByteBuf vs UnpooledUnsafeDirectB
yteBuf

Result:

Better idea about impact of using UnpooledUnsafeNoCleanerDirectByteBuf."
70bcb408555b38c58fac236efddc082710686f93,"OpenSslEngine may use networkBIO after calling shutdown

Motivation:
To ensure that all bytes queued in OpenSSL/tcnative internal buffers we invoke SSL_shutdown again to stimulate OpenSSL to write any pending bytes. If this call fails we may call SSL_free and the associated shutdown method to free resources. At this time we may attempt to use the networkBIO which has already been freed and get a NPE.

Modifications:
- Don't call bioLengthByteBuffer(networkBIO) if we have called shutdown() in ReferenceCountedOpenSslEngine

Result:
Fixes https://github.com/netty/netty/issues/6466"
4734ef61a57b15df3e313b071956218fde98da2c,"Mark transport udt as deprecated as barchart-udt is not maintained anymore

Motivation:

barchart-udt is not maintained anymore so there is not way for us to get fixes for udt. Because of this we should mark the transport as deprecated.

Modifications:

Deprecate all udt classes.

Result:

transport udt is deprecated and so the user knows it will be removed in the future."
a7fe6c01539d3ad92d7cd94a25daff9e10851088,"Metrics exposed by PooledByteBufAllocator needs to be correctly synchronized

Motivation:

As we may access the metrics exposed of PooledByteBufAllocator from another thread then the allocations happen we need to ensure we synchronize on the PoolArena to ensure correct visibility.

Modifications:

Synchronize on the PoolArena to ensure correct visibility.

Result:

Fix multi-thread issues on the metrics"
ca2c349a4a95f79e1f8b5315bf7e7617386f266e,"Correctly have exceptions thrown from decode(...) method be wrapped with DecodingException

Motivation:

Normally if a decoder produces an exception its wrapped with DecodingException. This is not the cause for NotSslRecordException in SslHandler and SniHandler.

Modifications:

Just throw the NotSslRecordException exception for decode(...) and so ensure its correctly wrapped in a DecodingException before its passed through the pipeline.

Result:

Consist behavior."
d675febf07d14d4dff82471829f974369705655a,"Optimize / Cleanup QueryStringDecoder / QueryStringEncoder

Motivation:

QueryStringDecoder and QueryStringEncoder contained some code that could either cleaned-up or optimized.

Modifications:

- Fix typos in exception messages and javadocs
- Precompile Pattern
- Make use of StringUtil.EMPTY_STRING

Result:

Faster and cleaner code."
79e24d1a174e4ef1ecc542bb584600fee9977f02,"Add javadoc warning on SslContext#newHandler client-side

Motivation:

SslContext#newHandler currently creates underlying SSLEngine without
enabling HTTPS endpointIdentificationAlgorithm. This behavior in
unsecured when used on the client side.

We can’t harden the behavior for now, as it would break existing
behavior, for example tests using self signed certificates.

Proper hardening will happen in a future major version when we can
break behavior.

Modifications:

Add javadoc warnings with code snippets.

Result:

Existing unsafe behavior and workaround documented."
d1b02257248adc250cc3ac61cb5efd179675519b,"Improvement : WebSocketServerProtocolHandshakeHandler.getWebSocketLocation now applies concat optimization and WebSocket path check moved to separated method.

Motivation:

Make code easier to read, make WebSocketServerProtocolHandshakeHandler.getWebSocketLocation method faster.

Modification:

WebSocket path check moved to separate method. Get header operation moved out from concat operation.

Result:

WebSocketServerProtocolHandshakeHandler.getWebSocketLocation is faster as OptimizeStringConcat could be applied. Code easier to read."
df6796153b2ac25448189de1b432a39a9c0d16e0,"Add a 'bill of materials' project for Maven users

Motivation:

Projects may import multiple libraries which use different versions of Netty.

Modifications:

Add 'netty-bom' meta-project that contains the other projects in a dependencyManagement section.

Result:

Developers can import the BOM to enforce specific version of Netty."
93f5f62a20cc4842d76c580db8da9a2040716a10,"Cleanup EPOLL native exceptions

Motivation:
Exceptions generated from transport-native-epoll may include duplicate error string description or inconsistent usage of the method name in the string description.

Modifications:
- Ensure the method name from static exceptions and dynamic exceptions is of the same format
- Remove duplicate string rational from the exception messages

Result:
More consistent error messages with no duplicate error description."
461f9a121245ef625108c4eaa723b7153462c90f,"Allow to obtain informations of used direct and heap memory for ByteBufAllocator implementations

Motivation:

Often its useful for the user to be able to get some stats about the memory allocated via an allocator.

Modifications:

- Allow to obtain the used heap and direct memory for an allocator
- Add test case

Result:

Fixes [#6341]"
0514b0c61be19119b420fa661123990acbdd8305,"Only add port to HOST header value if needed

Motivation:

We only need to add the port to the HOST header value if its not a standard port.

Modifications:

- Only add port if needed.
- Fix parsing of ipv6 address which is enclosed by [].

Result:

Fixes [#6426]."
1392bc351f9b20277a62e273c270f2a4b455927d,"Correctly build socketaddress string, followup of 8b2badf44f9b43a4ff247ada81f93e486ea9dfbf"
2902ca122a57d1540a639382f202dc2a09f07069,"Remove annotation from package-info.java as IDEA not like it, cleanup of 4734ef61a57b15df3e313b071956218fde98da2c"
52aecabe43333655b65f854576bf3ec49d0d24df,Allow GOAWAY to be sent from handlers after the Http2MultiplexCodec so that app developers can shed load by issuing GOAWAY
7e7e10fb1e32d67254c925fea68eba7a683516b9,"Correct SslContextBuilder javadocs

Motivation:

SslContextBuilder sill state the KeyManagerFactory and TrustManagerFactory are only supported when SslProvider.JDK is used. This is not correct anymore.

Modifications:

Fix javadocs.

Result:

Correct javadocs."
f9001b9fc07a71a9d6eaf0462470416780302107,"HTTP/2 move internal HPACK classes to the http2 package

Motivation:
The internal.hpack classes are no longer exposed in our public APIs and can be made package private in the http2 package.

Modifications:
- Make the hpack classes package private in the http2 package

Result:
Less APIs exposed as public."
1f6782894a543580572611beffc52621381e822b,"OpenSslEngine wrap with heap buffer bug

Motivation:
ReferenceCountedOpenSslEngine#wrap must have a direct buffer for a destination to interact with JNI. If the user doesn't supply a direct buffer we internally allocate one to write the results of wrap into. After this operation completes we copy the contents of the direct buffer into the heap buffer and use internalNioBuffer to get the content. However we pass in the end index but the internalNioBuffer expects a length.

Modifications:
- pass the length instead of end index to internalNioBuffer

Result:
ReferenceCountedOpenSslEngine#wrap will copy the correct amount of data into the destination buffer when heap buffers are wrapped."
675980c7ffbca8d05218c352bccca4ca09e57582,"Lz4FrameEncoder incorrect usage of internalNioBuffer

Motivation:
Lz4FrameEncoder uses internalNioBuffer but always passes in a value of 0 for the index. This should be readerIndex().

Modifications:
- change 0 to readerIndex()

Result:
More correct usage of internalNioBuffer in Lz4FrameEncoder."
2cff91804426399ac1293ed5056b1ecb2e87981a,"Correct usages of internalNioBuffer

Motivation:
There are numerous usages of internalNioBuffer which hard code 0 for the index when the intention was to use the readerIndex().

Modifications:
- Remove hard coded 0 for the index and use readerIndex()

Result:
We are less susceptible to using the wrong index, and don't make assumptions about the ByteBufAllocator."
f343de8fb178103d6dd966a9e81e09f67c201aac,Update to netty-tcnative 2.0.0.Beta7
53fc69390130f7a5a33d454a59ad214f6b4176f5,"SslHandler and OpenSslEngine miscalculation of wrap destination buffer size

Motivation:
When we do a wrap operation we calculate the maximum size of the destination buffer ahead of time, and return a BUFFER_OVERFLOW exception if the destination buffer is not big enough. However if there is a CompositeByteBuf the wrap operation may consist of multiple ByteBuffers and each incurs its own overhead during the encryption. We currently don't account for the overhead required for encryption if there are multiple ByteBuffers and we assume the overhead will only apply once to the entire input size. If there is not enough room to write an entire encrypted packed into the BIO SSL_write will return -1 despite having actually written content to the BIO. We then attempt to retry the write with a bigger buffer, but because SSL_write is stateful the remaining bytes from the previous operation are put into the BIO. This results in sending the second half of the encrypted data being sent to the peer which is not of proper format and the peer will be confused and ultimately not get the expected data (which may result in a fatal error). In this case because SSL_write returns -1 we have no way to know how many bytes were actually consumed and so the best we can do is ensure that we always allocate a destination buffer with enough space so we are guaranteed to complete the write operation synchronously.

Modifications:
- SslHandler#allocateNetBuf should take into account how many ByteBuffers will be wrapped and apply the encryption overhead for each
- Include the TLS header length in the overhead computation

Result:
Fixes https://github.com/netty/netty/issues/6481"
743d2d374cf4578cce4fbdaf54c73947a9c8c06e,"SslHandler benchmark and SslEngine multiple packets benchmark

Motivation:
We currently don't have a benchmark which includes SslHandler. The SslEngine benchmarks also always include a single TLS packet when encoding/decoding. In practice when reading data from the network there may be multiple TLS packets present and we should expand the benchmarks to understand this use case.

Modifications:
- SslEngine benchmarks should include wrapping/unwrapping of multiple TLS packets
- Introduce SslHandler benchmarks which can also account for wrapping/unwrapping of multiple TLS packets

Result:
SslHandler and SslEngine benchmarks are more comprehensive."
3861b7de2bd1c1e845ba11f80c73c2e1c466c009,"Motivation:

Make the FileRegion comments about which transports are supported more accurate.
Also, eleminate any outstanding references to FileRegion.transfered as the method was renamed for spelling.

Modifications:

Class-level comment on FileRegion, can call renamed method.

Result:

More accurate documentation and less calls to deprecated methods."
6bb661302f45173a381c0cab5be7b64710d188f8,"OpenSsl tests incomplete check for supporting key manager

Motivaiton:
It is possible that if the OpenSSL library supports the interfaces required to use the KeyManagerFactory, but we fail to get the io.netty.handler.ssl.openssl.useKeyManagerFactory system property (or this property is set to false) that SSLEngineTest based unit tests which use a KeyManagerFactory will fail.

Modifications:
- We should check if the OpenSSL library supports the KeyManagerFactory interfaces and if the system property allows them to be used in OpenSslEngineTests

Result:
Unit tests which use OpenSSL and KeyManagerFactory will be skipped instead of failing."
a9d7c72cde9d522161e7275df6490a8b9765d57f,"Update links from code.google.com to github.com

Motivation:

This pull request does not solve any problem but we find that several links in the code refer to project websites under the domain of http://code.google.com which are either moved to github or not maintained anymore.

Modification:

Update the project links from code.google.com to the relevant project in github.com"
5963279e58c021e8190c2f4da2d78a4ba0e5d58f,"Remove reference to akka code and ArrayDeque which is not part of netty anymore

Motivation:

We not ship any forked code of akka and ArrayDeque anymore.

Modifications:

Remove reference from NOTICE.txt and license folder.

Result:

Correctly document license related things."
1e5d33f8d507fc4700d3e3fd2ea534f46c5ab531,"Remove unused code

Motivation:

Cleanup PlatformDependent* and remove unused code.

Modifications:

Code cleanup

Result:

Removed unused code"
e18c85b7685f19851189e653b370bfd3cef0cf79,"Add missing methods to Http2ConnectionHandlerBuilder

Motivation:
A previous commit added methods to AbstractHttp2ConnectionHandlerBuilder but forgot to expose them in Http2ConnectionHandlerBuilder.

Modifications:
- expose the new methods in Http2ConnectionHandlerBuilder

Result:
Http2ConnectionHandlerBuilder supports the new configuration options."
a2304287a170dc14031928d6d2a3374705305839,"SslContext to support TLS/SSL protocols

Motivation:
SslContext and SslContextBuilder do not support a way to specify the desired TLS protocols. This currently requires that the user extracts the SSLEngine once a context is built and manually call SSLEngine#setEnabledProtocols(String[]). Something this critical should be supported at the SslContext level.

Modifications:
- SslContextBuilder should accept a list of protocols to configure for each SslEngine

Result:
SslContext consistently sets the supported TLS/SSL protocols."
d702c47cab3c04a03dff56a1fddd696d25f92ada,TODO for the method with typo in name
8b21cd9e356850b4cb8dee3083d64b6e7dd1894e,"PlatformDependent0 should enforce array index scale for byte[] explicitly

Motivation:
PlatformDependent0 makes assumptions that the array index scale for byte[] is always 1. If this is not the case the results from methods which make this assumption will be undefined.

Modifications:
- PlatformDependent0 should check if unsafe.arrayIndexScale(byte[].class) is not 1, and if so not use unsafe

Result:
Assumptions made by optimizations in PlatformDependent0 which use byte[] are explicitly enforced."
3ad3356892e841b5e2cd7f6e87882fdf3fa2e68d,"Expose ByteBufAllocator metric in a more general way

Motivation:

PR [#6460] added a way to access the used memory of an allocator. The used naming was not very good and how things were exposed are not consistent.

Modifications:

- Add a new ByteBufAllocatorMetric and ByteBufAllocatorMetricProvider interface
- Let the ByteBufAllocator implementations implement ByteBufAllocatorMetricProvider
- Move exposed stats / metric from PooledByteBufAllocator to PooledByteBufAllocatorMetric and mark old methods as `@Deprecated`.

Result:

More consistent way to expose metric / stats for ByteBufAllocator"
10d9f82f1467f9637898e221db12d7600f0381b9,"Remove duplicate call to SSLContext.setVerify from ReferenceCountedOpenSslServerContext

Motivation:
5e649850898889a8d2f1e526db610a8fca19c1ff introduced support for the KeyManagerFactory while using OpenSSL. This same commit also introduced 2 calls to SSLContext.setVerify when 1 should be sufficient.

Modifications:
- Remove the duplicate call to SSLContext.setVerify

Result:
Less duplicate code in ReferenceCountedOpenSslServerContext."
f49bf4b201389bbeeb61991981945adcbe38db3c,"Convert fields to the local variable when possible

Motivation:

Some classes have fields which can be local.

Modifications:

Convert fields to the local variable when possible.

Result:

Clean up. More chances for young generation or scalar replacement."
2993760e9261f046db88a0e8ccf9edf4e9b0acad,"Fix misordered 'assertEquals' arguments in tests

Motivation:

Wrong argument order in some 'assertEquals' applying.

Modifications:

Flip compared arguments.

Result:

Correct `assertEquals` usage."
a94b23df7d367ecb57ed89a9e882e2f47df59306,"Support SSL_ prefixed cipher suites in addition to TLS_ prefixed ones.

Motivation:
Http2SecurityUtil currently lists HTTP/2 ciphers as documented by
JSSE docs [1] and the IANA [2] using the TLS_ prefix.
In some IBM J9 implementations the SSL_ prefix is used, which is also
covered by the JSSE.

[1] http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html
[2] http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml

Modifications:
Add both variants of the cipher names (prefixed with SSL_ in additon to TLS_)

Result:
HTTP/2 connections can now be created using the SslProvider.JDK on IBM J9
and potentially other JVMs which use the SSL_ prefix."
cfebaa36c0923458e4c5ef870a1e6a912db05a80,"Support for handling SSL and non-SSL in pipeline

Motivation:

Some pipelines require support for both SSL and non-SSL messaging.

Modifications:

Add utility decoder to support both SSL and non-SSL handlers based on the initial message.

Result:

Less boilerplate code to write for developers."
c6a3cae269f9305be7de088fe89500bb1137a2fe,"UnorderedThreadPoolEventExecutor consumes 100% CPU when idle

Motivation:

When UnorderedThreadPoolEventExecutor.execute / submit etc is called it will consume up to 100 % CPU even after the task was executed.

Modifications:

Add a special wrapper which we will be used in execute(...) to wrap the submitted Runnable. This is needed as  ScheduledThreadPoolExecutor.execute(...) will delegate to submit(...) which will then use decorateTask(...). The problem with this is that decorateTask(...) needs to ensure we only do our own decoration if we not call from execute(...) as otherwise we may end up creating an endless loop because DefaultPromise will call  EventExecutor.execute(...) when notify the listeners of the promise.

Result:

Fixes [#6507]."
9ade81ab5b56fcd0574688dd899dc7c07685caf7,"Use system property to detect if root is running the program

Motivation:

We forked a new process to detect if the program is run by root. We should better just use user.name system property

Modifications:

- Change PlatformDependent.isRoot0() to read the user.name system property to detect if root runs the program and rename it to maybeSuperUser0().
- Rename PlatformDependent.isRoot() to maybeSuperUser() and let it init directly in the static block

Result:

Less heavy way to detect if the program is run by root."
e8673632a6f0478a342746bb0f5ec23fd12d9ba4,Update to netty-tcnative 2.0.0.Final
01012fc5b7550af189a1fb2d35819347a85dd112,"HTTP/2 SETTINGS ACK sequencing issue

Motivation:
DefaultHttp2ConnectionDecoder#onSettingsRead processes the settings, and then sends a SETTINGS ACK to the remote peer. Processing the settings may result in frames which violate the previous settings being send to the remote peer. The remote peer will not apply the new settings until it has received the SETTINGS ACK, and therefore we may violate the settings from the remote peer's perspective and the connection will be shutdown.

Modifications:
- We should send the SETTINGS ACK before we process the settings to ensure the peer receives the SETTINGS ACK before other frames which assume the settings have already been applied

Result:
Fixes https://github.com/netty/netty/issues/6520."
e12f504ac1d0fa5e798cc21806fbcb031335e6ad,"Remove deprecated usage of Mockito methods

Motivation:

We used some deprecated Mockito methods.

Modifications:

- Replace deprecated method usage
- Some cleanup

Result:

No more usage of deprecated Mockito methods. Fixes [#6482]."
1db58ea9800a3839ccf495103e5918debf8479d0,[maven-release-plugin] prepare release netty-4.1.9.Final
2b8c8e0805e343f7c06d4fb81d958aed357ecc6a,[maven-release-plugin] prepare for next development iteration
61f53c4d07bb5a883673f31b798046427fb7d55f,"ChunkedWriteHandler flushes too often

Motivation:

ChunkedWriteHandler queues written messages and actually writes them
when flush is called. In its doFlush method, it needs to flush after
each chunk is written to preserve memory. However, non-chunked messages
(those that aren't of type ChunkedInput) are treated in the same way,
which means that flush is called after each message is written.

Modifications:

Moved the call to flush() inside the if block that tests if the message
is an instance of ChunkedInput. To ensure flush is called at least once,
the existing boolean flushed is checked at the end of doFlush. This
check was previously in ChunkedWriteHandler.flush(), but wasn't checked in
other invocations of doFlush, e.g. in channelInactive.

Result:

When this handler is present in a pipeline, writing a series
of non-chunked messages will be flushed as the developer intended."
476d2aea76847ccae6831d0f41a4d06d7a6e3b77,"Adding method to assert XML decoder framing works

Motivation:

In an effort to better understand how the XmlFrameDecoder works, I consulted the tests to find a method that would reframe the inputs as per the Javadocs for that class. I couldn't find any methods that seemed to be doing it, so I wanted to add one to reinforce my understanding.

Modification:

Add a new test method to XmlFrameDecoder to assert that the reframing works as described.

Result:

New test method is added to XmlFrameDecoder"
9e6e1a3e7b451779a0aa8db07271a7befd69e02c,"Use SystemPropertyUtil to access system properties

Motivation:

We should use SystemPropertyUtil to access system properties and so always handle SecurityExceptions.

Modifications:

Use SystemPropertyUtil everywhere.

Result:

Better and consist handling of SecurityException."
9c1a1916962354f1e69fe43107219c25a86e6cef,"Trim optional white space in CombinedHttpHeaders values

Motivation:

The updated HTTP/1.x RFC allows for header values to be CSV and separated by OWS [1]. CombinedHttpHeaders should remove this OWS on insertion.

[1] https://tools.ietf.org/html/rfc7230#section-7

Modification:

CombinedHttpHeaders doesn't account for the OWS and returns it back to the user as part of the value.

Result:

Fixes #6452"
aa2f16f3143e46412e3c043b097e0f70f5026196,"EmptyByteBuf allows writing ByteBufs with 0 readable bytes

Motivation:

The contract of `ByteBuf.writeBytes(ByteBuf src)` is such that it will
throw an `IndexOutOfBoundsException if `src.readableBytes()` is greater than
`this.writableBytes()`. The EmptyByteBuf class will throw the exception,
even if the source buffer has zero readable bytes, in violation of the
contract.

Modifications:

Use the helper method `checkLength(..)` to check the length and throw
the exception, if appropriate.

Result:

Conformance with the stated behavior of ByteBuf."
bf08ed0b93e54e8e21f23e9d948fd2732dc52171,"fix failure logging of value on channel option set

Motivation:

The code accidentally passes channel twice instead of value, resulting in logs like:
Failed to set channel option 'SO_SNDBUF' with value '[id: 0x2c5b2eb4]' for channel '[id: 0x2c5b2eb4]'

Modifications:

Pass value instead of channel where it needs to be.

Result:

Failed to set channel option 'SO_SNDBUF' with value '0' for channel '[id: 0x9bd3c5b8]'"
7467106630ad6b2522f7953c244546b91b107efe,"http2: Http2StreamChannel now shares options of its parent channel

Motivation

Http2StreamChannel ignores options of its parent channel when being created. That leads to surprising results when, for example, unpooled allocator could be silently replaced with pooled allocator (default setting).

Modification

Copy parent channel's options over to the Http2StreamChannel.

Result

Channel options are now consistent between Http2StreamChannel and its parent channel. Newly added test passes on this branch and fails on master. Fixes #6551."
6036b3f6eac7b54562dcddd3b2b97175d041335a,Fix buffer leak in EmptyByteBufTest introduced by aa2f16f3143e46412e3c043b097e0f70f5026196
13cd69c5ec3bba7d3efbd99ba171e9d3591a8f86,"Recognizing TLS Extension ""HeartBeat"" as Valid TLS Packet

Motivation:

The widely used SSL Implementation, OpenSSL, already supports Heartbeat Extension; both sending and responding to Heartbeat Messages. But, since Netty is not recognizing that extension as valid packet, peers won't be able to use this extension.

Modification:

Update SslUtils.java to recognize Heartbeat Extension as valid tls packet.

Result:

With this change, softwares using Netty + OpenSSL will be able to respond for TLS Heartbeat requests (actually taken care by OpenSSL - no need of any extra implementation from Clients)"
71b338ce17036bcb448c6c73e9a35b4971254733,"Non-latin character broken on HttpHeader by HttpObjectDecoder.

Motivation:

Currently netty is receiving HTTP request by ByteBuf and store it as ""CharSequence"" on HttpObjectDecoder. During this operation, all character on ByteBuf is moving to char[] without breaking encoding.
But in process() function, type casting from byte to char does not consider msb (sign-bit). So the value over 127 can be casted wrong value. (ex : 0xec in byte -> 0xffec in char). This is type casting bug.

Modification:

Fix type casting

Result:

Non-latin characters work."
016629fe3b65b3797e7e9de39a661bac196c41e0,"Replace system.out.println with InternalLoggerFactory

Motivation:

There are two files that still use `system.out.println` to log their status

Modification:

Replace `system.out.println` with a `debug` function inside an instance of `InternalLoggerFactory`

Result:

Introduce an instance of `InternalLoggerFactory` in class `AbstractMicrobenchmark.java` and `AbstractSharedExecutorMicrobenchmark.java`"
5c1c14286d29d57acddf32b227722f7b2e113ed4,"Allow negative memoryAddress when calling PlatformDependent0.newDirectBuffer(...)

Motivation:

When UNSAFE.allocateMemory is returning an address whose high bit is set we currently throw an IllegalArgumentException. This is not correct as it may return a negative number on at least sparc.

Modifications:

- Allow to pass in negative memoryAddress
- Add unit tests

Result:

Correctly validate the memoryAddress and so also work on sparc as expected. Fixes [#6574]."
493a8135f835dd06120f10390be7483125ec4fe1,Ensure test introduced in 5c1c14286d29d57acddf32b227722f7b2e113ed4 also works on Java9
ef21d5f4caf904e9035e6e8ffec503e554cb6d61,"UnsafeByteBufUtil errors and simplification

Motiviation:
UnsafeByteBufUtil has some bugs related to using an incorrect index, and also omitting the array paramter when dealing with byte[] objects. There is also some simplification possible with respect to type casting, and minor formatting consistentcy issues.

Modifications:
- Ensure indexing is correct when dealing with native memory
- Fix the native access and endianness for the medium/unsigned medium methods
- Ensure array is used when dealing with heap memory
- Remove unecessary casts when using long
- Fix formating and alignment

Result:
UnsafeByteBufUtil is more correct and won't access direct memory when heap arrays are used."
40bead56c4d57b33e751ef243c7fb3cfe861bfac,"Revert ""http2: Http2StreamChannel now shares options of its parent channel""

This reverts commit 7467106630ad6b2522f7953c244546b91b107efe."
ed1071d327cdd77bf520befda7f62081374e77bc,"Limit the maximum size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH

Motivation:

We should limit the size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH to ensure we not cause an OOME when the user tries to encrypt a very big buffer.

Modifications:

Limit the size of the allocated outbound buffer to MAX_ENCRYPTED_PACKET_LENGTH

Result:

Fixes [#6564]"
f4c635d30b23be6ce51866704c178232e98015e7,"Expose HTTP/2 HpackDecoder (#6589)

Motivation:

gRPC (and potentially other libraries) has an optimized header processor that requires direct access to the HpackDecoder.

Modifications:

Make the HpackDecoder and its constructors public.

Result:

Fixes #6579"
1419f5b601ec7f50938a5e745ec2312f881a580f,"Adding support for Conscrypt (#6271)

Motivation:

Conscrypt is a Java Security provider that wraps OpenSSL (specifically BoringSSL). It's a possible alternative to Netty-tcnative that we should explore. So this commit is just to enable us to further investigate its use.

Modifications:

Modifying the SslContext creation path to support the Conscrypt provider.

Result:

Netty will support OpenSSL with conscrypt."
0ee36fef006dc47e0f3d88bfd0ff8eda27dc7651,"Accept two ways to start HTTP/2 over clear text

Motivation:

HTTP/2 support two ways to start on a no-tls tcp connection,
http/1.1 upgrade and prior knowlege methodology to start HTTP/2.
Currently, the http2-server from example only support
starting by upgrade. I think we can do a simple dispatch by peek first
bytes from inbound that match to prior knowledge preface or not and
determine which handlers to set into pipeline.

Modifications:

Add ClearTextHttp2ServerUpgradeHandler to support start HTTP/2 via clear
text with two approach. And update example/http2-server to support
this functionality.

Result:

netty HTTP/2 and the example http2-server accept for two ways to start
HTTP/2 over clear text.

Fixed memory leak problem

Update fields to final

Rename ClearText to cleartext

Addressed comments for code improvement

- Always prefer static, final, and private if possible
- Add UnstableApi annotation
- Used EmbeddedChannel.readInbound instead of unhandled inbound handler
- More assertion

Update javadoc for CleartextHttp2ServerUpgradeHandler

Rename ClearTextHttp2ServerUpgradeHandler to CleartextHttp2ServerUpgradeHandler

Removed redundant code about configure pipeline

nit: PriorKnowledgeHandler

Removed Mockito.spy, investigate conn state instead

Add Http2UpgradeEvent

Check null of the constructor arguments

Rename Http2UpgradeEvent to PriorKnowledgeUpgradeEvent

Update unit test"
36c6a61d33c480798511723486459f4eea04cb47,"HTTP/2 remove unnecessary buffer operations

Motivation:
codec-http2 has some helper methods to write to ByteBuf in a big endian fashion. This is the default memory structure for ByteBuf so these helper methods are not necessary.

Modifications:
- remove writeUnsignedInt and writeUnsignedShort

Result:
codec-http2 has less ByteBuf helper methods which are not necessary."
e074df2ae6501d99921543369198c53e4d99ed1b,"DNS Resolve ambiguity in which DNS servers are used during resolution

Motivation:
Recently DnsServerAddressStreamProvider was introduced to allow control for each query as to which DNS server should be used for resolution to respect the local host's default DNS server configuration. However resolver-dns also accepts a stream of DNS servers to use by default, but this stream is not host name aware. This creates an ambiguity as to which method is used to determine the DNS server to user during resolution, and in which order. We can remove this ambiguity and provide a more general API by just supporting DnsServerAddressStreamProvider.

Modifications:
- Remove the fixed DnsServerAddresses and instead only accept a DnsServerAddressStreamProvider.
- Add utility methods to help use DnsServerAddressStreamProvider for a single entry, a list of entries, and get the default for the current machine.

Result:
Fixes https://github.com/netty/netty/issues/6573."
b041f1a7a92f200cf02cd9a208a5033e143b1e39,"HttpServerKeepAliveHandler 204 response with no Content-Length should keepalive

Motivation:
https://tools.ietf.org/html/rfc7230#section-3.3.2 states that a 204 response MUST NOT include a Content-Length header. If the HTTP version permits keep alive these responses should be treated as keeping the connection alive even if there is no Content-Length header.

Modifications:
- HttpServerKeepAliveHandler#isSelfDefinedMessageLength should account for 204 respones

Result:
Fixes https://github.com/netty/netty/issues/6549."
21562d8808718c6a7609d6f79f6961a66c3eaad9,"Retained[Duplicate|Slice] operations should not increase the reference count for UnreleasableByteBuf

Motivation:
UnreleasableByteBuf operations are designed to not modify the reference count of the underlying buffer. The Retained[Duplicate|Slice] operations violate this assumption and can cause the underlying buffer's reference count to be increased, but never allow for it to be decreased. This may lead to memory leaks.

Modifications:
- UnreleasableByteBuf's Retained[Duplicate|Slice] should leave the reference count of the parent buffer unchanged after the operation completes.

Result:
No more memory leaks due to usage of the Retained[Duplicate|Slice] on an UnreleasableByteBuf object."
c4832cd9d989788f32dc1321d3e4c72bffa3587a,"Only support using Conscrypt on Java8+

Motivation:

1419f5b601ec7f50938a5e745ec2312f881a580f added support for conscrypt but the CI started to fail when running tests with java7 as conscrypt is compiled with java8.

Modifications:

Only support conscrypt on Java8+

Result:

CI not fails anymore."
5163869439c47e782cbeed26bbcfb49996aca753,"Only try to load conscrypt class in tests when supported.

Motivation:

1419f5b601ec7f50938a5e745ec2312f881a580f added support for conscrypt but the CI started to fail when running tests with java7 as conscrypt is compiled with java8. This was partly fixed in c4832cd9d989788f32dc1321d3e4c72bffa3587a but we also need to ensure we not try to even load the classes.

Modifications:

Only try to load conscrypt classes when on java8+-

Result:

CI not fails anymore."
00bf06e97b96ce98cd707783d80fac38294dd1dc,Fix spelling mistake of HttpStaticFileServerHandler.java
4bcfa07a7d8baae64998c97d4e35e3333dbbd727,"Fix OpenSslCertificateException error code validation

Motivation:

In OpenSslCertificateException we tried to validate the supplied error code but did not correctly account for all different valid error codes and so threw an IllegalArgumentException.

Modifications:

- Fix validation by updating to latest netty-tcnative and use CertificateVerifier.isValid
- Add unit tests

Result:

Validation of error code works as expected."
e8da5e5162ef70572ca74af4df336c1cb1b4cece,"Revert ""Expose HTTP/2 HpackDecoder (#6589)""

This reverts commit f4c635d30b23be6ce51866704c178232e98015e7."
225d10e1ade6906ce75257261729412ad5a80e6f,"HTTP/2 Make DefaultHttp2HeadersDecoder's Http2Headers object creation extensible

Motivation:
It is generally useful to override DefaultHttp2HeadersDecoder's creation of a new Http2Headers object so more optimized versions can be substituted if the use case allows for it.

Modifications:
- DefaultHttp2HeadersDecoder should support an overridable method to generate the new Http2Headers object for each decode operation

Result:
DefaultHttp2HeadersDecoder is more extensible.
Fixes https://github.com/netty/netty/issues/6591."
34e0007f0721ff2e90116a8b64e1ae4ec2ba27e3,"LoggingHandler does not override channelReadComplete or channelWritabilityChanged

Motivation:

`io.netty.handler.logging.LoggingHandler` does not log when these
events happen.

Modifiations:

Add overrides with logging to these methods.

Result:

Logging now happens for these two events."
077a1988b9c96b5f3e5693a3bb1b2e118992f3a8,"OCSP stapling support for Netty using netty-tcnative.

https://github.com/netty/netty-tcnative/pull/215

Motivation

OCSP stapling (formally known as TLS Certificate Status Request extension) is alternative approach for checking the revocation status of X.509 Certificates. Servers can preemptively fetch the OCSP response from the CA's responder, cache it for some period of time, and pass it along during (a.k.a. staple) the TLS handshake. The client no longer has to reach out on its own to the CA to check the validity of a cetitficate. Some of the key benefits are:

1) Speed. The client doesn't have to crosscheck the certificate.
2) Efficiency. The Internet is no longer DDoS'ing the CA's OCSP responder servers.
3) Safety. Less operational dependence on the CA. Certificate owners can sustain short CA outages.
4) Privacy. The CA can lo longer track the users of a certificate.

https://en.wikipedia.org/wiki/OCSP_stapling
https://letsencrypt.org/2016/10/24/squarespace-ocsp-impl.html

Modifications

https://www.openssl.org/docs/man1.0.2/ssl/SSL_set_tlsext_status_type.html

Result

High-level API to enable OCSP stapling"
c37267d682de9702dda4ad567cb0d0786fc0c130,"NioEventLoop#rebuildSelector0 throws ClassCastException

Motivation:
Commit 795f318 simplified some code related to the special case Set for the selected keys and introduced a Selector wrapper to make sure this set was properly reset. However the JDK makes assumptions about the type of Selector and this type is not extensible. This means whenever we call into the JDK we must provide the unwrapped version of the Selector or we get a ClassCastException. We missed a case of unwrapping in NioEventLoop#rebuildSelector0.

Modificaitons:
- NioEventLoop#openSelector should return a tuple so we can atomically set the wrapped and unwrapped Selector
- NioEventLoop#rebuildSelector0 should use the unwrapped version of the selector

Result:
Fixes https://github.com/netty/netty/issues/6607."
1bc5bc69e3c757934fe4c324572716a35ba1d000,"HTTP/2 Allow more time for EventLoopGroup to shutdown in test that use LocalChannel

Motivation:
The CI servers have reported leaks while building the HTTP/2 unit tests. The unit tests attempt to wait for the channels to be closed before exiting the test, but we should wait in case there are any tasks pending on the EventLoopGroup's task queues.

Modifications:
- Change the Future.sync() operations to Future.syncUninterruptibly()
- HTTP/2 unit tests which use local channel should wait for 5 seconds before shutting down the EventLoopGroups

Result:
More likely that any cleanup related tasks will execute before the unit tests are shutdown."
08646afc1ef078407cd97d2d0e86c08a7b179277,"Do not fail a DNS query promise prematurely

Motivation:

DnsNameResolverContext completes its DNS query promise automatically
when no queries are in progress, which means there's no need to fail the
promise explicitly.

Modifications:

- Do not fail a DNS query promise explicitly but add an informational
  trace

Result:

- Fixes #6600
- Unexpected exception on one question type does not fail the promise
  too soon. If the other question succeeds, the query will succeed,
  making the resolver more robust."
155983f1a1384b2dc31a637da50bf7ecd3622927,"DNS move JDK DNS resolution out of DnsServerAddresses static initialization

Motivation:
DnsServerAddresses loads the default DNS servers used for DNS resolution in a static initialization block. This is subject to blocking and may cause unexpected delays. We can move this initialization to DefaultDnsServerAddressStreamProvider where it is more expected to load the JDK's default configuration.

Modifications:
- Move all the static initialization from DnsServerAddresses to DefaultDnsServerAddressStreamProvider
- Deprecate static methods in DnsServerAddresses which have moved to DefaultDnsServerAddressStreamProvider
- Remove usage of deprecated methods in DnsServerAddresses

Result:
Usage of JDK's blocking DNS resolver is not required to use resolver-dns."
dcd322dda2dfd1e0567017d2e02c53728c310032,"Fix regression in QueryStringEncoder

Motivation:

Commit #d675febf07d14d4dff82471829f974369705655a introduced a regression in QueryStringEncoder, resulting in whitespace being converted into a literal `+` sign instead of `%20`.

Modification:

Modify `encodeComponent` to pattern match and replace on the result of the call to `URLEncoder#encode`

Result:

Fixes regression"
4c77e7c55ab4b69870536b2bcd41511ede348d80,netty-codec: Manage read-flow explicitly in MessageAggregator
7b6119a0a478b40f12e85c0e92e603f9f6ee5b6c,"Allow to free direct buffers on java9 again

Motivation:

Java9 adds a new method to Unsafe which allows to free direct ByteBuffer via the cleaner without the need to use an commandline arguments.

Modifications:

- Add Cleaner interface
- Add CleanerJava9 which will be used when using Java9+ and take care of release direct ByteBuffer
- Let Cleaner0 implement Cleaner

Result:

Be able to free direct ByteBuffer on Java9+ again without any commandline arguments."
7bd090596973a26b3185cbebba24857d6c810797,"Introduce ReferenceCounted.refCnt()

Motivation:

When debugging netty memory leaks, it's sometimes helpful to
print the object's reference count.

Modifications:

Add `refCnt` methods to set of already exitsting helpers for ref coutned
objects.

Result:

Users will have utility to print object's ref count without much of a
boilerplate."
cc5d1d0a7e6475c6dc3628321c17a62785016163,"Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+

Motivation:

Java8 adds support for SNIMatcher to reject SNI when the hostname not matches what is expected. We not supported doing this when using SslProvider.OPENSSL*.

Modifications:

- Add support for SNIMatcher when using SslProvider.OPENSSL*
- Add unit tests

Result:

SNIMatcher now support with our own SSLEngine as well."
1dfd852dffebdc7e293d42d82d0d304aafe9a04d,"Revert ""Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+""

This reverts commit cc5d1d0a7e6475c6dc3628321c17a62785016163."
4436d697a6e4a01342a364c05592647f00eb85fc,Update to netty-tcnative 2.0.1.Final
38b054c65cc655bb4966517abeb32c1246c5c7e3,"Correctly handle read-only ByteBuf in ByteToMessageDecoder

Motivation:

If a read-only ByteBuf is passed to the ByteToMessageDecoder.channelRead(...) method we need to make a copy of it once we try to merge buffers for cumulation. This usually is not the case but can for example happen if the local transport is used. This was the cause of the leak report we sometimes saw during the codec-http2 tests, as we are using the local transport and write a read-only buffer. This buffer will then be passed to the peer channel and fired through the pipeline and so end up as the cumulation buffer in the ByteToMessageDecoder. Once the next fragement is received we tried to merge these and failed with a ReadOnlyBufferException which then produced a leak.

Modifications:

Ensure we copy the buffer if its read-only.

Result:

No more exceptions and so leak when a read-only buffer is passed to ByteToMessageDecoder.channelRead(...)"
119383873d84e0da24916e4240e5fdfc4dc0016d,"VoidChannelPromise not notified when exception is thrown.

Motivation:

When a VoidChannelPromise is used by the user we need to ensure we propergate the exception through the ChannelPipeline otherwise the exception will just be swallowed and so the user has no idea whats going on.

Modifications:

- Always call tryFailure / trySuccess even when we use the VoidChannelPromise
- Add unit test

Result:

Fixes [#6622]."
1b0b8f80cdf5d5ef0919d30232c090c5a495d4b6,"AbstractScheduledEventExecutor.schedule(...) must accept delay <= 0.

Motivation:

As the javadoc of ScheduledExecutorService state:

Zero and negative delays (but not periods) are also allowed in schedule methods,and are treated as requests for immediate execution.

Modifications:

- Correctly handle delay <= 0.
- Add unit tests.

Result:

Fixes [#6627]."
fb113dce3a200005261020ce7fd02e2630b064ed,"HttpPostRequestEncoder may return a slice which is not retained.

Motivation:

We miss to retain a slice before return it to the user and so an reference count error may accour later on.

Modifications:

Use readRetainedSlice(...) and so ensure we retain the buffer before hand it of to the user.

Result:

Fixes [#6626]."
e482d933f755d42f2ed0a29776e2599ae07f1806,"Add 'io.netty.tryAllocateUninitializedArray' system property which allows to allocate byte[] without memset in Java9+

Motivation:

Java9 added a new method to Unsafe which allows to allocate a byte[] without memset it. This can have a massive impact in allocation times when the byte[] is big. This change allows to enable this when using Java9 with the io.netty.tryAllocateUninitializedArray property when running Java9+. Please note that you will need to open up the jdk.internal.misc package via '--add-opens java.base/jdk.internal.misc=ALL-UNNAMED' as well.

Modifications:

Allow to allocate byte[] without memset on Java9+

Result:

Better performance when allocate big heap buffers and using java9."
a0fcb72e5d999cd1f260c0d6da078bb29ae69fc4,"Use jndi-dns to obtain default name servers

Motivation:

Using reflection to obtain the default name servers may fail in Java9 and also in previous Java versions if a SecurityManager is present.

Modifications:

Try using jndi-dns to obtain default name servers and only try using reflection if this fails.

Result:

Be able to detect default name servers in all cases. Fixes [#6347]."
38483e8790438e78ba98b46389d2beaa0c3c934c,"Correctly manage buffer life-cycle in http2 multiplex example

Motivation:

We not correctly managed the life-cycle of the buffer / frames in our http2 multiplex example which lead to a memory leak.

Modifications:

- Correctly release frame if not echo'ed back the remote peer.
- Not retain content before echo back to remote peer.

Result:

No more leak in the example, fixes [#6636]."
0692bf1b6a6764dee22132630bef7ee2f850771e,fix the typos
970d310ec9ae3d0581adf48eec815d54e93b4960,"Regulation of the InternetProtocolFamily usage

Motivation:

1. The use of InternetProtocolFamily is not consistent:
   the DnsNameResolverContext and DnsNameResolver contains switches
   instead of appropriate methods usage.
2. The InternetProtocolFamily class contains redundant switches in the
   constructor.

Modifications:

1. Replacing switches to the use of an appropriate methods.
2. Simplifying the InternetProtocolFamily constructor.

Result:

Code is cleaner and simpler."
bf0beb772c83fb5fa2240369ec7602a65000e089,"Fix IllegalArgumentException when release a wrapped ByteBuffer on Java9

Motivation:

Unsafe.invokeCleaner(...) checks if the passed in ByteBuffer is a slice or duplicate and if so throws an IllegalArgumentException on Java9. We need to ensure we never try to free a ByteBuffer that was provided by the user directly as we not know if its a slice / duplicate or not.

Modifications:

Never try to free a ByteBuffer that was passed into UnpooledUnsafeDirectByteBuf constructor by an user (via Unpooled.wrappedBuffer(....)).

Result:

Build passes again on Java9"
4dd6c14ba275384ce8561ec4a5f139a740a79f7f,"Only use test SslProviders that are supported in SslHandlerTest.testCompositeBufSizeEstimationGuaranteesSynchronousWrite().

Motivation:

We need to ensure we only try to to test with the SslProviders that are supported when running the SslHandlerTest.testCompositeBufSizeEstimationGuaranteesSynchronousWrite test.

Modifications:

Skip SslProvider.OPENSSL* if not supported.

Result:

No more test-failures if openssl is not installed on the system."
c663a94359b70069b67b8d7f7bc9d0c43dca7674,"Fix buffer leak in local transport when a close triggers the close of a remote peer and there are still messages in the inbound buffer.

Motivation:

We need to release all the buffers that may be put into our inbound queue since we closed the Channel to ensure we not leak any memory. This is fine as it basically gives the same guarantees as TCP which  means even if the promise was notified before its not really guaranteed that the ""remote peer"" will see the buffer at all.

Modifications:

Ensure we release all buffers in the inbound buffer if a doClose() is called.

Result:

No more leaks."
34ff9cf5f246efddec9da2994d039cd40e896c5e,"Fix possible overflow when calculate in the size of the out buffer in Base64

Motivation:

We not correctly guarded against overflow and so call Base64.encode(...) with a big buffer may lead to an overflow when calculate the size of the out buffer.

Modifications:

Correctly guard against overflow.

Result:

Fixes [#6620]."
7214740c06b5225d3fef46486bf5c3c6cd860431,"Add support for SNIMatcher when using SslProvider.OPENSSL* and Java8+

Motivation:

Java8 adds support for SNIMatcher to reject SNI when the hostname not matches what is expected. We not supported doing this when using SslProvider.OPENSSL*.

Modifications:

- Add support for SNIMatcher when using SslProvider.OPENSSL*
- Add unit tests

Result:

SNIMatcher now support with our own SSLEngine as well."
c6ad9338b3db285978013fb060dda01dc927024d,"Avoid infinite loop in HTTP/2 distributor toString()

Motivation:

Although effectively unused, the toString() of
WeightedFairQueueByteDistributor.State is useful for debugging. It
accidentally had an infinite loop, as it would recurse infinitely
between a parent and its child, which makes it less useful for
debugging.

Modifications:

Prune the infinite loop by using the parent's streamId instead of the
parent's toString().

Result:

Faster, less stack-overflowing toString()"
799350c369e68462b61c6aef97db2a33ea937434,"Fix HTTP/2 dependency tree corruption

Motivation:

Chrome was randomly getting stuck loading the tiles examples.
Investigation showed that the Netty flow controller thought it had
nothing to send for the connection even though some streams has queued
data and window available.

Modifications:

Fixed an accounting error where an implicitly created parent was not
being added to the dependency tree, thus it and all of its children were
orphaned from the connection's tree and would never have data written.

Result:

Fixes #6621"
e78ccd6d52450f30e648abca22b8f2afec62f45d,#6657 do not throw ClassCastException when rule subnet version doesn't match remote IP version
98beb777f81f092aa0fddf49ed08b426b2c72f01,"Enable configuring available processors

Motivation:

In cases when an application is running in a container or is otherwise
constrained to the number of processors that it is using, the JVM
invocation Runtime#availableProcessors will not return the constrained
value but rather the number of processors available to the virtual
machine. Netty uses this number in sizing various resources.
Additionally, some applications will constrain the number of threads
that they are using independenly of the number of processors available
on the system. Thus, applications should have a way to globally
configure the number of processors.

Modifications:

Rather than invoking Runtime#availableProcessors, Netty should rely on a
method that enables configuration when the JVM is started or by the
application. This commit exposes a new class NettyRuntime for enabling
such configuraiton. This value can only be set once. Its default value
is Runtime#availableProcessors so that there is no visible change to
existing applications, but enables configuring either a system property
or configuring during application startup (e.g., based on settings used
to configure the application).

Additionally, we introduce the usage of forbidden-apis to prevent future
uses of Runtime#availableProcessors from creeping. Future work should
enable the bundled signatures and clean up uses of deprecated and
other forbidden methods.

Result:

Netty can be configured to not use the underlying number of processors,
but rather the constrained number of processors."
1c63cc8067c7cd40c3e58772b4222560e67e6092,"Skip forbidden API check when building with java9 for now

Motivation:

There needs to be some work be done to allow using forbidden API check plugin when using java9.

Modifications:

Skip forbidden API check when using java9

Result:

Builds again with java9"
7f3b75a5091dcd6d882102fdb92daa6931e02c30,"Revert ""SslHandler avoid calling wrap/unwrap when unnecessary""

This reverts commit 6353c229fd11c6e6306011d55993775f7685d122 to ""fix"" [#6578]."
3ac6d071689d7c8ce8e881243a9015e7fb37204f,"Skip forbidden API check when running examples

Motivation:

We should skip the forbidden API check when run the examples as otherwise it may fail.

Modifications:

Skip the API check in run-example.sh

Result:

Be able to run the examples in all cases."
d21f2adb98bf87bca8190f86888a3a8399397322,"HTTP/2 StreamByteDistributor improve parameter validation

Motivation:
Each StreamByteDistributor may allow for priority in different ways, but there are certain characteristics which are invalid regardless of the distribution algorithm. We should validate these invalid characteristics at the flow controller level.

Modifications:
- Disallow negative stream IDs from being used. These streams may be accepted by the WeightedFairQueueByteDistributor and cause state for other valid streams to be evicted.
- Improve unit tests to verify limits are enforced.

Result:
Boundary conditions related to the priority parameters are validated more strictly."
a45f9d7939e0e121011e09526015c2719007a6f5,Improvement : allocate less object during multipart form parsing.
9cb858fcf6ad55ec0770f81595f23ae04687f52e,"NetUtil IPv6 bugs related to IPv4 and compression

Motivation:
NetUtil#getByName and NetUtil#isValidIpV6Address do not strictly enforce the format of IPv4 addresses that are allowed to be embedded in IPv6 addresses as specified in https://tools.ietf.org/html/rfc4291#section-2.5.5. This may lead to invalid addresses being parsed, or invalid addresses being considered valid. Compression of a single IPv6 word was also not handled correctly if there are 7 : characters.

Modifications:
- NetUtil#isValidIpV6Address should enforce the IPv4-Compatible and IPv4-Mapped are the only valid formats for including IPv4 addresses as specified in https://tools.ietf.org/html/rfc4291#section-2.5.5
- NetUtil#getByName should more stritcly parse IPv6 addresses which contain IPv4 addresses as specified in https://tools.ietf.org/html/rfc4291#section-2.5.5
- NetUtil should allow compression even if the number of : characters is 7.
- NetUtil#createByteArrayFromIpAddressString should use the same IP string to byte[] translation which is used in NetUtil#getByName

Result:
NetUtil#getByName and NetUtil#isValidIpV6Address respect the IPv6 RFC which defines the valid formats for embedding IPv4 addresses."
57d3393527a9dba78eda4365eae13c655e7b3f28,"Ability to extend SniHandler and configure it with arbitrary runtime data

Motivation

SniHandler is ""hardcoded"" to use hostname -> SslContext mappings but there are use-cases where it's desireable and necessary to return more information than a SslContext. The only option so far has been to use a delegation pattern

Modifications

Extract parts of the existing SniHandler into an abstract base class and extend SniHandler from it. Users can do the same by extending the new abstract base class and implement custom behavior that is possibly very different from the common/default SniHandler.

Touches

- https://github.com/netty/netty/commit/f97866dbc6e7edc987de9bf7d31f563ce726833e
- https://github.com/netty/netty/commit/b604a22395f64bca52d155127e2453aa3178af6c

Result

Fixes #6603"
8b13d9656af35469673b4f8109f88d0457de2e90,"Notify connect promise of ProxyHandler after codecs are removed

Motivation:

We need to notify the promise after the codecs are removed to allow writing from the listener and ensure we not try to do any encoding anymore. If we not do we will end up with corrupt data.

Modifications:

Notify promise after codecs are removed.

Result:

Fixes [#6671]."
b662afeece60faf349e82c8a624f6bfd7cfe7b1f,"Correctly release all buffers in UnpooledTest

Motivation:

We not correctly released all buffers in the UnpooledTest and so showed ""bad"" way of handling buffers to people that inspect our code to understand when a buffer needs to be released.

Modifications:

Explicit release all buffers.

Result:

Cleaner and more correct code."
231e6a5b7d92a7455b5c64f8e4a71a6fcc73cfd1,"Calls to discardSomeReadBytes() causes the JsonDecoder to get corrupted

Modification:

Added a lastReaderIndex value and if the current readerIndex has been reset, resets the idx and the decoder.

Result:

Fixes #6156."
0123190214c59d764a6d3c79a9570cd20fe6715a,"Netty BOM inherit from parent and its own dependency management

Motivation:

A BOM should only expose dependency management for the artifacts that the project produces (so in this case, netty artifacts). It should not have an opinion about third party dependencies (otherwise including that BOM in a project potentially overrides decisions that were made about them).

Modifications:

Stop inheriting from netty-parent and explicitly set the versions for the artifacts.

Result:

Valid BOM."
5a2d04684ed22e2e170de4121e358776179671be,"DNS Resolver visibility into individual queries

Motivation:
A single DNS query may follow many different paths through resolver-dns. The query may fail for various reasons related to the DNS protocol, general IO errors, it may be cancelled due to the query count being exceeded, or other reasons. A query may also result in other queries as we follow the DNS protocol (e.g. redirects, CNAME, etc...). It is currently impossible to collect information about the life cycle of an individual query though resolver-dns. This information may be valuable when considering which DNS servers are preferred over others.

Modifications:
- Introduce an interface which can provide visibility into all the potential outcomes of an individual DNS query

Result:
resolver-dns provides visibility into individual DNS queries which can be used to avoid poorly performing DNS servers."
ffd69115864e472aa07e095782065e8f1c94aec2,"Use constant string instead of user provided file name for DiskFileUpload temp file names.

Motivation:

DiskFileUpload creates temporary files for storing user uploads containing the user provided file name as part of the temporary file name. While most security problems are prevented by using ""new File(userFileName).getName()"" a small risk for bugs or security issues remains.

Modifications:

Use a constant string as file name and rely on the callers use of File.createTemp to ensure unique disk file names.

Result:

A slight security improvement at the cost of a little more obfuscated temp file names."
b1cb059540ecfc17c1f2b4d54c0db8e7cc743d8e,"Motivation:

It is generally useful to have origin http servers respond to
""expect: continue-100"" as soon as possible but applications without a
HttpObjectAggregator in their pipelines must use boiler plate to do so.

Modifications:

Introduce the HttpServerExpectContinueHandler handler to make it easier.

Result:

Less boiler plate for http application authors."
ea1cb20c90dde394f288cee5e8090d730d5fafbb,"Netutil IPv6 bugs

Motivation:
NetUtil#isValidIpV6Address and NetUtil#getIPv6ByName allowed an invalid form of mapped IPv4 addresses which lead to accepting invalid IPv6 addresses as valid.

Modifications:
- NetUtil#isValidIpV6Address and NetUtil#getIPv6ByName should only allow 7 colons for an IPv4 address if they are the first 2 characters.

Result:
More correct implementation of NetUtil#isValidIpV6Address and NetUtil#getIPv6ByName"
92efa3c916e0459111382b65cb08a309ac657554,"Add UptimeServer and adjust UptimeClient's code style.

Motivation:

Uptime example is lack of server.
UptimeClient's code style is a little bit different from others, which make reader feel confused.
We don't need to create a new Bootstrap instance each time client reconnect to server.

Modification:

Add UptimeServer and UptimeServerHandler which simply accept all connection and discard all message.
Change UptimeClient's code style.
Share a single Bootstrap instance.

Result:

Uptime server support.
Consistent code style.
Single Bootstrap for all reconnection."
3ba4da8a79acfdbe6daf35da96f5a0bf36fb9fe4,"Mark conscrypt as optional

Motivation:

Conscrypt is not needed when using the handler module, so it should be marked as optional

Modifications:

Mark conscrypt as optional

Result:

Be able to use handler module without conscrypt"
f30f242fee89ec37e2c65b49693ad386aa870c00,[maven-release-plugin] prepare release netty-4.1.10.Final
6915ec3bb9f5ff20ca8a3ac9264117d208dc4ab7,[maven-release-plugin] prepare for next development iteration
ed37cf20ef1ce2c792d57b02ef6494880b24f72d,"Introduce HashedWheelTimer.pendingTimeouts()

Motivation:

Fixes #6681.

Modification:

For the sake of better timer observability, expose the number of pending timeouts through the new HashedWheelTimer.pendingTimeouts method .

Result:

It's now ridiculously easy to observe Netty timer's very basic and yet important metric, the number of pending tasks/timeouts."
e58095c4f22f5637d6eb90898ecbbbbb057490d4,"Simplify code

Motivation:

Code can be simplified

Modification:

Refactor code to remove extra branching

Result:

Cleaner code."
2d38a4453c360bcd72dbefe4ec04adcdb19f8ddd,"Remove the comment which is a bit misleading

This fixes #6652.

Rationale

The invocation of initChannel of ChannelInitializer has been moved to as
early as during handlerAdded is invoked in 26aa34853, whereas it was
only invoked during channelRegistered is invoked before that. So the
comment does not describe how handlers are added in normal circumstances
anymore.

However, the code is kept as-is since there might be unusual cases, and
adding ServerBootstrapAcceptor via the event loop is always safe to
enforce the correct order."
3cc405296310643bccddc8c81998c97f25b3201c,"New native transport for kqueue

Motivation:
We currently don't have a native transport which supports kqueue https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2. This can be useful for BSD systems such as MacOS to take advantage of native features, and provide feature parity with the Linux native transport.

Modifications:
- Make a new transport-native-unix-common module with all the java classes and JNI code for generic unix items. This module will build a static library for each unix platform, and included in the dynamic libraries used for JNI (e.g. transport-native-epoll, and eventually kqueue).
- Make a new transport-native-unix-common-tests module where the tests for the transport-native-unix-common module will live. This is so each unix platform can inherit from these test and ensure they pass.
- Add a new transport-native-kqueue module which uses JNI to directly interact with kqueue

Result:
JNI support for kqueue.
Fixes https://github.com/netty/netty/issues/2448
Fixes https://github.com/netty/netty/issues/4231"
a3e496a521550669b48a7d027b4098107f07c30f,"Not try to compresses HttpMessage if IDENTITY header value is set.

Motivation:

If Content-Encoding: IDENTITY is used we should not try to compress the http message but just let it pass-through.

Modifications:

Remove ""!""

Result:

Fixes [#6689]"
e70fbe316d63c28c81e175095297b2205e656eca,"Fire exceptionCaught before exception-caused close for WebSockets.

Motivation:

WebSocket decoding throws exceptions on failure that should cause the
pipline to close.  These are currently ignored in the
`WebSocketProtocolHandler` and `WebSocketServerProtocolHandler`.  In
particular, this means that messages exceding the max message size will
cause the channel to close with no reported failure.

Modifications:

Re-fire the event just before closing the socket to allow it to be
handled appropriately.

Result:

Closes [#3063]."
9a0fd3a7b892438fccff3d63946756160a8647fe,"Do not log on explicit no unsafe again

Motivation:

Users should not see a scary log message when Netty is initialized if
Netty configuration explicitly disables unsafe. The log message that
produces this warning was previously guarded but the guard was
lost.

Modifications:

This commit brings back the guard against the scary log message if
unsafe is explicitly disabled.

Result:

No log message is produced when unsafe is unavailable because Netty was
told to not look for it."
02a2738cd21038af7e437e67bb4aa1410b3ad43d,"Do not try to use cleaner if no unsafe

Motivation:

If unsafe is unavailable, we can not use the cleaner anyway. If we try
to set it up, we get an annoying log message about unsafe being
unavailable (when debug logging is enabled). We know this will fail, so
we should not even bother and avoid the log message.

Modifications:

This commit adds a guard against setting up the cleaner if it is not
going to be available because unsafe is unavailable.

Result:

We do not try to set up the cleaner if unsafe is unavailable, and we do
not get an annoying log message."
464ae9fb7a1710c63646467fd0ca34c78bd1747a,"Expose CharSequence version of HttpUtil#getMimeType and HttpUtil#getCharset

Motivation:

It would be more flexible to make getCharset and getMimeType code usable not only for HttpMessage entity but just for any CharSequence. This will improve usability in general purpose code and will help to avoid multiple fetching of ContentType header from a message. It could be done in an external code once and CharSequence method versions could be applied.

Modification:
Expose HttpUtil#getMimeType, HttpUtil#getCharsetAsString, HttpUtil#getCharset versions which works with CharSequence. New methods are reused in the old ones which work with HttpMessage entity.

Result:

More flexible methods set with a good code reusing."
174f4ea005e448785725034223dc757cfe146976,"HttpServerKeepAliveHandler doesn't correctly handle VoidChannelPromise

Motivation:

HttpServerKeepAliveHandler throws unexpected error when I do ctx.writeAndFlush(msg, ctx.voidPromise()); where msg is with header ""Connection:close"".

Modification:

HttpServerKeepAliveHandler does promise.unvoid() before adding close listener.

Result:

No error for VoidChannelPromise with HttpServerKeepAliveHandler. Fixes [#6698]."
aab89b058e2e31fb50f5df98325dc40db61fbced,"Ensure Netty is usable on Java7

Motivation:

When adding SNIMatcher support we missed to use static delegating methods and so may try to load classes that not exists in Java7. Which will lead to errors.

Modifications:

- Correctly only try to load classes when running on java8+
- Ensure Java8+ related tests only run when using java8+

Result:

Fixes [#6700]"
f65885fc5493da63cb875047f57cb299849988b6,"Make DnsNameResolverTest pass on Java7

Motivation:

IDN.toUnicode(...) removes trailing dots when used in Java7 while it not does on java8.

Modifications:

Check if we should test with the trailing dot removed or not.

Result:

Test pass on Java7 as well."
963cd22a051a40d8dcb496727342375020b28640,"InternalThreadLocalMap#stringBuilder: ensure memory overhead

Motivation:

InternalThreadLocalMap#stringBuilder: ensure memory overhead

Modification:

If the capacity of StringBuilder is greater than 65536 then release it on the next time you get StringBuilder and re-create a StringBuilder.

Result:

Possible less memory usage."
cf26227c6ca6cf405d2b4140e47548a31da1b305,"Supply a builder for Http2Codec

Motivation:

DefaultHttp2FrameWriter has constructors that it would be a hassle to
expose as configuration parameters on Http2Codec. We should instead
make a builder for Http2Codec.

Modifications:

Get rid of the public constructors on Http2Codec and instead make sure
you can always use the builder where you would have used the constructor
before.

Result:

Http2Codec can be configured more flexibly, and the SensitivityDetector
can be configured."
cd80b6c2d8677ccee372fe43deaf8509da6eb45f,"Use simple volatile read for SingleThreadEventExecutor#state instead of UNSAFE(AtomicIntegerFieldUpdater#get), CAS operation still to use AtomicIntegerFieldUpdater

Motivation:

AtomicIntegerFieldUpdater#get is unnecessary, I think use simple volatile read is cleaner

Modifications:

Replace code STATE_UPDATER.get(this) to state in SingleThreadEventExecutor

Result:

Cleaner code"
141089998fbb5951e98483ecabb9bf0f95bcdb20,"OpenSslEngine wrap may generate bad data if multiple src buffers

Motivation:
SSL_write requires a fixed amount of bytes for overhead related to the encryption process for each call. OpenSslEngine#wrap(..) will attempt to encrypt multiple input buffers until MAX_PLAINTEXT_LENGTH are consumed, but the size estimation provided by calculateOutNetBufSize may not leave enough room for each call to SSL_write. If SSL_write is not able to completely write results to the destination buffer it will keep state and attempt to write it later. Netty doesn't account for SSL_write keeping state and assumes all writes will complete synchronously (by attempting to allocate enough space to account for the overhead) and feeds the same data to SSL_write again later which results in corrupted data being generated.

Modifications:
- OpenSslEngine#wrap should only produce a single TLS packet according to the SSLEngine API specificaiton [1].
[1] https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLEngine.html#wrap-java.nio.ByteBuffer:A-int-int-java.nio.ByteBuffer-
- OpenSslEngine#wrap should only consider a single buffer when determining if there is enough space to write, because only a single buffer will ever be consumed.

Result:
OpenSslEngine#wrap will no longer produce corrupted data due to incorrect accounting of space required in the destination buffers."
63f5cdb0d5e53f91e69edd66ea026d18f0284a55,"ByteBuf#ensureWritable(int, boolean) should not throw

Motivation:
The javadocs for ByteBuf#ensureWritable(int, boolean) indicate that it should not throw, and instead the return code should indicate the result of the operation. Due to a bug in AbstractByteBuf it is possible for a resize to be attempted on a buffer that may exceed maxCapacity() and therefore throw.

Modifications:
- If there is not enough space in the buffer, and force is false, then a resize should not be attempted

Result:
AbstractByteBuf#ensureWritable(int, boolean) enforces the javadoc constraints and does not throw."
ec935c5a7b91c77a0e0e55f54978fb0cf8338dbe,"Correctly delete SelfSignedCertificate once done with it.

Motivation:

In OpenSsl init code we create a SelfSignedCertificate which we not explicitly delete. This can lead to have the deletion delayed.

Modifications:

Delete the SelfSignedCertificate once done with it.

Result:

Fixes [#6716]"
94e9448ae391a9ced70a17ea01b3ad5e5ce32f61,"Simplify JUnit assertions

Motivation:

Some JUnit assert calls can be replaced by simpler.

Modifications:

Replacement with a more suitable methods.

Result:

More informative JUnit reports."
c053c5144d412535a0efb79fa5da4b7346138dee,"Correctly detect if Ocsp is supported

Motivation:

We only used the openssl version to detect if Ocsp is supported or not which is not good enough as even the version is correct it may be compiled without support for OCSP (like for example on ubuntu).

Modifications:

Try to enable OCSP while static init OpenSsl and based on if this works return true or false when calling OpenSsl.isOcspSupported().

Result:

Correctly detect if OSCP is supported."
ce2ce9d7a4c375511e6f0f33a5892492f6297702,"ByteToMessageDecoder#handlerRemoved may release cumulation buffer prematurely

Motivation:
ByteToMessageDecoder#handlerRemoved will immediately release the cumulation buffer, but it is possible that a child class may still be using this buffer, and therefore use a dereferenced buffer.

Modifications:
- ByteToMessageDecoder#handlerRemoved and ByteToMessageDecoder#decode should coordinate to avoid the case where a child class is using the cumulation buffer but ByteToMessageDecoder releases that buffer.

Result:
Child classes of ByteToMessageDecoder are less likely to reference a released buffer."
dd837fe803e965f198024c9cbe1875c2faf6a6c8,Remove some dead-code and cleanup
a093b89bfef7efe8a1c8ad1d3ab07a7c17ac59c4,"Allow HTTP decoding post CONNECT in `HttpClientCode`

__Motivation__

`HttpClientCodec` skips HTTP decoding on the connection after a successful HTTP CONNECT response is received.
 This behavior follows the spec for a client but pragmatically, if one creates a client to use a proxy transparently, the codec becomes useless after HTTP CONNECT.
 Ideally, one should be able to configure whether HTTP CONNECT should result in pass-through or not. This will enable client writers to continue using HTTP decoding even after HTTP CONNECT.

 __Modification__

 Added overloaded constructors to accept `parseHttpPostConnect`. If this parameter is `true` then the codec continues decoding even after a successful HTTP CONNECT.

 Also fixed a bug in the codec that was incrementing request count post HTTP CONNECT but not decrementing it on response. Now, the request count is only incremented if the codec is not `done`.

 __Result__

 Easier usage by HTTP client writers who wants to connect to a proxy but still decode HTTP for their users for subsequent requests."
9e62c795740ed0780b56e1ec2ef4bca675d7b5a4,"Correctly include all modules during build

Motivation:

To ensure the release plugin works correctly we need to ensure all modules are included during build.

Modification:

- Include all modules
- Skip compilation and tests for native code when not supported but still include the module and build the jar

Result:

Build and release works again"
5643cc6a103141103ea594054d1d4ec91140a6f6,"IPv6 validation fixes

Motivation:

`NetUtil`'s methods `isValidIpV6Address` and `getIPv6ByName` incorrectly validate some IPv6 addresses.

Modifications:

- `getIPv6ByName`: add checks for single colon at the start or end.
- `isValidIpV6Address`: fix checks for the count of colons and use `endOffset` instead of `ipAddress.length()` for the cases with the brackets or '%'.

Result:

More correct implementation of `NetUtil#isValidIpV6Address` and `NetUtil#getIPv6ByName`."
f7a19d330c725316c56ff8690ca453f7998d532d,[maven-release-plugin] prepare release netty-4.1.11.Final
0db2901f4db2d3f12b2febe220da113a9e3ed100,[maven-release-plugin] prepare for next development iteration
d88cd23bfc3d1cc2422ca73d63b281990bbcb8a5,"Trim thread local string builder if large

Motivation:

A previous change allocated a new thread local string builder if it
was getting too large. This is a good change, these string builders
can accidentally get too large and then never shrunk and that is sort
of a memory leak. However, the change allocates an entirely new string
builder which is more allocations than necessary. Instead, we can trim
the string builder if its too large, this only allocates an extra
backing array instead of a whole new object.

Modifications:

If the string builder is above a threshold, we trim the string builder
and then ensure its capacity is reasonable to we do not allocate too
much as we start using the string builder.

Result:

The thread local string builder do not serve as a memory yet we do not
allocate too many new objects."
827c4096567b0ef10bab192b1140acd1d1d15b87,"Add uber-staging and uber-snapshot profile that can be used to generate uber all jars.

Motivation:

As we now include native code for multiple platforms we need to generate an uber all jar before release it from the staging repository. For this the uber-staging profile can be used. To create a snapshot uber jar the uber-snapshot profile can be used.

Modifications:

- Add uber-staging and uber-snapshot profile
- Correct comment in pom.xml file to show usage.

Result:

Easier to create snapshot and release uber jars."
0ee49e6d668bd100320003b7d6b287bc289db28f,"Eliminate noisy logging when using sun.misc.Unsafe and running on pre Java9

Motivation:

We should only try to load jdk.internal.misc.Unsafe if we run on Java9+ to eliminate noise in the log.

Modifications:

- Move javaVersion() and related methods to PlatformDependent0 to be able to use these in the static initializer without creating a cycle.
- Only try to load jdk.internal.misc.Unsafe when running in Java9+

Result:

Less noise in the log when running pre java9."
f20063d26b640cb4121e092b5a3a0bb4c0a10eb5,"SslHandler#wrapNonAppData return early

Motivation:

SslHandler#wrapNonAppData may be able to return early if it is called from a unwrap method and the status is NEED_UNWRAP. This has been observed to occur while using the OpenSslEngine and can avoid allocation of an extra ByteBuf of size 2048.

Modifications:
- Return early from SslHandler#wrapNonAppData if NEED_UNWRAP and we are called from an unwrap method

Result:
Less buffer allocations and early return from SslHandler#wrapNonAppData."
8811041cc66c40bb8ccfba974b2357c52ccc1634,"Correctly include native modules

Motivation:

We need to include the native modules on the bom to ensure there is no version missmatch.

Modifications:

Add native modules.

Result:

Fixes [#6738]"
732948b3c4be68c2f5e4b3d3f0dc595363e18abe,"Ensure SslUtils and so SslHandler works when using with Little-Endian buffers.

Motivation:

We not correctly handle LE buffers when try to read the packet length out of the buffer and just assume it always is a BE buffer.

Modifications:

Correctly account for the endianess of the buffer when reading the packet lenght.

Result:

Fixes [#6709]."
4c6d946fbadfb14806f8232b844c5e6a26eff2de,"KQueueSocket#setTrafficClass exceptions

Motivation:
MacOS will throw an error when attempting to set the IP_TOS socket option if IPv6 is available, and also when getting the value for IP_TOS.

Modifications:
- Socket#setTrafficClass and Socket#getTrafficClass should try to use IPv6 first, and check if the error code indicates the protocol is not supported before trying IPv4

Result:
Fixes https://github.com/netty/netty/issues/6741."
0f1a2ca5ae01edff1f5ef667122b43f581ef92f4,"UnixResolverDnsServerAddressStreamProvider default name server selection and ordering bug

Motivation:
UnixResolverDnsServerAddressStreamProvider allows the default name server address stream to be null, but there should always be a default stream to fall back to ([1] Search Strategy).
UnixResolverDnsServerAddressStreamProvider currently shuffles the names servers are multiple are present, but the defined behavior is to try them sequentially [2].

[1] Search Strategy Section - https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/resolver.5.html
[2] DESCRIPTION/nameserver Section - https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man5/resolver.5.html

Modifications:
- UnixResolverDnsServerAddressStreamProvider should always use the first file provided to derive the default domain server address stream. Currently if there are multiple domain names in the file identified by the first argument of the constructor then one will be selected at random.
- UnixResolverDnsServerAddressStreamProvider should return name servers sequentially.
- Reduce access level on some methods which don't have known use-cases externally.

Result:
Fixes https://github.com/netty/netty/issues/6736"
e4531918a394ba87058d37c595e296e669f07a19,"Optimizations in NetUtil

Motivation:

IPv4/6 validation methods use allocations, which can be avoided.
IPv4 parse method use StringTokenizer.

Modifications:

Rewriting IPv4/6 validation methods to avoid allocations.
Rewriting IPv4 parse method without use StringTokenizer.

Result:

IPv4/6 validation and IPv4 parsing faster up to 2-10x."
ba5d1880bc7178b9ec90eeae02bdeb9456b01a0a,Make HttpHeadersEncoder.encodeHeader package private to match class visibility.
d768c5e628cd6d6e516b2a2d315daa0343fe3899,"MessageFormatter improvements

Motivation:

`FormattingTuple.getArgArray()` is never used.
In the `MessageFormatter` it is possible to make
some improvements, e.g. replace `StringBuffer`
with `StringBuilder`, avoid redundant allocations, etc.

Modifications:

- Remove `argArray` field from the `FormattingTuple`.
- In `MessageFormatter`:
  - replace `StringBuffer` with `StringBuilder`,
  - replace `HashMap` with `HashSet` and make it lazy initialized.
  - avoid redundant allocations (`substring()`, etc.)
  - use appropriate StringBuilder's methods for the some `Number` values.
- Porting unit tests from `slf4j`.

Result:

Less GC load on logging with internal `MessageFormatter`."
915bf5f5b7d0afa40c9921bea0025d80cb29a51a,"SslHandler#handlerRemoved0() shouldn't care about the SSLEngine being a specific type but only if it's ReferenceCounted

Motivation

SslHandler should release any type of SSLEngine if it implements the ReferenceCounted interface

Modifications

Change condition to check for ReferenceCounted interface

Result

Better use of interfaces"
201d9b6536e45ce6bb261659678dafd7216beffe,"Share code that is needed to support shaded native libraries.

Motivation:

For our native libraries in netty we support shading, to have this work on runtime the user needs to set a system property. This code should shared.

Modifications:

Move logic to NativeLbiraryLoader and so share for all native libs.

Result:

Less code duplication and also will work for netty-tcnative out of the box once it support shading"
61b11651362445f788d4ab806d691074cbe760c0,"Add support to wrap an existing filedescriptor when using native kqueue transport

Motivation:

The native epoll transport allows to wrap an existing filedescriptor, we should support the same in the native kqueue transport.

Modifications:

Add constructors that allow to wrap and existing filedescriptor.

Result:

Featureset of native transports more on par."
6a8532acd1451f34bf4f7b93bc7967b6b857238e,"Reset the contentExpected flag when RSET is written

Motivation:

If the remote server returns a 4xx/5xx error in response to
a DATA command (or earlier command if using pipelining),
SmtpRequestEncoder can become stuck in an invalid state,
not allowing any requests to be sent.

This makes the channel unusable and the connection has to be closed,
or the encoder handler has to be replaced.

Modifications:

If a RSET command is written to the channel, the contentExpected
flag is set to false, and the RSET is written to the channel.

Result:

Sending a RSET command after a server 4xx/5xx error will make it
possible to use the current connection for new mail transactions."
2db4f2557d16afac45299a2a6fe129c97cb9beda,"The SNI extension value is ASCII encoded but Netty uses UTF-8.

Motivation

RFC 6066 (https://tools.ietf.org/html/rfc6066#page-6) says that the hostname in the SNI extension is ASCII encoded but Netty decodes it using UTF-8.

Modifications

Use ASCII instead of UTF-8

Result

Fixes #6717"
12a57545690aec0a263305442769fe0cf726aa44,"Don't add null to SmtpResponse.details()

Motivation:

If the remote server returns an invalid response in the form ""000 \r\n""
(i.e. a three digit code, then space, but no details), null is added
as a singletonList to the response being constructed.

This seems unexpected and it would be easier to handle an empty
details list in client code.

Modifications:

If detail is null (because frame.isReadable() returned false after
reading the separator), initialise DefaultSmtpResponse with an empty
list instead of a list containing a single null value.

Result:

When encountering this malformed server response, a DefaultSmtpResponse
with a code but no details will be created."
2f8fe2af01c1bd5f6e02a3a10ea949318705a325,"Only try to deregister from EventLoop when the native Channel was registered before.

Motivation:

We only can call eventLoop() if we are registered on an EventLoop yet. As we just did this without checking we spammed the log with an error that was harmless.

Modifications:

Check if registered on eventLoop before try to deregister on close.

Result:

Fixes [#6770]"
61efd81952499aa36ea53b703f94696907364e79,"Add HTTP Status code 308 in HttpResponseStatus.java

Motivation:

The status 308 is defined by RFC7538.
This RFC has currently the state Proposed Standard since 2 years, but the status code is already handle by all browsers (Chrome, Firefox, Edge, Safari, …).
To let developer handles easily this status code, it is added into this list.

Modifications:

Added this status code in the list of all status codes and changed the valudOf() method

Result:

Status code 308 included"
ca9d1658a00fef7be53abeaf499cb78bdc3a5017,"Fix parameter order in SctpOutboundByteStreamHandler.

Motivation:

The first parameter of SctpMessage is protocolIdentifier, and the second is streamIdentifier. So we need to swap the parameters in encode method

Modification:

Fix order

Result:

SctpOutboundByteStreamHandler works correctly."
b419bd152a7ea4946bff824ce1c6eff62d2c56ce,"Handle the possibility of HTTP/0.9 with a better error message

Motivation

RFC 1945 (see section 3.1) says that request lines may not have a version in which case the request is assumed to be HTTP/0.9. We don't necessarily want to support that but the existing Exception should indicate the possibility of the request being HTTP/0.9 and give the user a chance to track it down.

Modifications

Indicate in the Exception's message that the request is possibly HTTP/0.9.

Result

Fixes #6739"
3c4dfed08ae2ce300f6ac1d0794d42a14c344b79,"Fix handle of ByteBuf with multi nioBuffer in EpollDatagramChannel and KQueueDatagramChannel

Motivation:
1. special handling of ByteBuf with multi nioBuffer rather than type of CompositeByteBuf (eg. DuplicatedByteBuf with CompositeByteBuf)
2. EpollDatagramUnicastTest and KQueueDatagramUnicastTest passed because CompositeByteBuf is converted to DuplicatedByteBuf before write to channel
3. uninitalized struct msghdr will raise error

Modifications:
1. isBufferCopyNeededForWrite(like isSingleDirectBuffer in NioDatgramChannel) checks wether a new direct buffer is needed
2. special handling of ByteBuf with multi nioBuffer in EpollDatagramChannel, AbstractEpollStreamChannel, KQueueDatagramChannel, AbstractKQueueStreamChannel and IovArray
3. initalize struct msghdr

Result:
handle of ByteBuf with multi nioBuffer in EpollDatagramChannel and KQueueDatagramChannel are ok"
d56a7560ead181f987677c71713b8dc815dab67a,"Netty force encodes already encoded responses

Motivation:

Fix the regression recently introduced that causes already encoded responses to be encoded again as gzip

Modification:

instead of just looking for IDENTITY, anything set for Content-Encoding should be respected and left as-is

added unit tests to capture this use case

Result:

Fixes #6784"
0b0309624a5c13f6059a647a73b3c6d9799c604f,"Correctly parse package-prefix if the jni lib is contained in a path that matches the library name.

Motivation:

We used strstr to find the path to the library, which fails if the library is contained in a directory that also matches the library name.

Modifications:

- Introduce netty_unix_util_strstr_last which will return a pointer which points to the last accourance and so not fails if the direct also matches the library name.

Result:

Be able to load the library in all cases."
742ee764241b7db536b320d1c572d78e069142c3,"RedisDecoder infinite loop

Motivation:
RedisDecoder can get into an infinite loop while decoding bulk strings if the final \r and \n to indicate the end of content are split on ByteBuf boundaries.

Modifications:
- We should break out of the decode loop if remainingBulkLength is 0 and we don't have enough data to read EOL

Result:
No more infinite loop in RedisDecoder#decodeBulkStringContent."
b71abcedd12af1ac4a3249569583db5ee49dd001,"ByteBufUtil#decodeHexDump

Motivation:
ByteBufUtil provides a hexDump method. For debugging purposes it is often useful to decode that hex dump to get the original content, but no such method exists.

Modifications:
- Add ByteBufUtil#decodeHexDump

Result:
ByteBufUtil#decodeHexDump is available to make debugging easier."
1504abd474efd055e73ae75154f879c11e137465,"Correctly exclude netty-tcnative classes from the all jar.

Motivation:

We need to exclude the netty-tcnative classes from the all jar when building it as otherwise there may be classloader issues.

Modifications:

Add io/netty/internal/tcnative to the exclude list.

Result:

Fixes [#6791]"
eee0ec390231389b32e27f9ab52e279140abd82e,"HttpObjectEncoder#isContentAlwaysEmpty cannot be overridden by subclasses

Motivation:

Allow subclasses of HttpObjectEncoder other than HttpServerCodec to override the isContentAlwaysEmpty method

Modification:

Change the method visibility from package private to protected

Result:

Fixes #6761"
4aa800259674bab303edd9427802574fcb4a3131,"Not add ChannelHandler to ChannelPipeline once the pipeline was destroyed.

Motivation:

ChannelPipeline will happily add a handler to a closed Channel's pipeline and will call handlerAdded(...) but will not call handlerRemoved(...).

Modifications:

Check if pipeline was destroyed and if so not add the handler at all but propergate an exception.

Result:

Fixes [#6768]"
270e9d66c5a422b007312cb282097a8cc9b1b091,"Fixes in QueryStringDecoder

Motivation:

QueryStringDecoder has several problems:
- doesn't decode correctly path part with `+` (plus) sign in it,
- doesn't cut a `fragment` (after `#`) from query string (see RFC 3986),
- doesn't work correctly with encoding,
- treat `%%` as a percent character escaping (it's don't described in RFC).

Modifications:

- leave `+` chars in a `path` part of uri string,
- ignore `fragment` part (after `#`),
- correctly work with encoding.
- don't treat `%%` as escaping for the `%`.

Result:

Fixed issues from #6745."
24f801c7d1d1e66193d6ff0da3b93ce427b2b329,"OpenSslEngine return NEED_WRAP if the destination buffered filled

Motivation:
If the destination buffer is completely filled during a call to OpenSslEngine#wrap(..) we may return NEED_UNWRAP because there is no data pending in the SSL buffers. However during a handshake if the SSL buffers were just drained, and filled up the destination buffer it is possible OpenSSL may produce more data on the next call to SSL_write. This means we should keep trying to call SSL_write as long as the destination buffer is filled and only return NEED_UNWRAP when the destination buffer is not full and there is no data pending in OpenSSL's buffers.

Modifications:
- If the handshake produces data in OpenSslEngine#wrap(..) we should return NEED_WRAP if the destination buffer is completely filled

Result:
OpenSslEngine returns the correct handshake status from wrap().
Fixes https://github.com/netty/netty/issues/6796."
f8788a9f6cbad154c505c63be9602f2eb324e0c8,Issue №6802. Not specified field in MQTT codec (#6807)
9fa3e556f3a223c366f5ee7f706dd9645a06e196,"Adjust Content-Length header when encoding Full Responses

Motivation:
If a full HttpResponse with a Content-Length header is encoded by the HttpContentEncoder subtypes the Content-Length header is removed and the message is set to Transfer-Encoder: chunked. This is an unnecessary loss of information about the message content.

Modifications:
- If a full HttpResponse has a Content-Length header, the header is adjusted after encoding.

Result:
Complete messages continue to have the Content-Length header after encoding."
474bf036ff9783fa739063984c893c82c9fa7c13,Update to new netty-tcnative release
e06cb82c4c1c27273e4811107e5b9ac6a66ef1fb,"JdkZlibDecoder and JZlibDecoder consistency

Motivation:
JdkZlibDecoder will allocate a new buffer when the previous buffer is filled with inflated data, but JZlibDecoder will attempt to use the same buffer by resizing. This leads to inconsistent results when these two decoders that are intended to be functionality equivalent.

Modifications:
- JdkZlibDecoder should attempt to resize and reuse the existing buffer instead of creating multiple buffers

Result:
Fixes https://github.com/netty/netty/issues/6804"
b03b0f22d1e54733c2d39c7f913f971dab14ebfa,"Removing a SeekAheadNoBackArrayException to avoid exception handling

Motivation:

A `SeekAheadNoBackArrayException` used as check for `ByteBuf#hasArray`. The catch of exceptions carries a large overhead on stack trace filling, and this should be avoided.

Modifications:

- Remove the class `SeekAheadNoBackArrayException` and replace its usage with `if` statements.
- Use methods from `ObjectUtils` for better readability.
- Make private methods static where it make sense.
- Remove unused private methods.

Result:

Less of exception handling logic, better performance."
1f0d47dee797df8d437b4151aaa39fcfae73b513,"Added PROXY Protocol TLV support

Motivation:

The current PROXY protocol implementation does not have support for optional Type-Length-Value fields. This pull requests adds the TLV values as specified in the PROXY protocol specification (http://www.haproxy.org/download/1.5/doc/proxy-protocol.txt) and adds support for arbitrary TLVs.

Modifications:

The existing HAProxyMessage implements an additional TLV reading operation. A small bug in the AF_UNIX reader which didn’t set the reader index correctly was also fixed.

Result:

The PROXY protocol supports TLVs"
ed5fcbb7732d9ffd16d9675fe40711360763c9a4,"Add explicit message when `noexec` prevents library loading.

Motivation:

Docker's `--tmpfs` flag mounts the temp volume with `noexec` by default,
resulting in an UnsatisfiedLinkError.  While this is good security
practice, it is a surprising failure from a seemingly innocuous flag.

Modifications:

Add a best-effort attempt in `NativeLibraryLoader` to detect when temp
files beng loaded cannot be executed even when execution permissions
are set, often because the `noexec` flag is set on the volume.

Requires numerous additional exclusions to the Animal Sniffer config
for Java7 POSIX permissions manipulation.

Result:

Fixes [#6678]."
629b83e0a50c48d206916451ebc152944872f618,"Move QueryStringDecoder.decodeHexByte into ByteBufUtil

Motivations:
1. There are duplicated implementations of decoding hex strings. #6797
2. ByteBufUtil.HexUtil.decodeHexDump does not handle substring start
index properly and does not decode hex byte rigorously.

Modifications:
1. Function decodeHexByte is moved from QueryStringDecoder into ByteBufUtil.
2. ByteBufUtil.HexUtil.decodeHexDump is changed to use decodeHexByte.
3. Tests are Updated accordingly.

Result:
Fixed #6797 and made hex decoding functions more robust."
7922757575b942d5de5f38d3566857f70b9b4ce6,"Allow to access memoryAddress of wrapped ByteBuf for ReadOnlyByteBuf

Motivation:

We should allow to access the memoryAddress of the wrapped ByteBuf when using ReadOnlyByteBuf for peformance reasons. If a user act on a memoryAddress its his responsible anyway to do nothing ""stupid"".

Modifications:

Delegate to wrapped ByteBuf.

Result:

Less performance overhead for various operations and also when writing to a native transport (which needs the memoryAddress)."
047da1108674f0c425f0f00d159cdec41d697268,"Correctly handle ByteBuf implementations which have no memoryAddress when writing to native transport

Motivation:

Commit 3c4dfed08ae2ce300f6ac1d0794d42a14c344b79 introduced a regression in handling buffers that have no memoryAddress.

Modifications:

Fix regression and also add unit tests.

Result:

It's possible again to write buffers without memory address."
cdf3acb6a2a1733fc903a36b3166230ee67eb21f,Update to latest netty-tcnative release
f208b147a6c1748092f1d23f71865e9082b00534,"Use FQCN to prevent classloader issues on java6

Motivation:

We need to use FQCN to prevent classloader issues for classes that are > Java6. This is a cleanup of ed5fcbb7732d9ffd16d9675fe40711360763c9a4.

Modifications:

Just remove the imports and use FQCN.

Result:

No classloader issues with java6"
80aa5dcdcc870b9bd82cae4b0be2d7c9bc893491,"Revert ""Not add ChannelHandler to ChannelPipeline once the pipeline was destroyed.""

This reverts commit 4aa800259674bab303edd9427802574fcb4a3131."
3acd5c68ea4739e500610d1783059c04fa01f5d8,[maven-release-plugin] prepare release netty-4.1.12.Final
fd67a2354df72f420187dde00c74f719234e0099,[maven-release-plugin] prepare for next development iteration
acc07fac32e019451b2a1ade3e30068b1740ee70,"disabling leak detection micro benchmark

Motivation:

When I run Netty micro benchmarks I get many warnings like:

WARNING: -Dio.netty.noResourceLeakDetection is deprecated. Use '-Dio.netty.leakDetection.level=simple' instead.

Modification:

-Dio.netty.noResourceLeakDetection replaced with -Dio.netty.leakDetection.level=disabled.

Result:

No warnings."
b6c27b9f6befa7a66bf23f9a2aa0c9c943981c6a,"Not force to run autoconf and compile multiple times

Motivation:

We should not force autoconf and compile as this will result in multiple executions and so slow down the build.

Modifications:

Remove force declarations

Result:

Faster build of native modules"
051e0ad4becaffe059e2f18d13207d0c8237ec40,"Add support for IP_TRANSPARENT socket option

Motivation:

This allows netty to operate in 'transparent proxy' mode, intercepting connections
to other addresses by means of Linux firewalling rules, as per

https://www.kernel.org/doc/Documentation/networking/tproxy.txt

The original destination address can be obtained by referencing
ch.localAddress().

Modification:

Add methods similar to those for ipFreeBind, to set the IP_TRANSPARENT option.

Result:

Allows setting and getting of the IP_TRANSPARENT option, which allows retrieval of the ultimate socket address originally requested."
1cc4607f07961622cfa3fb4351320ed54359be33,"AppendableCharSequence not to depend upon IndexOutOfBoundsException for resize

Motivation:
AppendableCharSequence depends upon IndexOutOfBoundsException to trigger a resize operation under the assumption that the resize operation will be rare if the initial size guess is good. However if the initial size guess is not good then the performance will be more unpredictable and likely suffer.

Modifications:
- Check the position in AppendableCharSequence#append to determine if a resize is necessary

Result:
More predictable performance in AppendableCharSequence#append."
f00638af52eb3f87edd8eddbedd7ccaeb3d8522b,"AbstractHttp2ConnectionHandlerBuilder support for HPACK huffman decoder initial size

Motivation:
Depending on the use case it may make sense to increase or decrease the initial size of the buffer used during the HPACK huffman decode process. This is currently not exposed through the AbstractHttp2ConnectionHandlerBuilder.

Modifications:
- Add a method to AbstractHttp2ConnectionHandlerBuilder which allows the initial size of the buffer used during the HPACK huffman decode prcoess to be configured.

Result:
AbstractHttp2ConnectionHandlerBuilder provides more control of codec-http2 knobs."
3f0085c267b5f59a7ca70729e14a18f13581dac2,"Do proper bounds-checking in HpackHuffmanDecoder to reduce overhead of IndexOutOfBoundsException creation

Motivation:

HpackHuffmanDecoder.Decoder did not do any bound-checking but just catched IndexOutOfBoundsException to detect if the array needs to grow. This can be very expensive because of fillInStackTrace()

Modifications:

Add proper bounds checking and grow the array if needed without catching IndexOutOfBoundsException.

Result:

Less overhead if the array needs to grow."
ca5ed7c114120e6d45522be0bb231fedae065cf3,"Let DnsNameResolver constructor use a default value for searchDomains

Motivation:

It’s currently complicated to extend `DnsNameResolver` as the default
value for `searchDomain` is package private.

Modifications:

* let `DnsNameResolver` accept a null `searchDomains` and then default
to `DEFAULT_SEARCH_DOMAINS`, just like it’s being done with
`resolvedAddressTypes`.
* set default `DnsNameResolverBuilder#searchDomains` value to null to
avoid cloning internal `DnsNameResolver.DEFAULT_SEARCH_DOMAINS` in
`DnsNameResolver` constructor.

Result:

More versatile `DnsNameResolver` constructor.
No array copy when using default search domains."
ea2af3593cbe5ab70b2a7433b07cc96780d88124,"Correct bom entry for netty-transport-native-unix-common

Motivation:

The entry for the netty-transport-native-unix-common module in the bom
was using the wrong artifact ID and version.

Modifications:

Correct the artifact ID for the netty-transport-native-unix-common
module in the bom.

Result:

Fixes [#6849]"
66c83f7b74b3ea28baa4a0702d621aba8331993a,"codec.mqtt: password and willMessage field types should be byte[]

Motivation:

Update the mqtt-codec based on mqtt spec (3.1.3.5).

Modification:

Changes made to the file MqttConnectPayload.java.
Subsequent changes have been made to files MqttDecoder.java, MqttEncoder.java, MqttMessageBuilders.java.
Test cases have been updated.
Result:

Fixes #6750 ."
94c0ef3c96189b3fb02ee68a4e229d1e3ba6e2df,"Not fail the promise when a closed Channel is offered back to the ChannelPool

Motivation:

We should not fail the promise when a closed Channel is offereed back to the ChannelPool as we explicit mention that the Channel must always be returned.

Modifications:

- Not fail the promise
- Add test-case

Result:

Fixes [#6831]"
aa38b6a7695bd67e9b6bd7ac90872931cef9f4cd,"Prevent unnecessary allocations in the `StringUtil#escapeCsv`

Motivation:

A `StringUtil#escapeCsv` creates new `StringBuilder` on each value even if the same string is returned in the end.

Modifications:

Create new `StringBuilder` only if it really needed. Otherwise, return the original string (or just trimmed substring).

Result:

Less GC load. Up to 4x faster work for not changed strings."
b8a418d53d961227981e7060d632aacbdeeac111,"Remove redundant code block in HttpPostRequestEncoder and make some cleanup

Motivation:

The class `HttpPostRequestEncoder` has minor issues:
- The `encodeNextChunkMultipart()` method contains two identical blocks of code with a difference only in the cast interfaces: `Attribute` vs `HttpData`. Because the `Attribute` is extended by `HttpData`, the block with the `Attribute` can be safely deleted.
- The `getNewMultipartDelimiter()` method contains a redundant `toLowerCase()`.
- The `addBodyFileUploads()` method throws `NPE` instead of `IllegalArgumentException`.

Modifications:

- Remove duplicated code block from `encodeNextChunkMultipart()`.
- Remove redundant `toLowerCase()` from `getNewMultipartDelimiter()`.
- Replace `NPE` with `IllegalArgumentException` in `addBodyFileUploads()`.
- Use `ObjectUtil#checkNotNull` where possible.

Result:

More correct and clean code."
2af895994dde5d17fb56e191b15a12bbe17df8da,"Add dependency management for missing entries

Motivation:

The bom does not provide entries for a number of netty modules, in
particular those that are deployed with classifiers. As a result, they
can't be used without defining a version.

Modifications:

Provide dependency management for the missing modules.

Result:

Fixes [#6852]"
e597756a56398a73f851f97ac667f3ae198f4545,"Remove synchronized (ReferenceCountedOpenSslContext.class) blocks

Motivation:

We had some useless synchronized (ReferenceCountedOpenSslContext.class) blocks in our code which could slow down concurrent collecting and creating of ReferenceCountedOpenSslContext instances. Beside this we missed a few guards.

Modifications:

Use ReadWriteLock to correctly guard. A ReadWriteLock was choosen as SSL.newSSL(...) will be called from multiple threads all the time so using synchronized would be worse and there would be no way for the JIT to optimize it away

Result:

Faster concurrent creating and collecting of ReferenceCountedOpenSslContext instances and correctly guard in all cases."
575baf505020f270873e9d7f79a4cf80e16583cf,"Use more aggressive expanding strategy in HpackHuffmanDecoder

Motivation:

Before we always expanded the buffer by the initialCapacity which by default is 32 bytes. This may lead to many expansions of the buffer until we finally reached the point that the buffer can fin everything.

Modifications:

Double the buffer size until the threshold of >= 1024 is hit. After this will grow it by the initialCapacity

Result:

Less expansion of the buffer (and so allocations / copies) when the intialCapacity is not big enough. Fixes [#6864]."
7460d90a67bd9724d8fdac839c384bf36cbbce37,"Add listener to returned Future rather than passed in Promise

Motivation

It's cleaner to add listeners to returned Futures rather than provided Promises because the latter can have strange side effects in terms of listeners firing and called methods returning. Adding listeners preemtively may yield also to more OPS than necessary when there's an Exception in the to be called method.

Modifications

Add listener to returned ChannelFuture rather than given ChannelPromise

Result

Cleaner completion and exception handling"
14ea69cdc1ad3c77b9c5ec088f6a69e7ec565447,"NullPointerException in Lz4FrameEncoder

Motivation:
Lz4FrameEncoder maintains internal state, but the life cycle of the buffer is not consistently managed. The buffer is allocated in handlerAdded but freed in close, but the buffer can still be used until handlerRemoved is called.

Modifications:
- Move the cleanup of the buffer from close to handlerRemoved
- Explicitly throw an EncoderException from Lz4FrameEncoder if the encode operation has finished and there isn't enough space to write data

Result:
No more NPE in Lz4FrameEncoder on the buffer."
82a43727c308f2401468d4306c1ba2b5095f54b5,Fix testcase introduced by a2bd9a4
81f9434ec70136ac2c7277937c3c837cbd7c80d2,"Added test for multi header, HttpObjectDecoder performance improvement for multi header, removed empty else block.

Motivation:

For multi-line headers HttpObjectDecoder uses StringBuilder.append(a).append(b) pattern that could be easily replaced with regular a + b. Also oparations with a and b moved out from concat operation to make it friendly for StringOptimizeConcat optimization and thus - faster.

Modification:

StringBuilder.append(a).append(b) reaplced with a + b. Operations with a and b moved out from concat oparation.

Result:
Code simpler to read and faster."
6d029ad3acb2214192c73657d6febcbfa44dadf6,"OpenSSL CHACHA20 CipherSuiteConverter updates

Motivation:
For historical reasons OpenSSL's internal naming convention for CHACHA20 based cipher suites does not include the HMAC algorithm in the cipher name. This will prevent the CHACHA20 cipher suites from being used if the RFC cipher names are specified.

Modifications:
- Add a special case for CHACHA20 cipher name conversions in CipherSuiteConverter
- Update OPENSSL_CIPHERSUITE_PATTERN to accommodate the new naming scheme for CHACHA20 cipher suites

Result:
CipherSuiteConverter now works with CHACHA20 cipher suites."
568fa998b1dfd0af5c5571d89b61beb6d6e6c54b,"Deploy transport-native-unix-common-tests

Motivation:

To be able to easily build only one of the native sub-modules its needed that all the dependencies can be fetched from maven. At the moment we dont deploy transport-native-unix-common and so an attempt to just build for example the native epoll transport fails with:

[ERROR] Failed to execute goal on project netty-transport-native-epoll: Could not resolve dependencies for project io.netty:netty-transport-native-epoll:jar:4.1.13.Final-SNAPSHOT: Could not find artifact io.netty:netty-transport-native-unix-common-tests:jar:4.1.13.Final-SNAPSHOT in sonatype-nexus-snapshots (https://oss.sonatype.org/content/repositories/snapshots) -> [Help 1]

Modifications:

Deploy jar

Result:

All dependencies on maven repository."
6b25909f6b586ac22c32e570ed82cc8fc7b188c8,"HTTP/2 HelloWorld clear text NPE

Motivation:
HelloWorldHttp2Handler throws a NPE when converting from HTTP/1.x headers to HTTP/2 headers because there is no Host header.

Modifications:
- HelloWorldHttp2Handler should check if the Host header is present before setting it in the HTTP/2 headers

Result:
No more NPE in HelloWorldHttp2Handler."
8f8be3122622745929bd634e920559e453920426,"Remove unnecessary conversions

Motivation:

In a `HttpConversionUtil#toHttp2Headers` a status code conversion can be replaced with using `HttpResponseStatus#codeAsText` method.

Modifications:

Apply `HttpResponseStatus#codeAsText` method.

Result:

Less allocations."
5934ae8fd28b2a7b2b9eb892c2192428c2a113d1,"Http2FrameLogger Updates

Motivation:
The Http2FrameLogger uses a custom format when logging events. We should use the more familiar format of 'channel event type: details' and single line logging for more consistent debugging.

Modifications:
- Http2FrameLogger should not use a StringBuilder and instead should directly use the Logger
- Http2FrameLogger should use the more consistent format defined above

Result:
Http2FrameLogger's logging formate is more consistent with other log events."
6cd086050f0af1c81f8155472cd4160e7a185718,"DNS Resolver Search Domain Bugs

Motivation:
The DNS resolver supports search domains. However the ndots are not correctly enforced. The search domain should only be appended under the following scenario [1]:

> Resolver queries having fewer than ndots dots (default is 1) in them will be attempted using each component of the search path in turn until a match is found.

The DNS resolver current appends the search domains if ndots is 0 which should never happen (because no domain can have less than 0 dots).

[1] https://linux.die.net/man/5/resolv.conf

Modifications:
- Parse /etc/resolv.conf to get the default value for ndots on Unix platforms
- The search domain shouldn't be used if ndots is 0
- Avoid failing a promise to trigger the search domain queries in DnsNameResolverContext#resolve

Result:
More correct usage of search domains in the DNS resolver.
Fixes https://github.com/netty/netty/issues/6844."
9ad74e72e66e36ec7323ca9594611d2cb8b9fc89,"Remove content-length header leniency

Motivation:

If the content-length does not parse as a number, leniency causes this
to instead be parsed as the default value. This leads to bodies being
silently ignored on requests which can be incredibly dangerous. Instead,
if the content-length header is invalid, an exception should be thrown
for upstream handling.

Modifications:

This commit removes the leniency in parsing the content-length header by
allowing a number format exception, if thrown, to escape from the method
rather than falling back to the default value.

Result:

In invalid content-length header will not be silently ignored."
b98561552292240aed69b80bd5bc1cdca67a9137,"Fix compiler warnings in netty Epoll and unix common

Motivation:
Google requires stricter compilation by adding -Werror and enabling many other warnings.

Modification:

* fix warning caused by -Wmissing-braces

* Use the address of `sendmmsg` rather than the function itself when
checking for presence.  This resovles the warning caused by
`-Wpointer-bool-conversion`.

More detail:
When compiling on Linux, `sendmmsg` is always present, so the
function is always nonnull.  When compiling elsewhere, the
function is defined as `__attribute__((weak))` which means it
may be absent at link time.  This is controlled by
`IO_NETTY_SENDMMSG_NOT_FOUND`, which is off by default.

The reason for the error is due to the risk of accidentally not
calling the function.  By adding `&` before the function, there
is no ambiguity.  (the result of the fn call cannot have its
address taken.)

* use != to check for sendmmsg

Result:
Easier compilation."
7baef4fbe89559b10fbeed7e17b16f953ff3b7ab,"Move ""fallthrough"" statement to where fall actually happens Motivation: Static analysis looks for error prone switch case statements. Accidental fall through is one such case, but it is sometimes intentional. To indicate this, the ""//fallthrough"" comment can be added before the fall.

The code in question has this comment, but it is *after* the fall
so the static analysis flags it.

This is described in http://errorprone.info/bugpattern/FallThrough

Modifications:
Move fall through comment to where the fall actually occurs

Result:
More compatible with Error Prone tools"
cbde38f6e96ee2a8af3fdca0527c1a16a1f2e82d,"Add cause to thrown exception in SelfSignedCert

Motivation:
Exceptions with causes are easier to debug

Modification:
Add the cause when generating a SelfSignedCert

Results:
More debugging context"
58386aea43a1efa7c8ec7c3dc2e015405e4f6065,Upgrade to netty-tcnative 2.0.4.Final
1df722f65bc8aa3fc01dd3b82cb29a72c1a35a2d,kqueue version of 7baef4fbe89559b10fbeed7e17b16f953ff3b7ab
1767814a466f9fc6a51c87a84bd73d93eb0ca1d7,"Replace DnsNameResolverContext#trace special code with an implementation of DnsQueryLifecycleObserver

Motivation:
DnsQueryLifecycleObserver is designed to capture the life cycle of every query. DnsNameResolverContext has a custom trace mechanism which consists of a StringBuilder and manual calls throughout the class. We can remove some special case code in DnsNameResolverContext and instead use a special implementation of DnsQueryLifecycleObserver when trace is enabled.

Modifications:
- Remove all references to the boolean trace variables in DnsNameResolverContext and DnsNameResolver
- Introduce TraceDnsQueryLifecycleObserver which will be used when trace is enabled and will log similar data as what trace currently provides

Result:
Less special case code in DnsNameResolverContext and instead delegate to TraceDnsQueryLifecycleObserver to capture trace information."
01eb428b39156e61624dae303ae9772ba3424b36,"Move methods for decode hex dump into StringUtil

Motivation:

PR #6811 introduced a public utility methods to decode hex dump and its parts, but they are not visible from netty-common.

Modifications:

1. Move the `decodeHexByte`, `decodeHexDump` and `decodeHexNibble` methods into `StringUtils`.
2. Apply these methods where applicable.
3. Remove similar methods from other locations (e.g. `HpackHex` test class).

Result:

Less code duplication."
c3bd1245c56a47727d8f94c30910ecb2b27bce68,"SocksCommonUtils cleanup

Motivation:

1. Internal class `SocksCommonUtils` contains a method `intToIp` that also exists in the `NetUtil`.
2. A `SocksCommonUtils#ipv6toCompressedForm` is never used.

Modifications:

1. Replace `intToIp` method usage with `NetUtil#intToIpAddress`.
2. Remove unused methods from `SocksCommonUtils`.

Result:

Less code for supports."
83de77fbe5385130ba9afc666fecbe9b59bd8032,"Make Native loading work better with Java 8

Motivation:
Enable static linking for Java 8.  These commits are the same as those introduced to netty tcnative.  The goal is to allow lots of JNI libraries to be statically linked together without having conflict `JNI_OnLoad` methods.

Modification:
* add JNI_OnLoad suffixes to enable static linking
* Add static names to the list of libraries that try to be loaded
* Enable compiling with JNI 1.8
* Sort includes

Result:
Enable statically linked JNI code."
d672a5a483d0c919279dc9d9724011b6d9dcfd9f,"Optimizations in QueryStringEncoder

Motivation:

A life cycle of QueryStringEncoder is simple: create, append params, convert to String. Current realization collect params in the list, and calculate an URI string in `toString` method. We can simplify this: don't store params to the list, and immediately append parameters to the `StringBuilder`.

Modifications:

- Remove list for params and remove a tuple class `Param`.
- Use one common `StringBuilder` and append parameters into it.
- Resolve `TODO` in the `encodeParam` method.

Result:

Less allocations (no `ArrayList`, no `Param` tuples). Second `toString` call is faster."
efe37e0d28d220deb9e5f745a2aebcb94261d7e5,"UnknownHostException should mention search domain if used

Motivation:
ba80fbbe05489227d64dcbd4f5e91bef68072c37 modified the UnknownHostException to not include the search domain if the DNS query failed, but this masks what DNS query actually failed. Have the full hostname (including the search domain) provides more visibility and may help diagnose a configuration error if queries are unexpectedly failing.

Modifications:
- Remove DnsNameResolverContext#pristineHostname

Result:
UnknownHostException is more accurate and reflect what hostname actually resulted in failure."
c8a23028adb35330d9bb8dd707b2bd76ee5b7957,"fix UnixChannelUtil#isBufferCopyNeededForWrite
fix not execute unit test in transport-native-unix-common-tests module

Motivation:

- Commit 047da11 introduced an bug for still copy byteBuf for composed of n(n <= IOV_MAX) NIO direct buffers
- Commit 3c4dfed add UnixChannelUtilTest in transport-native-unix-common-tests module, but not execute in maven compile

as issue #6825, #6870

Modifications:

- modified UnixChannelUtil#isBufferCopyNeededForWrite(ByteBuf), and UnixChannelUtilTest
- move UnixChannelUtilTest into transport-native-unix-common module, and add packet scope method UnixChannelUtil#isBufferCopyNeededForWrite(ByteBuf, int)

Result:

- no copy byteBuf for composed of n(n <= IOV_MAX) NIO direct buffers
- auto execute unit tests in UnixChannelUtilTest and it is easier to mock IOV_MAX"
42789d43de7ca0a89d3f510efa04551563c2f44c,Upgrade to netty-tcnative 2.0.5.Final
cc1a2091857b6201337815330c942f52fd60f65c,"Add content-security-policy and x-frame-options to HttpHeaderNames

Motivation:

These headers can be used to prevent clickjacking.

Modifications:

Add static fields for content-security-policy and x-frame-options

Result:

Expose general useful names"
322fe8ec85d72271a5ac0ed3f0149c4ea1323168,"Exhaust non-exhaustive switch cases

Motivation:
ErrorProne warns about missing cases in switch statements that
appear as an oversight.

Modifcation:
Add the last case to statement to ensure all cases are covered.

Result:
Able to enable Error Prone static analysis"
ba3616da3edf843412bc366f5dde533f3aef1add,"Apply appropriate methods for writing CharSequence into ByteBuf

Motivation:

1. `ByteBuf` contains methods to writing `CharSequence` which optimized for UTF-8 and ASCII encodings. We can also apply optimization for ISO-8859-1.
2. In many places appropriate methods are not used.

Modifications:

1. Apply optimization for ISO-8859-1 encoding in the `ByteBuf#setCharSequence` realizations.
2. Apply appropriate methods for writing `CharSequences` into buffers.

Result:

Reduce overhead from string-to-bytes conversion."
3b5dd4e9dc0b6e350d27a2628b3f37b2483fe4a9,Change type of X_FRAME_OPTIONS and CONTENT_SECURITY_POLICY to AsciiString as a followup to cc1a2091857b6201337815330c942f52fd60f65c
dd69a813d46c2db2b8071445ecddb4bf939ba2e9,"Performance improvement for HttpRequestEncoder. Insert char into the string optimized.

Motivation:

Right now HttpRequestEncoder does insertion of slash for url like http://localhost?pararm=1 before the question mark. It is done not effectively.

Modification:

Code:

new StringBuilder(len + 1)
                .append(uri, 0, index)
                .append(SLASH)
                .append(uri, index, len)
                .toString();
Replaced with:

new StringBuilder(uri)
                .insert(index, SLASH)
                .toString();
Result:

Faster HttpRequestEncoder. Additional small test. Attached benchmark in PR.

Benchmark                                      Mode  Cnt        Score        Error  Units
HttpRequestEncoderInsertBenchmark.newEncoder  thrpt   40  3704843.303 ±  98950.919  ops/s
HttpRequestEncoderInsertBenchmark.oldEncoder  thrpt   40  3284236.960 ± 134433.217  ops/s"
773757f2ddb04797d2b109297d4122ab6f2d015a,"Introduce  EpollSocketChannelConfig.setTcpKeepCnt as replacement for setTcpKeepCntl.

Motivation:

We had a typo in the method name of the EpollSocketChannelConfig.

Modifications:

Deprecate old method and introduce a new one.

Result:

Fixes [#6909]"
d3c44ef9853755ffbd6417109c12e59b9a783564,"Update Http2SecurityUtil cipher suites

Motivation:
Mozilla's Server Side cipher suite recommendations have been updated [1].

[1] https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility

Modifications:
- Update Http2SecurityUtil to exclude older ciphers.
- Remove support for DHE ciphersuites because they are now Intermediate and BoringSSL dropped support for these ciphers [2]

[2] https://boringssl.googlesource.com/boringssl/+/7e06de5d2d1b53c57c0c81e8d6ba4122b64cf626

Result:
Updated default ciphers for HTTP/2."
07a641900c55652d71018c0c1474aba20059432a,"transport-native-kqueue libraries should not lazy link

Motivation:
We rely upon the linker being non-lazy to test compatibility the native library compatibility for kqueue, but the default mode of operation is to lazy link.

Modifications:
- We should modify the build scripts to inform the linker that this library should not be lazy linked
- Error messages changes
dyld: lazy symbol binding failed: Symbol not found: _clock_gettime

java.lang.UnsatisfiedLinkError: unsupported JNI version 0xFFFFFFFF required by .../libnetty-transport-native-kqueue.dylib

Result:
Link errors are detected upon library load time."
bc46a99eaa448136ae3a54c248cc3f9dfb8f87e9,"DefaultHttp2ConnectionEncoder#writeHeaders shouldn't send GO_AWAY if stream is closed

Motivation:
DefaultHttp2ConnectionEncoder#writeHeaders attempts to find a stream object, and if one doesn't exist it tries to create one. However in the event that the local endpoint has received a RST_STREAM frame before writing the response headers we attempt to create a stream. Since this stream ID is for the incorrect endpoint we then generate a GO_AWAY for what appears to be a protocol error, but can instead be failed locally.

Modifications:
- Just fail the local promise in the above situation instead of sending a GO_AWAY

Result:
Less severe consequences if the server asynchronously sends headers after a RST_STREAM has been received.
Fixes https://github.com/netty/netty/issues/6906."
32b3f58f6308f0d7cc22fad4a94406c4fe16a402,"Close channels that are released to a closed FixedChannelPool.

Motivation:

Channels returned to a FixedChannelPool after closing it remain active.

Since channels that where acquired from the pool are not closed during the close operation, they remain open even after releasing the channel back to the pool where they are then in accessible and become in-effect a connection leak.

Modification:

Close the released channel on releasing back to a closed pool.

Result:

Much harder to create a connection leak by closing an active
FixedChannelPool instance."
b7a5743e8be5df2d5b109a35881690bac3939fd3,"Return the correct Future from FixedChannelPool.release()

Motivation:

The behaviour of the FixedChannelPool.release was inconsistent with the
SimpleChannelPool implementation, in that given promise is returned.

In the FixedChannelPool implementation a new promise was return and
this meant that the completion of that promise can be different.
Specifically on releasing a channel to a closed pool, the parameter
promise is failed with an IllegalStateException but the returned one
will have been successful (as it was completed by call to super
.release)

Modification:

Return the given promise as the result of FixedChannelPool.release

Result:

Returned promise will reflect the result of the release operation."
f35047765f00de1d642d23bc0f980fa8eceacf3b,"Avoid a double check ByteBuf#ensureWritable in ByteBufUtil

Motivation:

Methods `ByteBufUtil#writeUtf8` and `ByteBufUtil#writeAscii` contains a check `ByteBuf#ensureWritable` before the calling `ByteBuf#writeBytes`. But the `ByteBuf#writeBytes` also do a such check inside.

Modifications:

Make checks more targeted.

Result:

Less redundant method calls."
8d0e0922a512a08a287c25bed6462fa244738603,"SocksCmdRequest and SocksCmdResponse are trying to convert host from IDN for the non-DOMAIN address types

Motivation:

In the SocksCmdRequest and SocksCmdResponse constructors a host param converts from IDN to ascii compatible form regardless address type.

Modifications:

Use `IDN#toASCII` only for `DOMAIN` address type.

Result:

More correct host handling in socks commands."
1df8f2ccd1f12a7b5c455d7b8e44d5b28fa4be7c,"KQueue crash due to close/cleanup sequencing

Motivation:
The kqueue documentation states that 'Calling close() on a file descriptor will remove any kevents that reference the descriptor.' [1], but doesn't mention if this cleanup will be done synchronously. Under some circumstances it has been observed that cleanup was not done immediately and when KQueueEventLoop attempted to access the channel associated with the event the JVM would crash, a ClassCastException, or generally undefined behavior would occur because of invalid pointer references.

[1] https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2

Modifications:
- AbstractKqueueChannel#doClose should not rely upon this assumption and instead should call doDeregister() to ensure cleanup is done synchronously.
- Deleting a kevent should also set the jniSelfPtr stored in the udata of that kevent to NULL, to ensure we will not dereference it later.

Result:
No more kqueue crash due to close/cleanup sequencing."
91b62da8c150b6202acd812772479856ab4c3dad,"Remove @deprecation keyword on AbstractUnsafe.ensureOpen(...)

Motivation:

e84567004324c0bfd04b0ca9e1e182ed89394b16 marked AbstractUnsafe.ensureOpen(...) as deprecated for no reason.

Modifications:

Remove `@deprecation`

Result:

Remove incorrect annotation"
1ba265ad4d14163e346996a5c0a663b4600e7d29,"AbstractMethodError with barchart-udt

Motivation:

`SocketChannelUDT` from barchart-udt does not have the java 7 `public abstract SocketChannel bind(SocketAddress local)` method. Calling the abstract method `SocketChannel.bind(SocketAddress localAddress)` for `SocketChannelUDT` leads to an `AbstractMethodError` runtime error.

Modifications:

Make workaround with explicit call of `SocketChannelUDT.bind(SocketAddress local)` as it done in `NioUdtByteConnectorChannel`.

Result:

Fixes [#6934]."
449befa0034e2cf77b3033f62d4f2153cef5a1d7,"Workaround IBM's J9 JVM getSupportedCipherSuites() returning SSL_ prefix cipher names

Motivation:
IBM's J9 JVM utilizes a custom cipher naming scheme with SSL_ prefix [1] instead of the TLS_ prefix defined by TLS RFCs and the JSSE cihper suite names [2]. IBM's documentation says that the SSL_ prefix are ""interchangeable"" with cipher names with the TLS_ prefix [1]. To work around this issue we parse the supported cipher list and see an SSL_ prefix we can also add the same cipher with the TLS_ prefix. For more details see a discussion on IBM's forums [3] and IBM's issue tracker [4].

[1] https://www.ibm.com/support/knowledgecenter/en/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/ciphersuites.html
[2] http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#ciphersuites
[3] https://www.ibm.com/developerworks/community/forums/html/topic?id=9b5a56a9-fa46-4031-b33b-df91e28d77c2
[4] https://www.ibm.com/developerworks/rfe/execute?use_case=viewRfe&CR_ID=71770

Modifications:
- When parsing the supported cipher list to get the supported ciphers and we encounter a SSL_ prefix we should also add a TLS_ prefix cipher.
- Remove SSL_ prefix ciphers from Http2SecurityUtil.

Result:
Work around for IBM JVM's custom naming scheme covers more cases for supported cipher suites."
6d80c641e92588a5317c0b9a9631918a521d52bc,"DNS Resolver should be more consistent with JDK resolution

Motivation:
If there are multiple DNS servers to query Java's DNS resolver will attempt to resolve A and AAAA records in sequential order and will terminate with a failure once all DNS servers have been exhausted. Netty's DNS server will share the same DnsServerAddressStream for the different record types which may send the A question to the first host and the AAAA question to the second host. Netty's DNS resolution also may not progress to the next DNS server in all situations and doesn't have a means to know when resolution has completed.

Modifications:
- DnsServerAddressStream should support new methods to allow the same stream to be used to issue multiple queries (e.g. A and AAAA) against the same host.
- DnsServerAddressStream should support a method to determine when the stream will start to repeat, and therefore a failure can be returned.
- Introduce SequentialDnsServerAddressStreamProvider for sequential use cases

Result:
Fixes https://github.com/netty/netty/issues/6926."
c318fc7ceaecad8321374c13395c67e369467e86,"Remove not needed intermediate collection while reading DatagramPackets in native transports

Motivation:

We used an intermediate collection to store the read DatagramPackets and only fired these through the pipeline once wewere done with the reading loop. This is not needed and can also increase memory usage.

Modifications:

Remove intermediate collection

Result:

Less overhead and possible less memory usage during read loop."
4d51eca21828a100a583769a7ec8c266892cd9f1,"SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite debug info

Motivation:
SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite has been observed to fail on CI servers. Knowing how many bytes were seen by the client would be helpful.

Modifications:
- Add bytesSeen to the exception if the client closes early.

Result:
More debug info available."
d040c939e54cee8b390dd5ab0219c2bd8944610f,"UnixResolverDnsServerAddressStreamProviderTest failure

Motivation:
InetSocketAddress#getHostName() may attempt a reverse lookup which may lead to test failures because the expected address will not match.

Modifications:
- Use InetSocketAddress#getHostString() which will not attempt any lookups and instead return the original String

Result:
UnixResolverDnsServerAddressStreamProviderTest is more reliable."
d3581b575eea6c9cc2ab6f7ee7db9be965660fc7,"UnixResolverDnsServerAddressStreamProvider should allow for empty /etc/resolver dir

Motivation:
UnixResolverDnsServerAddressStreamProvider currently throws an exception if /etc/resolver exists but it empty. This shouldn't be an exception and can be tolerated as if there is no contribution from /etc/resolver.

Modifications:
- Treat /etc/resolver as present and empty the same as not being present

Result:
UnixResolverDnsServerAddressStreamProvider initialization can tolerate empty /etc/resolver directory."
016e00bf7a914c2db3d53128291a953bf3ea0fa8,"Clarify the appointment of the intermediate collection

Motivation:

An intermediate list is creating in the `EpollEventLoop#closeAll` to prevent ConcurrentModificationException. But this is not the obvious purpose has no comment.

Modifications:

Add comment to clarify the appointment of the intermediate collection.

Result:

More clear code."
c7f8168324eeba89e4a8e4086948bacbdc3e6a14,[maven-release-plugin] prepare release netty-4.1.13.Final
2a376eeb1b14b1f2e23e1c30ac2f2a213dbea25b,[maven-release-plugin] prepare for next development iteration
ec490b2a88acae596cbc08c7648a22ac18d19c63,"HttpProxyHandler: allow setting headers

Motivation:

In some environments, the HTTP CONNECT handshake requires special headers to work.

Modification:

Update HttpProxyHandler to accept a HttpHeaders argument.

Result:

The header is passed along in the HTTP CONNECT request, and the proxy request can be successfully completed."
83db2b07b46d6096c9963c87d2530155dba06d58,"Also use realloc when shrink the buffer.

Motivation:

We should also use realloc when shrink the buffer to eliminate extra allocations / memory copies when possible.

Modifications:

Use realloc for expanding and shrinking when possible.

Result:

Less memory copies and allocations"
df568c739e2a73b4a1aea533a4fea934fdf9d0f7,"Use ByteBuf#writeShort/writeMedium instead of writeBytes

Motivation:

1. Some encoders used a `ByteBuf#writeBytes` to write short constant byte array (2-3 bytes). This can be replaced with more faster `ByteBuf#writeShort` or `ByteBuf#writeMedium` which do not access the memory.
2. Two chained calls of the `ByteBuf#setByte` with constants can be replaced with one `ByteBuf#setShort` to reduce index checks.
3. The signature of method `HttpHeadersEncoder#encoderHeader` has an unnecessary `throws`.

Modifications:

1. Use `ByteBuf#writeShort` or `ByteBuf#writeMedium` instead of `ByteBuf#writeBytes` for the constants.
2. Use `ByteBuf#setShort` instead of chained call of the `ByteBuf#setByte` with constants.
3. Remove an unnecessary `throws` from `HttpHeadersEncoder#encoderHeader`.

Result:

A bit faster writes constants into buffers."
f7b3caeddc5bb1da75aaafa4a66dec88ed585d69,"OpenSslEngine option to wrap/unwrap multiple packets per call

Motivation:
The JDK SSLEngine documentation says that a call to wrap/unwrap ""will attempt to consume one complete SSL/TLS network packet"" [1]. This limitation can result in thrashing in the pipeline to decode and encode data that may be spread amongst multiple SSL/TLS network packets.
ReferenceCountedOpenSslEngine also does not correct account for the overhead introduced by each individual SSL_write call if there are multiple ByteBuffers passed to the wrap() method.

Modifications:
- OpenSslEngine and SslHandler supports a mode to not comply with the limitation to only deal with a single SSL/TLS network packet per call
- ReferenceCountedOpenSslEngine correctly accounts for the overhead of each call to SSL_write
- SslHandler shouldn't cache maxPacketBufferSize as aggressively because this value may change before/after the handshake.

Result:
OpenSslEngine and SslHanadler can handle multiple SSL/TLS network packet per call.

[1] https://docs.oracle.com/javase/7/docs/api/javax/net/ssl/SSLEngine.html"
86e653e04fb452c92154e39cd7189615dc0ec323,"SslHandler aggregation of plaintext data on write

Motivation:
Each call to SSL_write may introduce about ~100 bytes of overhead. The OpenSslEngine (based upon OpenSSL) is not able to do gathering writes so this means each wrap operation will incur the ~100 byte overhead. This commit attempts to increase goodput by aggregating the plaintext in chunks of <a href=""https://tools.ietf.org/html/rfc5246#section-6.2"">2^14</a>. If many small chunks are written this can increase goodput, decrease the amount of calls to SSL_write, and decrease overall encryption operations.

Modifications:
- Introduce SslHandlerCoalescingBufferQueue in SslHandler which will aggregate up to 2^14 chunks of plaintext by default
- Introduce SslHandler#setWrapDataSize to control how much data should be aggregated for each write. Aggregation can be disabled by setting this value to <= 0.

Result:
Better goodput when using SslHandler and the OpenSslEngine."
24263c2bd80f483184b2e8593f2aad1f684e94bf,Fix merge issue from 86e653e04fb452c92154e39cd7189615dc0ec323
7cfe4161823dec6192543e916b927e7de40190be,"Use unbounded queues from JCTools 2.0.2

Motivation:
JCTools 2.0.2 provides an unbounded MPSC linked queue. Before we shaded JCTools we had our own unbounded MPSC linked queue and used it in various places but gave this up because there was no public equivalent available in JCTools at the time.

Modifications:
- Use JCTool's MPSC linked queue when no upper bound is specified

Result:
Fixes https://github.com/netty/netty/issues/5951"
81fb2eede866433be8455c040b0455d4791775ca,"Revert ""Revert ""SslHandler avoid calling wrap/unwrap when unnecessary""""

Motivation:
PR https://github.com/netty/netty/pull/6803 corrected an error in the return status of the OpenSslEngine. We should now be able to restore the SslHandler optimization.

Modifications:
- This reverts commit 7f3b75a5091dcd6d882102fdb92daa6931e02c30.

Result:
SslHandler optimization is restored."
74140dbf53456c30600d7870316c5ac79878a003,Correct merge error from f7b3caeddc5bb1da75aaafa4a66dec88ed585d69
e5455d31b3cfe74b5c6008b68955a10d7d539f9d,"Fix Race in ReferenceCountedOpenSslEngine

Motivation:
ReferenceCountedOpenSslEngine is careful to lock access to `ssl`
almost everywhere (manually verified) *except* in the constructor.
Since `ssl` is non-final, it does not enjoy automatic thread safety
of the code that uses it.  Specifically, that means netty tcnative
code is not thread safe.

Modifications:

Ensure that all ssl engine intialization and variables related to
it are properly synchronized  by adding in the constructor.

Result:
Less noisy race detector.

Notes:
The specific racing threads are:
```
  Read of size 8 at 0x7b5400019ff8 by thread T52 (mutexes: write M215300):
    #0 ssl_do_info_callback .../src/ssl/ssl_lib.c:2602:24 (f077793ecd812aeebb37296c987f655c+0x23c6834)
    #1 ssl_process_alert .../src/ssl/tls_record.c:473:3 (f077793ecd812aeebb37296c987f655c+0x23a5346)
    #2 tls_open_record .../src/ssl/tls_record.c:338:12 (f077793ecd812aeebb37296c987f655c+0x23a5289)
    #3 ssl3_get_record .../src/ssl/s3_pkt.c:146:7 (f077793ecd812aeebb37296c987f655c+0x23a3da0)
    #4 ssl3_read_app_data .../src/ssl/s3_pkt.c:388:17 (f077793ecd812aeebb37296c987f655c+0x23a368f)
    #5 ssl_read_impl .../src/ssl/ssl_lib.c:722:15 (f077793ecd812aeebb37296c987f655c+0x23c0895)
    #6 SSL_read .../src/ssl/ssl_lib.c:743:10 (f077793ecd812aeebb37296c987f655c+0x23c075b)
    #7 netty_internal_tcnative_SSL_readFromSSL .../netty_tcnative/openssl-dynamic/src/main/c/ssl.c:946:12 (f077793ecd812aeebb37296c987f655c+0x23827f7)
    #8 <null> <null> (0x7fc0760193be)
    #9 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.readPlaintextData(Ljava/nio/ByteBuffer;)I (ReferenceCountedOpenSslEngine.java:449)
    #10 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap([Ljava/nio/ByteBuffer;II[Ljava/nio/ByteBuffer;II)Ljavax/net/ssl/SSLEngineResult; (ReferenceCountedOpenSslEngine.java:882)
    #11 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap([Ljava/nio/ByteBuffer;[Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult; (ReferenceCountedOpenSslEngine.java:985)
    #12 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)Ljavax/net/ssl/SSLEngineResult; (ReferenceCountedOpenSslEngine.java:1028)
    #13 io.netty.handler.ssl.SslHandler$SslEngineType$1.unwrap(Lio/netty/handler/ssl/SslHandler;Lio/netty/buffer/ByteBuf;IILio/netty/buffer/ByteBuf;)Ljavax/net/ssl/SSLEngineResult; (SslHandler.java:206)
    #14 io.netty.handler.ssl.SslHandler.unwrap(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;II)Z (SslHandler.java:1162)
    #15 io.netty.handler.ssl.SslHandler.decode(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V (SslHandler.java:1084)
    #16 io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V (ByteToMessageDecoder.java:489)
    #17 io.netty.handler.codec.ByteToMessageDecoder.callDecode(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Ljava/util/List;)V (ByteToMessageDecoder.java:428)
    #18 io.netty.handler.codec.ByteToMessageDecoder.channelRead(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V (ByteToMessageDecoder.java:265)
    #19 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:362)
    #20 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:348)
    #21 io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(Ljava/lang/Object;)Lio/netty/channel/ChannelHandlerContext; (AbstractChannelHandlerContext.java:340)
    #22 io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V (DefaultChannelPipeline.java:1334)
    #23 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:362)
    #24 io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;)V (AbstractChannelHandlerContext.java:348)
    #25 io.netty.channel.DefaultChannelPipeline.fireChannelRead(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:926)
    #26 io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read()V (AbstractNioByteChannel.java:134)
    #27 io.netty.channel.nio.NioEventLoop.processSelectedKey(Ljava/nio/channels/SelectionKey;Lio/netty/channel/nio/AbstractNioChannel;)V (NioEventLoop.java:644)
    #28 io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized()V (NioEventLoop.java:579)
    #29 io.netty.channel.nio.NioEventLoop.processSelectedKeys()V (NioEventLoop.java:496)
    #30 io.netty.channel.nio.NioEventLoop.run()V (NioEventLoop.java:458)
    #31 io.netty.util.concurrent.SingleThreadEventExecutor$5.run()V (SingleThreadEventExecutor.java:858)
    #32 io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run()V (DefaultThreadFactory.java:138)
    #33 java.lang.Thread.run()V (Thread.java:745)
    #34 (Generated Stub)

  Previous write of size 8 at 0x7b5400019ff8 by thread T97:
    #0 SSL_CTX_set_info_callback .../ssl/ssl_session.c:1136:22 (f077793ecd812aeebb37296c987f655c+0x23bd621)
    #1 netty_internal_tcnative_SSL_newSSL .../netty_tcnative/openssl-dynamic/src/main/c/ssl.c:830:5 (f077793ecd812aeebb37296c987f655c+0x2382306)
    #2 <null> <null> (0x7fc0760193be)
    #3 io.netty.handler.ssl.ReferenceCountedOpenSslEngine.<init>(Lio/netty/handler/ssl/ReferenceCountedOpenSslContext;Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;IZ)V (ReferenceCountedOpenSslEngine.java:237)
    #4 io.netty.handler.ssl.OpenSslEngine.<init>(Lio/netty/handler/ssl/OpenSslContext;Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;I)V (OpenSslEngine.java:31)
    #5 io.netty.handler.ssl.OpenSslContext.newEngine0(Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine; (OpenSslContext.java:49)
    #6 io.netty.handler.ssl.ReferenceCountedOpenSslContext.newEngine(Lio/netty/buffer/ByteBufAllocator;Ljava/lang/String;I)Ljavax/net/ssl/SSLEngine; (ReferenceCountedOpenSslContext.java:409)
    #7 io.netty.handler.ssl.ReferenceCountedOpenSslContext.newEngine(Lio/netty/buffer/ByteBufAllocator;)Ljavax/net/ssl/SSLEngine; (ReferenceCountedOpenSslContext.java:423)
    #8 io.grpc.netty.ProtocolNegotiators$ServerTlsHandler.handlerAdded(Lio/netty/channel/ChannelHandlerContext;)V (ProtocolNegotiators.java:133)
    #9 io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(Lio/netty/channel/AbstractChannelHandlerContext;)V (DefaultChannelPipeline.java:597)
    #10 io.netty.channel.DefaultChannelPipeline.addLast(Lio/netty/util/concurrent/EventExecutorGroup;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:226)
    #11 io.netty.channel.DefaultChannelPipeline.addLast(Lio/netty/util/concurrent/EventExecutorGroup;[Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:392)
    #12 io.netty.channel.DefaultChannelPipeline.addLast([Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:379)
    #13 io.grpc.netty.NettyServerTransport.start(Lio/grpc/internal/ServerTransportListener;)V (NettyServerTransport.java:99)
    #14 io.grpc.netty.NettyServer$1.initChannel(Lio/netty/channel/Channel;)V (NettyServer.java:164)
    #15 io.netty.channel.ChannelInitializer.initChannel(Lio/netty/channel/ChannelHandlerContext;)Z (ChannelInitializer.java:113)
    #16 io.netty.channel.ChannelInitializer.handlerAdded(Lio/netty/channel/ChannelHandlerContext;)V (ChannelInitializer.java:105)
    #17 io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(Lio/netty/channel/AbstractChannelHandlerContext;)V (DefaultChannelPipeline.java:597)
    #18 io.netty.channel.DefaultChannelPipeline.access$000(Lio/netty/channel/DefaultChannelPipeline;Lio/netty/channel/AbstractChannelHandlerContext;)V (DefaultChannelPipeline.java:44)
    #19 io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask.execute()V (DefaultChannelPipeline.java:1387)
    #20 io.netty.channel.DefaultChannelPipeline.callHandlerAddedForAllHandlers()V (DefaultChannelPipeline.java:1122)
    #21 io.netty.channel.DefaultChannelPipeline.invokeHandlerAddedIfNeeded()V (DefaultChannelPipeline.java:647)
    #22 io.netty.channel.AbstractChannel$AbstractUnsafe.register0(Lio/netty/channel/ChannelPromise;)V (AbstractChannel.java:506)
    #23 io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(Lio/netty/channel/AbstractChannel$AbstractUnsafe;Lio/netty/channel/ChannelPromise;)V (AbstractChannel.java:419)
    #24 io.netty.channel.AbstractChannel$AbstractUnsafe$1.run()V (AbstractChannel.java:478)
    #25 io.netty.util.concurrent.AbstractEventExecutor.safeExecute(Ljava/lang/Runnable;)V (AbstractEventExecutor.java:163)
    #26 io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(J)Z (SingleThreadEventExecutor.java:403)
    #27 io.netty.channel.nio.NioEventLoop.run()V (NioEventLoop.java:462)
    #28 io.netty.util.concurrent.SingleThreadEventExecutor$5.run()V (SingleThreadEventExecutor.java:858)
    #29 io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run()V (DefaultThreadFactory.java:138)
    #30 java.lang.Thread.run()V (Thread.java:745)
    #31 (Generated Stub)

```"
b249714a2d26f923ef2ede5d3488c3c3ed2bada3,"DNS Resovler tests should be more explicit about ndots

Motivation:
The DNS resolver may use default configuration inherited from the environment. This means the ndots value may change and result in test failure if the tests don't explicitly set the assumed value.

Modifications:
- Explicitly set ndots in resolver-dns unit tests so we don't fail if the environment overrides the search domain and ndots

Result:
Unit tests are less dependent upon the enviroment they run in.
Fixes https://github.com/netty/netty/issues/6966."
43ae9748d0d2e33813b2d5e13cca951ab04dd033,"Unify default cipher suites betweek JDK and OpenSSL

Motivation:
Currently the default cipher suites are set independently between JDK and OpenSSL. We should use a common approach to setting the default ciphers. Also the OpenSsl default ciphers are expressed in terms of the OpenSSL cipher name conventions, which is not correct and may be exposed to the end user. OpenSSL should also use the RFC cipher names like the JDK defaults.

Modifications:
- Move the default cipher definition to a common location and use it in JDK and OpenSSL initialization
- OpenSSL should not expose OpenSSL cipher names externally

Result:
Common initialization and OpenSSL doesn't expose custom cipher names."
6152990073607602b2263109139cf829f3d2f7e4,"OpenSslEngine protocol selection must be contiguous

Motivation:
TLS doesn't support a way to advertise non-contiguous versions from the client's perspective, and the client just advertises the max supported version. The TLS protocol also doesn't support all different combinations of discrete protocols, and instead assumes contiguous ranges. OpenSSL has some unexpected behavior (e.g. handshake failures) if non-contiguous protocols are used even where there is a compatible set of protocols and ciphers. For these reasons this method will determine the minimum protocol and the maximum protocol and enabled a contiguous range from [min protocol, max protocol] in OpenSSL.

Modifications:
- ReferenceCountedOpenSslEngine#setEnabledProtocols should determine the min/max protocol versions and enable a contiguous range

Result:
OpenSslEngine is more consistent with the JDK's SslEngineImpl and no more unexpected handshake failures due to protocol selection quirks."
96f52e05bf9f9cbf210bfe97007ddcd690e394ce,"Fix #6969: Do not reset the states while streaming Json array

Motivation:

Calling JsonObjectDecoder#reset while streaming Json array over multiple
writes causes CorruptedFrameException to be thrown.

Modifications:

While streaming Json array and if the current readerIndex has been reset,
ensure that the states will not be reset.

Result:

Fixes #6969"
4c14d1198b58e9660c116ce151b077d98b9bd2a2,"Add testcase to ensure NioEventLoop.rebuildSelector() works correctly.

Motivation:

We had recently a report that the issue [#6607] is still not fixed.

Modifications:

Add a testcase to prove the issue is fixed.

Result:

More tests."
d4b9f3e4aa76f5633da575b4e1de5001ce64db72,"Use array initializer expression

Motivation:

Code introduced in 6152990073607602b2263109139cf829f3d2f7e4 can be cleaned up and use array initializer expressions.

Modifications:

Use array initializer expressions.

Result:

Cleaner code."
e6a399a7785b41dc941e8037257a30a0df1d92d4,"Explicit specify hostaddress during tests to ensure testsuite pass on docker (mac)

Motivation:

When run the current testsuite on docker (mac) it will fail a few tests with:

io.netty.channel.AbstractChannel$AnnotatedConnectException: connect(..) failed: Cannot assign requested address: /0:0:0:0:0:0:0:0%0:46607
Caused by: java.net.ConnectException: connect(..) failed: Cannot assign requested address

Modifications:

Specify host explicit as done in other tests to only use ipv6 when really supported.

Result:

Build pass on docker as well"
f1e14d0cb2a7a7cb574428df4a9b561b413af8bc,"Only add / to uri if really needed.

Motivation:

We not need to include the start index in the check. See https://github.com/netty/netty/pull/6924#discussion_r125263918

Modifications:

Change <= to <

Result:

More correct code."
0ad99310f5c02363f9402872d9b3d803654a794d,"Record release when enable detailed leak detection

Motivation:
It would be easier to find where is missing release call in several retain release calls on a ByteBuf

Modifications:
Remove final modifier on SimpleLeakAwareByteBuf and SimpleLeakAwareByteBuf release function and override it to record release in AdvancedLeakAwareByteBuf and AdvancedLeakAwareCompositeByteBuf

Result:
Release will be recorded when enable detailed leak detection"
64a3e6c69c1ba49ccd7fe0410e6b2131cda9315c,"SSLEngineTest should not depend on OpenSsl* class.

Motivation:

6152990073607602b2263109139cf829f3d2f7e4 introduced a test-case in SSLEngineTest which used OpenSsl.* which should not be done as this is am abstract bass class that is also used for non OpenSsl tests.

Modifications:

Move the protocol definations into SslUtils.

Result:

Cleaner code."
3e9f617504adb6f3ac984a9320020dd2c202739e,"Deduplicate and simplify code in HttpPostMultipartRequestDecoder

Motivation:

- A `HttpPostMultipartRequestDecoder` contains two pairs of the same methods: `readFileUploadByteMultipartStandard`+`readFileUploadByteMultipart` and `loadFieldMultipartStandard`+`loadFieldMultipart`.
- These methods use `NotEnoughDataDecoderException` to detecting not last data chunk (exception handling is very expensive).
- These methods can be greatly simplified.
- Methods `loadFieldMultipart` and `loadFieldMultipartStandard` has an unnecessary catching for the `IndexOutOfBoundsException`.

Modifications:

- Remove duplicate methods.
- Replace handling `NotEnoughDataDecoderException` by the return of a boolean result.
- Simplify code.

Result:

The code is cleaner and easier to support. Less exception handling logic."
b8d3d9655039b40bbe5df0446bfa50eb3543dd60,"MQTT unknown message type isn't handled as decoding error

Motivation:

MQTT unknown message type isn't handled as decoding error

Modification:

Catching exception during the MQTT decoding of the fixed header
Adding a unit test for unknown MQTT message type

Result:

Fixes #6984."
c43e09da5a2f12d10754eb005846ff0d082f2488,"Use the correct murmur3 C1 value
introduced in a7f7d9c8e004aa13801424e6e665b1ec525a822f"
96e06aa74d4d7b0923ae60f5aa8de5fd88a729ee,"Calculate correct lastRecords size

Motivation:
ResourceLeakDetector records at most MAX_RECORDS+1 records

Modifications:
Make room before add to lastRecords

Result:
ResourceLeakDetector will record at most MAX_RECORDS records"
d125adec38a0fa64011e5d77c5e4eadad69d4368,"AbstractByteBuf.ensureWritable(...) should check if buffer was released

Motivation:

AbstractByteBuf.ensureWritable(...) should check if buffer was released and if so throw an IllegalReferenceCountException

Modifications:

Ensure we throw in all cases.

Result:

More consistent and correct behaviour"
0afe4e09643c457c452ef0d9563c46f8e7c24ad1,"Increase timeout for DnsNameResolverTest

Motivation:
DnsNameResolverTest has been observed to timeout on the CI servers. We should increase the timeout from 5 seconds to 30 seconds.

Modifications:
- Increase timeout from 5 to 30 seconds.

Result:
Less false failures due to slower CI machines."
dbd82e07b11a644c151d22c63123de4be3519098,"Let Http2ServerUpgradeCodec support Http2FrameCodec

Motivation:

Http2ServerUpgradeCodec should support Http2FrameCodec.

Modifications:

- Add support for Http2FrameCodec
- Add example that uses Http2FrameCodec

Result:

More flexible use of Http2ServerUpgradeCodec"
deb5c4520492e2bed02ccd58cd43318f1a52db3d,"Correct typo in artifactId of dependency in bom pom.xml

Motivation:

There was a typo in a dependency in the bom pom.xml which lead to have it specify a non-existing artifact and also so not have the maven release plugin update the version correctly.

Modifications:

Rename netty-transport-unix-common to netty-transport-native-unix-common and also fix the version.

Result:

Fixes [#6979]"
08748344d852a07011be6e74bb5ddc6dcf221c45,"Fix NPEs in HttpPostRequestEncoder#nextChunk

Motivation:

HttpPostRequestEncoder maintains an internal buffer that holds the
current encoded data. There are use cases when this internal buffer
becomes null, the next chunk processing implementation should take
this into consideration.

Modifications:

- When preparing the last chunk if currentBuffer is null, mark
isLastChunkSent as true and send LastHttpContent.EMPTY_LAST_CONTENT
- When calculating the remaining size take into consideration that the
currentBuffer might be null
- Tests are based on those provided in the issue by @nebhale and @bfiorini

Result:

Fixes #5478"
ef22e65b570dd91591aafd5fadae73ded4bbfa8d,"Allow to delay registration when creating a EmbeddedChannel

Motivation:

Some ChannelOptions must be set before the Channel is really registered to have the desired effect.

Modifications:

Add another constructor argument which allows to not register the EmbeddedChannel to its EventLoop until the user calls register().

Result:

More flexible usage of EmbeddedChannel. Also Fixes [#6968]."
4af47f0ced39d86a1ef6a644e7c1506d81c0ea1b,"AbstractByteBuf.setCharSequence(...) must not expand buffer

Motivation:

AbstractByteBuf.setCharSequence(...) must not expand the buffer if not enough writable space is present in the buffer to be consistent with all the other set operations.

Modifications:

- Ensure we only exand the buffer on writeCharSequence(...) but not on setCharSequence(...)
- Add unit tests.

Result:

Consistent and correct behavior."
a91df58ca17d5b30c57c46dde5b1d60bb659b029,"HTTP/2 enforce HTTP message flow

Motivation:
codec-http2 currently does not strictly enforce the HTTP/1.x semantics with respect to the number of headers defined in RFC 7540 Section 8.1 [1]. We currently don't validate the number of headers nor do we validate that the trailing headers should indicate EOS.

[1] https://tools.ietf.org/html/rfc7540#section-8.1

Modifications:
- DefaultHttp2ConnectionDecoder should only allow decoding of a single headers and a single trailers
- DefaultHttp2ConnectionEncoder should only allow encoding of a single headers and optionally a single trailers

Result:
Constraints of RFC 7540 restricting the number of headers/trailers is enforced."
3d22b24244d4480661a1c17c8d9d67c33f82706b,"Allowed Netty Epoll/Kqueue to work in IPv6 Only environments

Motivation:
In some environments, IPv4 may be disabled (at a kernel level).
Google has such an environment for testing v4 -> v6 transition
paths.  This give confidence that code is v6 ready.

Modifications:
Change native socket code to ignore failures of trying to enter
dual stack mode.  This change has been made to Google's internal
JDK, and will/should be upstreamed to OpenJDK eventually.

Results:
Netty works in IPv6 only environments

Fixes: #6993"
e5a31a4282072a792c4ab1edec5e8446a38b303a,"Automatically detect shaded packagePrefix

Motivation:

Shading requires renaming binary components (.so, .dll; for tcnative,
epoll, etc). But the rename then requires setting the
io.netty.packagePrefix system property on the command line or runtime,
which is either a burden or not feasible.

If you don't rename the binary components everything appears to
work, until a dependency on a second version of the binary component is
added. At that point, only one version of the binary will be loaded...
which is what shading is supposed to prevent. So for valid shading, the
binaries must be renamed.

Modifications:

Automatically detect the package prefix by comparing the actual class
name to the non-shaded expected class name. The expected class name must
be obfuscated to prevent shading utilities from changing it.

Result:

When shading and using binary components, runtime configuration is no
longer necessary.

Pre-existing shading users that were not renaming the binary components
will break, because the packagePrefix previously defaulted to """". Since
these pre-existing users had broken configurations that only _appeared_
to work, this breakage is considered a Good Thing. Users may workaround
this breakage temporarily by setting -Dio.netty.packagePrefix= to
restore packagePrefix to """".

Fixes #6963"
3cdff368211af25720d85441e38edbdd1bddfae7,"Update tests to not use TestUtils.getFreePort() and so ensure we not try to use a port that is used by the system in the meantime.

Motivation:

We should not try to detect a free port in tests put just use 0 when bind so there is no race in which the system my bind something to the port we choosen before.

Modifications:

- Remove the usage of TestUtils.getFreePort() in the testsuite
- Remove hack to workaround bind errors which will not happen anymore now

Result:

Less flacky tests."
f23b2fc25d05134ce9a3811043df274ee4685720,Use 4 spaces and not 2 spaces (cleanup of 3d22b24244d4480661a1c17c8d9d67c33f82706b)
f897507b09d61baca231f43bfc701c134966bd11,"Handle handshake failure in Websocket Client example

Motivation:

We need to fail the promise if a failure during handshake happens.

Modification:

Correctly fail the promise.

Result:

Correct websocket client example. Fixes [#6998]"
06f64948d5da798ed75c892f6cbba18566857937,"Add tests to ensure an IllegalReferenceCountException is thrown if set/writeCharSequence is called on a released buffer

Motivation:

We need to ensure we not allow calling set/writeCharsequence on an released ByteBuf.

Modifications:

Add test-cases

Result:

Proves fix of [#6951]."
d141ba11bf0c8df8c1b36f65264abd486e5a276d,"Fix flacky multipart test introduced by 08748344d852a07011be6e74bb5ddc6dcf221c45.

Motivation:

08748344d852a07011be6e74bb5ddc6dcf221c45 introduced two new tests which did not take into account that the multipart delimiter can be between 2 and 16 bytes long.

Modifications:

Take the multipart delimiter length into account.

Result:

Fixes [#7001]"
8a25c359393ba4567f2f8ea8acd2826f1d8a49b8,"Filter user-provided ciphers using RFC cipher names

Motivation:

Previously filterCipherSuites was being passed the OpenSSL-formatted
cipher names. Commit 43ae974 introduced a regression as it swapped to the
RFC/JDK format, except that user-provided ciphers were not converted and
remained in the OpenSSL format.

This mis-match would cause all user-provided to be thrown away, leading
to failure trying to set zero ciphers:
Exception in thread ""main"" javax.net.ssl.SSLException: failed to set cipher suite: []
	at io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(ReferenceCountedOpenSslContext.java:299)
	at io.netty.handler.ssl.OpenSslContext.<init>(OpenSslContext.java:43)
	at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:347)
	at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:335)
	at io.netty.handler.ssl.SslContext.newServerContextInternal(SslContext.java:421)
	at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:441)
Caused by: java.lang.Exception: Unable to configure permitted SSL ciphers (error:100000b1:SSL routines:OPENSSL_internal:NO_CIPHER_MATCH)
	at io.netty.internal.tcnative.SSLContext.setCipherSuite(Native Method)
	at io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(ReferenceCountedOpenSslContext.java:295)
	... 7 more

Modifications:

Remove the reformatting of user-provided ciphers, as they are already in
the RFC/JDK format.

Result:

No regression, and the internals stay sane using the RFC/JDK format."
2fbce6d470862b8896a44cddf1a061b3b738d206,"Delete temporary self-signed certs in SSLEngineTest-based tests

Motivation:

Lots of usages of SelfSignedCertificates were not deleting the certs at
the end of the test. This includes setupHandlers() which is used by
extending classes. Although these files will be deleted at JVM exit and
deleting them early does not free the JVM from trying to delete them at
shutdown, it's good practice to delete eagerly and since users sometimes
use tests as a form of documentation, it'd be good for them to see the
explicit deletes.

Modifications:

Add missing delete() calls to ½ of the SelfSignedCertificates-using
tests.

Result:

Tests that more clearly communicates which resources are created and
may accumulate without early delete."
452fd3624081553ed0d2b9b6f59c21789a274f69,"ByteBufs which are not resizable should not throw in ensureWritable(int,boolean)

Motivation:
ByteBuf#ensureWritable(int,boolean) returns an int indicating the status of the resize operation. For buffers that are unmodifiable or cannot be resized this method shouldn't throw but just return 1.
ByteBuf#ensureWriteable(int) should throw unmodifiable buffers.

Modifications:
- ReadOnlyByteBuf should be updated as described above.
- Add a unit test to SslHandler which verifies the read only buffer can be tolerated in the aggregation algorithm.

Result:
Fixes https://github.com/netty/netty/issues/7002."
d8f4547f5cbe95e3b46260556a27bdc7f76e0249,"Unify {Epoll,KQueue}EventLoopGroup initialization.

Motivation:
`Epoll.ensureAvailability()` is called multiple times, once in
static initialization and in a couple of the constructors.  This is
redundant and confusing to read.

Modifications:
Move `Epoll.ensureAvailability()` call into an instance initializer
and remove all other references.  This ensures that every EELG
checks availability, while still delaying the check until
construction.  This pattern is used when there are multiple ctors,
as in this class.

Result:
Easier to read code."
486f96225239592fc47ca036e96121050dbef166,"Respect DNS port that is specified via JNDI

Motivation:

JNDI allows to specify an port so we should respect it.

Modifications:

Use the specified port and if none is specifed use 53.

Result:

Correct handling of JNDI configured DNS."
34fdc7a33e2468d389364a22024d269d5a189bb3,"Skip invalid hostnames when construct default dns servers to use.

Motivation:

When the hostname portion can not be extracted we should just skip the server as otherwise we will produce and exception when trying to create the InetSocketAddress.

This was happing when trying to run the test-suite on a system and using java7:

java.lang.IllegalArgumentException: hostname can't be null
	at java.net.InetSocketAddress.checkHost(InetSocketAddress.java:149)
	at java.net.InetSocketAddress.<init>(InetSocketAddress.java:216)
	at io.netty.util.internal.SocketUtils$10.run(SocketUtils.java:171)
	at io.netty.util.internal.SocketUtils$10.run(SocketUtils.java:168)
	at java.security.AccessController.doPrivileged(Native Method)
	at io.netty.util.internal.SocketUtils.socketAddress(SocketUtils.java:168)
	at io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider.<clinit>(DefaultDnsServerAddressStreamProvider.java:74)
	at io.netty.resolver.dns.DnsServerAddressesTest.testDefaultAddresses(DnsServerAddressesTest.java:39)

Modifications:

Skip if hostname can not be extracted.

Result:

No more java.lang.ExceptionInInitializerError."
efb2d141c1de9ef19443bb04678ef753894fcbe2,"Correctly handle unsigned int values returned from TCP_INFO

Motivation:

We used an int[] to store all values that are returned in the struct for TCP_INFO which is not good enough as it uses usigned int values.

Modifications:

- Change int[] to long[] and correctly cast values.

Result:

No more truncated values."
359beff56fbb61254d6b1924c7cc63c69a67842a,"Choose ipv4 or ipv6 google dns servers as default fallback based on the settings for this system / jvm

Motivation:

We should not use ipv4 google dns servers if the app is configured to run ipv6.

Modifications:

Use either ipv4 or ipv6 dns servers depending on the system config.

Result:

More correct behaviour"
529025d9d59280ad9e2f173e1bd0562a1e111280,"Allow to use oldest Channel out of the Simple / FixedChannelPool on acquire

Motivation:

We previously used pollLast() to retrieve a Channel from the queue that backs SimpleChannelPool. This could lead to the problem that some Channels are very unfrequently used and so when these are used the connection was already be closed and so could not be reused.

Modifications:

Allow to configure if the last recent used Channel should be used or the ""oldest"".

Result:

More flexible usage of ChannelPools"
732b145842d1442c946998559cbed61747a9cf9a,"Http2ConnectionHandler: allow graceful shutdown to wait forever

Motivation:

There should be a way to allow graceful shutdown to wait for all open streams to close without a timeout. Using gracefulShutdownTimeoutMillis with a large value is a bit of a hack, and has a gotcha that sufficiently large values will overflow the long, resulting in a ClosingChannelFutureListener that executes immediately.

Modification:

Allow to use gracefulShutdownTimeoutMillis(-1) to express waiting until all streams are closed.

Result:

We can now shutdown the connection without a forced timeout."
fe8ecea36610f8c23fc19ceb0dac8a518de0561c,"Http2FrameLogger avoid hex dump of the ByteBufs when log disabled

Motivation:

Currentry logger create hex dump even if log write will not apply.
It's unecessary GC overhead.

Modifications:

Restore optimization from #3492

Result:

Fixes #7025"
339131c660950cef894b13bc0422c8ae49f7766b,"DefaultChannelPipeline.estimatorHandle needs to be volatile

Motivation:

DefaultChannelPipeline.estimatorHandle needs to be volatile as its accessed from different threads.

Modifications:

Make DefaultChannelPipeline.estimatorHandle volatile and correctly init it via CAS

Result:

No more race."
60250f3795d4082e59df6806dade2966ec583859,"Make DelegatingChannelPromiseNotifier use Vararg overload

Motivation:
ErrorProne complains that the array override doesn't match the
vararg super call.  See http://errorprone.info/bugpattern/Overrides

Additionally, almost every other Future uses the vararg form, so
it would be stylistically consistent to keep it that way.

Modifications:
Use vararg override.

Result:
Cleaner, less naggy code."
c5b5d363601a0d9ae294034c1e68a6de54a0958f,"Fix false-positive leak detection report when ReferenceCountedOpenSslEngine constructor throws.

Motivation:

We need to ensure we only create the ResourceLeak when the constructor not throws.

Modifications:

Ensure ResourceLeakDetector.track(...) is only called if the constructor of ReferenceCoundedOpenSslEngine not throws.

Result:

No more false-positves."
d9d3d65716dfe8f5a8d83e5fa83286185bcf0657,Add comment why the ResourceLeak creation is happening as last in the constructor. Followup of c5b5d363601a0d9ae294034c1e68a6de54a0958f
8adb30bbe2785094c92d085757cb1fdc2c1edec9,"Correctly run all pending tasks for EmbeddedChannel when the Channel was closed.

Motivation:

When a user called ctx.close() and used the EmbeddedChannel we did not correctly run all pending tasks which means channelInactive was never called.

Modifications:

Ensure we run all pending tasks after all operations that may change the Channel state and are part of the Channel.Unsafe impl.

Result:

Fixes [#6894]."
580ac8cd41a426c30aeee363a9bf3dab2f9e303f,"Only flush on channelReadComplete(...) in http2 hello world examples.

Motivation:

In our http1 hello world example we only flush on channelReadComplete(...) to make better use of gathering writes. We should do the same in http2.

Modifications:

Only flush in channelReadComplete(...)

Result:

Better performance and more consistent examples."
21b7ab1f25f8c7032d74a82305bc12f18f863faf,"Allows IP_TRANSPARENT to be set on a redirecting socket

Motivation:

IP_TRANSPARENT support is not complete, the option can currently only be set on EpollServerSocket. Setting the option on an EpollSocket is also requires so as to be able to bind a socket to a non-local address as described in ip(7)
http://man7.org/linux/man-pages/man7/ip.7.html

""TProxy redirection with the iptables TPROXY target also
requires that this option be set on the redirected socket.""

Modifications:

Added IP_TRANSPARENT socket option to EpollSocketChannelConfig

Result:

A redirecting socket can be created with a non-local IP address as required for TPROXY"
068e64dbcfc6b3af30d218a12d6145c0881c45d0,Fix a potential NPE
2988fb8eeb7cc136b6b7660bcc5774cccc313744,"Ensure Http2FrameCodec uses Http2Settings.defaultSettings()

Motivation:

Http2FrameCodec should use Http2Settings.defaultSettings() when no Http2Settings were specified by the user.

Modifications:

Replace new Http2Settings() with Http2Settings.defaultSettings()

Result:

Use correct Http2Settings by default when using Http2FrameCodec in all cases."
6ab9c177acdd87c7fd0a10f128e3ea21402bc05e,"Fix hash function and hash table size in Snappy

Motivation:

1. Hash function in the Snappy encoding is wrong probably: used '+' instead of '*'. See the reference implementation [1].
2. Size of the hash table is calculated, but not applied.

Modifications:

1. Fix hash function: replace addition by multiplication.
2. Allocate hash table with calculated size.
3. Use an `Integer.numberOfLeadingZeros` trick for calculate log2.
4. Release buffers in tests.

Result:

1. Better compression. In the test `encodeAndDecodeLongTextUsesCopy` now compressed size is 175 instead of 180 before this change.
2. No redundant allocations for hash table.
3. A bit faster the calc of shift (less an expensive math operations).

[1] https://github.com/google/snappy/blob/513df5fb5a2d51146f409141f9eb8736935cc486/snappy.cc#L67"
8320a45c156f87afcdb545218f49d561b42843f9,"Configures HTTP2 pipeline with more proper way

Motivation:

When we use pipeline.replace and we still had ongoing inbound, then
there will be some problem that inbound message would go to wrong
handlers. So we add handler first, and remove self after add, so that
the next handler will be the correct one.

Modifications:

Uses remove after addAfter instead of replace.

Result:

Fixed #6881"
8cc1071881e90b0130bdd35a0441abcd0df6ffa9,[maven-release-plugin] prepare release netty-4.1.14.Final
52f384b37f80176ace3e71fd6da3ad19c2619426,[maven-release-plugin] prepare for next development iteration
4448b8f42f599e79db1744cd8f5fdfee702c195e,"Upgrading to Conscrypt 1.0.0.RC9. (#7044)

Motivation:

Starting with 1.0.0.RC9, conscrypt supports a buffer allocator.

Modifications:

- Updated the creation process for the engine to pass through the
ByteBufAllocator.
- Wrap a ByteBufAllocator with an adapter for conscrypt.
- Added a property to optionally control whether conscrypt uses
Netty's buffer allocator.

Result:

Netty+conscrypt will support using Netty's ByteBufAllocator."
4bb89dcc5480503b7500270af1a580e224862ab1,"Correctly handle connect/disconnect in EpollDatagramChannel / KQueueDatagramChannel

Motivation:

We did not correctly handle connect() and disconnect() in EpollDatagramChannel / KQueueDatagramChannel and so the behavior was different compared to NioDatagramChannel.

Modifications:

- Correct implement connect and disconnect methods
- Share connect and related code
- Add tests

Result:

EpollDatagramChannel / KQueueDatagramChannel also supports correctly connect() and disconnect() methods."
32f497760f4fc18b797d53ed26b690f268f2ee2b,"Ensure no java.lang.UnsupportedClassVersionError are thrown if running on Java7 and try to check if conscrypt is available.

Motivation:

We need to ensure we not try to load any conscrypt classes directly (which means without using reflection) in the same class that is used to check if conscrypt is available. This is needed as otherwise we will have the following problem when try to use netty on java7:

java.lang.UnsupportedClassVersionError: org/conscrypt/BufferAllocator : Unsupported major.minor version 52.0
	at io.netty.handler.ssl.ConscryptJdkSslEngineInteropTest.checkConscrypt(ConscryptJdkSslEngineInteropTest.java:49)

This regression was introduced by 4448b8f42f599e79db1744cd8f5fdfee702c195e and detected on the CI when using:

mvn clean package -DtestJavaHome=$JAVA7_HOME

Modifications:

Move the detection code in an extra class and use it.

Result:

Works correctly also when using Java7."
a75ac747f06483060070b2a303bf8917a6d7847c,"Remove io.netty.packagePrefix system property

Motivation:
Now that the NativeLibraryLoader implicitly detects the shaded package prefix we no longer need the io.netty.packagePrefix system property.

Modifications:
- Remove io.netty.packagePrefix processing from NativeLibraryLoader

Result:
Code is cleaner."
d63bb4811ed8ccd5d9e45853f3ac6aee9da7ecab,"Only call ctx.fireChannelReadComplete() if ByteToMessageDecoder decoded at least one message.

Motivation:

Its wasteful and also confusing that channelReadComplete() is called even if there was no message forwarded to the next handler.

Modifications:

- Only call ctx.fireChannelReadComplete() if at least one message was decoded
- Add unit test

Result:

Less confusing behavior. Fixes [#4312]."
d56f403c69d38683294b2d090f10b971b4888ff9,"First call channelReadComplete(...) before flush(...) for better performance

Motivation:

In Http2ConnectionHandler we call flush(...) in channelReadComplete(...) to ensure we update the flow-controller and write stuff to the remote peer. We should better flip the order and so may be able to pick up more bytes.

Modifications:

Change order of calls.

Result:

Better performance"
237a4da1b76ef7f303eca8f6ec8539efc9fe4d26,"Shutting down the outbound side of the channel should not accept future writes

Motivation:
Implementations of DuplexChannel delegate the shutdownOutput to the underlying transport, but do not take any action on the ChannelOutboundBuffer. In the event of a write failure due to the underlying transport failing and application may attempt to shutdown the output and allow the read side the transport to finish and detect the close. However this may result in an issue where writes are failed, this generates a writability change, we continue to write more data, and this may lead to another writability change, and this loop may continue. Shutting down the output should fail all pending writes and not allow any future writes to avoid this scenario.

Modifications:
- Implementations of DuplexChannel should null out the ChannelOutboundBuffer and fail all pending writes

Result:
More controlled sequencing for shutting down the output side of a channel."
bd029503ae60ea5583879e1e1de597e49ebb6069,"asm 6.0_BETA was released so we should use it when building on java9

Motivation:

We used asm 6.0_ALPHA when building on java9 as the latest stable release not works with java9. asm 6.0_BETA was just released so we should update.

Modifications:

Upgrade asm version

Result:

Not use ALPHA release anymore"
918fde82f8efa64a6f9d3abb8e108c773f2ccf46,"Add testcases to prove HttpResponseEncoder correctly handles empty content

Motivation:

Issue #6695 states that there is an issue when writing empty content via HttpResponseEncoder.

Modifications:

Add two test-cases.

Result:

Verified that all works as expected."
0f8ecdcad59fc421a31c27175b587fd969fd46e1,"Http2FrameLogger frame labels incorrect

Motivation:
The labels identifying the frame types in Http2FrameLogger are not always correct.

Modification:
- Correct the string labels to indicate the right frame type in Http2FrameLogger

Result:
Logs are more correct."
348745608faae89c33d5dbae40be8e81b239177d,"Fix incorrect javadocs in Http2RemoteFlowController

Motivation:

The javadocs of Http2RemoteFlowController.isWritable(...) are incorrect.

Modifications:

Update javadocs to reflect reality.

Result:

Correct javadocs."
db4781282f364b3a57b829db4362d77f449b612c,"Handle partially decoded elements while streaming Json array

Motivation:

'insideString' and 'openBraces' need a proper handling when streaming
Json array over multiple writes and an element decoding was started but
not completed.
Related to #6969

Modifications:

If the idx is reset:
- 'insideString' has to be reset to 'false' in order to indicate that
  array element will be decoded from the beginning
- 'openBraces' has to be reset to '1' to indicate that Json array
  decoding is in progress.

Result:
Json array is properly decoded when in streaming mode"
bdb0a39c8a01e934de4e0a75b073a0842d92a511,"Remove code-duplication from NativeLibraryLoader

Motivation:

NativeLibraryLoader has some code-duplication that can be removed.

Modifications:

Remove duplicated code and just use provided methods of PlatformDependent.

Result:

Less code duplication, fixes [#3756]."
f8b495b2f248ac9c908664c3ff1a7236a483b3cc,"Correctly support SO_TIMEOUT for OioDatagramChannel

Motivation:

We need to support SO_TIMEOUT for the OioDatagramChannel but we miss this atm as we not have special handling for it in the DatagramChannelConfig impl that we use. Because of this the following log lines showed up when running the testsuite:

20:31:26.299 [main] WARN  io.netty.bootstrap.Bootstrap - Unknown channel option 'SO_TIMEOUT' for channel '[id: 0x7cb9183c]'

Modifications:

- Add OioDatagramChannelConfig and impl
- Correctly set SO_TIMEOUT in testsuite

Result:

Support SO_TIMEOUT for OioDatagramChannel and so faster execution of datagram related tests in the testsuite"
e218759c0c36b78ac8c5a75ffb37c610d4e053bc,Fix regression in detecting macOS/osx platform introduced by bdb0a39c8a01e934de4e0a75b073a0842d92a511
b30c4f899f0f77031da31e1e76baa912acd1071c,Remove debug cruft from e218759c0c36b78ac8c5a75ffb37c610d4e053bc
85f5d6bf0521732358ed6dc5ca6fbcbda5fc207b,"Ensure we null out the previous set InetAddress on java.net.DatagramPacket when using OioDatagramChannel.

Motivation:

We need to ensure we always null out (or set) the address on the java.net.DatagramPacket when doing read or write operation as the same instance is used across different calls.

Modifications:

Null out the address if needed.

Result:

Ensure the correct remote address is used when connect / disconnect between calls and also mix these with calls that directly specify the remote address for adatagram packets."
ce4b4da5838dbb343c216f51af05ce3e75b1a39a,"SocketStringEchoTest improvements

Motivation:
SocketStringEchoTest has been observed to fail and it has numerous issues which when resolved may help reduce the test failures.

Modifications:
- A volatile counter and a spin/sleep loop is used to trigger test termination. Incrementing a volatile is generally bad practice and can be avoided in this situation. This mechanism can be replaced by a promise. This mechanism should also trigger upon exception or channel inactive.
- Asserts are done in the Netty threads. Although these should result in a exceptionCaught the test may not observe these failures because it is spinning waiting for the count to reach the desired value.

Result:
Cleaner test."
1ba592049c3ccfc89b8fe3d6fab2d75ee1fb0559,"Add null checks before converting to string to avoid NPE.

Motivation:

Fixing an introduced NPE by #6817

Modification:

Add null checks.

Result:

Fixes #7076 ."
0bf614d9e9395320f1712fc8e47b245df648fee0,"SocketGatheringWriteTest improvements

Motivation:
SocketGatherWriteTest has been observed to fail and it has numerous issues which when resolved may help reduce the test failures.

Modifications:
- A volatile counter and a spin/sleep loop is used to trigger test termination. Incrementing a volatile is generally bad practice and can be avoided in this situation. This mechanism can be replaced by a promise. This mechanism should also trigger upon exception or channel inactive.
- The TestHandler maintains an internal buffer, but it is not released. We now only create a buffer on the server side and release it after comparing the expected results.
- The composite buffer creation logic can be simplified, also the existing composite buffer doesn't take into account the buffer's reader index when building buf2.

Result:
Cleaner test."
d0c43c9e42d393ff0cc9f1ab97551e5778ec0b7e,"We should prefer heap buffers when using the OIO transport to reduce memory copies.

Motivation:

When using the OIO transport we need to act on byte[] when writing and reading from / to the underyling Socket. So we should ensure we use heap buffers by default to reduce memory copies.

Modifications:

Ensure we prefer heap buffers by default for the OIO transport.

Result:

Possible less memory copies."
8cb5d0fa8ceba19e5df5062b57d806556589770c,"SocketGatheringWriteTest increase timeouts

Motivation:
EpollDomainSocketGatheringWriteTest. testGatheringWriteBig takes on average about 20-25 seconds on the CI servers, but there is a 30 second timeout being applied which leads to what maybe false positive test failures.

Modifications:
- Increase the test timeout to 120 seconds globally and 60 seconds to wait for all writes per test

Result:
Higher timeout for potentially less false positive test failures."
5380c7c3e395f5e690e4f36d1a6d7bc86eb5b07c,"HTTP/2 Child Channel and FrameCodec Feature Parity.

Motivation:

This PR (unfortunately) does 4 things:
1) Add outbound flow control to the Http2MultiplexCodec:
   The HTTP/2 child channel API should interact with HTTP/2 outbound/remote flow control. That is,
   if a H2 stream used up all its flow control window, the corresponding child channel should be
   marked unwritable and a writability-changed event should be fired. Similarly, a unwritable
   child channel should be marked writable and a writability-event should be fired, once a
   WINDOW_UPDATE frame has been received. The changes are (mostly) contained in ChannelOutboundBuffer,
   AbstractHttp2StreamChannel and Http2MultiplexCodec.

2) Introduce a Http2Stream2 object, that is used instead of stream identifiers on stream frames. A
   Http2Stream2 object allows an application to attach state to it, and so a application handler
   no longer needs to maintain stream state (i.e. in a map(id -> state)) himself.

3) Remove stream state events, which are no longer necessary due to the introduction of Http2Stream2.
   Also those stream state events have been found hard and complex to work with, when porting gRPC
   to the Http2FrameCodec.

4) Add support for HTTP/2 frames that have not yet been implemented, like PING and SETTINGS. Also add
   a Http2FrameCodecBuilder that exposes options from the Http2ConnectionHandler API that couldn't else
   be used with the frame codec, like buffering outbound streams, window update ratio, frame logger, etc.

Modifications:

1) A child channel's writability and a H2 stream's outbound flow control window interact, as described
   in the motivation. A channel handler is free to ignore the channel's writability, in which case the
   parent channel is reponsible for buffering writes until a WINDOW_UPDATE is received.

   The connection-level flow control window is ignored for now. That is, a child channel's writability
   is only affected by the stream-level flow control window. So a child channel could be marked writable,
   even though the connection-level flow control window is zero.

2) Modify Http2StreamFrame and the Http2FrameCodec to take a Http2Stream2 object intstead of a primitive
   integer. Introduce a special Http2ChannelDuplexHandler that has newStream() and forEachActiveStream()
   methods. It's recommended for a user to extend from this handler, to use those advanced features.

3) As explained in the documentation, a new inbound stream active can be detected by checking if the
   Http2Stream2.managedState() of a Http2HeadersFrame is null. An outbound stream active can be detected
   by adding a listener to the ChannelPromise of the write of the first Http2HeadersFrame. A stream
   closed event can be listened to by adding a listener to the Http2Stream2.closeFuture().

4) Add a simple Http2FrameCodecBuilder and implement the missing frame types.

Result:

1) The Http2MultiplexCodec supports outbound flow control.
2) The Http2FrameCodec API makes it easy for a user to manage custom stream specific state and to create
   new outbound streams.
3) The Http2FrameCodec API is much cleaner and easier to work with. Hacks like the ChannelCarryingHeadersFrame
   are no longer necessary.
4) The Http2FrameCodec now also supports PING and SETTINGS frames. The Http2FrameCodecBuilder allows the Http2FrameCodec
   to use some of the rich features of the Http2ConnectionHandler API."
3a2b462a67bd5985e4f452f48cfabf725e5b8914,Remove the concept of pending streams. The close future can only be accessed once a stream is active.
74f24a5c19f8f351e9c6a7a84bdd9fbcc7a07ada,"Finish work on http2 child channel implementation and http2 frame api.

Motivation:

Our http2 child channel implementation was not 100 % complete and had a few bugs. Beside this the performance overhead was non-trivial.

Modifications:

There are a lot of modifications, the most important....
  * Http2FrameCodec extends Http2ConnectionHandler and Http2MultiplexCodec extends Http2FrameCodec to reduce performance heads and inter-dependencies on handlers in the pipeline
  * Correctly handle outbound flow control for child channels
  * Support unknow frame types in Http2FrameCodec and Http2MultiplexCodec
  * Use a consistent way how to create Http2ConnectionHandler, Http2FrameCodec and Http2MultiplexCodec (via a builder)
  * Remove Http2Codec and Http2CodecBuilder as the user should just use Http2MultipleCodec and Http2MultiplexCodecBuilder now
  * Smart handling of flushes from child channels to reduce overhead
  * Reduce object allocations
  * child channels always use the same EventLoop as the parent Channel to reduce overhead and simplify implementation.
  * Not extend AbstractChannel for the child channel implementation to reduce overhead in terms of performance and memory usage
  * Remove Http2FrameStream.managedState(...) as the user of the child channel api should just use Channel.attr(...)

Result:

Http2MultiplexCodec (and so child channels) and Http2FrameCodec are more correct, faster and more feature complete."
08284dbbcd4f4e4a3ad7756cbb9eb71d180fcdfa,"Ensure we call promise.setUncancellable() before trying to process in DefaultHttp2StreamChannel.

Motivation:

We should call promise.setUncancellable() in DefaultHttp2StreamChannel.Unsafe impl to detect if the operation was cancelled.

Modifications:

Add promise.setUncancellable() calls

Result:

More correct handling of cancelled promises"
8be9a63c1c4beb3f43ffcc3ea978e67f138b5050,"FIX endless loop in ByteBufUtil#writeAscii

Motivation:

Missing return in ByteBufUtil#writeAscii causes endless loop

Modifications:

Add return after write finished

Result:

ByteBufUtil#writeAscii is ok"
52e19d5c631d9cbe6cc41b5ea34d7493160f26ee,"Strip http 'expect' headers when expectation response is produced

Motivation:

HttpObjectAggregator differs from HttpServerExpectContinueHandler's handling
of expect headers by not stripping the 'expect' header when a response
is generated.

Modifications:

HttpObjectAggregator now removes the 'expect' header in cases where it generates
a response.

Result:

Consistent and correct behavior between HttpObjectAggregator and HttpServerExpectContinueHandler."
505993a2fb6016c58d0f95392d7317a6d80f2ac7,"Increase test timeout for SocketStringEchoTest

Motivation:
SocketStringEchoTest has been observed to fail on CI servers, but the stack traces still indicate work was being done.

Modifications:
- Increase the test timeout

Result:
Tests have more time to complete, and hopefully less false positive test failures."
e249b453a053d2fcc2e08eb5fbec37dba0a9c29d,"Make configurable the initial and max size of InternalThreadLocalMap#stringBuilder

Motivation:
In some cases of using an `InternalThreadLocalMap#stringBuilder`, the `StringBuilder`s size can often exceed the exist limit (1024 bytes). This can lead to permanent memory reallocation.

Modifications:
Add custom properties for the initial capacity and maximum size (after which the `StringBuilder`s capacity will be reduced to the initial capacity).

Result:
An `InternalThreadLocalMap#stringBuilder`s initial and max size is configurable. Fixes [#7092]."
19dcb15062ff93c5968c78df2de3c8ef6a181036,"Use underscore in native library names for consistency.

Motivation:

At the moment we try to load the library using multiple names which includes names using - but also _ . We should just use _ all the time.

Modifications:

Replace - with _

Result:

Fixes [#7069]"
4875a2aad4c82204caedb2d121fb5ef03c09fe44,"Immediate caching the strings wrapped to AsciiString

Motivation:
The `AsciiString#toString` method calculate string value and cache it into field. If an `AsciiString` created from the `String` value, we can avoid rebuilding strings if we cache them immediately when creating `AsciiString`. It would be useful for constants strings, which already stored in the JVMs string table, or in cases where an unavoidable `#toString `method call is assumed.

Modifications:
- Add new static method `AsciiString#cache(String)` which save string value into cache field.
- Apply a ""benign"" data race in the `#hashCode` and `#toString` methods.

Result:
Less memory usage in some `AsciiString` use cases."
0774c9145642bb9f08d9961dd0c25352dd9a944a,"Support the little endian floats and doubles by ByteBuf

Motivation:
`ByteBuf` does not have the little endian variant of float/double access methods.

Modifications:
Add support for little endian floats and doubles into `ByteBuf`.

Result:
`ByteBuf` has get/read/set/writeFloatLE() and get/read/set/writeDoubleLE() methods. Fixes [#6576]."
bbcab32874711f856040a47ee8e45cfbf4b29846,"Ensure netty builds with java9 (build 9+181)

Motivation:

To be able to build with latest java9 release we need to adjust commons-lang version and maven-enforcer-plugin.

Modifications:

- Use commons-lang 2.6.0
- Use maven-enforcer-plugin 3.0.0.M1 when building with java9

Result:

Netty builds again with latest java9 release"
e487db783673c9c153a011c8156083bbd86bf8e6,"Use the ByteBufAllocator when copy a ReadOnlyByteBufferBuf and so also be able to release it without the GC when the Cleaner is present.

Motivation:

In ReadOnlyByteBufferBuf.copy(...) we just allocated a ByteBuffer directly and wrapped it. This way it was not possible for us to free the direct memory that was used by the copy without the GC.

Modifications:

- Ensure we use the allocator when create the copy and so be able to release direct memory in a timely manner
- Add unit test
- Depending on if the to be copied buffer is direct or heap based we also allocate the same type on copy.

Result:

Fixes [#7103]."
346900443234b2d39b07007b8878fe4f2905569c,"Adding explicit comment about case statement

Motivation:

When compiling this code and running it through errorprone[1], this message appears:
```
StringUtil.java:493: error: [FallThrough] Switch case may fall through; add a `// fall through` comment if it was deliberate
                    case LINE_FEED:
                    ^
    (see http://errorprone.info/bugpattern/FallThrough)
```
By adding that comment, it silences the error and also makes clear the intention of that statement.

[1]http://errorprone.info/index

Modification:

Add simple comment.

Result:

Errorprone is happier with the code."
5d9a5d3e8d81ec26be609bafb000833a7745a21b,"Revert SslEngineWrapperFactory api breakage introduced by 4448b8f42f599e79db1744cd8f5fdfee702c195e.

Motivation:

Commit 4448b8f42f599e79db1744cd8f5fdfee702c195e introduced some API breakage which we need to revert before we release.

Modifications:

- Introduce an AllocatorAwareSslEngineWrapperFactory which expose an extra method that takes a ByteBufAllocator as well.
- Revert API changes to SslEngineWrapperFactory.

Result:

API breakage reverted."
053e6184f2d6fb2847338d807730d2edf7cfc94a,"Increase visibility for SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite

Motivation:
SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite has been observed to fail on CI servers, but it is not clear why.

Modifications:
- Add more visibility into what the state was and what the condition that caused the failure was.

Result:
More visibility when the test fails."
da86b85a28fae8459fcbfcd9ac22d0cad8aacf55,"Make NativeLibraryLoader check java.library.path first
Motivation:

On restricted systems (e.g. grsecurity), it might not be possible to write a .so on disk and load it afterwards. On those system Netty should check java.library.path for libraries to load.

Modifications:

Changed NativeLibraryLoader.java to first try to load libs from java.library.path before exporting the .so to disk.

Result:

Libraries load fine on restricted systems."
5de38051c973b5558bb30379a2f44db7d6f309c3,"Update netty-tcnative native library names to use underscores.

Motivation:

We recently changed netty-tcnative to use underscores in its native library names.

Modifications:

Update code to use underscores when loading native library.

Result:

More consistent code."
123e07ca80bb9cc58ebee598ff0a9379ad9a09fd,"Revert ""Only call ctx.fireChannelReadComplete() if ByteToMessageDecoder decoded at least one message.""

This reverts commit d63bb4811ed8ccd5d9e45853f3ac6aee9da7ecab as this not covered correctly all cases and so could lead to missing fireChannelReadComplete() calls. We will re-evalute d63bb4811ed8ccd5d9e45853f3ac6aee9da7ecab and resbumit a pr once we are sure all is handled correctly"
e4af881bdbae26ebb9b5bfd3b0417be9b1a8115d,"Do not define JNI_OnLoad when not dynamic

Motivation:
Due to an oversight (by myself), linking two JNI modules with
duplicate symbols fails in linking.  This only seems to happen
some of the time (the behavior seems to be different between GCC
and Clang toolchains).  For instance, including both netty tcnative
and netty epoll fails to link because of duplicate JNI_OnLoad
symobols.

Modification:
Do not define the JNI_OnLoad and JNI_OnUnload symbols when
compiling for static linkage, as indicated by the NETTY_BUILD_STATIC
preprocessor define.  They are never directly called when
statically linked.

Result:
Able to statically compile epoll and tcnative code into a single
binary."
03d89c222279a8f1d9b70061a0e5e36c6fcf88fc,"Use Constructor for reflective class instantiation.

Motivation:
Calling `newInstance()` on a Class object can bypass compile time
checked Exception propagation.  This is noted in Java Puzzlers,
as well as in ErrorProne:
http://errorprone.info/bugpattern/ClassNewInstance

Modifications:
Use the niladic constructor to create a new instance.

Result:
Compile time safety for checked exceptions"
0234878c4ba0999a464a1acee2983d6cba9de940,"Fix the commands cache and hashCode() in SmtpCommand

Motivation:
- A `hashCode` of the SmtpCommand is recalculated on each call of `hashCode()`. Cached hash code value can be just replaced with call of `name.hashCode()`.
- The commands cache don't work for strings: `SmtpCommand.valueOf(""HELO"")` returns a new instance.
- Field `contentExpected` is redundant and can be replaced with `equals(DATA)`.

Modifications:
- Use the `name.hashCode()` as hash code result.
- Fix a command cache: use strings as map keys.
- Replace field `contentExpected` to using `this.equals(DATA)`.
- Add unit tests.

Result:
More correct and clean code."
ba2745665367a13931ab3999e171d51f50df030c,"Use the index-based AsciiString constructor instead of substring()

Motivation:
The construction `new AsciiString(string.substring(...))` can be replaced with the `new AsciiString(string, start, length)` to avoid extra allocation.

Modifications:
Apply the described replacement in `HttpConversionUtil#setHttp2Authority`.

Result:
Less allocations."
1d7c3fb7ee9420df2261acd42c439572d8e74769,"KQueue detect peer close without EVFILT_READ

Motivation:
The EPOLL transport uses EPOLLRDHUP to detect when the peer closes the write side of the socket. Currently KQueue is not able to mimic this behavior and the only way to detect if the peer has closed is to read. It may not always be appropriate to read for backpressure and other reasons at the application level.

Modifications:
- Support EVFILT_SOCK filter which provides notification when the peer closes the socket

Result:
KQueue transport has more consistent behavior with Epoll transport for detecting peer closure."
fe2dd973e9cc537027f75cefa447a6d8ebe5695d,"Unify KQueue and Epoll wait timeout approach

Motivation:
KQueueEventLoop and EpollEventLoop implement different approaches to applying a timeout of their respective poll calls. Epoll attempts to ensure the desired timeout is satisfied at the java layer and at the JNI layer, but it should be sufficient to account for spurious wakups at the JNI layer. Epoll timeout granularity is also limited to milliseconds which may be too large for some latency sensitive applications.

Modifications:
- Make EpollEventLoop wait method look like KQueueEventLoop
- Epoll should support a finer timeout granularity via timerfd_create. We can hide most of these details behind the epollWait0 JNI call to avoid crossing additional JNI boundaries.

Result:
More consistent timeout approach between KQueue and Epoll."
7f1051b6ca9d1a146f4142844bfead43bce452c8,"Include JNIEXPORT on exported symbols

Motivation:
As noticed in https://stackoverflow.com/questions/45700277/
compilation can fail if the definition of a method doesn't
match the declaration.  It's easy enough to add this in, and make
it easy to compile.

Modifications:
Add JNIEXPORT to the entry points.

* On Windows this adds: `__declspec(dllexport)`
* On Mac this adds: `__attribute__((visibility(""default"")))`
* On Linux (GCC 4.2+) this adds: ` __attribute__((visibility(""default"")))`
* On other it doesn't add anything.

Result:
Easier compilation"
5b4d2d9807303a0ca27d3d481c0f4afbb43ec50d,"Update JCTools version, fixes #7117

Motivation:

Remove Unsafe dependency for Atomic queues in JCTools, resolved in version 2.1.0

Modification:

Change pom JCTools version

Result:

Fixes #7117"
2beb5fc8ee93b9d2c2b75764ebcd53dc8a1bd4e8,"DelegatingSslContext should also be able to configure the SslHandler

Motivation:

DelegatingSslContext at the moment intercept newEngine calls and allow to init the SslEngine after it is created. The problem here is that this may not work the SSLEngine that is wrapped in the SslHandler when calling newHandler(...). This is because some SslContext implementations not delegate to newEngine(...) when creating the SslHandler to allow some optimizations. For this we should also allow to init the SslHandler after its creation and by default just delegate to initEngine(...).

Modifications:

Allow the user to also init the SslHandler after creation while by default init its SSLEngine after creation.

Result:

More flexible and correct code."
566566db3a02de9f2170a6a42c95e69b4a628548,"Decouple DnsCache and DnsCacheEntry

Motivation:
DnsCache (an interface) is coupled to DnsCacheEntry (a final class). This means that DnsCache implementations can't implement their own DnsCacheEntry objects if the default behavior isn't appropriate.

Modifications:
- DnsCacheEntry should be moved to DefaultDnsCache as it is an implementation detail
- DnsCache#cache(..) should return a new DnsCacheEntry
- The methods which from DnsCacheEntry that were used outside the scope of DefaultDnsCache should be moved into an interface

Result:
DnsCache is more extensible and not tightly coupled to a default implementation of DnsCacheEntry."
cbce95eae12918ad95a2c7d37aed4f1f9bfa3ef5,"SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite print SslProvider on failure

Motivation:
When SslHandlerTest#testCompositeBufSizeEstimationGuaranteesSynchronousWrite fails it would be useful to know the SslProvider type

Modifications:
- Print the sever and client SslProvider upon failure
- Increase test timeout to 8 minutes to allow more time to run

Result:
Failures include more info to help diagnose issues."
b18a201d02ad024aa5f37eda7646c96de4f64aa0,"various errorprone fixes.

Motivation:

Continuing to make netty happy when compiling through errorprone.

Modification:

Mostly comments, some minor switch statement changes.

Result:

No more compiler errors!"
7290cbc48aea4971aa66c64c2f43d8a2611012ab,"More bullet-proof way of detecting if ipv6 is supported or not when using native transport

Motivation:

We should try to bind to an ipv6 only socket before we enable ipv6 support in the native transport as it may not work due setup of the platform.

Modifications:

Try to bind to ::1 use IPV6 later on if this works

Result:

Fixes [#7021]."
6e859469ca49f2029ad68f1d32e5b8bfa054eeba,"Deprecate ApplicationProtocolNegotiator and its implementation as people should use ApplicationProtocolConfig

Motivation:

We should deprecate ApplicationProtocolNegotiator as the users should use ApplicationProtocolConfig these days.

Modifications:

Add deprecation annotations and javadocs.

Result:

Be able to make package-private in next major release."
c93e58c453147ab5b34a708a85530d2372bbac81,"OpenSsl should use _ instead of -

Motivation:
netty-tcnative recently change the name of the native libraries from using - to _.

Modifications:
- OpenSsl should use _ instead of - even for the classifiers to be consistent with netty-tcnative

Result:
Loading netty-tcnative works."
1065e0f26e0d47a67c479b0fad81efab5d9438d9,"Support JDK9-native ALPN

Motivation:

Netty is unable to use Java9s ALPN support atm.

Modifications:

When running on Java9+ we invoke the correct methods that are exposed on the Java9+ implementation of SSLEngine and so be able to support ALPN.
This patch is based on the work of @rschmitt and so https://github.com/netty/netty/pull/6992.

Result:

Fixes #6933."
c80fdc8241e15455632d10effa156b1ba99e25a8,"AbstractChannel should call doClose even after shutdownOutput

Motivation:
ShutdownOutput now fails all pending writes in the ChannelOutboundBuffer and sets it to null. However the Close code path uses the ChannelOutboundBuffer as an indication that the close operation is in progress and exits early and will not call doClose. This will lead to the Channel not actually being fully closed.

Bug introduced by 237a4da1b76ef7f303eca8f6ec8539efc9fe4d26

Modifications:
- AbstractChannel#close shouldn't exit early just because outboundBuffer is null, and instead should use additional state closeInitiated to avoid duplicate close operations

Result:
AbstractChannel#close(..) after AbstractChannel#shutdownOutbound() will still invoke doClose and cleanup Channel state."
dd9ad15b127117ecb5f620a3470f7b3ee34df792,Add Unit test for [#7143]
da8e010a42d01081dc2b2232a0c0f563f86b2455,[maven-release-plugin] prepare release netty-4.1.15.Final
b967805f327415c612847b70631faabd1d7f56bc,[maven-release-plugin] prepare for next development iteration
89ecb4b4a4ead78f6362e05b2128771d629c593c,"AutoClose behavior may infinite loop

Motivation:
If AutoClose is false and there is a IoException then AbstractChannel will not close the channel but instead just fail flushed element in the ChannelOutboundBuffer. AbstractChannel also notifies of writability changes, which may lead to an infinite loop if the peer has closed its read side of the socket because we will keep accepting more data but continuously fail because the peer isn't accepting writes.

Modifications:
- If the transport throws on a write we should acknowledge that the output side of the channel has been shutdown and cleanup. If the channel can't accept more data because it is full, and still healthy it is not expected to throw. However if the channel is not healthy it will throw and is not expected to accept any more writes. In this case we should shutdown the output for Channels that support this feature and otherwise just close.
- Connection-less protocols like UDP can remain the same because the channel may disconnected temporarily.
- Make sure AbstractUnsafe#shutdownOutput is called because the shutdown on the socket may throw an exception.

Result:
More correct handling of write failure when AutoClose is false."
0b0de76adc4e564607964535c2078940969967d8,"Fix typo in error message

Motivation:

Fix typo in error message.

Modification:

could not fine -> could not find"
6780183a89066a4de0449d3be57caa8dcf1be9ce,"Makes LengthFieldBasedFrameDecoder::decode inlineable

Motivation:

The decode method is too large to be inlined with default compiler settings, hence the uncommon paths need to be packed and moved away form the common one.

Modifications:

The uncommon paths of the decode call (eg failures with thrown exceptions) are packed and moved in private methods in order to reduce the size of the common one
and let it being inlined.

Result:

The decode method is being inlined if the stack depth allows it."
d9d0e633dc69b9b93139d822eaa17b97ff3826ab,"Fix ServerCookieEncoder javadoc, close #7115

Motivation:

ServerCookieEncoder’s javadoc contains some invalid copy-pasting from
ClientCookieEncoder.

Modifications:
* As per RFC6265, multiple cookies are sent as separate Set-Cookie
response headers.
* Fix code sample

Result:

Proper javadoc"
f5bea11ee486640f28e96d38d066a7813666e27c,"DefaultSocks5CommandRequest incorrectly rejects SOCKS5 commands with dstPort=0

Motivation:

According to SOCKS 5 spec, dstPort = 0 is a valid value in case of UDP ASSOCIATE.

Modifications:

- Allow 0 as port.
- Add unit tests.

Result:

Fixes [#7156]."
c891c9c13fe9a04c714536e2c2be14ffc5b7b26e,"Include more detail why Unsafe is not available

Motivation:
PD and PD0 Both try to find and use Unsafe.  If unavailable, they
try to log why and continue on.  However, it is not always east to
enable this logging.  Chaining exceptions together is much easier
to reach, and the original exception is relevant when Unsafe is
needed.

Modifications:
* Make PD log why PD0 could not be loaded with a trace level log
* Make PD0 remember why Unsafe wasn't available
* Expose unavailability cause through PD for higher level use.
* Make Epoll and KQueue include the reason when failing

Result:
Easier debugging in hard to reconfigure environments"
cc336ef2f898db83de46e8d48879b03c1a4895d1,"Fix StompSubframeDecoder.readHeaders produce not any notification when parsed line that contains multiple colon

Motivation:

By STOMP 1.2 specification - header name or value include any octet except CR or LF or "":"".

Modification:

Add constructor argument that allows to enable / disable validation.

Result:

Fixes [#7083]"
7528e5a11e6edeb847d7913437a1c88b1bb30e9d,"Use threadsafe setter on Atomic Updaters

Motivation:
The documentation for field updates says:

> Note that the guarantees of the {@code compareAndSet}
> method in this class are weaker than in other atomic classes.
> Because this class cannot ensure that all uses of the field
> are appropriate for purposes of atomic access, it can
> guarantee atomicity only with respect to other invocations of
> {@code compareAndSet} and {@code set} on the same updater.

This implies that volatiles shouldn't use normal assignment; the
updater should set them.

Modifications:
Use setter for field updaters that make use of compareAndSet.

Result:
Concurrency compliant code"
9bd6d8129ef12ff509e7b5c2b331bbff1c271d40,"HttpObjectEncoder buffer size estimation

Motivation:
HttpObjectEncoder allocates a new buffer when encoding the initial line and headers, and also allocates a buffer when encoding the trailers. The allocation always uses the default size of 256. This may lead to consistent under allocation and require a few resize/copy operations which can cause GC/memory pressure.

Modifications:
- Introduce a weighted average which tracks the historical size of encoded data and uses this as an estimate for future buffer allocations

Result:
Better approximation of buffer sizes."
bca35b0449d2ce16a39a86a4be7aa9d5ae2bdb70,"Allow to construct UnpooledByteBufAllocator that explictly always use sun.misc.Cleaner

Motivation:

When the user want to have the direct memory explicitly managed by the GC (just as java.nio does) it is useful to be able to construct an UnpooledByteBufAllocator that allows this without the chances to see any memory leak.

Modifications:

Allow to explicitly disable the usage of reflection to construct direct ByteBufs and so be sure these will be collected by GC.

Result:

More flexible way to use the UnpooledByteBufAllocator."
379ac890f4dbec15d19714711f85455a12112c3f,"Fix reference count issue when using Http2FrameCodec / Http2MultiplexCodec with HttpServerUpgradeHandler

Motivation:

When using  Http2FrameCodec / Http2MultiplexCodec with HttpServerUpgradeHandler reference count exception will be triggered.

Modifications:

- Correctly retain before calling InboundHttpToHttp2Adapter.handle
- Add unit test

Result:

Fixes [#7172]."
0fffc844d6d4c8e196a8448a45e7ff542446f708,"Only load native transport if running architecture match the compiled library architecture.

Motivation:

We should only try to load the native artifacts if the architecture we are currently running on is the same as the one the native libraries were compiled for.

Modifications:

Include architecture in native lib name and append the current arch when trying to load these. This will fail then if its not the same as the arch of the compiled arch.

Result:

Fixes [#7150]."
5c572f0f63da22392d477697c4c289072915d483,"Ensure the tests complete on java7 and java9 as well.

Motivation:

379ac890f4dbec15d19714711f85455a12112c3f introduced the usage of the inline mock maker. This unfortunally not work on java7 and java9.

Modifications:

Just use reflection to create the event for now.

Result:

Netty tests pass again on java7 and java9 as well."
870b5f5e4b4eef8ea3baf650fa9c592533b2fda2,"Not add inboundStreamHandler for outbound streams created by Http2MultiplexCodec.

Motivation:

We must not add the inboundStreamHandler for outbound streams creates by Http2MultiplexCodec as the user will specify a handler via Http2StreamChannelBootstrap.

Modifications:

- Check if the stream is for outbound and if so not add the inboundStreamHandler to the pipeline
- Update tests so this is covered.

Result:

Fixes [#7178]"
e50075508611e3cdabf60f37d9ba52f0be46c414,"Remove double comparing of content out of the DefaultHttp2GoAwayFrame.equals()

Motivation:
In `DefaultHttp2GoAwayFrame.equals()` a content compared twice: explicitly and in the `super` method.

Modifications:
Remove explicit content comparision.
Make `hashCode()` consistent with `equals()`.

Result:
A `DefaultHttp2GoAwayFrame.equals()` work faster."
a739d89792dbc21ad2f1384e018e547dadff2763,"Not log notify failure for DelegatingChannelPromiseNotifier when promise is VoidChannelPromise

Motivation:

We should not log by default if the promise is a VoidChannelPromise as its try* methods will always return false.

Modifications:

Do an instanceof check to determine if we should log or not by default

Result:

No more noise in the logs when using a VoidChannelPromise."
c0396818cafc4d3b6a5c8230b9f91b180e813645,"Print out the actual cause when an assertion failure happens during DatagramUnicastTest.testSimpleSendWithConnect

Motivation:

We recently saw an assertion failure when running DatagramUnicastTest.testSimpleSendWithConnect.

Modifications:

- Adding more debug infos
- Ensure we always correctly release the buffers.

Result:

More informations when tests fail."
d2cb51bc2e86ac485d84cb1a0313b22f4de988d0,"Enable PooledByteBufAllocator to work, event without a cache

Motivation:
`useCacheForAllThreads` may be false which disables memory caching
on non netty threads.  Setting this argument or the system property
makes it impossible to use `PooledByteBufAllocator`.

Modifications:

Delayed the check of `freeSweepAllocationThreshold` in
`PoolThreadCache` to after it knows there will be any caches in
use.  Additionally, check if the caches will have any data in them
(rather than allocating a 0-length array).

A test case is also added that fails without this change.

Results:

Fixes #7194"
e40469057483c6b3ce9cf69af12dd19a68392cfd,"Optimize DefaultChannelId.equals

Motivation:
A `DefaultChannelId` has final `hashCode` field calculated in the constructor. We can use it in `equals` to the fast return for different objects.

Modifications:
Use `hashCode` field in `DefaultChannelId.equals()`.

Result:
Fast `equals` on negative scenarios."
de9e666493469d40fa9107a78f9ae421a05f9cf4,"Fix hashCode() in Http2StreamChannelId

Motivation:
In `Http2StreamChannelId` a `hashCode()` is not consistent with `equals()`.

Modifications:
Make a `Http2StreamChannelId.hashCode()` consistent with `equals()`.

Result:
Faster hash map's operations where the Http2StreamChannelId as keys."
15611dadbbf8f8c217c03ce33da89beb54602023,"Fix NPE when using Http2ServerUpgradeCodec with Http2FrameCodec and Http2MultiplexCodec

Motiviation:

At the moment an NPE is thrown if someone tries to use the Http2ServerUpgradeCodec with Http2FrameCodec and Http2MultiplexCodec.

Modifications:

- Ensure the handler was added to the pipeline before calling on*Upgrade(...) methods.
- Add tests
- Fix adding of handlers after upgrade.

Result:

Fixes [#7173]."
bf0a53179a3057ac075c1192f80917ddd5ee1d9e,"Correctly update writability state of Http2StreamChannel created by Http2MultiplexCodec.

Motivation:

We missed to mark the Http2StreamChannel as writable in some cases which could lead to the situation that a Channel never becomes writable. Also when a Http2StreamChannel was created we always marked it non-writable at the beginning which means if the user will only start writing once the Channel becomes writable it will never happen as it only became writable after the first header was written.

Modifications:

- Correctly handle updates for writability in all cases
- Change unit tests to cover this.

Result:

Fixes [#7179]."
426938307ddcbd6f2db3e86afe6390b6fbe74918,"Use the correct osname in the Bundle-NativeCode declaration.

Motivation:

We need to ensure we use the correct osname in the Bundle-NativeCode declaration as declared in:

https://www.osgi.org/developer/specifications/reference/

Modifications:

Update osname to match the spec.

Result:

Correct Bundle-NativeCode entry in the MANIFEST"
901c66fa813a759c9dbfe64eed10ba4d6095d4ea,"MQTT encode doesn't complain if password is set but username not

Motivation:

The MQTT decoder should raise an exception trying to build a CONNECT packet where password field is set but not the username one (as by MQTT 3.1/3.1.1 spec).

Modification:

Throw exception if password field is set but not the username

Result:

Fixes [#7205]."
8c8779669e1acdd8307e5faafb7ca9b378348831,"Mark transport-rxtx as @deprecated

Motivation:

transport-rxtx has no tests and there is really no easy way to add some. Beside this this transport is not really well maintained.

Modifications:

Mark transport-rxtx as @deprecated so we can drop it in next major version.

Result:

Notify users of plan to drop the transport."
14189140a0e07ab1cac8b91b49a787143870890e,"log in PatternLayout (%F:%L)%c.%M

Motivation:

When Log4j2Logger is used with PatternLayout (%F:%L)%c.%M, the log message incorrect shows:

(Log4J2Logger.java:73)io.netty.util.internal.PlatformDependent0.debug ....

Modification:

Extend AbstractLogger

Result:

Fixes [#7186]."
b1332bf12e75432260dbcdae9dadfe06ef06e969,"NativeLibraryLoader logging clarify

Motivation:
NativeLibraryLoader may only log a debug statement if the library is successfully loaded from java.library.path, but will log failure statements the if load for java.library.path fails which can mislead users to believe the load actually failed when it may have succeeded.

Modifications:
- Always load a debug statement when a library was successfully loaded

Result:
NativeLibraryLoader log statements more clear."
b32cd26a961c71cc5ad0e9f88fa8c15fbfd89930,"Remove allocation from ResourceLeakDetector

Motivation:
RLD allocates an ArrayDeque in anticipation of recording access
points.  If the leak detection level is less than ADVANCED though,
the dequeue is never used.  Since SIMPLE is the default level,
there is a minor perf win to not preemptively allocate it.

This showed up in garbage profiling when creation a high number of
buffers.

Modifications:
Only allocate the dequeue if it will be used.

Result:
Less garbage created."
44bb3b6f3afcd15ec26a08c5feea132aed80c00d,"DefaultHeaders value iterator

Motivation:
The Headers interface supports an interface to get all the headers values corresponding to a particular name. This API returns a List which requires intermediate storage and increases GC pressure.

Modifications:
- Add a method which returns an iterator over all the values for a specific name

Result:
Ability to iterator over values for a specific name with no intermediate collection."
282aa35682e9f610f71e7f08220131822609f131,"Fix NPE in InboundHttp2ToHttpAdapter

Motiviation:

At the moment an NPE is thrown if someone tries to use the InboundHttp2ToHttpAdapter.

Modifications:
- Ensure the status was null in ""InboundHttp2ToHttpAdapter::onPushPromiseRead"" before calling ""HttpConversionUtil.parseStatus"" methods.
- Fix setting status to OK in ""InboundHttp2ToHttpAdapter::onPushPromiseRead"".

Result:
Fixes [#7214]."
80b8a91b704c6418581a9d540998d7f4446faaef,"Use offset finding eol avoid repeated scaning.

Motivation:

A large frame will be componsed by many packages. Every time the package
arrived, findEndOfLine will be called from the start of the buffer. It
will cause the complexity of reading frame equal to  O(n^2). This can be
eliminated by using a offset to mark the last scan position, when new
package arrived, just find the delimter from the mark. The complexity
will be O(n).

Modification:

Add a offset to mark the last scan position.

Result:

Better performance for read large frame."
80676863492aff7dd32841bc45a74e9a6b76975f,"Correctly filter out native tcnative lib

Motivation:

c93e58c453147ab5b34a708a85530d2372bbac81 changed to use _ for the tcnative lib name but missed to also adjust the filtering.

Modifications:

Fix filtering to look for _

Result:

Not include native tcnative lib as expected."
ff592c8d5c54d6a81b17050f980c5d57299a5148,Remove @Deprecated from package-info.java as intellij not likes it
aa8bdb5d6b7f89d56712c2d177c27857a17d79cd,"Fix assertion error when closing / shutdown native channel and SO_LINGER is set.

Motivation:

When SO_LINGER is used we run doClose() on the GlobalEventExecutor by default so we need to ensure we schedule all code that needs to be run on the EventLoop on the EventLoop in doClose. Beside this there are also threading issues when calling shutdownOutput(...)

Modifications:

- Schedule removal from EventLoop to the EventLoop
- Correctly handle shutdownOutput and shutdown in respect with threading-model
- Add unit tests

Result:

Fixes [#7159]."
3c8c7fc7e9c27f87e64aad5bd1df6c58ed8ef36e,"Reduce performance overhead of ResourceLeakDetector

Motiviation:

The ResourceLeakDetector helps to detect and troubleshoot resource leaks and is often used even in production enviroments with a low level. Because of this its import that we try to keep the overhead as low as overhead. Most of the times no leak is detected (as all is correctly handled) so we should keep the overhead for this case as low as possible.

Modifications:

- Only call getStackTrace() if a leak is reported as it is a very expensive native call. Also handle the filtering and creating of the String in a lazy fashion
- Remove the need to mantain a Queue to store the last access records
- Add benchmark

Result:

Huge decrease of performance overhead.

Before the patch:

Benchmark                                           (recordTimes)   Mode  Cnt     Score     Error  Units
ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  4358.367 ± 116.419  ops/s
ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20  2306.027 ±  55.044  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  4220.979 ± 114.046  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20  2250.734 ±  55.352  ops/s

With this patch:

Benchmark                                           (recordTimes)   Mode  Cnt      Score      Error  Units
ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  71398.957 ± 2695.925  ops/s
ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20  38643.963 ± 1446.694  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  71677.882 ± 2923.622  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20  38660.176 ± 1467.732  ops/s"
9d56439aa1c221d38ee3b526c63d268c2e6f16c7,"Make UnpooledDirectByteBuf, UnpooledHeapByteBuf and UnpooledUnsafeDirectByteBuf constructors public.

Motivation:

The constrcutors a protected atm but the classes are public. We should make the constructors public as well to make it easier to write your own ByteBufAllocator.

Modifications:

Change constructors to be public and add some javadocs.

Result:

Easier to create own ByteBufAllocator."
4d5f0e7ad5d20a754a484d0ce9ae2d771c0f8c1e,"NativeLibraryLoader should check the result of ClassLoader#getResource method

Motivation:

NativeLibraryLoader uses ClassLoader#getResource method that can return nulls when the resource cannot be found. The returned url variable should be checked for nullity and fail in a more usable manner than a NullPointerException

Modifications:

Fail with a FileNotFoundException

Result:

Fixes [#7222]."
70c5c48eab5a172bf7132bd6cd6f160284a1f7cb,"Correctly not write any body when 1xx, 204 or 304 is used as response status code.

Motivation:

We need to ensure we not write any body when a response with status code of 1xx, 204 or 304 is used as stated in rfc:
https://tools.ietf.org/html/rfc7230#section-3.3.3

Modifications:

- Correctly handle status codes
- Add unit tests

Result:

Correctly handle responses with 1xx, 204, 304 status codes."
1ff2e1fb5d6bb20d4165c7503ecf2c6e66dfcdf7,"Match Http2ClientUpgradeCodec to the new upgrade policy

Motivation:

We changed Http2ConnectionHandler to expect the upgrade method to be
called *after* we send the preface (ie add the handler to the pipeline)
but we forgot to change the Http2ClientUpgradeCodec to match the new
policy.  This meant that client-side h2c upgrades failed.

Modifications:

Reverse sending the preface and calling the upgrade method to match the
new policy.

Result:

Clients can initiate h2c upgrades successfully."
28d2560679d4e075fb76f7d7448ab6a257914fc5,"Update SSLEngineTest certificate validity

Motivation:
A bunch of unit tests are failing due to certificates having expired.
This has to be replaced with a newly generated certificate that has a
longer validity.

Modifications:
- generated a certificate with validity of 100 years from now

Results:
Unit tests are passing again"
003c8cc7abcfbe0c7a3ce97a23413ba4c336034a,"Expose all defaults on PooledByteBufAllocator

Motivation:
Most, but not all defaults are statically exposed on
PooledByteBufAllocator.  This makes it cumbersome to make a custom
allocator where most of the defaults remain the same.

Modification:
Expose useCacheForAllThreads, and Direct preferred.  The latter is
needed because it is under the internal package, and public code
should probably not depend on it.

Result:
More customizeable allocators"
c3298a3836c244c94fae9a9cbc1598ea3820d357,"Fix regression in reporting leaks introduced by 3c8c7fc7e9c27f87e64aad5bd1df6c58ed8ef36e.

Motivation:

3c8c7fc7e9c27f87e64aad5bd1df6c58ed8ef36e introduced some changes to the ResourceLeakDetector that introduced a regression and so would always log that paranoid leak detection should be enabled even it was already.

Modifications:

Correctly not clear the recorded stacktraces when we process the reference queue so we can log these.

Result:

ResourceLeakDetector works again as expected."
9d5daa37ccc9df1d9c557b67e4ab81e64a92ff26,"Check for latest centos release version when doing a release

Motivation:

We used to check for version 6.8 but the latest is 6.9

Modifications:

Update version to 6.9 in the check.

Result:

Be able to cut a release on latest centos version"
e069079aff5111b45d333bcce5432260fad99076,"Adapt Http2ServerDowngrader to work with clients

Motivation:
Http2ServerDowngrader is specifically built for server channels where
inbound Http2StreamFrames are converted into HttpRequests, and outbound
HttpResponses are converted into Http2StreamFrames. It can be easily
made to be more generic to work with client channels where inbound
Http2StreamFrames are converted into HttpResponses, and outbound
HttpRequests are converted into Http2StreamFrames.

Modification:
- Renamed Http2ServerDowngrader to a more general
  Http2StreamFrameToHttpObjectCodec
- Made it take in an ""isServer"" parameter to determine whether encoding
  inbound Http2StreamFrames should create HttpRequests (for server) or
  HttpResponses (for client)
- Norman fixed a leak in the unit test. Thanks! :-)

Result:
Now Http2StreamFrameToHttpObjectCodec can be used to translate
Http2StreamFrame to HttpObject for both server and client."
f57d8f00e17a3cbd127aeb2b499c3f2787c002e4,[maven-release-plugin] prepare release netty-4.1.16.Final
625a7426cd970eaca78fd1a5cbe5ea177857045c,[maven-release-plugin] prepare for next development iteration
5a6ee27cee9df99404016f124d3768f9793dff59,"Upgrade Conscrypt to 1.0.0.RC11

Motivation:

Getting the latest Conscrypt goodies.

Modifications:

A few API changes have occurred, specifically in the Conscrypt
class.

Result:

Netty now builds and tests against Conscrypt 1.0.0.RC11"
47f016bf564e9b86571fcb04d42f3ae327d0f58d,"extract self() method to avoid too many unchecked @SuppressWarnings

Motivation:

There are many @SuppressWarnings(""unchecked"") in the code for the same purpose that we want to do this return:

@SuppressWarnings(""unchecked"")
public B someMethod() {
    ......
    return (B) this;
}
Modification:

Add a method self() and reuse in all these return lines:

@SuppressWarnings(""unchecked"")
    private B self() {
        return (B) this;
    }
Result:

Then only one @SuppressWarnings(""unchecked"") left in the code."
78786e6052d108c29b407aa93a505692d0a8fe20,"Remove unnecessary instantiation of HttpResponseStatus

Motivation:
- In the `HttpResponseStatus#equals` checks only status code. No need to create new instance of `HttpResponseStatus` for comparison with response status.
- The RFC says: `the HTTP version and reason phrase aren't important` [1].

Modifications:
Use comparison by status code without creating new `HttpResponseStatus`.

Result:
Less allocations, more clear code.

[1] https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00"
06da0ceb64fc9ffecec5611aaccfb5db19a299a5,Fix typo in comment.
ad548a6a0add6a98723cfa119bf2c4c55b75a367,"Fixing CorsHandler response Content-Length

Motivation:

https://github.com/netty/netty/issues/7253

Modifications:

Adding `Content-Length: 0` to `CorsHandler.forbidden()` and `CorsHandler.handlePreflight()`

Result:

Contexts that are terminated by the CorsHandler will always include a Content-Length header"
bb1833f22c1e43cd5ea2d75fbc2c5587d062ac04,"Fix Java9SslEngine implementation of ApplicationProtocolAccessor and so fix ApplicationProtocolNegationHandler

Motivation:

Java9SslEngine did not correctly implement ApplicationProtocolAccessor and so returned an empty String when no extension was used while the interface contract is to return null. This lead to the situation that ApplicationProtocolNegationHandler did not correct work.

Modifications:

- Rename ApplicationProtocolAccessor.getApplicationProtocol() to getNegotiatedApplicationProtocol() which resolves the clash with the method exposed by Java9s SSLEngine.
- Correctly implement getNegotiatedApplicationProtocol() for Java9Sslengine
- Add delegate in Java9Sslengine.getApplicationProtocol() which is provided by Java9
- Adjust tests to test the correct behaviour.

Result:

Fixes [#7251]."
940f15f0d2cbdbb05397832a0b3e8ac4d5dd1420,"Use predefined HttpResponseStatus constant instead of hardcoded 101 code

Motivation:

#7269 removed an unnecessary instanciation for verifying WebSocket
handshake status code.
But it uses a hardcoded status code value for 101 instead of using the
intended `HttpResponseStatus#SWITCHING_PROTOCOLS` constant.

Modidication:

Compare actual `HttpResponseStatus` against predefined constant. Note
that `HttpResponseStatus#equals` is implemented in respect with the RFC
(only honor code, not text) so it’s intended to be used this way.

Result:

Cleaner code, use intended constant instead of hard coded value."
83a19d565064ee36998eb94f946e5a4264001065,"Optimistically update ref counts

Motivation:
Highly retained and released objects have contention on their ref
count.  Currently, the ref count is updated using compareAndSet
with care to make sure the count doesn't overflow, double free, or
revive the object.

Profiling has shown that a non trivial (~1%) of CPU time on gRPC
latency benchmarks is from the ref count updating.

Modification:
Rather than pessimistically assuming the ref count will be invalid,
optimistically update it assuming it will be.  If the update was
wrong, then use the slow path to revert the change and throw an
execption.  Most of the time, the ref counts are correct.

This changes from using compareAndSet to getAndAdd, which emits a
different CPU instruction on x86 (CMPXCHG to XADD).  Because the
CPU knows it will modifiy the memory, it can avoid contention.

On a highly contended machine, this can be about 2x faster.

There is a downside to the new approach.  The ref counters can
temporarily enter invalid states if over retained or over released.
The code does handle these overflow and underflow scenarios, but it
is possible that another concurrent access may push the failure to
a different location.  For example:

Time 1 Thread 1: obj.retain(INT_MAX - 1)
Time 2 Thread 1: obj.retain(2)
Time 2 Thread 2: obj.retain(1)

Previously Thread 2 would always succeed and Thread 1 would always
fail on the second access.  Now, thread 2 could fail while thread 1
is rolling back its change.

====

There are a few reasons why I think this is okay:

1. Buggy code is going to have bugs.  An exception _is_ going to be
   thrown.  This just causes the other threads to notice the state
   is messed up and stop early.
2. If high retention counts are a use case, then ref count should
   be a long rather than an int.
3. The critical section is greatly reduced compared to the previous
   version, so the likelihood of this happening is lower
4. On error, the code always rollsback the change atomically, so
   there is no possibility of corruption.

Result:
Faster refcounting

```
BEFORE:

Benchmark                                                                                             (delay)    Mode      Cnt         Score    Error  Units
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                            1  sample  2901361       804.579 ±  1.835  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                           10  sample  3038729       785.376 ± 16.471  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                          100  sample  2899401       817.392 ±  6.668  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                         1000  sample  3650566      2077.700 ±  0.600  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                        10000  sample  3005467     19949.334 ±  4.243  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                          1  sample   456091        48.610 ±  1.162  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                         10  sample   732051        62.599 ±  0.815  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                        100  sample   778925       228.629 ±  1.205  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                       1000  sample   633682      2002.987 ±  2.856  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                      10000  sample   506442     19735.345 ± 12.312  ns/op

AFTER:
Benchmark                                                                                             (delay)    Mode      Cnt         Score    Error  Units
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                            1  sample  3761980       383.436 ±  1.315  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                           10  sample  3667304       474.429 ±  1.101  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                          100  sample  3039374       479.267 ±  0.435  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                         1000  sample  3709210      2044.603 ±  0.989  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_contended                                        10000  sample  3011591     19904.227 ± 18.025  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                          1  sample   494975        52.269 ±  8.345  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                         10  sample   771094        62.290 ±  0.795  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                        100  sample   763230       235.044 ±  1.552  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                       1000  sample   634037      2006.578 ±  3.574  ns/op
AbstractReferenceCountedByteBufBenchmark.retainRelease_uncontended                                      10000  sample   506284     19742.605 ± 13.729  ns/op

```"
d3ca087f6b35f8db3417324a62d43790f3d5fc62,"Propagate all exceptions when loading native code

Motivation:
There are 2 motivations, the first depends on the second:

Loading Netty Epoll statically stopped working in 4.1.16, due to
`Native` always loading the arch specific shared object.  In a
static binary, there is no arch specific SO.

Second, there are a ton of exceptions that can happen when loading
a native library.  When loading native code, Netty tries a bunch of
different paths but a failure in any given may not be fatal.

Additionally: turning on debug logging is not always feasible so
exceptions get silently swallowed.

Modifications:

* Change Epoll and Kqueue to try the static load second
* Modify NativeLibraryLoader to record all the locations where
  exceptions occur.
* Attempt to use `addSuppressed` from Java 7 if available.

Alternatives Considered:

An alternative would be to record log messages at each failure.  If
all load attempts fail, the log messages are printed as warning,
else as debug. The problem with this is there is no `LogRecord` to
create like in java.util.logging.  Buffering the args to
logger.log() at the end of the method loses the call site, and
changes the order of events to be confusing.

Another alternative is to teach NativeLibraryLoader about loading
the SO first, and then the static version.  This would consolidate
the code fore Epoll, Kqueue, and TCNative.   I think this is the
long term better option, but this PR is changing a lot already.
Someone else can take a crack at it later

Results:
Epoll Still Loads and easier debugging."
5eca326c3568566f334b31b18f7866af19a989c8,"Do not treat errors as decoder exception

Motivation: Today when Netty encounters a general error while decoding
it treats this as a decoder exception. However, for fatal causes this
should not be treated as such, instead the fatal error should be carried
up the stack without the callee having to unwind causes.

Modifications: Instead of translating any error to a decoder exception,
we let those unwind out the stack (note that finally blocks still
execute).

Result: Fatal errors will not be treated as innocent decoder exceptions."
f301edfb9d91fedcdde63468eccde266efb05e50,"Upgrade dependencies to versions which use ASM 6.0.0+

Motivation:

We need to upgrade our dependencies to versions which use ASM 6.0.0+ to support compiling on java9.

Modifications:

Update animal-sniffer-maven-plugin and maven-shade-plugin.

Result:

Fixes https://github.com/netty/netty/issues/6100"
3cca5dfa9257ff21643392bd2c413b5322252dc4,"Update JCTools version

Motivation:

JCTools 2.1.0 contains package-info.class which doesn't load on JRE 6.

Modifications:

Change pom JCTools version.

Result:

Really fixes https://github.com/netty/netty/issues/7117"
3fe1f715117d03d1597fc066ec2f8bc7abb51473,"Do not treat errors as decoder exception (redux)

Motivation: Today when Netty encounters a general error while decoding
it treats this as a decoder exception. However, for fatal causes this
should not be treated as such, instead the fatal error should be carried
up the stack without the callee having to unwind causes. This was
probably done for byte to byte message decoder but is now done for all
decoders.

Modifications: Instead of translating any error to a decoder exception,
we let those unwind out the stack (note that finally blocks still
execute) except in places where an event needs to fire where we fire
with the error instead of wrapping in a decoder exception.

Result: Fatal errors will not be treated as innocent decoder exceptions."
9bcf31977c69d2b70c486ac7af3c07e9f0db29c9,"Fail the connectPromise with the correct exception if the connection is refused when using the native kqueue transport.

Motivation:

Due a bug we happen to sometimes fail the connectPromise with a ClosedChannelException when using the kqueue transport and the remote peer refuses the connection. We need to ensure we fail it with the correct exception.

Modifications:

Call finishConnect() before calling close() to ensure we preserve the correct exception.

Result:

KQueueSocketConnectionAttemptTest.testConnectionRefused will pass always on macOS."
16b1dbdf9244f831aa0cd92d5531d8cb61010b07,"Motivation: Resource Leak Detector (RLD) tries to helpfully indicate where an object was last accessed and report the accesses in the case the object was not cleaned up. It handles lightly used objects well, but drops all but the last few accesses.

Configuring this is tough because there is split between highly shared (and accessed) objects and lightly accessed objects.

Modification:
There are a number of changes here.  In relative order of importance:

API / Functionality changes:
* Max records and max sample records are gone.  Only ""target"" records, the number of records tries to retain is exposed.
* Records are sampled based on the number of already stored records.  The likelihood of recording a new sample is `2^(-n)`, where `n` is the number of currently stored elements.
* Records are stored in a concurrent stack structure rather than a list.  This avoids a head and tail.  Since the stack is only read once, there is no need to maintain head and tail pointers
* The properties of this imply that the very first and very last access are always recorded.  When deciding to sample, the top element is replaced rather than pushed.
* Samples that happen between the first and last accesses now have a chance of being recorded.  Previously only the final few were kept.
* Sampling is no longer deterministic.  Previously, a deterministic access pattern meant that you could conceivably always miss some access points.
* Sampling has a linear ramp for low values and and exponentially backs off roughly equal to 2^n.  This means that for 1,000,000 accesses, about 20 will actually be kept.  I have an elegant proof for this which is too large to fit in this commit message.

Code changes:
* All locks are gone.  Because sampling rarely needs to do a write, there is almost 0 contention.  The dropped records counter is slightly contentious, but this could be removed or changed to a LongAdder.  This was not done because of memory concerns.
* Stack trace exclusion is done outside of RLD.  Classes can opt to remove some of their methods.
* Stack trace exclusion is faster, since it uses String.equals, often getting a pointer compare due to interning.  Previously it used contains()
* Leak printing is outputted fairly differently.  I tried to preserve as much of the original formatting as possible, but some things didn't make sense to keep.

Result:
More useful leak reporting.

Faster:
```
Before:
Benchmark                                           (recordTimes)   Mode  Cnt       Score      Error  Units
ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  136293.404 ± 7669.454  ops/s
ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20   72805.720 ± 3710.864  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  139131.215 ± 4882.751  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20   74146.313 ± 4999.246  ops/s

After:
Benchmark                                           (recordTimes)   Mode  Cnt       Score      Error  Units
ResourceLeakDetectorRecordBenchmark.record                      8  thrpt   20  155281.969 ± 5301.399  ops/s
ResourceLeakDetectorRecordBenchmark.record                     16  thrpt   20   77866.239 ± 3821.054  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint              8  thrpt   20  153360.036 ± 8611.353  ops/s
ResourceLeakDetectorRecordBenchmark.recordWithHint             16  thrpt   20   78670.804 ± 2399.149  ops/s
```"
1b0a5459210181ac076c026981655f6757672377,"Do not send Content-Length: 0 on 101 responses.

Motivation:

During code read of the Netty codebase I noticed that the Netty
HttpServerUpgradeHandler unconditionally sets a Content-Length: 0
header on 101 Switching Protocols responses. This explicitly
contravenes RFC 7230 Section 3.3.2 (Content-Length), which notes
that:

    A server MUST NOT send a Content-Length header field in any
    response with a status code of 1xx (Informational) or 204
    (No Content).

While it is unlikely that any client will ever be confused by
this behaviour, there is no reason to contravene this part of the
specification.

Modifications:

Removed the line of code setting the header field and changed the
only test that expected it to be there.

Result:

When performing the server portion of HTTP upgrade, the 101
Switching Protocols response will no longer contain a
Content-Length: 0 header field."
558097449cb9719f0ebd5332b954d06fe8280e86,"Add missed 'serialVersionUID' field for Serializable classes

Motivation:

Without a 'serialVersionUID' field, any change to a class will make
previously serialized versions unreadable.

Modifications:

Add missed 'serialVersionUID' field for all Serializable
classes.

Result:

Proper deserialization of previously serialized objects."
09dd6a5d4d96fed5364187e5df678f063ab5c6e0,"Minor improvements in ByteBufOutputStream

Motivation:
In the `ByteBufOutputStream` we can use an appropriate methods of `ByteBuf`
to reduce calls of virtual methods and do not copying converting logic.

Modifications:
- Use an appropriate methods of `ByteBuf`
- Remove redundant conversions (int -> byte, int -> char).
- Use `ByteBuf#writeCharSequence` in the `writeBytes(String)'.

Result:
Less code duplication. A `writeBytes(String)` method is faster.
No unnecessary conversions. More consistent and cleaner code."
17e1a26d64fa2d2bfcd068bbaf68803bad949b42,"Fixes a javadoc for ByteBufUtil#copy method

Motivation:
Javadoc of the `ByteBufUtil#copy(AsciiString, int, ByteBuf, int, int)` is incorrect.

Modifications:
Fix it.

Result:
The description of the `#copy` method is not misleading."
50a067a8f72b518fd1c9a2539cd777e00625436e,"Make methods 'static' where it possible

Motivation:

Even if it's a super micro-optimization (most JVM could optimize such
 cases in runtime), in theory (and according to some perf tests) it
 may help a bit. It also makes a code more clear and allows you to
 access such methods in the test scope directly, without instance of
 the class.

Modifications:

Add 'static' modifier for all methods, where it possible. Mostly in
test scope.

Result:

Cleaner code with proper 'static' modifiers."
4793daa589ffeb52886409a01e607d3dbe42551a,"Make Comparators Serializable

Motivation:

Objects of java.util.TreeMap or java.util.TreeSet will become
non-Serializable if instantiated with Comparators, which are not also
 Serializable. This can result in unexpected and difficult-to-diagnose
 bugs.

Modifications:

Implements Serializable for all classes, which implements Comparator.

Result:

Proper Comparators which will not force collections to
non-Serializable mode."
740c68faed4b6c5b5f7b5daec195cf5fc5926d70,"Add supresswarnings to cleanup 16b1dbdf9244f831aa0cd92d5531d8cb61010b07.

Motivation:

We should add @SupressWarnings

Modifications:

Add annotations.

Result:

Less warnings"
d93c607f9317633c0741ae157d4ec9fc590867ec,"Update links for actual Protobuf repo and documentation

Motivation:

Use actual links to new locations of Protobuf repo and documentation to
avoid problems when redirect will not work.

Modification:

Links in comments and all/pom.xml

Result:

Correct links to Protobuf resources"
dc98eae5a5a3ac4d4e7b50d4d38018993d52616b,"Correct filling an `origin` header for WS client

Motivation:
An `origin`/`sec-websocket-origin` header value in websocket client is filling incorrect in some cases:
- Hostname is not converting to lower-case as prescribed by RFC 6354 (see [1]).
- Selecting a `http` scheme when source URI has `wss`/`https` scheme and non-standard port.

Modifications:
- Convert uri-host to lower-case.
- Use a `https` scheme if source URI scheme is `wss`/`https`, or if source scheme is null and port == 443.

Result:
Correct filling an `origin` header for WS client.

[1] https://tools.ietf.org/html/rfc6454#section-4"
dcb828f02fd69aaa1d77b70d41a2a1c4799f2527,"DnsResolver CNAME redirect bug

Motviation:
DnsNameResolverContext#followCname attempts to build a query to follow a CNAME, but puts the original hostname in the DnsQuery instead of the CNAME hostname. This will result in not following CNAME redirects correctly.

Result:
- DnsNameResolverContext#followCname should use the CNAME instead of the original hostname when building the DnsQuery

Result:
More correct handling of redirect queries."
521e87984dcff49d556a5696ed5de0b72a8a1797,"SslHandler.setHandshakeTimeout*(...) should also been enforced on the server side.

Motivation:

We should also enforce the handshake timeout on the server-side to allow closing connections which will not finish the handshake in an expected amount of time.

Modifications:

- Enforce the timeout on the server and client side
- Add unit test.

Result:

Fixes [#7230]."
dcc39e5b21eda7bdd9563ed86253a693923f6432,"Fixes a LoggingHandler#format method with two arguments

Motivation:
Bug in capacity calculation: occurs auto convert to string instead of sum up.

Modifications:
Use `eventName.length()` in sum.

Result:
Less trash in logs."
d8e187ff2c30ce75d610e0079164841d919d839e,"Ensure setting / getting the traffic class on an ipv4 only system works when using the native transport.

Motivation:

We tried to set IPV6 opts on an ipv4 only system and so failed to set / get the traffic opts. This resulted in a test-error when trying to compile netty on ipv4 only systems.

Modifications:

Use the correct opts depending on if the system is ipv4 only or not.

Result:

Be able to build and use on ipv4 only systems."
55b501d0d47c24a5db84386be11994b2eaf14579,"Correctly update Channel writability when queueing data in SslHandler.

Motivation:

A regression was introduced in 86e653e which had the effect that the writability was not updated for a Channel while queueing data in the SslHandler.

Modifications:

- Factor out code that will increment / decrement pending bytes and use it in AbstractCoalescingBufferQueue and PendingWriteQueue
- Add test-case

Result:

Channel writability changes are triggered again."
baf273aea88b5c8124cacd4b4bf17a6807bf88fc,"Trigger user event when H2 conn preface & SETTINGS frame are sent

Motivation:
Previously client Http2ConnectionHandler trigger a user event
immediately when the HTTP/2 connection preface is sent. Any attempt to
immediately send a new request could cause the server to terminate the
connection, as it might not have received the SETTINGS frame from the
client. Per RFC7540 Section 3.5, the preface ""MUST be followed by a
SETTINGS frame (Section 6.5), which MAY be empty.""
(https://tools.ietf.org/html/rfc7540#section-3.5)

This event could be made more meaningful if it also indicates that the
initial client SETTINGS frame has been sent to signal that the channel
is ready to send new requests.

Modification:
- Renamed event to Http2ConnectionPrefaceAndSettingsFrameWrittenEvent.
- Modified Http2ConnectionHandler to trigger the user event only if it
  is a client and it has sent both the preface and SETTINGS frame.

Result:
It is now safe to use the event as an indicator that the HTTP/2
connection is ready to send new requests."
dcbbae7f9006f5b995d055702dd1c9f55f0e0c9d,"Added QueryStringDecoder.rawPath() and rawQuery()

Motivation:

Before this commit, it is impossible to access the path component of the
URI before it has been decoded.  This makes it impossible to distinguish
between the following URIs:

/user/title?key=value
/user%2Ftitle?key=value

The user could already access the raw uri value, but they had to calculate
pathEndIdx themselves, even though it might already be cached inside
QueryStringDecoder.

Result:

The user can easily and efficiently access the undecoded path and query."
92b786e2f33a44f16be224305fe4fb716422b14a,"Fix possible leak in SslHandler if wrap(...) throws.

Motivation:

We can end up with a buffer leak if SSLEngine.wrap(...) throws.

Modifications:

Correctly release the ByteBuf if SSLEngine.wrap(...) throws.

Result:

Fixes [#7337]."
e62e6df4acd8d66623fdce271e009d3fe76d203d,"Use WeakReferences for Resource Leaks

Motivation:
Phantom references are for cleaning up resources that were
forgotten, which means they keep their referent alive.   This
means garbage is kept around until the refqueue is drained, rather
than when the reference is unreachable.

Modification:
Use Weak References instead of Phantoms

Result:
More punctual leak detection."
8aeba78ecc9c9c3806ca729120c57e521f3d0501,"HttpPostMultipartRequestDecoder should decode header field parameters

Motivation:

I am receiving a multipart/form_data upload from a Mailgun webhook. This webhook used to send parts like this:

--74e78d11b0214bdcbc2f86491eeb4902
Content-Disposition: form-data; name=""attachment-2""; filename=""attached_Ñ�Ð°Ð¹Ð».txt""
Content-Type: text/plain
Content-Length: 32

This is the content of the file

--74e78d11b0214bdcbc2f86491eeb4902--
but now it posts parts like this:

--74e78d11b0214bdcbc2f86491eeb4902
Content-Disposition: form-data; name=""attachment-2""; filename*=utf-8''attached_%D1%84%D0%B0%D0%B9%D0%BB.txt

This is the content of the file

--74e78d11b0214bdcbc2f86491eeb4902--
This new format uses field parameter encoding described in RFC 5987. More about this encoding can be found here.

Netty does not parse this format. The result is the filename is not decoded and the part is not parsed into a FileUpload.

Modification:

Added failing test in HttpPostRequestDecoderTest.java and updated HttpPostMultipartRequestDecoder.java
Refactored to please Netkins
Result:

Fixes:

HttpPostMultipartRequestDecoder identifies the RFC 5987 format and parses it.
Previous functionality is retained."
424bb09d2424114ee0f81a397f1079ccd21ebf64,"Http2StreamFrameToHttpObjectCodec should handle 100-Continue properly

Motivation:
Http2StreamFrameToHttpObjectCodec was not properly encoding and
decoding 100-Continue HttpResponse/Http2SettingsFrame properly. It was
encoding 100-Continue FullHttpResponse as an Http2SettingFrame with
endStream=true, causing the child channel to terminate. It was not
decoding 100-Continue Http2SettingsFrame (endStream=false) as
FullHttpResponse. This should be fixed as it would cause http2 child
stream to prematurely close, and could cause HttpObjectAggregator to
fail if it's in the pipeline.

Modification:
- Fixed encode() to properly encode 100-Continue FullHttpResponse as
  Http2SettingsFrame with endStream=false
- Reject 100-Continue HttpResponse that are NOT FullHttpResponse
- Fixed decode() to properly decode 100-Continue Http2SettingsFrame
  (endStream=false) as a FullHttpResponse
- made Http2StreamFrameToHttpObjectCodec sharable so that it can b used
  among child streams within the same Http2MultiplexCodec

Result:
Now Http2StreamFrameToHttpObjectCodec should be properly handling
100-Continue responses."
413c7c2cd82e09dac481ea52ba2cb88ffcd58624,"Set readPending to false when ever a read is done

Motivation:
readPending is currently only set to false if data is delivered to the application, however this may result in duplicate events being received from the selector in the event that the socket was closed.

Modifications:
- We should set readPending to false before each read attempt for all
transports besides NIO.
- Based upon the Javadocs it is possible that NIO may have spurious
wakeups [1]. In this case we should be more cautious and only set
readPending to false if data was actually read.

[1] https://docs.oracle.com/javase/7/docs/api/java/nio/channels/SelectionKey.html
That a selection key's ready set indicates that its channel is ready for some operation category is a hint, but not a guarantee, that an operation in such a category may be performed by a thread without causing the thread to block.

Result:
Notification from the selector (or simulated events from kqueue/epoll ET) in the event of socket closure.
Fixes https://github.com/netty/netty/issues/7255"
911b2acc5086415d762a2050609827b13c521dfd,"HTTP/2 Child Channel reading and flushing

Motivation:
If a child channel's read is triggered outside the parent channel's read
loop then it is possible a WINDOW_UPDATE will be written, but not
flushed.
If a child channel's beginRead processes data from the inboundBuffer and
then readPending is set to false, which will result in data not being
delivered if in the parent's read loop and more data is attempted to be
delievered to that child channel.

Modifications:
- The child channel must force a flush if a frame is written as a result
of reading a frame, and this is not in the parent channel's read loop
- The child channel must allow a transition from dequeueing from
beginRead into the parent channel's read loop to deliver more data

Result:
The child channel flushes data when reading outside the parent's read
loop, and has frames delivered more reliably."
58e74e9fee1c12eb3a73c38109cfd081750992b6,"Support running Netty in bootstrap class loader

Motivation:

Fix NullPointerExceptions that occur when running netty-tcnative inside the bootstrap class loader.

Modifications:

- Replace loader.getResource(...) with ClassLoader.getSystemResource(...) when loader is null.
- Replace loader.loadClass(...) with Class.forName(..., false, loader) which works when loader is both null and non-null.

Result:

Support running native libs in bootstrap class loader"
7995afee8f1cb9047709239321d84ccb279fe4d1,"Don't disable HttpObjectDecoder on upgrade from HTTP/1.x to HTTP/1.x over TLS

This change allows to upgrade a plain HTTP 1.x connection to TLS
according to RFC 2817. Switching the transport layer to TLS should be
possible without removing HttpClientCodec from the pipeline,
because HTTP/1.x layer of the protocol remains untouched by the switch
and the HttpClientCodec state must be retained for proper
handling the remainder of the response message,
per RFC 2817 requirement in point 3.3:

  Once the TLS handshake completes successfully, the server MUST
  continue with the response to the original request.

After this commit, the upgrade can be established by simply
inserting an SslHandler at the front of the pipeline after receiving
101 SWITCHING PROTOCOLS response, exactly as described in SslHander
documentation.

Modifications:
- Don't set HttpObjectDecoder into UPGRADED state if
  101 SWITCHING_PROTOCOLS response contains HTTP/1.0 or HTTP/1.1 in
  the protocol stack described by the Upgrade header.
- Skip pairing comparison for 101 SWITCHING_PROTOCOLS, similar
  to 100 CONTINUE, since 101 is not the final response to the original
  request and the final response is expected after TLS handshake.

Fixes #7293."
cdb2a27857e2dc0bc12ac97eaf2edd23a6467568,"Add TCP_FASTOPEN_CONNECT epoll option

Motivation:

Linux kernel 4.11 introduced a new socket option,
TCP_FASTOPEN_CONNECT, that greatly simplifies making TCP Fast Open
connections on client side. Usually simply setting the flag before
connect() call is enough, no more changes are required.

Details can be found in kernel commit:
https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=19f6d3f3

Modifications:

TCP_FASTOPEN_CONNECT socket option was added to EpollChannelOption
class.

Result:

Netty clients can easily make TCP Fast Open connections. Simply
calling option(EpollChannelOption.TCP_FASTOPEN_CONNECT, true) in
client bootstrap is enough (given recent enough kernel)."
ad1f0d46b38b711b45456768135df055eec04280,"Take the architecture into account when loading netty-tcnative

Motivation:

We should ensure we only try to load the netty-tcnative version that was compiled for the architecture we are using.

Modifications:

Include architecture into native lib name.

Result:

Only load native lib if the architecture is supported."
fa584c146f96bd3448f0b06fac8708e5d5b48480,"SslHandler dervies jdkCompatibilityMode from SSLEngine

Motivation:
Some SSLEngine implementations (e.g. ReferenceCountedOpenSslContext) support unwrapping/wrapping multiple packets at a time. The SslHandler behaves differently if the SSLEngine supports this feature, but currently requires that the constructor argument between the SSLEngine creation and SslHandler are coordinated. This can be difficult, or require package private access, if extending the SslHandler.

Modifications:
- The SslHandler should inspect the SSLEngine to see if it supports jdkCompatibilityMode instead of relying on getting an extra constructor argument which maybe out of synch with the SSLEngine

Result:
Easier to override SslHandler and have consistent jdkCompatibilityMode between SSLEngine and SslHandler."
7321418eb550ff5737b11acbc2843b29b466e968,"Fix possible NPE in ReferenceCountedOpenSslEngine.rejectRemoteInitiatedRenegotiation()

Motivation:

ReferenceCountedOpenSslEngine.rejectRemoteInitiatedRenegotiation() is called in a finally block to ensure we always check for renegotiation. The problem here is that sometimes we will already shutdown the engine before we call the method which will lead to an NPE in this case as the ssl pointer was already destroyed.

Modifications:

Check that the engine is not destroyed yet before calling SSL.getHandshakeCount(...)

Result:

Fixes [#7353]."
fbe0e3506e779a9d5c93dfa203b56eec4fdabf1c,"OpenSslEngine support unwrap plaintext greater than 2^14 and avoid
infinite loop

Motivation:
If SslHandler sets jdkCompatibilityMode to false and ReferenceCountedOpenSslEngine sets jdkCompatibilityMode to true there is a chance we will get stuck in an infinite loop if the peer sends a TLS packet with length greater than 2^14 (the maximum length allowed in the TLS 1.2 RFC [1]). However there are legacy implementations which actually send larger TLS payloads than 2^14 (e.g. OpenJDK's SSLSessionImpl [2]) and in this case ReferenceCountedOpenSslEngine will return BUFFER_OVERFLOW in an attempt to notify that a larger buffer is to be used, but if the buffer is already at max size this process will repeat indefinitely.

[1] https://tools.ietf.org/html/rfc5246#section-6.2.1
[2] http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/d5a00b1e8f78/src/share/classes/sun/security/ssl/SSLSessionImpl.java#l793

Modifications:
- Support TLS payload sizes greater than 2^14 in ReferenceCountedOpenSslEngine
- ReferenceCountedOpenSslEngine should throw an exception if a
BUFFER_OVERFLOW is impossible to rectify

Result:
No more infinite loop in ReferenceCountedOpenSslEngine due to
BUFFER_OVERFLOW and large TLS payload lengths."
93130b172a61815354267f0f3d8f5af52de39754,"HttpObjectEncoder and MessageAggregator EMPTY_BUFFER usage

Motivation:
HttpObjectEncoder and MessageAggregator treat buffers that are not readable special. If a buffer is not readable, then an EMPTY_BUFFER is written and the actual buffer is ignored. If the buffer has already been released then this will not be correct as the promise will be completed, but in reality the original content shouldn't have resulted in any write because it was invalid.

Modifications:
- HttpObjectEncoder should retain/write the original buffer instead of using EMPTY_BUFFER
- MessageAggregator should retain/write the original ByteBufHolder instead of using EMPTY_BUFFER

Result:
Invalid write operations which happen to not be readable correctly reflect failed status in the promise, and do not result in any writes to the channel."
e0bbff74f7097f000472785982ad86c0ce891567,"Correctly handle WebSockets 00 when using HttpClientCodec.

Motivation:

7995afee8f1cb9047709239321d84ccb279fe4d1 introduced a change that broke special handling of WebSockets 00.

Modifications:

Correctly delegate to super method which has special handling for WebSockets 00.

Result:

Fixes [#7362]."
bcad9dbf97b1f5fe77e9e7e4369064a9cb1e2139,"Revert ""Set readPending to false when ever a read is done""

This reverts commit 413c7c2cd82e09dac481ea52ba2cb88ffcd58624 as it introduced an regression when edge-triggered mode is used which is true for our native transports by default. With 413c7c2cd82e09dac481ea52ba2cb88ffcd58624 included it was possible that we set readPending to false by mistake even if we would be interested in read more."
35b0cd58fb5efce1b00474058b44474676cd6321,"HTTP/2 write of released buffer should not write and should fail the promise

Motivation:
HTTP/2 allows writes of 0 length data frames. However in some cases EMPTY_BUFFER is used instead of the actual buffer that was written. This may mask writes of released buffers or otherwise invalid buffer objects. It is also possible that if the buffer is invalid AbstractCoalescingBufferQueue will not release the aggregated buffer nor fail the associated promise.

Modifications:
- DefaultHttp2FrameCodec should take care to fail the promise, even if releasing the data throws
- AbstractCoalescingBufferQueue should release any aggregated data and fail the associated promise if something goes wrong during aggregation

Result:
More correct handling of invalid buffers in HTTP/2 code."
570d96d8c212092186144cdcb9fe205750dfa8e1,"SslHandler leak

Motivation:
SslHandler only supports ByteBuf objects, but will not release objects of other types. SslHandler will also not release objects if its internal state is not correctly setup.

Modifications:
- Release non-ByteBuf objects in write
- Release all objects if the SslHandler queue is not setup

Result:
Less leaks in SslHandler."
e7f02b1dc0af2024a4ce3fa132f175da34e16303,"Set readPending to false when EOF is detected while issue an read

Motivation:

We need to set readPending to false when we detect a EOF while issue a read as otherwise we may not unregister from the Selector / Epoll / KQueue and so keep on receving wakeups.

The important bit is that we may even get a wakeup for a read event but will still will only be able to read 0 bytes from the socket, so we need to be very careful when we clear the readPending. This can happen because we generally using edge-triggered mode for our native transports and because of the nature of edge-triggered we may schedule an read event just to find out there is nothing left to read atm (because we completely drained the socket on the previous read).

Modifications:

Set readPending to false when EOF is detected.

Result:

Fixes [#7255]."
8618a3351cbecc68562c06c409538b182077f8d9,"ReadOnlyHttpHeaders

Motivation:
For use cases that create headers, but do not need to modify them a read only variant of HttpHeaders would be useful and may be able to provide better iteration performance for encoding.

Modifications:
- Introduce ReadOnlyHttpHeaders that is backed by a flat array

Result:
ReadOnlyHttpHeaders exists for non-modifiable HttpHeaders use cases."
8c5eeb581e2deb64e6f7bfc9dabee4475bebbbf3,"SslHandler promise completion incorrect if write doesn't immediately
complete

Motivation:
SslHandler removes a Buffer/Promise pair from
AbstractCoalescingBufferQueue when wrapping data. However it is possible
the SSLEngine will not consume the entire buffer. In this case
SslHandler adds the Buffer back to the queue, but doesn't add the
Promise back to the queue. This may result in the promise completing
immediately in finishFlush, and generally not correlating to the
completion of writing the corresponding Buffer

Modifications:
- AbstractCoalescingBufferQueue#addFirst should also support adding the
ChannelPromise
- In the event of a handshake timeout we should immediately fail pending
writes immediately to get a more accurate exception

Result:
Fixes https://github.com/netty/netty/issues/7378."
7511c15187429404f70b64ead9b7693206ff9d54,"AbstractCoalescingBufferQueue addFirst void promise handling

Motivation:
AbstractCoalescingBufferQueue#add accounts for void promises, but AbstractCoalescingBufferQueue#addFirst does not. These methods should be consistent.

Modifications:
- AbstractCoalescingBufferQueue#addFirst should account for void promises and share code with AbstractCoalescingBufferQueue#add

Result:
More correct void promise handling in AbstractCoalescingBufferQueue."
ef5ebb40c98eb1d329e8c451f402f03bf5425e52,"Keep all leak records up to the target amount

Motivation:
When looking for a leak, its nice to be able to request at least a
number of leaks.

Modification:

* Made all leak records up to the target amoutn recorded, and only
  then enable backing off.
* Enable recording more than 32 elements.  Previously the shift
  amount made this impossible.

Result:
Ability to record all accesses."
73e8122fc1d1d5ba1b913ad5df377067cdf37242,"Fix sharable check logic
Motivation:

There is an logic issue when checking if ChannelHandler is sharable.

Modification:

Corrected || to &&"
3554646a600d8b20570cad498d7a5c5ce7a966de,"Correctly convert empty HttpContent to ByteBuf

Motivation:

93130b172a61815354267f0f3d8f5af52de39754 introduced a regression where we not ""converted"" an empty HttpContent to ByteBuf and just passed it on in the pipeline. This can lead to the situation that other handlers in the pipeline will see HttpContent instances which is not expected.

Modifications:

- Correctly convert HttpContent to ByteBuf when empty
- Add unit test.

Result:

Handlers in the pipeline will see the expected message type."
812354cf1f5835d9c2627a48c4c50e18daa43f61,[maven-release-plugin] prepare release netty-4.1.17.Final
188ea59c9d5be75ee0879c114a20e6b633e3714b,[maven-release-plugin] prepare for next development iteration
cc069722a2d3ecdd6ec1dc9ae8245eca3e8d734f,"CompositeBytebuf.copy() and copy(...) should respect the allocator

Motivation:

When calling CompositeBytebuf.copy() and copy(...) we currently use Unpooled to allocate the buffer. This is not really correct and may produce more GC then needed. We should use the allocator that was used when creating the CompositeByteBuf to allocate the new buffer which may be for example the PooledByteBufAllocator.

Modifications:

- Use alloc() to allocate the new buffer.
- Add tests
- Fix tests that depend on the copy to be backed by an byte-array without checking hasArray() first.

Result:

Fixes [#7393]."
2adb8bd80f5d19d049ffb7257172cb8d6f1273d2,"Use Parameterized to run SslHandler tests with different SslProviders.

Motivation:

At the moment use loops to run SslHandler tests with different SslProviders which is error-prone and also make it difficult to understand with which provider these failed.

Modifications:

- Move unit tests that should run with multiple SslProviders to extra class.
- Use junit Parameterized to run with different SslProvider combinations

Result:

Easier to understand which SslProvider produced test failures"
1f1a60ae7dfe458d94d64886d01216b75b0884e1,"Use Netty's DefaultPriorityQueue instead of JDK's PriorityQueue for scheduled tasks

Motivation:

`AbstractScheduledEventExecutor` uses a standard `java.util.PriorityQueue` to keep track of task deadlines. `ScheduledFuture.cancel` removes tasks from this `PriorityQueue`. Unfortunately, `PriorityQueue.remove` has `O(n)` performance since it must search for the item in the entire queue before removing it. This is fast when the future is at the front of the queue (e.g., already triggered) but not when it's randomly located in the queue.

Many servers will use `ScheduledFuture.cancel` on all requests, e.g., to manage a request timeout. As these cancellations will be happen in arbitrary order, when there are many scheduled futures, `PriorityQueue.remove` is a bottleneck and greatly hurts performance with many concurrent requests (>10K).

Modification:

Use netty's `DefaultPriorityQueue` for scheduling futures instead of the JDK. `DefaultPriorityQueue` is almost identical to the JDK version except it is able to remove futures without searching for them in the queue. This means `DefaultPriorityQueue.remove` has `O(log n)` performance.

Result:

Before - cancelling futures has varying performance, capped at `O(n)`
After - cancelling futures has stable performance, capped at `O(log n)`

Benchmark results

After - cancelling in order and in reverse order have similar performance within `O(log n)` bounds
```
Benchmark                                           (num)   Mode  Cnt       Score      Error  Units
ScheduledFutureTaskBenchmark.cancelInOrder            100  thrpt   20  137779.616 ± 7709.751  ops/s
ScheduledFutureTaskBenchmark.cancelInOrder           1000  thrpt   20   11049.448 ±  385.832  ops/s
ScheduledFutureTaskBenchmark.cancelInOrder          10000  thrpt   20     943.294 ±   12.391  ops/s
ScheduledFutureTaskBenchmark.cancelInOrder         100000  thrpt   20      64.210 ±    1.824  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder     100  thrpt   20  167531.096 ± 9187.865  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder    1000  thrpt   20   33019.786 ± 4737.770  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder   10000  thrpt   20    2976.955 ±  248.555  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder  100000  thrpt   20     362.654 ±   45.716  ops/s
```

Before - cancelling in order and in reverse order have significantly different performance at higher queue size, orders of magnitude worse than the new implementation.
```
Benchmark                                           (num)   Mode  Cnt       Score       Error  Units
ScheduledFutureTaskBenchmark.cancelInOrder            100  thrpt   20  139968.586 ± 12951.333  ops/s
ScheduledFutureTaskBenchmark.cancelInOrder           1000  thrpt   20   12274.420 ±   337.800  ops/s
ScheduledFutureTaskBenchmark.cancelInOrder          10000  thrpt   20     958.168 ±    15.350  ops/s
ScheduledFutureTaskBenchmark.cancelInOrder         100000  thrpt   20      53.381 ±    13.981  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder     100  thrpt   20  123918.829 ±  3642.517  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder    1000  thrpt   20    5099.810 ±   206.992  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder   10000  thrpt   20      72.335 ±     0.443  ops/s
ScheduledFutureTaskBenchmark.cancelInReverseOrder  100000  thrpt   20       0.743 ±     0.003  ops/s
```"
0013567cd89bd3c3b042f44ccdcafc21fc126704,"Don't try to use UnixResolverDnsServerAddressStreamProvider when on Windows.

Motivation:

We should not try to use UnixResolverDnsServerAddressStreamProvider when on Windows as it will log some error that will produce noise and may confuse users.

Modifications:

Just use DefaultDnsServerAddressStreamProvider if windows is used.

Result:

Less noise in the logs. This was reported in vert.x: https://github.com/eclipse/vert.x/issues/2204"
25d146038cd825311b93bbabeb3f979796bd71d3,"Improved error message in FixedChannelPool

Motivation:

`FixedChannelPool` allows users to configure `acquireTimeoutMillis`
and expects given value to be greater or equal to zero when timeout
action is supplied. However, validation error message said that
value is expected to be greater or equal to one. Code performs
check against zero.

Modifications:

Changed error message to say that value greater or equal to
zero is expected. Added test to check that zero is an acceptable
value.

Result:

Exception with right error message is thrown."
72a216625f16617579f0c0102a7d6624865148d6,"Correctly handle 205 Reset Content response with transfer-encoding

Motivation:

According to RFC 7231 the server may choose to:
```
indicate a zero-length payload for the response by including a
Transfer-Encoding header field with a value of chunked and a message
body consisting of a single chunk of zero-length
```
https://tools.ietf.org/html/rfc7231#page-53

In such cases the exception below appears during decoding phase:
```
java.lang.IllegalArgumentException: invalid version format: 0
	at io.netty.handler.codec.http.HttpVersion.<init>(HttpVersion.java:121)
	at io.netty.handler.codec.http.HttpVersion.valueOf(HttpVersion.java:76)
	at io.netty.handler.codec.http.HttpResponseDecoder.createMessage(HttpResponseDecoder.java:118)
	at io.netty.handler.codec.http.HttpObjectDecoder.decode(HttpObjectDecoder.java:219)
```

Modifications:

HttpObjectDecoder.isContentAlwaysEmpty specifies content NOT empty
when 205 Reset Content response

Result:

There is no `IllegalArgumentException: invalid version format: 0`
when handling 205 Reset Content response with transfer-encoding"
3648ab0355979b2ac706d50db2cb9129b0375e0a,"Add comments for ApplicationProtocolConfig

Motivation:
The behavior for SelectorFailureBehavior and SelectedListenerFailureBehavior enum values are not clear. Additional comments would clarify the expected behavior.

Modifications:
- Add comments for each value in SelectedListenerFailureBehavior and SelectorFailureBehavior which clarify the expected behavior

Result:
The behavior of SelectedListenerFailureBehavior and SelectorFailureBehavior are more clearly communicated."
f115bf50cbda70964130236a09fd3045f1b250be,"EpollSocketChannelConfig.getOptions() must not throw if TCP_FASTOPEN_CONNECT is not supported

Motivation:

If a user calls EpollSocketChannelConfig.getOptions() and TCP_FASTOPEN_CONNECT is not supported we throw an exception.

Modifications:

- Just return 0 if ENOPROTOOPT is set.
- Add testcase

Result:

getOptions() works as epxected."
c921742a4281817052e06ce3bf28c859699e2cbf,"Dont fire an SslHandshakeEvent if the handshake was not started at all.

Motivation:

We should not fire a SslHandshakeEvent if the channel is closed but the handshake was not started.

Modifications:

- Add a variable to SslHandler which tracks if an handshake was started yet or not and depending on this fire the event.
- Add a unit test

Result:

Fixes [#7262]."
d976dc108d587e84c6ffb4dfdb3a9704442db29f,"codec-http2: Improve h1 to h2 header conversion

Motivation:

Netty could handle ""connection"" or ""te"" headers more gently when
converting from http/1.1 to http/2 headers.  Http/2 headers don't
support single-hop headers, so when we convert from http/1.1 to http/2,
we should drop all single-hop headers.  This includes headers like
""transfer-encoding"" and ""connection"", but also the headers that
""connection"" points to, since ""connection"" can be used to designate
other headers as single-hop headers.  For the ""te"" header, we can more
permissively convert it by just dropping non-conforming headers (ie
non-""trailers"" headers) which is what we do for all other headers when
we convert.

Modifications:

Add a new blacklist to the http/1.1 to http/2 conversion, which is
constructed from the values of the ""connection"" header, and stop
throwing an exception when a ""te"" header is passed with a non-""trailers""
value.  Instead, drop all values except for ""trailers"".  Add unit tests
for ""connection"" and ""te"" headers when converting from http/1.1 to http/2.

Result:

This will improve the h2c upgrade request, and also conversions from
http/1.1 to http/2.  This will simplify implementing spec-compliant
http/2 servers that want to share code between their http/1.1 and http/2
implementations.

[Fixes #7355]"
48b4502d1d19208fb46d1ecbe4fb1f3b42248df2,"Move EmptyHttpHeaders.INSTANCE initialization to inner class.

Motivation:

If the HttpUtil class is initialized before HttpHeaders or
EmptyHttpHeaders, EmptyHttpHeaders.INSTANCE will be null. This
can lead to NPEs in code that relies on this field being
non-null. One example is the
LastHttpContent.EMPTY_LAST_CONTENT.trailingHeaders method.

Modifications:

- Move HttpUtil.EMPTY_HEADERS to a private static final inner class
  of EmptyHttpHeaders called InstanceInitializer.
- Add tests, that when run in isolation, validate the fix for the issue.

Result:

Any initialization order of HttpUtil, EmptyHttpHeaders or
HttpHeaders will result in EmptyHttpHeaders.INSTANCE being initialized
correctly."
78522cf3f066c9a311478a0a08529331cf85f6d2,Remove unused allocation introduced by d976dc108d587e84c6ffb4dfdb3a9704442db29f
a8bb9dc1802f59a3a97d555e245f0b8826700bc6,"AbstractByteBuf readSlice bound check bug

Motivation:
AbstractByteBuf#readSlice relied upon the bounds checking of the slice operation in order to detect index out of bounds conditions. However the slice bounds checking operation allows for the slice to go beyond the writer index, and this is out of bounds for a read operation.

Modifications:
- AbstractByteBuf#readSlice and AbstractByteBuf#readRetainedSlice should ensure the desired amount of bytes are readable before taking a slice

Result:
No reading of undefined data in AbstractByteBuf#readSlice and AbstractByteBuf#readRetainedSlice."
844d804aba4b459215f05c9ade59157f6c2cfb4b,"Fix DN resolution when ndots is greater than 1

Motivation:

DN resolution does not fall back to the ""original name"" lookup after search list is checked. This results in a failure to resolve any name (outside of search list) that has number of dots less than resolv.conf's ndots value (which, for example, is often the case in the context of Kubernetes where kubelet passes on resolv.conf containing ""options ndots:5"").

It also does not go through the search list in a situation described in resolv.conf man:
""The default for n[dots] is 1, meaning that if there are any dots in a name, the name will be tried first as an absolute name before any search list elements are appended to it.""

Modifications:

DnsNameResolverContext::resolve was updated to match Go's https://github.com/golang/go/blob/release-branch.go1.9/src/net/dnsclient_unix.go#L338 logic.

Result:
DnsNameResolverContext::resolve will now try to resolve ""original name"" if search list yields no results when number of dots in the original name is less than resolv.conf's ndots value. It will also go through the search list in case ""origin name"" resolution fails and number of dots is equal or larger than resolv.conf's ndots value."
e6126215e03a038c5d34993ea16518af35c2bafa,"DefaultHttp2FrameWriter reduce object allocation

Motivation:
DefaultHttp2FrameWriter#writeData allocates a DataFrameHeader for each write operation. DataFrameHeader maintains internal state and allocates multiple slices of a buffer which is a maximum of 30 bytes. This 30 byte buffer may not always be necessary and the additional slice operations can utilize retainedSlice to take advantage of pooled objects. We can also save computation and object allocations if there is no padding which is a common case in practice.

Modifications:
- Remove DataFrameHeader
- Add a fast path for padding == 0

Result:
Less object allocation in DefaultHttp2FrameWriter"
0a47c590fe9eb23d65fbbeafcacb978b37ed7992,"HttpHeaders valuesIterator and contains improvements

Motivation:
In order to determine if a header contains a value we currently rely
upon getAll(..) and regular expressions. This operation is commonly used
during the encode and decode stage to determine the transfer encoding
(e.g. HttpUtil#isTransferEncodingChunked). This operation requires an
intermediate collection and possibly regular expressions for the
CombinedHttpHeaders use case which can be expensive.

Modifications:
- Add a valuesIterator to HttpHeaders and specializations of this method
for DefaultHttpHeaders, ReadOnlyHttpHeaders, and CombinedHttpHeaders.

Result:
Less intermediate collections and allocation overhead when determining
if HttpHeaders contains a name/value pair."
93b144b7b4872ea623a378c75b92d33bea28ab51,"HttpMethod#valueOf improvement

Motivation:
HttpMethod#valueOf shows up on profiler results in the top set of
results. Since it is a relatively simple operation it can be improved in
isolation.

Modifications:
- Introduce a special case map which assigns each HttpMethod to a unique
index in an array and provides constant time lookup from a hash code
algorithm. When the bucket is matched we can then directly do equality
comparison instead of potentially following a linked structure when
HashMap has hash collisions.

Result:
~10% improvement in benchmark results for HttpMethod#valueOf

Benchmark                                     Mode  Cnt   Score   Error   Units
HttpMethodMapBenchmark.newMapKnownMethods    thrpt   16  31.831 ± 0.928  ops/us
HttpMethodMapBenchmark.newMapMixMethods      thrpt   16  25.568 ± 0.400  ops/us
HttpMethodMapBenchmark.newMapUnknownMethods  thrpt   16  51.413 ± 1.824  ops/us
HttpMethodMapBenchmark.oldMapKnownMethods    thrpt   16  29.226 ± 0.330  ops/us
HttpMethodMapBenchmark.oldMapMixMethods      thrpt   16  21.073 ± 0.247  ops/us
HttpMethodMapBenchmark.oldMapUnknownMethods  thrpt   16  49.081 ± 0.577  ops/us"
907ed79069584b6c4641bfe4bf9f64eea2c23564,"Reduce conditionals in DnsNameResovlerContext

Motivation:
Minor cleanup from 844d804 just to reduce the conditional statements and indentation level.

Modifications:
- combine the else + if into an else if statement

Result:
Code cleaned up."
a3e41ba6eb118dde7657af9a95d6ce34424f76da,"HttpConversionUtils avoid intermediate collection allocation

Modifications:
HttpConversionUtil#toLowercaseMap requires an intermediate List to be allocated. This can be avoided with the recently added value iterator methods.

Modifications:
- Use HttpHeaders#valueCharSequenceIterator instead of getAll

Result:
Less intermediate object allocation and copying."
e5e4c18c1be1d32c5bcb9e6aa0ee300e9c89c18d,"Add testcase for writing empty last content with headers.

Motivation:

https://github.com/netty/netty/issues/7418 reported an issue with writing a LastHttpContent with trailers set.

Modifications:

Add unit test to ensure this issue is fixed in latest netty release.

Result:

Ensure code is correct."
7f4ade7e7d6f907a30926c54e16abefe88e81a8e,"Correctly propagate channelInactive even if cleanup throws

Motivation:

Its possible that cleanup() will throw if invalid data is passed into the wrapped EmbeddedChannel. We need to ensure we still call channelInactive(...) in this case.

Modifications:

- Correctly forward Exceptions caused by cleanup()
- Ensure all content is released when cleanup() throws
- Add unit tests

Result:

Correctly handle the case when cleanup() throws."
b1cc5835acff2df9e5e5b06b70e88b7e9d3c9490,"Not directly call getsockopt but use exported helper function

Motivation:

To better isolate OS system calls we should not call getsockopt directly but use our netty_unix_socket_getOption0 function. See is a followup of f115bf5.

Modifications:

Export netty_unix_socket_getOption0 by declaring it in the header file and use it

Result:

Better isolation of system calls."
e420f857fa0b9ab1df37359f7c0108475696b8dd,"Optimize DefaultHeaders#toString and implement HttpHeaders#toString

Motivation:

For debugging/logging purpose, it would be convenient to have
HttpHeaders#toString implemented.

DefaultHeaders does implement toString be the implementation is suboptimal and allocates a Set for the names and Lists for values.

Modification:

* Introduce HeadersUtil#toString that provides a convenient optimized helper to implement toString for various headers implementations
* Have DefaultHeaders#toString and HttpHeaders#toString delegate their toString implementation to HeadersUtil

Result:

Convenient HttpHeaders#toString. Optimized DefaultHeaders#toString."
7d213240ca768d6dd35ef2336b1fda757bd4df3c,"HttpConversionUtil TE filtering robustness

Motivation:
HttpConversionUtil#toHttp2Headers has special code to filter the TE header name. However this filtering code may result in adding the <TE, TRAILERS> tuple in scenarios that are not appropriate. For example if a value containing trailers is seen it will be added, but the value could not actually be equal to trailers. Also CSV values are not supported.

Modifications:
- Account for CSV header values
- Account for the value containing 'trailers' but not actually being equal to 'trailers'

Result:
More robust parsing of the TE header."
7aca99f9869634d1f65e017e62b5520cd8df8cf5,"DefaultHttpHeader.names().toArray(...) may throw ArrayStoreException

Motivation:

DefaultHttpHeader.names() exposes HTTP header names as a Set<String>. Converting the resulting set to an array using toArray(String[]) throws an exception: java.lang.ArrayStoreException: io.netty.util.AsciiString.

Modifications:

- Remove our custom implementation of toArray(...) (and others) by just extending AbstractCollection.
- Add unit test

Result:

Fixes [#7428]."
12a413bf024e64946b28ed9aa3065a31b9420ad2,"Allow to detect failed query caused by an Timeout / IO error and also not cache these.

Motivation:

At the moment there is not way for the user to know if resolving a domain was failed because the domain was unkown or because of an IO error / timeout. If it was caused by an timeout / IO error the user may want to retry the query. Also if the query was failed because of an IO error / timeout we should not cache it.

Modifications:

- Add DnsNameResolverTimeoutException and include it in the UnkownHostException if the domain could not be resolved because of an timeout. This will allow the user to retry the query when inspecting the cause.
- Do not cache IO errors / timeouts
- Add unit test

Result:

Easier for users to implement retries for DNS querys and not cache IO errors / timeouts."
433dbeb149550a2bf0c35515ca1db8ab52a8343f,"Revert ""Allow to detect failed query caused by an Timeout / IO error and also not cache these.""

This reverts commit 12a413bf024e64946b28ed9aa3065a31b9420ad2 as it needs some more changes due some changes that were merged into 4.1 before."
c1b1d6268aca287f310c5feefa6606eb6f3f6a70,"Allow to detect failed query caused by an Timeout / IO error and also not cache these.

Motivation:

At the moment there is not way for the user to know if resolving a domain was failed because the domain was unkown or because of an IO error / timeout. If it was caused by an timeout / IO error the user may want to retry the query. Also if the query was failed because of an IO error / timeout we should not cache it.

Modifications:

- Add DnsNameResolverTimeoutException and include it in the UnkownHostException if the domain could not be resolved because of an timeout. This will allow the user to retry the query when inspecting the cause.
- Do not cache IO errors / timeouts
- Add unit test

Result:

Easier for users to implement retries for DNS querys and not cache IO errors / timeouts."
f9cadc0a8cf8da5e6b90f9291151d140750e63aa,"When System property is empty use def value.

Motivation:

When system property is empty, the default value should be used.

Modification:

- Correctly use the default value in all cases
- Add unit tests

Result:

Correct behaviour"
65cacc9b15fc88f221ca4c3dde4c301d32864c08,"Guard against NoClassDefFoundError when trying to load Unsafe.

Motivation:

OSGI and other enviroments may not allow to even load Unsafe which will lead to an NoClassDefFoundError when trying to access it. We should guard against this.

Modifications:

Catch NoClassDefFoundError when trying to load Unsafe.

Result:

Be able to use netty with a strict OSGI config."
460d1251219e741e034efc083c7f8cd6f57c7238,"Provide a test for #6548 using the OSGi test suite

Motiviation:

The OSGi Test suite runs without access to sun.misc.Unsafe, and so is a good place to put a test to avoid regressing #6548.

Modification:

Added a test-case that failed before https://github.com/netty/netty/pull/7432.

Result:

Test for fix included."
d8cb9ce09f5e591c244f2c3b04ea5bf054865ebb,"Throw FileNotFoundException when connecting to a missing UDS path

Motivation:
Exception handling is nicer when a more specific Exception is thrown

Modification:
Add a static reference for ENOENT, and throw FNFE if it is returned

Result:
More precise exception handling"
9ef83234f36441cd63f56e1c1a5f796e5e253b8b,"Add tests for HttpObjectDecoder related to limits

Motivation:

HttpObjectDecoder will throw a TooLongFrameException when either the max size for the initial line or the header size was exceeed. We have no tests for this.

Modifications:

Add test cases.

Result:

More tests."
09a05b680da6e44918b76599b78e8e0cb0c19109,"Dont use ThreadDeathWatcher to cleanup PoolThreadCache if FastThreadLocalThread with wrapped Runnable is used

Motivation:

We dont need to use the ThreadDeathWatcher if we use a FastThreadLocalThread for which we wrap the Runnable and ensure we call FastThreadLocal.removeAll() once the Runnable completes.

Modifications:

- Dont use a ThreadDeathWatcher if we are sure we will call FastThreadLocal.removeAll()
- Add unit test.

Result:

Less overhead / running theads if you only allocate / deallocate from FastThreadLocalThreads."
e8540c2b7a1243618002c857be5ba463984e1b76,"Adding stable JDK9 module names that follow reverse-DNS style

Automatic-Module-Name entry provides a stable JDK9 module name, when Netty is used in a modular JDK9 applications. More info: http://blog.joda.org/2017/05/java-se-9-jpms-automatic-modules.html

When Netty migrates to JDK9 in the future, the entry can be replaced by actual module-info descriptor.

Modification:

The POM-s are configured to put the correct module names to the manifest.

Result:

Fixes #7218."
3c8f4b81d7c5dd7ac0c221585623ccf5346380cd,"Fixed default OpenSsl cipher suites

Motivation:

The default enabled cipher suites of the OpenSsl engine are not set to
SslUtils#DEFAULT_CIPHER_SUITES. Instead all available cipher suites are
enabled. This should happen only as a fallback.

Modifications:

Moved the line in the static initializer in OpenSsl which adds the
SslUtils#DEFAULT_CIPHER_SUITES to the default enabled cipher suites up
before the fallback.

Result:

The default enabled cipher suites of the OpenSsl engine are set to the
available ones of the SslUtils#DEFAULT_CIPHER_SUITES.
The default enabled cipher suites of the OpenSsl engine are only set to
all available cipher suites if no one of the
SslUtils#DEFAULT_CIPHER_SUITES is supported."
32746c53c1089550f79bd2d6eeba4d65dab1f2d3,"EDNS Client Subnet is not encoded correctly when source prefix length is not a multiple of 8.

Motivation:
When the ECS source prefix length is not a mutiple of 8, the last byte the address inside the
ECS OPT record is not padded properly.

Modifications:
DefaultDnsRecordEncoder.padWithZeros(...) was modified to add padding from the least
significant bits.

Result:
ECS encoding bug fixed."
7cced5576f0800b5df2b2e166ff6b24925addec4,"Http2ConnectionHandler Http2ConnectionPrefaceAndSettingsFrameWrittenEvent propagation

Motivation:
Http2ConnectionHandler uses ctx.fireUserEvent to propagate the Http2ConnectionPrefaceAndSettingsFrameWrittenEvent through the pipeline. This will propagate the event to the next inbound handler in the pipeline. If the user extends Http2ConnectionHandler the Http2ConnectionPrefaceAndSettingsFrameWrittenEvent may be missed and initialization dependent upon this event will not be run.

Modifications:
- Http2ConnectionHandler should use userEventTriggered instead of ctx.fireUserEvent

Result:
Classes that extend Http2ConnectionHandler will see the Http2ConnectionPrefaceAndSettingsFrameWrittenEvent user event."
ec368fea47291a823c2135711590713af230b9f3,"AdaptiveRecvByteBufAllocator should ramp up while reading

Motivation:
AdaptiveRecvByteBufAllocator currently adjusts the ByteBuf allocation size guess when readComplete is called. However the default configuration for number of reads before readComplete is called is 16. This means that there will be 16 reads done before any adjustment is done. If there is a large amount of data pending AdaptiveRecvByteBufAllocator will be slow to adjust the allocation size guess. In addition to being slow the result of only updating the guess in readComplete means that we must go back to the selector and wait to be woken up again when data is ready to read. Going back to the selector is an expensive operations and can add significant latency if there is large amount of data pending to read.

Modifications:
- AdaptiveRecvByteBufAllocator should check on each read if a step up is necessary. The step down process is left unchanged and can be more gradual at the cost of potentially over allocating.

Result:
AdaptiveRecvByteBufAllocator increases the guess size during the read loop to reduce latency when large amounts of data is being read."
d7c977dd715396e2d25773da1c96f816f3338a08,"SslHandler aggregation prefer copy over CompositeByteBuf

Motivation:
SslHandler will do aggregation of writes by default in an attempt to improve goodput and reduce the number of discrete buffers which must be accumulated. However if aggregation is not possible then a CompositeByteBuf is used to accumulate multiple buffers. Using a CompositeByteBuf doesn't provide any of the benefits of better goodput and in the case of small + large writes (e.g. http/2 frame header + data) this can reduce the amount of data that can be passed to writev by about half. This has the impact of increasing latency as well as reducing goodput.

Modifications:
- SslHandler should prefer copying instead of using a CompositeByteBuf

Result:
Better goodput (and potentially improved latency) at the cost of copy operations."
95b02e49ac914972ac27c35bcb3272f8ca3956a4,"DefaultMaxMessagesRecvByteBufAllocator support an option to ignore maybeMoreData

Motivation:
If large amounts of data is being transferred it is difficult to correlate the amount we attempt to read vs the maximum amount that the OS will actually buffer and deliver to the application. For exmaple some OSes may dynicamlly update the SO_RCVBUF size or otherwise dynamically adjust how much data is delieved to the application. In these circumstances it can reduce latency to just call read() on the socket another time to see if there is really any data remaining instead of giving up the maxMessagesPerRead quantum and going back to the selector to read later.

Motifications:
- Add DefaultMaxMessagesRecvByteBufAllocator#respectMaybeMoreData which provides a way to ignore the maybeMoreData function which may not account for the current data pending, and if it does this maybe racy.

Result:
Option to always use the full maxMessagesPerRead quantum before going back to the selector."
251bb1a73961f785ad12dbb3ae92830eca70b8cd,"Not use safeRelease(...) but release(...) to release non-readable holders to ensure we not mask errors.

Motivation:

AbstractChannel attempts to ""filter"" messages which are written [1]. A goal of this process is to copy from heap to direct if necessary. However implementations of this method [2][3] may translate a buffer with 0 readable bytes to EMPTY_BUFFER. This may mask a user error where an empty buffer is written but already released.

Modifications:

Replace safeRelease(...) with release(...) to ensure we propagate reference count issues.

Result:

Fixes [#7383]"
2eddc921ce94de5782653ecdc322570182746f92,"Update to conscrypt 1.0.0.CR13

Motivation:

New version on conscrypt was released.

Modifications:

Update to latest version

Result:

Up to date conscrypt is used."
ca1e1fcddf4c9d6b76b596f826ada899649b052d,"Only try to match SSLException message when debug logging is enabled.

Motivation:

We only want to log for the particular case when debug logging is enabled so we not need to try to match the message if this is not the case.

Modifications:

Guard with logger.isDebugEnabled()

Result:

Less overhead when debug logging is not enabled."
aabb73a9d2caaafd0d989945ea176609803a17d9,"Add SniCompletionEvent which allows to easily retrieve the hostname that was used to select the SslContext.

Motivation:

At the moment its a bit ""hacky"" to retrieve the hostname that was used during SNI as you need to hold a reference to SniHandler and then call hostname() once the selection is done. It would be better to fire an event to let the user know we did the selection.

Modifications:

Add a SniCompletionEvent that can be used to get the hostname that was used to do the selection and was included in the SNI extension.

Result:

Easier usage of SNI."
3f101caa4c99df54e3327f1895f8de146185538d,"Not call java methods from within JNI init code to prevent class loading deadlocks.

Motivation:

We used NetUtil.isIpV4StackPreferred() when loading JNI code which tries to load NetworkInterface in its static initializer. Unfortunally a lock on the NetworkInterface class init may be already hold somewhere else which may cause a loader deadlock.

Modifications:

Add a new Socket.initialize() method that will be called when init the library and pass everything needed to the JNI level so we not need to call back to java.

Result:

Fixes [#7458]."
f2b1d9516498b403d88e0b190e5266b8c5d33cbc,"Fix javadocs for ObjectUtil methods.

Motivation:

The javadocs for a few methds in ObjectUtil are not correct.

Modifications:

Add ""not"" where it was missing.

Result:

Fixes [#7455]."
b215794de31f28355e4469fcc04782f55076c80c,"Enforce writeSpinCount to limit resource consumption per socket (#7478)

Motivation:
The writeSpinCount currently loops over the same buffer, gathering
write, file write, or other write operation multiple times but will
continue writing until there is nothing left or the OS doesn't accept
any data for that specific write. However if the OS keeps accepting
writes there is no way to limit how much time we spend on a specific
socket. This can lead to unfair consumption of resources dedicated to a
single socket.
We currently don't limit the amount of bytes we attempt to write per
gathering write. If there are many more bytes pending relative to the
SO_SNDBUF size we will end up building iov arrays with more elements
than can be written, which results in extra iteration, conditionals,
and book keeping.

Modifications:
- writeSpinCount should limit the number of system calls we make to
write data, instead of applying to individual write operations
- IovArray should support a maximum number of bytes
- IovArray should support composite buffers of greater than size 1024
- We should auto-scale the amount of data that we attempt to write per
gathering write operation relative to SO_SNDBUF and how much data is
successfully written
- The non-unsafe path should also support a maximum number of bytes,
and respect the IOV_MAX limit

Result:
Write resource consumption can be bounded and gathering writes have
a limit relative to the amount of data which can actually be accepted
by the socket."
0cac1a6c8c221070b03ee5099d2c87f53ded81c8,"H2C upgrades should be ineligible for flow control (#7400)

H2C upgrades should be ineligible for flow control

Motivation:

When the h2c upgrade request is too big, the Http2FrameCodec complains
it's too big for flow control reasons, even though it's ineligible for
flow control.

Modifications:

Specially mark upgrade streams and make Http2FrameCodec know not to try
to flow control on those streams.

Result:

Servers won't barf when they receive an upgrade request with a fat
payload.

[Fixes #7280]"
805ac002e679aff86d86b7001a7b958c98670704,"FIX: force a read operation for peer instead of self (#7454)

* FIX: force a read operation for peer instead of self

Motivation:
When A is in `writeInProgress` and call self close, A should
`finishPeerRead` for B(A' peer).

Modifications:
Call `finishPeerRead` with peer in `LocalChannel#doClose`

Result:
Clear confuse of code logic

* FIX: preserves order of close after write in same event loop

Motivation:
If client and server(client's peer channel) are in same event loop, client writes data to
server in `ChannelActive`. Server receives the data and write it
back. The client's read can't be triggered becasue client's
`ChannelActive` is not finished at this point and its `readInProgress`
is false. Then server closes itself, it will also close the client's
channel. And client has no chance to receive the data.

Modifications:
1. Add a test case to demonstrate the problem
2. When `doClose` peer, we always call
`peer.eventLoop().execute()` and `registerInProgress` is not needed.
3. Remove test case
`testClosePeerInWritePromiseCompleteSameEventLoopPreservesOrder`. This
test case can't pass becasue of this commit. IMHO, I think it is OK,
becasue it is reasonable that the client flushes the data to socket,
then server close the channel without received the data.
4. For mismatch test in SniClientTest, the client should receive server's alert before closed(caused by server's close)

Result:
The problem is gone."
1453f8d18b635bdd2d0ef9df9334c88c993a7092,"Ensure we not try to call `select` when the `AbstractSniHandler` was already removed from the pipeline.

Motivation:

We tried to call `select` after we closed the channel (and so removed all the handlers from the pipeline) when we detected a non SSL record. This would cause an exception like this:

```
Caused by: java.util.NoSuchElementException: io.netty.handler.ssl.SniHandler
	at io.netty.channel.DefaultChannelPipeline.getContextOrDie(DefaultChannelPipeline.java:1098)
	at io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:506)
	at io.netty.handler.ssl.SniHandler.replaceHandler(SniHandler.java:133)
	at io.netty.handler.ssl.SniHandler.onLookupComplete(SniHandler.java:113)
	at io.netty.handler.ssl.AbstractSniHandler.select(AbstractSniHandler.java:225)
	at io.netty.handler.ssl.AbstractSniHandler.decode(AbstractSniHandler.java:218)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:428)
	... 40 more
```

Modifications:

- Ensure we rethrow the NotSslRecordException when detecting it (and closing the channel). This will also ensure we not call `select(...)`
- Not catch `Throwable` but only `Exception`
- Add test case.

Result:

Correctly handle the case of an non SSL record."
96732f47d895c99f8bfe272077cf850d4a7f2b83,[maven-release-plugin] prepare release netty-4.1.18.Final
b2bc6407ab6ff6e9be65ada56e4a4058e2c6a293,[maven-release-plugin] prepare for next development iteration
63bae0956aeb42e875ad303a2281989ad92acbf2,"Ensure ThreadDeathWatcher and GlobalEventExecutor will not cause classloader leaks.

Motivation:

ThreadDeathWatcher and GlobalEventExecutor may create and start a new thread from various other threads and so inherit the classloader. We need to ensure we not inherit to allow recycling the classloader.

Modifications:

Use Thread.setContextClassLoader(null) to ensure we not hold a strong reference to the classloader and so not leak it.

Result:

Fixes [#7290]."
1988cd041d3d5eaa5f52e58d3d3f773b9ef17fe7,"Reduce Object allocations in CompositeByteBuf.

Motivation:

We used subList in CompositeByteBuf to remove ranges of elements from the internal storage. Beside this we also used an foreach loop in a few cases which will crate an Iterator.

Modifications:

- Use our own sub-class of ArrayList which exposes removeRange(...). This allows to remove a range of elements without an extra allocation.
- Use an old style for loop to iterate over the elements to reduce object allocations.

Result:

Less allocations."
0276b6e0f641687b145c810ab143be56143fc5ac,"Ensure Thread can be collected in a timely manner if Recycler.Stack holds a reference to it.

Motivation:

In our Recycler implementation we store a reference to the current Thread in the Stack that is stored in a FastThreadLocal. The Stack itself is referenced in the DefaultHandle itself. A problem can arise if a user stores a Reference to an Object that holds a reference to the DefaultHandle somewhere and either not remove the reference at all or remove it very late. In this case the Thread itself can not be collected as its still referenced in the Stack that is referenced by the DefaultHandle.

Modifications:

- Use a WeakReference to store the reference to the Thread in the Stack
- Add a test case

Result:

Ensure a Thread can be collected in a timely manner in all cases even if it used the Recycler."
8b3e98163dd580518e7507a0cdfdaa24950ecc71,"Added Automatic-Module-Name for native modules to support Java 9 modules

Motivation:

Latest netty missing predefined Automatic-Module-Name module name entry in MANIFEST.MF for native transports.

Modification:

Added Automatic-Module-Name entry to manifest during native transports build.

Fixes [#7501]"
5ad35a157cac27004b492703708ecebc4442a55a,"SingleThreadEventExecutor ignores startThread failures

Motivation:

When doStartThread throws an exception, e.g. due to the actual executor being depleted of threads and throwing in its rejected execution handler, the STEE ends up in started state anyway. If we try to execute another task in this executor, it will be queued but the thread won't be started anymore and the task will linger forever.

Modifications:

- Ensure we not update the internal state if the startThread() method throws.
- Add testcase

Result:

Fixes [#7483]"
af2f343648f4cb3deca5314174e0e579f9fec846,"FileDescriptor writev core dump

Motivation:
FileDescriptor#writev calls JNI code, and that JNI code dereferences a NULL pointer which crashes the application. This occurs when writing a single CompositeByteBuf object with more than one component.

Modifications:
- Initialize the iovec iterator properly to avoid the core dump
- Fix the array length calculation if we aren't able to fit all the ByteBuffer objects in the iovec array

Result:
No more core dump."
661bd8682913e62a25a8952362daff60fecf12bf,"Fix flacky test introduced by af2f343648f4cb3deca5314174e0e579f9fec846

Motivation:

af2f343648f4cb3deca5314174e0e579f9fec846 introduced a test-case which was flacky due of multiple problems:

- we called writeAndFlush(...) in channelRead(...) and assumed it will only be called once. This is true most of the times but it may be called multile times if the data is fragemented.
- we didnt guard against the possibility that channelRead(...) is called with an empty buffer

Modifications:

- Call writeAndFlush(...) in channelActive(...) so we are sure its only called once and close the channel once we wrote the data
- only compare the data after we received a close so we are sure there isnt anything extra received
- check for exception and if we catched one fail the test.

Result:

No flacky test anymore and easier to debug issues that accour because of a catched exception."
0786c4c8d92a6cca2e2a35521a4ee046761dad80,[maven-release-plugin] prepare release netty-4.1.19.Final
264a5daa4125fe5ae3f27d383b9955e3288850b5,[maven-release-plugin] prepare for next development iteration
79ed1c68714117ffa03aad6473504b4ed142593e,"Ability to scoop up events that reach the tail of the ChannelPipeline.

Motivation

There is currently no way to enforce the position of a handler in a ChannelPipeline and assume you wanted to write something like a custom Channel type that acts as a proxy between two other Channels.

ProxyChannel(Channel client, Channel server) {
  client calls write(msg) -> server.write(msg)
  client calls flush() -> server.flush()
  server calls fireChannelRead(msg) -> client.write(msg)
  server calls fireChannelReadComplete() -> client.flush()
}

In order to make it work reliably one needs to be able to scoop up the various events at the head and tail of the pipeline. The head side of the pipeline is covered by Unsafe and it's also relatively safe to count on the user to not use the addFirst() method to manipulate the pipeline. The tail side is always at a risk of getting broken because addLast() is the goto method to add handlers.

Modifications

Adding a few extra methods to DefaultChannelPipeline that expose some of the events that reach the pipeline's TailContext.

Result

Fixes #7484"
640a22df9efb41e3d29b79916938c1c315be2872,"Remove WeakOrderedQueue from WeakHashMap when FastThreadLocal value was removed if possible.

Motivation:

We should remove the WeakOrderedQueue from the WeakHashMap directly if possible and only depend on the semantics of the WeakHashMap if there is no other way for us to cleanup it.

Modifications:

Override onRemoval(...) to remove the WeakOrderedQueue if possible.

Result:

Less overhead and quicker collection of WeakOrderedQueue for some cases."
454868654427433cd496c9f172615abb1b2b4bd5,"Add h2spec test suite module to check if netty http2 implementation conforms with the specification

Motivation:

H2Spec is a conformance testing tool for HTTP/2 implementation.
To help us fix failing tests and avoid future regression we
should run h2spec as part of the build

Modifications:

- Add testsuite-http2 module to the project

Result:

- Run h2spec as part of the build
- 22 tests are currently ignored, we should remove the ignore as we fix them"
5f0342ebe065f692038a902216dd9f5b02e0a2ef,"Add RedisEncoderBenchmark

Motivation:
Add a benchmark to measure RedisEncoder's performance

Modifications:
- Add RedisEncoderBenchmark

Result:
JMH benchmark exists to measure RedisEncoder's performance."
55ef09f191f4dc89e9ea9a65b061b90e8b10bb2b,"Add HttpObjectEncoderBenchmark

Motivation:
Benchmark to measure HttpObjectEncoder performance.

Modifications:
- Create new benchmark HttpObjectEncoderBenchmark

Result:
JMH Microbenchmark for HttpObjectEncoder."
f9888acfdd38b6184e7728ed61adbf37be8be37d,"added overloaded method to the DefaultChannelPipeline in order to avoid unnecessary allocation

Motivation :

Avoid unnecessary array allocation when using the function with varargs in the DefaultChannelPipeline class.

Modifications :

Added addLast and addFirst overloaded methods with 1 handler instead of varargs.

Result :

No array allocation when using simple construction like pipeline.addLast(new Handler());"
94ab0dc4425b05e8691c0954f70c1859d0b7294c,"codec-http2: Better keep track of nameLength in HpackDecoder.decode

Motivation:

http/2 counts header sizes somewhat inconsistently.  Sometimes, headers
which are substantively less than the header list size will be measured
as longer than the header list size.

Modifications:

Keep better track of the nameLength of a given name, so that we don't
accidentally end up reusing a nameLength.

Result:

More consistent measurement of header list size.

Fixes #7511."
1cf268724430131ce5c7f4c2068498d429125ac0,"Fixed JMH ByteBuf benchmark to avoid dead code elimination

Motivation:

The JMH doc suggests to use BlackHoles to avoid dead code elimination hence would be better to follow this best practice.

Modifications:

Each benchmark method is returning the ByteBuf/ByteBuffer to avoid the JVM to perform any dead code elimination.

Result:

The results are more reliable and comparable to the others provided by other ByteBuf benchmarks (eg HeapByteBufBenchmark)"
0c5014b1057f9549c3fb346890162c66bc3631ea,"Add a hint of ownership transfer when calling EmbeddedChannel.read*() methods.

Motivation:

As shown in issues it is sometimes hard to understand why a leak was reported when the user just calles EmbeddedChannel.readInbound() / EmbeddedChannel.readOutbound() and drop the message on the floor.

Modifications:

Add a hint before handover the message to the user and transfer the ownership.

Result:

Easier debugging of leaks caused by EmbeddedChannel.read*()."
144716f668efaa5bf4bb4175ec5513bd4f0f60b7,"HTTP/2 support pending data larger than Integer.MAX_VALUE

Motivation:
Currently the remote flow controller limits the maximum amount of pending data to Integer.MAX_VALUE. The overflow handling is also not very graceful in that it may lead to infinite loops, or otherwise no progress being made.

Modifications:
- StreamByteDistributor and RemoteFlowController should support pending bytes of type long.

Result:
Fixes https://github.com/netty/netty/issues/4283"
942b993f2b9781ff2126ff92a6be5b975dfc72ed,"Only enable validation of headers if original headers were validating as well.

Motiviation:

In our replace(...) methods we always used validation for the newly created headers while the original headers may not use validation at all.

Modifications:

- Only use validation if the original headers used validation as well.
- Ensure we create a copy of the headers in replace(...).

Result:

Fixes [#5226]"
e329ca1cf3cecd41c9cf1a5a7be369a65f002ab5,"Introduce ObjectCleaner and use it in FastThreadLocal to ensure FastThreadLocal.onRemoval(...) is called

Motivation:

There is no guarantee that FastThreadLocal.onRemoval(...) is called if the FastThreadLocal is used by ""non"" FastThreacLocalThreads. This can lead to all sort of problems, like for example memory leaks as direct memory is not correctly cleaned up etc.

Beside this we use ThreadDeathWatcher to check if we need to release buffers back to the pool when thread local caches are collected. In the past ThreadDeathWatcher was used which will need to ""wakeup"" every second to check if the registered Threads are still alive. If we can ensure FastThreadLocal.onRemoval(...) is called we do not need this anymore.

Modifications:

- Introduce ObjectCleaner and use it to ensure FastThreadLocal.onRemoval(...) is always called when a Thread is collected.
- Deprecate ThreadDeathWatcher
- Add unit tests.

Result:

Consistent way of cleanup FastThreadLocals when a Thread is collected."
c9668ce40f80f73763165a8bfe70969de830204c,"The constants calculation in compile-time

Motivation:
Allow pre-computing calculation of the constants for compiler where it could be.
Similar fix in OpenJDK: [1].

Modifications:
- Use parentheses.
- Simplify static initialization of `BYTE2HEX_*` arrays in `StringUtil`.

Result:
Less bytecode, possible faster calculations at runtime.

[1] https://bugs.openjdk.java.net/browse/JDK-4477961"
6b033c51a50e96714bf6939bd8a7706ee173d8e6,"Add 32 bytes overhead per header entry when calculating headers length in HPackDecoder

Motivation:

According to the HTTP/2 Spec:

SETTINGS_MAX_HEADER_LIST_SIZE (0x6): This advisory setting informs a
peer of the maximum size of header list that the sender is
prepared to accept, in octets. The value is based on the
uncompressed size of header fields, including the length of the
name and value in octets plus an overhead of 32 octets for each
header field.

We were accounting for the 32 bytes when encoding in HpackEncoder,
but not when decoding in HPackDecoder.

Modifications:

- Add 32 bytes to the header list length for each entry when decoding
with HPackDecoder.

Result:

- We account for the 32 bytes overhead by header entry in HPackDecoder"
e004b4a354402707953e22a47912629cbd0538e4,"Ensure ObjectCleaner will also be used when FastThreadLocal.set is used.

Motivation:

e329ca1 introduced the user of ObjectCleaner in FastThreadLocal but we missed the case to register our cleaner task if FastThreadLocal.set was called only.

Modifications:

- Use ObjectCleaner also when FastThreadLocal.set is used.
- Add test case.

Result:

ObjectCleaner is always used."
336cee9b1f431b5b3d5539984a391409ff2d9917,"HpackDecoder#addHeader has an unused parameter

Motivation:
HpackDecoder#addHeader takes in the streamId as a parameter but no longer uses it.

Modifications:
- Remove the streamId parameter from HpackDecoder#addHeader

Result:
Less unused parameters in HpackDecoder."
ea73e47a8bbe61242425c1d91a925bb495737f59,"FastThreadLocal#set remove duplicate isIndexedVariableSet call

Motivation:
FastThreadLocal#set calls isIndexedVariableSet to determine if we need to register with the cleaner, but the set(InternalThreadLocalMap, V) method will also internally do this check so we can share code and only do the check a single time.

Modifications:
- extract code from set(InternalThreadLocalMap, V) so it can be called externally to determine if a new item was created

Result:
Less code duplication in FastThreadLocal#set."
e17f438b104f7488fc18ff6c180f1eb5f58744a0,"Test output should include GC details

Motivation:
Our tests are often asynchronous and have timeouts to avoid hanging indefinitely. However sometimes the timeouts maybe set to low for the CI servers. It would be helpful to confirm if the application was busy with GC and if that was a contributing factor to the test timing out.

Modifications:
- Unit tests should run with -XX:+PrintGCDetails by default

Result:
More visibility into GC behavior in unit tests."
adf2596c36946fc1ec1c363375e927dd72b51c1f,"Http2FrameCodecTest increase timeout

Motivation:
Http2FrameCodecTest#newOutboundStream has a timeout of 1 second and has been observed to timeout on CI servers.

Modifications:
- Increase the timeout to 5 seconds

Result:
Less false positive test failures on CI servers."
b6c42f6547e6621dd924707167db83b15652d7f6,"Use 198.51.100.254 as BAD_HOST for tests.

Motivation:

At the moment we use netty.io as BAD_HOST with an port that we know is timing out. This may change in the future so we should better use 198.51.100.254 which is specified as ""for documentation only"".

Modifications:

Replace netty.io with 198.51.100.254 in tests that depend on BAD_HOST.

Result:

More future proof code."
2b4f6677917cbe4121c2b748ba7002f8ba4bb8b5,"Fix DefaultHttpDataFactory cleanup bug

Motivation:

DefaultHttpDataFactory uses HttpRequest as map keys.

Because of the implementation of ""hashCode"""" and ""equals"" in DefaultHttpRequest,
if we use normal maps, HttpDatas of different requests may end up in the same map entry,
causing cleanup bug.

Consider this example:
- Suppose that request1 is equal to request2, causing their HttpDatas to be stored in one single map entry.
- request1 is cleaned up first, while request2 is still being decoded.
- Consequently request2's HttpDatas are suddenly gone, causing NPE, or worse loss of data.

This bug can be reproduced by starting the HttpUploadServer example,
then run this command:
ab -T 'application/x-www-form-urlencoded' -n 100 -c 5 -p post.txt http://localhost:8080/form

post.txt file content:
a=1&b=2

There will be errors like this:
java.lang.NullPointerException
        at io.netty.handler.codec.http.multipart.MemoryAttribute.getValue(MemoryAttribute.java:64)
        at io.netty.handler.codec.http.multipart.MixedAttribute.getValue(MixedAttribute.java:243)
        at io.netty.example.http.upload.HttpUploadServerHandler.writeHttpData(HttpUploadServerHandler.java:271)
        at io.netty.example.http.upload.HttpUploadServerHandler.readHttpDataChunkByChunk(HttpUploadServerHandler.java:230)
        at io.netty.example.http.upload.HttpUploadServerHandler.channelRead0(HttpUploadServerHandler.java:193)
        at io.netty.example.http.upload.HttpUploadServerHandler.channelRead0(HttpUploadServerHandler.java:66)
        at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
        at io.netty.handler.codec.MessageToMessageCodec.channelRead(MessageToMessageCodec.java:111)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310)
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:284)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1412)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:943)
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:141)
        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:645)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:580)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:497)
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:459)
        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)

Modifications:

Keep identity of requests by using IdentityHashMap

Result:

DefaultHttpDataFactory is fixed.

The ConcurrentHashMap is replaced with a synchronized map, but I think the performance won't be affected much in real web apps."
e24e06bfcb8114270d46572cf96af49be76237b1,"OpenSslEngine: Remove renegotiation support

Motivation:

SSL.setState() has gone from openssl 1.1. Calling it is, and probably
always has been, incorrect. Doing renogitation in this manner is
potentially insecure. There have been at least two insecure
renegotiation vulnerabilities in users of the OpenSSL library.

Renegotiation is not necessary for correct operation of the TLS protocol.

BoringSSL has already eliminated this functionality, and the tests
(now deleted) were not running on BoringSSL.

Modifications:

If the connection setup has completed, always return that
negotiation is not supported. Previously this was done only if we were
the client.

Remove the tests for this functionality.

Fixes #6320."
83bca87257301ff45208e0b3cfde56b141e004bc,"Update domains in DnsNameResolverTest

Motivation:
DnsNameResolverTest has not been updated in a while.

Modifications:
- Update the DOMAINS definition in DnsNameResolverTest

Result:
More current domain names."
ab9f0a0fda23e9c254cca9b18f5c19090b6c63ef,"Remove direct usage of JKS and SunX509

Motivation:

When using netty on android or with for example a IBM JVM it may not be able to build a SslContext as we hardcoded the use of JKS and SunX509 (which both may not be present).

Modifications:

- Use the default algorithm / type which can be override via a System property
- Remove System property check as its redundant with KeyManagerFactory.getDefaultAlgorithm()

Result:

More portable code. Fixes [#7546]."
33ddb83dc1e754039540906db50d76f06fa6819b,"IovArray#add return value resulted in more ByteBufs being added during iteration

Motivation:
IovArray implements MessageProcessor, and the processMessage method will continue to be called during iteration until it returns true. A recent commit b215794de31f28355e4469fcc04782f55076c80c changed the return value to only return true if any component of a CompositeByteBuf was added as a result of the method call. However this results in the iteration continuing, and potentially subsequent smaller buffers maybe added, which will result in out of order writes and generally corrupts data.

Modifications:
- IovArray#add should return false so that the MessageProcessor#processMessage will stop iterating.

Result:
Native transports which use IovArray will not corrupt data during gathering writes of CompositeByteBuf objects."
d6e600548bd1e6e1db1d6bf8b35bc02e8b0a808d,"HTTP/2 Remove Http2FrameStream#CONNECTION_STREAM

Motivation:
Http2FrameStream#CONNECTION_STREAM is required to identify the
connection stream. However this leads to inconsistent usage from a user
perspective. When a user creates a Http2Frame for a non-connection
stream, the Http2MultiplexCodec automatically sets the stream, and the
user is never exposed to the Http2FrameStream object. However when the
user writes a Http2Frame for a connection stream they are required to
set the Http2FrameStream object. We can remove the Http2FrameStream#CONNECTION_STREAM
and keep the Http2FrameStream object internal, and therefore consistent
between the connection and non-connection use cases.

Modifications:
- Remove Http2FrameStream#CONNECTION_STREAM
- Update Http2FrameCodec to handle Http2Frame#stream() which returns
null

Result:
More consistent usage on http2 parent channel and http2 child channel."
062d9269120bac0064408025b78788613d41d36d,"Remove remote initiated renegotiation support

Motivation:
We recently removed support for renegotiation, but there are still some hooks to attempt to allow remote initiated renegotiation to succeed. The remote initated renegotiation can be even more problematic from a security stand point and should also be removed.

Modifications:
- Remove state related to remote iniated renegotiation from OpenSslEngine

Result:
More renegotiation code removed from the OpenSslEngine code path."
819b870b8a08414b534ac755c55393a70d97e14c,"Correctly take position into account when wrap a ByteBuffer via ReadOnlyUnsafeDirectByteBuf

Motivation:

We did not correctly take the position into account when wrapping a ByteBuffer via ReadOnlyUnsafeDirectByteBuf as we obtained the memory address from the original ByteBuffer and not the slice we take.

Modifications:

- Correctly use the slice to obtain memory address.
- Add test case.

Result:

Fixes [#7565]."
f3c6da32d79b1053ca4667191fa7a660a457b44e,"Fix concurrency issue in DnsNameResolver when DefaultDnsCache is used.

Motivation:

We need to ensure we only call List.* methods in the synchronized block as the returned List may not be thread-safe.

Modifications:

Do not call isEmpty() outside of the synchronized block.

Result:

Fixes [#7583]"
6ff48dcbe311d2736249b02b31a8745e719d1304,"Fixes #7566 by handling concatenated GZIP streams.

Motivation:
According to RFC 1952, concatenation of valid gzip streams is also a valid gzip stream. JdkZlibDecoder only processed the first and discarded the rest.

Modifications:
- Introduced a constructor argument decompressConcatenated that if true, JdkZlibDecoder would continue to process the stream.

Result:
- If 'decompressConcatenated = true', concatenated streams would be processed in
compliance to RFC 1952.
- If 'decompressConcatenated = false' (default), existing behavior would remain."
e6c9ac968d3923080822dc36fe14aa10e38af15b,"Cleanup: replaced deprecated ctx.attr() and ctx.hasAttr() methods usage with ch.attr() and ch.hasAttr().

Motivation:

Will allow easy removal of deprecated methods in future.

Modification:

Replaced ctx.attr(), ctx.hasAttr() with ctx.channel().attr(), ctx.channel().hasAttr().

Result:

No deprecated ctx.attr(), ctx.hasAttr() methods usage."
1740f366eb728ea5a0a63d18e9042161673414cd,"Fail fast when DefaultChannelPromise is constructed with null as Channel.

Motivation:

We should fail fast when DefaultChannelPromise is constructed with null as Channel as otherwise it will fail with a NPE once we call setSuccess / setFailure.

Modifications:

Add null check and test.

Result:

Fail fast."
61dba95091d96ef9cab0e95f1a9277a8d19d377f,"Fix h2spec test 4.3 about invalid header block

Motivation:

HPackDecoder works on entire header block, we shouldn't encounter
incomplete header fields. If we do we should treat it as
a decoding error and according to the specification:

A decoding error in a header block MUST be treated as
a connection error (Section 5.4.1) of type COMPRESSION_ERROR.

Modifications:

* Check final state in HpackDecoder once we've decoded all the data.

Result:

* Throw a connection error if we receive incomplete header fields
* H2spec 4.3 tests all passes"
322a062185edb7fd10ec9d820d470d9beb71bcea,"HpackDecoderTest cleanup

Motivation:
public ExpectedException fields should be final.
setUp method signature has a throws, but it isn't necessary"
f72f162e1698226f7e8b1c96736e93e756b859dd,"ObjectCleaner may indefinitely block on ReferenceQueue#poll

Motivation:
ObjectCleaner polls a ReferenceQueue which will block indefinitely. However it is possible there is a race condition between the live set of objects being empty due to the WeakReference being cleaned/cleared and polling the queue. If this situation occurs the cleanup thread may never unblock if no more objects are added to the live set, and may result in an application's failure to gracefully close.

Modifications:
- ReferenceQueue.remove should use a timeout to compensate for the race condition, and avoid dead lock

Result:
No more dead lock in ObjectCleaner when polling the ReferenceQueue."
031bad60dcb70ea52697b09a2c17c62894b92c2b,"ObjectCleaner should continue cleaning despite exceptions

Motivation:
ObjectCleaner inovkes a Runnable which may execute user code (FastThreadLocal#onRemoval) and therefore exceptions maybe thrown. If an exception is thrown the cleanup thread will exit prematurely and we may never finish cleaning up which will result in leaks.

Modifications:
- ObjectCleaner should suppress exceptions and continue cleaning

Result:
ObjectCleaner will reliably clean despite exceptions being thrown."
3ae57cf3028e4cfddca141fff723d3189b79fa4c,"ByteBuf.toString(Charset) is not thread-safe

Motivation:

Calling ByteBuf.toString(Charset) on the same buffer from multiple threads at the same time produces unexpected results, such as various exceptions and/or corrupted output. This is because ByteBufUtil.decodeString(...) is taking the source ByteBuffer for CharsetDecoder.decode() from ByteBuf.internalNioBuffer(int, int), which is not thread-safe.

Modification:

Call ByteBuf.nioBuffer() instead of ByteBuf.internalNioBuffer() to get the source buffer to pass to CharsetDecoder.decode().

Result:

Fixes the possible race condition."
96c7132dee669998b4fda60bb8ec8e94cb33fcb9,[maven-release-plugin] prepare release netty-4.1.20.Final
ea58dc7ac76b1f741a47274a0d92c91c7e8ce822,[maven-release-plugin] prepare for next development iteration
336bea9dc541413be4cd961417e2be456bdcac11,"Fix ByteBuf.nioBuffer(...) and nioBuffers(...) docs to reflect reality.

Motivation:

Depending on the implementation of ByteBuf nioBuffer(...) and nioBuffers(...) may either share the content or return a ByteBuffer that contains a copy of the content.

Modifications:

Fix javadocs.

Result:

Correct docs."
949c5153336441c5e06ac822821a59445daed209,"Provide a Docker image for reproducible builds

Motivation:

It would be good to provide a docker image for people that want to build netty on linux.

Modifications:

Add a docker file

Result:

People can more easily build netty. Fixes [#7585]."
46dac128f7472f264e3cb53e4d1fa40f6b043034,"Http2FrameCodec WindowUpdate bug

Motivation:
Http2FrameCodec increases the initialWindowSize when the user attempts to increase the connection flow control window. The initialWindowSize should only be touched as a result of a SETTINGS frame, and otherwise may result in flow control getting out of sync with our peer.

Modifications:
- Http2FrameCodec shouldn't update the initialWindowSize when a WindowUpdateFrame is written on the connection channel

Result:
More correct WindowUpdate processing."
e305488c5ab9eb29abfb65ca103c55a4680f4c72,"Fix race-condition when using DnsCache in DnsNameResolver

Motivation:

The usage of DnsCache in DnsNameResolver was racy in general. First of the isEmpty() was not called in a synchronized block while we depended on synchronized. The other problem was that this whole synchronization only worked if the DefaultDnsCache was used and the returned List was not wrapped by the user.

Modifications:

- Rewrite DefaultDnsCache to not depend on synchronization on the returned List by using a CoW approach.

Result:

Fixes [#7583] and other races."
4c1e0f596ad25bf891570ea67c5322a35938bfa5,"Use FastThreadLocal for CodecOutputList

Motivation:

We used Recycler for the CodecOutputList which is not optimized for the use-case of access only from the same Thread all the time.

Modifications:

- Use FastThreadLocal for CodecOutputList
- Add benchmark

Result:

Less overhead in our codecs."
27ff15319c2e566c44e333b9bd59cf210c130c2f,"Reduce memory allocations in StompSubframeDecoder.readHeaders

Motivation:
When decoding stomp frames a lot of unnecessary character arrays are created when parsing headers.
For every header, an array is created to read the line into and then more when splitting the line at the colon.

Modifications:
Parse key and value of a header while reading the line instead of afterwards.
Reuse a single AppendableCharSequence.
Reduce initial size of AppendableCharSequence when reading the command as it is expected to be short.

Result:
Allocations when parsing stomp frames have dropped significantly."
2d815fa75210dfeb578f380be6b71cdddf39d933,"DefaultChannelPipeline will not invoke handler if events are fired from handlerAdded

Motiviation:
DefaultChannelPipeline and AbstractChannelHandlerContext maintain state
which indicates if a ChannelHandler should be invoked or not. However
the state is updated to allow the handler to be invoked only after the
handlerAdded method completes. If the handlerAdded method generates
events which may result in other methods being invoked on that handler
they will be missed.

Modifications:
- DefaultChannelPipeline should set the state before calling
handlerAdded

Result:
DefaultChannelPipeline will allow events to be processed during the
handlerAdded process."
b769ec09346e227b9e33d581f26e2cb0b22911a7,"Reduce overhead of cancel flowcontrolled writes.

Motivation:

When we cancel the flowcontrolled writes we did create a new StreamException for each write that was enqueued. Creating Exceptions is very expensive due of filling the stacktrace.

Modifications:

Only create the StreamException once and reuse the same for all the flowcontrolled writes (per stream).

Result:

Less expensive to cancel flowcontrolled writes."
4921f62c8ab8205fd222439dcd1811760b05daf1,"HttpResponseStatus object allocation reduction

Motivation:
Usages of HttpResponseStatus may result in more object allocation then necessary due to not looking for cached objects and the AsciiString parsing method not being used due to CharSequence method being used instead.

Modifications:
- HttpResponseDecoder should attempt to get the HttpResponseStatus from cache instead of allocating a new object
- HttpResponseStatus#parseLine(CharSequence) should check if the type is AsciiString and redirect to the AsciiString parsing method which may not require an additional toString call
- HttpResponseStatus#parseLine(AsciiString) can be optimized and doesn't require and may not require object allocation

Result:
Less allocations when dealing with HttpResponseStatus."
c0e84070b0e89ae204c9a4e0225e6503a34cbb3f,"Set thread context classloader in a doPrivileged block

Motivation:

In a few classes, Netty starts a thread and then sets the context classloader of these threads
to prevent classloader leaks. The Thread#setContextClassLoader method is a privileged method in
that it requires permissions to be executed when there is a security manager in place. Unless
these calls are wrapped in a doPrivileged block, they will fail in an environment with a security
manager and restrictive policy in place.

Modifications:

Wrap the calls to Thread#setContextClassLoader in a AccessController#doPrivileged block.

Result:

After this change, the threads can set the context classloader without any errors in an
environment with a security manager and restrictive policy in place."
b640797de17f1afef26fbae778fad13d6b93767d,"Fix HttpPostMultipartRequestDecoder.splitMultipartHeader() String index out of range: -1 with empty header

Motivation:

A Malformed empty header value (e.g. Content-Type: \r\n) will trigger a String index out of range
while trying to parse the multi-part request, using the HttpPostMultipartRequestDecoder.

Modification:

Ensure that the substring() method is called passing the endValue >= valueStart.
In case of an empty header value, the empty header value associated with the header key will be returned.

Result:

Fixes #7620"
f0c76cacc3f6eb3a7df3fdc06059d5ddaac3c442,"Replace reflective access of Throwable#addSuppressed with version guarded access

Motivation:

In environments with a security manager, the reflective access to get the reference to
Throwable#addSuppressed can cause issues that result in Netty failing to load. The main
motivation in this pull request is to remove the use of reflection to prevent issues in
these environments.

Modifications:

ThrowableUtil no longer uses Class#getDeclaredMembers to get the Method that references
Throwable#addSuppressed and instead guards the call to Throwable#addSuppressed with a
Java version check.

Additionally, a annotation was added that suppresses the animal sniffer java16 signature
check on the given method. The benefit of the annotation is that it limits the exclusion
of Throwable to just the ThrowableUtil class and has string text indicating the reason
for suppressing the java16 signature check.

Result:

Netty no longer requires the use of Class#getDeclaredMethod for ThrowableUtil and will
work in environments restricted by a security manager without needing to grant reflection
permissions.

Fixes #7614"
8a095d0244da237f6eb76c4c24be49a1833b3988,"Http2MultiplexCodec should propagate unhandled Http2Frames down the pipeline

Motivation:

Http2MultiplexCodec swallows Http2PingFrames without releasing the payload, resulting in a memory leak.

Modification:

Send unhandled frames down the pipeline for consumption/disposal by another InboundChannelHandler.

Result:

Fixes #7607."
1df5b02fd95bf77683b20de87556f5b20cd75979,"Do not fire outbound exception throught the pipeline when using Http2FrameCodec / Http2MultiplexCodec

Motivation:

Usually when using netty exceptions which happen for outbound operations should not be fired through the pipeline but only the ChannelPromise should be failed.

Modifications:

- Change Http2LifecycleManager.onError(...) to take also an boolean that indicate if the error was caused by an outbound operation
- Channel Http2ConnectionHandler.on*Error(...) methods to also take this boolean
- Change Http2FrameCodec to only fire exceptions through the pipeline if these are not outbound operations related
- Add unit test.

Result:

More consistent error handling when using Http2FrameCodec and Http2MultiplexCodec."
f99a1985ce92ff6fb378aa1240defc1792dbd742,"Include mvn wrapper to make setup of development env easier

Motivation:
Someone intending to contribute should be able to set up their development environment quickly and easily.

Modifications:
- Added a Maven wrapper such that a local Maven installation isn't necessary.
- Added a .gitattributes such that auto line-endings are enforced.

Result:
- ./mvnw is enough to build.
- Git line-endings are enforced.
- Fixes #7578."
1879433ae6df3add2dbde00722f8fef70c32af9c,"ObjectCleanerThread must be a deamon thread to ensure the JVM can always terminate.

Motivation:

The ObjectCleanerThread must be a daemon thread as otherwise we may block the JVM from exit. By using a daemon thread we basically give the same garantees as the JVM when it comes to cleanup of resources (as the GC threads are also daemon threads and the CleanerImpl uses a deamon thread as well in Java9+).

Modifications:

Change ObjectCleanThread to be a daemon thread.

Result:

JVM shutdown will always be able to complete. Fixed [#7617]."
4afabd3f3c400109b82951e8bec95753103ea915,"Fix StompFrame.copy() does not copy headers

Motivation:
Incorrect behavior for StompFrame.copy() method.

Modification:
Added copying of frame headers

Result:
When you call the StompFrame.copy() method, the headers are also copied.

Fixes [#7561]."
36304e1f050c212a888f8179bef6a3c17c755e79,"Reduce object allocation by using same ChannelFutureListener instance.

Motivation:

When VoidChannelPromise.unvoid() was called we created a new ChannelFutureListener everytime. This is not needed as its stateless.

Modifications:

Reuse the ChannelFutureListener.

Result:

Less object allocations"
bed74d8380c57302c771824548386d7f0cb79629,"Method to check if a Http2 header is present and has a given value

Motivation:

With HTTP1, it's very easy to check if a header is present and has a
given value: you can simply invoke
io.netty.handler.codec.http.HttpHeaders#contains(java.lang.CharSequence, java.lang.CharSequence, boolean)

It is not possible to do the same with HTTP2. You have to get the list
of all headers (returned as String) and then iterate over it invoking
String#equals or String#equalsIgnoreCase

Modifications:

I've added io.netty.handler.codec.http2.Http2Headers#contains and
implemented it in DefaultHttp2Headers, EmptyHttp2Headers and ReadOnlyHttp2Headers.

Result:

You can use AsciiString constants to check if a header is present in a
consice and efficient manner."
49d1db4113fb04b1d5001499d6c60fa9d3835aa4,"Http2MultiplexCodec.DefaultHttpStreamChannel.isOpen() / isActive() shoule be false when fireChannelActive() is called

Motivation:

When part of a HTTP/2 StreamChannel the Http2StreamChannel.isOpen() / isActive() should report false within a call to a ChannelInboundHandlers channelInactive() method.

Modifications:

Fullfill promise before call fireChannelInactive()

Result:

Correctly update state / promise before notify handlers. Fixes [#7638]"
e975c5f6fe351869a2da06e2ec74d1529833eb9e,"Reduce objects by directly implement interface in internal implementations of DefaultHttp2RemoteFlowController

Motivation:

We can just implement the interfaces directly and so reduce object creation in DefaultHttp2RemoteFlowController.

Modifications:

Directly implement the interfaces.

Result:

Less object creation."
9ba942e59bd8f1917be2e32336e5fe95485f8c39,"Swap header check in ReadOnlyHttp2Headers

Motivation:
Pseudo headers are checked less frequently than normal headers, so
it is more efficient to check the latter first.

Modifications:
Swap the order of the check, and fix minor formatting

Result:
Possibly more efficient header checks"
c43dc3364b7db4f4ea1de9128c7cbb76eb1379ba,"Cleanup Http2MultiplexCodec by removing out-dated TODO

Motivation:

Http2MultiplexCodec contains some TODO that is outdated.

Modifications:

Remove TODO which is outdated

Result:

Cleaner code."
b1695fe17d897c1d543fc6bf6aa25b2f30017c9a,"Ensure async failures are correctly propagated to Http2LifecycleManager.onError(...) in all cases.

Motivation:

If DefaultHttp2ConnectionEncoder process outbound operation it sometimes missed to call Http2LifecycleManager.onError(...) when the operation was executed asynchronously.

Modifications:

Make best effort to update flags but still ensure failures are propageted to Http2LifecycleManager.onError(...) in all cases.

Result:

More consistent handling of errors."
b423a3578300b1dbcd8643336420d9683a023f51,"Correctly handle multiple calls to DefaultHttp2StreamChannel.Unsafe.close(...)

Motivation:

Calling DefaultHttp2StreamChannel.Unsafe.close(...) multiple times should not fail.

Modification:

- Correctly handle multiple calls to DefaultHttp2StreamChannel.Unsafe.close(...)
- Complete closePromise and promise that is given to close(...) in the correct order.
- Add unit test

Result:

Fixes [#7628] and [#7641]"
614b9e0f25e81052ccd1357c7999d0e74a121663,"Add tests for Http2MultiplexChannel close promise completion consistency with AbstractChannel

Motivation:
The completion order of promises in Http2MultiplexChannel#close should be consistent with that of AbstractChannel. Otherwise this may result in Future listeners seeing incorrect channel state.

Modifications:
Add tests cases.

Result:
Ensure consistent behavior between Http2MultiplexChannel and AbstractChannel."
0db652277f328c5b0d10afd16e19d78b897f5d82,"DefaultHttp2Headers#contains(CharSequence, CharSequence) does not work with String

Motivation:

If you test a header value providing a String, contains() returns false.
This is due to the implementation inherited from DefaultHeaders using
the JAVA_HASHER.

JAVA_HASHER.equals returns false because a is a String and b an
AsciiString.

Modifications:

DefaultHttp2Headers overrides contains and uses CASE_SENSITIVE_HASHER.

Result:

You can test a header value with any CharSequence implementation."
7f23c34b55428224e102fadeba4bbed2187858d5,"ReadOnlyHttp2Headers.contains always ignores case for values

Motivation:

When checking if a value is present, ReadOnlyHttp2Headers always ignores
case for values.

RFC 7540 says: https://tools.ietf.org/html/rfc7540#section-8.1.2
""header field names are strings of ASCII characters that are compared in a case-insensitive fashion""

But there is no such constraint on header values

Modifications:

Updated ReadOnlyHttp2Headers.contains to compare header value in a
case-sensitive way.

Result:

ReadOnlyHttp2Headers compares header names in a case-insensitive way,
values in a case-sensitive way."
1c7125750b7f8205c263f6ec730357742b25d222,"Provide an Automatic-Module-Name for the netty-all artifact fixes #7644

Motivation:

The netty-all artifact doesn't have a Automatic-Module-Name defined in the manifest like the rest of the projects do, resulting in requires netty.all.

Modification:

Add Automatic-Module-Name

Result:

Correctly work as java9 module."
9dd5c928f3ebf4b3fd8b6cf875d7b170a3a12a48,"Add java-doc for implemented methods of io.netty.util.concurrent.Future#cancel(boolean mayInterruptIfRunning)

Motivation:

The methods implement io.netty.util.concurrent.Future#cancel(boolean mayInterruptIfRunning) which actually ignored the param mayInterruptIfRunning.We need to add comments for the `mayInterruptIfRunning` param.

Modifications:

Add comments for the `mayInterruptIfRunning` param.

Result:

People who call the `cancel` method will be more clear about the effect of `mayInterruptIfRunning` param."
6e6edb59e709f0c6ddbff8345395e15a5df85ac2,"Remove unused variable in DefaultHttp2StreamChannel

Motivation:

We should remove unused variable (was never read).

Modifications:

Remove unused variable (was never read).

Result:

Cleanup."
c795e8897b9f4ab14a318ac82d55af24116240cd,"Convert Http2Error.STREAM_CLOSED to ClosedChannelException when using child channels

Motivation:

We should convert Http2Exceptions that are produced because of STREAM_CLOSED to ClosedChannelException when hand-over to the child channel to make it more consistent with other transports.

Modifications:

- Check if STREAM_CLOSED is used and if so create a new ClosedChannelException (while preserve the original exception as cause) and use it in the child channel
- Ensure STREAM_CLOSED is used in DefaultHttp2RemoteFlowController when writes are failed because of a closed stream.
- Add testcase

Result:

More consistent and correct exception usage."
3e6b54bb59d55d4d375c2e97157d34969b7ede0b,"Fix failing h2spec tests 8.1.2.1 related to pseudo-headers validation

Motivation:

According to the spec:
All pseudo-header fields MUST appear in the header block before regular
header fields. Any request or response that contains a pseudo-header
field that appears in a header block after
a regular header field MUST be treated as malformed (Section 8.1.2.6).

Pseudo-header fields are only valid in the context in which they are defined.
Pseudo-header fields defined for requests MUST NOT appear in responses;
pseudo-header fields defined for responses MUST NOT appear in requests.
Pseudo-header fields MUST NOT appear in trailers.
Endpoints MUST treat a request or response that contains undefined or
invalid pseudo-header fields as malformed (Section 8.1.2.6).

Clients MUST NOT accept a malformed response. Note that these requirements
are intended to protect against several types of common attacks against HTTP;
they are deliberately strict because being permissive can expose
implementations to these vulnerabilities.

Modifications:

- Introduce validation in HPackDecoder

Result:

- Requests with unknown pseudo-field headers are rejected
- Requests with containing response specific pseudo-headers are rejected
- Requests where pseudo-header appear after regular header are rejected
- h2spec 8.1.2.1 pass"
bda6cb01c6b3f3304b3cb559d6694f130ad190fb,"Add the NOTICE of the forked portion of Apache Harmony

Motivation:

According to the section 4d of ASLv2:

If the Work includes a ""NOTICE"" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.

Modifications:

- Add a subset of NOTICE.txt of Apache Harmony.

Result:

- Fixes #7588"
e72c197aa3a88e97c10793ee7870775ab8807f92,"Reflective setAccessible(true) will produce scary warnings on the console when using java9+, dont do it

Motivation:

Reflective setAccessible(true) will produce scary warnings on the console when using java9+, while netty still works. That said users may feel uncomfortable with these warnings, we should not try to do it by default when using java9+.

Modifications:

Add io.netty.tryReflectionSetAccessible  system property which controls if setAccessible(...) will be used. By default it will bet set to false when using java9+.

Result:

Fixes [#7254]."
d2bd36fc4c9e200e7371c487b95b761bc9f3cd27,"ByteBufUtil.isText method should be safe to be called concurrently

Motivation:

ByteBufUtil.isText(...) may produce unexpected results if called concurrently on the same ByteBuffer.

Modifications:

- Don't use internalNioBuffer where it is not safe.
- Add unit test.

Result:

ByteBufUtil.isText is thread-safe."
b874edbf65e146cefd0f769767c587931e9f2552,"DefaultDnsCache should expire all records per hostname when one TTL is reached.

Motivation:

At the moment DefaultDnsCache will expire each record dependong on its own TTL. This may result in unexpected results for the end-user especially if the user for example uses IPV4_PREFERED but the cached AAAA records has a higher TTL then the A records and so the A record was removed. In this case we would only return the AAAA record and not even try to refresh.

Modifications:

Always expire all records for a hostname when one TTL is reached.

Result:

Fixes [#7329]"
95b9b0af5ca986e07cd48730a1d935af6beee301,"Increase timeout and decrement number of operations in AbstractByteBufTest.testToStringMultipleThreads

Motivation:

We saw some timeouts on the CI when the leak detection is enabled.

Modifications:

- Use smaller number of operations in test
- Increase timeout

Result:

CI not times out."
fe5c69bdd9d65ddd604a03bfc71081b5bc2ad40a,"DnsNameResolverContext#followCname only uses first name server

Motivation:
When following a CNAME it is possible there are multiple name servers to query against. However DnsNameResolverContext#followCname explicitly only uses the first name server address when attempting the query. This may lead to resolution failures because we didn't try all the available name servers.

Modifications:
DnsNameResolverContext#followCname should not just try the first name server, but it should try all name servers

Result:
More complete CNAME resolution."
978a46cc0a5242702f248842f6feb97b8fbe0123,"SslHandler unwrap out of order promise/event notificaiton

Motivation:
SslHandler#decode methods catch any exceptions and attempt to wrap
before shutting down the engine. The intention is to write any alerts
which the engine may have pending. However the wrap process may also
attempt to write user data, and may also complete the associated
promises. If this is the case, and a promise listener closes the channel
then SslHandler may later propagate a SslHandshakeCompletionEvent user
event through the pipeline. Since the channel has already been closed
the user may no longer be paying attention to user events.

Modifications:
- Sslhandler#decode should first fail the associated handshake promise
and propagate the SslHandshakeCompletionEvent before attempting to wrap

Result:
Fixes https://github.com/netty/netty/issues/7639"
3f3d309a28f66f463bf7c6ade14e7908019b8aae,"JdkSslContext supported cipher suites incorrect

Motivation:
JdkSslContext builds the list of supported cipher suites, but assumes that ciphers prefixed with SSL_ and TLS_ will be interchangeable. However this is not the case and only applies to a small subset of ciphers. This results in the JdkSslContext attempting to use unsupported ciphers.

Modifications:
- When building the list of ciphers in JdkSslContext we should first check if the engine supports the TLS_ prefix cipher.

Result:
Fixes https://github.com/netty/netty/issues/7673"
5257ec49eca4b9e9686a7fdbac01930e999a791a,"DnsNameResolverContext reuse of DnsServerAddressStream without duplicate

Motivation:
DnsServerAddressStream provides an iterator like interface but maybe expected to start at a specific point upon each new usage. If a DnsServerAddressStream is re-used in multiple independent iterations the order of iteration maybe incorrect. DnsNameResolverContext has a fallback DnsServerAddressStream reference if the cache doesn't contain a hit, but it is shared across multiple independent iterations. This may lead to undesirable DNS query order.

Modifications:
- DnsNameResolverContext#getNameServers should duplicate the default DnsServerAddressStream

Result:
Consistent iteration over the default DnsServerAddressStream in DnsNameResolverContext."
2923f335309812f0aad58ac9ebfdacdaf9579d3a,"Adapt to API changes in Conscrypt 1.0.0.RC11

Motivation:

In google/conscrypt#313 the Conscrypt.Engines class was removed in favor
of methods directly on Conscrypt and overloading. The Conscrypt-using
code in Netty used reflection to access the old API, that doesn't exist
anymore. And thus recent versions of Conscrypt fail to enable things
like ALPN with Netty.

Modifications:

Instead of calling Conscrypt.Engines.isConscrypt, call
Conscrypt.isConscrypt.

Result:

Conscrypt detected properly at runtime."
011841e454d0f7fcf502b59eec9c91540c8a5b76,"ReadOnlyUnsafeDirectByteBuf.memoryAddress() should not throw

Motivation:

We need the memoryAddress of a direct buffer when using our native transports. For this reason ReadOnlyUnsafeDirectByteBuf.memoryAddress() should not throw.

Modifications:

- Correctly override ReadOnlyUnsafeDirectByteBuf.memoryAddress() and hasMemoryAddress()
- Add test case

Result:

Fixes [#7672]."
fbbaf2bd7e7c63b8b06c8ee030572c5a67b4e988,"Cleanup buffer tests.

Motivation:

There is some cleanup that can be done.

Modifications:

- Use intializer list expression where possible
- Remove unused imports.

Result:

Cleaner code."
46e66b45bdad1b3876d5a8f8528875a797f7218c,"DnsNameResovlerContext#followCname sending extra queries

Motivation:
When following a CNAME response DnsNameResovlerContext may issue a A and AAAA query. However the DnsNameResolverContext would have already issued a A and AAAA query to get the CNAME response, and this may result in 2 additional A/AAAA queries per CNAME response.

Modifications:
- DnsNameResovlerContext#followCname shouldn't issue 2 queries, but instead just a single query with the same record type as the original query

Result:
No more duplicate queries as a result of CNAME responses."
7bbb4ef8a23fdfd7b34a0cc914d8e21b3afa58c2,"Motivation:

Since 3.1.1 mqtt protocol version SUBACK message can now indicate the failure in payload.

Modification:

Do not erase failure payload in for SUBACK message.

Result:

Fixes #7665"
1e70d3092d547b1d19f9bf3a4da231701d19de6a,"Avoid register multiple cleaner task for same thread's FastThreadLocal index

Motivation:

Currently if user call set/remove/set/remove many times, it will create multiple cleaner task for same index. It may cause OOM due to long live thread will have more and more task in LIVE_SET.

Modification:

Add flag to avoid recreating tasks.

Result:
Only create 1 clean task. But use more space of indexedVariables."
41ebb5fcca149e9f95372038c687b5d94517d78c,[maven-release-plugin] prepare release netty-4.1.21.Final
e71fa1e7b6c30578126fdd33ee82a2a715386ed3,[maven-release-plugin] prepare for next development iteration
40ae4fefc7e4c7cbf6f7e9d15b5e93fb497c993f,"Introduce an alternative IdentityCipherSuiteFilter that defaults to supportedCiphers, close #7655

Motivation:

Sometimes, it would be convenient to be able to easily enable all
supported cipher suites, regardless of security.

Currently, the only way it to retrieve all supported ciphers and pass
them explicitly.

Modification:

Introduce a new IdentityCipherSuiteFilter singleton that defaults to
supportedCiphers instead of defaultCiphers when ciphers are null.

Result:

Convenient way to enabled all supported cipher suites."
501662a77f8166382eefd18a8620983d27f59d4a,"Use long for http2 ping payload.

Motivation:

At the moment we use a ByteBuf as the payload for a http2 frame. This complicates life-time management a lot with no real gain and also may produce more objects then needed. We should just use a long as it is required to be 8 bytes anyway.

Modifications:

Use long for ping payloads.

Result:

Fixes [#7629]."
4ed961f4fee1884f58118896c542b4a33803d47e,"To detect Android, check the VM property rather than the classpath

Motivation:
Some java binaries include android classes on their classpath, even
if they aren't actually android.  When this is true, `Unsafe` no
longer works, disabling the Epoll functionality.  A sample case is
for binaries that use the j2objc library.

Modifications:
Check the `java.vm.name` instead of the classpath.   Numerous
Google-internal Android libraries / binaries check this property
rather than the class path.

It is believed this is safe and works with bother ART and Dalvik
VMs, safe for Robolectric, and j2objc.

Results:
Unusually built java server binaries can still use Netty Epoll."
01e46ed03aea4434299faf4c8596b537b27f767b,"System property util might return null

Motivation:

isAndroid0 should be robust.

Modifications:

yoda equals for string comparison.

Result:

No NPE."
0b0418b3688f5aa3d0ad259d34605e2a6745203c,"Bump Conscrypt version to 1.0.0

Motivation:

Conscrypt is now 1.0. No more need to depend on release candidates.

Modifications:

Just the version bump. Things seemed compatible.

Result:

Depending on first guaranteed-api-stable release of Conscrypt."
6cd5e8b0ca2df07835e53b649fbf000f15175306,"Reduce the default number of objects retained by the Recycler per thread

Motivation:
The Recycler currently retains 32k objects per thread by default. The Recycler is used in more than just one place and may result in large amounts of memory bloat if spikes of traffic are observed.

Modifications:
- Reduce the Recyclers default capacity from 32k to 4k.

Result:
- Lower default capacity of the Recycler and less memory retained."
8b273983f05b75e32353b07bad0dac2ecbbca9c7,"Load Conscrypt method via reflection only once

Motivation:

The code did reflection every method call which made the code slower and
harder to read with additional cases to consider.

Modifications:

Instead of loading the method and then throwing it away, save the Method
reference instead of the Class reference. Then also use more precise
exception handling for the method invocation.

Result:

Simpler, speedier code."
7928a6fef3a0d72c17f8f4b2a5123cc433365de8,"NioDatagramChannel invalid usage of internalNioBuffer

Motivation:
NioDatagramChannel attempts to unpack a AddressedEnvelope and unconditionally uses internalNioBuffer. However if the ByteBuf is a CompositeByteBuf with more than 1 components, the write will fail and throw an exception.

Modifications:
- NioDatagramChannel should check the nioBufferCount before attempting
to use internalNioBuffer

Result:
No more failure to write UDP packets on NIO when a CompositeByteBuf is
used."
108fbe52828d7eeea7d3411a6893cc18e9745304,"ByteBufUtil to not pool direct memory by default

Motivation:
ByteBufUtil by default will cache DirectByteBuffer objects, and the
associated direct memory (up to 64k). In combination with the Recycler which may
cache up to 32k elements per thread may lead to a large amount of direct
memory being retained per EventLoop thread. As traffic spikes come this
may be perceived as a memory leak because the memory in the Recycler
will never be reclaimed.

Modifications:
- By default we shouldn't cache DirectByteBuffer objects.

Result:
Less direct memory consumption due to caching DirectByteBuffer objects."
4f982be91e6d61c7c7a9d8d63115e0ebe65b2774,"DefaultPromise internal state dependent on Signal

Motivation:
DefaultPromise's internal state depends upon specific Signal objects. These Signal objects can be used externally which causes the DefaultPromise object API to not function correct and state to become corrupted.

Modifications:
- DefaultPromise shouldn't depend upon Signal for its internal state

Result:
Fixes https://github.com/netty/netty/issues/7707"
02b7507a622af049b7061fb2016ebb3b56b32111,"Correctly handle the case when converting of value fails and return null or default value.

Motivation:

Headers.get* methods should not throw an exception but return null or the default value if converting of the value fails.

Modifications:

- Correctly handle the case when ValueConverter throws an Exception.
- Add testcase.

Result:

Fixes [#7710]."
650406c0a3781b4c79c18f164e858900740072cd,"Http2MultiplexCodec now propagates SETTINGS and GOAWAY frames in pipeline.

Motivation:

Allow the observation of SETTINGS frame by other handlers in the pipeline. For my particular use case this allows me to observe the value of MAX_CONCURRENT_STREAMS for a ChannelPool abstraction that supports HTTP/2 multiplexing. Beside this also forward GOAWAY frames.

Modification:

Always forward SETTINGS and GOAWAY frames

Result:

Settings / Goaway can now be observed in the parent channel. Previously it was not possible (to my knowledge) to capture the settings when using Http2MultiplexCodec."
73f23c5faa967748bdda826278ac5e63f715ae09,"Fix typos in docs.

Motivation:

There are same typos in the docs.

Modifications:

Fix typos. Docs only changing.

Result:

More correct docs."
ad6af3250cfe75f848c7cd7a6cb012172002032c,"DefaultHeaders / CharSequenceValueConverter should treat boolean consistently.

Motivation:

HttpHeaders.getBoolean should return the same truth value for the same string value, regardless of the underlying type.

Modifications:

- Only treat values of true as Boolean.TRUE
- Add unit tests.

Result:

Consistent converting of values for all CharSequence implementations."
c1d0d88f0ae50ce38f00daa9bf7039c1a8bf9a80,"Implement DefaultHeaders.HeaderEntry.equals()

Motivation:

HeaderEntry.equals() inherets Object.equals() which simply check if two objects are the same.
So it returns false even when two HeaderEntry objects have the same name and value.

Modifications:

Implement HeaderEntry.equals() that follows the specification of Map.Entry.equals().
https://docs.oracle.com/javase/9/docs/api/java/util/Map.Entry.html#equals-java.lang.Object-

Result:

HeaderEntry.equals() returns true if two HeaderEntry objects have the same name and value."
756854e99a898ee3a3d943430c164c697cef6ed2,"Correctly implement CharSequenceValueConvert.convertTimeMillis

Motivation:

If you pass the output of CharSequenceValueConvert.convertToTimeMillis to convertTimeMillis it will throw a ParseException.

Modifications:

- Correctly implement CharSequenceValueConverter.convertTimeMillis
- Add unit-tests for CharSequenceValueConverter

Result:

Correctly convert timemillis."
e00f24961adbd1ed0e2189cf5ca9dc16632faa7c,"Get memory address from Unsafe for OpenSSL

Motivation:
Profiling tcnative SSL code showed a non trivial percentage (1%)
of time spent in JNI code for InstaceOf.   This turned out to be
from `Buffer.address` which makes a JNI call, which safely checks
on each call that The ByteBuffer is direct.

Modification:
Prefer using the address field of the pojo rather than looking it
up with JNI.  This is the same approach taken by the `OpenSsl`
class.

Result:
Less JNI overhead"
dc3036a20201ef031f231e12cfe30d622779a0a1,"Update jetty-alpn-agent for latest java8 release.

Motivation:

We need to update jetty-alpn-agent to support java 1.8.0_162 while running our tests / examples.

Modifications:

Update jetty-alpn-agent to 2.0.7

Result:

All tests alpn related tests work again on latest java8 version"
bc8e022601b205e6c38075999fe6ebd08d81f179,"Added exact utf8 length estimator and exposed writeUtf8 with custom space reservation on destination buffer

Motivation:

To avoid eager allocation of the destination and to perform length prefixed encoding of UTF-8 string with forward only access pattern

Modifications:

The original writeUtf8 is modified by allowing customization of the reserved bytes on the destination buffer and is introduced an exact UTF-8 length estimator.

Result:

Is now possible to perform length first encoding with UTF-8 well-formed char sequences following a forward only write access pattern on the destination buffer."
268b901844c620337bc11ae82e99163a1781b96c,"SSL connection not closed properly after handshake failure

Motivation:

When SSL handshake fails, the connection should be closed. This is not true anymore after 978a46c.

Modifications:

- Ensure we always flush and close the channel on handshake failure.
- Add testcase.

Result:

Fixes [#7724]."
15560530d442a83fe89a3fe908bf22d145c18818,"Propagate full Unsafe unavailability reason in PlatformDependent

Motivation:
It is not clear why Unsafe is unavailable when it is explicitly
disabled, or when Netty thinks it is running on Android.

Modification:
Change the ""has"" fields and methods to be causes.  A null cause
means Unsafe is present.  This catches all possible reason why
Unsafe might not be available.

Result:
Easier to debug Netty start up when logging cannot be turned on."
1e5fafe44651e1e246a9a041cfbb453582e05491,"Simplify CharSequenceValueConverter#convertToBoolean

Motivation:
CharSequenceValueConverter#convertToBoolean has a few manual conditionals which can be removed if we use AsciiString.contentEqualsIgnoreCase. Also by comparing an AsciiString to a String we will incur conversions to char that can be avoided if we compare against AsciiString.

Modifications:
- Use AsciiString.contentEqualsIgnoreCase
- Compare against a AsciiString

Result:
Simplified CharSequenceValueConverter#convertToBoolean which favors AsciiString comparison."
ce241bd11ec26008a692b87391b94d8efe69069d,"Epoll flush/writabilityChange deadlock

Motivation:
b215794de31f28355e4469fcc04782f55076c80c recently introduced a change in behavior where writeSpinCount provided a limit for how many write operations were attempted per flush operation. However when the write quantum was meet the selector write flag was not cleared, and the channel unsafe flush0 method has an optimization which prematurely exits if the write flag is set. This may lead to no write progress being made under the following scenario:
- flush is called, but the socket can't accept all data, we set the write flag
- the selector wakes us up because the socket is writable, we write data and use the writeSpinCount quantum
- we then schedule a flush() on the EventLoop to execute later, however it the flush0 optimization prematurely exits because the write flag is still set

In this scenario the socket is still writable so the EventLoop may never notify us that the socket is writable, and therefore we may never attempt to flush data to the OS.

Modifications:
- When the writeSpinCount quantum is exceeded we should clear the selector write flag

Result:
Fixes https://github.com/netty/netty/issues/7729"
f40ecc3f1076292bba2b4c33fa003c1be972df00,"Fix Snappy decoding of large 2-byte literal lengths and copy offsets

Motivation:

The Snappy decoder was failing on valid inputs containing literals
with 2-byte lengths > 0x8000 or copies with 2-byte offsets >= 0x8000.

The decoder was also enforcing an artificially low offset limit of
0x7FFF, something the Snappy format description advises against,
and which prevents decoding valid inputs generated by other encoders.

Modifications:

Interpret 2-byte literal lengths and 2-byte copy offsets as unsigned
shorts, in accordance with the format description and reference
implementation.

Allow any positive offset value. Throw an appropriate exception
for negative values (which can theoretically occur due to arithmetic
overflow on 4-byte offsets, but are unlikely to occur in the wild).

Result:

The Snappy decoder can handle valid inputs that previously caused
it to throw exceptions."
c6c0984b8ec4b4c3e560cdd63a7ee3e20fec96b5,"Ensure we always release the AddressEnvelope when doing DNS queries.

Motivation:

When we do DNS queries we need to ensure we always release the AddressEnvelope.

Modifications:

Also release the AddressEnvelope if the original resolution was done in the meantime and we did not cancel the extra query yet.

Result:

Should fix [#7713]"
d2d3e6ef0c9935a2a38458433298966e6efcfaeb,"KQueue write filter initial state (#7738)

Motivation:
KQueue implementations current have inconsistent behavior with Epoll implementations with respect to asynchronous sockets and connecting. In the Epoll transport we attempt to connect, if the connect call does not synchornously fail/succeed we set the EPOLLOUT which will be triggered by the kernel if the connection attempt succeeds or an error occurs. The connect API provides no way to asynchronously communicate an error so the Epoll implementation fires a EPOLLOUT event and puts the connect status in getsockopt(SO_ERROR). KQueue provides the same APIs but different behavior. If the EVFILT_WRITE is not enabled and the EVFILT_READ is enabled before connect is called, and there is an error the kernel may fire the EVFILT_READ filter and provide the Connection Refused error via read(). This is even true if we set the EVFILT_WRITE filter after calling connect because connect didn't synchornously complete. After the error has been delievered via read() a call to getsockopt(SO_ERROR) will return 0 indicating there is no error. This means we cannot rely upon the KQueue based kernel to deliver connection errors via the EVFILT_WRITE filter in the same way that the linux kernel does with the EPOLLOUT flag.
ce241bd introduced a change which depends upon the behavior of the EVFILT_WRITE being set and may prematurely stop writing to the OS as a result, becaues we assume the OS will notify us when the socket is writable. However the current work around for the above described behavior is to initialize the EVFILT_WRITE to true for connection oriented protocols. This leads to prematurely exiting from the flush() which may lead to deadlock.

Modifications:
- KQueue should check when an error is obtained from read() if the connectPromise has not yet been completed, and if not complete it with a ConnectException

Result:
No more deadlock in KQueue due to asynchronous connect workaround."
786f35c6c9d5d2061e518975dae5100caa43cf52,[maven-release-plugin] prepare release netty-4.1.22.Final
69582c0b6c190e57e8365c97aa819ac5e965a5bd,[maven-release-plugin] prepare for next development iteration
06dcca1dbcc048b6ce7d954e4ecdf1d3ed6af034,"When the response exceeds the threshold, it will be compressed

Motivation:

When the response is very small, compression will inflate the response.

Modifications:

Add filed io.netty.handler.codec.http.HttpContentCompressor#compressThreshold that control whether the HTTP response should be compressed.

Result:

Fixes #7660."
a53f716ca1540d5f496b47d2249e2293a9d0ae06,"Call correct super methods in test.

Motivation:

We called the wrong super method in the test and also had a few unused imports.

Modifications:

Fix super method call and cleanup.

Result:

More correct test and cleanup."
ed46c4ed00ec8260d64eda19ae05aae03fcdaa20,"Copies from read-only heap ByteBuffer to direct ByteBuf can avoid stealth ByteBuf allocation and additional copies

Motivation:

Read-only heap ByteBuffer doesn't expose array: the existent method to perform copies to direct ByteBuf involves the creation of a (maybe pooled) additional heap ByteBuf instance and copy

Modifications:

To avoid stressing the allocator with additional (and stealth) heap ByteBuf allocations is provided a method to perform copies using the (pooled) internal NIO buffer

Result:

Copies from read-only heap ByteBuffer to direct ByteBuf won't create any intermediate ByteBuf"
12ccd40c5ab7d7da674b1f2d7e3ec3945e32cc8d,"Correctly throw IndexOutOfBoundsException when writerIndex < readerIndex

Motivation:

If someone invoke writeByte(), markWriterIndex(), readByte() in order first, and then invoke resetWriterIndex() should be throw a IndexOutOfBoundsException to obey the rule that the buffer declared ""0 <= readerIndex <= writerIndex <= capacity"".

Modification:

Changed the code writerIndex = markedWriterIndex; into writerIndex(markedWriterIndex); to make the check affect

Result:
Throw IndexOutOfBoundsException if any invalid happened in resetWriterIndex."
0a8e1aaf19dc85830478041cb57b308b764cfacd,"Flush task should not flush messages that were written since last flush attempt.

Motivation:

The flush task is currently using flush() which will have the affect of have the flush traverse the whole ChannelPipeline and also flush messages that were written since we gave up flushing. This is not really correct as we should only continue to flush messages that were flushed at the point in time when the flush task was submitted for execution if the user not explicit call flush() by him/herself.

Modification:

Call *Unsafe.flush0() via the flush task which will only continue flushing messages that were marked as flushed before.

Result:

More correct behaviour when the flush task is used."
48df2f66b858f3ce2a0a069dafb1332da55c47f9,"HashedWheelTimer.newTimeout(...) may overflow

Motivation:

We dont protect from overflow and so the timer may fire too early if a large timeout is used.

Modifications:

Add overflow guard and a test.

Result:

Fixes https://github.com/netty/netty/issues/7760."
bf8cac4939ebad0756e39ad82c756bccea9c650a,"Workaround SSLEngine.unwrap(...) bug in Android 5.0

Motivation:

Android 5.0 sometimes not correctly update the bytesConsumed of the SSLEngineResult when consuming data from the input ByteBuffer. This will lead to handshake failures.

Modifications:

Add a workaround for Android 5.0

Result:

Be able to use netty on Android 5.0 by fixing https://github.com/netty/netty/issues/7758 ."
c11b23bbc1f46116407bdc10779c4cace639ee83,"Close SSLEngine when connection fails.

Motivation:
When using the JdkSslEngine, the ALPN class is used keep a reference
to the engine.   In the event that the TCP connection fails, the
SSLEngine is not removed from the map, creating a memory leak.

Modification:
Always close the SSLEngine regardless of if the channel became
active.  Also, record the SSLEngine was closed in all places.

Result:
Fixes: https://github.com/grpc/grpc-java/issues/3080"
d1055e06658838a8667fca6e6d601150ccb86837,"Add testcase for c11b23bbc1f46116407bdc10779c4cace639ee83

Motivation:

c11b23bbc1f46116407bdc10779c4cace639ee83 added a fix for closing the SSLEngine otbound but no test was provided.

Modifications:

Add testcase.

Result:

More tests."
6eb9674bf5ded128cb230a31987f14816b7f1886,"Replace finalizer() usage in Recycler.WeakOrderQueue with ObjectCleaner usage.

Motivation:

We recently introduced ObjectCleaner which can be used to ensure some cleanup action is done once an object becomes weakable reachable. We should use this in Recycler.WeakOrderQueue to reduce the overhead of using a finalizer() (which will cause the GC to process it two times).

Modifications:

Replace finalizer() usage with ObjectCleaner

Result:

Fixes [#7343]"
bd772d127e3fb2da4a1de40b55b42382819f85d2,"FixedCompositeByteBuf should allow to access memoryAddress / array when wrap a single buffer.

Motivation:

We should allow to access the memoryAddress / array of the FixedCompositeByteBuf when it only wraps a single ByteBuf. We do the same for CompositeByteBuf.

Modifications:

- Check how many buffers FixedCompositeByteBuf wraps and depending on it delegate the access to the memoryAddress / array
- Add unit tests.

Result:

Fixes [#7752]."
f6251c8256d8ce3fb6fb76df23e477caa15f627b,"IovArray.add(...) should check if buffer has memory address.

Motivation:

We currently not check if the buffer has a memory address and just assume this is the case if the nioBufferCount() == 1.

Modifications:

- Check hasMemoryAddress() before trying to access it.
- Add unit case.

Result:

More correct and robust code. Related to [#7752]."
b0823761f45c1141e3f155d7369ce0ba09d25e5e,"PendingWriteQueue to handle write operations with void future

Motivation:

Right now PendingWriteQueue.removeAndWriteAll collects all promises to
PromiseCombiner instance which sets listener to each given promise throwing
IllegalStateException on VoidChannelPromise which breaks while loop
and ""reports"" operation as failed (when in fact part of writes might be
actually written).

Modifications:

Check if the promise is not void before adding it to the PromiseCombiner
instance.

Result:

PendingWriteQueue.removeAndWriteAll succesfully writes all pendings
even in case void promise was used."
de082bf4c719f177cb068e01511bc1c69bde4cbf,"Correctly record creation stacktrace in ResourceLeakDetector.

Motivation:

We missed to correctly record the stacktrace of the creation of an ResourceLeak record. This could either have the effect to log the wrote stacktrace for creation or not log a stacktrace at all if the object was dropped on the floor after it was created.

Modifications:

Correctly create a Record on creation of the object.

Result:

Fixes https://github.com/netty/netty/issues/7781."
0adccfdb50e69b96ce0384e67782540a9df1be7a,"Simplify DefaultChannelGroup.contains(...) and so remove one instanceof check.

Motivation:

DefaultChannelGroup.contains(...) did one more instanceof check then needed.

Modifications:

Simplify contains(...) and remove one instanceof check.

Result:

Simplier and cheaper implementation."
2c90b6235d3c120c45ea2c52e4ada5141f3f3021,"Correctly include the stream id when convert from Http2HeadersFrame to HttpMessage

Motivation:

We did not correctly set the stream id in the headers of HttpMessage when converting a Http2HeadersFrame. This is based on https://github.com/netty/netty/pull/7778 so thanks to @jprante.

Modifications:

- Correctly set the id when possible in the header.
- Add test case

Result:

Correctly include stream id."
352e36a179ce12817551d81ad2861eef46a10e4b,"Remove code duplication in ChunkedWriteHandler

Motivation:

We had some code duplication in ChunkedWriteHandler.

Modifications:

Factor out duplicated code into private methods and reuse it.

Result:

Less code duplication."
6e5fd9311fc0abab37fd442eebdc810aa0c3d6a1,"EmptyHeaders get with default value returns null

Motivation:
EmptyHeaders#get with a default value argument returns null. It should never return null, and instead it should return the default value.

Modifications:
- EmptyHeaders#get with a default value should return that default value

Result:
More correct implementation of the Headers API."
6e6cfa0604aa578b52ed5d72ac954f040fadffa3,"Add tests for EmptyHeaders

Motivation:

6e5fd9311fc0abab37fd442eebdc810aa0c3d6a1 fixed a bug in EmptyHeaders which was never noticed before because we had no tests.

Modifications:

Add tests for EmptyHeaders.

Result:

EmptyHeaders is tested now."
40af10b782f554a958cd9636aa1b8132e2874872,"Skip NPN tests when libressl 2.6.1+ is used.

Motivation:

LibreSSL removed support for NPN in its 2.6.1+ releases.

Modifications:

Skip NPN tests in libressl 2.6.1+

Result:

Be able to run netty tests against libressl 2.6.1+ as well."
8189399e9d6a2e17e8d5b4665c86efb696792f56,"Ignore EINTR on close(...) as there is nothing sane we can do.

Motivation:

If close(...) reports EINTR there is nothing sane we can do so it makes no sense to even report it. See also:

https://github.com/apple/swift-nio/pull/217

Modifications:

Just ignore EINTR when calling close(...)

Result:

Less noise in the logs."
fc3b145cbbcad4a257f92f0640eb4ded19b44afe,"Correctly handle non IOException during read in NioServerSocketChannel

Motivation:

Our code was not correct in AbstractNioMessageChannel.closeOnReadError(....) which lead to the situation that we always tried to continue reading no matter what exception was thrown when using the NioServerSocketChannel. Also even on an IOException we should check if the Channel itself is still active or not and if not stop reading.

Modifications:

Fix closeOnReadError impl and added test.

Result:

Correctly stop reading on NioServerSocketChannel when error happens during read."
d60cd0231d4a7e67cc38f00bfc5c13856e937fcb,"HttpProxyHandler generates invalid CONNECT url and Host header when address is resolved

Motivation:

HttpProxyHandler uses `NetUtil#toSocketAddressString` to compute
CONNECT url and Host header.

The url is correct when the address is unresolved, as
`NetUtil#toSocketAddressString` will then use
`getHoststring`/`getHostname`. If the address is already resolved, the
url will be based on the IP instead of the hostname.

There’s an additional minor issue with the Host header: default port
443 should be omitted.

Modifications:

* Introduce NetUtil#getHostname
* Introduce HttpUtil#formatHostnameForHttp to format an
InetSocketAddress to
HTTP format
* Change url computation to favor hostname instead of IP
* Introduce HttpProxyHandler ignoreDefaultPortsInConnectHostHeader
parameter to ignore 80 and 443 ports in Host header

Result:

HttpProxyHandler performs properly when connecting to a resolved address"
2e92a2f5cdadb1c5932a75d3a84b9b89e77bde30,"Ensure we not schedule multiple timeouts for close notify

Motivation:

We should only schedule one timeout to wait for the close notify to be done.

Modifications:

Keep track of if we already scheduled a timeout for close notify and if so not schedule another one.

Result:

No duplicated timeouts."
c75bc1f25b623d0fb2fa4882bcc19dc30ff1649b,"Support Redis inline commands

Motivation:
The RESP protocol implementation lacked inline command
support.

Modifications:
Added logic to decode and encode inline commands.

Result:
Inline commands are supported. Fixes #7686."
62d8a5e9d2e05aad8394548eb716c0716b22cef2,"Add removeIfExists() method to DefaultChannelPipeline

Motivation:

Sometimes it is very convenient to remove the handler from pipeline without throwing the exception in case those handler doesn't exist in the pipeline.

Modification:

Added 3 overloaded methods to DefaultChannelPipeline, but not added to ChannelHandler due to back compatibility.

Result:

Fixes #7662"
0bb042158c662ba44c06a7be57d9f1df741198c8,"Update to netty-tcnative 2.0.8.Final

Motivation:

netty-tcnative 2.0.8.Final was released.

Modifications:

Update to latest netty-tcnative release.

Result:

Use latest release of tcnative"
5ebee9426f05b0c9287bf8c0e27e9e37e1d96c66,"Update to conscrypt 1.0.1

Motivation:

We should use the latest conscrypt release.

Modifications:

Update to 1.0.1

Result:

Use latest conscrypt"
b309271e49cc596676c6002300cfc55f6d5a8cfd,"HttpServerUpgradeHandler shouldn't wait for flush to reshape pipeline

Motivation:

There is a race between both flushing the upgrade response and receiving
more data before the flush ChannelPromise can fire and reshape the
pipeline. Since We have already committed to an upgrade by writing the
upgrade response, we need to be immediately prepared for handling the
next protocol.

Modifications:

The pipeline reshaping logic in HttpServerUpgradeHandler has been moved
out of the ChannelFutureListener attached to the write of the upgrade
response and happens immediately after the writeAndFlush call, but
before the method returns.

Result:

The pipeline is no longer subject to receiving more data before the
pipeline has been reformed."
ed0668384b393c3502c2136e3cc412a5c8c9056e,"NIO read spin event loop spin when half closed (#7801)


Motivation:
AbstractNioByteChannel will detect that the remote end of the socket has
been closed and propagate a user event through the pipeline. However if
the user has auto read on, or calls read again, we may propagate the
same user events again. If the underlying transport continuously
notifies us that there is read activity this will happen in a spin loop
which consumes unnecessary CPU.

Modifications:
- AbstractNioByteChannel's unsafe read() should check if the input side
of the socket has been shutdown before processing the event. This is
consistent with EPOLL and KQUEUE transports.
- add unit test with @normanmaurer's help, and make transports consistent with respect to user events

Result:
No more read spin loop in NIO when the channel is half closed."
965734a1eb1f2553985094ade9f28871016f652b,"Limit the number of bytes to use to copy the content of a direct buffer to an Outputstream (#7813)

Motivation:

Currently copying a direct ByteBuf copies it fully into the heap before writing it to an output stream.
The can result in huge memory usage on the heap.

Modification:

copy the bytebuf contents via an 8k buffer into the output stream

Result:

Fixes #7804"
cd4594d29244f7bea9d718e74ec4ecdcb6c62c13,"Add DnsNameResolver.resolveAll(DnsQuestion) (#7803)

* Add DnsNameResolver.resolveAll(DnsQuestion)

Motivation:

A user is currently expected to use DnsNameResolver.query() when he or
she wants to look up the full DNS records rather than just InetAddres.

However, query() only performs a single query. It does not handle
/etc/hosts file, redirection, CNAMEs or multiple name servers.

As a result, such a user has to duplicate all the logic in
DnsNameResolverContext.

Modifications:

- Refactor DnsNameResolverContext so that it can send queries for
  arbitrary record types.
  - Rename DnsNameResolverContext to DnsResolveContext
  - Add DnsAddressResolveContext which extends DnsResolveContext for
    A/AAAA lookup
  - Add DnsRecordResolveContext which extends DnsResolveContext for
    arbitrary lookup
- Add DnsNameResolverContext.resolveAll(DnsQuestion) and its variants
- Change DnsNameResolverContext.resolve() delegates the resolve request
  to resolveAll() for simplicity
- Move the code that decodes A/AAAA record content to DnsAddressDecoder

Result:

- Fixes #7795
- A user does not have to duplicate DnsNameResolverContext in his or her
  own code to implement the usual DNS resolver behavior."
8d78893a76a8c14c18b304ffe1fce2dc43ed4206,"Avoid writing two times the same message in case channelWritabilityChanged event is called during a write.

Motivation:

ChunkedWriteHandler.doFlush is called twice from the same write if the channelWritabilityChanged event is invoked during the write. The buffer is already written so no extra data is sent on the socket but it causes the ""promise already done"" exception to be thrown.
This error happens only when the message is not ChunkedInput.

Modification:
Clear out the currentWrite reference before the ctx.write call, such that next time when the method is invoked the same object is not used twice.

Result:

Fixes #7819"
9d51a40df022a91b7b87b9c6a171fe6aff920b50,"Update NetUtilBenchmark (#7826)

Motivation:
NetUtilBenchmark is using out of date data, throws an exception in the benchmark, and allocates a Set on each run.

Modifications:
- Update the benchmark and reduce each run's overhead

Result:
NetUtilBenchmark is updated."
602ee5444dcd2c9adad9bdffb93ae907ccad5649,"NetUtil valid IP methods to accept CharSequence (#7827)

* NetUtil valid IP methods to accept CharSequence

Motivation:
NetUtil has methods to determine if a String is a valid IP address. These methods don't rely upon String specific methods and can use CharSequence instead.

Modifications:
- Use CharSequence instead of String for the IP validator methods.
- Avoid object allocation in AsciiString#indexOf(char,int) and reduce
byte code

Result:
No more copy operation required if a CharSequence exists."
741602050fbfe555492987b553c6e7023f0e50a1,"Don't replace all 'connection' headers when sending h2c upgrade request (#7824)

Motivation:

There may be meaningful 'connection' headers that exist on a request
that is used to attempt a HTTP/1.x upgrade request that will be
clobbered.

Modifications:

HttpClientUpgradeHandler uses the `HttpHeaders.add` instead of
`HttpHeaders.set` when adding the 'upgrade' field.

Result:

Fixes #7823, existing 'connection' headers are preserved."
473f6a6edb8353728ea8e711ac8241ddc21adf08,"SctpMessageCompletionHandler may leak ByteBuf for fragmented messages. (#7832)

Motivation:

SctpMessageCompletionHandler stores fragments in a Map but not release the stored ByteBuf when the handler is removed.

Modifications:

Release all buffers that are still in the Map when handlerRemoved(...) is called.

Result:

No more leaks for fragemented messages."
ee9057ad99b9cc95140ee3e56265f32b6a28d709,"CorsHandler.write(...) should not cause a flush. (#7839)

Motivation:

Unnecessary flushes reduce the amount of flush coalescing that can happen at higher levels and thus can increase number of packets (because of TCP_NODELAY) and lower throughput (due to syscalls, TLS frames, etc)

Modifications:

Replace writeAndFlush(...) with write(...)

Result:

Fixes https://github.com/netty/netty/issues/7837."
a95fd91bc6b5f870c0baaaa414aaf863062306d7,"Don't check accessible in the #capacity method (#7830)

Motivation:
The `#ensureAccessible` method in `UnpooledHeapByteBuf#capacity` used
to prevent NPE if buffer is released and `array` is `null`. In all
other implementations of `ByteBuf` the accessible is not checked by
`capacity` method. We can assign an empty array to `array`
in the `deallocate` and don't worry about NPE in the `#capacity`.
This will help reduce the number of repeated calls of the
`#ensureAccessible` in many operations with `UnpooledHeapByteBuf`.

Modifications:
1. Remove `#ensureAccessible` call from `UnpooledHeapByteBuf#capacity`.
Use the `EmptyArrays#EMPTY_BYTES` instead of `null` in `#deallocate`.

2. Fix access checks in `AbstractUnsafeSwappedByteBuf` and
`AbstractByteBuf#slice` that relied on `#ensureAccessible`
in `UnpooledHeapByteBuf#capacity`. This was found by unit tests.

Result:
Less double calls of `#ensureAccessible` for `UnpooledHeapByteBuf`."
8c549bad3821f9b63f2313b83a15c531e94dfaf0,[maven-release-plugin] prepare release netty-4.1.23.Final
0a61f055f5502e82516486a0bedceff934de0198,[maven-release-plugin] prepare for next development iteration
0f4001d598a8a72d246424978525f35801d2eb82,"add task before starting thread in SingleThreadEventExecutor.execute (#7841)

Motivation:

Minor performance optimisation that prevents thread from blocking due to task not having been added to queue. Discussed #7815.

Modification:

add task to the queue before starting the thread.

Result:

No additional tests."
c58069f2849837aaaaa13aa4cb00b83c32966623,"Better handling of streaming JSON data in JsonObjectDecoder (#7821)

Motivation:

When the JsonObjectDecoder determines that the incoming buffer had some data discarded, it resets the internal index to readerIndex and attempts to adjust the state which does not correctly work for streams of JSON objects.

Modifications:

Reset the internal index to the value considering the previous reads.

Result:

JsonObjectDecoder correctly handles streams of both JSON objects and arrays with no state adjustments or repeatable reads."
587afddb279bea3fd0f64d3421de8e69a35cecb9,"Fixes NPE in ClientCookieDecoder

Motivation:
NPE in `ClientCookieDecoder` if cookie starts with comma.

Modifications:
Check `cookieBuilder` for `null` in the return.

Result:
No fails NPE on invalid cookies."
5ab83427982fa0f07eb4da982a9a9d854dbf317c,"Add dev-tools dependency for commons (#7858)

Motivation:

We need to add a dev-tools dependecy for commons as otherwise we may fail to fetch it before we try to use it.

Modifications:

Add dependency.

Result:

Fixes https://github.com/netty/netty/issues/7842"
f8ff834f037e51b7119630bdb7713a29c18b8e31,"Checks accessibility in the #slice and #duplicate methods of ByteBuf (#7846)

Motivation:
The `ByteBuf#slice` and `ByteBuf#duplicate` methods should check
an accessibility to prevent creation slice or duplicate
of released buffer. At now this works not in the all scenarios.

Modifications:
Add missed checks.

Result:
More correct and consistent behavior of `ByteBuf` methods."
76c5f6cd03c7c57fab823d3b0774b56c3ed97fc3,"Enable per origin Cors configuration (#7800)

Motivation:

Finer granularity when configuring CorsHandler, enabling different policies for different origins.

Modifications:

The CorsHandler has an extra constructor that accepts a List<CorsConfig> that are evaluated sequentially when processing a Cors request

Result:

The changes don't break backwards compatibility. The extra ctor can be used to provide more than one CorsConfig object."
401b196623b9a2cadaf6ef8a67f2de2d360e8fe3,"Extract common parts from `if` statements (#7831)

Motivation:
Some `if` statements contains common parts that can be extracted.

Modifications:
Extract common parts from `if` statements.

Result:
Less code and bytecode. The code is simpler and more clear."
3f244a94feece17bfd2c7a421f18e71144527cf8,"AsciiString#indexOf out of bounds (#7866)

Motivation:
The bounds checking for AsciiString#indexOf and AsciiString#lastIndexOf is not correct and may lead to ArrayIndexOutOfBoundsException.

Modifications:
- Correct the bounds checking for AsciiString#indexOf and AsciiString#lastIndexOf

Result
Fixes https://github.com/netty/netty/issues/7863"
da2e91b33a0bca01d3036dc6539a5fa5f06e23c1,"Allow to write Http2UnkownFrame when using Http2FrameCodec / Http2MultiplexCodec (#7867)

Motivation:

We should allow to write Http2UnkownFrame to allow custom extensions.

Modifications:

Allow to write Http2UnkownFrame
Add unit test

Result:

Fixes https://github.com/netty/netty/issues/7860."
f874a37ecb70cc15dbcce3d9924711467caf508f,"Fixes NPE in Corshandler for unauthorized prefligt requests (#7865)

Motivation:
NPE in `CorsHandler` if a pre-flight request is done using an Origin header which is not allowed by any `CorsConfig` passed to the handler on creation.

Modifications:
During the pre-flight, check the `CorsConfig` for `null` and handle it correctly by not returning any access-control header

Result:
No more NPE for pre-flight requests with unauthorized origins."
81a7d1413bd36fc42be5ef3e67a55b0c56a2672f,"Makes `EmptyByteBuf#hashCode` and `AbstractByteBuf#hashCode` consistent (#7870)

Motivation:
The `AbstractByteBuf#equals` method doesn't take into account the
class of buffer instance. So the two buffers with different classes
must have the same `hashCode` values if `equals` method returns `true`.
But `EmptyByteBuf#hashCode` is not consistent with `#hashCode`
of the empty `AbstractByteBuf`, that is violates the contract and
can lead to errors.

Modifications:
Return `1` in `EmptyByteBuf#hashCode`.

Result:
Consistent behavior of `EmptyByteBuf#hashCode` and `AbstractByteBuf#hashCode`."
a4146b706c0a0577f9ce65d711ad64a6847e3e24,"Do not enforce arbitrary max header list size in HpackEncoder (#7853)

Motivation:

When connecting to an HTTP/2 server that did not set any value for the
SETTINGS_MAX_HEADER_LIST_SIZE in the settings frame, the netty client was
imposing an arbitrary maximum header list size of 8kB. There should be no need
for the client to enforce such a limit if the server has not specified any
limit. This caused an issue for a grpc-java client that needed to send a large
header to a server via an Envoy proxy server. The error condition is
demonstrated here: https://github.com/JLofgren/demo-grpc-java-bug-4284

Fixes grpc-java issue #4284 - https://github.com/grpc/grpc-java/issues/4284
and netty issue #7825 - https://github.com/netty/netty/issues/7825

Modifications:

In HpackEncoder use MAX_HEADER_LIST_SIZE as default maxHeader list size.

Result:

HpackEncoder will only enforce a max header list size if the server has
specified a limit in its settings frame."
0b690a991fb86903188e769763225ce9f3099b4c,"Added IP_TRANSPARENT option for UDP (#7872)

Motivation:

This allows netty to operate in 'transparent proxy' mode for UDP, intercepting connections
to other addresses by means of Linux firewalling rules, as per

https://www.kernel.org/doc/Documentation/networking/tproxy.txt


Modification:

Add IP_TRANSPARENT option.

Result:

Allows setting and getting of the IP_TRANSPARENT option, which allows retrieval of the ultimate socket address originally requested."
0f34d887b78029aa9ebc3b5faf9c9f257960425c,"Only reset readIsPending if outboundBuffer is not empty. (#7874)

Motivation:

We need to ensure we only reset readInProgress if the outboundBuffer is not empty as otherwise we may miss to call fireChannelRead(...) later on when using the LocalChannel.

Modifications:

Also check if the outboundBuffer is not empty before setting readInProgress to false again

Result:

Fixes https://github.com/netty/netty/issues/7855"
3ec29455af9642f6b20d7a309d3b6fb19c49b819,"Fix eternal loop in Recycler.WeakOrderQueue.Head#run() that blocks ObjectCleaner thread (#7878)

Motivation:

When trying to cleanup WeakOrderQueue by the ObjectCleaner we end up in an endless loop which will cause the ObjectCleaner to be not able to cleanup any other resources anymore.This bug was introduced by 6eb9674bf5ded128cb230a31987f14816b7f1886.

Modifications:

Correctly update link while cleanup

Result:

Fixes https://github.com/netty/netty/issues/7877"
4cd39cc4b36f14424a0e25219a49b37d78f93bd2,"Filter DNS results so they only contain the expected type when multiple types are present. (#7875)

Motivation:

Currently, if a DNS server returns a non-preferred address type before the preferred one, then both will be returned as the result, and when only taking a single one, this usually ends up being the non-preferred type. However, the JDK requires lookups to only return the preferred type when possible to allow for backwards compatibility.

To allow a client to be able to resolve the appropriate address when running on a machine that does not support IPv6 but the DNS server returns IPv6 addresses before IPv4 addresses when querying.

Modification:

Filter the returned records to the expected type when both types are present.

Result:

Allows a client to run on a machine with IPv6 disabled even when a server returns both IPv4 and IPv6 results. Netty-based code can be a drop-in replacement for JDK-based code in such circumstances.

This PR filters results before returning them to respect JDK expectations."
04fac00c8c98ed26c5a75887c8e7e53b1e1b68d0,[maven-release-plugin] prepare release netty-4.1.24.Final
b75f44db9a0d5255815bff076fe54dec72176ca5,[maven-release-plugin] prepare for next development iteration
f9604eeff5019219ea2895556309735bb27077fe,"Motivation: (#7848)

It is possible to create streams in the half-closed state where the
stream state doesn't reflect that the request headers have been sent by
the client or the server hasn't received the request headers. This
state isn't possible in the H2 spec as a half closed stream must have
either received a full request or have received the headers from a
pushed stream. In the current implementation, this can cause the stream
created as part of an h2c upgrade request to be in this invalid state
and result in the omission of RST frames as the client doesn't believe
it has sent the request to begin with.

Modification:

The `DefaultHttp2Connection.activate` method checks the state and
modifies the status of the request headers as appropriate.

Result:

Fixes #7847."
48fe14402a98ed600fa14348984e688af725561c,"Update os-maven-plugin to 1.6.0 (#7884)

Motivation:

A new version of os-maven-plugin has been released.

Modifications:

- Update os-maven-plugin from 1.5.0 to 1.6.0

Result:

- No visible changes
- Feels good"
1b1f7677acec6a5ae06a552adc4c046b2ce2490d,"Implement isWritable and ensureWritable on ReadOnlyByteBufferBuf (#7883)

Motivation:

It should be possible to write a ReadOnlyByteBufferBuf to a channel without errors. However, ReadOnlyByteBufferBuf does not override isWritable and ensureWritable, which can cause some handlers to mistakenly assume they can write to the ReadOnlyByteBufferBuf, resulting in ReadOnlyBufferException.

Modification:

Added isWritable and ensureWritable method overrides on ReadOnlyByteBufferBuf to indicate that it is never writable. Added tests for these methods.

Result:

Can successfully write ReadOnlyByteBufferBuf to a channel with an SslHandler (or any other handler which may attempt to write to the ByteBuf it receives)."
010dbe3c734aff7b400c7be8666e5f0c055fca62,"Optimize space usage of FastThreadLocal (#7861)

Motivation:
A FastThreadLocal instance currently occupies 2 slots of InternalThreadLocalMap of every thread. Actually for a FastThreadLocalThread, it does not need to store cleaner flags of FastThreadLocal instances. Besides, using BitSet to store cleaner flags is also better for space usage.

Modification:
Use BitSet to optimize space usage of FastThreadLocal.

Result:
Avoid unnecessary slot occupancy. Cleaner flags are now stored into a BitSet."
b47fb817991b42ec8808c7d26538f3f2464e1fa6,"EventLoop.schedule with big delay fails (#7402)

Motivation:

Using a very huge delay when calling schedule(...) may cause an Selector error when calling select(...) later on. We should gaurd against such a big value.

Modifications:

- Add guard against a very huge value.
- Added tests.

Result:

Fixes [#7365]"
eaf177133638b528a8d644b7d0bf3665cd90a18c,"Don't use VM.maxDirectMemory() on z/OS to retrieve direct memory limit. (#7886)

Motivation:

On z/OS netty initializes this value with 64M, even the direct accessible memory is actually unbounded.

Modifications:

Skip usage of VM.maxDirectMemory() on z/OS.

Result:

More correct direct memory limit detection. Fixes https://github.com/netty/netty/issues/7654."
f4d7e8de140048047299808bb7e707c15342b826,"Respect MAX_MESSAGES_PER_READ in LocalChannel / LocalServerChannel. (#7885)

Motivation:

LocalChannel / LocalServerChannel did not respect read limits and just always read all of the messages.

Modifications:

- Correct respect MAX_MESSAGES_PER_READ settings
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/7880."
b818852cdb0ee56ce3cf939e2faa538d519baabd,"Update DatagramPacket.recipient() to return the actual destination IP (#7879)

Motivation:

DatagramPacket.recipient() doesn't return the actual destination IP, but the IP the app is bound to.

Modification:

- IP_RECVORIGDSTADDR option is enabled for UDP sockets, which allows retrieval of ancillary information containing the original recipient.
- _recvFrom(...) function from transport-native-unix-common/src/main/c/netty_unix_socket.c is modified such that if IP_RECVORIGDSTADDR is set, recvmsg is used instead of recvfrom; enabling the retrieval of the original recipient.
- DatagramSocketAddress also contains a 'local' address, representing the recipient.
- EpollDatagramChannel is updated to return the retrieved recipient address instead of the address the channel is bound to.

Result:

Fixes #4950."
c0ae5e697c3c4fdf81f0cfc199d18aacd3b8ecba,"DnsAddressResolverGroup to use pluggable DnsNameResolverBuilder (#7793)

Motivation:

Right now to customize DNS name resolver when using DnsAddressResolverGroup
one should subclass implementation and override newNameResolver method when
in fact it's possible to collect all settings in a DnsNameResolverBuilder
instance. Described in #7749.

Modifications:

- Added new constructor for DnsNameResolverBuilder in order to delay
  EventLoop specification

- Added copy() method to DnsNameResolverBuilder to provide an immutable
  copy of the builder

- Added new single-argument constructor for DnsAddressResolverGroup and
  RoundRobinDnsAddressResolverGroup accepting DnsNameResolverBuilder
  instance

- DnsAddressResolverGroup to build a new resolver using DnsNameResolverBuilder
  given instead of creating a new one

- Test cases to check that changing channelFactory after the builder was passed
  to create a DnsNameResolverGroup would not propagate to the name resolver

Result:

Much easier to customize DNS settings w/o subclassing DnsAddressResolverGroup"
dfeb4b15b587bf5298555e969a01378853efab8f,"Fix IllegalReferenceCountException when using Http2MultiplexCodec and a DefaultHttp2GoAwayFrame with a non empty ByteBuffer is received. (#7894)

Motivation:

We incorrectly called frame.release() in onHttp2GoAwayFrame which could lead to IllegalReferenceCountExceptions.  The call of release() is inappropriate because the fireChannelRead() in onHttp2Frame() will handle it.

Modifications:

- Not call frame.release()
- Add a unit test

Result:

Fxies https://github.com/netty/netty/issues/7892."
b5fde3e0cdddfa96d65e85c3699e7ac8f0fd3ebc,"Add #ifdef statements so the compilation of the native code not fails on MacOS (#7895)

Motivation:

b818852cdb0ee56ce3cf939e2faa538d519baabd added support for IP_RECVORIGDSTADDR but did not include any #ifdef statements to ensure its usable at all (which is not the case on MacOS).

Modifications:

Add #ifdef statements to check for IP_RECVORIGDSTADDR.

Result:

Compilation works again on MacOS."
0261e0066216358b8acd390da96c85aaa8713b91,"Allow to call AbstractDiskHttpData.setContent(Unpooled.EMPTY_BUFFER) multiple times. (#7890)

Motivation:

It should be possible to call setContent(Unpooled.EMPTY_BUFFER) multiple times just like its possible to do the same with a non empty buffer.

Modifications:

- Correctly reset underlying storage if called multiple times.
- Add tests

Result:

Fixes https://github.com/netty/netty/issues/6418"
bd800fa7e7065dd74125f34298b69bb279f4be8e,"Add null-check to Htt2FrameCodec#consumeBytes. (#7899)

Motivation:

Streams can be deregistered so we can't assume their existence in the stream map.

Modifications:

Add a null-check in case a stream has been deregistered.

Result:

Fixes #7898."
c60263e8a3336aae182fdde2dd0202a667cba880,"Correctly handle responses with status 205 and payload. (#7891)

Motivation:

HTTP responses with status of 205 should not contain a payload. We should enforce this.

Modifications:

Correctly handle responses with status 205 and payload by set Content-Length: 0 header and stripping out the content.

Result:

Fixes https://github.com/netty/netty/issues/7888"
095dadcbec7cd056ea1c0947d57d9084fae6d897,"Fix race in ChannelReadHandler used during LocalChannel testing. (#7904)

Motivation:

ChannelReadHandler is used in tests added via f4d7e8de140048047299808bb7e707c15342b826. In the handler we verify the number of messages we receive per read() call but missed to sometimes reset the counter which resulted in exceptions.

Modifications:

Correctly reset read counter in all cases.

Result:

No more unexpected exceptions when running LocalChannel tests."
a598c3b69b55f930b91a8265f42d1a3cceb75ddd,"Enforce sane upper limit for TTL in DefaultDnsCache. (#7907)

Motivation:

In b47fb817991b42ec8808c7d26538f3f2464e1fa6 we limited the max supported delay to match what our internal implementat can support. Because of this it was possible that DefaultDnsCache produced an IllegalArgumentException when it tried to schedule a expiration > 3 years.

Modifications:

Limit the max supported TTL to 2 years which is safe for all our EventLoop implementations.

Result:

No more exceptions when adding records to the cache with a huge TTL."
b83328606fdb7782eae7f26425a189f1a99bfbac,"DefaultDnsCache should store more then one Entry per hostname. (#7906)

Motivation:

Due a bug we did never store more then one address per hostname in DefaultDnsCache.

Modifications:

- Correctly store multiple entries per hostname
- Add tests

Result:

DefaultDnsCache correctly stores more then one entry. Also fixes https://github.com/netty/netty/issues/7882 ."
358249e5c9b3f832ae88b3ae9cf9f692106d4cc6,"Allow to disable native transport and native ssl support via system property. (#7903)

Motivation:

Sometimes it's useful to disable native transports / native ssl to debug a problem. We should allow to do so with a system property so people not need to adjust code for this.

Modifications:

Add system properties which allow to disable native transport and native ssl.

Result:

Easier to disable native code usage without code changes."
d03bd44e9d79e8b73eea137c2e0373ed0a06f31e,"Add test for caching failed queries in DefaultDnsCache. (#7909)

Motivation:

We had no test that validated the handling of caching failures for DefaultDnsCache.

Modifications:

Add testcase.

Result:

More tests FTW."
54c3de0f8aa9e4eb2c95a368dcaa0b8cbb48403b,"Add test to validate SSLEngine does not zero out src buffer on wrap. (#7914)

Motivation:

We had a bug-report that claimed the src buffer used by OpenSslEngine will be zero out.

Modifications:

Add testcase to ensure correct behaviour

Result:

Testcase for https://github.com/netty/netty/issues/7753"
18b170bd7ad91153692af6830b7b1afb13835638,"Cleanup resolver-dns test code. (#7916)

Motivation:

We had some stuff that could be cleaned up in the resolver-dns test classes.

Modifications:

Cleanup code.

Result:

Cleaner code."
437849bd93ccf83782f7081e0a76e88277064758,"Fix tiny typo in FixedChannelPool error message (#7918)

Motivation:

Closed `FixedChannelPool` fails acquire and release operations with
`IllegalStateException`s. These exceptions had message
""FixedChannelPooled was closed"". Here ""FixedChannelPooled"" looks like
a typo and should probably be ""FixedChannelPool"".

Modifications:

Changed exception message to ""FixedChannelPool was closed"".

Result:

A tiny bit cleaner exception message."
a0ed6ec06ca605ed39b601355daedace93828032,"Fix the error message in ReferenceCounted.release (#7921)

Motivation:

When a buffer is over-released, the current error message of `IllegalReferenceCountException` is `refCnt: XXX, increment: XXX`, which is confusing. The correct message should be `refCnt: XXX, decrement: XXX`.

Modifications:

Pass `-decrement` to create `IllegalReferenceCountException`.

Result:

The error message will be `refCnt: XXX, decrement: XXX` when a buffer is over-released."
f01a590154f05247ce39bc218880bf0510c6508f,"Enfore upper limit for minTtl when using DefaultCacheEntry. (#7920)

Motivation:

a598c3b69b55f930b91a8265f42d1a3cceb75ddd added a upper limit for ttl but missed to also do the same for minTtl.

Modifications:

- Add upper limit for minTtl
- Add testcase.

Result:

No more IllegalArgumentException possible."
cbe9ed8cc1d25868d7d0236e250332ed7434ca50,"Add test that we handle thread.interrupt() in NioEventLoop (#7917)

Motivation:

We added some code to guard against thread.interrupt() in NioEventLoop but did not added a test.

Modifications:

Add testcase.

Result:

Verify that we correctly handle interrupt()."
369d64c3e6050b5f006c359523a60fcc15eb6110,"Always follow cnames even if a matching A or AAAA record was found. (#7919)

Motivation:

At the moment if you do a resolveAll and at least one A / AAAA record is present we will not follow any CNAMEs that are also present. This is different to how the JDK behaves.

Modifications:

- Allows follow CNAMEs.
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/7915."
5256d173635e08fd5f65b73e871a55544468f03e,"Make osgi testing work with java>=9 by updating to felix framework 5.6.10 (#7923)

Motivation:

Currently, the testing-osgi is set to skip if run with java>=9. That is not necessary when using a newer version of Felix.

Modification:

Update to Felix framework 5.6.10 (which has better jpms support), add some more --add-opens to not have WARN messages, and remove the skipOsgiTestsuite setting from the parent pom.

Result:

OSGi tests run and pass on java>=9."
cff87de44cfaa4544360715dc83e5ad1aa2c0bd7,"Make build pass on Java 10 (#7922)

Motivation:

Java 10 is out so we should be able to build netty with it (and run the tests).

Modifications:

- Update Mockito and JBoss Marshalling to support Java 10
- Fix unit test to not depend on specific cipher which is not present in Java 10 anymore

Result:

Netty builds (and runs all tests) when using Java 10"
c990c121ea9d8902c2c11aa4e2c6886f47e1cf86,"Only use jboss-marshalling when using Java 10 (#7929)

Motivation:

cff87de44cfaa4544360715dc83e5ad1aa2c0bd7 updated jboss-marshalling to 2.0.5.Final but this broke the ability to run tests with Java 7.

Modifications:

Only use 2.0.5.Final if compiled against Java 10 (as before 1.4.x works fine).

Result:

Be able to run tests with Java 7 on the CI."
dc0cf3e099a8f1f4a74cbf114afabaa5ba3eee4f,"Ensure Netty can be build with Java 11 (#7926)

Motivation:

Java 11 will be out soon, so we should be able to build (and run tests) netty.

Modifications:

- Add dependency that is needed till Java 11
- Adjust tests so these also pass on Java 11 (SocketChannelImpl.close() behavious a bit differently now).

Result:

Build also works (and tests pass) on Java 11."
c67a3b0507d847a9f01c886b944ced015245ecc9,[maven-release-plugin] prepare release netty-4.1.25.Final
64bb279f47a0b102b3c70df2f7565df8be394bf4,[maven-release-plugin] prepare for next development iteration
09d9daf1c4656d86dd88b89b7b9e55bdf6913092,"Update the comment of io.netty.buffer.PoolChunk.java (#7934)

Motivation:

When I read the source code, I found that the comment of PoolChunk is out of date, it may confuses readers with the description about memoryMap.

Modifications:

update the last passage of the comment of the PoolChunk class.

Result:
No change to any source code , just update comment."
30a02b441aa967bf1cf9ae8dc9feb8a8ce5090df,"Avoid implicit allocations in Http2FrameLogger when logging is disabled (#7937)

Motivation:

Integer autoboxing in this class (and possibly also the varargs arrays)
showed non-negligible CPU and garbage contribution when profiling a gRPC
service. grpc-java currently hardcodes use of Http2FrameLogger, set at
DEBUG level.

Modifications:

Wrap offending log statements in conditional blocks.

Result:

Garbage won't be produced by Http2FrameLogger when set to a disabled
logging level."
3d2e231794fea07a183e328061cb1d77fccebe82,Add docker-sync files to .gitignore
85e2987719fb6e196feb13a21560cc1ea589e24a,"pom.xml: adding suuport for AARCH64 architecture in Netty/Transport/N… (#7933)

Netty/Transport/Native/Epoll project can be build on aarch64 platform as well.

Motivation:
To provide the support for AARCH64 architecture

Modification:
Adjusted regex for enforce plugin to also allow AARCH64.

Result:
Be able to compile on AARCH64"
1d09efeeb2535869cd0eaf3e1b239273e239c817,"Correctly copy existing elements when CodecOutputList.add(index, element) is called. (#7939)

Motivation:

We did not correctly copy elements in some cases when add(index, element) was used.

Modifications:

- Correctly detect when copy is neede and when not.
- Add test case.

Result:

Fixes https://github.com/netty/netty/issues/7938."
ed54ab034dcc444dffbcaaa5675c39abc0cfbff3,"Correctly clear the error stack in all cases when using ReferenceCountedOpenSslEngine. (#7941)

Motivation:

We missed to correctly clear the error stack in one case when using the ReferenceCountedOpenSslEngine. Because of this it was possible to pick up an error on an unrelated operation.

Modifications:

- Correctly clear the stack
- Add verification of empty error stack to tests.

Result:

Not possible to observe unrelated errors."
69c644bb9823eace6c7974c497689b41e6c06a4b,"Correctly detect if protocol is enabled when using netty-tcnative (#7940)

Motivation:

We sometimes did not correctly detect when a protocol is not enabled when using netty-tcnative as we did not take into account when the option flag is 0 (as for example in BoringSSL for SSLv2).

Modifications:

- Correctly take an option flag with 0 into account.
- Add unit tests.

Result:

Fixes https://github.com/netty/netty/issues/7935."
932d77b83e33087bfa5e74a14db2730615ab2d93,"Verify error stack is empty after each operation when using ReferenceCountedOpenSslEngine. (#7943)

Motivation:

https://github.com/netty/netty/pull/7941 proved that its easy to not correctly clear the error stack sometimes. We should do carefully test this.

Modifications:

Add a new SSLEngine wrapper that is used during tests, which verifies that the error stack is empty after each method call.

Result:

Better testing."
0bce0450c05697df6ff77a0a14183ee53a00053f,"Adjust tests to also pass when using BoringSSL (#7946)

Motivation:

Some of the tests failed when using BoringSSL as some protocol / cipher combinations are not supported and it uses a different alert when the cert is not valid yet.

Modification:

- Remove protocol / cipher combos that are not supported by BoringSSL
- Test for different alert when using BoringSSL

Result:

Not test failures when using BoringSSL."
47985c11c1d9f11b94018539108ed65f0c6a32ab,"Add missing parameter when delegate to SSLEngine.

Motivation:

https://github.com/netty/netty/pull/7943 had a bug which caused to not have the argument passed to the delegating method.

Modifications:

Add argument to release call.

Result:

Correctly delegate method."
546ddd2c2899b8e410ddfac6b3987d4108b65c17,"Correctly calculate and respect if we can correctly fullfil wrap for alerts. (#7945)

Motivation:

We previously did not correctly take into account when we could not wrap (and so produce) the full SSL record with an alert when the SSLEngine was closed.

There are two problems here:

- If we call wrap(...) with an empty dst buffer after closeOutbound() was called we will not notify the user if we could not store the whole SSLRecord into the dst buffer and so we may produce incomplete SSLRecords

Modifications:

Add unit test which failed before.

Result:

Correctly handle the case when the dst buffer is not big enough and and alert needs to be produced."
c3d29f7b9ef138aecaff8b1c6cd631d742d6b22a,"Guard against calling malloc(0) when create ByteBuffer. (#7948)

Motivation:

We did not guard against the case of calling malloc(0) when creating a ByteBuffer without a Cleaner. The problem is that malloc(0) can have different behaviour, it either return a null-pointer or a valid pointer that you can pass to free.

The real problem arise if Unsafe.allocateMemory(0) returns 0 and we use it as the memoryAddress of the ByteBuffer. The problem here is that native libraries test for 0 and handle it as a null-ptr. This is for example true in SSL.bioSetByteBuffer(...) which would throw a NPE when 0 is used as memoryAddress and so produced errors during SSL usage.

Modifications:

- Always allocate 1 byte as minimum (even if we ask for an empty buffer).
- Add unit test.

Result:

No more errors possible because of malloc(0)."
19e7b4438fd5674c893ac918a1f1c0ef3910ed82,"Update to conscrypt 1.1.2 (#7949)

Motivation:

We use latest conscrypt to test against.

Modifications:

Update to conscrypt 1.1.2

Result:

Use latest conscrypt release."
8ae126aaa81491527dfd03cf725a8e60eeb9ed96,"Revert workaround in test for Java 11 as it produces a connection-reset as expected now. (#7951)

Motivation:

We added a workaround for Java 11 as it not produced a connect-reset when SO_LINGER with 0 was set and NIO was used. This was fixed in the latest ea release of Java 11:

 - http://hg.openjdk.java.net/jdk/jdk/rev/ea54197f4fe4
 - https://bugs.openjdk.java.net/browse/JDK-8203059

Modifications:

Revert workaround.

Result:

Test that Java 11 behave the same way as earlier Java versions again."
7727649b2ca08010118a8c57b2c0a5702cf876f2,"Add tests for the Conscrypt based SSLEngine. (#7950)

Motivation:

We currently have only interopt tests for Conscrypt, we should also have non-interopt tests.

Modifications:

Add ConscryptSslEngineTest

Result:

More tests"
987c443888ce2c47144ce0130c25b356416e2925,"Use ByteBufAllocator used by the ReferenceCountedOpenSslEngine when build key-material. (#7952)

Motivation:

When we build the key-material we should use the ByteBufAllocator used by the ReferenceCountedOpenSslEngine when possible.

Modifications:

Whenever we have access to the ReferenceCountedOpenSslEngine we use its allocator.

Result:

Use correct allocator"
88f0586a7e89a4e35e0011bdf607b3192bfe7b5f,"Remove HpackDecoder.maxHeaderListSizeGoAway (#7911)

Motivation:

When a sender sends too large of headers it should not unnecessarily
kill the connection, as killing the connection is a heavy-handed
solution while SETTINGS_MAX_HEADER_LIST_SIZE is advisory and may be
ignored.

The maxHeaderListSizeGoAway limit in HpackDecoder is unnecessary because
any headers causing the list to exceeding the max size can simply be
thrown away. In addition, DefaultHttp2FrameReader.HeadersBlockBuilder
limits the entire block to maxHeaderListSizeGoAway. Thus individual
literals are limited to maxHeaderListSizeGoAway.

(Technically, literals are limited to 1.6x maxHeaderListSizeGoAway,
since the canonical Huffman code has a maximum compression ratio of
.625. However, the ""unnecessary"" limit in HpackDecoder was also being
applied to compressed sizes.)

Modifications:

Remove maxHeaderListSizeGoAway checking in HpackDecoder and instead
eagerly throw away any headers causing the list to exceed
maxHeaderListSize.

Result:

Fewer large header cases will trigger connection-killing.
DefaultHttp2FrameReader.HeadersBlockBuilder will still kill the
connection when maxHeaderListSizeGoAway is exceeded, however.

Fixes #7887"
583fc272f26373ff5f51c0871d9730370cd39a3e,"Fixed|SimpleChannelPool.close() should only return after complete. (#7927)

Motivation:

We need to ensure we only return from close() after all work is done as otherwise we may close the EventExecutor before we dispatched everything.

Modifications:

Correctly wait on operations to complete before return.

Result:

Fixes https://github.com/netty/netty/issues/7901."
4d6b006fe64059b6b9eba9fbb835dc4a22d33393,"Correctly take status into account when compare DefaultHttpResponse (#7965)

Motivation:

DefaultHttpResponse did not respect its status when compute the hashCode and check for equality.

Modifications:

Correctly implement hashCode and equals

Result:

Fixes https://github.com/netty/netty/issues/7964."
19d1f4ea628d5042ea93856d286cb31b453beda0,"Propagate pong frames in WebSocketProtocolHandler (#7955)

Motivation:

Currently, on recipt of a PongWebSocketFrame, the
WebSocketProtocolHandler will drop the frame, rather than passing it
along so it can be referenced by other handlers.

Modifications:

Add boolean field to WebSocketProtocolHandler to indicate whether Pong
frames should be dropped or propagated, defaulting to ""true"" to preserve
existing functionality.

Add new constructors to the client and server implementations of
WebSocketProtocolHandler that allow for overriding the behavior for the
handling of Pong frames.

Result:

PongWebSocketFrames are passed along the channel, if specified."
030318e53cb2ba59a746933489b8f060040a0766,"Read until all data is consumed when EOF is detected even if readPend… (#7961)

* Read until all data is consumed when EOF is detected even if readPending is false and auto-read is disabled.

Motivation:

We should better always notify the user of EOF even if the user did not request any data as otherwise we may never be notified when the remote peer closes the connection. This should be ok as the amount of extra data we may read and so fire through the pipeline is limited by SO_RECVBUF.

Modifications:

- Always drain the socket when EOF is detected.
- Add testcase

Result:

No risk for the user to be not notified of EOF."
c3637ff42c53e65f65bf629657638736ce102e28,"AUTO_CLOSE should not be marked as deprecated. (#7967)

Motivation:

A long time ago we deprecated AUTO_CLOSE but it turned out this feature is still useful because if a write error is detected there still maybe data to read, and if we close the channel automatically we will lose data

Modifications:

- Remove `@Deprecated` tag for AUTO_CLOSE, setAutoClose(...) and isAutoClose(...)
- Fix javadocs on ChannelConfig to correctly tell the default value of AUTO_CLOSE.

Result:

Less warnings."
8a85761500238893ca35bfa42a3601ef15447018,"Don't use VM.maxDirectMemory() on IBM J9 / Eclipse OpenJ9 to retrieve direct memory limit (#7966)

Motivation:

On J9 / OpenJ9 netty initializes this value with 64M, even the direct accessible memory is actually unbounded.

Modifications:

Skip usage of VM.maxDirectMemory() on J9 / OpenJ9

Result:

More correct direct memory limit detection. Fixes #7654."
9a3311506e5aa9ffd4bfa58c47ec22c37a0d5599,"Run the WebSocketClientHandshaker08Test on the 08 implementation (#7974)

Motivation:

The websockets abstract test suite does not run against the 08
implementation in the 08 version of the test suite.

Modifications:

Update the WebSocketClientHandshaker08Test to instantiate a new
WebSocketClientHandshaker08 rather than an 07 handshaker.

Result:

The WebSocketClientHandshaker08Test now tests the 08 implementation."
94946f63247b9b9b02294f49cbcd8868a0c7609f,"add docker-compose to allow easy testing across linux and java versions (#7958)

motivation: setup for testing across different permutations of linux and java versions

changes:
* refactor docker file to allow dynamic versions of centos and java
* add docker compose driver files for centos 6, 7 and java 1.8, 1.9, 1.10, 1.11
* update instructions"
7f59896fba28ca1b14e13d2c7b3ba60f7af74027,"Use jdk-11-ea+15 when try to build with java11 (#7979)

Motivation:

A new EA build for java 11 is out.

Modifications:

Update from ea+14 to ea+15

Result:

Use latest ea build"
f904c63a535ebfd51d6911cca28aac0eb23c8df0,"Correctly let Http2UnkownFrame extend HttpStreamFrame and so be usable with Http2MultiplexCodec. (#7976)

Motivation:

This is a followup for #7860. In the fix for #7860 we only partly fixed the problem as Http2UnknownFrame did not correctly extend HttpStreamFrame and so only worked when using the Http2FrameCodec. We need to have it extend HttpStreamFrame as otherwise Http2MultiplexCodec will reject to handle it correctly.

Modifications:

- Let Http2UnknownFrame extend HttpStreamFrame
- Add unit tests for writing and reading Http2UnkownFrame instances when the Http2MultiplexCodec is used.

Result:

Fixes https://github.com/netty/netty/issues/7969."
2e587f75cbb8125e02f3622a7ec6d9cd5e3dd47c,"Don't trim stacktrace for exceptions when running mvn test (#7981)

Motivation:

The maven surefire plugin will trim stacktraces by default which makes these kind of use-less when trying to understand why an test failed because one was thrown.

Modifications:

Configure the plugin to not trim the stacktrace.

Result:

Easier to debug test-failures."
0c6f077c18d2a721b94a4fe89bc44157cb1b6a66,"Allow to test with boringssl-static and drop into shell (#7980)

Motivation:

We also need to run our tests while using boringssl-static to ensure everything works when using it. Beside this its sometimes useful to be able to just get a shell and so interactive work in the docker instance.

Modifications:

- Add configs for shell
- Add configs for testing with boringssl-static
- Ensure we not share .m2 when running tests

Result:

More complete docker setup."
4b728cd5bc53195bced516f33a1ea0a0def5604e,"Ignore some test-flakiness when using Java11+ due outstanding Java11 bug. (#7984)

Motivation:

Java11 disallow draining any remaining bytes from the socket if a write causes a connection reset. This should be completely safe to do. At the moment if a write is causing a connection-reset you basically loose all the pending bytes that are sitting on the socket and are waiting to be read.

This happens because SocketOutputStream.write(…) may call AbstractPlainSocketImpl.setConnectionReset(…). Once this method is called any read(…) call will just throw a SocketException without even attempt to read any remaining data.

This is related:
 - https://bugs.openjdk.java.net/browse/JDK-8199329
 - http://hg.openjdk.java.net/jdk/jdk/rev/92cca24c8807
 - http://mail.openjdk.java.net/pipermail/net-dev/2018-May/011511.html

Modifications:

Tolarate if remaining bytes could not be read when using OIO.

Result:

Be able to build Netty and run testsuite while using Java11"
ec91c40bf755270795d9487fcc7c276e984139f4,"We should re-use the same handler instance as its sharable in the example

Motivation:

We should re-use the same handler instance as its sharable. 

Modification:

Re-use instance

Result:

More correct example"
d133bf06a487cfa7378725dcff92e39e10633e8a,"Allow to schedule tasks up to Long.MAX_VALUE (#7972)

Motivation:

We should allow to schedule tasks with a delay up to Long.MAX_VALUE as we did pre 4.1.25.Final.

Modifications:

Just ensure we not overflow and put the correct max limits in place when schedule a timer. At worse we will get a wakeup to early and then schedule a new timeout.

Result:

Fixes https://github.com/netty/netty/issues/7970."
b53cf045a7718766da8edd9499c657e77b314bbb,"SelectedSelectionKeySet should only be created if the set can be instrumented

Motivation:

If we can not replace the internal used Set of the Selector there is no need to create an SelectedSelectionKeySet instance.

Modification:

Only create SelectedSelectionKeySet if we will replace the internal set.

Result:

Less object creation in some cases and cleaner code."
48911e0b633da526f37fb4e5bdcddf3f97c091b5,"Set (and override) websocket handshake headers after custom headers (#7975)

Motivation:

Currently, when passing custom headers to a WebSocketClientHandshaker,
if values are added for headers that are reserved for use in the
websocket handshake performed with the server, these custom values can
be used by the server to compute the websocket handshake challenge. If
the server computes the response to the challenge with the custom header
values, rather than the values computed by the client handshaker, the
handshake may fail.

Modifications:

Update the client handshaker implementations to add the custom header
values first, and then set the reserved websocket header values.

Result:

Reserved websocket handshake headers, if present in the custom headers
passed to the client handshaker, will not be propagated to the server.
Instead the client handshaker will propagate the values it generates.

Fixes #7973."
a4393831f0c95e4b89812238b9ac26ac4322e451,"Fix race in SslHandlerTest that could lead to NPE. (#7989)

Motivation:

SslHandlerTest tried to get access to the SslHandler in the pipeline via pipeline.get(...) which may return null if the channel was already closed and so the pipeline was teared down.

This showed up in a test run as:

```
-------------------------------------------------------------------------------
Test set: io.netty.handler.ssl.SslHandlerTest
-------------------------------------------------------------------------------
Tests run: 17, Failures: 0, Errors: 1, Skipped: 1, Time elapsed: 0.802 sec <<< FAILURE! - in io.netty.handler.ssl.SslHandlerTest
testCloseOnHandshakeFailure(io.netty.handler.ssl.SslHandlerTest)  Time elapsed: 0.188 sec  <<< ERROR!
java.lang.NullPointerException
        at io.netty.handler.ssl.SslHandlerTest.testCloseOnHandshakeFailure(SslHandlerTest.java:640)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:564)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
        at java.base/java.lang.Thread.run(Thread.java:844)
```

Modifications:

Use an AtomicReference to propagate the SslHandler instance to the outer scope.

Result:

No more NPE."
1611acf4cee4481b89a2cf024ccf821de2dbf13c,"Fix CharSequenceValueConverter.convertToByte implementation for AsciiString (#7994)

Motivation:

The implementation of CharSequenceValueConverter.convertToByte did not correctly handle AsciiString if the length != 1.

Modifications:

- Only use fast-path for AsciiString with length of 1.
- Add unit tests.

Result:

Fixes https://github.com/netty/netty/issues/7990"
6208c9b0d66b4e28f371f60342bdeadbcb3b745a,"Mention the HttpObjectEncoder's state in the message of the IllegalStateException (#7996)

Motivation

The HttpObjectEncoder raises an IllegalStateException due to an illegal state but doesn't mention what the state was. It could be useful for debugging purposes to figure out what happened.

Modifications

Mention the HttpObjectEncoder's state in the message of the IllegalStateException.

Result

An exception with more information what caused it."
00786337029d48d2e5815ff5076284a46373062b,"Use java 11+ea16 (#7999)

Motivation:

Java 11+ea16 was released.

Modifications:

Update to latest version.

Result:

Testing with latest java 11 release."
b192bf12ad2af92bba0f32c9d3127b1192e54670,"Update conscrypt to 1.1.3 which fixes some NPEs during tests when using conscrypt. (#8001)

Motivation:

When using conscrypt some NPEs were logged, these were fixed in the latest release.

Modifications:

Update to conscrypt 1.1.3.

Result:

Fixes https://github.com/netty/netty/issues/7988."
abe77511b99b93a7ec98ddea78243ff6e6235107,"Remove dead code in Http2CodecUtil (#8009)

Motivation:

The `ByteBuffer emptyPingBuf()` method of Http2CodecUtils is has been dead
code since DefaultHttp2PingFrame switched from using a ByteBuf to represent
the 8 octets to a long.

Modifications:

Remove the method and the unused static ByteBuf.

Result:

Less dead code.

Fixes #8002"
400ca8733427732e426d6fa0eb88fcfe7e06b06d,"Provide an API for controlling and h2c upgrade response stream in Http2MultiplexCodec (#7968)

Motivation:

Http2MultiplexCodec doesn't currently have an API for using the response
of a h2c upgrade request.

Modifications:

Add a new API to the Http2MultiplexCodecBuilder which allows for setting
an upgrade handler and wire it into the Http2MultiplexCodec
implementation.

Result:

When using the Http2MultiplexCodec with h2c upgrades the upgrade handler
will get added to the Http2StreamChannel which represents the
half-closed (local) response of stream 1. It is then up to the user to
manage the transition from the IO channel pipeline configuration
necessary for making the h2c upgrade request to a form where it can read
the response from the new stream channel.

Fixes #7947."
35215309b97804334610a56e5f5a7660db9c9017,"Make UnpooledHeapByteBuf array methods protected (#8015)

Motivation:

Currently there is not a clear way to provide a byte array to a netty
ByteBuf and be informed when it is released. This is a would be a
valuable addition for projects that integrate with netty but also pool
their own byte arrays.

Modification:

Modified the UnpooledHeapByteBuf class so that the freeArray method is
protected visibility instead of default. This will allow a user to
subclass the UnpooledHeapByteBuf, provide a byte array, and override
freeArray to return the byte array to a pool when it is called.
Additionally this makes this implementation equivalent to
UnpooledDirectByteBuf (freeDirect is protected).

Additionally allocateArray is also made protect to provide another override
option for subclasses.

Result:

Users can override UnpooledHeapByteBuf#freeArray and
UnpooledHeapByteBuf#allocateArray."
3e3e5155b9bb4375fc4c95ac53c5c2ed8e8c5446,"Check if Log level is enabled before creating log statements (#8022)

Motivation

There is a cost to concatenating strings and calling methods that will be wasted if the Logger's level is not enabled.

Modifications

Check if Log level is enabled before producing log statement. These are just a few cases found by RegEx'ing in the code.

Result

Tiny bit more efficient code."
c7c8e6a3ec4294f34c3788e9a8b0ce809b75ca61,"Defer channelInactive and channelUnregistered events in Http2MultiplexCodec (#8021)

Motivation:

There is an inconsistency between the order of events in the
StreamChannel implementation in Http2MultiplexCodec and other Channel
implementations that extend AbstractChannel where channelInactive and
channelUnregistered events are not performed 'later'. This can cause an
unexected order of events for ChannelHandler implementations that call
Channel.close() in response to some event.

Modification:

The Http2MultiplexCodec.DefaultHttp2StreamChannel.Http2ChannelUnsafe was
modified to bounce the deregistration and channelInactive events through
the parent channels EventLoop.

Result:

Stream events are now in the proper order.

Fixes #8018."
12f6500a4fdf39f88cc1d5bd4649926a22c7e170,"Epoll and Kqueue shouldn't read by default (#8024)

Motivation:
Epoll and Kqueue channels have internal state which forces
a single read operation after channel construction. This
violates the Channel#read() interface which indicates that
data shouldn't be delivered until this method is called.
The behavior is also inconsistent with the NIO transport.

Modifications:
- Epoll and Kqueue shouldn't unconditionally read upon
initialization, and instead should rely upon Channel#read()
or auto_read.

Result:
Epoll and Kqueue are more consistent with NIO."
9b0fa2f668e8abe2e6d883d4edaed1422e81abe0,"Update to netty-tcnative 2.0.9.Final which fixes a memory leak (#8026)

Motivation:

netty-tcnative 2.0.9.Final was released which fixes a memory leak that can happen if client auth is used via client side.

Modifications:

Update to latest netty-tcnative.

Result:

No more memory leak."
a8549b138d2dcf64539fe4707c18fb1a3003e06f,"Update to netty-tcnative 2.0.10.Final as 2.0.9.Final did not contain all native libs for boringssl. (#8031)

Motivation:

netty-tcnative 2.0.9 did not contain all native code for boringssl due a release mistake.

Modifications:

Update to 2.0.10

Result:

Use latest netty-tcnative release."
2d470059011616502895005d4ba55545373b9b15,"Use java 11+ea18 (#8034)

Motivation:

Java 11+ea18 was released.

Modifications:

Update to latest version.

Result:

Testing with latest java 11 release."
370de7c44652fe461067e1ac64c38a1014584ae0,"Revert ""Ignore some test-flakiness when using Java11+ due outstanding Java11 bug. (#7984)"" (#8035)

Motivation:

This reverts commit 4b728cd5bc53195bced516f33a1ea0a0def5604e as it was fixes in Java 11 ea+17.

Modification:

Revert previous added workaround as this is fixed in Java 11 now.

Result:

No more workaround for test included."
3fb1b992efd24aece49b3d80e96ed43a1bf44e9c,"Remove some cipher protocol combos for tests due removal in more recent versions of OpenSSL (#8033)

Motivation:

Some of the cipher protocol combos that were used are no longer included in more recent OpenSSL releases.

Modifications:

Remove some combos that were used for testing.

Result:

Tests also pass in more recent OpenSSL versions (1.1.0+)."
b1d4b2af1c189666963a3545121cbc5477e3c394,"fix grammar in javadoc

Signed-off-by: radai-rosenblatt <radai.rosenblatt@gmail.com>"
9b95b8ee628983e3e4434da93fffb893edff4aa2,"Reduce array allocations during CompositeByteBuf construction

Motivation:

Eliminate avoidable backing array reallocations when constructing
composite ByteBufs from existing buffer arrays/Iterables. This also
applies to the Unpooled.wrappedBuffer(...) methods.

Modifications:

Ensure the initial components ComponentList is sized at least as large
as the provided buffer array/Iterable in the CompositeByteBuffer
constructors.

In single-arg Unpooled.wrappedBuffer(...) methods, set maxNumComponents
to the count of provided buffers, rather than a fixed default of 16. It
seems likely that most usage of these involves wrapping a list without
subsequent modification, particularly since they return a ByteBuf rather
than CompositeByteBuf. If a different/larger max is required there are
already the wrappedBuffer(int, ...) variants.

In fact the current behaviour could be considered inconsistent - if you
call Unpooled.wrappedBuffer(int, ByteBuf) with a single buffer, you
might expect to subsequently be able to add buffers to it (since you
specified a max related to consolidation), but it will in fact return
just a slice of the provided ByteBuf.

Result:

Fewer and smaller allocations in some cases when using CompositeByteBufs
or Unpooled.wrappedBuffer(...)."
4c709be1abf6e52c6a5640c1672d259f1de638d1,"Print correct invalid character after unwrapping value in CookieEncoder

Motivation:

If a wrapped cookie value with an invalid charcater is passed to the strict
encoder, an exception is thrown on validation but the error message contains
a character at the wrong position.

Modifications:

Print `unwrappedValue.charAt(pos)` instead of `value.charAt(pos)`.

Result:

The exception indicates the correct invalid character in the unwrapped cookie."
8687e1eeedeba1bc4b639602f439f4f9d0f366db,"Don't fail the deregistration promise in Http2MultiplexCodec

Motivation:

We deviate from the AbstractChannel implementation on deregistration by
failing the provided promise if the channel is already deregistered. In
contrast, AbstractChannel will always set the promise to successfully
done.

Modification:

Change the
Http2MultiplexCodec.DefaultHttp2StreamChannel.Http2ChannelUnsafe to
always set the promise provided to deregister as done as is the
case in AbstractChannel."
cb420a9ffcad4038df862324d1594c401389bda5,"Including the setup code in the benchmark method to avoid JMH Invocation level hiccups.

Motivation:

The usage of Invocation level for JMH fixture methods (setup/teardown) inccurs in a significant impact in
in the benchmark time (see org.openjdk.jmh.annotations.Level documentation).

When the benchmark and the setup/teardown is too small (less than a milisecond) the Invocation level might saturate the system with
timestamp requests and iteration synchronizations which introduce artificial latency, throughput, and scalability bottlenecks.

In the HeadersBenchmark, all benchmarks take less than 100ns and the Invocation level setup offsets the measurement considerably.
As fixture methods is defined for the entire class, this overhead also impacts every single benchmark in this class, not only
the ones that use the emptyHttpHeaders object (cleaned in the setup).

The recommended fix patch here is to include the setup/teardown code in the benchmark where the object is used.

Modifications:

Include the setup/teardown code in the relevant benchmark methods.
Remove the setup/teardown method of Invocation level from the benchmark class.

Result:

We run all benchmarks from HeadersBenchmark 10 times with default parameter, we observe:
- Benchmarks that were not directly affected by the fix patch, improved execution time.
    For instance, http2Remove with (exampleHeader = THREE) had its median reported as 2x faster than the original version.
- Benchmarks that had the setup code inserted (eg. http2AddAllFastest) did not suffer a significant punch in the execution time,
as the benchmarks are not dominated by the clear().

Environment:
Tests run on a Computational server with CPU: E5-1660-3.3GHZ  (6 cores + HT), 64 GB RAM."
4a8d3a274cbad54daa652d6e9e082b4c1c843f84,"Including the setup code in the benchmark method to avoid JMH Invocation level hiccups.

Motivation:

The usage of Invocation level for JMH fixture methods (setup/teardown) inccurs in a significant overhead
in the benchmark time (see org.openjdk.jmh.annotations.Level documentation).

In the case of CodecInputListBenchmark, benchmarks are far too small (less than 50ns) and the Invocation
level setup offsets the measurement considerably.
On such cases, the recommended fix patch is to include the setup/teardown code in the benchmark method.

Modifications:

Include the setup/teardown code in the relevant benchmark methods.
Remove the setup/teardown methods from the benchmark class.

Result:

We run the entire benchmark 10 times with default parameters we observed:
- ArrayList benchmark affected directly by JMH overhead is now from 15-80% faster.
- CodecList benchmark is now 50% faster than original (even with the setup code being measured).
- Recyclable ArrayList is ~30% slower.
- All benchmarks have significant different means (ANOVA) and medians (Moore)

Mode: Throughput (Higher the better)

Method	              Full params		Factor	    Modified (Median)	Original (Median)
recyclableArrayList	 (elements = 1)		0.615520967	21719082.75	        35285691.2
recyclableArrayList	 (elements = 4)		0.699553431	17149442.76	        24514843.31
arrayList	         (elements = 4)		1.152666631	27120407.18	        23528404.88
codecOutList	     (elements = 1)		1.527275908	67251089.04	        44033359.47
codecOutList	     (elements = 4)		1.596917095	59174088.78	        37055204.03
arrayList	         (elements = 1)		1.878616889	62188238.24	        33103204.06

Environment:
Tests run on a Computational server with CPU: E5-1660-3.3GHZ  (6 cores + HT), 64 GB RAM."
0337ecdcc87ae19b9f329eeffefa336354c1d0a0,"Allow to cache keymaterial when using OpenSSL

Motiviation:

During profiling it showed that a lot of time during the handshake is spent by parsing the key / chain over and over again. We should cache these parsed structures if possible to reduce the overhead during handshake.

Modification:

- Use new APIs provided by https://github.com/netty/netty-tcnative/pull/360.
- Introduce OpensslStaticX509KeyManagerFactory which allows to wrap another KeyManagerFactory and caches the key material provided by it.

Result:

In benchmarks handshake times have improved by 30 %."
9ffdec302e21e6a027275b2a1ac9a17a223a024f,"Make results of handler proxy tests reproducible

Motivation:

`ProxyHandlerTest` relies on random values to run tests: first to
shuffle collection of test items and lately to set configuration
flag for `AUTO_READ`. While the purpose of randomization is clear,
it's still impossible to reproduce the same sequence of test cases
when something went wrong. For `AUTO_READ` it's even impossible
to tell what flag was set when the particular test failed.

Modifications:

* Test runner now log seed values that was used for shuffling,
  so you can take one and put in your tests to ""freeze"" them
  while debugging (pretty common approach with randomized tests)

* `SuccessItemTest` is split into 2 different use cases:
  for AUTO_READ flag set to ""on"" and ""off""

Result:

You can reproduce specific tests results now."
fa4e28ba1ca4e81aa0ee4c756b719802e77d9817,"Fix random number generators in WebSocketUtil

Motivation:

Implementation of WebSocketUtil/randomNumber is incorrect and might violate
the API returning values > maximum specified.

Modifications:

* WebSocketUtil/randomNumber is reimplemented, the idea of the solution described
  in the comment in the code

* Implementation of WebSocketUtil/randomBytes changed to nextBytes method

* PlatformDependet.threadLocalRandom is used instead of Math.random to improve efficiency

* Added test cases to check random numbers generator

* To ensure corretness, we now assert that min < max when generating random number

Result:

WebSocketUtil/randomNumber always produces correct result.

Covers https://github.com/netty/netty/issues/8023"
028d9dcf0f5ae83ccf1c2377c6465e2ad196766b,"Update to java 11+ea19

Motivation:

A new java 11 EA version was released.

Modifications:

Update to java 11+ea19

Result:

Use latest java 11 release."
00afb19d7a37de21b35ce4f6cb3fa7f74809f2ab,"Get rid of deprecated SslContext methods in handler-proxy tests

Motivation:

ProxyHandlerTest package uses deprecated methods SslContext.newServerContext and
SslContext.newClientContext.

Modifications:

SslContextBuilder is used to build server and client SslContext.

Result:

Less deprecated method in the code."
5e42e758bebe489574ee1dc6ed8b1ed3db54792b,"Also remove the id from the DnsQueryContextManager if query fails due parent Channel activation error.

Motivation:

Whenever we fail the query we should also remove the id from the DnsQueryContextManager.

Modifications:

Remove the id from the DnsQueryContextManager if we fail the query because the channel failed to become active.

Result:

More correct code."
8f01259833a2323da6968b09162854600443ac4d,"HpackDecoder treats invalid pseudo-headers as stream level errors

Motivation:

The HTTP/2 spec dictates that invalid pseudo-headers should cause the
request/response to be treated as malformed (8.1.2.1), and the recourse
for that is to treat the situation as a stream error of type
PROTOCOL_ERROR (8.1.2.6). However, we're treating them as a connection
error with the connection being immediately torn down and the HPACK
state potentially being corrupted.

Modifications:

The HpackDecoder now throws a StreamException for validation failures
and throwing is deffered until the end of of the decode phase to ensure
that the HPACK state isn't corrupted by returning early.

Result:

Behavior more closely aligned with the HTTP/2 spec.

Fixes #8043."
06f3574e46e0623a45a93d36dbe7aa3d7455a995,"Don't calculate max direct memory twice in PlatformDependent

Motivation:

I'm not sure if trivial changes like this are interesting :-) But I
noticed that the PlatformDependent.maxDirectMemory0() method is called
twice unnecessarily during static initialization (on the default path at
least).

Modifications:

Use constant MAX_DIRECT_MEMORY already set to the same value instead of
calling maxDirectMemory0() again.

Result:

A surely imperceivable reduction in operations performed at startup."
f164759ea3095bea97dc4fe297782b919baaa7c9,"Support composite buffer creation without array alloc and copy

Motivation:

Unpooled.unmodifiableBuffer() is currently used to efficiently write
arrays of ByteBufs via FixedCompositeByteBuf, but involves an allocation
and content-copy of the provided ByteBuf array which in many (most?)
cases shouldn't be necessary.

Modifications:

Modify the internal FixedCompositeByteBuf class to support wrapping the
provided ByteBuf array directly. Control this behaviour with a
constructor flag and expose the ""unsafe"" version via a new
Unpooled.wrappedUnmodifiableBuffer(ByteBuf...) method.

Result:

Less garbage on IO paths. I would guess pretty much all existing usage
of unmodifiableBuffer() could use the copy-free version but assume it's
not safe to change its default behaviour."
a214f2eb9692040cf45e20739a7dd319f47ff8c8,"Remove id from DnsQueryContextManager whenever the promise is fullfilled.

Motivation:

We did not handle the case when the query was cancelled which could lead to an exhausted id space. Beside this we did not not cancel the timeout on failed promises.

Modifications:

- Do the removal of the id from the manager in a FutureListener so its handled in all cases.
- Cancel the timeout whenever the original promise was full-filled.

Result:

Fixes https://github.com/netty/netty/issues/8013."
05e5ab1ecb98963604d686c1f59b2196cf73e244,"Store NativeDatagramPacketArray directly in the EpollEventLoop

Motivation:

We can store the NativeDatagramPacketArray directly in the EpollEventLoop. This removes the need of using FastThreadLocal.

Modifications:

- Store NativeDatagramPacketArray directly in the EpollEventLoop (just as we do with IovArray as well).

Result:

Less FastThreadLocal usage and more consistent code."
d5d1b898d56152d67c81e5cfd722675097d51e73,"Reorder channel state changes in Http2MultiplexCodec child channel

Motivation:

If a write fails for a Http2MultiplexChannel stream channel, the channel
may be forcibly closed, but only after the promise has been failed. That
means continuations attached to the promise may see the channel in an
inconsistent state of still being open and active.

Modifications:

Move the satisfaction of the promise to after the channel cleanup logic
runs.

Result:

Listeners attached to the future that resulted in a Failed write will
see the stream channel in the correct state."
34b25dc94caf9899f5d1955263c0deef910f7df7,"Expose channel count for FixedChannelPool (#8059)

Motivation:

We use FixedChannelPool in production, and we believe we have a leak that doesn't return sockets to the pool (but they should be closed), thus blocking us from creating new connections when we need them. I haven't confirmed this yet, but right now I have to resort to reflection to access this field which makes me sad.

Modification:

Expose the acquiredChannelCount field through a getter method.

Result:

Allows introspection of the pool size in FixedChannelPool."
28187300924604b44c24487a0c5e76dc07757597,"OpenSSL (and so netty-tcnative) should allow to use custom engine. (#8050)

Motivation:

OpenSSL allows to use a custom engine for its cryptographic operations. We should allow the user to make use of it if needed.

See also: https://www.openssl.org/docs/man1.0.2/crypto/engine.html.

Modifications:

Add new system property which can be used to specify the engine to use (null is the default and will use the build in default impl).

Result:

More flexible way of using OpenSSL."
5b1fe611a637c362a60b391079fff73b1a4ef912,"Remove usage of ObjectCleaner (#8064)

Motivation:

ObjectCleaner does start a Thread to handle the cleaning of resources which leaks into the users application. We should not use it in netty itself to make things more predictable.

Modifications:

- Remove usage of ObjectCleaner and use finalize as a replacement when possible.
- Clarify javadocs for FastThreadLocal.onRemoval(...) to ensure its clear that remove() is not guaranteed to be called when the Thread completees and so this method is not enough to guarantee cleanup for this case.

Result:

Fixes https://github.com/netty/netty/issues/8017."
9bf74a680938296e1314791772926b19c802ff2d,"Update to netty-tcnative 2.0.12.Final (#8073)

Motivation:

A new version of tcnative was released that allows to use features depending on the runtime version of openssl, which makes it possible to use KeyManagerFactory and hostname verification on newer versions of centos/fedora/rhel and debian/ubuntu without the need to compile again.

Modifications:

Update to 2.0.12.Final

Result:

Use latest version of netty-tcnative to support more features."
ecc238bea5987fb7e71710230c923ab6a6dba37a,"Only try to call SSL.setHostnameValidation(...) if needed. (#8074)

Motivation:

As the used OpenSSL version may not support hostname validation we should only really call SSL.setHostNameValidation(...) if we detect that its needed.

Modifications:

Only call SSL.setHostNameValidation if it was disabled before and now it needs to be enabled or if it was enabled before and it should be disabled now.

Result:

Less risk of an exception when using an OpenSSL version that does not support hostname validation."
c321e8ea4a1349125510bd9156a4e9a4c3e32741,"HTTP/2 outbound event after receiving go_away forces sending a go_away (#8069)

Motivation:
If the local endpoint receives a GO_AWAY frame and then tries to write a stream with a streamId higher than the last know stream ID we will throw a connection error. This results in the local peer sending a GO_AWAY frame to the remote peer, but this is not necessary as the error can be isolated to the local endpoint and communicated via the ChannelFuture return value.

Modifications:
- Instead of throwing a connection error, throw a stream error that simulates the peer receiving the stream and replying with a RST

Result:
Connections are not closed abruptly when trying to create a stream on the local endpoint after a GO_AWAY frame is received."
83710cb2e1060d37ba7bac90afbaea15e9db11ed,"Replace toArray(new T[size]) with toArray(new T[0]) to eliminate zero-out and allow the VM to optimize. (#8075)

Motivation:

Using toArray(new T[0]) is usually the faster aproach these days. We should use it.

See also https://shipilev.net/blog/2016/arrays-wisdom-ancients/#_conclusion.

Modifications:

Replace toArray(new T[size]) with toArray(new T[0]).

Result:

Faster code."
253522fc9157b9fb12f4f2d5b4f5160ffe6dd2b1,"Create SimpleUserEventChannelHandler convenience class (#7991)

Motivation:

Currently, the vast majority of userEventTriggered() implementations
require the user to supply the boilerplate behavior of performing an
instanceof check, handling if appropriate, and calling
fireUserEventTriggered() otherwise.

We can simplify this very common use case by creating a class that only
matches user events of a given type, similar to the existing
SimpleChannelInboundHandler class.

Modifications:

Create a new SimpleUserEventChannelHandler class
Create accompanying SimpleUserEventChannelHandlerTest class

Result:

Users will be able to handle most events in a less verbose manner."
7f5e77484caa05504b4e6c4527ac7bf1732d01c8,"Fix support for shading native libraries which was broken in b818852cdb0ee56ce3cf939e2faa538d519baabd. (#8091)

Motivation:

b818852cdb0ee56ce3cf939e2faa538d519baabd broke support for shading the native libraries in netty as it missed to respect the package prefix that is used when shading.

Modifications:

Correctly respect package prefix for constructor argument and include the used classname when logging that we could not find the constructor.

Result:

Be able to shade native libraries of netty again."
804d8434dc7026d8ae9df1a3a2431fd3034c2594,"HTTP/2 goaway connection state update sequencing (#8080)

Motivation:
The Http2Connection state is updated by the DefaultHttp2ConnectionDecoder after the frame listener is notified of the goaway frame. If the listener sends a frame synchronously this means the connection state will not know about the goaway it just received and we may send frames that are not allowed on the connection. This may also mean a stream object is created but it may never get taken out of the stream map unless some other event occurs (e.g. timeout).

Modifications:
- The Http2Connection state should be updated before the listener is notified of the goaway
- The Http2Connection state modification and validation should be self contained when processing a goaway instead of partially in the decoder.

Result:
No more creating streams and sending frames after a goaway has been sent or received."
fa8f967852c04fd99ae15ee2bd1047595a97417e,"netty_unix_socket free nettyClassName after using it

Motivation:
netty_unix_socket attempts to use nettyClassName in an error message, but previously freed the memory. We should wait to free the memory until after we use it.

Modifications:
- Free nettyClassName after using it in snprintf

Result:
More useful error message."
7f95506132fc0556b50aa77d1baf9f054452378f,"Don't send a RST on close of the stream may not have existed (#8086)

Motivation:

When a Http2MultiplexCodec stream channel fails to write the first
HEADERS it will forcibly close, and that will trigger sending a
RST_STREAM, which is commonly a connection level protocol error. This is
because it has what looks like a valid stream id, but didn't check with
the connection as to whether the stream may have actually existed.

Modifications:

Instead of checking if the stream was just a valid looking id ( > 0) we
check with the connection as to whether it may have existed at all.

Result:

We no longer send a RST_STREAM frame from Http2MultiplexCodec for idle
streams."
fef462c04333950201ddbfd505c0af730a0c2ffd,"Deprecate Unpooled.unmodifiableBuffer(ByteBuf...) (#8096)

Motivation:

Recent PR https://github.com/netty/netty/pull/8040 introduced
Unpooled.wrappedUnmodifiableBuffer(ByteBuf...) which has the same
behaviour but wraps the provided array directly. This is preferred for
most uses (including varargs-based use) and if there are any unusual
cases of an explicit array which is re-used before the ByteBuf is
finished with, it can just be copied first.

Modifications:

Added @Deprecated annotation and javadoc to
Unpooled.unmodifiableBuffer(ByteBuf...).

Result:

Unpooled.unmodifiableBuffer(ByteBuf...) will be deprecated."
cda4f88ca247d3a028deed52e6024cbf5a880b12,"Correctly release inbound data in example. (#8105)

Motivation:

We need to release the inbound data to ensure there are no leaks.

Modifications:

Extend SimpleChannelInboundHandler which will release inbound data by default.

Result:

No more leaks."
092073893201d515eb2ee375849efae7cc9065db,"Do not log explicit no unsafe, fixes helper method. (#8111)

Motivation:

Users should not see a scary log message when Netty is initialized if
Netty configuration explicitly disables unsafe. The log message that
produces this warning was previously guarded but by recent refactoring
a bug was introduced inside the guard helper method.

Modifications:

This commit brings back the guard against the scary log message if
unsafe is explicitly disabled.

Result:

No log message is produced when unsafe is unavailable because Netty was
told to not look for it.

Relates https://github.com/netty/netty/pull/5624, https://github.com/netty/netty/pull/6696"
6afab517b04e4aaf0c70e68e3b2888c06129197c,"Guard against calling PoolThreadCache.free() multiple times. (#8108)

Motivation:

5b1fe611a637c362a60b391079fff73b1a4ef912 introduced the usage of a finalizer as last resort for PoolThreadCache. As we may call free() from the FastThreadLocal.onRemoval(...) and finalize() we need to guard against multiple calls as otherwise we will corrupt internal state (that is used for metrics).

Modifications:

Use AtomicBoolean to guard against multiple calls of PoolThreadCache.free().

Result:

No more corruption of internal state caused by calling PoolThreadCache.free() multuple times."
a137291ad161c970259d9a5d7cc206c026f08ee7,"Add OpenSslX509KeyManagerFactory which makes it even easier for peopl… (#8084)

* Add OpenSslX509KeyManagerFactory which makes it even easier for people to get the maximum performance when using OpenSSL / LibreSSL / BoringSSL  with netty.

Motivation:

To make it even easier for people to get the maximum performance when using native SSL we should provide our own KeyManagerFactory implementation that people can just use to configure their key material.

Modifications:

- Add OpenSslX509KeyManagerFactory which users can use for maximum performance with native SSL
- Refactor some internal code to re-use logic and not duplicate it.

Result:

Easier to get the max performance out of native SSL implementation."
8ca5421bd2925b944a65a2377a68cdb575fc0733,[maven-release-plugin] prepare release netty-4.1.26.Final
7bb9e7eafe67eef252ef4c66db3e6e34fbaf069e,[maven-release-plugin] prepare for next development iteration
4b9125f9610ad7a108dc16f5e41da0ad8a044080,"Correctly release message in MemcacheClientHandler that is used in the memcache example. (#8119)

Motivation:

MemcacheClientHandler.channelRead(...) need to release the frame after it prints out its content to not introduce a memory leak.

Modifications:

Call release() on the frame.

Result:

Example has no leak any more."
cf713d03685feadeca382988c11dfdfe85c54c9a,Remove extra 'should' word in docs of continueReading() method
301e22eafb659a09be23b47ca158c731da0b0f6f,"Fix incorrect code in javadocs of ChannelHandler. (#8115)

Motivation:

Some code that was shown as part of the ChannelHandler javadoc was not 100 % correct and used some constructs that we used in netty 3. Also we never called flush() in the code which is a bad example for users.

Modifications:

- Remove netty 3 code references
- Replace channel.write(...) with ctx.writeAndFlush(...)

Result:

More correct code in the javadocs."
93d2807ff0eb6d886a4da8fc52a97ea7bbc056b5,"Auto-detect Log4J2 for logging if on the class-path (#8109)

Motivation:

https://github.com/netty/netty/pull/5047 added Log4J2 support but missed to add code to try to auto-detect it.

Modifications:

Try to use Log4JLoggerFactory by default.

Result:

Fixes https://github.com/netty/netty/issues/8107."
8186c9aaeab240dfe500eb2d313467283522288b,"Fix length calculation in AsciiString.indexOf(...) and so eliminate ArrayIndexOutOfBoundsException. (#8116)

Motivation:

We incorrectly calculated the length that was used for our for loop in AsciiString.indexOf(...). This lead to a possible ArrayIndexOutOfBoundsException.

Modifications:

- Not include the start in the length calculation
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8112."
df08467d7c3589a83411bb99e1e347b666c5241f,"Fix possible NPE introduced by a137291ad161c970259d9a5d7cc206c026f08ee7 when using SslProvider.OPENSSL and init via files or OpenSslX509KeyManagerFactory (#8126)

Motivation:

a137291ad161c970259d9a5d7cc206c026f08ee7 introduced a way to get the most speed out of OpenSSL by not only caching keymaterial but pre-compute these. The problem was we missed to check for null before doing an instanceof check and then a cast which could lead to a NPE as we tried to cast null to Exception and throw it.

Modifications:

Add null check and unit test.

Result:

No more NPE when keymaterial was not found for requested alias."
1c16519ac86d9ef9919ac96afbee4be9b428d0c9,[maven-release-plugin] prepare release netty-4.1.27.Final
b4dbdc203658b5c2390d9e3177e586b67d3880aa,[maven-release-plugin] prepare for next development iteration
38d5ae93aacd284b437fab777f75e474da1267f8,"remove Travis build file (.travis.yml) (#8128)

Motivation:

the Netty project does not use Travis CI.

Modification:

Remove .travis.yml

Result:

No more Travis."
d67d639f5f4de11f32dc15abcd0e18bad5a24a21,"Add integration test for shading native libraries. (#8123)

Motivation:

It's easy to break the support for shading native libs as shown in https://github.com/netty/netty/issues/8090. We should have some testing to ensure all works as expected.

Modification:

Add new testsuite which verifies that shading our native transports work as expected.

Result:

Include test to verify shading of native code."
77ec8397927e3ceb9b9a447a74e718f625ed9976,Fix parent version number used by d67d639f5f4de11f32dc15abcd0e18bad5a24a21
952eeb8e1e3706b09d4d3f32f16d7f0e5c540cb5,"Support the usage of SocketOption when nio is used and the java versi… (#8085)

* Support the usage of SocketOption when nio is used and the java version >= 7.

Motivation:

The JDK uses SocketOption since java7 to support configuration options on the underyling Channel. We should allow to create a ChannelOption from a given SocketOption if nio is used. This also allows us to expose the same featureset in terms of configuration as the java nio implementation does without any extra effort.

Modifications:

- Add NioChannelOption which allows to wrap an existing SocketOption which then can be applied to the nio transport.
- Add test-cases

Result:

Support the same configuration options as the JDK. Also fixes https://github.com/netty/netty/issues/8072."
0dc71cee3a50fbcae534c815d6c5a5cd57d81845,"DefaultPromise.getNow() does not correctly handle DefaultPromise.setUncancellable() (#8154)

Motivation:

We do not correctly check for previous calles of setUncancellable() in getNow() which may result in ClassCastException as we incorrectly return the internally UNCANCELLABLE object and not null if setUncancellable() we as called before.

Modifications:

Correctly check for UNCANCELLABLE and add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8135."
9b08dbca00ffdcb37ec0be2100d868c7c2dd72b9,"Leak detection combined with composite buffers results in incorrectly handled writerIndex when calling ByteBufUtil.writeAscii/writeUtf8 (#8153)

Motivation:

We need to add special handling for WrappedCompositeByteBuf as these also extend AbstractByteBuf, otherwise we will not correctly adjust / read the writerIndex during processing.

Modifications:

- Add instanceof checks for WrappedCompositeByteBuf as well.
- Add testcases

Result:

Fixes https://github.com/netty/netty/issues/8152."
620dad0c2602440f2c457a5cb2a4c7a29e786bda,"Allow to validate sni hostname with underscore (#8150)

Motivation:

We should allow to also validate sni hostname which contains for example underscore when using our native SSL impl. The JDK implementation does this as well.

Modifications:

- Construct the SNIHostName via byte[] and not String.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/8144."
53b2dea3f48a4f24606877b9bb12b04592fe2794,"HTTP/2 child channel read cycle doesn't respect RecvByteBufAllocator and (#8147)

Motivation:
Http2MultiplexCodec queues data internally if data is delivered from the
parent channel but the child channel did not request data. If the parent
channel notifies of a stream closure it is possible data in the queue
will be discarded before closing the channel.
Http2MultiplexCodec interacts with RecvByteBufAllocator to control the
child channel's demand for read. However it currently only ever reads a
maximum of one time per loop. This can thrash the read loop and bloat
the call stack if auto read is on, because channelReadComplete will
re-enter the read loop synchronously, and also neglect to deliver data
during the parent's read loop (if it is active). This also meant the
readPendingQueue was not utilized as originally intended (to extend the
child channel's read loop during the parent channel's read loop if
demand for data still existed).

Modifications:
- Modify the child channel's read loop to respect the
RecvByteBufAllocator, and append to the parents readPendingQueue if
appropriate.
- Stream closure notification behaves like EPOLL and KQUEUE transports
and reads all queued data, because the data is already queued in memory
and it is known there will be no more data. This will also replenish the
connection flow control window which may otherwise be constrained by a
closed stream.

Result:
More correct read loop and less risk of dropping data."
ff785fbe39152bd78c0bb45dcc882e3ce0af33fc,[maven-release-plugin] prepare release netty-4.1.28.Final
fcb19cb58944c2db0ed1c76dc7762ca78e819376,[maven-release-plugin] prepare for next development iteration
f60d08fd32b7287f65077f99a88bac645834098f,"Add test for shading netty-tcnative. (#8157)

Motivation:

d67d639f5f4de11f32dc15abcd0e18bad5a24a21 added a test for shading the native transport of netty. We should also test that shading netty-tcnative is possible.

Modifications:

Add test for shading netty-tcnative

Result:

More testing."
630c82717dd8d822323c9e4a8ad51ea4f8a38f86,"Lazy initialize NativeDatagramPacketArray and IovArray in EpollEventLoop (#8160)

Motivation:

Avoid unnecessary native memory allocation if UDP / TCP isn't being
used.

Modifications:

Create the reused NativeDatagramPacketArray and IovArray upon first use
instead of EpollEventLoop construction.

Also correct related comment in NativeDatagramPacketArray.

Result:

Reduced native memory use when using epoll in many cases"
fe14bad69c706a35e170bcf7c6b218ca4b162b9c,"Adjust SSL related tests to be more correct and so pass in the next EA release of java11. (#8162)

Motivation:

In some of our tests we not correctly init the SSLEngine before trying to perform a handshake which can cause an IllegalStateException. While this not happened in previous java releases it does now on Java11 (which is ""ok"" as its even mentioned in the api docs). Beside this how we selected the ciphersuite to test renegotation was not 100 % safe.

Modifications:

- Correctly init SSLEngine before using it
- Correctly select ciphersuite before testing for renegotation.

Result:

More correct tests and also pass on next java11 EA release."
3ab7cac6209cfa3c2d13929123bb61903fe10f58,"Disable test as it sometimes fails on the CI

Motivation:

Temporary disable test that wwas introduced as part of f60d08fd32b7287f65077f99a88bac645834098f as it sometimes fail on the CI. We need to figure out why it fails there (can not reproduce so far even on the CI after ssh into it).

Modifications:

Ignore test.

Result:

More stable builds until we figure out the flackyness."
44d3753c481d61a83097fbbee681512aa8833da8,"Fix NPE exception when using invalid cipher during building SslContext. (#8171)

Motivation:

We missed to do a null check before trying to destroy the OpenSslSessionContext, which could lead to a NPE.

Modifications:

Add null check and tests.

Result:

Fix https://github.com/netty/netty/issues/8170."
2c13f71c733c5778cd359c9148f50e63d1878f7f,"Ensure NIO transport can be used on Java6 again. (#8168)

Motivation:

952eeb8e1e3706b09d4d3f32f16d7f0e5c540cb5 introduced the possibility to use any JDK SocketOption when using the NIO transport but broke the possibility to use netty with java6.

Modifications:

Do not use java7 types in method signatures of the static methods in NioChannelOption to prevent class-loader issues on java6.

Result:

Fixes https://github.com/netty/netty/issues/8166."
55fec94592920d8696349fd2956039e87cc53bc7,"Also clear the authoritativeDnsServerCache when closing the Channel. (#8174)

Motivation:

At the moment we only clear the resolveCache when the Channel is closed. We should also do the same for the authoritativeDnsServerCache.

Modifications:

Add authoritativeDnsServerCache.clear() to the Channel closeFuture.

Result:

Correctly clear all caches."
0bea8ecf5d851b108f788eec21a2c21098e04f99,"CompositeByteBuf nioBuffer doesn't always alloc (#8176)

In nioBuffer(int,int) in CompositeByteBuf , we create a sub-array of nioBuffers for the components that are in range, then concatenate all the components in range into a single bigger buffer.
However, if the call to nioBuffers() returned only one sub-buffer, then we are copying it to a newly-allocated buffer ""merged"" for no reason.

Motivation:

Profiler for Spark shows a lot of time spent in put() method inside nioBuffer(), while usually no copy of data is required.

Modification:
This change skips this last step and just returns a duplicate of the single buffer returned by the call to nioBuffers(), which will in most implementation not copy the data

Result:
No copy when the source is only 1 buffer"
b3b04d0de2793b9964efc8eac9b95d559d02d679,"DnsNameResolver hangs if search domain results in invalid hostname (#8180)

Motivation:
DnsNameResolver manages search domains and will retry the request with the different search domains provided to it. However if the query results in an invalid hostname, the Future corresponding to the resolve request will never be completed.

Modifications:
- If a resolve attempt results in an invalid hostname and the query isn't issued we should fail the associated promise

Result:
No more hang from DnsNameResolver if search domain results in invalid hostname."
534de73d284fb27c4ecb83a9b3e56443b737ba59,"Workaround JDK bug that will cause an AssertionError when calling ServerSocketChannel.config().getOptions(). (#8183)

Motivation:

There is a JDK bug which will return IP_TOS as supported option for ServerSocketChannel even if its not supported afterwards and cause an AssertionError.
See http://mail.openjdk.java.net/pipermail/nio-dev/2018-August/005365.html.

Modifications:

Add a workaround for the JDK bug.

Result:

ServerSocketChannel.config().getOptions() will not throw anymore and work as expected."
dbc9ec1ab2cd5b9bccef1b85aa308c3e7e58022a,"Set SNI servernames in OpenSSL engine when created in client mode (#8178)

Motivation:

When using the JDK SSL provider in client mode, the SNI host names (called serverNames in SslEngineImpl) is set to the peerHost (if available) that is used to initialize the SSL Engine:

http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/sun/security/ssl/SSLEngineImpl.java#l377

This allows one to call SslEngine.getSSLParameters() and inspect what is the SNI name to be sent. The same should be done in the OpenSSL provider as well. Currently even though the the SNI name is sent by the OpenSSL provider during handshake when the peerHost is specified, it is missing from the parameters.

Modification:

Set the sniHostNames field when SNI is to be used. Also verifies the peer is actually a hostname before setting it as the SNI name, which is consistent with JDK SSL provider's behavior.

Result:

SslEngine using the OpenSSL provider created in client mode with peerHost will initialize sniHostNames with the peerHost.

Calling SslEngine.getSSLParameters().getServerNames() will return a list that contains that name."
56eb1e92cc1d12182c6ed0344d144d29bbeea0d1,"Add tests to verify caches are cleared when the resolver is closed. (#8186)

Motivation:

55fec94592920d8696349fd2956039e87cc53bc7 fixed a bug where we did not correctly clear all caches when the resolver was closed but did not add a testcase.

Modifications:

Add testcase.

Result:

More tests."
f22781f176ae5bee3f2886783586f6abfdda5faf,"Correctly handle hostnames with and without trailing dot in the DefaultDnsCache and use it for searchdomains. (#8181)

Motivation:

We should ensure we return the same cached entries for the hostname and hostname ending with dot. Beside this we also should use it for the searchdomains as well.

Modifications:

- Internally always use hostname with a dot as a key and so ensure we correctly handle it in the cache.
- Also query the cache for each searchdomain
- Add unit tests

Result:

Use the same cached entries for hostname with and without trailing dot. Query the cache for each searchdomain query as well"
bd25fd03e3ca02e7eeee17da6d51ba05e464f0b4,"Add testcase for ChannelInitializer.initChannel(...) when throwing an Exception (#8188)

Motivation:

We had a report that the exception may not be correctly propagated. This test shows it is.

Modifications:

Add testcase.

Result:

Test for https://github.com/netty/netty/issues/8158"
2fa7a0aa57f085079d66f5a8c0b807da12fc75fc,"Keep the amount of scheduled tasks for DefaultDnsCache at a minimum (#8187)

Motivation:

We are currently always remove all entries from the cache for a hostname if the lowest TTL was reached but schedule one for each of the cached entries. This is wasteful.

Modifications:

- Reimplement logic to schedule TTL to only schedule a new removal task if the requested TTL was actual lower then the one for the already scheduled task.
- Ensure we only remove from the internal map if we did not replace the Entries in the meantime.

Result:

Less overhead in terms of scheduled tasks for the DefaultDnsCache"
8255f85f24edab5316c0db3aa55bb9709448daa5,"Rename SslHandler.close(...) to closeOutbound(...) as it is still useful and delegate to the methods. (#8193)

* Rename SslHandler.close(...) to closeOutbound(...) as it is still useful and delegate to the methods.

Motivation:

Sometimes the user may want to send a close_notify without closing the underlying Channel. For this we offered the SslHandler.close(...) methods which were marked as deeprecated. We should offer an way to still do this without the user calling deprecated methods.

See https://stackoverflow.com/questions/51710231/using-nettys-sslhandlerclosechannelhandlercontext-channelpromise/51753742#comment90555949_51753742 .

Modifications:

- Remove deprecation of the SslHandler.close(...) method that exactly allows this and rename these to closeOutbound(...) as this is more clear.
- Add close(...) methods that delegate to these and mark these as deprecated.

Result:

Be able to send close_notify without closing the Channel."
bbe2e4d224f839fbe9203bafc16eadf278d76cec,"We should try to load netty-tcnative before using it in OpenSslCertificateException. (#8202)

Motivation:

In OpenSslCertificateException we should ensure we try to load netty-tcnative before trying to use any class from it as otherwise it may throw an error due missing linking of the native libs.

Modifications:

- Ensure we call OpenSsl.isAvailable() before we try to use netty-tcnative for validation
- Add testcase.

Result:

No more errors causing by not loading native libs before trying to use these."
df00539fa22b2162b4203d43bbc5abc3ac08924e,"Allow to load PrivateKey via OpenSSL Engine (#8200)

Motivation:

OpenSSL itself has an abstraction which allows you to customize some things. For example it is possible to load the PrivateKey from the engine. We should support this.

Modifications:

Add two new static methods to OpenSslX509KeyManagerFactory which allow to create an OpenSslX509KeyManagerFactory that loads its PrivateKey via the OpenSSL Engine directly.

Result:

More flexible usage of OpenSSL possible"
785473788f3f19531294802b727fb10a48938222,"(Nio|Epoll)EventLoop.pendingTasks does not need to dispatch to the EventLoop  (#8197)

Motivation:

EventLoop.pendingTasks should be (reasonably) cheap to invoke so it can be used within observability. 

Modifications:

Remove code that dispatch access to the internal taskqueue to the EventLoop when invoked as this is not needed anymore with the current MPSC queues we are using. 

See https://github.com/netty/netty/issues/8196#issuecomment-413653286.

Result:

Fixes https://github.com/netty/netty/issues/8196"
182ffdaf6d4c067514fc70b00c4a5abc67753531,"Only use manual safepoint polling in PlatformDependent0.copyMemory(...) when using java <= 8 (#8124)

Motivation:

Java9 and later does the safepoint polling by itself so there is not need for us to do it.

Modifications:

Check for java version before doing manual safepoint polling.

Result:

Less custom code and less overhead when using java9 and later. Fixes https://github.com/netty/netty/issues/8122."
ea4c315b45bf1bfa82cd75a7d3f38bff684e2ebc,"Ensure multiple shaded version of the same netty artifact can be loaded as long as the shaded prefix is different (#8207)

Motivation:

We should support to load multiple shaded versions of the same netty artifact as netty is often used in multiple dependencies.

This is related to https://github.com/netty/netty/issues/7272.

Modifications:

- Use -fvisibility=hidden when compiling and use JNIEXPORT for things we really want to have exported
- Ensure fields are declared as static so these are not exported
- Adjust testsuite-shading to use install_name_tool on MacOS to change the id of the lib. Otherwise the wrong may be used.

Result:

Be able to use multiple shaded versions of the same netty artifact."
bbb6e126b1b24c13b9c21cc3ff4042476e37c226,"Correctly handle DNS redirects for NS servers that have no ADDITIONAL record (#8177)

Motiviation:

We incorrectly did ignore NS servers during redirect which had no ADDITIONAL record. This could at worse have the affect that we failed the query completely as none of the NS servers had a ADDITIONAL record. Beside this using a DnsCache to cache authoritative nameservers does not work in practise as we we need different features and semantics when cache these servers (for example we also want to cache unresolved nameservers and resolve these on the fly when needed).

Modifications:

- Correctly take NS records into account that have no matching ADDITIONAL record
- Correctly handle multiple ADDITIONAL records for the same NS record
- Introduce AuthoritativeDnsServerCache as a replacement of the DnsCache when caching authoritative nameservers + adding default implementation
- Add an adapter layer to reduce API breakage as much as possible
- Replace DnsNameResolver.uncachedRedirectDnsServerStream(...) with newRedirectDnsServerStream(...)
- Add unit tests

Result:

Our DnsResolver now correctly handle redirects in all cases."
2bb9f64e16dbb5cbbf691e284a97d745378a7b8a,"Try to monkey-patch library id when shading is used and we are on Mac… (#8210)

* Try to monkey-patch library id when shading is used and we are on MacOS / OSX.

Motivation:

https://github.com/netty/netty/commit/ea4c315b45bf1bfa82cd75a7d3f38bff684e2ebc did ensure we support using multiple versions of the same shaded native library but the user still needed to run install_name_tool -id on MacOS to ensure the ID is unique.
This is kind of error prone and also means that the shading itself would need to be done on MacOS / OSX.

This is related to https://github.com/netty/netty/issues/7272.

Modifications:

- Monkey patch the shaded native lib on MacOS to ensure the id is unique while unpacking it to the tempory location.

Result:

Easier way of using shaded native libs in netty."
a0a4d87eab15e89a98dc3683a138cfe218807b65,Update to netty-tcnative 2.0.14 which does correctly handle shading (#8218)
3fc789e83fe3f380ad1936075287adeead328b58,[maven-release-plugin] prepare release netty-4.1.29.Final
a580dc7585c674dea5d77df4caf90fffdb9390e8,[maven-release-plugin] prepare for next development iteration
6888af6ba57ab6b88ad95a9383ee3c3492efec96,"Allow to parse hosts file which is stored in a different encoding then the default system encoding. (#8211)

Motivation:

We should support to parse and read a hosts file which is stored in a different encoding then the system default. Beside this when we are on windows we should just try to parse it with multiple different charset before giving up as there is no real standard what charset to use.

Modifications:

- Add more method overloads to HostsFileParser that take a Charset.
- Try to parse with multiple Charsets in DefaultHostsFileEntriesResolver when windows is used.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/8208."
37a4f99f2561522a1aa57b0037521d407fb926f3,"Use Java11+ea28 during build. (#8113)

Motivation:

We should ensure we use the latest Java11 EA during build to catch any regressions etc.

Modifications:

Update from ea19 to ea28.

Result:

Use latest Java11 release."
1bd9e662ddfbc1ef57e24de9400215401d49e911,"Clarify deprecation docs a bit. (#8226)

Motivation:

It seems to sometimes confuse people what to do to replace setMaxMessagePerRead(...).

Modifications:

Add some more details to the javadocs about the correct replacement.

Result:

Related to https://github.com/netty/netty/issues/8214."
338ef9693185f483076566bfa6291979bcd4287e,"Recycler will produce npe error when multiple recycled at different thread

Motivation:

Recycler may produce a NPE when the same object is recycled multiple times from different threads.

Modifications:

- Check if the id has changed or if the Stack became null and if so throw an IllegalStateException
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/8220."
8679c5ef43d285b22ae603965bb8254164f1570e,"CleanerJava9 should be able to do its job even with a SecurityManager installed. (#8204)

Motivation:

CleanerJava9 currently fails whever a SecurityManager is installed. We should make use of AccessController.doPrivileged(...) so the user can give it the correct rights.

Modifications:

Use doPrivileged(...) when needed.

Result:

Fixes https://github.com/netty/netty/issues/8201."
f77891cc1786806630f6c4408d5d37abb1891e7b,"We should prefer direct buffers if we can access the cleaner even if sun.misc.Unsafe is not present. (#8233)

Motivation:

We should prefer direct buffers whenever we can use the cleaner even if sun.misc.Unsafe is not present.

Modifications:

Correctly prefer direct buffers in all cases.

Result:

More correct code."
5aaa16b24cee9d7455ea1cbb4cb9f2e43eb931b7,"An unit test to ensure that cipher suites don't break/disappear between releases. (#8225)

Motivation

Ensure classes of cipher suites continue working between releases. Adding just a DHE check for now as it caused #8165 but this test can be expaned to other suites.

Modifications

Adding an unit test that checks for the presence of a cipher suite.

Result

Prevent #8165 from happening in the future."
54f565ac676e94992f67a48ae0b29ec2b5152ad4,"Allow to use native transports when sun.misc.Unsafe is not present on… (#8231)

* Allow to use native transports when sun.misc.Unsafe is not present on the system

Motivation:

We should be able to use the native transports (epoll / kqueue) even when sun.misc.Unsafe is not present on the system. This is especially important as Java11 will be released soon and does not allow access to it by default.

Modifications:

- Correctly disable usage of sun.misc.Unsafe when -PnoUnsafe is used while running the build
- Correctly increment metric when UnpooledDirectByteBuf is allocated. This was uncovered once -PnoUnsafe usage was fixed.
- Implement fallbacks in all our native transport code for when sun.misc.Unsafe is not present.

Result:

Fixes https://github.com/netty/netty/issues/8229."
79706357c73ded02615d0445db7503b646ff9547,"Fix race condition in the NonStickyEventExecutorGroup (#8232)

Motivation:

There was a race condition between the task submitter and task executor threads such that the last Runnable submitted may not get executed. 

Modifications:

The bug was fixed by checking the task queue and state in the task executor thread after it saw the task queue was empty.

Result:

Fixes #8230"
ea626ef8c390dc81c71b3a16521cf591611bc5df,"Log more details when shutdown SSL because of an error. (#8236)

Motivation:

We should log a bit more details about why we shutdown the SSL.

Modifications:

Add the return value of SSL_get_error(...) as well in debug mode.

Result:

More logging to make it easier to understand why an SSL error happened."
b73f785631959647385cd5e546bff3c408c8d891,"We should call the UnLoad methods when we detect an error during calling OnLoad (#8237)

Motivation:

We should ensure we call *UnLoad when we detect an error during calling *OnLoad and previous *OnLoad calls were succesfull.

Modifications:

Correctly call *UnLoad when needed.

Result:

More correct code and no leaks when an error happens during loading the native lib."
4a5b61fc13022d0c2cddc93258f303b1a4948cfe,"Fix log message about using non-direct buffers by default (#8235)

Motivation:

f77891cc1786806630f6c4408d5d37abb1891e7b changed slightly how we detect if we should prefer direct buffers or not but did miss to also take this into account when logging.

Modifications:

Fix branch for log message to reflect changes in f77891cc1786806630f6c4408d5d37abb1891e7b.

Result:

Correct logging."
38eee409c8ca356d4a0254919e5898ecd9a2100c,"We should be able to use the ByteBuffer cleaner on java8 (and earlier… (#8234)

* We should be able to use the ByteBuffer cleaner on java8 (and earlier versions) even if sun.misc.Unsafe is not present.

Motivation:

At the moment we have a hard dependency on sun.misc.Unsafe to use the Cleaner on Java8 and earlier. This is not really needed as we can still use pure reflection if sun.misc.Unsafe is not present.

Modifications:

Refactor Cleaner6 to fallback to pure reflection if sun.misc.Unsafe is not present on system.

Result:

More timely releasing of direct memory on Java8 and earlier when sun.misc.Unsafe is not present."
a64456362589aabe90001c36db743b27c91db797,"Add more debug informations when log SSL errors. (#8241)

Motivation:

ea626ef8c390dc81c71b3a16521cf591611bc5df added more debug logging but we can even include a bit more.

Modifications:

Always log the error number as well.

Result:

More informations for debugging SSL errors."
a9863f8128189098263ebfe42359d8c6d53f4b4e,"Add headers to MqttMessage returned by MqttDecoder in case of DecoderException (#8219)

Motivation:
When the MqttDecoder decodes a message larger than the 'maxBytesInMessage' a DecoderException is thrown and a MqttMessage with just the failure cause is returned. Even if I can't handle the message, I might want to send an ACK so that I won't have to worry about it again.

Modification:
The DecoderException is thrown after the variableHeader is decoded. The fixed and variable headers are then added to the MqttMessage along with the failure cause.

Result:
The invalid MqttMessage will have headers if available."
e26666a7ea7774ea2f7cf25b812e270b5410f3b6,"Update to latest netty-tcnative (#8246)

Motivation:

We should use the latest netty-tcnative release which contains a fix to correctly support DH based ciphers when using openssl 1.1.x

Modifications:

Update to latest netty-tcnative which has the fix.

Result:

Correctly support DH ciphers in all cases. Fixes https://github.com/netty/netty/issues/8165."
9d8846cfce4daa9750ab822c91e5a37bc44906eb,"Cleanup Log4J2Logger (#8245)

Motivation:

Log4J2Logger had some code-duplication with AbstractInternalLogger

Modifications:

Reuse AbstractInternaLogger.EXCEPTION_MESSAGE in Log4J2Logger and so remove some code-duplication

Result:

Less duplicated code."
c1a335446daf5892eab2e134538ba0388162f18b,"Correctly implement SelectedSelectionKeySet iterator(), contains(...) and remove(...) (#8244)

Motivation:

Our SelectedSelectionKeySet does not correctly implement various methods which can be done without any performance overhead.

Modifications:

Implement iterator(), contains(...) and remove(...)

Result:

Related to https://github.com/netty/netty/issues/8242."
f4bafd4fe0a9fa71452d63eeb5cf9e5be2cb722e,"Correctly check if cipher is supported for each SslProvider before trying to run test and fix buffer leaks in test. (#8247)

Motivation:

5aaa16b24cee9d7455ea1cbb4cb9f2e43eb931b7 introduced a testcase for specific ciphersuites and checked if these are supported by our native implementation before running it. Unfortunally this is not good enough as even on the JDK it may not be supported on various JDK versions (like Java7). Beside this the test leaked buffers.

Modifications:

- Correctly check if ciphersuite is supported on each SslProvider before trying to run test.
- Fix buffer leaks.

Result:

Testsuite pass again on Java7 and others when -Pleak is used."
187b1b8a551bc8973b7544e21c0ef8bda92f40e5,"Correctly implement SelectedSelectionKeySet.remove(...) / contains(...) again so it works with the NIO Selector.

Motivation:

c1a335446daf5892eab2e134538ba0388162f18b reimplemented remove(...) and contains(...) in a way which made it not work anymore when used by the Selector.

Modifications:

Partly revert changes in c1a335446daf5892eab2e134538ba0388162f18b.

Result:

Works again as expected"
c74b3f3a3b73fee125048b0f486fc9c19fb3bc14,"Correctly implement SelectedSelectionKeySet.Iterator remove()

Motivation:

We need to implement remove() by ourselves to make it work on Java7 as otherwise it will throw an AbstractMethodError. This is a followup of c1a335446daf5892eab2e134538ba0388162f18b.

Modifications:

Just implemented remove()

Result:

Works on Java7 as well."
3eec66a974f85bb154966750678348afdb694789,"Do not fail on runtime when an older version of Log4J2 is on the classpath. (#8240)

Motivation:

At the moment we will just assume the correct version of log4j2 is used when we find it on the classpath. This may lead to an AbstractMethodError at runtime. We should not use log4j2 if the version is not correct.

Modifications:

Check on class loading if we can use Log4J2 or not.

Result:

Fixes #8217."
c78be334433af4b0d95bfa78d041a748a8490033,"Added configurable ByteBuf bounds checking (#7521)

Motivation:

The JVM isn't always able to hoist out/reduce bounds checking (due to ref counting operations etc etc) hence making it configurable could improve performances for most CPU intensive use cases.

Modifications:

Each AbstractByteBuf bounds check has been tested against a new static final configuration property similar to checkAccessible ie io.netty.buffer.bytebuf.checkBounds.

Result:

Any user could disable ByteBuf bounds checking in order to get extra performances."
379a56ca49195396bc78f1d96ec2cd7164255b96,"Add an Epoll benchmark

Motivation:
Optimizing the Epoll channel needs an objective measure of how fast
it is.

Modification:
Add a simple, closed loop,  ping-pong benchmark.

Result:
Benchmark can be used to measure #7816

Initial numbers:

```
Result ""io.netty.microbench.channel.epoll.EpollSocketChannelBenchmark.pingPong"":
  22614.403 ±(99.9%) 797.263 ops/s [Average]
  (min, avg, max) = (21093.160, 22614.403, 24977.387), stdev = 918.130
  CI (99.9%): [21817.140, 23411.666] (assumes normal distribution)

Benchmark                              Mode  Cnt      Score     Error  Units
EpollSocketChannelBenchmark.pingPong  thrpt   20  22614.403 ± 797.263  ops/s
```"
dc1b511fcf6d5f902c7ca475cbaa7fdd026c62f1,"Correctly reset offset when fail lazy because of too long frame. (#8257)

Motivation:

We need to reset the offset to 0 when we fail lazy because of a too long frame.

Modifications:

- Reset offset
- Add testcase

Result:

Fixes https://github.com/netty/netty/issues/8256."
ade60c11e16db5f83070c419bcf8fc701cdd15f9,"PlatformDependent0 should be able to better detect if unaligned access is supported on java9 and later. (#8255)

Motivation:

In Java8 and earlier we used reflection to detect if unaligned access is supported. This fails in Java9 and later as we would need to change the accessible level of the method.
Lucky enough we can use Unsafe directly to read the content of the static field here.

Modifications:

Add special handling for detecting if unaligned access is supported on Java9 and later which does not fail due jigsaw.

Result:

Better and more correct detection on Java9 and later."
3c2dbdb5db30bc0ce691f29aadff55c3f18dd60b,"NioEventLoop should also use our special SelectionKeySet on Java9 and later. (#8260)

Motivation:

In Java8 and earlier we used reflection to replace the used key set if not otherwise told. This does not work on Java9 and later without special flags as its not possible to call setAccessible(true) on the Field anymore.

Modifications:

- Use Unsafe to instrument the Selector with out special set when sun.misc.Unsafe is present and we are using Java9+.

Result:

NIO transport produce less GC on Java9 and later as well."
8635d88d4de056b82f86af901ff6cc95b37e422b,"Allow to generate a jmh uber jar to run benchmarks easily from cmdline with different arguments. (#8264)

Motivation:

It is sometimes useful to be able to run benchmarks easily from the commandline and passs different arguments / options here. We should support this.

Modifications:

Add the benchmark-jar profile which allows to generate such an ""uber-jar"" that can be used directly to run benchmarks as documented at http://openjdk.java.net/projects/code-tools/jmh/.

Result:

More flexible way to run benchmarks."
02d559e6a4fa0f77b5d406996238d8aa485d0b61,"Remove flags when running benchmarks. (#8262)

Motivation:

Some of the flags we used are not supported anymore on more recent JDK versions. We should just remove all of them and only keep what we really need. This may also reflect better what people use in production.

Modifications:

Remove some flags when running the benchmarks.

Result:

Benchmarks also run with JDK11."
5ff6b579403eacb6288f50cd0d5fb5641c1aa276,"PemPrivateKey.toPem(...) should throw IllegalArgumentException when P… (#8253)

* PemPrivateKey.toPem(...) should throw IllegalArgumentException when PrivateKey which does not support encoding is used.

Motivation:

At the moment when a PrivateKey is used that does not support encoding we throw a NPE when trying to convert the key. We should better throw an IllegalArgumentException with the details about what key we tried to encode.

Modifications:

- Check if PrivateKey.getEncoded() returns null and if so throw an IllegalArgumentException
- Add unit test.

Result:

Better handling of non-supported PrivateKey implementations."
052c2fbefeea9f9da7d8299488e689e60aec25a9,"Update to jmh 1.2.1 (#8270)

Motivation:

We should use the latest jmh version which also supports -prof dtraceasm on MacOS.

Modifications:

Update to latest jmh version.

Result:

Better benchmark / profiling support on MacOS."
afe0767e9c150369cd6ea150b5cc1a9021fd5c3c,"Log the correct line-number when using SLF4j with netty if possible. (#8258)

* Log the correct line-number when using SLF4j with netty if possible.

Motivation:

At the moment we do not log the correct line number in many cases as it will log the line number of the logger wrapper itself. Slf4j does have an extra interface that can be used to filter out these nad make it more usable with logging wrappers.

Modifications:

Detect if the returned logger implements LocationAwareLogger and if so make use of its extra methods to be able to log the correct origin of the log request.

Result:

Better logging when using slf4j."
e542a2cf26774885a87014f8b47ea22aa8157da0,"Use a non-volatile read for ensureAccessible() whenever possible to reduce overhead and allow better inlining. (#8266)

Motiviation:

At the moment whenever ensureAccessible() is called in our ByteBuf implementations (which is basically on each operation) we will do a volatile read. That per-se is not such a bad thing but the problem here is that it will also reduce the the optimizations that the compiler / jit can do. For example as these are volatile it can not eliminate multiple loads of it when inline the methods of ByteBuf which happens quite frequently because most of them a quite small and very hot. That is especially true for all the methods that act on primitives.

It gets even worse as people often call a lot of these after each other in the same method or even use method chaining here.

The idea of the change is basically just ue a non-volatile read for the ensureAccessible() check as its a best-effort implementation to detect acting on already released buffers anyway as even with a volatile read it could happen that the user will release it in another thread before we actual access the buffer after the reference check.

Modifications:

- Try to do a non-volatile read using sun.misc.Unsafe if we can use it.
- Add a benchmark

Result:

Big performance win when multiple ByteBuf methods are called from a method.

With the change:
UnsafeByteBufBenchmark.setGetLongUnsafeByteBuf  thrpt   20  281395842,128 ± 5050792,296  ops/s

Before the change:
UnsafeByteBufBenchmark.setGetLongUnsafeByteBuf  thrpt   20  217419832,801 ± 5080579,030  ops/s"
c14efd952d7901924116eaff1431a88feccee320,"Directly init refCnt to 1 (#8274)

Motivation:

We should just directly init the refCnt to 1 and not use the AtomicIntegerFieldUpdater.

Modifications:

Just assing directly to 1.

Result:

Cleaner code and possible a bit faster as the JVM / JIT may be able to optimize the first store easily."
2a1596a4e9f6f9e5dad94ee2e83c4eb4f9dce0c6,"Allow to configure socket option SO_BUSY_POLL (#8268)

Motivation:

When using Epoll based transport, allow applications to configure SO_BUSY_POLL socket option:

       SO_BUSY_POLL (since Linux 3.11)
              Sets the approximate time in microseconds to busy poll on a
              blocking receive when there is no data.  Increasing this value
              requires CAP_NET_ADMIN.  The default for this option is con‐
              trolled by the /proc/sys/net/core/busy_read file.

              The value in the /proc/sys/net/core/busy_poll file determines
              how long select(2) and poll(2) will busy poll when they oper‐
              ate on sockets with SO_BUSY_POLL set and no events to report
              are found.

              In both cases, busy polling will only be done when the socket
              last received data from a network device that supports this
              option.

              While busy polling may improve latency of some applications,
              care must be taken when using it since this will increase both
              CPU utilization and power usage.

Modification:

Added SO_BUSY_POLL socket option
Result:

Able to configure SO_BUSY_POLL from Netty"
1dff107de1645e39a54796c4f297f014358ddfcd,"Don't re-arm timerfd each epoll_wait (#7816)

Motivation:
The Epoll transport checks to see if there are any scheduled tasks
before entering epoll_wait, and resets the timerfd just before.
This causes an extra syscall to timerfd_settime before doing any
actual work.   When scheduled tasks aren't added frequently, or
tasks are added with later deadlines, this is unnecessary.

Modification:
Check the *deadline* of the peeked task in EpollEventLoop, rather
than the *delay*.  If it hasn't changed since last time, don't
re-arm the timer

Result:
About 2us faster on gRPC RTT 50pct latency benchmarks.

Before (2 runs for 5 minutes, 1 minute of warmup):

```
50.0%ile Latency (in nanos):		64267
90.0%ile Latency (in nanos):		72851
95.0%ile Latency (in nanos):		78903
99.0%ile Latency (in nanos):		92327
99.9%ile Latency (in nanos):		119691
100.0%ile Latency (in nanos):		13347327
QPS:                           14933

50.0%ile Latency (in nanos):		63907
90.0%ile Latency (in nanos):		73055
95.0%ile Latency (in nanos):		79443
99.0%ile Latency (in nanos):		93739
99.9%ile Latency (in nanos):		123583
100.0%ile Latency (in nanos):		14028287
QPS:                           14936
```

After:
```
50.0%ile Latency (in nanos):		62123
90.0%ile Latency (in nanos):		70795
95.0%ile Latency (in nanos):		76895
99.0%ile Latency (in nanos):		90887
99.9%ile Latency (in nanos):		117819
100.0%ile Latency (in nanos):		14126591
QPS:                           15387

50.0%ile Latency (in nanos):		61021
90.0%ile Latency (in nanos):		70311
95.0%ile Latency (in nanos):		76687
99.0%ile Latency (in nanos):		90887
99.9%ile Latency (in nanos):		119527
100.0%ile Latency (in nanos):		6351615
QPS:                           15571
```"
9eb124bb629163f4b22ad223f611ed8b4eaa74e8,"Don't cause ClassCastException if registration fails during constructing DnsNameResolver. (#8280)

Motivation:

We should not try to cast the Channel to a DatagramChannel as this will cause a ClassCastException.

Modifications:

- Do not cast
- rethrow from constructor if we detect the registration failed.
- Add unit test.

Result:

Propagate correct exception."
6ed7c6c75d458047adc37470697f215e9d7436ea,"Return an ExtendSSLSession whenever possible to allow more strict checking when using OpenSSL (#8281)

Motivation:

When an ExtendedSSLSession is used its possible to do more strict checking of the keys during handshake. We should do this whenever possible.

Modification:

- Return an ExtendedSSLSession when using client-mode and Java7+
- Add unit test
- Simplify unit tests

Result:

More consistent behaviour."
2b1514ec5a34c03883731910f69416c7873fd864,"Only use KeyManagerFactory in SniClientTest when supported by OpenSSL version. (#8289)

Motivation:

6ed7c6c75d458047adc37470697f215e9d7436ea added a test which blindly assumed we can use a KeyManagerFactory all the time. This is only true if have OpenSSL 1.0.2 or later, which may not be the case.

Modifications:

Only use KeyManagerFactory in test if the OpenSSL version does support it.

Result:

More robust tests."
34d52fcbfe2a7e6017267101692e1e29f03896e5,"Implemented ExtendedOpenSslSession.getStatusResponses() so it not throws an UnsupportedOperationException. (#8290)

Motivation:

6ed7c6c75d458047adc37470697f215e9d7436ea added support for ExtendedOpenSslSession but we did not override getStatusResponses(). This lead to test failures on java9.

Modifications:

Implement ExtendedOpenSslSession.getStatusResponses() so it just returns an empty list.

Result:

Test pass again on Java9."
2ab3e13f08e8549c6957aa263390ceb36539b999,"Fix get charset from content-type header with multiple parameters (#8286)

Motivation:

Get charset from Content-Type header even it contains multiple parameters.

Modification:

Extract charset value from the charset parameter if it is not last.

Result:

Fixes #8273"
687275361f96076c80787af4617882eb2bc6e9d2,"Update to Conscrypt 1.3.0 (#8296)

Motivation:

Conscrypt 1.3.0 was just released and adds support for TLSv1.3

Modifications:

Update to 1.3.0

Result:

Use latest conscrypt during build / test."
1b6e47ab2be03cb0d1cafcdf3862ed6591636e7a,"Fix incorrectly encoded empty SOCKS5 address (#8292)

Motivation:

If you encode a SOCKS5 message like new DefaultSocks5CommandResponse(FAILURE, DOMAIN, """", 0)
you correctly get a result of 05010003000000.
But if the bndAddr is null, for example like new DefaultSocks5CommandResponse(FAILURE, DOMAIN)
the encoded result is 0501000301000000 which means the domain name has a length of one and consists of a 0-byte.

Modification:

With this commit it is also correctly encoded as a string of 0 length.

Result:

Correctly encode empty SOCKS5 address"
01db30a163819b34cd9f96fb40526c93b48e7534,"Correctly implement ExtendedSSLSession.getStatusResponses() for ReferenceCountedOpenSslEngine (#8297)

Motivation:

Java9 added getStatusResponses() to ExtendedSSLSession which we should correctly support when possible.

Modifications:

Implement the method correctly.

Result:

More complete and correct implementation."
a80c49828f8d52b70e68b8a4c80f677ca44af0af,"Cleanup SSL test. (#8301)

Motivation:

I noticed that we had some errors showing up in a test (which did not fail it tho) because we tried to full-fill the promise multiples times.

Modifications:

Use trySuccess(...) as we may produce multiple exceptions.

Result:

Less errors during test-run."
9a3be347af35107201f7d4a72416e76cf6b39a82,"Ensure we always encode all data in JdkZlibEncoder. (#8305)

Motivation:

In theory our estimation of the needed buffer could be off and so we need to ensure we grow it if there is no space left.

Modifications:

Ensure we grow the buffer if there is no space left in there but we still have data to deflate.

Result:

Correctly deflate data in all cases."
60a7ece4c3037cc5f9a76cf22ecb57dad2563d74,"Update to final Java11 release (#8320)

Motivation:

We should use final Java11 release during builds.

Modifications:

Update to final Java11 release

Result:

Use latest release."
4d1458604ab3d378192c6240dd12ea85d1223838,"Fix leak in SniClientTest. (#8324)

Motivation:

We need to release the ReferenceCountedSslContext to eliminate resource leaks.

Reported in https://garage.netty.io/teamcity/viewLog.html?buildId=33353&buildTypeId=netty_build_oraclejdk8&tab=buildLog#_focus=157264.

Modifications:

Call release on the SslContext instances.

Result:

No more leaks in tests."
618a98fdb5deeeed250bcd1c044ef52518c5a43f,"Add profile to be able to compile on java12 (#8321)

Motivation:

First EA releases of Java12 are out we should be able to compile with these and run tests.

Modifications:

Add maven profile for java12.

Result:

Be able to use Java12"
ba594bcf4a62c47810f85c6d28e87367c6903ed4,"Fixed illegal reflective access by not relying on a sun.net.dns class. (#8318) (#8319)

Motivation

Applications should not depend on internal packages with Java 9 and later. This cause a warning now, but will break in future versions of Java.

Modification

This change adds methods to UnixResolverDnsServerAddressStreamProvider (following after #6844) that parse /etc/resolv.conf for domain and search entries. Then DnsNameResolver does not need to rely on sun.net.dns.ResolverConfiguration to do this.

Result

Fixes #8318. Furthermore, at least in my testing with Java 11, this also makes multiple search entries work properly (previously I was only getting the first entry)."
c546ab20a1721ae98142398e187c2c4a3c07d41a,"Ensure ByteToMessageDecoder.Cumulator implementations always release in buffer. (#8325)

Motivation:

We need to ensure the Cumulator always releases the input buffer if it can not take over the ownership of it as otherwise it may leak.

Modifications:

- Correctly ensure the buffer is always released.
- Add unit tests.

Result:

Ensure buffer is always released."
9acd9273c14bd8a5364f749b51f9dacefb6b7e99,"Allow to run tests with leak detection enabled. (#8323)

Motivation:

We should add some command to be able to run all tests with leak detection enabled. This will then be used on the CI during PR builds.

Modifications:

Add new docker-compose config to run with leak-detection enabled.

Result:

Easy way to enable leak detection while running tests via docker."
652650e127dbabbcfd7b41d4bd0991a7ad5f87ad,"Fix leak in SniClientJava8TestUtil (#8326)

Motivation:

4d1458604ab3d378192c6240dd12ea85d1223838 did fix some leaks in SniClientTest but missed the ones in SniClientJava8TestUtil.

Modifications:

Correctly release SslContext.

Result:

No more leaks in SNI tests."
70efd25801eed5a2ba37828bd681bd71976853bb,"Add docker-compose config to run with Java12 (#8327)

Motivation:

The first EA builds for Java12 are released so we should allow to run with these in our docker-compose setup.

Modifications:

Add docker-compose configs for Java12.

Result:

Be able to run easily with Java12 as well."
5650db582607a8eb95022cd73cdc490cc94c0e1c,"Add cache for CNAME mappings resolved during lookup of DNS entries. (#8314)

* Add cache for CNAME mappings resolved during lookup of DNS entries.

Motivation:

If the CNAMEd hostname is backed by load balancing component, typically the final A or AAAA DNS records have small TTL. However, the CNAME record itself is setup with longer TTL.

For example:
* x.netty.io could be CNAMEd to y.netty.io with TTL of 5 min
* A / AAAA records for y.netty.io has a TTL of 0.5 min

In current Netty implementation, original hostname is saved in resolved cached with the TTL of final A / AAAA records. When that cache entry expires, Netty recursive resolver sends at least two queries — 1st one to be resolved as CNAME record and the 2nd one to resolve the hostname in CNAME record.
If CNAME record was cached, only the 2nd query would be needed most of the time. 1st query would be needed less frequently.

Modifications:

Add a new CnameCache that will be used to cache CNAMEs and so may reduce queries.

Result:

Less queries needed when CNAME is used."
b81c8ed55c00c068a991c68b1ca222b6886ceaa0,"Use AuthoritativeDnsServerCache for creating the new redirect stream. (#8316)

* Use AuthoritativeDnsServerCache for creating the new redirect stream.

Motivation:

At the moment if a user wants to provide custom sorting of the nameservers used for redirects it needs to be implemented in two places. This is more complicated as it needs to be.

Modifications:

- Just delegate to the AuthoritativeDnsServerCache always as we fill it before we call newRedirectDnsServerStream anyway.

Result:

Easier way for the user to implement custom sorting."
3a9ac829d53e1da7365db2d8f544d7d112147321,[maven-release-plugin] prepare release netty-4.1.30.Final
2d7cb47eddc79c4b43a1fb3996e8cb8bde15bff3,[maven-release-plugin] prepare for next development iteration
a208f6dc7c775ce8d7934f252cd6fa7527643f76,"Do the same extended checks as the JDK when a X509TrustManager is used with the OpenSSL provider. (#8307)

Motivation:

When a X509TrustManager is used while configure the SslContext the JDK automatically does some extra checks during validation of provided certs by the remote peer. We should do the same when our native implementation is used.

Modification:

- Automatically wrap a X509TrustManager and so do the same validations as the JDK does.
- Add unit tests.

Result:

More consistent behaviour. Fixes https://github.com/netty/netty/issues/6664."
73acac13f48be32e04f936f3d09e202e7590f0a0,"Check if hostname validation is supported before trying to use in test. (#8333)

Motivation:

a208f6dc7c775ce8d7934f252cd6fa7527643f76 added a testcase which uses hostname validation which may not be supported by OpenSSL depending on the version that is used. We should check first before we try to use it.

Modifications:

Add assumeTrue(...) check to ensure hostname validation is supported before trying to run the test.

Result:

No more test-failures on OpenSSL versions < 1.0.2."
59973e93dd7da715eee709788573e3515cc50238,"Ensure X509KeyManager methods are called on the correct time when using server-side and support more methods of ExtendedSSLSession. (#8283)

Motivation:

Before when on server-side we just called the X509KeyManager methods when handshake() was called the first time which is not quite correct as we may not have received the full SSL hello / handshake and so could not extra for example the SNI hostname that was requested.
OpenSSL exposes the SSL_CTX_set_cert_cb function which allows to set a callback which is executed at the correct moment, so we should use it. This also allows us to support more methods of ExtendedSSLSession easily.

Modifications:

- Make use of new methods exposed by netty-tcnative since https://github.com/netty/netty-tcnative/pull/388 to ensure we select the key material at the correct time.
- Implement more methods of ExtendedOpenSslSession
- Add unit tests to ensure we are able to retrieve various things on server-side in the X509KeyManager and so verify it is called at the correct time.
- Simplify code by using new netty-tcnative methods.

Result:

More correct implementation for server-side usage and more complete implemented of ExtendedSSLSession."
6138541033ee20fbef864dc5535bcd0db370593e,"Avoid repeating the same field and hiding it (#8335)

Motivation

The EpollChannelConfig (same for KQueues) and its subclasses repeatetly declare their own channel field which leads to a 3x repetition for each config instance. Given the fields are protected or package-private it's exposing the code code to ""field hiding"" bugs.

Modifications

Use the the existing protected channel field from the DefaultChannelConfig class and simply cast it when needed.

Result

Fixes #8331"
a95b7a791e93192af417c9587626b2c28750fde6,"Notify http2 error handler before closeStreamLocal on HEADERS write failure (#8332)

Motivation:

When writing an HTTP/2 HEADERS with END_STREAM=1, the application expects
the stream to be closed afterward. However, the write can fail locally
due to HPACK encoder and similar. When that happens we need to make sure
to issue a RST_STREAM otherwise the stream can be closed locally but
orphaned remotely. The RST_STREAM is typically handled by
Http2ConnectionHandler.onStreamError, which will only send a RST_STREAM
if that stream still exists locally.

There are two possible flows for trailers, one handled immediately and
one going through the flow controller. Previously they behaved
differently, with the immedate code calling the error handler after
closing the stream. The immediate code also used a listener for calling
closeStreamLocal while the flow controlled code did so immediately after
the write.

The two code paths also differed in their VoidChannelPromise handling,
but both were broken. The immediate code path called unvoid() only if
END_STREAM=1, however it could always potentially add a listener via
notifyLifecycleManagerOnError(). And the flow controlled code path
unvoided incorrectly, changing the promise completion behavior. It also
passed the wrong promise to closeStreamLocal() in FlowControlledBase.

Modifications:

Move closeStreamLocal handling after calls to onError. This is the
primary change.

Now call closeStreamLocal immediately instead of when the future
completes. This is the more likely correct behavior as it matches that
of DATA frames.

Fix all the VoidChannelPromise handling.

Result:

Http2ConnectionHandler.onStreamError sees the same state as the remote
and issues a RST_STREAM, properly cleaning up the stream."
3a96e7373b55d97c1b1d789b2a78fa903af5b684,"Added option to do busy-wait on epoll (#8267)

Motivation:

Add an option (through a SelectStrategy return code) to have the Netty event loop thread to do busy-wait on the epoll.

The reason for this change is to avoid the context switch cost that comes when the event loop thread is blocked on the epoll_wait() call.

On average, the context switch has a penalty of ~13usec.

This benefits both:

The latency when reading from a socket
Scheduling tasks to be executed on the event loop thread.
The tradeoff, when enabling this feature, is that the event loop thread will be using 100% cpu, even when inactive.

Modification:

Added SelectStrategy option to return BUSY_WAIT
Epoll loop will do a epoll_wait() with no timeout
Use pause instruction to hint to processor that we're in a busy loop
Result:

When enabled, minimizes impact of context switch in the critical path"
6cebb6069b3f30eedaddb12d2d22a6dd66277047,"remove unnecessary vararg argument in PooledByteBufAllocator (#8338)

Motivation:

No need in varargs, the method always accepts array.

Modification:

... replaced with []"
fc28bccdf19ea9d145f274a87002bdb1f45f840c,"Fix SelectableChannel support in NioEventLoop (#8344)

Motivation:

Unless the 'io.netty.noKeySetOptimization' system property is set,
registering a SelectableChannel instance to a NioEventLoop results
in a ClassCastException:

    io.netty.channel.nio.SelectedSelectionKeySetSelector cannot be cast
        to java.nio.channels.spi.AbstractSelector

Modifications:

Instead of 'selector', pass 'unwrappedSelector' to SelectableChannel.

Result:

It is possible to register a SelectableChannel instance without
setting the 'io.netty.noKeySetOptimization' system property."
83dc3b503ef692601a77f46c612c7e00bafd2336,"ByteBufInputStream is always allocating a StringBuilder instance (#8347)

Motivation:

Avoid creating any StringBuilder instance if
ByteBufInputStream::readLine isn't used

Modifications:

The StringBuilder instance is lazy allocated on demand and
are added new test case branches to address the increased
complexity of ByteBufInputStream::readLine

Result:

Reduced GC activity if ByteBufInputStream::readLine isn't used"
0e4186c5525eacf8fd1f3ce706c5908546c307ec,"deprecate IntegerHolder for removal (#8339)

Motivation:

Seems like IntegerHolder counterHashCode field is the very old legacy field that is no longer used. Should be marked as deprecated and removed in the future versions.

Modification:

IntegerHolder class, InternalThreadLocalMap.counterHashCode() and InternalThreadLocalMap.setCounterHashCode(IntegerHolder counterHashCode) are now deprecated."
652650b0dbbf515d8ddb6322fcd2bade91452869,"Correctly decrement pending bytes when submitting AbstractWriteTask fails. (#8349)

Motivation:

Currently we may end up in the situation that we incremented the pending bytes before submitting the AbstractWriteTask but never decrement these again if the submitting of the task fails. This may result in incorrect watermark handling.

Modifications:

- Correctly decrement pending bytes if subimitting of task fails and also ensure we recycle it correctly.
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8343."
2a4bb346cfeda9caf1a17a242c562125e096bf3e,"Correctly parse /etc/resolv.conf when contain multiple entries for searchdomain. (#8351)

Motivation:

ba594bcf4a62c47810f85c6d28e87367c6903ed4 added a utility to parse searchdomains defined in /etc/resolv.conf but did not correctly handle the case when multiple are defined that are seperated by either whitespace or tab.

Modifications:

- Correctly parse multiple entries
- Add unit test.

Result:

Correctly parse multiple searchdomain entries."
5b3b8db07fdb66d05e1a44193ca7bcaa64420051,"epoll_wait produces an EINVAL error since 4.1.30 (#8350)

Motivation:

epoll_wait should work in 4.1.30 like it did in 4.1.29.

Modifications:

Revert Integer.MAX_VALUE back to MAX_SCHEDULED_TIMERFD_NS (999,999,999).
Add unit test.

Result:

epoll_wait will no longer throw EINVAL."
aae7cdca96130a22a3eeb77c69c4846e71facfc6,"Prevent NPE when attempting to set client key material with no alias (#8378)

Motivation:

It is possible that a client is unable to locate a certificate alias given the list of issuers and key types. In this case the X509KeyManager
will return a null which when past to the OpenSslKeyMaterialProvider implementation may produce a NPE. If no matching alias could be found we should not
call OpenSslKeyMaterialProvider at all which is also consistent what OpenJDK does.

Modifications:

- Add null check before calling OpenSslKeyMaterialProvider
- Add unit test.

Result:

No more NPE caused by passing null as client alias."
adb4ce1f3135e59ca98a3173a1dacb755b18c5a5,"Use MACOSX_DEPLOYMENT_TARGET=10.6 when compile native transport on MacOS (#8379)

Motivation:

MACOSX_DEPLOYMENT_TARGET=10.6 needs to be used as everything before is not supported in 10.14 anymore. 10.6 was released 2009 so this should be a safe thing to do.

Modifications:

Use MACOSX_DEPLOYMENT_TARGET=10.6

Result:

Be able to compile on MacOS 10.14"
7062ceedb0ed0d781bdad0002057abcf50b0c92d,"Simplify ByteBufInputStream.readLine() logic (#8380)

Motivation:

While looking at the nice optimization done in
https://github.com/netty/netty/pull/8347 I couldn't help noticing the
logic could be simplified further. Apologies if this is just my OCD and
inappropriate!

Modifications:

Reduce amount of code used for ByteBufInputStream.readLine()

Result:

Slightly smaller and simpler code"
4a2d03542b7d6c6da70b4ae7255717c6530621ff,Exclude mainframer related files from git
a542d4d78bb5008a2730dc0958ccbb4c32d7813a,"Increase test timeout (#8385)

Motivation:

It has shown that the used test timeout may be too low when the CI is busy.

Modifications:

Increase timeout to 3 seconds.

Result:

Less false-positives."
b59336142f143a5520c3d4948868be3ef57c0ae2,"deprecate own ConcurrentSet for removal (#8340)

Motivation:

Java since version 6 has the wrapper for the ConcurrentHashMap that could be created via Collections.newSetFromMap(map). So no need to create own ConcurrentSet class. Also, since netty plans to switch to Java 8 soon there is another method for that - ConcurrentHashMap.newKeySet().
For now, marking this class @deprecated would be enough, just to warn users who use netty's ConcurrentSet. After switching to Java 8 ConcurrentSet should be removed and replaced with ConcurrentHashMap.newKeySet().

Modification:

ConcurrentSet deprecated."
04001fdad1ca3c72625cddb1b1c7789381cb5f30,"Upgrade h2spec-maven-plugin (#8386)

Motivation:
- Version 0.3 would sometimes fail to report failing tests
- New version contains upgraded version of h2spec

Modifications:
- Bump h2spec-maven-plugin to 0.6
- Remove excluded specs that are no passing
- Add failing spec ""half closed (remote): Sends a HEADERS frame"" to
exclude list

Result:
Build will fail when non excluded specs fails."
9eebe7ed742e4ebeca17913782f327412babcf38,"Add full JdkSslContext public constructor, close #8384 (#8389)

Motivation:

JdkSslContext provides public constructors to wrap an existing `javax.net.ssl.SSLContext`.

Sadly, some options combinations are not possible with the existing constructors, eg:
*  protocols is not exposed and always forced to null, so default protocols are always enforced
* startTls is not exposed and always forced to false

Modification:

Add full constructor that take protocols and startTls parameters.

Result:

It's possible to create a JdkSslContext from an existing SSLContext and still have control over protocols and startTls"
0ddc62cec0b4715ae37cef0e6a9f8c79d42d74e9,"Add support for TLSv1.3 (#8293)

Motivation:

TLSv1.3 support is included in java11 and is also supported by OpenSSL 1.1.1, so we should support when possible.

Modifications:
- Add support for TLSv1.3 using either the JDK implementation or the native implementation provided by netty-tcnative when compiled against openssl 1.1.1
- Adjust unit tests for semantics provided by TLSv1.3
- Correctly handle custom Provider implementations that not support TLSv1.3

Result:

Be able to use TLSv1.3 with netty."
2109f14c24f90df3f43aee7f3248ac59e6088735,"When running our testsuite with netty-tcnative-boringssl-static we should use an empty classifier. (#8396)

Motivation:

We publish an ""uber-jar"" for netty-tcnative-boringssl-static so we should use it when testing against boringssl.

Modifications:

Ensure we use empty classifier.

Result:

Use uber-jar when testing"
3543e17967699b89edba7436c932853f9580dd9c,"Ensure OpenSslEngine will not try to call SSL_free multiple times even when constructor throws. (#8399)

Motivation:

When the constructor of OpenSslEngine threw we could end up to self call SSL_free by ourself and then have the finalizer do the same which may lead to double free-ing and so SIGSEV.

Modifications:

Just call shutdown() when the constructor throws and so ensure SSL_free is guarded correctly in the finalizer.

Result:

No more SIGSEV possible."
f24da67a239da4b9a4f5e97565061006994d2f7a,"Update jetty-alpn-agent version to support latest JDK 8 release. (#8402)

Motivation:

We need to update jetty-alpn-agent to be able to run tests with  OpenJDK 8u191

Modifications:

Update to 2.0.8

Result:

Be able to run tests with latest JDK 8 release."
47e4a58d90fa627658f8957d2e984b108139474b,"Explicit specify java version to use to ensure we rebuild image when java version changes. (#8397)

Motivation:

We should explicit specify the java version to use to ensure docker will rebuild the image once a new java version was released and we specify it. Also we should use openjdk for testing when possible.

Modifications:

- Explicit specify the java versions to use
- Use openjdk when possible.

Result:

Ensure latest java versions are used during testing"
201e984cb3995d59cf8254f851f0ffb9090c2fea,"Allow to use TLSv1.3 with netty-tcnative withe java versions prior to 11. (#8394)

Motivation:

At the moment it's only possible to use TLSv1.3 with netty-tcnative if Java 11 is used. It should be possible to do so even with Java 8, 9 and 10.

Modification:

Add a workaround to be able to use TLSv1.3 also when using Java version prior to Java 11 and the default X509ExtendedTrustManager is used.

Result:

Be able to use TLSv1.3 also with past versions of Java."
a6f807dd683243aa388aad0bfc9fcb20f3b1edce,"Fix context and window sizes sides. (#8395)

Motivation:

As mentioned in RFC 7692 :

The ""server_no_context_takeover"" Extension Parameter should be used on server side for compression and on client side for decompression.

The ""client_no_context_takeover"" Extension Parameter should be used on client side for compression and on server side for decompression.

Right now, in PerMessageDeflateClientExtensionHandshaker, the decoder uses clientNoContext instead of serverNoContext and the encoder uses serverNoContext instead of clientNoContext.

The same inversion is present in PerMessageDeflateServerExtensionHandshaker: the decoder uses
serverNoContext instead of clientNoContext, while the encoder uses serverNoContext instead of clientNoContext. Besides the context inversion, the sliding window sizes seem to be inversed as well.

Modification:

Inverse clientNoContext with serverNoContext and clientWindowSize with serverWindowSize for both the Decoder and Encoder in PerMessageDeflateServerExtensionHandshaker and PerMessageDeflateClientExtensionHandshaker.

Result:

This fixes the decompression fail in the case that one of the contexts is set and the other one is not."
3a4a0432d309dd17de86bd1cf4742030174fc190,"Fix broken testsuite-shading when using with netty-tcnative-boringssl-static (#8404)

Motivation:

2109f14c24f90df3f43aee7f3248ac59e6088735 corrected how we run the testsuite with boringssl-static but missed to also adjust the testsuite-shading configuration which lead to test failures.

Modifications:

Correctly compose the native lib name when no classifier is used.

Result:

Testsuite passes again."
69545aedc444a380729c3b4cf441cf5b438f939d,"CompositeByteBuf.decompose(...) does not correctly slice content. (#8403)

Motivation:

CompositeByteBuf.decompose(...) did not correctly slice the content and so produced an incorrect representation of the data.

Modifications:

- Rewrote implementation to fix bug and also improved it to reduce GC
- Add unit tests.

Result:

Fixes https://github.com/netty/netty/issues/8400."
87ec2f882af36a4f14e2a3e3f1e2346bad848e7d,"Reduce overhead by ByteBufUtil.decodeString(...) which is used by `AbstractByteBuf.toString(...)` and `AbstractByteBuf.getCharSequence(...)` (#8388)

Motivation:

Our current implementation that is used for toString(Charset) operations on AbstractByteBuf implementation is quite slow as it does a lot of uncessary memory copies. We should just use new String(...) as it has a lot of optimizations to handle these cases.

Modifications:

Rewrite ByteBufUtil.decodeString(...) to use new String(...)

Result:

Less overhead for toString(Charset) operations.

Benchmark                                         (charsetName)  (direct)  (size)   Mode  Cnt         Score         Error  Units
ByteBufUtilDecodeStringBenchmark.decodeString          US-ASCII     false       8  thrpt   20  22401645.093 ? 4671452.479  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString          US-ASCII     false      64  thrpt   20  23678483.384 ? 3749164.446  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString          US-ASCII      true       8  thrpt   20  15731142.651 ? 3782931.591  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString          US-ASCII      true      64  thrpt   20  16244232.229 ? 1886259.658  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString             UTF-8     false       8  thrpt   20  25983680.959 ? 5045782.289  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString             UTF-8     false      64  thrpt   20  26235589.339 ? 2867004.950  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString             UTF-8      true       8  thrpt   20  18499027.808 ? 4784684.268  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString             UTF-8      true      64  thrpt   20  16825286.141 ? 1008712.342  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString            UTF-16     false       8  thrpt   20   5789879.092 ? 1201786.359  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString            UTF-16     false      64  thrpt   20   2173243.225 ?  417809.341  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString            UTF-16      true       8  thrpt   20   5035583.011 ? 1001978.854  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString            UTF-16      true      64  thrpt   20   2162345.301 ?  402410.408  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString        ISO-8859-1     false       8  thrpt   20  30039052.376 ? 6539111.622  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString        ISO-8859-1     false      64  thrpt   20  31414163.515 ? 2096710.526  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString        ISO-8859-1      true       8  thrpt   20  19538587.855 ? 4639115.572  ops/s
ByteBufUtilDecodeStringBenchmark.decodeString        ISO-8859-1      true      64  thrpt   20  19467839.722 ? 1672687.213  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld       US-ASCII     false       8  thrpt   20  10787326.745 ? 1034197.864  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld       US-ASCII     false      64  thrpt   20   7129801.930 ? 1363019.209  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld       US-ASCII      true       8  thrpt   20   9002529.605 ? 2017642.445  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld       US-ASCII      true      64  thrpt   20   3860192.352 ?  826218.738  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld          UTF-8     false       8  thrpt   20  10532838.027 ? 2151743.968  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld          UTF-8     false      64  thrpt   20   7185554.597 ? 1387685.785  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld          UTF-8      true       8  thrpt   20   7352253.316 ? 1333823.850  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld          UTF-8      true      64  thrpt   20   2825578.707 ?  349701.156  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld         UTF-16     false       8  thrpt   20   7277446.665 ? 1447034.346  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld         UTF-16     false      64  thrpt   20   2445929.579 ?  562816.641  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld         UTF-16      true       8  thrpt   20   6201174.401 ? 1236137.786  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld         UTF-16      true      64  thrpt   20   2310674.973 ?  525587.959  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld     ISO-8859-1     false       8  thrpt   20  11142625.392 ? 1680556.468  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld     ISO-8859-1     false      64  thrpt   20   8127116.405 ? 1128513.860  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld     ISO-8859-1      true       8  thrpt   20   9405751.952 ? 2193324.806  ops/s
ByteBufUtilDecodeStringBenchmark.decodeStringOld     ISO-8859-1      true      64  thrpt   20   3943282.076 ?  737798.070  ops/s

Benchmark result is saved to /home/norman/mainframer/netty/microbench/target/reports/performance/ByteBufUtilDecodeStringBenchmark.json
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1,030.173 sec - in io.netty.buffer.ByteBufUtilDecodeStringBenchmark
[1030.460s][info   ][gc,heap,exit ] Heap
[1030.460s][info   ][gc,heap,exit ]  garbage-first heap   total 516096K, used 257918K [0x0000000609a00000, 0x0000000800000000)
[1030.460s][info   ][gc,heap,exit ]   region size 2048K, 127 young (260096K), 2 survivors (4096K)
[1030.460s][info   ][gc,heap,exit ]  Metaspace       used 17123K, capacity 17438K, committed 17792K, reserved 1064960K
[1030.460s][info   ][gc,heap,exit ]   class space    used 1709K, capacity 1827K, committed 1920K, reserved 1048576K"
91201fb338b29727b18de734f0bdbb2a07458f45,"Remove workaround in tests for TLSv1.3 bug in Java11 as it was fixed in 11.0.1 (#8409)

Motivation:

We had put some workaround in our tests due a bug in the Java11 implementation of TLSv1.3. This was now fixes as part of 11.0.1.

See https://bugs.openjdk.java.net/browse/JDK-8211067.

Modifications:

Remove workaround in SSL tests.

Result:

Run all tests with supported TLS version."
a93ff3a0e4b909166dc42ecb236a13a439f47eac,"Upgrade commons-compress to 2.0.18 (#8416)

Motivation:

Commons-compress < 2.0.18 has a security flaw so we should upgrade (even if we only use it in tests anyway).

Modifications:

Update to 2.0.18

Result:

Use latest version."
fc35e20e2caad93b7f9e06f39a6a201a1857b5c7,"Include correct duped value in DefaultResourceLeak.toString() (#8413)

Motivation:

DefaultResourceLeak.toString() did include the wrong value for duplicated records.

Modifications:

Include the correct value.

Result:

Correct toString() implementation."
9e762e8816fef48e3cfba563c55f8c9cd6bce010,"Correctly detect if KeyManagerFactory is supported by OpenSSL even when sun.security.x509.* can not be accessed and bouncycastle is not on the classpath. (#8415)

Motivation:

OpenSsl used SelfSignedCertificate in its static init block to detect if KeyManagerFactory is supported. Unfortunally this only works when either sun.security.x509.* can be accessed or bouncycastle is on the classpath.
We should not depend on either of it.

This came up in https://github.com/netty/netty-tcnative/issues/404#issuecomment-431551890.

Modifications:

Just directly use the bytes to generate the X509Certificate and so not depend on sun.security.x509.* / bouncycastle.

Result:

Correctly be able to detect if KeyManagerFactory can be supported in all cases."
0cdd9de6decbb7c07c83640c367b4f34473970ff,"Update to JDK 12 EA16 when running CI jobs against JDK 12. (#8421)

Motivation:

A new EA release was done, we should always run against the latest.

Modifications:

Update to EA 16.

Result:

CI runs with latest EA release for JDK12."
1cc692dd7de54bfffa05813a90b14670b4eb50d1,"Fix incorrect reachability assumption in ResourceLeakDetector (#8410)

Motivation:

trackedObject != null gives no guarantee that trackedObject remains reachable. This may cause problems related to premature finalization: false leak detector warnings.
 
Modifications:

Add private method reachabilityFence0 that works on JDK 8 and can be factored out into PlatformDependent. Later, it can be swapped for the real Reference.reachabilityFence.
 
Result:

No false leak detector warnings in future versions of JDK."
ce39773e04d6adb063cef62c0c31675272566880,"Add support for boringssl and TLSv1.3 (#8412)

Motivation:

0ddc62cec0b4715ae37cef0e6a9f8c79d42d74e9 added support for TLSv1.3 when using openssl 1.1.1. Now that BoringSSL chromium-stable branch supports it as well we can also support it with netty-tcnative-boringssl-static.
During this some unit tests failed with BoringSSL which was caused by not correctly handling flush() while the handshake is still in progress.

Modification:

- Upgrade netty-tcnative version which also supports TLSv1.3 when using BoringSSL
- Correctly handle flush() when done while the handshake is still in progress in all cases.

Result:

Easier for people to enable TLSv1.3 when using native SSL impl.
Ensure flush() while handshake is in progress will always be honored."
583d838f7c02c864c4ab4bc095c01e9b45963fcf,"Optimize AbstractByteBuf.getCharSequence() in US_ASCII case (#8392)

* Optimize AbstractByteBuf.getCharSequence() in US_ASCII case

Motivation:

Inspired by https://github.com/netty/netty/pull/8388, I noticed this
simple optimization to avoid char[] allocation (also suggested in a TODO
here).

Modifications:

Return an AsciiString from AbstractByteBuf.getCharSequence() if
requested charset is US_ASCII or ISO_8859_1 (latter thanks to
@Scottmitch's suggestion). Also tweak unit tests not to require Strings
and include a new benchmark to demonstrate the speedup.

Result:

Speed-up of AbstractByteBuf.getCharSequence() in ascii and iso 8859/1
cases"
d7fa7be67fb3cd5020ab89b64b311ff3dc7c82bb,"Exploit PlatformDependent.allocateUninitializedArray() in more places (#8393)

Motivation:

There are currently many more places where this could be used which were
possibly not considered when the method was added.

If https://github.com/netty/netty/pull/8388 is included in its current
form, a number of these places could additionally make use of the same
BYTE_ARRAYS threadlocal.

There's also a couple of adjacent places where an optimistically-pooled
heap buffer is used for temp byte storage which could use the
threadlocal too in preference to allocating a temp heap bytebuf wrapper.
For example
https://github.com/netty/netty/blob/4.1/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java#L1417.

Modifications:

Replace new byte[] with PlatformDependent.allocateUninitializedArray()
where appropriate; make use of ByteBufUtil.getBytes() in some places
which currently perform the equivalent logic, including avoiding copy of
backing array if possible (although would be rare).

Result:

Further potential speed-up with java9+ and appropriate compile flags.
Many of these places could be on latency-sensitive code paths."
b6522927d71d1c24e4e362165d5f70535046b5fe,"Add profile to easily run testsuite against netty-tcnative-boringssl-static (#8436)

Motivation:

We should provide an easy way to run our testsuite against netty-tcnative-boringssl-static

Modifications:

- Add boringssl profile which can be used to enable usage of netty-tcnative-boringssl-static
- Make use of the profile in docker-compose

Result:

Cleaner and easier way of running testsuite against netty-tcnative-boringssl-static"
48c45cf4aceb1e6e9dce8a0670af79570a11f369,"Fix leak and corruption bugs in CompositeByteBuf (#8438)

Motivation:

I came across two bugs:
- Components removed due to capacity reduction aren't released
- Offsets aren't set correctly on empty components that are added
between existing components

Modifications:

Add unit tests which expose these bugs, fix them.

Result:

Bugs are fixed"
9e5073960191d43dfa07277545f272da0c1f385a,[maven-release-plugin] prepare release netty-4.1.31.Final
3e7ddb36c793eeb039fe2a842a6cd917e7d5ddc6,[maven-release-plugin] prepare for next development iteration
46460de24387f9bc3467cbed0d5c61113f402cd2,"Correctly init X509Certificate array when testing if we need to wrap the KeyManager due of TLSv1.3 (#8435)

Motivation:

201e984cb3995d59cf8254f851f0ffb9090c2fea added support to use native TLSv1.3 support even with Java versions prior to 11. For this we try to detect if we need to wrap the used KeyManager or not. This testing code did create an X509Certificate[1] but does not correctly also set the certficiate on index 0. While this should be harmless we should better do the right thing and set it.

Modifications:

Correctly init the array.

Result:

Cleaner and more correct code."
44c3b824ecabe5d4bf52d3a9a7a30c456ee391b8,"Remove uninterpolated `{}` in DefaultHttp2ConnectionDecoder log message (#8441)

Motivation:

There are log messages emitted from Http2ConnectionDecoder of the form
```
INF i.n.h.c.h.DefaultHttp2ConnectionDecoder ignoring HEADERS frame for stream RST_STREAM sent. {}
```

Modifications:

Remove the trailing `{}` in the log message that doesn't have a value.

Result:

Log messages no longer have a trailing `{}`."
f4cf674f01fb8253f86ab7f5f18c37b49e3f758b,"Fix NPE when trying to build a DnsNameResolver with a null resolvedAddressTypes (#8445)

Motivation:

It should be possible to build a DnsNameResolver with a null resolvedAddressTypes, defaulting then to DEFAULT_RESOLVE_ADDRESS_TYPES (see line 309).

Sadly, `preferredAddressType` is then called on line 377 with the original parameter instead of the instance attribute, causing an NPE when it's null.

Modification:

Call preferredAddressType with instance attribuet instead of constructor parameter.

Result:

No more NPE"
f5bfab374ed7cdd468a75aa54d26994b192ea96c,"Maven compiler plugin 3.8.0 (#8417)

Motivation:

latest version of the plugin

Modification:

Bump up version in pom.xml

Result:

Use latest plugin"
52699bd6ddedc399a2d93af8f630dde2a4d2ad63,"Add test to verify that invalid ciphers are handled in all SSLEngine implementations correctly. (#8443)

Motivation:

https://github.com/netty/netty/issues/8442 reported that we fail to build a SslContext when an invalid cipher is used with netty-tcnative-boringssl-static, while it worked before. This test verifies that this is now consistent with all other SSLEngine implementations.

Modifications:

Add test-case to verify consistent behaviour

Result:

More tests to assert consistent behaviour across SSLEngine implementations"
44cca1a26f5c395420111fafa122bed5aeecfeb7,"Avoid allocations when wrapping byte[] and ByteBuffer arrays as ByteBuf (#8420)

Motivation:

Unpooled.wrap(byte[]...) and Unpooled.wrap(ByteBuffer...) currently
allocate/copy an intermediate ByteBuf ArrayList and array, which can be
avoided.

Modifications:

- Define new internal ByteWrapper interface and add a CompositeByteBuf
constructor which takes a ByteWrapper with an array of the type that it
wraps, and modify the appropriate Unpooled.wrap(...) methods to take
advantage of it
- Tidy up other constructors in CompositeByteBuf to remove duplication
and misleading len arg (which is really an end offset into provided
array)

Result:

Less allocation/copying when wrapping byte[] and ByteBuffer arrays,
tidier code."
d4b1202e62e52dc9b5619e666f5b0033d8a32bc9,"Add testcase for epollWait(...) with negative timerfd values. (#8447)

Motivation:

https://github.com/netty/netty/issues/8444 reports that there is some issue with negative values passed to timerfd_settime. This test verifies that everything is working as expected.

Modifications:

Add testcase.

Result:

Test to verify expected behaviour."
d533befa9617843f7b3e375e0ee4c4c89a35e16b,"PlatformDependent.maxDirectMemory() must respect io.netty.maxDirectMemory (#8452)

Motivation:

In netty we use our own max direct memory limit that can be adjusted by io.netty.maxDirectMemory but we do not take this in acount when maxDirectMemory() is used. That will lead to non optimal configuration of PooledByteBufAllocator in some cases.

This came up on stackoverflow:
https://stackoverflow.com/questions/53097133/why-is-default-num-direct-arena-derived-from-platformdependent-maxdirectmemory

Modifications:

Correctly respect io.netty.maxDirectMemory and so configure PooledByteBufAllocator correctly by default.

Result:

Correct value for max direct memory."
9c70dc8ba580731cb9c5a031185975384764183b,"Replaced obsolete cryptographic primitive with a modern/secure one. (#8450)

Motivation:

SHA1 is a broken hash function and shouldn't be used anymore (see: https://shattered.io/).
Security scanning tools will raise this as an issue and it will reflect badly on netty and I, therefore, recommend to use a SHA2 hash function which is secure and won't be flagged by such tools.

Modifications:

Replaced insecure SHA1 based signing scheme with SHA2.

Result:

Modern and thus secure cryptographic primitives will be in use and won't be flagged by security scanning tools."
359390d04ccddc135b833b38e20cc7dcd3d37676,"Update to maven-surefire-plugin 2.22.1 (#8418)

Motivation:

latest version of plugin should be used.

See https://blogs.apache.org/maven/entry/apache-maven-surefire-plugin-version1

Modification:

Update plugin version in pom.xml

Result:

n/a"
bde2865ef893f907fe99a140209f34af4d4396ef,"Make it clear that HashedWheelTimer only support millis. (#8322)

Motivation:

HWT does not support anything smaller then 1ms so we should make it clear that this is the case.

Modifications:

Log a warning if < 1ms is used.

Result:

Less suprising behaviour."
6fbb12e2c24a9beee12ed99f0b2d0a6d5b739d20,"#7695 no need to manually release chunk during upload (#7696)

Motivation:

After #7527 fix there is no need to manually release chunks (HttpData) during file upload as they will be released on HttpPostRequestDecoder.destroy().

Modification:

HttpUploadServer example doesn't release chunks manually (doesn't call data.release()).

Result:
Fixes #7695 and #7689"
4760dc5c2d9d7be3a0e6088eb47f57554bf45074,"Don't double release ByteBuf when parsing of the X509Certificate fails (#8457)

Motivation:

Due a bug in our implementation we tried to release the same ByteBuf two times when we failed to parse the X509Certificate as closing the ByteBufInputStream already closed it.

Modifications:

- Don't close the ByteBuf when closing the ByteBufInputStream
- Explicit release all ByteBufs after we are done parsing in a finally block.
- Add testcase.

Result:

Do not produce an IllegalReferenceCountException and throw the correct CertificateException."
9f6ebab514f3e62dfe539ab68f813aaa2c275dc3,"Update to latest openjdk 12 ea release. (#8459)

Motivation:

We should always test against the latest EA release.

Modifications:

Update to openjdk 12 ea17

Result:

Test against latest release"
6563f23a9b72e0efa3b3ededd3bc2ee9911f7402,"Don't swallow intermediate write failures in MessageToMessageEncoder (#8454)

Motivation:

If the encoder needs to flush more than one outbound message it will
create a new ChannelPromise for all but the last write which will
swallow failures.

Modification:

Use a PromiseCombiner in the case of multiple messages and the parent
promise isn't the `VoidPromise`.

Result:

Intermediate failures are propagated to the original ChannelPromise."
10539f4dc738c48e8d63c46b72ca32906d7f40ec,"Streamline CompositeByteBuf internals (#8437)

Motivation:

CompositeByteBuf is a powerful and versatile abstraction, allowing for
manipulation of large data without copying bytes. There is still a
non-negligible cost to reading/writing however relative to ""singular""
ByteBufs, and this can be mostly eliminated with some rework of the
internals.

My use case is message modification/transformation while zero-copy
proxying. For example replacing a string within a large message with one
of a different length

Modifications:

- No longer slice added buffers and unwrap added slices
   - Components store target buf offset relative to position in
composite buf
   - Less allocations, object footprint, pointer indirection, offset
arithmetic
- Use Component[] rather than ArrayList<Component>
   - Avoid pointer indirection and duplicate bounds check, more
efficient backing array growth
   - Facilitates optimization when doing bulk-inserts - inserting n
ByteBufs behind m is now O(m + n) instead of O(mn)
- Avoid unnecessary casting and method call indirection via superclass
- Eliminate some duplicate range/ref checks via non-checking versions of
toComponentIndex and findComponent
- Add simple fast-path for toComponentIndex(0); add racy cache of
last-accessed Component to findComponent(int)
- Override forEachByte0(...) and forEachByteDesc0(...) methods
- Make use of RecyclableArrayList in nioBuffers(int, int) (in line with
FasterCompositeByteBuf impl)
- Modify addComponents0(boolean,int,Iterable) to use the Iterable
directly rather than copy to an array first (and possibly to an
ArrayList before that)
- Optimize addComponents0(boolean,int,ByteBuf[],int) to not perform
repeated array insertions and avoid second loop for offset updates
- Simplify other logic in various places, in particular the general
pattern used where a sub-range is iterated over
- Add benchmarks to demonstrate some improvements

While refactoring I also came across a couple of clear bugs. They are
fixed in these changes but I will open another PR with unit tests and
fixes to the current version.

Result:

Much faster creation, manipulation, and access; many fewer allocations
and smaller footprint. Benchmark results to follow."
5954110b9a3aef1ca06de96cb74d76e2fc335c6c,"Use ByteBufUtil.BYTE_ARRAYS ThreadLocal temporary arrays in more places (#8464)

Motivation:

#8388 introduced a reusable ThreadLocal<byte[]> for use in
decodeString(...). It can be used in more places in the buffer package
to avoid temporary allocations of small arrays.

Modifications:

Encapsulate use of the ThreadLocal in a static package-private
ByteBufUtil.threadLocalTempArray(int) method, and make use of it from a
handful of new places including ByteBufUtil.readBytes(...).

Result:

Fewer short-lived small byte array allocations."
28f9136824499d7bca318f4496339d82fb42c46a,"Replace ConcurrentHashMap at allLeaks with a thread-safe set (#8467)

Motivation:
allLeaks is to store the DefaultResourceLeak. When we actually use it, the key is DefaultResourceLeak, and the value is actually a meaningless value.
We only care about the keys of allLeaks and don't care about the values. So Set is more in line with this scenario.
Using Set as a container is more consistent with the definition of a container than Map.

Modification:

Replace allLeaks with set. Create a thread-safe set using 'Collections.newSetFromMap(new ConcurrentHashMap<DefaultResourceLeak<?>, Boolean>()).'"
fd57d971d12f0fdf74b39f3eba25164a8e580f6b,"Override and so delegate all methods in OpenSslX509Certificate (#8472)

Motivation:

We did not override all methods in OpenSslX509Certificate and delegate to the internal 509Certificate.

Modifications:

Add missing overrides.

Result:

More correct implementation"
8a24df88a4ff5519176767aee01bf6186015d471,"Ensure we correctly call wrapEngine(...) during tests. (#8473)

Motivation:

We should call wrapEngine(...) in our SSLEngineTest to correctly detect all errors in case of the OpenSSLEngine.

Modifications:

Add missing wrapEngine(...) calls.

Result:

More correct tests"
e766469e87e52cf6e1af0122d4403d6a8fddc781,"Update to openjdk 12ea19 (#8487)

Motivation:

We should test against latest EA releases.

Modifications:

Update to openkdk 12ea19

Result:

Use latest openjdk 12 EA build on the CI."
a140e6dcad0c95b8867f4c6ff1e14537d5fd6cab,"Make Http2StreamFrameToHttpObjectCodec truly @Sharable (#8482)

Motivation:
The `Http2StreamFrameToHttpObjectCodec` is marked `@Sharable` but mutates
an internal `HttpScheme` field every time it is added to a pipeline.

Modifications:
Instead of storing the `HttpScheme` in the handler we store it as an
attribute on the parent channel.

Result:
Fixes #8480."
0f8ce1b2847b61efa39b8f41807dc64b0c672314,"Fix incorrect sizing of temp byte arrays in (Unsafe)ByteBufUtil (#8484)

Motivation:

Two similar bugs were introduced by myself in separate recent PRs #8393
and #8464, while optimizing the assignment/handling of temporary arrays
in ByteBufUtil and UnsafeByteBufUtil.

The temp arrays allocated for buffering data written to an OutputStream
are incorrectly sized to the full length of the data to copy rather than
being capped at WRITE_CHUNK_SIZE.

Unfortunately one of these is in the 4.1.31.Final release, I'm really
sorry and will be more careful in future.

This kind of thing is tricky to cover in unit tests.

Modifications:

Revert the temp array allocations back to their original sizes.

Avoid making duplicate calls to ByteBuf.capacity() in a couple of places
in ByteBufUtil (unrelated thing I noticed, can remove it from this PR if
desired!)

Result:

Temporary byte arrays will be reverted to their originally intended
sizes."
35471a1a6fa64ac61829afa9f19634e11d537a8a,"Enable netty-tcnative shading test again (#8492)

Motivation:

We disabled the test at some point but it should work now without any problems.

Modifications:

Remove @Ignore from test.

Result:

Verify shading of netty-tcnative on CI."
c0dfb568a2e13feb0872243e6d1a57c5dab15fd5,"SSLHandler may throw AssertionError if writes occur before channelAct… (#8486)

Motivation:

If you attempt to write to a channel with an SslHandler prior to channelActive being called you can hit an assertion. In particular - if you write to a channel it forces some handshaking (through flush calls) to occur.

The AssertionError only happens on Java11+.

Modifications:

- Replace assert by an ""early return"" in case of the handshake be done already.
- Add unit test that verifies we do not hit the AssertionError anymore and that the future is correctly failed.

Result:

Fixes https://github.com/netty/netty/issues/8479."
88e4817cefb4b4d092e4f6a12f0599c54646db18,"Include correct dependencies for testsuite-shading on windows. (#8491)

Motivation:

We missed to include a profile for windows which means that we did not have the correct dependencies setup.

Modifications:

- Add missing profile
- Add assumeFalse(...) to ensure we do only test the native transpot shading on non windows platforms.
- Explicit specify dependency on netty-common

Result:

Fixes https://github.com/netty/netty/issues/8489."
4c73d24ea8f1bc4d51d2cd85580edbb48aaef5bb,"Handshake timeout may never be scheduled if handshake starts via a flush or starttls is used. (#8494)

Motivation:

We did not correctly schedule the handshake timeout if the handshake was either started by a flush(...) or if starttls was used.

Modifications:

- Correctly setup timeout in all cases
- Add unit tests.

Result:

Fixes https://github.com/netty/netty/issues/8493."
804e1fa9ccf426603e6d478f63c63bc00baae0fa,"Fix ref-counting when CompositeByteBuf is used with retainedSlice() (#8497)

Motivation:

ByteBuf.retainedSlice() and similar methods produce sliced buffers with
an independent refcount to the buffer that they wrap.


One of the optimizations in 10539f4dc738c48e8d63c46b72ca32906d7f40ec was
to use the ref to the unwrapped buffer object for added slices, but this
did not take into account the above special case when later releasing.

Thanks to @rkapsi for discovering this via #8495.

Modifications:

Since a reference to the slice is still kept in the Component class,
just changed Component.freeIfNecessary() to release the slice in
preference to the unwrapped buf.

Also added a unit test which reproduces the bug.

Result:

Fixes #8495"
044515f3697c72b39aa881037cbb89ff8f5b57ca,"Defer HTTP/2 stream transition state on initial write until headers are written (#8471)


Motivation:
When the DefaultHttp2ConnectionEncoder writes the initial headers for a new
locally created stream we create the stream in the half-closed state if the
end-stream flag is set which signals to the life cycle manager that the headers
have been sent. However, if we synchronously fail to write the headers the
life cycle manager then sends a RST_STREAM on our behalf which is a connection
level PROTOCOL_ERROR because the peer sees the stream in an IDLE state.

Modification:
Don't open the stream in the half-closed state if the end-stream flag is
set and let the life cycle manager take care of it.

Result:
Cleaner state management in the DefaultHttp2ConnectionEncoder.

Fixes #8434."
11ec7d892e8eca8dc6e05062d02a9f59b6883dce,"Cleanup SslHandler handshake/renegotiation (#8555)

Motivation:

The code for initiating a TLS handshake or renegotiation process is
currently difficult to reason about.

Modifications:

This commit introduces to clear paths for starting a handshake. The
first path is a normal handshake. The handshake is started and a timeout
is scheduled.

The second path is renegotiation. If the first handshake is incomplete,
the renegotiation promise is added as a listener to the handshake
promise. Otherwise, the renegotiation promise replaces the original
promsie. At that point the handshake is started again and a timeout is
scheduled.

Result:

Cleaner and easier to understand code."
d1654484c16dfb650ec40c258b6edcfbe94dea80,"Correctly convert between openssl / boringssl and java cipher names when using TLSv1.3 (#8485)

Motivation:

We did not correctly convert between openssl / boringssl and java ciphers when using TLV1.3 which had different effects when either using openssl or boringssl.
 - When using openssl and TLSv1.3 we always returned SSL_NULL_WITH_NULL_NULL as cipher name
 - When using boringssl with TLSv1.3 we always returned an incorrect constructed cipher name which does not match what is defined by Java.

Modifications:

 - Add correct mappings in CipherSuiteConverter for both openssl and boringssl
 - Add unit tests for CipherSuiteConvert
 - Add unit in SSLEngine which checks that we do not return SSL_NULL_WITH_NULL_NULL ever and that server and client returns the same cipher name.

Result:

Fixes https://github.com/netty/netty/issues/8477."
0d2e38d5d6db6ed1abdf901230fa524c0f8db14c,"Correctly convert supported signature algorithms when using BoringSSL (#8481)

* Correctly convert supported signature algorithms when using BoringSSL

Motivation:

BoringSSL uses different naming schemes for the signature algorithms so we need to adjust the regex to also handle these.

Modifications:

- Adjust SignatureAlgorithmConverter to handle BoringSSL naming scheme
- Ensure we do not include duplicates
- Add unit tests.

Result:

Correctly convert boringssl signature algorithm names."
845a65b31c93eadd86414e6d0a753cd7a93b04c1,"Nio|Epoll|KqueueEventLoop task execution might throw UnsupportedOperationException on shutdown. (#8476)

Motivation:

There is a racy UnsupportedOperationException instead because the task removal is delegated to MpscChunkedArrayQueue that does not support removal. This happens with SingleThreadEventExecutor that overrides the newTaskQueue to return an MPSC queue instead of the LinkedBlockingQueue returned by the base class such as NioEventLoop, EpollEventLoop and KQueueEventLoop.

Modifications:

- Catch the UnsupportedOperationException
- Add unit test.

Result:

Fix #8475"
76673619246dcd0ca274bb2a9736bc1eccd4519f,"Update to netty-tcnative 2.0.20.Final (#8561)

Motivation:

Update to netty-tcnative 2.0.20.Final which fixed a bug related to retrieving the remote signature algorithms when using BoringSSL.

Modifications:

Update netty-tcnative

Result:

Be able to correctly detect the remote signature algorithms when using BoringSSL."
20d4fda55e2b5f05b256af6844b5cc6b8c62b62f,"Return the correct pointer from ReferenceCountedOpenSslContext.context() and sslCtxPointer() (#8562)

Motivation:

We did not return the pointer to SSL_CTX put to the internal datastructure of tcnative.

Modifications:

Return the correct pointer.

Result:

Methods work as documented in the javadocs."
8d4d76d2163fe65ab35a5c206ed4c1348e86d671,"ReferenceCountedOpenSslEngine SSLSession.getLocalCertificates() / getLocalPrincipial() did not work when KeyManagerFactory was used. (#8560)

Motivation:

The SSLSession.getLocalCertificates() / getLocalPrincipial() methods did not correctly return the local configured certificate / principal if a KeyManagerFactory was used when configure the SslContext.

Modifications:

- Correctly update the local certificates / principial when the key material is selected.
- Add test case that verifies the SSLSession after the handshake to ensure we correctly return all values.

Result:

SSLSession returns correct values also when KeyManagerFactory is used with the OpenSSL provider."
ce02d5a1848458f9f9904728d6eb1a82df62f87a,"Update SslHandler.java (#8564)

Swallow SSL Exception ""closing inbound before receiving peer's close_notify"" when running on Java 11 (#8463)

Motivation:

When closing a inbound SSL connection before the remote peer has send a close notify, the Java JDK is trigger happy to throw an exception. This exception can be ignored since the connection is about to be closed.
The exception wasn't printed in Java 8, based on filtering on the exception message. In Java 11 the exception message has been changed.

Modifications:
Update the if statement to also filter/swallow the message on Java 11.

Result:
On Java 11 the exception isn't printed with log levels set to debug. The old behaviour is maintained."
cb0d23923f7cc05cf67942d80aa73cbe11533652,"Refresh DNS configuration each 5 minutes. (#8468)

Motivation:

We should refresh the DNS configuration each 5 minutes to be able to detect changes done by the user. This is inline with what OpenJDK is doing

Modifications:

Refresh config every 5 minutes.

Result:

Be able to consume changes made by the user."
abc8a08c9662e1608e3bb495db346248836e5caf,"Rethrow Error during retrieving remoteAddress / localAddress


Motivation:

Besides an error caused by closing socket in Windows a bunch of other errors may happen at this place which won't be somehow logged. For instance any VirtualMachineError as OutOfMemoryError will be simply ignored. The library should at least log the problem.

Modification:

Added logging of the throwable object.

Result:

Fixes #8499."
63dc1f5aaac474f0bac60db861bfd6089d7fb688,"Allow adjusting of lead detection sampling interval. (#8568)

Motivation:

We should allow adjustment of the leak detecting sampling interval when in SAMPLE mode.

Modifications:

Added new int property io.netty.leakDetection.samplingInterval

Result:

Be able to consume changes made by the user."
278b49b2a791968c6b80ed0995ef25771b3fd654,"Recover from Selector IOException (#8569)

Motivation:

When the Selector throws an IOException during our EventLoop processing we should rebuild it and transfer the registered Channels. At the moment we will continue trying to use it which will never work.

Modifications:

- Rebuild Selector when an IOException is thrown during any select*(...) methods.
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8566."
38524ec3e29100520dd4004841e6e62d7c50ba3f,"Fix test that assumed detection of peer supported algs is not supported in BoringSSL. (#8573)

Motivation:

0d2e38d5d6db6ed1abdf901230fa524c0f8db14c added supported for detection of peer supported algorithms but we missed to fix the testcase.

Modifications:

Fix test-case.

Result:

No more failing tests with BoringSSL."
cd689ee775294178e168b0019f5c9e15272f6632,"Fix javadoc to correctly explain how ChannelDuplexHandler.deregister(...) works. (#8577)

Motivation:

We had an error in the javadoc which was most likely caused by copy and paste.

Modifications:

Fix javadoc.

Result:

Correct javadoc."
3d2fdc459c81ff9145b91e245d77d89cc694994f,"Remove transitive dependency on slf4j in example (#8582)

Motivation:

We currently depend on slf4j in an transitive way in one of our classes in the examples. We should not do this.

Modifications:

Remove logging in example.

Result:

Remove not needed dependency."
d728a72e745d840da397e287ab9c59f810cdadb4,"Combine flushes in DnsNameResolver to allow usage of sendmmsg to reduce syscall costs (#8470)

Motivation:

Some of transports support gathering writes when using datagrams. For example this is the case for EpollDatagramChannel. We should minimize the calls to flush() to allow making efficient usage of sendmmsg in this case.

Modifications:

- minimize flush() operations when we query for multiple address types.
- reduce GC by always directly schedule doResolveAll0(...) on the EventLoop.

Result:

Be able to use sendmmsg internally in the DnsNameResolver."
31fd66b617dd6ea5a851e80338263f2866cb4c3d,"Mark OIO based transports as deprecated as preparation for removal in Netty 5. (#8579)

Motivation:

We plan to remove the OIO based transports in Netty 5 so we should mark these as deprecated already.

Modifications:

Mark all OIO based transports as deprecated.

Result:

Give the user a heads-up for removal."
2a2bc210679d82a73cbe286a8e157cd5f4dd2449,"Remove @Deprecated from package-info.java file (#8591)

Motivation:

31fd66b617dd6ea5a851e80338263f2866cb4c3d added @Deprecated to some classes but also to the package-info.java files. IntelliJ does not like to have these annotations on package-info.java

Modifications:

Remove annotation from package-info.java

Result:

Be able to compile against via IntelliJ"
af34287fd11887db05b01c06a16a99e91560fee1,"HeadContext is inbound and outbound (#8592)

Motivation:

Our HeadContext in DefaultChannelPipeline does handle inbound and outbound but we only marked it as outbound. While this does not have any effect in the current code-base it can lead to problems when we change our internals (this is also how I found the bug).

Modifications:

Construct HeadContext so it is also marked as handling inbound.

Result:

More correct code."
af636267772da6dcde43618b20c5e1be8e418d5f,"Factor out less common code-path into own method to allow inlining. (#8590)


Motivation:

During benchmarks two methods showed up as ""hot method too big"". We can easily make these smaller by factor out some less common code-path to an extra method and so allow inlining.

Modifications:

Factor out less common code path to an extra method.

Result:

Hot methods can be inlined."
2278991db7024b075972c0ec7a211a1fcc931450,"Use addAndGet(...) as a replacement for compareAndSet(...) when tracking the direct memory usage. (#8596)

Motivation:

We can change from using compareAndSet to addAndGet, which emits a different CPU instruction on x86 (CMPXCHG to XADD) when count direct memory usage. This instruction is cheaper in general and so produce less overhead on the ""happy path"". If we detect too much memory usage we just rollback the change before throwing the Error.

Modifications:

Replace compareAndSet(...) with addAndGet(...)

Result:

Less overhead when tracking direct memory."
f4e4147df85b4684cbc8800a8be5ff0fe8bfc58e,"LocationAwareSlf4jLogger does not correctly format log message. (#8595)

Motivation:

We did miss to use MessageFormatter inside LocationAwareSlf4jLogger and so {} was not correctly replaced in log messages when using slf4j.
This regression was introduced by afe0767e9c150369cd6ea150b5cc1a9021fd5c3c.

Modifications:

- Make use of MessageFormatter
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8483."
89639ce322182dd83206fc3c0b7caddc53413cc9,"Fix offset calculation in PooledByteBufAllocator when used

Motivation:

When we create new chunk with memory aligned, the offset of direct memory should be
'alignment - address & (alignment - 1)', not just 'address & (alignment - 1)'.

Modification:

Change offset calculating formula to offset = alignment - address & (alignment - 1) in PoolArena.DirectArena#offsetCacheLine and add a unit test to assert that.

Result:

Correctly calculate offset."
8cd005ba4346fd249a3828703fc4cfa64489bff3,"Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC. (#8593)

Motivation:

Often a temporary ByteBuffer is used which can be cached to reduce the GC pressure.

Modifications:

Add a Deque per PoolChunk which will be used for caching.

Result:

Less GC."
15e4fe05a81aaec830c8502cb5ec6737526636d2,"Revert ""Provide a way to cache the internal nioBuffer of the PooledByteBuffer to reduce GC. (#8593)""

This reverts commit 8cd005ba4346fd249a3828703fc4cfa64489bff3 as it seems to produce some failures in some cases. This needs more research."
057c19f92ac8b5f9ee34b9e6d813a65ee4707c15,"Move less common code-path to extra method to allow inlining of writeUtf8. (#8600)

Motivation:

ByteBuf is used everywhere so we should try hard to be able to make things inlinable. During benchmarks it showed that writeCharSequence(...) fails to inline writeUtf8 because it is too big even if its hots.

Modifications:

Move less common code-path to extra method to allow inlining.

Result:

Be able to inline writeUtf8 in most cases."
fedf3ccecb80ddccd05da2d02e76d669fe2c219c,"Harden ref-counting concurrency semantics (#8583)


Motivation

#8563 highlighted race conditions introduced by the prior optimistic
update optimization in 83a19d565064ee36998eb94f946e5a4264001065. These
were known at the time but considered acceptable given the perf
benefit in high contention scenarios.

This PR proposes a modified approach which provides roughly half the
gains but stronger concurrency semantics. Race conditions still exist
but their scope is narrowed to much less likely cases (releases
coinciding with retain overflow), and even in those
cases certain guarantees are still assured. Once release() returns true,
all subsequent release/retains are guaranteed to throw, and in
particular deallocate will be called at most once.

Modifications

- Use even numbers internally (including -ve) for live refcounts
- ""Final"" release changes to odd number (equivalent to refcount 0)
- Retain still uses faster getAndAdd, release uses CAS loop
- First CAS attempt uses non-volatile read
- Thread.yield() after a failed CAS provides a net gain

Result

More (though not completely) robust concurrency semantics for ref
counting; increased latency under high contention, but still roughly
twice as fast as the original logic. Bench results to follow"
afcb4a37d3a704c435f8312f9547309d6f1003ac,[maven-release-plugin] prepare release netty-4.1.32.Final
8eb313072e3f976df389de7f5394cfe02539f03f,[maven-release-plugin] prepare for next development iteration
a0c3081d8264b3e16d98a87a90250f26c6d9ed53,"Reduce http2 buffer slicing (#8598)

Motivation

DefaultHttp2FrameReader currently does a fair amount of ""intermediate""
slicing which can be avoided.

Modifications

Avoid slicing the input buffer in DefaultHttp2FrameReader until
necessary. In one instance this also means retainedSlice can be used
instead (which may also avoid allocating).

Results

Less allocations when using http2."
d05666ae2d2068da7ee031a8bfc1ca572dbcc3f8,"Set-Cookie headers should not be combined (#8611)

Motivation:

According to the HTTP spec set-cookie headers should not be combined
because they are not using the list syntax.

Modifications:

Do not combine set-cookie headers.

Result:

Set-Cookie headers won't be combined anymore"
dcbd7c492b79e4f72731aac3614672d5efeaf90c,"Update to OpenJDK 12 ea22 (#8618)

Motivation:

We should use the latest OpenJDK 12 release when running tests against Java12.

Modifications:

- Update to OpenJDK 12 ea22.
- Update pax exam version
- skip OSGI testsuite on Java12 as it does not work ea22 yet.

Result:

Use latest OpenJDK 12 version when running on the CI."
268035742317ced8e8d43b9998244f4f0e53316a,"Provide a way to cache the internal nioBuffer of the PooledByteBuffer… (#8603)


Motivation:

Often a temporary ByteBuffer is used which can be cached to reduce the GC pressure.

Modifications:

Cache the ByteBuffer in the PoolThreadCache as well.

Result:

Less GC."
b8a3394f9b9e5abba80a26335f762795ee07b877,"Adding an execute burst cost benchmark for Netty executors (#8594)

Motivation:

Netty executors doesn't have yet any means to compare with each others
nor to compare with the j.u.c. executors

Modifications:

A new benchmark measuring execute burst cost is being added

Result:

It's now possible to compare some of Netty executors with each others
and with the j.u.c. executors"
d0d30f1fbe2117cd0a7b2ad103cd3ff596a2d7f9,"Loosen bounds check on CompositeByteBuf's maxNumComponents (#8621)


Motivation:

In versions of Netty prior to 4.1.31.Final, a CompositeByteBuf could be
created with any size (including potentially nonsensical negative
values). This behavior changed in e7737b993, which introduced a bounds
check to only allow for a component size greater than one. This broke
some existing use cases that attempted to create a byte buf with a
single component.

Modifications:

Lower the bounds check on numComponents to include the single component
case, but still throw an exception for anything less than one.

Add unit tests for the case of numComponents being less than, equal to,
and greater than this lower bound.

Result:

Return to the behavior of 4.1.30.Final, allowing one component, but
still include an explicit check against a lower bound.

Note that while creating a CompositeByteBuf with a single component is
in some ways a contradiction of the term ""composite"", this patch caters
for existing uses while excluding the clearly nonsensical case of asking
for a CompositeByteBuf with zero or fewer components.

Fixes #8613."
9f9aa1ae01e32fbe22caf8fe3939c12ce8f6d7ba,"Respect ctx.read() calls while processing reads for the child channels when using the Http2MultiplexCodec. (#8617)

Motivation:

We did not correct respect ctx.read() calls while processing a read for a child Channel. This could lead to read stales when auto read is disabled and no other read was requested.

Modifications:

- Keep track of extra read() calls while processing reads
- Add unit tests that verify that read() is respected when triggered either in channelRead(...) or channelReadComplete(...)

Result:

Fixes https://github.com/netty/netty/issues/8209."
6739755d3901ee86e0492c0954f9c45b07142ae2,"NioEventLoop.register(...) should offload to the EventLoop if not alr… (#8612)


Motivation:

java.nio.channels.spi.AbstractSelectableChannel.register(...) need to obtain multiple locks during execution which may produce a long wait time if we currently select. This lead to multiple CI failures in the past.

Modifications:

Ensure the register call takes place on the EventLoop.

Result:

No more flacky CI test timeouts."
8331248671b9c0ea07cf8dbdfa5d8d2f89fdf459,"ChannelInitializer may be invoked multiple times when used with custom EventExecutor. (#8620)

Motivation:

The ChannelInitializer may be invoked multipled times when used with a custom EventExecutor as removal operation may be done asynchronously. We need to guard against this.

Modifications:

- Change Map to Set which is more correct in terms of how we use it.
- Ensure we only modify the internal Set when the handler was removed yet
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8616."
5df235c08391240e8106aad48a63323cf1a8b181,"Correcting Maven Dependencies (#8622)

Motivation:

Most of the maven modules do not explicitly declare their
dependencies and rely on transitivity, which is not always correct.

Modifications:

For all maven modules, add all of their dependencies to pom.xml

Result:

All of the (essentially non-transitive) depepdencies of the modules are explicitly declared in pom.xml"
51a650979fe2a3ecb15fbd81141eff831cb39b7b,"Skip test on windows as the semantics we expect are only true on Linux / Unix / BSD / MacOS (#8629)

Motivation:

In the test we assume some semantics on how RST is done that are not true for Windows so we should skip it.

Modifications:

Skip test when on windows.

Result:

Be able to run testsuite on windows. Fixes https://github.com/netty/netty/issues/8571."
2b651eb1a255cff4fb62eaf3e579d24b97e7fb2e,"support publishing snapshots from docker based ci (#8634)

motivation: automate snapshot publishing from docker based ci

changes:
* add local settings.xml with env variables for publishing to sonatype-nexus-snapshots
* pipe UID/PWD env variable in docker compose"
22b2c4c3b8be75ad3ea97f115d1bc56fa46069d2,"Fix concurrency problem in UniqueIpFilter (#8635)

Motivation:

If two requests from the same IP are reached at the same time, `connected.contains(remoteIp)` may return false in both threads.

Modifications:

Check if there is already a connection with the same IP using return values.

Result:

Become thread safe."
a564b70d51d7e917d7d1af225fc69a535b3ceaa6,"More correct fix for using ChannelInitializer with custom EventExecutor. (#8633)

Motivation:

8331248671b9c0ea07cf8dbdfa5d8d2f89fdf459 did make some changes to fix a race in ChannelInitializer when using with a custom EventExecutor. Unfortunally these where a bit racy and so the testcase failed sometimes.

Modifications:

- More correct fix when using a custom EventExecutor
- Adjust the testcase to be more correct.

Result:

Proper fix for https://github.com/netty/netty/issues/8616."
36c12a4c55a4d19f830ca0df2e48fa43b052a2fa,"Fix typo in MessageToMessageDecoder api docs. (#8638)

Motivation:

We had some typo (most likely caused by copy-and-paste) in the api docs which should be fixed.

Modifications:

Replace encoder by decoder word.

Result:

Correct apidocs."
bdcad8ef47b349500755ccd7bce34cc20b8281a2,"Fix incorrect assert in Http2MultiplexCodec caused by 9f9aa1a. (#8639)

Motivation:

9f9aa1a did some changes related to fixing how we handle ctx.read() in child channel but did incorrectly change some assert.

Modifications:

Fix assert to be correct.

Result:

Code does not throw an AssertionError due incorrect assert check."
25216be1182b042a07ab08751b020e42d2f29b89,"ReadTimeoutHandler - missing ) within JavaDoc example (#8645)

Motivation:

improve docs

Modification:

ReadTimeoutHandler - missing ) within JavaDoc example

No logic/unit tests affected"
1dacd3798939a35ed2105094ca24a387812b68dd,"SSLSession.putValue / getValue / removeValue / getValueNames must be thread-safe. (#8648)

Motivation:

SSLSession.putValue / getValue / removeValue / getValueNames must be thread-safe as it may be called from multiple threads. This is also the case in the OpenJDK implementation.

Modifications:

Guard with synchronized (this) blocks to keep the memory overhead low as we do not expect to have these called frequently.

Result:

SSLSession implementation is thread-safe."
d17bd5e16071b70787399118acc0aa0ea3da7ac2,"Adding support for whitespace in resource path in tests (#8606)

Motivation:

In windows if the project is in a path that contains whitespace,
resources cannot be accessed and tests fail.

Modifications:

Adds ResourcesUtil.java in netty-common. Tests use ResourcesUtil.java to access a resource.

Result:

Being able to build netty in a path containing whitespace"
83ab4ef5e372e0a9b87fdadd4077a551af5b2e64,"Explict always call ctx.read() when AUTO_READ is false and HTTP/2 is used. (#8647)

Motivation:

We should always call ctx.read() even when AUTO_READ is false as flow-control is enforced by the HTTP/2 protocol.

See also https://tools.ietf.org/html/rfc7540#section-5.2.2.

We already did this before but not explicit and only did so because of some implementation details of ByteToMessageDecoder. It's better to be explicit here to not risk of breakage later on.

Modifications:

- Ensure we always call ctx.read() when AUTO_READ is false
- Add unit test.

Result:

No risk of staling the connection when HTTP/2 is used."
db6d94f82a0f860131392aa483f4d1e21dc74249,"Support 1012, 1013 and 1014 WebSocket status code

Motivation:

RFC 6455 doesn't define status codes 1012, 1013 and 1014.
Yet, since then, IANA has defined them, web browsers support them, applications in the wild do use them but it's currently not possible to buid a Netty based client for those services.

From https://www.iana.org/assignments/websocket/websocket.xhtml:

* 1012: Service Restart
* 1013: Try Again Later
* 1014: The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code.

Modification:

Make status codes 1012, 1013 and 1014 legit.

Result:

WebSocket status codes as defined by IANA are supported."
29d185b7960863a8aec5347fc0d32016b3687403,"Revert ""Support 1012, 1013 and 1014 WebSocket status code""

This reverts commit db6d94f82a0f860131392aa483f4d1e21dc74249."
a3844da10bb3ae788017b4c0699373284d60b058,"NoClassDefFoundError on Android platform when try to use DefaultDnsServerAddressStreamProvider. (#8656)

Motivation:

Andoid does not contain javax.naming.* so we should not try to use it to prevent a NoClassDefFoundError on init.

Modifications:

Only try to use javax.naming.* to retrieve nameservers when not using Android.

Result:

Fixes https://github.com/netty/netty/issues/8654."
b6d6d98404f216602e0dec8efd83e140c5ff7e00,"Skip tests that use KeyManagerFactory if not supported by OpenSSL version / flavor (#8662)

Motivation:

We missed to skip a few tests that depend on the KeyManagerFactory if the used OpenSSL version / flavor not support it.

Modifications:

Add missing overrides.

Result:

Testsuite also passes for example when using LibreSSL."
35f609ba61f64f9a0f868b7b7b84d924c88bf27f,"Update to latest stable jython release (#8667)

Motivation:

Using the latest jython release fixes some noise that is produced by an exception that is thrown when jython is terminated.

Exception in thread ""Jython-Netty-Client-4"" Exception in thread ""Jython-Netty-Client-7"" Exception in thread ""Jython-Netty-Client-5"" java.lang.NoClassDefFoundError: org/python/netty/util/concurrent/DefaultPromise$2
        at org.python.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:589)
        at org.python.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:397)
        at org.python.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:151)
        at java.lang.Thread.run(Thread.java:748)
Exception in thread ""Jython-Netty-Client-8"" java.lang.NoClassDefFoundError: org/python/netty/util/concurrent/DefaultPromise$2
        at org.python.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:589)
        at org.python.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:397)
        at org.python.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:151)
        at java.lang.Thread.run(Thread.java:748)
Exception in thread ""Jython-Netty-Client-3"" java.lang.NoClassDefFoundError: org/python/netty/util/concurrent/DefaultPromise$2
        at org.python.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:589)
        at org.python.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:397)%

Modification:

Update to latest stable release.

Result:

Less noise during build."
de38d7513785a30e32e98b11376d5427a8cc45f0,"Upgrade to new version of autobahntestsuite maven plugin. (#8668)

Motivation:

A new version was released that fixes a few test-cases to allow more close codes.

Modifications:

Upgrade to 0.1.5

Result:

More compliant testing of websockets."
302dac8c45266bba54bea59823a5757a496f5fdc,"Support 1012, 1013 and 1014 WebSocket close status code (#8664)

Motivation:

RFC 6455 doesn't define close status codes 1012, 1013 and 1014.
Yet, since then, IANA has defined them and web browsers support them.

From https://www.iana.org/assignments/websocket/websocket.xhtml:

* 1012: Service Restart
* 1013: Try Again Later
* 1014: The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code.

Modification:

Make status codes 1012, 1013 and 1014 legit.

Result:

WebSocket status codes as defined by IANA are supported."
db3c76ed72325076570e4ce5418dff323951cb7b,"Update to use OpenJDK 12 EA24 when building with Java 12 (#8672)

Motivation:

A new EA build was released for Java 12.

Modifications:

Update to OpenJDK 12 EA24

Result:

Use latest OpenJDK 12 build when building with Java 12"
d77bdeaa7d8020d2d8cfe6357f4c824dce3e99f9,"Fix ClassCastException and native crash when using kqueue transport. (#8665)

Motivation:

How we did the mapping from native code to AbstractKQueueChannel was not safe and could lead to heap corruption. This then sometimes produced ClassCastExceptions or could also lead to crashes. This happened sometimes when running the testsuite.

Modifications:

Use a Map for the mapping (just as we do in the native epoll transport).

Result:

No more heap corruption / crashes."
9947df4a748c6ef1df50434aded3ecdda7ce6d57,"Add test for correctly handling SSLSessionBindingEvent when acting on th… (#8649)


Motivation:

During some other work I noticed we do not have any tests to ensure we correctly use SSLSessionBindingEvent. We should add some testing.

Modifications:

- Added unit test to verify we correctly implement it.
- Ignore the test when using Conscrypt as it not correctly implements it.

Result:

More tests for custom SSL impl."
e2d9665707f6a6bb97e88c57dd463f296c28b190,"Added comments to LineBasedFrameDecoder, JsonObjectDecoder and XmlFrameDecoder that they are only compatible with UTF-8 encoded streams. (#8651)


Motivation:

LineBasedFrameDecoder, JsonObjectDecoder and XmlFrameDecoder upon investigation of the
sourcecode appeared to only support ASCII or UTF-8 input. It is an important characteristic
and ont reflected in any documentation. This could lead to improper usage and bugs.

Modifications:

Javadoc comment is addedd to all three classes to state that implementation is only
compatible with UTF-8 or ASCII input streams and brifly touches on implementaion details.

Result:

The end user of the netty library would not have to study sorcecode to deterime character
encoding limitations for given classes."
6464c98743779778e52db59522f269bfe47a46af,"Call FastThreadLocal.removeAll() before notify termination future of … (#8666)


Motivation:

We should try removing all FastThreadLocals for the Thread before we notify the termination. future. The user may block on the future and once it unblocks the JVM may terminate and start unloading classes.

Modifications:

Remove all FastThreadLocals for the Thread before notify termination future.

Result:

Fixes https://github.com/netty/netty/issues/6596."
66ccd1483a9f0c18b707711558c7bbea8bfc73da,"Publicize default `explicitFlushAfterFlushes` count. (#8683)

Motivation:

Users who want to construct a `FlushConsolidationHandler` with a default `explicitFlushAfterFlushes` but non-default `consolidateWhenNoReadInProgress` may benefit from having an easy way to get the default ""flush after flushes"" count.

Modifications:

- Moved default `explicitFlushAfterFlushes` value to a public constant.
- Adjusted Javadoc accordingly.

Result:

Default `explicitFlushAfterFlushes` is accessible to callers."
fa84e2b3af45ec7fd47909eff0aa7d2be5a54972,"Cleanup HTTP/2 tests for Http2FrameCodec and Http2MultiplexCodec (#8646)

Motiviation:

Http2FrameCodecTest and Http2MultiplexCodecTest were quite fragile and often not went through the whole pipeline which made testing sometimes hard and error-prone.

Modification:

- Refactor tests to have data flow through the whole pipeline and so made the test more robust (by testing the while implementation).

Result:

Easier to write tests for the codecs in the future and more robust testing in general.

Beside this it also fixes https://github.com/netty/netty/issues/6036."
66addd485f42080dca190eb7c8896ed1acd45015,"Use camel-case in NioEventLoop (#8713)

Motivation:

Java uses camel-case by convention.

Modification:

Consistently use camel-case.

Result:

More consistent code styling."
6fdd7fcddbe964b2f30d7492a926f4f0bf0f083f,"Fix minor spelling issues in javadocs (#8701)

Motivation:

Javadocs contained some spelling errors, we should fix these.

Modification:

Fix spelling

Result:

Javadoc cleanup."
82ec6ba815adcb3ab057ef8a65f6f620a1ad5611,"Correctly detect and handle CNAME loops. (#8691)

Motivation:

We do not correctly detect loops when follow CNAMEs and so may try to follow it without any success.

Modifications:

- Correctly detect CNAME loops
- Do not cache CNAME entries which point to itself
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8687."
250e2494d9f324bd2771d3c3eee5a6200332f3dc,"Only call handlerRemoved(...) if handlerAdded(...) was called during adding the handler to the pipeline. (#8684)

Motivation:

Due a race in DefaultChannelPipeline / AbstractChannelHandlerContext it was possible to have only handlerRemoved(...) called during tearing down the pipeline, even when handlerAdded(...) was never called. We need to ensure we either call both of none to guarantee a proper lifecycle of the handler.

Modifications:

- Enforce handlerAdded(...) / handlerRemoved(...) semantics / ordering
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8676 / https://github.com/netty/netty/issues/6536 ."
4155bc08f04399611ae413b40c1d6042ba736195,"Correctly buffer multiple outbound streams if needed. (#8694)

Motivation:

In Http2FrameCodec we made the incorrect assumption that we can only have 1 buffered outboundstream as maximum. This is not correct and we need to account for multiple buffered streams.

Modifications:

- Use a map to allow buffer multiple streams
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8692."
9fb0765891287a00154627ed79f7d66e2100c16a,"Use OpenJDK 12 EA 27 when running CI jobs for JDK 12. (#8715)

Motivation:

A new EA release was done for OpenJDK12.

Modifications:

Use OpenJDK12 EA 27 when running CI jobs for JDK 12.

Result:

Test against latest OpenJDK 12 EA build."
1b9cdc1f63d1a2b2ef51ca11568128ddae6323ba,"Updating `ByteBuf` Javadocs to represent actual behaviour. (#8709)

Motivation:

The javadocs stating `IndexOutOfBoundsException` is thrown were
different from what `ByteBuf` actually did. We want to ensure the
Javadocs represent reality.

Modifications:

Updated javadocs on `write*`, `ensureWriteable`, `capacity`, and
`maxCapacity` methods.

Results:

Javadocs more closely match actual behaviour."
4ac5264f0e3439f5da4b4a8337e7c56ba1937c55,"Remove unnecessary loop variable from `AsciiString`. (#8711)

Motivation:

Incrementing two variables in sync is not necessary when only one will do.

Modifications:

- Remove `j` from `for` loop and replace with `i`.
- Add more unit testing scenarios to cover changed code.

Results:

Unnecessary variable removed."
c424599593b0feee6bb76735cd60ad8f151d21fb,"Access the Constructor of the Channel in the constructor of ReflectiveChannelFactory. (#8718)

Motivation:

We should access the Constructor of the passed in class in the Constructor of ReflectiveChannelFactory only to reduce the overhead but also fail-fast.

Modifications:

Access the Constructor early.

Result:

Fails fast and less performance overhead."
53d711bdc71ecd68cb1028c841b11b584f5c8ca6,"extract duplicate code into method (#8720)

Motivation:

Clean up code to increase readability.

Modification:

Extract duplicate code blocks into method.

Result:

Less code duplication"
165912365a8a375c32f2747ca0836fd604f4ad17,"Clenaup: simplify EpollEventLoop.closeAll() (#8719)

Motivation:

Avoid unnecessary iteration and `ArrayList` allocation.

Modification:

```
for (AbstractEpollChannel channel: channels.values()) {
     array.add(channel);
}
```
replaced with 

`array.addAll(channels.values())`

and

```
Collection<AbstractEpollChannel> array = new ArrayList<AbstractEpollChannel>(channels.size());
array.addAll(channels.values())
```

replaced with:

`AbstractEpollChannel[] localChannels = channels.values().toArray(new AbstractEpollChannel[0]);`

Result:

Simpler code in `EpollEventLoop.closeAll();`"
7988cfec0a32a44a879b60e65ad4a9cabfd3c4d7,"Correctly propagate write failures from ChunkedWriteHandler (#8716)

Motivation:

ChunkedWriteHandler should report write operation as failed
in case *any* chunked was not written. Right now this is not
true for the last chunk.

Modifications:

* Check if the appropriate write operation was succesfull when
  reporting the last chunk

* Skip writing chunks if the write operation was already marked
  as ""done""

* Test cases to cover write failures when dealing with chunked input

Result:

Fix https://github.com/netty/netty/issues/8700"
46fcc7bc97c279a35da69cd0207525c2fad3d860,"Allow to run builds with OpenJDK 13. (#8724)

Motivation:

There are the first EA bulds for OpenJDK 13. We should support to build with it and run builds on the CI.

Modifications:

- Add profile for JDK 13
- Add docker config to run with JDK 13.

Result:

Building and testing with OpenJDK 13 is possible."
dd54c06e1e6ccd9c4d8c4e40b3c81837287aff0d,"Close connection for CorruptedFrameException (#8705)

Motivation:

The CorruptedFrameException from the finish() method of the Utf8Validator gets propagated to other handlers while the connection is still open.

Modification:

Override exceptionCaught method of the Utf8FrameValidator and close the connection if it is a CorruptedFrameException.

Result:

The CorruptedFrameException gets propagated to other handlers only after properly closing the connection."
c893939bd89243a1d6423ed86419bcf7748659ec,"Update to latest JDK8 and JDK11 releases (#8725)

Motivation:

We should always build with the latest JDK releases.

Modifications:

Update JDK8 and JDK11 versions to the latest.

Result:

Run CI jobs on the latest JDK release."
8ebaa1b9721c9a6e2d4c85ce833143878a0895c1,"enhancement: extract duplicate code (#8732)

Motivation:

Clean up code to increase readability.

Modification:

Extract duplicate code and remove unnecessary throws

Result:

Share more code."
e4b9d5f9a17a34e2ef8ea6fed901693f61ff5f92,"Skip osgi testsuite on JDK11. (#8733)

Motivation:

Since the updating to OpenJDK 11.0.2 the OSGI testsuite fails. We should dissable it until there is a version of the used plugins that works with this OpenJDK version.

Modifications:

Skip osgi testsuite when using JDK11.

Result:

Build pass again with JDK11."
df5eb060f729a18582d659f868f764edc9a7277e,"Only handle NXDOMAIN as failure when nameserver is authoritive or no other nameservers are left. (#8731)

Motivation:

When using multiple nameservers and a nameserver respond with NXDOMAIN we should only fail the query if the nameserver in question is authoritive or no nameservers are left to try.

Modifications:

- Try next nameserver if NXDOMAIN was returned but the nameserver is not authoritive
- Adjust testcase to respect correct behaviour.

Result:

Fixes https://github.com/netty/netty/issues/8261"
dae5d9d3f9d4652f9b5e99edd4709a3e57a46277,"Ensure FlowControlled data frames will be correctly removed from the … (#8726)

Motivation:

When a write error happens during writing of flowcontrolled data frames we miss to correctly detect this in the write loop which may result in an infinite loop as we will never detect that the frame should be removed from the queue.

Modifications:

- When we fail a flowcontrolled data frame we ensure that the next frame.write(...) call will signal back that the whole frame was handled and so can be removed.
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8707."
bce0784e5eb72c395eff3fac59152b65bddc2c7e,"Fix racy ChannelOutboundBuffer.testWriteTaskRejected test. (#8735)

Motivation:

testWriteTaskRejected was racy as we did not ensure we dispatched all events to the executor before shutting it down.

Modifications:

Add a latch to ensure we dispatched everything.

Result:

Fix racy test that failed sometimes before."
a2cd246f00a5a1332dc9e8c6f4375e06bed300b0,"cleanup: fix indent (#8734)

Motivation:

Clean up to make the code style unified.

Modification:

Fix indent

Result:

Indents are unified"
1e4481e551696a57c79d3f1acd588171e12e082b,"Allowed IP_FREEBIND option for UDP epoll (#8728)

Motivation:

While using Load Balancers or HA support is needed there are cases when UDP channel need to bind to IP Address which is not available on network interfaces locally.

Modification:

Modified EpollDatagramChannelConfig to allow IP_FREEBIND option

Result:

Fixes ##8727."
83b286f5d9587dcb7ff944166ab75a2284c717c7,"Set result for decoded request and add test for #8721 (#8721)


Motivation:
I want to fix bug in vert.x project (eclipse-vertx/vert.x#2562) caused by ComposedLastHttpContent result being null. I don't know if it is intentional that this last decoded chuck in the issue returns null, but if not - I am providing fix for that.

Modification:
* Added new constructor in ComposedLastHttpContent allowing to pass DecoderResult
* set DecoderResult.SUCCESS for created ComposedLastHttpContent in HttpContentEncoder
* set DecoderResult.SUCCESS for created ComposedLastHttpContent in HttpContentDecoder

Result:
Fixes eclipse-vertx/vert.x#2562"
fabc6ee1bc9a31b25e9b1adba8c9521f6ae28f43,"Fix flaky ChannelInitializerTest.testChannelInitializerEventExecutor() (#8738)

Motivation:

testChannelInitializerEventExecutor() did sometimes fail as we sometimes miss to count down the latch. This can happen when we remove the handler from the pipeline before channelUnregistered(...) was called for it.

Modifications:

Countdown the latch in handlerRemoved(...).

Result:

Fix flaky test."
9c192254c464e3a73ae1930eba9dc4c0c2432d61,Remove duplicated declaration of dependency
37484635cbccf0bf48f0e013bc639f44bcfb420a,[maven-release-plugin] prepare release netty-4.1.33.Final
cf03ed0478c12a7ed400dc00670351d46e0c48e3,[maven-release-plugin] prepare for next development iteration
0431368621e16160801f226b1f95834d22448b46,"HttpUtil#is100ContinueExpected clean up (#8740)

Motivation:

Current implementation extract header value as String. We have an idiomatic way for checking presence of a header value.

Modification:

Use HttpHeaders#contains for checking if if contains Expect: 100-continue.

Result:

Use idiomatic way + simplify boolean logic."
57012dddb45b59a656dd523089ab0efdd204c452,"fix typo (#8741)

Motivation:

Correct typo

Modification:

Correct typo

Result:

JavaDoc and method name are more readable"
3c2b86303a56725de052d2269aea3d6394177baf,"Release message when validation of passed in ChannelPromise fails when calling write(...) / writeAndFlush(...) (#8769)

Motivation:

We need to release the message when we throw an IllegalArgumentException because of a validation failure of the promise to eliminate the risk of a memory leak.

Modifications:

- Consistently release the message before rethrow
- Add testcase.

Result:

Fixes https://github.com/netty/netty/issues/8765."
1d5b7be3a7e01b506f0b56cd58902a14fe7d9025,"Fix three bugs in CompositeByteBuf (#8773)

Motivation

In #8758, @doom369 reported an infinite loop bug in CompositeByteBuf
which was introduced in #8437.

This is the same small fix for that, along with fixes for two other bugs
found while re-inspecting the changes and adding unit tests.

Modification

- Replace recursive call to toComponentIndex with toComponentIndex0 as
intended
- Add missed ""lastAccessed"" racy cache invalidation in capacity(int)
method
- Fix incorrect determination of initial offset in non-zero cIndex case
of updateComponentOffsets method
- New unit tests for previously uncovered methods

Results

Fewer bugs."
cd3254df88b60476dc04b39915d3d70c200eb6f4,"Update to new checkstyle plugin (#8777) (#8780)

Motivation:

We need to update to a new checkstyle plugin to allow the usage of lambdas.

Modifications:

- Update to new plugin version.
- Fix checkstyle problems.

Result:

Be able to use checkstyle plugin which supports new Java syntax."
948d4a9ec58aef092c84eb76e672fd06e81cc13c,"Minimize memory footprint for AbstractChannelHandlerContext for handlers that execute in the EventExecutor. (#8786)

Motivation:

We cache the Runnable for some tasks to reduce GC pressure in 4 different fields. This gives overhead in terms of memory usage in all cases, even if we always execute in the EventExecutor (which is the case most of the times).

Modifications:

Move the 4 fields to another class and only have one reference to this in AbstractChannelHandlerContext. This gives a small overhead in the case of execution that is done outside of the EventExecutor but reduce memory footprint in the more likily execution case.

Result:

Less memory used per AbstractChannelHandlerContext in most cases."
a6e6a9151f09e48d92ed96df9b3f4437d78856dc,"Fix AppendableCharSequence.subSequence(...) where start == end. (#8798)

Motivation:

To conform to the CharSequence interface we need to return an empty CharSequence when start == end index and a subSequence is requested.

Modifications:

- Correctly handle the case where start == end
- Add unit test

Result:

Fix https://github.com/netty/netty/issues/8796."
ff7484864b1785103cbc62845ff3a392c93822b7,"Compare HttpMethod by reference (#8815)

Motivation:

In most cases, HttpMethod instance is built from the factory method and the same instance is taken for known Http Methods. So we can implement fast path for equals().

Modification:

Replace == checks with HttpMethod.equals;
Use this == o within HttpMethod.equals;
Replaced known new HttpMethod with HttpMethod.valueOf;
Result:

Comparisons should be a bit faster in some cases."
fe4a59011addc5a556ec882b5795db241f6c77c9,"Do not schedule notify task if there are no listeners attached to the promise. (#8797)

Motivation:

If there are no listeners attached to the promise when full-filling it we do not need to schedule a task to notify.

Modifications:

- Don't schedule a task if there is nothing to notify.
- Add unit tests.

Result:

Fixes https://github.com/netty/netty/issues/8795."
a33200ca38990b88315a48637e5ac5da398b100d,"use checkPositive/checkPositiveOrZero (#8803)

Motivation:

We have a utility method to check for > 0 and >0 arguments. We should use it.

Modification:

use checkPositive/checkPositiveOrZero instead of if statement.

Result:

Re-use utility method."
91d3920aa298ea536be7b196f16b32b6ddd27f8d,"HttpObjectDecoder ignores HTTP trailer header when empty line is rece… (#8799)

* HttpObjectDecoder ignores HTTP trailer header when empty line is received in seperate ByteBuf

Motivation:

When the empty line that termines the trailers was sent in a seperate ByteBuf we did ignore the previous parsed trailers and just returned none.

Modifications:

- Correct respect previous parsed trailers.
- Add unit test.

Result:

Fixes https://github.com/netty/netty/issues/8736"
ad922fa47e1c6af9218836730e13d438690a71e5,"Mark ChannelHandlerAdapter.exceptionCaught(...) as @deprecated. (#8826)

Motivation:

41e03adf249ee9d23938fecf9be980a096710b36 marked ChannelHandler.exceptionCaught(...) as @deprecated but missed to also mark ChannelHandlerAdapter.exceptionCaught(...) as @deprecated. We should do so as most people extend the base classes and not implement the interfaces directly.

Modifications:

Mark ChannelHandlerAdapter.exceptionCaught(...) as @deprecated as well.

Result:

Mark method as @deprecated to warn users about its removal."
7bba4f49cf133384e2c368096994a1d891f60274,"Reduce GC produced by native DatagramChannel implementations when in connected mode. (#8806)

Motivation:

In the native code EpollDatagramChannel / KQueueDatagramChannel creates a DatagramSocketAddress object for each received UDP datagram even when in connected mode as it uses the recvfrom(...) / recvmsg(...)  method. Creating these is quite heavy in terms of allocations as internally, char[], String, Inet4Address, InetAddressHolder, InetSocketAddressHolder, InetAddress[], byte[] objects are getting generated when constructing the object. When in connected mode we can just use regular read(...) calls which do not need to allocate all of these.

Modifications:

- When in connected mode use read(...) and NOT recvfrom(..) / readmsg(...) to reduce allocations when possible.
- Adjust tests to ensure read works as expected when in connected mode.

Result:

Less allocations and GC when using native datagram channels in connected mode. Fixes https://github.com/netty/netty/issues/8770."
98aa5fbd66093bbb3b9ed6e6724586074d6f804f,"CompositeByteBuf tidy-up (#8784)

Motivation

There's some miscellaneous cleanup/simplification of CompositeByteBuf
which would help make the code a bit clearer.

Modifications

- Simplify web of constructors and addComponents methods, reducing
duplication of logic
- Rename `Component.freeIfNecessary()` method to just `free()`, which is
less confusing (see #8641)
- Make loop in addComponents0(...) method more verbose/readable (see
https://github.com/netty/netty/pull/8437#discussion_r232124414)
- Simplify addition/subtraction in setBytes(...) methods

Result

Smaller/clearer code"
154d6e87f6befe1d8bbb71cb58a6f844a8d4f051,"Fix varargs parameter logging in LocationAwareSlf4JLogger (#8834)

Motivation

As pointed out by @91he in
https://github.com/netty/netty/pull/8595#issuecomment-459181794, there
is a remaining bug in LocationAwareSlf4JLogger following the updates
done in #8595. The logging methods which take a varargs message
parameter array should format using MessageFormatter.arrayFormat rather
than MessageFormatter.format.

Modifications

Change varargs param methods in LocationAwareSlf4JLogger to use
MessageFormatter.arrayFormat and extend unit test to cover these cases.

Results

Correct log output when logging messages with > 2 parameters when using
LocationAwareSlf4JLogger."
7f61055cbdcd8ac1226d3572c2f38667c978f856,"Reduce direct memory overhead per EpollEventLoop when using EpollDatagramChannel (#8825)

Motivation:

When using a linux distribution that supports sendmmsg(...) we allocated enough direct memory per EpollEventLoop to be able to write IOV_MAX number of iovecs per message that can be written per sendmmsg.
The number of messages that can be written per sendmmsg(...) call is limited by UIO_MAX_IOV.

In practice this resulted in an allocation of 16MB direct memory per EpollEventLoop instance that stayed allocated until the EpollEventLoop was shutdown which happens as part of the shutdown of the enclosing EpollEVentLoopGroup.

This resulted in quite some heavy direct memory usage in practice even when in practice we have very slim changes to ever need all of the memory.

Modification:

Adjust NativeDatagramPacketArray to share one IovArray instance across all NativeDatagramPacket instances it holds. This limits the max number of iovecs we can write across all messages to IOV_MAX per sendmmsg(...) call.
This in practice will still be enough to allow us to write multiple messages with one syscall while keep the memory overhead to a minimum.

Result:

Smaller direct memory footprint per EpollEventLoop when using EpollDatagramChannel on distributions that support sendmmsg(...).
Fixes https://github.com/netty/netty/issues/8814"
95bc819513c333c4bf7269613ef92b8c1a51b05a,"http-proxy: attach headers to connection exception (#8824)

Motivation:
When a proxy fails to connect, it includes useful error detail in
the headers.

Modification:
- Add an HTTP Specific ProxyConnectException
- Attach headers (if any) in the event of a non-200 response

Result:
Able to surface more useful error info to applications"
32563bfcc129ef9332f175c277e4f6b59fd37d8c,"Selective Message Aggregation (#8793)

Motivation

Implementations of MessageAggregator (HttpObjectAggregator in particular) may wish to
selectively aggrerage requests and responses on a case-by-case basis such as for example
only POST requests or only responses of a certain content-type.

Modifications

Adding a flag to MessageAggregator that toggles between true/false depending on if aggregation
is desired for the current message or not.

Result

Fixes #8772"
b72fea340bf97e1ec012ed0c48fe1b930d12078e,"Improve DateFormatter parsing performance (#8821)

Motivation:

Just was looking through code and found 1 interesting place DateFormatter.tryParseMonth that was not very effective, so I decided to optimize it a bit.

Modification:

Changed DateFormatter.tryParseMonth method. Instead of invocation regionMatch() for every month - compare chars one by one.

Result:

DateFormatter.parseHttpDate method performance improved from ~3% to ~15%.

Benchmark                                                                (DATE_STRING)   Mode  Cnt        Score       Error  Units
DateFormatter2Benchmark.parseHttpHeaderDateFormatter     Sun, 27 Jan 2016 19:18:46 GMT  thrpt    6  4142781.221 ± 82155.002  ops/s
DateFormatter2Benchmark.parseHttpHeaderDateFormatter     Sun, 27 Dec 2016 19:18:46 GMT  thrpt    6  3781810.558 ± 38679.061  ops/s
DateFormatter2Benchmark.parseHttpHeaderDateFormatterNew  Sun, 27 Jan 2016 19:18:46 GMT  thrpt    6  4372569.705 ± 30257.537  ops/s
DateFormatter2Benchmark.parseHttpHeaderDateFormatterNew  Sun, 27 Dec 2016 19:18:46 GMT  thrpt    6  4339785.100 ± 57542.660  ops/s"
4c64c98f348131e0792ba4a92ce3d0003237d56a,"use checkPositive/checkPositiveOrZero (#8835)

Motivation:

We can replace some ""hand-rolled"" integer checks with our own static utility method to simplify the code.

Modifications:

Use methods provided by `ObjectUtil`.

Result:

Cleaner code and less duplication"
737519314153f9146eaf532cd4e945a621cf3fa5,"Don't update state of PromiseCombiner when finish(null) is called (#8843)

Motivation:

When we fail a call to PromiseCombiner.finish(...) because of a null argument we must not update the internal state before throwing.

Modifications:

- First do the null check and only after we validated that the argument is not null update the internal state
- Add test case.

Modifications:

Do not mess up internal state of PromiseCombiner when finish(...) is called with a null argument.

Result:

After your change, what will change."
c6a90d90a6558a78dee53e4a9667addde870e849,"Add more tests to KQueue and Epoll testsuites. (#8851)

Motivation:

We missed to extend a few tests from the testsuite and so also run these with our native KQueue and Epoll transport.

Modifications:

Extend tests and so run these for our native transports as well.

Result:

More tests."
fa6a8cb09c9679468a6c2d912ddfbbe885ee0c08,"Support using an Executor to offload blocking / long-running tasks wh… (#8847)

Motivation:

The SSLEngine does provide a way to signal to the caller that it may need to execute a blocking / long-running task which then can be offloaded to an Executor to ensure the I/O thread is not blocked. Currently how we handle this in SslHandler is not really optimal as while we offload to the Executor we still block the I/O Thread.

Modifications:

- Correctly support offloading the task to the Executor while suspending processing of SSL in the I/O Thread
- Add new methods to SslContext to specify the Executor when creating a SslHandler
- Remove @deprecated annotations from SslHandler constructor that takes an Executor
- Adjust tests to also run with the Executor to ensure all works as expected.

Result:

Be able to offload long running tasks to an Executor when using SslHandler. Partly fixes https://github.com/netty/netty/issues/7862 and https://github.com/netty/netty/issues/7020."
c68e85b749b5433634dab59823a9748cea72fdf5,"Fix h2c upgrade failure when multiple connection headers are present in upgrade request (#8848)

Motivation:

When more than one connection header is present in h2c upgrade request, upgrade fails. This is to fix that.

Modification:
In HttpServerUpgradeHandler's upgrade() method, check whether any of the connection header value is upgrade, not just the first header value which might return a different value other than upgrade.

Result:
Fixes #8846.

With this PR, now when multiple connection headers are sent with the upgrade request, upgrade will not fail."
8fecbab2c56d3f49d0353d58ee1681f3e6d3feca,"Handle null ""origin"" header in ""Old Hixie 75 handshake"" as proper bad request. (#8864)

Motivation:

Gracefully respond on bad client request.
We have a set of errors produced by Android 7.1.1/7.1.2 clients where both headers `HttpHeaderNames.SEC_WEBSOCKET_VERSION` and `HttpHeaderNames.ORIGIN` are not present. Absence of the first headers leads to WebSocketServerHandshaker00 be applied as a handshaker. However, null 2nd header causes

```
java.lang.NullPointerException: value
 io.netty.util.internal.ObjectUtil.checkNotNull(ObjectUtil.java:33)
 io.netty.handler.codec.DefaultHeaders.addObject(DefaultHeaders.java:327)
 io.netty.handler.codec.http.DefaultHttpHeaders.add(DefaultHttpHeaders.java:123)
 io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker00.newHandshakeResponse(WebSocketServerHandshaker00.java:162)
```
Which causes connection close with unclear reason.

Modification:

Added null-check, and in case of null an appropriate WebSocketHandshakeException is thrown.

Result:

In case of null `HttpHeaderNames.ORIGIN` header a WebSocketHandshakeException is caught by WebSocketServerProtocolHandler which sends a graceful `BAD_REQUEST`."
098705040d53179524e21164ac1ed758542ed292,"Log the shaded form of native workdir system property (#8867)

Motivation:

When users' /tmp is noexec, NativeLibraryLoader logs a message informing
them how to fix the problem by setting a system property. However, if
Netty has been shaded that message will tell them to set the un-shaded
system property name, which won't work.

Modifications:

Change the code to let shading tools rename the native.workdir property
name reference within user-visible log messages.

Notably, debug logs were _not_ changed, as there's many debug statements
including a variety of property names. Fixing them would be a much more
invasive change and have limited benefit.

Result:

The users will see the correctly-named system property to set if they
are using a noexec /tmp."
1c6191c16636c162b21b38106e9a6289abbbcc7c,"Do not depend on the implementation detail of Unpooled.buffer(int) when accessing backing array. (#8865)

Motivation:

We should not depend on the implementation detail of Unpooled.buffer(int) to allocate the exact size of backing byte[] as depending on the implementation it may return a buffer with a bigger backing array.

Modifications:

Explicit allocate the byte[] and wrap it in the ByteBuf. This way we are sure that ByteBuf.array() returns an byte[] which has the exact length and content we expect.

Result:

More correct and safe usage of ByteBuf.array()"
f176384a729c1d9352c9ed878b9b967ca2f31bf8,"Include the original Exception that caused the Channel to be closed in the ClosedChannelException (#8863)

Motivation:

To make it easier to understand why a Channel was closed previously and so why the operation failed with a ClosedChannelException we should include the original Exception.

Modifications:

- Store the original exception that lead to the closed Channel and include it in the ClosedChannelException that is used to fail the operation.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/8862."
d02b51965f6b4906ca1f8f9648c2eb801df7b94a,"Don't deregister Channel as part of closing it when using native kqueue transport (#8881)

Motivation:

In https://github.com/netty/netty/pull/8665 we changed how we handle the registration of Channels to KQueue but missed to removed some code which would deregister the Channel before it actual closed the underlying socket. This could lead to have events triggered still while not have a mapping to the Channel anymore.

Modifications:

Remove deregister call during socket closure.

Result:

Fixes https://github.com/netty/netty/issues/8849."
5d448377e94ca1eca3ec994d34a1170912e57ae9,"Avoid unnecessary char casts for CookieEncoder (#8827)

Motivation:

Avoid unnecessary (char) casts by changing variables types.

Modifications:

Use chars directly.

Result:

Less casts."
81e43d50880fbe007c27e897034fdfa0c844a88b,"DefaultFileRegion.transferTo with invalid count may cause busy-spin (#8885)

Motivation:

`DefaultFileRegion.transferTo` will return 0 all the time when we request more data then the actual file size. This may result in a busy spin while processing the fileregion during writes.

Modifications:

- If we wrote 0 bytes check if the underlying file size is smaller then the requested count and if so throw an IOException
- Add DefaultFileRegionTest
- Add a test to the testsuite

Result:

Fixes https://github.com/netty/netty/issues/8868."
e4d4775a10ed7e958ccdae3e5494bb0bee890bf7,"Support removal using values iterator. (#8866)

Motivation:

As ActiveMQ project using netty, we want to make use of this class, unfortunately the iterator on values(), seems to not support remove method, even so the delegated iterator does. Currently we have to clone and modify this class locally albeit a one line change is needed, it would be ideal if netty could allow remove, then removing the need to maintain a clone.  

Modifications:

* remove throws UnsupportedOperationException, and instead call remove method on delegated iterator

Result:

Be able to call Iterator.remove() for the values."
215b61e8e249e8f3f573864a53530e46ca7b21f7,"Add test for Iterator.remove() on KObjectHashMap.values().iterator() (#8891)

Motivation:

https://github.com/netty/netty/pull/8866 added support for calling Iterator.remove() but did not add a testcase.

Modifications:

Add testcase to ensure removal works.

Result:

Better test-coverage."
d3d0b6478b92e5ec48a6378e7c646cd99d8f9bde,"Update JDK12 and 13 to latest EA releases. (#8809)

Motivation:

We use outdated EA releases when building and testing with JDK 12 and 13.

Modifications:

- Update versions.
- Add workaround for possible JDK12+ bug.

Result:

Use latest releases"
c6d3792df01210df05c98e1b4f8beb95be9f368e,"Correctly resume wrap / unwrap when SslTask execution completes (#8899)

Motivation:

fa6a8cb09c9679468a6c2d912ddfbbe885ee0c08 introduced correct dispatching of delegated tasks for SSLEngine but did not correctly handle some cases for resuming wrap / unwrap after the task was executed. This could lead to stales, which showed up during tests when running with Java11 and BoringSSL.

Modifications:

- Correctly resume wrap / unwrap in all cases.
- Fix timeout value which was changed in previous commit by mistake.

Result:

No more stales after task execution."
625c4e8286d3c8a36046feb1289b6b710c7541a5,"Tighten up contract of PromiseCombiner and so make it more safe to use (#8886)

Motivation:

PromiseCombiner is not thread-safe and even assumes all added Futures are using the same EventExecutor. This is kind of fragile as we do not enforce this. We need to enforce this contract to ensure it's safe to use and easy to spot concurrency problems.

Modifications:

- Add new contructor to PromiseCombiner that takes an EventExecutor and deprecate the old non-arg constructor.
- Check if methods are called from within the EventExecutor thread and if not fail
- Correctly dispatch on the right EventExecutor if the Future uses a different EventExecutor to eliminate concurrency issues.

Result:

More safe use of PromiseCombiner + enforce correct usage / contract."
0811409ca3f4a8df94c9d2e921c47c7487e90793,"Further reduce ensureAccessible() overhead (#8895)


Motivation:

This PR fixes some non-negligible overhead discovered in the ByteBuf
accessibility (non-zero refcount) checking. The cause turned out to be
mostly twofold:
- Unnecessary operations used to calculate the refcount from the ""raw""
encoded int field value
- Call stack depths exceeding the default limit for inlining, in some
places (CompositeByteBuf in particular)

It's a follow-on from #8882 which uses the maxCapacity field for a
simpler non-negative check. The performance gap between these two
variants appears to be _mostly_ closed, but there's one exception which
may warrant further analysis.

Modifications:

- Replace ABB.internalRefCount() with ByteBuf.isAccessible(), the
default still checks for non-zero refCnt()
- Just test for parity of raw refCnt instead of converting to ""real"",
with fast-path for specific small values
- Make sure isAccessible() is delegated by derived/wrapper ByteBufs
- Use existing freed flag in CompositeByteBuf for faster isAccessible()
- Manually inline some calls in methods like CompositeByteBuf.setLong()
and AbstractReferenceCountedByteBuf.isAccessible() to reduce stack
depths (to ensure default inlining limit isn't hit)
- Add ByteBufAccessBenchmark which is an extension of
UnsafeByteBufBenchmark (maybe latter could now be removed)

Results:

Before:

Benchmark   (bufferType)  (checkAccessible)  (checkBounds)   Mode  Cnt
Score          Error  Units
readBatch         UNSAFE               true           true  thrpt   30
84524972.863 ±   518338.811  ops/s
readBatch   UNSAFE_SLICE               true           true  thrpt   30
38608795.037 ±   298176.974  ops/s
readBatch           HEAP               true           true  thrpt   30
80003697.649 ±   974674.119  ops/s
readBatch      COMPOSITE               true           true  thrpt   30
18495554.788 ±   108075.023  ops/s
setGetLong        UNSAFE               true           true  thrpt   30
247069881.578 ± 10839162.593  ops/s
setGetLong  UNSAFE_SLICE               true           true  thrpt   30
196355905.206 ±  1802420.990  ops/s
setGetLong          HEAP               true           true  thrpt   30
245686644.713 ± 11769311.527  ops/s
setGetLong     COMPOSITE               true           true  thrpt   30
83170940.687 ±   657524.123  ops/s
setLong           UNSAFE               true           true  thrpt   30
278940253.918 ±  1807265.259  ops/s
setLong     UNSAFE_SLICE               true           true  thrpt   30
202556738.764 ± 11887973.563  ops/s
setLong             HEAP               true           true  thrpt   30
280045958.053 ±  2719583.400  ops/s
setLong        COMPOSITE               true           true  thrpt   30
121299806.002 ±  2155084.707  ops/s


After:

Benchmark   (bufferType)  (checkAccessible)  (checkBounds)   Mode  Cnt
Score          Error  Units
readBatch         UNSAFE               true           true  thrpt   30
101641801.035 ±  3950050.059  ops/s
readBatch   UNSAFE_SLICE               true           true  thrpt   30
84395902.846 ±  4339579.057  ops/s
readBatch           HEAP               true           true  thrpt   30
100179060.207 ±  3222487.287  ops/s
readBatch      COMPOSITE               true           true  thrpt   30
42288494.472 ±   294919.633  ops/s
setGetLong        UNSAFE               true           true  thrpt   30
304530755.027 ±  6574163.899  ops/s
setGetLong  UNSAFE_SLICE               true           true  thrpt   30
212028547.645 ± 14277828.768  ops/s
setGetLong          HEAP               true           true  thrpt   30
309335422.609 ±  2272150.415  ops/s
setGetLong     COMPOSITE               true           true  thrpt   30
160383609.236 ±   966484.033  ops/s
setLong           UNSAFE               true           true  thrpt   30
298055969.747 ±  7437449.627  ops/s
setLong     UNSAFE_SLICE               true           true  thrpt   30
223784178.650 ±  9869750.095  ops/s
setLong             HEAP               true           true  thrpt   30
302543263.328 ±  8140104.706  ops/s
setLong        COMPOSITE               true           true  thrpt   30
157083673.285 ±  3528779.522  ops/s

There's also a similar knock-on improvement to other benchmarks (e.g.
HPACK encoding/decoding) as shown in #8882.

For sanity I did a final comparison of the ""fast path"" tweak using one
of the HPACK benchmarks:

(rawCnt & 1) == 0:

Benchmark                     (limitToAscii)  (sensitive)  (size)   Mode
Cnt      Score     Error  Units
HpackDecoderBenchmark.decode            true         true  MEDIUM  thrpt
30  50914.479 ± 940.114  ops/s


rawCnt == 2 || rawCnt == 4 || rawCnt == 6 || rawCnt == 8 ||  (rawCnt &
1) == 0:

Benchmark                     (limitToAscii)  (sensitive)  (size)   Mode
Cnt      Score      Error  Units
HpackDecoderBenchmark.decode            true         true  MEDIUM  thrpt
30  60036.425 ± 1478.196  ops/s"
e609b5eeb7daba819f530fea500991c9cfc18412,"Close consumed inputs in ChunkedWriteHandler (#8876)

Motivation:

ChunkedWriteHandler needs to close both successful and failed
ChunkInputs. It used to never close successful ones.

Modifications:

* ChunkedWriteHandler always closes ChunkInput before completing
the write promise. 
* Ensure only ChunkInput#close() is invoked
on a failed input.
* Ensure no methods are invoked on a closed input.

Result:

Fixes https://github.com/netty/netty/issues/8875."
90ea3ec9f68d4c94e9fbbc94a8e9ad64e81e35ee,"Adjust tests to be able to build / test when using IBM J9 / OpenJ9 (#8900)

Motivation:

We should run a CI job using J9 to ensure netty also works when using different JVMs.

Modifications:

- Adjust PooledByteBufAllocatorTest to be able to complete faster when using a JVM which takes longer when joining Threads (this seems to be the case with J9).
- Skip UDT tests on J9 as UDT is not supported there.

Result:

Be able to run CI against J9."
ef3e98d905b675188d32e97e09c916a4b7edf8aa,"Add docker-compose config to run build with OpenJ9 JVM (#8903)

Motivation:

To ensure Netty works on different JVMs we should also run tests on the CI with these.

Modifications:

Add docker-compose config to run build with OpenJ9 JVM

Result:

Ensure Netty works with different JVMs"
6f507dfeed8bb57f6107f7010af8b582eb246aa7,"Only remove ReferenceCountedOpenSslEngine from OpenSslEngineMap when engine is destroyed (#8905)

Motivation:

We must only remove ReferenceCountedOpenSslEngine from OpenSslEngineMap when engine is destroyed as the verifier / certificate callback may be called multiple times when the remote peer did initiate a renegotiation.
If we fail to do so we will cause an NPE like this:

```
13:16:36.750 [testsuite-oio-worker-5-18] DEBUG i.n.h.s.ReferenceCountedOpenSslServerContext - Failed to set the server-side key material
java.lang.NullPointerException: null
	at io.netty.handler.ssl.OpenSslKeyMaterialManager.setKeyMaterialServerSide(OpenSslKeyMaterialManager.java:69)
	at io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslServerCertificateCallback.handle(ReferenceCountedOpenSslServerContext.java:212)
	at io.netty.internal.tcnative.SSL.readFromSSL(Native Method)
	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.readPlaintextData(ReferenceCountedOpenSslEngine.java:575)
	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(ReferenceCountedOpenSslEngine.java:1124)
	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(ReferenceCountedOpenSslEngine.java:1236)
	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(ReferenceCountedOpenSslEngine.java:1279)
	at io.netty.handler.ssl.SslHandler$SslEngineType$1.unwrap(SslHandler.java:217)
	at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1330)
	at io.netty.handler.ssl.SslHandler.decodeNonJdkCompatible(SslHandler.java:1237)
	at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1274)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.oio.AbstractOioByteChannel.doRead(AbstractOioByteChannel.java:170)
	at io.netty.channel.oio.AbstractOioChannel$1.run(AbstractOioChannel.java:40)
	at io.netty.channel.ThreadPerChannelEventLoop.run(ThreadPerChannelEventLoop.java:69)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
```

While the exception is kind of harmless (as we will reject the renegotiation at the end anyway) it produces some noise in the logs.

Modifications:

Don't remove engine from map after handshake is complete but wait for it to be removed until the engine is destroyed.

Result:

No more NPE and less noise in the logs."
14ef469f3170842fdf6e3f41c745017fcd9679e4,"Use maven plugin to prevent API/ABI breakage as part of build process (#8904)


Motivation:

Netty is very widely used which can lead to a lot of pain when we break API / ABI. We should make use japicmp-maven-plugin during the build to verify we do not introduce breakage by mistake.

Modifications:

- Add japicmp-maven-plugin to the build process
- Fix a method signature change in HttpProxyHandler that was flagged as a possible problem.

Result:

Ensure no API/ABI breakage accour between releases."
452abd9b51adeeba2fdad8417f94f493e5bfee38,"Correctly monkey-patch id also in whe os / arch is used within library name. (#8913)

Motivation:

2bb9f64e16dbb5cbbf691e284a97d745378a7b8a introduced a change which made it possible to use different shaded versions of netty-tcnative on the classpath. This only partly worked as we did not correctly handled the case when os / arch is part of the library name (which is the case when netty-tcnative-boringssl-static is used with the uber jar).

Modifications:

- If patching the ID failed we retry again with the os / arch stripped
- Add unit tests to verify that patching ID now works with and without os / arch as suffix.

Result:

Using multiple shaded version of netty-tcnative-boringssl-static on MacOS works."
39fcdb3e0db5686696784dd43f59d646a3beab73,"Support delegating task when using ReferenceCountedOpenSslEngine. (#8859)

Motivation:

SSLEngine API has a notion of tasks that may be expensive and offload these to another thread. We did not support this when using our native implementation but can now for various operations during the handshake.

Modifications:

- Support offloading tasks during the handshake when using our native SSLEngine implementation
- Correctly handle the case when NEED_TASK is returned and nothing was consumed / produced yet

Result:

Be able to offload long running tasks from the EventLoop when using SslHandler with our native SSLEngine."
a651804f9d9ca9b42ae5d4d9590228522f7851ba,"Carefully manage Keep-Alive connections in HttpStaticFileServer (#8914)

Motivation:

Simple rules:

* close the connection when sending any error
* specify ""Connection: close"" header when closing the connection
* successful responses should keep the connection intact when otherwise is not requested by the client

Modifications:

* ""send response and cleanup the connection"" logic moved to a helper
* for all successful responses set ""Content-Lenght"" header
* do not specify ""Connection: Keep-Alive"" header as far it's a default for HTTP/1.1
* set ""Connection: close"" header when necessary

Result:

Keep-Alive connections management is inlined with RFCs."
0de5402337c3c0dcf91b603e04a0dbaa75b05616,"Add interopt tests between Conscrypt and OpenSSL SSLEngine implementations. (#8919)

Motivation:

In the past we found a lot of SSL related bugs because of the interopt tests we have in place between different SSLEngine implementations. We should have as many of these interopt tests as possible for this reason.

Modifications:

- Add interopt tests between Conscrypt and OpenSSL SSLEngine implementations

Result:

More tests for SSL."
1725504a37dc8c1cfe69bd9384d43da9aca26117,"Do not use GetPrimitiveArrayCritical(...) due multiple not-fixed bugs… (#8921)

* Do not use GetPrimitiveArrayCritical(...) due multiple not-fixed bugs related to GCLocker

Motivation:

GetPrimitiveArrayCritical(...) may cause multiple not-fixed bugs related to the GCLocker while there is little gain for our use-case. We should just use GetByteArrayRegion(...) and copy into a small on-stack buffer.

See also:

- https://shipilev.net/jvm/anatomy-quarks/9-jni-critical-gclocker/#_g1
- https://bugs.openjdk.java.net/browse/JDK-8048556
- https://bugs.openjdk.java.net/browse/JDK-8057573
- https://bugs.openjdk.java.net/browse/JDK-8057586

Special thanks to @jayv @shipilev @apangin for the pointers.

Modifications:

Replace GetPrimitiveArrayCritical(...) with GetByteArrayRegion(...)

Result:

Less risks hitting GCLocker related bugs."
67663fa7d171e224ce288a184cbe14563357ca34,"HttpContentDecoder must continue read when it did not produce any mes… (#8922)

Motivation:

When HttpContentDecoder (and so HttpContentDecompressor) does not produce any message we need to make sure it calls ctx.read() if auto read is false to not stale.

Modifications:

- Keep track if we need to call ctx.read() or not
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/8915."
3e24e9f6ff7f763874a8e048fdf38ea55e61550e,"ReferenceCountedOpenSslEngines SSLSession must provide local certific… (#8918)


Motivation:

The SSLSession that is returned by SSLEngine.getHandshakeSession() must be able to provide the local certificates when the TrustManager is invoked on the server-side.

Modifications:

- Correctly return the local certificates
- Add unit test

Result:

Be able to obtain local certificates from handshake SSLSession during verification on the server side."
b2eaab092b68f3c61f1e14f39e38c964e5095dd7,"Optimize Hpack and AsciiString hashcode and equals (#8902)

Motivation:

While looking at hpack header-processing hotspots I noticed some low
level too-big-to-inline methods which can be shrunk.

Modifications:

Reduce bytecode size and/or runtime operations used for the following
methods:

PlatformDependent0.equals(byte[], ...)
PlatformDependent0.equalsConstantTime(byte[], ...)
PlatformDependent0.hashCodeAscii(byte[],int,int)
PlatformDependent.hashCodeAscii(CharSequence)

Result:

Existing benchmarks show decent improvement

Before

Benchmark                     (size)   Mode  Cnt         Score         Error  Units
HpackUtilBenchmark.newEquals   SMALL  thrpt    5  17200229.374 ± 1701239.198  ops/s
HpackUtilBenchmark.newEquals  MEDIUM  thrpt    5   3386061.629 ±   72264.685  ops/s
HpackUtilBenchmark.newEquals   LARGE  thrpt    5    507579.209 ±   65883.951  ops/s

After

Benchmark                     (size)   Mode  Cnt         Score         Error  Units
HpackUtilBenchmark.newEquals   SMALL  thrpt    5  29221527.058 ± 4805825.836  ops/s
HpackUtilBenchmark.newEquals  MEDIUM  thrpt    5   6556251.645 ±  466115.199  ops/s
HpackUtilBenchmark.newEquals   LARGE  thrpt    5    879828.889 ±  148136.641  ops/s

Before

Benchmark                          (size)  Mode  Cnt     Score     Error  Units
PlatformDepBench.unsafeBytesEqual       4  avgt   10     4.263 ±   0.110  ns/op
PlatformDepBench.unsafeBytesEqual      10  avgt   10     5.206 ±   0.133  ns/op
PlatformDepBench.unsafeBytesEqual      50  avgt   10     8.160 ±   0.320  ns/op
PlatformDepBench.unsafeBytesEqual     100  avgt   10    13.810 ±   0.751  ns/op
PlatformDepBench.unsafeBytesEqual    1000  avgt   10    89.077 ±   7.275  ns/op
PlatformDepBench.unsafeBytesEqual   10000  avgt   10   773.940 ±  24.579  ns/op
PlatformDepBench.unsafeBytesEqual  100000  avgt   10  7546.807 ± 110.395  ns/op

After

Benchmark                          (size)  Mode  Cnt     Score     Error  Units
PlatformDepBench.unsafeBytesEqual       4  avgt   10     3.337 ±   0.087  ns/op
PlatformDepBench.unsafeBytesEqual      10  avgt   10     4.286 ±   0.194  ns/op
PlatformDepBench.unsafeBytesEqual      50  avgt   10     7.817 ±   0.123  ns/op
PlatformDepBench.unsafeBytesEqual     100  avgt   10    11.260 ±   0.412  ns/op
PlatformDepBench.unsafeBytesEqual    1000  avgt   10    84.255 ±   2.596  ns/op
PlatformDepBench.unsafeBytesEqual   10000  avgt   10   591.892 ±   5.136  ns/op
PlatformDepBench.unsafeBytesEqual  100000  avgt   10  6978.859 ± 285.043  ns/op"
ff7a9fa091a8bf2e10020f83fc4df1c44098bbbb,[maven-release-plugin] prepare release netty-4.1.34.Final
92b19cfedd43400afa4cd352b050dccdb2442408,[maven-release-plugin] prepare for next development iteration
0ee067082bada3514cb5f4c77888558f8f4649d1,"Add unit test for query TXT records. (#8923)

Motivation:

We did not have any unit tests that queries for TXT records.

Modifications:

Add unit test to query TXT records.

Result:

More test-coverage."
5eb91d9ca1d09b74a5fe4f8f8e7381caae3e1c2c,"Remove --add-opens=java.base/java.nio=ALL-UNNAMED when running tests as it is not needed anymore since a long time (#8934)

Motivation:

At some point we needed --add-opens=java.base/java.nio=ALL-UNNAMED to run our native tests but this is not true anymore.

Modifications:

Remove --add-opens=java.base/java.nio=ALL-UNNAMED when running native tests.

Result:

Remove obsolate jvm arg."
c20c754d7849ee3c0f23450bac89d74b1ac73ada,"Fail build when Illegal reflective access is detected (#8933)

Motivation:

We want to make the experience as smooth as possible for our users when using Java9+ and so should ensure we do not produce any 'Illegal reflective access' errors when using netty.

Modifications:

Add jvmArgs when running our tests that will deny reflective access and so will fail the build at the end due not be able to load some classes.

Result:

Ensure we do not produce any illegal refelctive access errors when using java9+"
c8daea3045e4587a893a1b170dea447efe7becb0,"Fix HttpUtil.isKeepAlive to behave correctly when Connection is a comma separated list (#8924)

Motivation:

According to the specification, the ""Connection"" header's syntax is:

""
The Connection header field's value has the following grammar:

     Connection        = 1#connection-option
     connection-option = token

Connection options are case-insensitive.
""
https://tools.ietf.org/html/rfc7230#section-6.1

This means that Connection's value can have at least one element or
a comma separated list with elements
When calculating whether the connection can remain open,
HttpUtil.isKeepAlive(HttpMessage) should take this into account.

Modifications:

- Check for ""close"" and ""keep-alive"" in a comma separated list
- Add unit test

Result:

HttpUtil.isKeepAlive(HttpMessage) works correctly when ""Connection: Upgrade, close"""
eab849176b734da0b11a0055ec340b0546f5fb31,"Fix typo in NativeLibraryLoader debug log message (#8947)

Motivation:

We had a typo in NativeLibraryLoader debug log message which could misslead the user.

Modifications:

Fix typo to correctly state java.library.path

Result:

Correct and less confusing log message"
d0fb41e529effd0f8612129fea89601cbbf52cd8,"Adjust testsuite-osgi to resolve bundles from local build (#8944)

Motivation:

testsuite-osgi currently resolve its bundles from the local / remote maven repository, which means you will need to do `mvn install` before it can pick up the bundles. Beside this this also means that you may pick up old versions if you forgot to call `install` before running it.

Modifications:

Use alta-maven-plugin to be able to resolve bundles from the local build directory during the build.

Result:

No need to install jars before running the OSGI testsuite and ensure we always test with the latest jars."
e9ce5048dfdfed32df28e46fae6e766d8fd6d734,"Correctly produce ssl alert when certificate validation fails on the client-side when using native SSL implementation. (#8949)

Motivation:

When the verification of the server cert fails because of the used TrustManager on the client-side we need to ensure we produce the correct alert and send it to the remote peer before closing the connection.

Modifications:

- Use the correct verification mode on the client-side by default.
- Update tests

Result:

Fixes https://github.com/netty/netty/issues/8942."
eb1d12c75736c06525d42dab9c7b2e7b7a33eb6d,"Expose the global direct memory counter. (#8945)


Motivation:
This counter is very useful in order to monitor Netty without having every ByteBufAllocator in the JVM

Modification:
Expose the value of DIRECT_MEMORY_COUNTER as we are already doing for DIRECT_MEMORY_LIMIT.
We are returning -1 in case that DIRECT_MEMORY_COUNTER is not available.

Result:

Be able to get the amount of direct memory used."
df8b9d3fb9348cbcffd246331c5441f2f25bec64,"Add docker-sync config to step up docker-usage on macOS. (#8948)

Motivation:

docker-sync.io helps to speed up docker FS access on macOS and so make builds there a lot faster. We should add some config to help users use it.

Modifications:

Add docker-sync configs for centos-6.18 which is what we use for releases.

Result:

Faster builds via docker and when using macOS possible."
e7b319557033d889fe5a4c0cbaac34b15f9799ba,"Support ALLOW_HALF_CLOSURE channel option on Unix domain socket. (#8932)

Motivation:

Since DomainSocketChannel is a DuplexChannel,  which be able to shutdown input or output individually on demands, but ALLOW_HALF_CLOSURE channel option has not been supported yet.

I thought this could be a missing feature of Unix domain socket, so here the PR for it.

Modifications:

1. Added allHalfClosure property both in  EpollDomainSocketChannelConfig and KQueueDomainSocketChannelConfig,
2. Enabled isAllowHalfClosure method of native channel to support domain channel config,
3. Created EpollDomainSocketShutdownOutputByPeerTest and KQueueDomainSocketShutdownOutputByPeerTest to verify the change.

Result:

ALLOW_HALF_CLOSURE channel option can be set with DomainSocketChannel, and no more warning of Unknown channel option 'ALLOW_HALF_CLOSURE'."
c7248d84b58f173d8df3e91987c1038986cd31e9,"Let GlobalEventExecutor implement OrderedEventExecutor (#8952)

Motivation:

GlobalEventExecutor does already provide all guarantees of OrderedEventExecutor so it should implement it.

Modifications:

Let GlobalEventExecutor implement OrderedEventExecutor.

Result:

Make it more clear how execution order is handled in GlobalEventExecutor."
32bca6679461ebeffcd170e91ea91851ccc1c9ba,"Add .gitignore for docker-sync stuff

Motivation:

df8b9d3fb9348cbcffd246331c5441f2f25bec64 added config files for docker-sync but missed to add a gitignore for .docker-sync

Modifications:

Add .docker-sync to gitignore

Result:

Ignore .docker-sync directory"
cb231e9796d6f1d1cc96b0cb9da3231e789fd25f,"Remove test.log file that was commited by mistake.

Motivation:

We commit a test.log file by mistake.

Modifications:

Remove the file.

Result:

Cleanup repo."
9b1a59df383559bc568b891d73c7cb040019aca6,"Remove old internal code that is not used anymore after removing usage of ObjectCleaner (#8956)

Motivation:

We dont use ObjectCleaner in our FastThreadLocal anymore so we also dont need to take special care to store it there anymore.

Modifications:

Remove code that is not needed anymore.

Result:

Code cleanup."
daf63373bf83c0d652347be19e087f771a3da425,"AbstractChannelHandlerContext doesn't need to extend DefaultAttributeMap (#8960)

Motivation:

It appears this was an oversight, maybe was valid at some point in the past. Noticed while reviewing #8958.

Modifications:

Change AbstractChannelHandlerContext to not extend DefaultAttributeMap.

Result:

Simpler hierarchy, eliminate unused attributes field from each context instance."
35bc73f9b01932fff1aea9bd15d29e79d4f6ff8c,"Update to new netty-build version to be able to correctly detect copyright header in property files. (#8967)

Motivation:

https://github.com/netty/netty/pull/8963 adds property files which contains a netty copyright header but our old checkstyle regex did not correct detect these.

Modifications:

Update to new netty-build which contains an updated regex.

Result:

Be able to correctly detect copyright headers in property files."
c83904a12a603fe340477447d086674439ca8ac7,"Allow to automatically trim the PoolThreadCache in a timely interval (#8941)

Motivation:

PooledByteBufAllocator uses a PoolThreadCache per Thread that allocates / deallocates to minimize the performance overhead. This PoolThreadCache is trimmed after X allocations to free up buffers that are not allocated for a long time. This works out quite well when the app continues to allocate but fails if the app stops to allocate frequently (for whatever reason) and so a lot of memory is wasted and not given back to the arena / freed.

Modifications:

- Add a ThreadExecutorMap that offers multiple methods that wrap Runnable / ThreadFactory / Executor and allow to call ThreadExecutorMap.currentEventExecutor() to get the current executing EventExecutor for the calling Thread.
- Use these methods in the constructors of our EventExecutor implementations (which also covers the EventLoop implementations)
- Add io.netty.allocator.cacheTrimIntervalMillis system property which can be used to specify a fixed rate / interval on which we should try to trim the PoolThreadCache for a EventExecutor that allocates.
- Add PooledByteBufAllocator.trimCurrentThreadCache() to allow the user to trim the cache of the calling thread manually.
- Add testcases
- Introduce FastThreadLocal.getIfExists()

Result:

Allow to better / more frequently trim PoolThreadCache and so give back memory to the area / system."
b36f75044f5e2d7347d8eb9ebf229ababb3433be,"Fix possible ByteBuf leak when CompositeByteBuf is resized (#8946)

Motivation:

The special case fixed in #8497 also requires that we keep a derived slice when trimming components in place, as done by the capacity(int) and discardReadBytes() methods.

Modifications:

Ensure that we keep a ref to trimmed components' original retained slice in capacity(int) and discardReadBytes() methods, so that it is released properly when the they are later freed. Add unit test which fails prior to the fix.

Result:

Edge case leak is eliminated."
922e4635240e1519d22edc0cb1ff9d2382464886,"Don't try to put back MemoryRegionCache.Entry objects into the Recycler when recycled because of a finalizer. (#8955)

Motivation:

In MemoryRegionCache.Entry we use the Recycler to reduce GC pressure and churn. The problem is that these will also be recycled when the PoolThreadCache is collected and finalize() is called. This then can have the effect that we try to load class but the WebApp is already stoped.

This will produce an stacktrace like this on Tomcat:

```
19-Mar-2019 15:53:21.351 INFO [Finalizer] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load [java.util.WeakHashMap]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
 java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [java.util.WeakHashMap]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
	at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1383)
	at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForClassLoading(WebappClassLoaderBase.java:1371)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1224)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1186)
	at io.netty.util.Recycler$3.initialValue(Recycler.java:233)
	at io.netty.util.Recycler$3.initialValue(Recycler.java:230)
	at io.netty.util.concurrent.FastThreadLocal.initialize(FastThreadLocal.java:188)
	at io.netty.util.concurrent.FastThreadLocal.get(FastThreadLocal.java:142)
	at io.netty.util.Recycler$Stack.pushLater(Recycler.java:624)
	at io.netty.util.Recycler$Stack.push(Recycler.java:597)
	at io.netty.util.Recycler$DefaultHandle.recycle(Recycler.java:225)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry.recycle(PoolThreadCache.java:478)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache.freeEntry(PoolThreadCache.java:459)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache.free(PoolThreadCache.java:430)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache.free(PoolThreadCache.java:422)
	at io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:279)
	at io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:270)
	at io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:241)
	at io.netty.buffer.PoolThreadCache.finalize(PoolThreadCache.java:230)
	at java.lang.System$2.invokeFinalize(System.java:1270)
	at java.lang.ref.Finalizer.runFinalizer(Finalizer.java:102)
	at java.lang.ref.Finalizer.access$100(Finalizer.java:34)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:217)
```

Beside this we also need to ensure we not try to lazy load SizeClass when the finalizer is used as it may not be present anymore if the ClassLoader is already destroyed.

This would produce an error like:

```
20-Mar-2019 11:26:35.254 INFO [Finalizer] org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading Illegal access: this web application instance has been stopped already. Could not load [io.netty.buffer.PoolArena$1]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
 java.lang.IllegalStateException: Illegal access: this web application instance has been stopped already. Could not load [io.netty.buffer.PoolArena$1]. The following stack trace is thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access.
	at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForResourceLoading(WebappClassLoaderBase.java:1383)
	at org.apache.catalina.loader.WebappClassLoaderBase.checkStateForClassLoading(WebappClassLoaderBase.java:1371)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1224)
	at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1186)
	at io.netty.buffer.PoolArena.freeChunk(PoolArena.java:287)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache.freeEntry(PoolThreadCache.java:464)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache.free(PoolThreadCache.java:429)
	at io.netty.buffer.PoolThreadCache$MemoryRegionCache.free(PoolThreadCache.java:421)
	at io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:278)
	at io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:269)
	at io.netty.buffer.PoolThreadCache.free(PoolThreadCache.java:240)
	at io.netty.buffer.PoolThreadCache.finalize(PoolThreadCache.java:229)
	at java.lang.System$2.invokeFinalize(System.java:1270)
	at java.lang.ref.Finalizer.runFinalizer(Finalizer.java:102)
	at java.lang.ref.Finalizer.access$100(Finalizer.java:34)
	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:217)
```

Modifications:

- Only try to put the Entry back into the Recycler if the PoolThredCache is not destroyed because of the finalizer.
- Only try to access SizeClass if not triggered by finalizer.

Result:

No IllegalStateException anymoe when a webapp is reloaded in Tomcat that uses netty and uses the PooledByteBufAllocator."
fc6e668186dc1ea8a5ad436c2db7c7078e4043c1,"Add user possibility to skip the evaluation of a certain websocket ex… (#8910)

Motivation:

Add user possibility to skip the evaluation of certain web socket extension,
for example we can skip compression extension for messages that already compressed or very small and etc.

Modification:

This pull request is related with #5669

Result:

User can set to WebSocketClientExtensionHandshaker or WebSocketServerExtensionHandshaker a filter to skip the evaluation of certain extension."
78c02aa033f29d848b3d0eeec141b3840a645703,"Update to latest JDK releases in our CI (#8969)

Motivation:

We should use the latest JDK release on our CI

Modifications:

Update all versions.

Result:

Test on latest JDK versions on our CI"
1ca37a0edbffa22a0c126586ea579400fc187368,"Correctly detect exeception cause when using BoringSSL in SslErrorTest (#8970)

Motivation:

e9ce5048dfdfed32df28e46fae6e766d8fd6d734 added a testcase to ensure we correctly send the alert in all cases but did use a too strict message matching which did not work for BoringSSL as it not uses whitespaces but underscores.

Modifications:

Make the message matching less strict.

Result:

Test pass also when using BoringSSL."
de551dfef00f959f56188940fbbe1e9b329d4454,"Also use adoptjdk builds when using docker-sync (#8971)

Motivation:

We recently changed the docker config to use adoptjdk builds but missed to include the docker-sync related files.

Modifications:

Use adoptjdk there as well.

Result:

More conistent usage of JDK versions."
33128c85f88b3dce364764f4b6696cfd2e23a862,"Add SSLEngineTest to ensure Signature Algorithms are present during KeyManager calls. (#8965)

Motivation:

We had a bug which could case ExtendedSSLSession.getPeerSupportedSignatureAlgorithms() return an empty array when using BoringSSL. This testcase verifies we correctly return algorithms after the fix in https://github.com/netty/netty-tcnative/pull/449.

Modifications:

Add testcase to verify behaviour.

Result:

Ensure we correctly retuen the algorithms."
316dd982848eae7baa8acbe181b5157fbde00031,"Allow to offload certificate validation when using BoringSSL (#8908)

Motivation:

BoringSSL supports offloading certificate validation to a different thread. This is useful as it may need to do blocking operations and so may block the EventLoop.

Modification:

- Adjust ReferenceCountedOpenSslEngine to correctly handle offloaded certificate validation (just as we already have code for certificate selection).

Result:

Be able to offload certificate validation when using BoringSSL."
33e2f5609de4f1d7696457d539ca58acd4e803e0,"Revert ""Allow to offload certificate validation when using BoringSSL (#8908)""

This reverts commit 316dd982848eae7baa8acbe181b5157fbde00031."
41b02368153af86b1ddb19020ebf5e4f7c69aecd,"Allow to offload certificate validation when using BoringSSL (#8974)

Motivation:

BoringSSL supports offloading certificate validation to a different thread. This is useful as it may need to do blocking operations and so may block the EventLoop.

Modification:

- Adjust ReferenceCountedOpenSslEngine to correctly handle offloaded certificate validation (just as we already have code for certificate selection).

Result:

Be able to offload certificate validation when using BoringSSL."
bb1e0381982b122b4ab0b57900602a5e15cdb649,"Cleanup example to use local variable. (#8976)

Motivation:

We can just use a local variable in HttpUploadServerHandler and so make the example code a bit cleaner.

Modifications:

Use local variable.

Result:

Fixes https://github.com/netty/netty/issues/8892."
86ecad517c779de8e3b84862dcfddeaeb6775a4e,"Consolidate creation of SslHandshakeException when caused by a callback that is used in the native SSL implementation. (#8979)

Motivation:

We have multiple places where we store the exception that was produced by a callback in ReferenceCountedOpenSslEngine, and so have a lot of code-duplication.

Modifications:

- Consolidate code into a package-private method that is called from the callbacks if needed

Result:

Less code-duplication and cleaner code."
8206604003ff51b1f3d266e3cf7d63c125857a77,"Upgrade to new netty-build and com.puppycrawl.tools 8.18 (#8980)

Motivation:

com.puppycrawl.tools checkstyle < 8.18 was reported to contain a possible security flaw. We should upgrade.

Modifications:

- Upgrade netty-build and checkstyle.
- Fix checkstyle errors

Result:

Fixes https://github.com/netty/netty/issues/8968."
0a0da67f43354473af9861407749d02fe62e8f6c,"Introduce SingleThreadEventLoop.registeredChannels (#8428)

Motivation:

Systems depending on Netty may benefit (telemetry, alternative even loop scheduling algorithms) from knowing the number of channels assigned to each EventLoop.

Modification:

Expose the number of channels registered in the EventLoop via SingleThreadEventLoop.registeredChannels.

Result:

Fixes #8276."
e7c427c714f5c1894bcd21c345a27d62117377be,"Update to latest openjdk13 EA release (#8990)

Motivation:

A new openjdk13 EA release is out.

Modifications:

Update openjdk13 version.

Result:

Run build on CI with latest openjdk13 EA build"
f7359aa742d558a534cf35ed2bde98090e59661f,"Use SSL.setKeyMaterial(...) to test if the KeyManagerFactory is supported (#8985)

Motivation:

We use SSL.setKeyMaterial(...) in our implementation when using the KeyManagerFactory so we should also use it to detect if we can support KeyManagerFactory.

Modifications:

Use SSL.setKeyMaterial(...) as replacement for SSL.setCertificateBio(...)

Result:

Use the same method call to detect if KeyManagerFactory can be supported as we use in the real implementation."
a2b85a306df8b02ea2e6f222f56f75355660582b,"Fix NPE that was encounter by debugger (will never happen in real code). (#8992)

Motivation:

We synchronize on the chunk.arena when produce the String returned by PoolSubpage.toString() which may raise a NPE when chunk == null. Chunk == null for the head of the linked-list and so a NPE may raised by a debugger. This NPE can never happen in real code tho as we never access toString() of the head.

Modifications:

Add null checks and so fix the possible NPE

Result:

No NPE when using a debugger and inspect the PooledByteBufAllocator."
f8c89e2e055aeb3070d05e6b9425bcff6a8013fd,"Remove call to SSL.setHostNameValidation(...) as it is done in the TrustManager (#8981)

Motivation:

We do not need to call SSL.setHostNameValidation(...) as it should be done as part of the TrustManager implementation. This is consistent with the JDK implementation of SSLEngine.

Modifications:

Remove call to SSL.setHostNameValidation(...)

Result:

More consistent behaviour between our SSLEngine implementation and the one that comes with the JDK."
20042b65222ccfd83e0cda73959139839f3e3135,"Add @SupressWarnings(""deprecation"") to ChannelInboundHandlerAdapter and clarify deprecation in ChannelHandler (#9001)

Motivation:

https://github.com/netty/netty/pull/8826 added @Deprecated to the exceptionCaught(...) method but we missed to add @SupressWarnings(...) to it's sub-types. Beside this we can make the deprecated docs a bit more clear.

Modifications:

- Add @SupressWarnings(""deprecated"")
- Clarify docs.

Result:

Less warnings and more clear deprecated docs."
52411233d322c10687c03e99279cadbceec2b9f4,"Carefully manage Keep-Alive/Close connection headers in all examples (#8966)

Motivation:

""Connection: close"" header should be specified each time we're going
to close an underlying TCP connection when sending HTTP/1.1 reply.

Modifications:

Introduces changes made in #8914 for the following examples:

* WebSocket index page and WebSocket server handler
* HelloWorld server
* SPDY server handler
* HTTP/1.1 server handler from HTTP/2 HelloWorld example
* HTTP/1.1 server handler from tiles example

Result:

Keep-Alive connections management conforms with RFCs."
ad928c19eb58578a3d30cd6eec1b2fa71d757d22,"Mark flaky test as @Ignore (#9010)

Motivation:

0a0da67f43354473af9861407749d02fe62e8f6c introduced a testcase which is flacky. We need to fix it and enable it again.

Modifications:

Mark flaky test as ignore.

Result:

No flaky build anymore."
547a3757374491eef6856c83687e85165a814305,"Always include initial handshake exception when throwing SslHandshakeException (#9008)

Motivation:

A callback may already have stored a initial handshake exception in ReferenceCountedOpenSslEngine so we should include it when throwing a SslHandshakeException to ensure the user has all the infos when debugging.

Modifications:

Include initial handshake exception

Result:

Include all erros when throwing the SslHandshakeException."
60d135f0c88abacc86c10d6743eb41dc8e4a6a2e,"Deprecate ChannelOption.newInstance(...) (#8997)

Motivation:

Deprecate ChannelOption.newInstance(...) as it is not used.

Modifications:

Deprecate ChannelOption.newInstance(...) as valueOf(...) should be used as a replacement.

Result:

Fixes https://github.com/netty/netty/issues/8983."
4b83be1cebab96cbe99dadb1688068ae668969d2,"We should fail fast if the given PrivateKey or X509Certificate chain is not supported by the used SslProvider. (#9009)

Motivation:

Some SslProvider do support different types of keys and chains. We should fail fast if we can not support the type.

Related to https://github.com/netty/netty-tcnative/issues/455.

Modifications:

- Try to parse key / chain first and if if this fails throw and SslException
- Add tests.

Result:

Fail fast."
4373a1fba245b3db03cdf3321712d292e2de508b,"Increase default bits for SelfSignedCertificate (#9019)

Motivation:
During OpenSsl.java initialization, a SelfSignedCertificate is created
during the static initialization block to determine if OpenSsl
can be used.

The default key strength for SelfSignedCertificate was too low if FIPS
mode is used and BouncyCastle-FIPS is the only available provider
(necessary for compliance). A simple fix is to just augment the key
strength to the minimum required about by FIPS.

Modification:
Set default key bit length to 2048 but also allow it to be dynamically set via a system property for future proofing to more stricter security compliance.

Result:
Fixes #9018

Signed-off-by: Farid Zakaria <farid.m.zakaria@gmail.com>"
a3e8c867419b998c5da2174844b5f1e09ff76bed,"Added UDP multicast (with caveats: no ipv6, getInterface, getNetworkI… (#9006)

…nterface, block or loopback-mode-disabled operations).


Motivation:

Provide epoll/native multicast to support high load multicast users (we are using it for a high load telecomm app at my day job).

Modification:

Added support for (ipv4 only) source specific and any source multicast for epoll transport. Some caveats (beyond no ipv6 support initially - there’s a bit of work to add in join and leave group specifically around SSM, as ipv6 uses different data structures for this): no support for disabling loop back mode, retrieval of interface and block operation, all of which tend to be less frequently used.

Result:

Provides epoll transport multicast for IPv4 for common use cases. Understand if you’d prefer to hold off until ipv6 is included but not sure when I’ll be able to get to that."
4079189f6bd3e2c26ec443f24a204ffe144f1ada,"Allow to offload / customize key signing operations when using BoringSSL. (#8943)

Motivation:

BoringSSL allows to customize the way how key signing is done an even offload it from the IO thread. We should provide a way to plugin an own implementation when BoringSSL is used.

Modifications:

- Introduce OpenSslPrivateKeyMethod that can be used by the user to implement custom signing by using ReferenceCountedOpenSslContext.setPrivateKeyMethod(...)
- Introduce static methods to OpenSslKeyManagerFactory which allows to create a KeyManagerFactory which supports to do keyless operations by let the use handle everything in OpenSslPrivateKeyMethod.
- Add testcase which verifies that everything works as expected

Result:

A user is able to customize the way how keys are signed."
188f5364dbdcf3ec4017810b3f5369c47c19a327,"Revert back to depend on netty-tcnative

Motivation:

4079189f6bd3e2c26ec443f24a204ffe144f1ada changed the dependency to netty-tcnative-borinssl-static but it should still be netty-tcnative.

Modifications:

Change back to netty-tcnative

Result:

Correct dependency is used"
9f2221ebd448487bc0bc6c17b1a6857367cddbae,"CompositeByteBuf optimizations and new addFlattenedComponents method (#8939)


Motivation:

The CompositeByteBuf discardReadBytes / discardReadComponents methods are currently quite inefficient, including when there are no read components to discard. We would like to call the latter more frequently in ByteToMessageDecoder#COMPOSITE_CUMULATOR.

In the same context it would be beneficial to perform a ""shallow copy"" of a composite buffer (for example when it has a refcount > 1) to avoid having to allocate and copy the contained bytes just to obtain an ""independent"" cumulation.

Modifications:

- Optimize discardReadBytes() and discardReadComponents() implementations (start at first comp rather than performing a binary search for the readerIndex).
- New addFlattenedComponents(boolean,ByteBuf) method which performs a shallow copy if the provided buffer is also composite and avoids adding any empty buffers, plus unit test.
- Other minor optimizations to avoid unnecessary checks.

Results:

discardReadXX methods are faster, composite buffers can be easily appended without deepening the buffer ""tree"" or retaining unused components."
ec21e575d737e09f8f4c2782db2cb2db22a3037e,"Correctly discard messages after oversized message is detected. (#9015)

Motivation:

32563bfcc129ef9332f175c277e4f6b59fd37d8c introduced a regression in which we did now not longer discard the messages after we handled an oversized message.

Modifications:

- Do not set aggregating to false after handleOversizedMessage is called
- Adjust unit tests to verify the behaviour is correct again.

Result:

Fixes https://github.com/netty/netty/issues/9007."
c3c05e85701c60c46303f1f4c3b6c65c64a56ad7,"Fix NPE in OpenSslPrivateKeyMethodTest.destroy() when BoringSSL is not used

Motivation:

4079189f6bd3e2c26ec443f24a204ffe144f1ada introduced OpenSslPrivateKeyMethodTest which will only be run when BoringSSL is used. As the assumeTrue(...) also guards the init of the static fields we need to ensure we only try to destroy these if BoringSSL is used as otherwise it will produce a NPE.

Modifications:

Check if BoringSSL is used before trying to destroy the resources.

Result:

No more NPE when BoringSSL is not used."
8f7ef1cabb5442584e56a9e79bcb9696bc572a94,"Skip execution of Channel*Handler method if annotated with @Skip and … (#8988)


Motivation:

Invoking ChannelHandlers is not free and can result in some overhead when the ChannelPipeline becomes very long. This is especially true if most handlers will just forward the call to the next handler in the pipeline. When the user extends Channel*HandlerAdapter we can easily detect if can just skip the handler and invoke the next handler in the pipeline directly. This reduce the overhead of dispatch but also reduce the call-stack in many cases.

This backports https://github.com/netty/netty/pull/8723 and https://github.com/netty/netty/pull/8987 to 4.1

Modifications:

Detect if we can skip the handler when walking the pipeline.

Result:

Reduce overhead for long pipelines.

Benchmark                                       (extraHandlers)   Mode  Cnt       Score      Error  Units
DefaultChannelPipelineBenchmark.propagateEventOld             4  thrpt   10  267313.031 ± 9131.140  ops/s
DefaultChannelPipelineBenchmark.propagateEvent                4  thrpt   10  824825.673 ± 12727.594  ops/s"
e63c596f24d2aa0a52f2a8132ad1283952b45aea,"DnsNameResolver.resolveAll(...) should not include duplicates (#9021)

Motivation:

DnsNameResolver#resolveAll(String) may return duplicate results in the event that the original hostname DNS response includes an IP address X and a CNAME that ends up resolving the same IP address X. This behavior is inconsistent with the JDK’s resolver and is unexpected to retrun a List with duplicate entries from a resolveAll(..) call.

Modifications:

- Filter out duplicates
- Add unit test

Result:

More consistent and less suprising behavior"
b26a61acd1bde5b6fca21026cd9123a38f277ad6,"Centralize internal reference counting logic (#8614)


Motivation

AbstractReferenceCounted and AbstractReferenceCountedByteBuf contain
duplicate logic for managing the volatile refcount in an optimized and
consistent manner, which increased in complexity in #8583. It's possible
to extract this into a common helper class now that all access is via an
AtomicIntegerFieldUpdater.

Modifications

- Move duplicate logic into a shared ReferenceCountUpdater class
- Incorporate some additional simplification for the most common single
increment/decrement cases (fewer checks/operations)

Result

Less code duplication, better encapsulation of the ""non-trivial""
internal volatile refcount manipulation"
51112e2b36ec5550a73d72bfc59f4523f7b8ec27,"Avoid IdleStateHandler triggering unexpected idle events when flushing large entries to slow clients (#9020)

Motivation:

IdleStateHandler may trigger unexpected idle events when flushing large entries to slow clients.

Modification:

In netty design, we check the identity hash code and total pending write bytes of the current flush entry to determine whether there is a change in output. But if a large entry has been flushing slowly (for some reason, the network speed is slow, or the client processing speed is too slow to cause the TCP sliding window to be zero), the total pending write bytes size and identity hash code would remain unchanged.

Avoid this issue by adding checks for the current entry flush progress.

Result:

Fixes #8912 ."
c0d3444f6dca1253d06d6356edac908f4791e2d7,"DnsNameResolver should log in trace level if notification of the promise fails (#9022)

Motivation:

During investigating some other bug I noticed that we log with warn level if we fail to notify the promise due the fact that it is already full-filled. This is not correct and missleading as there is nothing wrong with it in general. A promise may already been fullfilled because we did multiple queries and one of these was successful.

Modifications:

- Change log level to trace
- Add unit test which before did log with warn level but now does with trace level.

Result:

Less missleading noise in the log."
ac023da16db4d77a57d2f1d496e3281371cf8fe2,"Correctly handle overflow in Native.kevent(...) when EINTR is detected (#9024)

Motivation:
When kevent(...) returns with EINTR we do not correctly decrement the timespec
structure contents to account for the time duration. This may lead to negative
values for tv_nsec which will result in an EINVAL and raise an IOException to
the event loop selection loop.

Modifications:
Correctly calculate new timeoutTs when EINTR is detected

Result:
Fixes #9013."
ee351ef8bcd3d2ee3dcf957741a11429fd67b883,"WebSocket client handshaker to support ""force close"" after timeout (#8896)

Motivation:

RFC 6455 defines that, generally, a WebSocket client should not close a TCP
connection as far as a server is the one who's responsible for doing that.
In practice tho', it's not always possible to control the server. Server's
misbehavior may lead to connections being leaked (if the server does not
comply with the RFC).

RFC 6455 #7.1.1 says

> In abnormal cases (such as not having received a TCP Close from the server
after a reasonable amount of time) a client MAY initiate the TCP Close.

Modifications:

* WebSocket client handshaker additional param `forceCloseAfterMillis`

* Use 10 seconds as default

Result:

WebSocket client handshaker to comply with RFC. Fixes #8883."
45b0daf9e6f48f599e64311e99fa1f0c9080fe60,"netty_epoll_linuxsocket_setTcpMd5Sig should throw ChannelException when not able to init sockaddr (#9029)

Motivation:

When netty_epoll_linuxsocket_setTcpMd5Sig fails to init the sockaddr we should throw an exception and not silently return.

Modifications:

Throw exception if init of sockaddr fails.

Result:

Correctly report back error to user."
6278d09139728ad1818ff7936e05767bd4178a6a,"netty_epoll_linuxsocket_setTcpMd5Sig should throw ChannelException when not able to init sockaddr (#9029)

Motivation:

When netty_epoll_linuxsocket_setTcpMd5Sig fails to init the sockaddr we should throw an exception and not silently return.

Modifications:

Throw exception if init of sockaddr fails.

Result:

Correctly report back error to user."
6ed203b7baf4c5797a6692975059b05d26821402,"NioServerSocketChannel.isActive() must return false after close() completes. (#9030)

Motivation:

When a Channel was closed its isActive() method must return false.

Modifications:

First check for isOpen() before isBound() as isBound() will continue to return true even after the underyling fd was closed.

Result:

Fixes https://github.com/netty/netty/issues/9026."
778ff2057eb5e585097155ab9b23a3813e57d5cd,"Add IPv6 multicast test to testsuite (#9037)

Motivation:

We currently only cover ipv4 multicast in the testsuite but we should also have tests for ipv6.

Modifications:

- Add test for ipv6
- Ensure we only try to run multicast test for ipv4 / ipv6 if the loopback interface supports it.

Result:

Better test coverage"
fcfa9eb9a81a6086059fe04288f3694af793c680,"Throw IOException (not ChannelException) if netty_epoll_linuxsocket_setTcpMd5Sig fails (#9039)

Motivation:

At the moment we throw a ChannelException if netty_epoll_linuxsocket_setTcpMd5Sig fails. This is inconsistent with other methods which throw a IOException.

Modifications:

Throw IOException

Result:

More correct and consistent exception usage in epoll transport"
9e491dda141b86c86ef16dd654325d944e2c4a17,"Ignore ipv6 multicast test that was added in 778ff2057eb5e585097155ab9b23a3813e57d5cd for now

Motivation:

The multicast ipv6 test fails on some systems. As I just added it let me ignore it for now while investigating.

Modifications:

Add @ignore

Result:

Stable testsuite while investigate"
0c79fc8b63ab3b4503c684b127c64800acdbddd2,"Update to netty-tcnative 2.0.25.Final to fix possible segfault when openssl < 1.0.2 and gcc is used. (#9038)

Motivation:

We should update to netty-tcnative 2.0.25.Final as it fixes a possible segfault on systems that use openssl < 1.0.2 and for which we compiled with gcc.

See https://github.com/netty/netty-tcnative/pull/457

Modifications:

Update netty-tcnative

Result:

No more segfault possible."
bedc8a6ea55af69eea382bb802b0b199bf1c9fad,"Documentation update to MessageSizeEstimator (#9034)

Motivation:

Did not understand the context of ""ca"".

Modification:

Clarified ""CA"" to ""approximately"".

Result:

Fixes #9031"
86dd3886374323ac1ac8011b4a4716706bb7c47b,"Revert ""Added UDP multicast (with caveats: no ipv6, getInterface, getNetworkI… (#9006)""

This reverts commit a3e8c867419b998c5da2174844b5f1e09ff76bed as there are some issues that need to be fixed first."
48edf40861f72ba1c1712d45e4b4d410176d81f7,"Make validation tools more happy by not have TrustManager impl just accept (#9041)

Motivation:

Seems like some analyzer / validation tools scan code to detect if it may produce some security risk because of just blindly accept certificates. Such a tool did tag our code because we have such an implementation (which then is actually never be used). We should just change the impl to not do this as it does not matter for us and it makes such tools happier.

Modifications:

Throw CertificateException

Result:

Fixes https://github.com/netty/netty/issues/9032"
34aa2c841c70f85e163bb6515995033fd242388e,"Don't use sun.misc.Unsafe when IKVM.NET is used (#9042)

Motivation:

IKVM.NET seems to ship a bug sun.misc.Unsafe class, for this reason we should better disable our sun.misc.Unsafe usage when we detect IKVM.NET is used.

Modifications:

Check if IKVM.NET is used and if so do not use sun.misc.Unsafe by default.

Result:

Fixes https://github.com/netty/netty/issues/9035 and https://github.com/netty/netty/issues/8916."
26cd59c328ad27a17f9c2a31b41cd4a5bd56bc91,"DnsNameResolver.resolveAll(...) should also contain non preferred addresses (#9044)

Motivation:

At the moment we basically drop all non prefered addresses when calling DnsNameResolver.resolveAll(...). This is just incorrect and was introduced by 4cd39cc4b36f14424a0e25219a49b37d78f93bd2. More correct is to still retain these but sort the returned List to have the prefered addresses on the beginning of the List. This also ensures resolve(...) will return the correct return type.

Modifications:

- Introduce PreferredAddressTypeComperator which we use to sort the List so it will contain the preferred address type first.
- Add unit test to verify behaviour

Result:

Include not only preferred addresses in the List that is returned by resolveAll(...)"
dde3f561bcffc5b0ef845009ca751abfb14d9ead,"Use ResolvedAddressTypes.IPV4_ONLY in DnsNameResolver by default if n… (#9048)

Motivation:

To closely mimic what the JDK does we should not try to resolve AAAA records if the system itself does not support IPv6 at all as it is impossible to connect to this addresses later on. In this case we need to use ResolvedAddressTypes.IPV4_ONLY.

Modifications:

Add static method to detect if IPv6 is supported and if not use ResolvedAddressTypes.IPV4_ONLY.

Result:

More consistent behaviour between JDK and our resolver implementation."
09faa72296a4a20bf554da729dccd5bd31a5e347,"Use ArrayDeque instead of LinkedList (#9046)

Motivation:
Prefer ArrayDeque to LinkedList because latter will produce more GC.

Modification:
- Replace LinkedList with ArrayDeque

Result:
Less GC"
fb50847e3941a8566b4386ff323299eb558ab918,"The benchmark is not taking into account nanoTime granularity (#9033)

Motivation:

Results are just wrong for small delays.

Modifications:

Switching to AvarageTime avoid to rely on OS nanoTime granularity.

Result:

Uncontended low delay results are not reliable"
741bcd485dac919927069077a5304f43f470c393,"Make Multicast tests more robust (#9053)

Motivation:

86dd3886374323ac1ac8011b4a4716706bb7c47b reverted the usage of IPv6 Multicast test. This commit makes the whole multicast testing a lot more robust by selecting the correct interface in any case and also reverts the `@Ignore`

Modifications:

- More robust multicast testing by selecting the right NetworkInterface
- Remove the `@Ignore` again for the IPv6 test

Result:

More robust multicast testing"
4b36a5b08b0ec09eddf61cd330aec2a86048a122,"Correctly calculate ttl for AuthoritativeNameServer when update existing records (#9051)

Motivation:

We did not correctly calculate the new ttl as we did forget to add `this.`

Modifications:

Add .this and so correctly calculate the TTL

Result:

Use correct TTL for authoritative nameservers when updating these."
075cf8c02e005d61f424137d1b786b2ac669998e,"DnsNameResolver.resolve(...) should notify future as soon as one preferred record was resolved (#9050)

Motivation:

At the moment resolve(...) does just delegate to resolveAll(...) and so will only notify the future once all records were resolved. This is wasteful as we are only interested in the first record anyway. We should notify the promise as soon as one record that matches the preferred record type is resolved.

Modifications:

- Introduce DnsResolveContext.isCompleteEarly(...) to be able to detect once we should early notify the promise.
- Make use of this early detecting if resolve(...) is called
- Remove FutureListener which could lead to IllegalReferenceCountException due double releases
- add unit test

Result:

Be able to notify about resolved host more quickly."
9ed41db1d731720c3c1019d3db379beaf7603409,"Have (Epoll|KQueue)RecvByteAllocatorHandle extend DelegatingHandle (#9060)

Motivation

These implementations delegate most of their methods to an existing Handle and previously extended RecvByteBufAllocator.DelegatingHandle. This was reverted in #6322 with the introduction of ExtendedHandle but it's not clear to me why it needed to be - the code looks a lot cleaner.

Modifications

Have (Epoll|KQueue)RecvByteAllocatorHandle extend DelegatingHandle again, while still implementing ExtendedHandle.

Result

Less code."
1d9090aab231ab737bd6459e0369b30d752296b2,"DefaultHeaders#valueIterator to support removal (#9063)


Motivation:
While iterating values it is often desirable to be able to remove individual
entries. The existing mechanism to do this involves removal of all entries and
conditional re-insertion which is heavy weight in order to remove a single
value.

Modifications:
- DefaultHeaders$ValueIterator supports removal

Result:
It is possible to remove entries while iterating the values in DefaultHeaders."
3ebd29f9c7e99db5bc3319707379ded6c0f6fa7b,"Only try to use OpenSslX509TrustManagerWrapper when using Java 7+ (#9065)

Motivation:

We should only try to use OpenSslX509TrustManagerWrapper when using Java 7+ as otherwise it fail to init in it's static block as X509ExtendedTrustManager was only introduced in Java7

Modifications:

Only call OpenSslX509TrustManagerWrapper if we use Java7+

Result:

Fixes https://github.com/netty/netty/issues/9064."
dfe657e2d4807f144846273eee451cef4ac36b3a,[maven-release-plugin] prepare release netty-4.1.35.Final
baab215f666f753dbada66ce441004ad222832b1,[maven-release-plugin] prepare for next development iteration
e01c4bce08b9f3c389aed5f01c1ac985c83b51ba,"Fix regression in CompositeByteBuf.discard*ReadBytes() (#9068)

Motivation:

1f93bd3 introduced a regression that could lead to not have the lastAccessed field correctly null'ed out when the endOffset of the internal Component == CompositeByteBuf.readerIndex()

Modifications:

- Correctly null out the lastAccessed field in any case
- Add unit tests

Result:

Fixes regression in CompositeByteBuf.discard*ReadBytes()"
6248b2492bcc27ac36bd019116971e9d8414be04,"Remove static wildcard imports in EpollDomainSocketChannelConfig (#9066)

Motivation

These aren't needed, only one field from each class is used. It also showed as an ambiguous identifier compilation error in my IDE even though javac is obviously fine with it.

Modifications

Static-import explicit ChannelOption fields in EpollDomainSocketChannelConfig instead of using .* wildcard.

Result

Cleaner / more consistent code."
3579165d72ddd2641093a658ae5313522a298245,"SmtpRequestEncoderTest ByteBuf leak (#9075)

Motivation:
SmtpRequestEncoderTest#testThrowsIfContentExpected has a ByteBuf leak.

Modifications:
- SmtpRequestEncoderTest#testThrowsIfContentExpected should release buffers in a finally block

Result:
No more leaks in SmtpRequestEncoderTest#testThrowsIfContentExpected."
b3dba317d797e21cc253bb6ad6776307297f612e,"HTTP/2 to support asynchronous SETTINGS ACK (#9069)

Motivation:
The HTTP/2 codec will synchronously respond to a SETTINGS frame with a SETTINGS
ACK before the application sees the SETTINGS frame. The application may need to
adjust its state depending upon what is in the SETTINGS frame before applying
the remote settings and responding with an ACK (e.g. to adjust for max
concurrent streams). In order to accomplish this the HTTP/2 codec should allow
for the application to opt-in to sending the SETTINGS ACK.

Modifications:
- DefaultHttp2ConnectionDecoder should support a mode where SETTINGS frames can
  be queued instead of immediately applying and ACKing.
- DefaultHttp2ConnectionEncoder should attempt to poll from the queue (if it
  exists) to apply the earliest received but not yet ACKed SETTINGS frame.
- AbstractHttp2ConnectionHandlerBuilder (and sub classes) should support a new
  option to enable the application to opt-in to managing SETTINGS ACK.

Result:
HTTP/2 allows for asynchronous SETTINGS ACK managed by the application."
ec62af01c7af372d853bd1a2d2d981a897263b6d,"DefaultHttp2ConnectionEncoder async SETTINGS ACK SimpleChannelPromiseAggregator promise usage

Motivaiton:
DefaultHttp2ConnectionEncoder uses SimpleChannelPromiseAggregator to combine two
operations into a single future status. However it directly uses the
SimpleChannelPromiseAggregator object instead of using the newPromise() method
in one case. This may result in premature completion of the aggregated future.

Modifications:
- DefaultHttp2ConnectionEncoder to use
  SimpleChannelPromiseAggregator#newPromise() instead of directly using the
SimpleChannelPromiseAggregator instance when writing the settings ACK frame

Result:
More correct status for the SETTING ACK frame writing when auto settings ACK is
disabled."
2c12f09ec982cb55883c17af8b7db9dc12f25152,"Http2FrameCodec to simulate GOAWAY received when stream IDs are exhausted (#9095)

Motivation:
Http2FrameCodec currently fails the write promise associated with creating a
stream with a Http2NoMoreStreamIdsException. However this means the user code
will have to listen to all write futures in order to catch this scenario which
is the same as receiving a GOAWAY frame. We can also simulate receiving a GOAWAY
frame from our remote peer and that allows users to consolidate graceful close
logic in the GOAWAY processing.

Modifications:
- Http2FrameCodec should simulate a DefaultHttp2GoAwayFrame when trying to
create a stream but the stream IDs have been exhausted.

Result:
Applications can rely upon GOAWAY for graceful close processing instead of also
processing write futures."
2d33d1493e2e33d886df2ffd526a45f1887eef4f,"DefaultHeaders#valueIterator doesn't remove from the in bucket list (#9090)

Motivation:
DefaultHeaders entries maintains two linked lists. 1 for overall insertion order
and 1 for ""in bucket"" order. DefaultHeaders#valueIterator removal (introduced in 1d9090aab231ab737bd6459e0369b30d752296b2) only reliably
removes the entry from the overall insertion order, but may not remove from the
bucket unless the element is the first entry.

Modifications:
- DefaultHeaders$ValueIterator should track 2 elements behind the next entry so
that the single linked ""in bucket"" list can be patched up when removing the
previous entry.

Result:
More correct DefaultHeaders#valueIterator removal."
00a9a25f29cf07728794089affdd735af29209de,"Ensure channel handler close() is not skipped in !hasDisconnect case (#9098)

Motivation

The optimization in #8988 didn't correctly handle the specific case
where the channel hasDisconnect == false, and a
ChannelOutboundHandlerAdapter subclass overrides only the close(ctx,
promise) method without also overriding the disconnect(ctx, promise)
method.

Modifications

Adjust AbstractChannelHandler.disconnect(...) method to divert to
close(...) in !hasDisconnect case before computing target context for
the event.

Result

Fixes #9092"
b4e3c12b8e8e984ba65330dd6dc34a4b3d07a25a,"Http2ConnectionHandler to allow decoupling close(..) from GOAWAY graceful close (#9094)

Motivation:
Http2ConnectionHandler#close(..) always runs the GOAWAY and graceful close
logic. This coupling means that a user would have to override
Http2ConnectionHandler#close(..) to modify the behavior, and the
Http2FrameCodec and Http2MultiplexCodec are not extendable so you cannot
override at this layer. Ideally we can totally decouple the close(..) of the
transport and the GOAWAY graceful closure process completely, but to preserve
backwards compatibility we can add an opt-out option to decouple where the
application is responsible for sending a GOAWAY with error code equal to
NO_ERROR as described in https://tools.ietf.org/html/rfc7540#section-6.8 in
order to initiate graceful close.

Modifications:
- Http2ConnectionHandler supports an additional boolean constructor argument to
opt out of close(..) going through the graceful close path.
- Http2FrameCodecBuilder and Http2MultiplexCodec expose
 gracefulShutdownTimeoutMillis but do not hook them up properly. Since these
are already exposed we should hook them up and make sure the timeout is applied
properly.
- Http2ConnectionHandler's goAway(..) method from Http2LifecycleManager should
initiate the graceful closure process after writing a GOAWAY frame if the error
code is NO_ERROR. This means that writing a Http2GoAwayFrame from
Http2FrameCodec will initiate graceful close.

Result:
Http2ConnectionHandler#close(..) can now be decoupled from the graceful close
process, and immediately close the underlying transport if desired."
3367a53d3bb95271e0634a3f8af3cc7cd5c9c693,"Throw SignatureException if OpenSslPrivateKeyMethod.* return null to prevent segfault (#9100)

Motivation:

While OpenSslPrivateKeyMethod.* should never return null we should still guard against it to prevent any possible segfault.

Modifications:

- Throw SignatureException if null is returned
- Add unit test

Result:

No segfault when user returns null."
2ec6428827164bec4e07f5175da345c20af25fe6,"Update to latest java releases (#9101)

Motivation:

There were new releases of various Java versions.

Modifications:

Adjust used java versions of the latest releases and so use these on our CI

Result:

Use latest java versions on our CI."
b5a27745028c9e23e1cdab30bc8c2c029bb03378,"Fix flaky GlobalEventExecutorTest.* (#9074)

Motivation:

In GlobalEventExecutorTest we used Thread.sleep(...) which can produce flaky results (as seen on the CI). We should use another alternative during tests.

Modifications:

Replace Thread.sleep(...) with join()

Result:

No more flaky GlobalEventExecutor tests."
fb6f8f513acc792bb2b28b43a061fd74aa32e25c,"Add docker-compose file to compile / test with graalvm (#9072)

Motivation:

We should try to compile / test with graalvm as well.

Modifications:

Add docker-compose file for graalvm

Result:

Be able to also compile / test with graalvm"
f1495e19459eb4e961b1c078e7692680f88a0803,"Add SVM metadata and minimal substitutions to build graalvm native image applications. (#8963)

Motivation:

GraalVM native images are a new way to deliver java applications. Netty is one of the most popular libraries however there are a few limitations that make it impossible to use with native images out of the box. Adding a few metadata (in specific modules will allow the compilation to success and produce working binaries)

Modification:

Added properties files in `META-INF` and substitutions classes (under `internal.svm`) will solve the compilation issues. The substitutions classes are not visible and do not have a public constructor so they are not visible to end users.

Result:

Fixes #8959 

This fix is very conservative as it applies the minimum config required to build:

* pure netty servers
* vert.x applications
* grpc applications

The build is having trouble due to checkstyle which does not seem to be able to find the copyright notice on property files."
97617b254b9f57340ce23f043f4830bfb4210c61,"Adjust pom.xml to be able to build with graalvm (#9107)

Motivation:

When trying to use graalvm and build netty we currently fail because our build configuration is not compatible with it.

Modification:

- Skip plugins that are not supported when graal is used
- Correctly configure surefire plugin for graal so it not produces a NPE

Result:

We can build and test with graalvm."
1837209a8739d3db4a4141df3de4016e41448808,"Http2MultiplexCodec.DefaultHttp2StreamChannel should handle ChannelConfig.isAutoClose() in a consistent way as AbstractChannel (#9108)

Motivation:

Http2MultiplexCodec.DefaultHttp2StreamChannel currently only act on ClosedChannelException exceptions when checking for isAutoClose(). We should widen the scope here to IOException to be more consistent with AbstractChannel.

Modifications:

Replace instanceof ClosedChannelException with instanceof IOException

Result:

More consistent handling of isAutoClose()"
b9c4e17291a5e507877b9c8490e62d65426bce35,"Invoke channelAcquired callback on first time channel acquire (#9093)

Motivation:

SimpleChannelPool provides ability to provide custom callbacks/handlers
on major events such as ""channel acquired"", ""channel created"" and
""channel released"". In the current implementation, when a request to
acquire a channel is made for the first time, the internal channel pool
creates the channel lazily. This triggers the ""channel created"" callback
but does not invoke the ""channel acquired"" callback. This is contrary to
caller expectations who assumes that ""channel acquired"" will be invoked
at the end of every successful acquire call. It also leads to an
inconsistent API experience where the acquired callback is sometimes
invoked and sometimes it isn't depending on wheather the internal
mechanism is creating a new channel or re-using an existing one.

Modifications:

Invoke acquired callback consistenly even when creating a new channel
and modify the tests to support this behaviour

Result:

Consistent experience for the caller of acquire API. Every time they
call the API, the acquired callback will be invoked."
c8ff76ba914f9ebf026581d8769903c7dda58cc9,"[openssl] fix refcount bug in OpenSslPrivateKeyMaterial ctor

Motivation:

Subclasses of `OpenSslKeyMaterial` implement `ReferenceCounted`. This means that a new object should have an initial refcount of 1. An `OpenSslPrivateKey.OpenSslPrivateKeyMaterial` object shares its refcount with the enclosing `OpenSslPrivateKey` object. This means the enclosing object's refcount must be incremented by 1 when an instance of `OpenSslPrivateKey.OpenSslPrivateKeyMaterial` is created. Otherwise, when the key material object is `release()`-ed, the refcount on the enclosing object will drop to 0 while it is still in use.

Modification:

- Increment the refcount in the constructor of `OpenSslPrivateKey.OpenSslPrivateKeyMaterial`
- Ensure we also always release the native certificates as well.

Result:

Refcount is now correct."
0c114dabeda9dd16cdb652cefd4dbc6f4643e58c,"Introduce DynamicAddressConnectHandler which can be used to dynamically change remoteAddress / localAddress when a connect is issued (#8982)

Motivation:

Bootstrap allows you to set a localAddress for outbound TCP connections, either via the Bootstrap.localAddress(localAddress) or Bootstrap.connect(remoteAddress, localAddress) methods. This works well if you want to bind to just one IP address on an interface. Sometimes you want to bind to a specific address based on the resolved remote address which should be possible.

Modifications:

Add DynamicAddressConnectHandler and tests

Result:

Fixes https://github.com/netty/netty/issues/8940."
49a451101c631d21e5125f2cf4e506515b8b0e3e,[maven-release-plugin] prepare release netty-4.1.36.Final
ba06eafa1c1824bd154f1a380019e7ea2edf3c4c,[maven-release-plugin] prepare for next development iteration
66f6b959ffc8eb6903645fbdbfda0faeff9216a9,"Always include classes from all native transports no matter on which platfrom netty-all is build (#9111)

Motivation:

While building netty-all we should always include all classes for native transports no matter if the native part can be build or not. This was it is easier to test locally with a installed snapshot of netty-all when the code that uses it does enable a specific native transport depending on if the native bits can be loaded or not.

Modifications:

Always include classes of native transports no matter on which platfrom we build. When a release is done we ensure we include the native bits by using the uber-staging profile.

Result:

Easier testing with netty-all snapshots."
909a3d942e6830d230021fe35afbc7a8e7566201,"KQueueEventLoop won't unregister active channels reusing a file descriptor (#9114)

Motivation:

The current KQueueEventLoop implementation does not process concurrent domain socket channel registration/unregistration in the order they actual
happen since unregistration are delated by an event loop task scheduling. When a domain socket is closed, it's file descriptor might be reused
quickly and therefore trigger a new channel registration using the same descriptor.

Consequently the KQueueEventLoop#add(AbstractKQueueChannel) method will overwrite the current inactive channels having the same descriptor
and the delayed KQueueEventLoop#remove(AbstractKQueueChannel) will remove the active channel that replaced the inactive one.

As active channels are registered, events for this file descriptor won't be processed anymore and the channels will never be closed.

Modifications:

Change the logic of KQueueEventLoop#remove(AbstractKQueueChannel) channels so it will check channels equality prior removal.

Result:

KQueueEventLoop won't remove anymore active channels reusing a file descriptor."
71c184076c9be2c7e92704e55dd2f638f452f553,"Revert ""KQueueEventLoop won't unregister active channels reusing a file descriptor (#9114)""

This reverts commit 909a3d942e6830d230021fe35afbc7a8e7566201."
526f2da912cfcd933c7fad3cb2eb033f4b424b5e,"Add equality check to contentEquals instance methods. (#9130)

Motivation:

An instance is always equal to itself. It makes sense to skip processing for this case, which isn't uncommon since `AsciiString` is often memoized within an application when used as HTTP header names.

Modification:

`contentEquals` methods first check for instance equality before doing processing.

Result:

`contentEquals` will be faster when comparing an instance with itself.

I couldn't find any unit tests for these methods, only the static version. Let me know if I should add something to `AsciiStringCharacterTest`.

Came up here:
https://github.com/line/armeria/pull/1731#discussion_r280396280"
a74fead21645066553d41217636a94efacff0a7f,"Fixed HttpHelloWorldServerHandler for handling HTTP 1.0/1.1 (#9124)

Motivation:

HttpHelloWorldServer example works incorrect for HTTP 1.1, the value of header connection is always set to close for each request.

Modification:

Correctly set header

Result:

Fixed HttpHelloWorldServerHandler for handling HTTP 1.0/1.1"
df20a125aae65d52a1f67382ef80b684840bfc08,"Allow to have DnsNameResolver.resolveAll(...) notify as soon as the preferred records were resolved (#9136)

Motivation:

075cf8c02e005d61f424137d1b786b2ac669998e introduced a change to allow resolve(...) to notify as soon as the preferred record was resolved. This works great but we should also allow the user to configure that we want to do the same for resolveAll(...), which means we should be able to notify as soon as all records for a preferred record were resolved.

Modifications:

- Add a new DnsNameResolverBuilder method to allow configure this (use false as default to not change default behaviour)
- Add unit test

Result:

Be able to speed up resolving."
5a27f2f78b4f9630ca71ba46e75332009fb5f785,"Allow to specify KeyStore type in SslContext  (#9003)

Motivation:

As brought up in https://github.com/netty/netty/issues/8998, JKS can be substantially faster than pkcs12, JDK's new default. Without an option to set the KeyStore type you must change the configuration of the entire JVM which is impractical.

Modification:

- Allow to specify KeyStore type
- Add test case

Result:

Fixes https://github.com/netty/netty/issues/8998."
6ee8b651e6f13c27fb8fdb21e53f6e9fd728f47c,"DnsNameResolver.resolveAll(DnsQuestion) should not try to filter duplicates (#9141)

Motivation:

https://github.com/netty/netty/pull/9021 did apply some changes to filter out duplicates InetAddress when calling resolveAll(...) to mimic JDK behaviour. Unfortunally this also introduced a regression as we should not filter duplicates when the user explicit calls resolveAll(DnsQuestion).

Modifications:

- Only filter duplicates if resolveAll(String) is used
- Add unit test

Result:

Fixes regressions introduces by https://github.com/netty/netty/pull/9021"
60de092e363df9a2f514e77cd409260f0dfb5b31,"Fix incorrect behavior of ReadOnlyByteBufferBuf.getBytes(int,ByteBuffer) (#9125)

* Fix incorrect behavior of ReadOnlyByteBufferBuf.getBytes(int,ByteBuffer)

Motivation

It currently will succeed when the destination is larger than the source
range, but the ByteBuf javadoc states this should be a failure, as is
the case with all the other implementations.

Modifications

- Fix logic to fail the bounds check in this case
- Remove explicit null check which isn't done in any equivalent method
- Add unit test

Result

More correct/consistent behaviour"
cb85e03d728e8e24be6b9b05070643779948785a,"AsciiString.lastIndexOf(...) is implemented incorrectly (#9103)

Motivation

@xiaoheng1 reported incorrect behaviour of AsciiString.lastIndexOf in
#9099. Upon closer inspection it appears that it was never implemented
correctly and searches between the provided index and the end of the
string similar to indexOf(...), rather than between the provided index
and the beginning of the string as the javadoc states (and in line with
java.lang.String).

Modifications

Fix AsciiString.lastIndexOf implementation and corresponding unit tests
to behave the same as the equivalent String methods.

Result

Fixes #9099"
3221bf6854dcf16329dffe1fa28c6be5e30269b5,"Remove the Handler only after it has initialized the channel (#9132)

Motivation:

Previously, any 'relative' pipeline operations, such as
ctx.pipeline().replace(), .addBefore(), addAfter(), etc
would fail as the handler was not present in the pipeline.

Modification:

Used the pattern from ChannelInitializer when invoking configurePipeline().

Result:

Fixes #9131"
cf2f1f54b623a62e5632eb073cb20b766bc6fdc2,"Replace all logic that checks Null with the ObjectUtil utility class (#9145)

Motivation:

Clean the code , replace all logic that checks Null with the ObjectUtil utility class in bootstrap package

Modification:
Replace all logic that checks null with the ObjectUtil utility class

Result:

Less verbose code."
ccf56706f81f5ffb35772e73b0d4004d7d82f328,"Add missing assume checks to skip tests if KeyManagerFactory can not be used (#9148)

Motivation:

Depending on what OpenSSL library version we use / system property that is set we need to skip tests that use KeyManagerFactory.

Modifications:

Add missing assume checks for tests that use KeyManagerFactory.

Result:

All tests pass even if KeyManagerFactory is not supported"
1672b6d12cb8f80dd1535ba5fcc2e8c85945cd07,"Add support for TCP fallback when we receive a truncated DnsResponse (#9139)

Motivation:

Sometimes DNS responses can be very large which mean they will not fit in a UDP packet. When this is happening the DNS server will set the TC flag (truncated flag) to tell the resolver that the response was truncated. When a truncated response was received we should allow to retry via TCP and use the received response (if possible) as a replacement for the truncated one.

See https://tools.ietf.org/html/rfc7766.

Modifications:

- Add support for TCP fallback by allow to specify a socketChannelFactory / socketChannelType on the DnsNameResolverBuilder. If this is set to something different then null we will try to fallback to TCP.
- Add decoder / encoder for TCP
- Add unit tests

Result:

Support for TCP fallback as defined by https://tools.ietf.org/html/rfc7766 when using DnsNameResolver."
c565805f1b268bba81fe45369babee96856bacf1,"Do not manually reset HttpObjectDecoder in HttpObjectAggregator.handleOversizedMessage(...) (#9017) (#9156)

Motivation:

We did manually call HttpObjectDecoder.reset() in HttpObjectAggregator.handleOversizedMessage(...) which is incorrect and will prevent correct parsing of the next message.

Modifications:

- Remove call to HttpObjectDecoder.reset()
- Add unit test

Result:

Verify that we can correctly parse the next request after we rejected a request."
f17bfd0f64189d91302fbdd15103788bf9eabaa2,"Only use static Exception instances when we can ensure addSuppressed … (#9152)

Motivation:

OOME is occurred by increasing suppressedExceptions because other libraries call Throwable#addSuppressed. As we have no control over what other libraries do we need to ensure this can not lead to OOME.

Modifications:

Only use static instances of the Exceptions if we can either dissable addSuppressed or we run on java6.

Result:

Not possible to OOME because of addSuppressed. Fixes https://github.com/netty/netty/issues/9151."
9c6365ee95d5177c9048ffa54ceecdd72ab84ccf,"Only try to use reflection to access default nameservers when using Java8 and lower (#9157)

Motivation:

We should only try to use  reflection to access default nameservers when using Java8 and lower as otherwise we will produce an Illegal reflective access warning like:

WARNING: Illegal reflective access by io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider

Modifications:

Add Java version check before try to use reflective access.

Result:

No more warning when Java9+ is used."
18f27db1940174adac245304552190cd483d9c7e,"Format code to align unaligned code. (#9062)

Motivation:
Format code to align unaligned code.

Modification:
Reformat the code

Result:

Cleaner code"
afdc77f9d3f6ecef9d0f73048a232de6d74d8d07,"Update to latest JDK13 EA release (#9166)

Motivation:

We should use the latest EA release when trying to compile with JDK13.

Modifications:

Update to latest release

Result:

Test with latest release on the CI"
2dc686ded17d8123118921ac6d36aea30cdce267,"Prefer direct io buffers if direct buffers pooled (#9167)

Motivation

Direct buffers are normally preferred when interfacing with raw
sockets. Currently netty will only return direct io buffers (for reading
from a channel) when a platform has unsafe. However, this is
inconsistent with the write-side (filterOutboundMessage) where a direct
byte buffer will be returned if pooling is enabled. This means that
environments without unsafe (and no manual netty configurations) end up
with many pooled heap byte buffers for reading, many pooled direct byte
buffers for writing, and jdk pooled byte buffers (for reading).

Modifications

This commit modifies the AbstractByteBufAllocator to return a direct
byte buffer for io handling when the platform has unsafe or direct byte
buffers are pooled.

Result:

Use direct buffers when direct buffers are pooled for IO."
af98b621500cb8f4ee9c3f35fce917f3e803c59c,"Log deprecation info message when using 'io.netty.handler.ssl.openssl.useKeyManagerFactory' and ignore it when using BoringSSL (#9162)

Motivation:

When we added support for KeyManagerFactory we also allowed to disable it to make the change less risky. This was done years ago and so there is really no need to use the property anyway.
Unfortunally due a change in netty-tcnative it is even not supported anymore when using BoringSSL.

Modifications:

- Log an info message to tell users that 'io.netty.handler.ssl.openssl.useKeyManagerFactory' is deprecated when it is used
- Ignore 'io.netty.handler.ssl.openssl.useKeyManagerFactory' when BoringSSL is used.

Result:

Fixes https://github.com/netty/netty/issues/9147."
e348bd9217eb626aa20dfd15d7c8c860e1fd7596,"KQueueEventLoop | EpollEventLoop may incorrectly update registration when FD is reused.

Motivation:

The current KQueueEventLoop implementation does not process concurrent domain socket channel registration/unregistration in the order they actual
happen since unregistration are delated by an event loop task scheduling. When a domain socket is closed, it's file descriptor might be reused
quickly and therefore trigger a new channel registration using the same descriptor.

Consequently the KQueueEventLoop#add(AbstractKQueueChannel) method will overwrite the current inactive channels having the same descriptor
and the delayed KQueueEventLoop#remove(AbstractKQueueChannel) will remove the active channel that replaced the inactive one.

As active channels are registered, events for this file descriptor won't be processed anymore and the channels will never be closed.

The same problem can also happen in EpollEventLoop. Beside this we also may never remove the AbstractEpollChannel from the internal map
when it is unregistered which will prevent it from be GC'ed

Modifications:

- Change logic of native KQueue and Epoll implementations to ensure we correctly handle the case of FD reuse
- Only try to update kevent / epoll if the Channel is still open (as otherwise it will be handled by kqueue / epoll itself)
- Correctly remove AbstractEpollChannel from internal map in all cases
- Make implementation of closeAll() consistent for Epoll and KQueueEventLoop

Result:

KQueue and Epoll native transports correctly handle FD reuse

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
52c53891900ad3d06d8556d5ad5876103fd9b3b2,"codec-memcache: copy metadata in binary full request response (#9160)

Motivations
-----------
Calling `copy()`, `duplicate()` or `replace()` on `FullBinaryMemcacheResponse`
or `FullBinaryMemcacheRequest` instances should copy status, opCode, etc.
that are defined in `AbstractBinaryMemcacheMessage`.

Modifications
-------------
 - Modified duplicate, copy and replace methods in
DefaultFullBinaryMemcacheRequest and DefaultFullBinaryMemcacheResponse
to always copy metadata from parent classes.
 - Unit tests verifying duplicate, copy and replace methods for
DefaultFullBinaryMemcacheRequest and DefaultFullBinaryMemcacheResponse
copy buffers and metadata as expected.

Result
------
Calling copy(), duplicate() or replace() methods on
DefaultFullBinaryMemcacheRequest or DefaultFullBinaryMemcacheResponse
produces valid copies with all expected metadata.

Fixes #9159"
507e0a05b5685f0769174cec12bc92bcfc1f6dc6,"Fix possible unsafe sharing of internal NIO buffer in CompositeByteBuf (#9169)

Motivation

A small thread-safety bug was introduced during the internal
optimizations of ComponentByteBuf made a while back in #8437. When there
is a single component which was added as a slice,
internalNioBuffer(int,int) will currently return the unwrapped slice's
un-duplicated internal NIO buffer. This is not safe since it could be
modified concurrently with other usage of that parent buffer.

Modifications

Delegate internalNioBuffer to nioBuffer in this case, which returns a
duplicate. This matches what's done in derived buffers in general
(for the same reason). Add unit test.

Result

Fixed possible thread-safety bug"
dea4e33c523291e55005adf1adc1650a5c3f125f,"Don't double record stacktrace in Annotated*Exception (#9117)

Motivation:
When initializing the AnnotatedSocketException in AbstractChannel, both
the cause and the stack trace are set, leaving a trailing ""Caused By""
that is compressed when printing the trace.

Modification:
Don't include the stack trace in the exception, but leave it in the cause.

Result:
Clearer stack trace"
2ca526fac68ec8120cee73fcefb816152798fc3f,"Ensure ""full"" ownership of msgs passed to EmbeddedChannel.writeInbound() (#9058)

Motivation

Pipeline handlers are free to ""take control"" of input buffers if they have singular refcount - in particular to mutate their raw data if non-readonly via discarding of read bytes, etc.

However there are various places (primarily unit tests) where a wrapped byte-array buffer is passed in and the wrapped array is assumed not to change (used after the wrapped buffer is passed to EmbeddedChannel.writeInbound()). This invalid assumption could result in unexpected errors, such as those exposed by #8931.

Modifications

Anywhere that the data passed to writeInbound() might be used again, ensure that either:
- A copy is used rather than wrapping a shared byte array, or
- The buffer is otherwise protected from modification by making it read-only

For the tests, copying is preferred since it still allows the ""mutating"" optimizations to be exercised.

Results

Avoid possible errors when pipeline assumes it has full control of input buffer."
5ffac03f1efd84074e349228b6c345155caffe65,"Support handshake timeout in websocket handlers (#8856)

Motivation:

Support handshake timeout option in websocket handlers. It makes sense to limit the time we need to move from `HANDSHAKE_ISSUED` to `HANDSHAKE_COMPLETE` states when upgrading to WebSockets

Modification:

- Add `handshakeTimeoutMillis` option in `WebSocketClientProtocolHandshakeHandler`  and `WebSocketServerProtocolHandshakeHandler`.
- Schedule a timeout task, the task will trigger user event `HANDSHAKE_TIMEOUT` if the handshake timed out.

Result:

Fixes issue https://github.com/netty/netty/issues/8841"
224d5fafaf830c93e3b382aca463da6f26bd3c0c,"Correctly detect that KeyManagerFactory is not supported when using OpenSSL 1.1.0+ (#9170)

Motivation:

How we tried to detect if KeyManagerFactory is supported was not good enough for OpenSSL 1.1.0+ as it partly provided the API but not all of what is required.

This then lead to failures like:

[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.102 s <<< FAILURE! - in io.netty.channel.epoll.EpollDomainSocketStartTlsTest
[ERROR] initializationError(io.netty.channel.epoll.EpollDomainSocketStartTlsTest)  Time elapsed: 0.016 s  <<< ERROR!
javax.net.ssl.SSLException: failed to set certificate and key
	at io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.newSessionContext(ReferenceCountedOpenSslServerContext.java:130)
	at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:353)
	at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:334)
	at io.netty.handler.ssl.SslContext.newServerContextInternal(SslContext.java:468)
	at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:457)
	at io.netty.testsuite.transport.socket.SocketStartTlsTest.data(SocketStartTlsTest.java:93)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.runners.Parameterized.allParameters(Parameterized.java:280)
	at org.junit.runners.Parameterized.<init>(Parameterized.java:248)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)
	at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
	at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)
	at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
	at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:362)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.Exception: Requires OpenSSL 1.0.2+
	at io.netty.internal.tcnative.SSLContext.setCertificateCallback(Native Method)
	at io.netty.handler.ssl.ReferenceCountedOpenSslServerContext.newSessionContext(ReferenceCountedOpenSslServerContext.java:126)
	... 32 more

Modifications:

Also try to set the certification callback and only if this works as well mark KeyManagerFactory support as enabled.

Result:

Also correctly work when OpenSSL 1.1.0 is used."
3eff1dbc1b23e44d4d60473712d93e7be188b170,"Remove deprecated GraalVM native-image flags (#9118)

Motivation:

The first final version of GraalVM was released which deprecated some flags. We should use the new ones.

Modifications:

Removes the use of deprecated GraalVM native-image flags
Adds a flag to initialize netty at build time.

Result:

Do not use deprecated flags"
128403b492d8490d9fc770b7a2dad669433b2790,"Introduce ByteBuf.maxFastWritableBytes() method (#9086)


Motivation

ByteBuf capacity is automatically increased as needed up to maxCapacity
when writing beyond the buffer's current capacity. However there's no
way to tell in general whether such an increase will result in a
relatively costly internal buffer re-allocation.

For unpooled buffers it always does, in pooled cases it depends on the
size of the associated chunk of allocated memory, which I don't think is
currently exposed in any way.

It would sometimes be useful to know where this limit is when making
external decisions about whether to reuse or preemptively reallocate.

It would also be advantageous to take this limit into account when
auto-increasing the capacity during writes, to defer such reallocation
until really necessary.

Modifications

Introduce new AbstractByteBuf.maxFastWritableBytes() method which will
return a value >= writableBytes() and <= maxWritableBytes().

Make use of the new method in the sizing decision made by the
AbstractByteBuf.ensureWritable(...) methods.

Result

Less reallocation/copying."
8ce3d52c0e7eb69d28647f942eaef68f7443a2d1,"OpenSsl.USE_KEYMANAGER_FACTORY incorrectly set to false with BoringSSL (#9175)

Motivation

SSL unit tests started failing for me (RHEL 7.6) after #9162. It looks
like the intention was to prevent disable use of the
io.netty.handler.ssl.openssl.useKeyManagerFactory property when using
BoringSSL, but it now gets set to false in that case rather than the
prior/non-BoringSSL default of true.

Modification

Set useKeyManagerFactory to true rather than false in BoringSSL case
during static init of OpenSSl class.

Result

Tests pass again."
b11afd28f434cf49cd1cecb79357ac396f1be620,"Updated jboss-marshalling dependency to current license (#9172)

Motivation:

The mentioned license for the jboss-marshalling dependency is outdated. The license has moved from LGPL v2.1 to Apache 2.0.
The version used by Netty (1.4.11Final) is on Apache 2.0 see https://github.com/jboss-remoting/jboss-marshalling/blob/1.4.11.Final/LICENSE.txt

Modification:

Updated NOTICE file with correct license for jboss-marshalling.

Result:

NOTICE file shows correct license."
137a3e7137c5bb0df03bb67448b267dfaf169255,"Do not use static exceptions for websocket handshake timeout (#9174)

Motivation:

f17bfd0f64189d91302fbdd15103788bf9eabaa2 removed the usage of static exception instances to reduce the risk of OOME due addSupressed calls. We should do the same for exceptions used to signal handshake timeouts.

Modifications:

Do not use static instances

Result:

No risk of OOME due addSuppressed calls"
70731bfa7ef884ee354a5cf96e1545a8d9d090b8,"Added UDP multicast (with caveats: getInterface, getNetworkInterface, block or loopback-mode-disabled operations).

Motivation:

Provide epoll/native multicast to support high load multicast users (we are using it for a high load telecomm app at my day job).

Modification:

Added support for source specific and any source multicast for epoll transport. Some caveats: no support for disabling loop back mode, retrieval of interface and block operation, all of which tend to be less frequently used.

Result:

Provides epoll transport multicast for common use cases.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
e17ce934da501788c3737631a02d02ee89ebf9df,"Correctly detect InternetProtocolFamily when EpollDatagramChannel is created with existing FileDescriptor (#9185)

Motivation:

When EpollDatagramChannel is created with an existing FileDescriptor we should detect the correct InternetProtocolFamily.

Modifications:

Obtain the InternetProtocolFamily from the given FD

Result:

Use correct InternetProtocolFamily when EpollDatagramChannel is created via existing FileDescriptor"
385dadcfbc9fe52c63acf3f97042a8774798fdce,"Fix redundant or missing checks and other inconsistencies in ByteBuf impls (#9119)


Motivation

There are a few minor inconsistencies / redundant operations in the
ByteBuf implementations which would be good to fix.

Modifications

- Unnecessary ByteBuffer.duplicate() performed in
CompositeByteBuf.nioBuffer(int,int)
- Add missing checkIndex(...) check to
ReadOnlyByteBufferBuf.nioBuffer(int,int)
- Remove duplicate bounds check in
ReadOnlyByteBufferBuf.getBytes(int,byte[],int,int)
- Omit redundant bounds check in
UnpooledHeapByteBuf.getBytes(int,ByteBuffer)

Result

More consistency and slightly less overhead"
8b04c5ffe761bc8a860b5ee69119332214c19cab,"Set the HOST header in Http2ClientInitializer when trying to start an upgrade request (#9177)

Motivation:

The io.netty.example.http2.helloworld.client.Http2Client example should work in the h2c (HTTP2 cleartext - non-TLS) mode, which is the default for this example unless you set a -Dssl VM param. As we do not set the HOST header some servers do reject the upgrade request.

Modifications:

Set the HOST header

Result:

Fixes https://github.com/netty/netty/issues/9115."
e1a881fa2b420866e1987e2ad2bce18e0d9c0b94,"Simplify SingleThreadEventExecutor.awaitTermination() implementation (#9081)

Motivation

A Semaphore is currently dedicated to this purpose but a simple
CountDownLatch will do.

Modification

Remove private threadLock Semaphore from SingleThreadEventExecutor and just use a CountDownLatch.

Also eliminate use of PlatformDependent.throwException() in startThread
method, and combine some nested if clauses.

Result

Cleaner EventLoop termination notification."
ede7251ecb50b7b53a2fdd8a5152b2327e1ebf14,"Fixed toString() exception in MqttSubscribePayload and MqttUnsubscribePayload (#9202)

Motivation:
The toString() methods of MqttSubscribePayload and MqttUnsubscribePayload are causing exceptions when no topics are set.

Modification:
The toString() methods will not throw Excpetions anymore.

Result:
Fixes #9197"
f6cf681f9004d30ac19c1aa7bb43f628d088e8c9,"Don't read from timerfd and eventfd on each EventLoop tick (#9192)

Motivation:

We do not need to issue a read on timerfd and eventfd when the EventLoop wakes up if we register these as Edge-Triggered. This removes the overhead of 2 syscalls and so helps to reduce latency.

Modifications:

- Ensure we register the timerfd and eventfd with EPOLLET flag
- If eventfd_write fails with EAGAIN, call eventfd_read and try eventfd_write again as we only use it as wake-up mechanism.

Result:

Less syscalls and so reducing overhead.

Co-authored-by: Carl Mastrangelo <carl@carlmastrangelo.com>"
ec69da9afb8388c9ff7e25b2a6bc78c9bf91fb07,"Make UnpooledUnsafeHeapByteBuf class public (#9184)

Motivation:

1. Users will be able to use an optimized version of
`UnpooledHeapByteBuf` and override behavior of methods if required.
2. Consistency with `UnpooledDirectByteBuf`, `UnpooledHeapByteBuf`, and
`UnpooledUnsafeDirectByteBuf`.

Modifications:

- Add `public` access modifier to `UnpooledUnsafeHeapByteBuf` class and
ctor;

Result:

Public access for optimized version of `UnpooledHeapByteBuf`."
b91889c3db5f1ad90d2061df003bb95fe7510de4,"ByteToMessageDecoder.handlerRemoved(...) should only call fireChannelReadComplete() if fireChannelRead(...) was called before (#9211)

Motivation:

At the moment ByteToMessageDecoder always calls fireChannelReadComplete() when the handler is removed from the pipeline and the cumulation buffer is not null. We should only call it when we also call fireChannelRead(...), which only happens if the cumulation buffer is not null and readable.

Modifications:

Only call fireChannelReadComplete() if fireChannelRead(...) is called before during removal of the handler.

Result:

More correct semantics"
7817827324218b9eed7be010ea4933dc005c4d62,"Allow null sender when using DatagramPacketEncoder (#9204)

Motivation:

It is valid to use null as sender so we should support it when DatagramPacketEncoder checks if it supports the message.

Modifications:

- Add null check
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9199."
272f68f48c19f75704cea9811ae1668b72e5ec9b,"De-duplicate UnpooledDirectByteBuf/UnpooledUnsafeDirectByteBuf (#9085)

Motivation

While digging around looking at something else I noticed that these
share a lot of logic and it would be nice to reduce that duplication.

Modifications

Have UnpooledUnsafeDirectByteBuf extend UnpooledDirectByteBuf and make
adjustments to ensure existing behaviour remains unchanged.

The most significant addition needed to UnpooledUnsafeDirectByteBuf was
re-overriding the getPrimitive/setPrimitive methods to revert back to
the AbstractByteBuf versions which include bounds checks
(UnpooledDirectByteBuf excludes these as an optimization, relying on
those done by underlying ByteBuffer).

Result

~200 fewer lines, less duplicate logic."
f194aedbf0a715f8c18b3eca23424e2d2b4dd2b3,"Close delegate resolver from RoundRobinInetAddressResolver (#9214)

Motivation:

RoundRobinDnsAddressResolverGroup ultimately opens UDP
ports for DNS resolution. Callers likely expect that
RoundRobinDnsAddressResolverGroup#close() will close those
ports, but that is not currently true (see #9212).

Modifications:

Overrode RoundRobinInetAddressResolver#close() to close
the delegate name resolver, which in turn closes any UDP
ports used for name resolution.

Result:

RoundRobinDnsAddressResolverGroup#close() closes UDP ports
as expected. This fixes #9212."
6f602cbd147a3f42b20a8fa2433a7c1da9da190d,"Resolve the pid field in PeerCredentials of KQueueDomainSocketChannels. (#9219)


Motivation:

This resolves a TODO from the initial transport-native-kqueue implementation, supplying the user with the pid of the local peer client/server process.

Modification:

Inside netty_kqueue_bsdsocket_getPeerCredentials, Call getsockopt with LOCAL_PEERPID and pass it to PeerCredentials constructor.
Add a test case in KQueueSocketTest.

Result:

PeerCredentials now have pid field set. Fixes https://github.com/netty/netty/issues/9213"
9abeaf16fd06344a535ced33eaedcbda55540c7a,"Properly debounce wakeups (#9191)

Motivation:
The wakeup logic in EpollEventLoop is overly complex

Modification:
* Simplify the race to wakeup the loop
* Dont let the event loop wake up itself (it's already awake!)
* Make event loop check if there are any more tasks after preparing to
sleep.  There is small window where the non-eventloop writers can issue
eventfd writes here, but that is okay.

Result:
Cleaner wakeup logic.

Benchmarks:

```
BEFORE
Benchmark                                   Mode  Cnt       Score      Error  Units
EpollSocketChannelBenchmark.executeMulti   thrpt   20  408381.411 ± 2857.498  ops/s
EpollSocketChannelBenchmark.executeSingle  thrpt   20  157022.360 ± 1240.573  ops/s
EpollSocketChannelBenchmark.pingPong       thrpt   20   60571.704 ±  331.125  ops/s

Benchmark                                   Mode  Cnt       Score      Error  Units
EpollSocketChannelBenchmark.executeMulti   thrpt   20  440546.953 ± 1652.823  ops/s
EpollSocketChannelBenchmark.executeSingle  thrpt   20  168114.751 ± 1176.609  ops/s
EpollSocketChannelBenchmark.pingPong       thrpt   20   61231.878 ±  520.108  ops/s
```"
643d521d5e21bcfd9d5e1bc3c3a642ecbddb5596,"HTTP/2 avoid closing connection when writing GOAWAY (#9227)

Motivation:
b4e3c12b8e8e984ba65330dd6dc34a4b3d07a25a introduced code to avoid coupling
close() to graceful close. It also added some code which attempted to infer when
a graceful close was being done in writing of a GOAWAY to preserve the
""connection is closed when all streams are closed behavior"" for the child
channel API. However the implementation was too overzealous and may preemptively
close the connection if there are not currently any open streams (and close if
there are any frames which create streams in flight).

Modifications:
- Decouple writing a GOAWAY from trying to infer if a graceful close is being
  done and closing the connection. Even if we could enhance this logic (e.g.
wait to close until the second GOAWAY with no error) it is possible the user
doesn't want the connection to be closed yet. We can add a means for the codec
to orchestrate the graceful close in the future (e.g. write some special ""close
the connection when all streams are closed"") but for now we can just let the
application handle this.

Result:
Fixes https://github.com/netty/netty/issues/9207"
67ad79d0805e47e0f0c1ef65c558be39dc8c3893,"Handle missing methods on ChannelHandlerMask (#9221)

Motivation:

When Netty is run through ProGuard, seemingly unused methods are removed.  This breaks reflection, making the Handler skipping throw a reflective error.

Modification:

If a method is seemingly absent, just disable the optimization.

Result:

Dealing with ProGuard sucks infinitesimally less."
165229658be7457f3a3c7540496b6ff9a0b6406f,"Add support for loopbackmode and accessing the configured interface when using epoll native transport with multicast (#9218)

Motivation:

We did not have support for enable / disable loopback mode in our native epoll transport and also missed the implemention to access the configured interface.

Modifications:

Add implementation and adjust test to cover it

Result:

More complete multicast support with native epoll transport"
ac95ff8b631124f3e646a7550ea6b686cfcc092d,"delete Other ""Content-"" MIME Header Fields exception (#9122)

delete Other ""Content-"" MIME Header Fields exception

Motivation:

RFC7578 4.8. Other ""Content-"" Header Fields

The multipart/form-data media type does not support any MIME header
fields in parts other than Content-Type, Content-Disposition, and (in
limited circumstances) Content-Transfer-Encoding. Other header
fields MUST NOT be included and MUST be ignored.

Modification:

Ignore other Content types.

Result: 

Other ""Content-"" Header Fields should be ignored no exception"
3c36ce6b5ca859f8939f09309e248e41bc3ef2bb,"Introduce WebSocketClientHandshaker::absoluteUpgradeUrl, close #9205 (#9206)

Motivation:

When connecting through an HTTP proxy over clear HTTP, user agents must send requests with an absolute url. This hold true for WebSocket Upgrade request.

WebSocketClientHandshaker and subclasses currently always send requests with a relative url, which causes proxies to crash as request is malformed.

Modification:

Introduce a new parameter `absoluteUpgradeUrl` and expose it in constructors and WebSocketClientHandshakerFactory.

Result:

It's now possible to configure WebSocketClientHandshaker so it works properly with HTTP proxies over clear HTTP."
dc2649e95d6345d7b631f98baf74a4e936351b2d,"Allow to set parent Channel when constructing EmbeddedChannel (#9230)

Motivation:

Sometimes it is beneficial to be able to set a parent Channel in EmbeddedChannel if the handler that should be tested depend on the parent.

Modifications:

- Add another constructor which allows to specify a parent
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/9228."
fa1dedcc0f6b8cfe5a9cd1493e41dbf43cf23f3f,"Make sync close for FixedChannelPool truly synchronous (#9226)

Motivation:

In the current implementation, the synchronous close() method for FixedChannelPool returns
after scheduling the channels to close via a single threaded executor asynchronously. Closing a channel
requires event loop group, however, there might be a scenario when the application has closed
the event loop group after the sync close() completes. In this scenario an exception is thrown
(event loop rejected the execution) when the single threaded executor tries to close the channel.

Modifications:

Complete the close function only after all the channels have been close and introduce
closeAsync() method for cases when the current/existing behaviour is desired.

Result:

Close function would completely when the channels have been closed"
a29532df43c9db08db5dbc83f30bb7bd2e55a596,"Fix ByteBufChecksum optimisation for CRC32 and Adler32 (#9242)

Motivation:

Because of a simple bug in ByteBufChecksum#updateByteBuffer(Checksum),
ReflectiveByteBufChecksum is never used for CRC32 and Adler32, resulting
in direct ByteBuffers being checksummed byte by byte, which is
undesriable.

Modification:

Fix ByteBufChecksum#updateByteBuffer(Checksum) method to pass the
correct argument to Method#invoke(Checksum, ByteBuffer).

Result:

ReflectiveByteBufChecksum will now be used for Adler32 and CRC32 on
Java8+ and direct ByteBuffers will no longer be checksummed on slow
byte-by-byte basis."
96feca1d23ec5c31c8c692293241911de88ae8d0,"SslHandler to fail handshake and pending writes if non-application write fails (#9240)

Motivation:
SslHandler must generate control data as part of the TLS protocol, for example
to do handshakes. SslHandler doesn't capture the status of the future
corresponding to the writes when writing this control (aka non-application
data). If there is another handler before the SslHandler that wants to fail
these writes the SslHandler will not detect the failure and we must wait until
the handshake timeout to detect a failure.

Modifications:
- SslHandler should detect if non application writes fail, tear down the
channel, and clean up any pending state.

Result:
SslHandler detects non application write failures and cleans up immediately."
a2583d0d3ca19e54ee581b32c69ef4a4552ba185,"Fix ReflectiveByteBufChecksum with direct buffers (#9244)


Motivation:

ReflectiveByteBufChecksum#update(buf, off, len) ignores provided offset
and length arguments when operating on direct buffers, leading to wrong
byte sequences being checksummed and ultimately incorrect checksum
values (unless checksumming the entire buffer).

Modifications:

Use the provided offset and length arguments to get the correct nio
buffer to checksum; add test coverage exercising the four meaningfully
different offset and length combinations.

Result:

Offset and length are respected and a correct checksum gets calculated;
simple unit test should prevent regressions in the future."
93414db1f3ae2f0915640696122310d736e6d155,"Fix LZ4 encoder/decoder performance with (default) xxHash32 (#9249)

Motivation:

Lz4FrameEncoder and Lz4FrameDecoder in their default configuration use
an extremely inefficient way to checksum direct byte buffers. In
particular, for every byte checksummed, a single-element byte array is
being allocated and a JNI cal is made, which in some internal testing
makes a 25x difference in total throughput and allocates *a lot* of
garbage.

Modifications:

Lz4XXHash32, an implementation of ByteBufChecksum specifically for use
by Lz4FrameEncoder and Lz4FrameDecoder, is introduced. It utilises
xxHash32 block API which provides a hash() method that accepts a
ByteBuffer as an argument. Lz4FrameEncoder and Lz4FrameDecoder are
modified to use this implementation by default.

Result:

Lz4FrameEncoder and Lz4FrameDecoder perform well again when operating
on direct byte buffers with default checksum configuration; a public
implementation is provided for those who need to override the seed."
b1fb40e42d3fe456b20b453d8577f755add5fd1a,"Change Scheduled to FixedRate in Traffic Counter (#9245)

Motivation:

Traffic shaping needs more accurate execution than scheduled one. So the
use of FixedRate instead.
Moreover the current implementation tends to create as many threads as
channels use a ChannelTrafficShapingHandlern, which is unnecessary.

Modifications:

Change the executor.schedule to executor.scheduleAtFixedRate in the
start and remove the reschedule call from run monitor thread since it
will be restarted by the Fixed rate executor.
Also fix a minor bug where restart was only doing start() without stop()
before.

Result:

Threads are more stable in number of cached and precision of traffic
shaping is enhanced."
f945a071db4d499d21142d3aa321ce8070616665,"Writability state of http2 child channels should be decoupled from the flow-controller (#9235)

Motivation:

We should decouple the writability state of the http2 child channels from the flow-controller and just tie it to its own pending bytes counter that is decremented by the parent Channel once the bytes were written.

Modifications:

- Decouple writability state of child channels from flow-contoller
- Update tests

Result:

Less coupling and more correct behavior. Fixes https://github.com/netty/netty/issues/8148."
7fc718db3cd52e82901dfc3fe8b437ae1ff75d4e,"WebSocket is closed without an error on protocol violations (#9116)

Motivation:

Incorrect WebSockets closure affects our production system.
Enforced 'close socket on any protocol violation' prevents our custom termination sequence from execution.
Huge number of parameters is a nightmare both in usage and in support (decoders configuration).
Modification:

Fix violations handling - send proper response codes.
Fix for messages leak.
Introduce decoder's option to disable default behavior (send close frame) on protocol violations.
Encapsulate WebSocket response codes - WebSocketCloseStatus.
Encapsulate decoder's configuration into a separate class - WebSocketDecoderConfig.
Result:

Fixes #8295."
01cfd78d6da3a4548fb88361124aa44cf91d3e8c,"Try to mark child channel writable again once the parent channel becomes writable (#9254)

Motivation:

f945a071db4d499d21142d3aa321ce8070616665 decoupled the writability state from the flow controller but could lead to the situation of a lot of writability updates events were propagated to the child channels. This change ensure we only take into account if the parent channel becomes writable again before we try to set the child channels to writable.

Modifications:

Only listen for channel writability changes for if the parent channel becomes writable again.

Result:

Less writability updates."
c32c9b4c94b1ef78d129d43b208dcad2cee44203,"codec-http2: Lazily translate cookies for HTTP/1 (#9251)

Motivation:

For HTTP/2 messages with multiple cookies HttpConversionUtil.addHttp2ToHttpHeaders spends a good portion of time creating throwaway StringBuilders.

Modification:

Handle cookies lazily by using a ThreadLocal StringBuilder and then converting it to the H1 header at the end.

Result:

Less allocations."
6381d0766ab8438b5702791cd826d79ade4adf52,"De-duplicate PooledByteBuf implementations (#9120)

Motivation

There's quite a lot of duplicate/equivalent logic across the various
concrete ByteBuf implementations. We could take this even further but
for now I've focused on the PooledByteBuf sub-hierarchy.

Modifications

- Move common logic/methods into existing PooledByteBuf abstract
superclass
- Shorten PooledByteBuf.capacity(int) method implementation

Result

Less code to maintain"
c9aaa93d83b5b571dbc733d2632232db82b3d884,"Allow to specify a EventLoopTaskQueueFactory for various EventLoopGroup implementations (#9247)

Motivation:

Sometimes it is desirable to be able to use a different Queue implementation for the EventLoop of a Channel. This is currently not possible without resort to reflection.

Modifications:

- Add a new constructor to Nio|Epoll|KQueueEventLoopGroup which allows to specify a factory which is used to create the task queue. This was the user can override the default implementation.
- Add test

Result:

Be able to change Queue that is used for the EventLoop."
9dd1aab482fedc627b663cde10ae75dbab66edf9,"Fix flaky DnsNameResolverTest.testTruncatedWithTcpFallback (#9262)

Motivation:

testTruncatedWithTcpFallback was flacky as we may end up closing the socket before we could read all data. We should only close the socket after we succesfully read all data.

Modifications:

Move socket.close() to finally block

Result:

Fix flaky test and so make the CI more stable again."
2af769f6dc76e3aad88a52c345689d739a9130a2,"Subsequence versions of ByteBufUtil#writeUtf8(...) methods (#9224)

Motivation

It would be useful to be able to write UTF-8 encoded subsequence of
CharSequence characters to a ByteBuf without needing to create a
temporary object via CharSequence#subSequence().

Modification

Add overloads of ByteBufUtil writeUtf8, reserveAndWriteUtf8 and
utf8Bytes methods which take explicit subsequence bounds.

Result

More efficient writing of substrings to byte buffers possible"
430eeee2f62ce0415cbeec14ffd94517e60805ca,"Return the result of the list.recycle() call (#9264)

Motivation:

Resolve the issue highlighted by SpotJMHBugs that the creation of the RecyclableArrayList may be elided by the JIT since the result isn't consumed or returned.

Modifications:

Return the result of `list.recycle()` so that the list isn't elided.

Result:

The JMH benchmark shows a change in performance indicating that the prior results of this may be unsound."
2c99fc0f1290c65685c5036fdc9884921823ad7d,"Recycle RecyclableArrayDeque as fast as possible in FlowControlHandler (#9263)

Motivation:

FlowControlHandler does use a recyclable ArrayDeque internally but only recycles it when the channel is closed. We should better recycle it once it is empty.

Modifications:

Recycle the deque as fast as possible

Result:

Less RecyclableArrayDeque instances."
517a93d87d5c65e3c4bedf4a77183583991f32e1,"Make EventLoopTaskQueueFactory a top-level interface

Motivation:

c9aaa93d83b5b571dbc733d2632232db82b3d884 added the ability to specify an EventLoopTaskQueueFactory but did place it under MultithreadEventLoopGroup while not really belongs there.

Modifications:

Make EventLoopTaskQueueFactory a top-level interface

Result:

More logical code layout."
41c1ab2e826e3cb0f653a4365dcd29c4b59dc5bf,"Bugfix #9257: WebSocketProtocolHandler does NOT support autoRead=false (#9258)

Motivation:

I need to control WebSockets inbound flow manually, when autoRead=false

Modification:

Add missed ctx.read() call into WebSocketProtocolHandler, where read request has been swallowed.

Result:

Fixes #9257"
307efbe49c6c71664250e06200123c0ae3e1ec4a,"Split multiplexing from frame decoding to allow easier customization of frame processing and better seperation of responsibilities (#9239)

Motivation:

In the past we had the following class hierarchy:

Http2ConnectionHandler --- Http2FrameCodec -- Http2MultiplexCodec

This hierarchy makes it impossible to plug in any code that would like to act on Http2Frame and Http2StreamFrame which can be quite useful for various situations (like metrics, logging etc). Beside this it also made the implementtion very hacky. To allow easier maintainance and also allow more flexible costumizations we should split Http2MultiplexCodec and Http2FrameCode.

Modifications:

- Introduce Http2MultiplexHandler (which is a replacement for Http2MultiplexCodec when used together with Http2FrameCodec)
- Mark Http2MultiplexCodecBuilder and Http2MultiplexCodec as deprecated. People should use Http2FrameCodecBuilder / Http2FrameCodec together with Http2MultiplexHandlder in the future
- Adjust / Add tests
- Adjust examples

Result:

More flexible usage possible and less hacky / coupled implementation for http2 multiplexing"
712077cdef050bc9aa211d301a1bdc3e763b6097,"Fixed the haproxy message mem leak issue (#9250)

Motivation:

HAProxyMessage should be released as it contains a list of TLV which hold a ByteBuf, otherwise, it may cause memory leaks.

Modification:

- Let HAProxyMessage extend AbstractReferenceCounted
- Adjust tests.

Result:

Fixes #9201"
1ad47282c335323a3a244be91f619dcb97b69d20,"Preserve the original filename when encoding a multipart/form in mixed mode. (#9270)

Motivation:

The HttpPostRequestEncoder overwrites the original filename of file uploads sharing the same name encoded in mixed mode when it rewrites the multipart body header of the previous file. The original filename should be preserved instead.

Modifications:

Change the HttpPostRequestEncoder to reuse the correct filename when the encoder switches to mixed mode. The original test is incorrect and has been modified too, in addition it tests with an extra file upload since the current test was not testing the continuation of a mixed mode.

Result:

The HttpPostRequestEncoder will preserve the original filename of the first fileupload when switching to mixed mode"
097f422198d9391116398f531c37a05b9414ee87,"Cleanup http2 example code to make clear it is fine to just use ctx directly. (#9276)

Motivation:

In our example we did use pipeline.context(this) to obtain the context of the handler while it was already passed in via ctx. This could confuse users and give the impression that the context is no the same.

Modifications:

Just use ctx directly.

Result:

Fix confusion in example code. This was brought up on stackoverflow:

https://stackoverflow.com/questions/56711128/when-is-a-channelhandlercontext-handed-to-a-channelhandler-not-that-channelhandl"
265c745d9ad728f4084a80f7445a37d8c1daa873,"EmptyByteBuf.getCharSequence(0,...) must return empty String (#9272)

Motivation:

At the moment EmptyByteBuf.getCharSequence(0,...) will return null while it must return a """".

Modifications:

- Let EmptyByteBuf.getCharSequence(0,...) return """"
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9271."
039087ed47a482a08ded357b047850830b65e8b9,"Don't filter out TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (#9274)

Motivation:

TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 is supported since Java 8 (see https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html) and belongs to the recommended configurations in many references, eg SSLabs (https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices) or Google Cloud Platform Restricted Profile.

Modifications:

Add TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 to default ciphers list.

Result:

TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 is enabled by default."
18b7bdff12afb3dd6c6d579d4ade7159079afd36,"Add null check to isSkippable. Fixes #9278 (#9280)

Motivation:

Currently GraalVM substrate returns null for reflective calls if the reflection access is not declared up front.

A change introduced in Netty 4.1.35 results in needing to register every Netty handler for reflection. This complicates matters as it is difficult to know all the possible handlers that need to be registered.

Modification:

This change adds a simple
null check such that Netty does not break on GraalVM substrate without the reflection information registration.

Result:

Fixes #9278"
672fa0c77924332fdabe19fb420a0b16679b66d9,"Documented non-usage of BlackHole::consume on ByteBufAccessBenchmark (#9279)

Motivation:

Some JMH benchmarks need additional explanations to motivate
specific code choices.

Modifications:

Introduced comment to explai why calling BlackHole::consume
in a loop is not always the right choice for some benchmark.

Result:

The relevant method shows a comment that warn about changing
the code to introduce BlackHole::consume in the loop."
52169cba95850e77136f1821ea3ae4d069505283,"Replace accumulation with blackhole.consume (#9275)

Motivation:

SpotJMHBugs reports that accumulating a value as a way of eliding dead code
elimination may be inadvisable, as discussed in
`JMHSample_34_SafeLooping::measureWrong_2`. Change the test so that it consumes
the response with `Blackhole::consume` instead.

Modifications:

- Replace addition of results with explicit `blackhole.consume()` call

Result:

Tests work as before, but with different benchmark numbers."
6bd8f0502da4bb51f1bbafb42f9d2bbf46d35480,"Call to ‘asList’ with only one argument could be replaced with ‘singletonList’ (#9288)

Motivation:

asList should only be used if there are multiple elements.

Modification:

Call to asList with only one argument could be replaced with singletonList

Result:

Cleaner code and a bit of memory savings"
9621a5b98120f9596b5d2a337330339dda199bde,"remove unused imports (#9287)

Motivation:

Some imports are not used

Modification:

remove unused imports

Result:

Code cleanup"
856f1185e1c602356e489a5dae7d6d74f42d17f6,"All override methods must be added @override (#9285)

Motivation:

Some methods that either override others or are implemented as part of implementation an interface did miss the `@Override` annotation

Modifications:

Add missing `@Override`s

Result:

Code cleanup"
df46a349e09f94ed92fa5fc9cc7b142c10ab2305,"Reduce coupeling between Http2FrameCodec and Http2Multiplex* (#9273)

Motivation:

Http2MultiplexCodec and Http2MultiplexHandler had a very strong coupling with Http2FrameCodec which we can reduce easily. The end-goal should be to have no coupling at all.

Modifications:

- Reduce coupling by move some common logic to Http2CodecUtil
- Move logic to check if a stream may have existed before to Http2FrameCodec
- Use ArrayDeque as replacement for custom double-linked-list which makes the code a lot more readable
- Use WindowUpdateFrame to signal consume bytes (just as users do when they use Http2FrameCodec directly)

Result:

Less coupling and cleaner code."
7dff856b1f97ce345140dd0944a744b6c03f6683,"Don't propagate Http2WindowUpdateFrame to the child channel / propagate Http2ResetFrame as user event when using Http2MultiplexHandler (#9290)

Motivation:

We should not propage Http2WindowUpdateFrames to the child channels at all as these are not really use-ful and should not be flow-controlled via `read()` anyway.  In the other hand Http2ResetFrame is very useful but should be propagated via an user event so the user is aware of it directly even if the user stops reading.

Modifications:

- Dont propagate Http2WindowUpdateFrames when using Http2MultiplexHandler
- Use user event for Http2ResetFrame when using Http2MultiplexHandler
- Adjust javadoc of Http2MultiplexHandler
- Add unit tests

Result:

Fixes https://github.com/netty/netty/pull/8889 and https://github.com/netty/netty/pull/7635"
51843d8e8ee43ab3918521421d4bc91a4642056f,"MqttConnectPayload.toString() should use Arrays.toString() instead of [].toString() (#9292)

Motivation:

The toString() method should use Arrays.toString() to produce a meaningful String representation for arrays.

Modification:

Use Arrays.toString()

Result:

More useful toString() implementation"
f489404fa12695939bf1ccdb6e4dbd79bae84ff7,"HAProxyMessageDecoder not correctly handle delimiter in all cases (#9282)

Motivation:

In line base decoders, lines are split by delimiter, but the delimiter may be \r\n or \r, so in decoding, if findEndOfLine finds delimiter of a line, the length of the delimiter may be 1 or 2, instead of DELIMITER_LENGTH, where the value is fixed to 2.
The second problem is that if the data to be decoded is too long, the decoder will discard too long data, and needs to record the length of the discarded bytes. In the original implementation, the discarded bytes are not accumulated, but are assigned to the currently discarded bytes.
Modification:

Modifications:
Dynamic calculation of the length of delimiter.
In discarding mode, add up the number of characters discarded each time.

Result:

Correctly handle all delimiters and also correctly handle too long frames."
35e0843376afe9bb5e375e73218ea7a34cb43ffb,[maven-release-plugin] prepare release netty-4.1.37.Final
5b58b8e6b52b777ae0995bad9967e102b063f371,[maven-release-plugin] prepare for next development iteration
efe40ac17db1a572e4ea43a1a197882c46b419b6,"Add a test for OpenSslEngine which decrypts traffic (#8699)

Motivation:
I've introduced netty/netty-tcnative#421 that introduced exposing OpenSSL master key & client/server
random values with the purpose of allowing someone to log them to debug the traffic via auxiliary tools like Wireshark (see also #8653)

Modification:
Augmented OpenSslEngineTest to include a test which manually decrypts the TLS ciphertext
after exposing the masterkey + client/server random. This acts as proof that the tc-native new methods work correctly!

Result:

More tests

Signed-off-by: Farid Zakaria <farid.m.zakaria@gmail.com>"
6b6475fb565551c36f372fe37683d98df6674161,"Prevent ByteToMessageDecoder from overreading when !isAutoRead (#9252)


Motivation:

ByteToMessageDecoder only looks at the last channelRead() in the batch
of channelRead()-s when determining whether or not it should call
ChannelHandlerContext#read() to consume more data when !isAutoRead. This
will lead to read() calls issued unnecessaily and unprompted if the very
last channelRead() didn't result in at least one decoded message, even
if there have been messages decoded from other channelRead()-s in the
current batch.

Modifications:

Track decode outcomes for the entire batch of channelRead() calls and
only issue a read in BTMD if the entire batch of channelRead() calls
yielded no complete messages.

Result:

ByteToMessageDecoder will no longer overread when the very last read
yielded no message, but the batch of reads did."
ee8206cb2615e1b4e843cf9e52781fdcf2de85f4,"optimize some code (#9289)

Motivation:

There is some manual coping of elements of Collections which can be replaced by Collections.addAll(...) and also some unnecessary semicolons.

Modifications:

- Simplify branches
- Use Collections.addAll
- Code cleanup

Result:

Code cleanup"
47eb9c3bf4506963f72fd508cb1632477bcc4163,"Ensure sc.close() is executed before FixedChannelPoolTest.testCloseAsync() returns (#9298)

Motivation:

We observed some test-failues sometimes in the CI which happened if sc.close() was not completed before the next test did run. If this happened we would fail the bind(...) as the LocalAddress was still in use.

Modifications:

Await the close before return

Result:

Fixes race in testsuite which resulted in FixedChannelPoolTest.testAcquireNewConnection to fail if FixedChannelPoolTest.testCloseAsync() did run before it."
05c2967e4af5e22d7ecf672ed2dbd726aa558342,"Http2FrameCodecBuilder.autoAckSettingsFrame(...) must be public (#9295)

Motivation:

b3dba317d797e21cc253bb6ad6776307297f612e added AbstractHttp2ConnectionBuilder.autoAckSettingsFrame(...) as protected method and made it public for Http2MultiplexCodecBuilder. Unfortunally it did miss to also make it public in Http2FrameCodecBuilder

Modifications:

Correctly override autoAckSettingsFrame in Http2FrameCodecBuilder and so make it usable when building Http2FrameCodec.

Result:

Be able to also configure autoAckSettingsFrame when Http2FrameCodec is used."
262ced7ce4a9254fb55046aee89f0ff4d15e17f1,"Unconditionally initialize sockaddrs in epoll linuxsocket (#9299)

Motivation:

Compiling with -Werror,-Wuninitialized complains about the sockaddrs being uninitialized.
I believe this is because the init function netty_unix_socket_initSockaddr is in a
separate compilation unit.  Since this code isn't on the criticial path, it's easy
to just memset the variables rather than suppress the warning.

Modification:
Always clear the sockaddrs, even if they will be initialized later.

Result:
Able to compile with warnings turned on"
4596f9e1397ffbc7d1a68b670e529dcf3a5d6036,"Fix the issue of incorrectly calculating the number of dump lines when using PrettyDump in ByteBufUtil (#9304)

Motivation:

Fix the issue of incorrectly calculating the number of dump rows when using prettyHexDumpmethod in ByteBufUtil. The way to find the remainder is either length % 16 or length & 15

Modification:

Fixed the way to calculate the remainder

Result:

Fixed #9301"
14154074f20f23d72f7704b4b9bce443e56c3bbd,"Don't loop over TLS records for SNI (#7479)

Motivation:

The AbstractSniHandler previously was willing to tolerate up to three
non-handshake records before a ClientHello that contained an SNI
extension field. This is, so far as I can tell, completely
unnecessary: no TLS implementation will be sending alerts or change
cipher spec messages before ClientHello.

Given that it was not possible to determine why this loop is in
the code to begin with, it's probably just best to remove it.

Modifications:

Remove the for loop.

Result:

The AbstractSniHandler will more rapidly determine whether it should
pass the records on to the default SSL handler.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
f8c1f350dbe6424036693bf5c0a62dfa39512818,"Fix public int read() throws IOException method exceeds the limit of length (#9306)

Motivation:

buffer.isReadable() should not be used to limit the amount of data that can be read as the amount may be less then was is readable.

Modification:

- Use  available() which takes the length into account
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9305"
5ded050f7bb0b046892623194291b1ab021a5510,"#7285 Improved ""Discarded inbound message"" warning (#9286)

Motivation:

On servers with many pipelines or dynamic pipelines, it is easy for end user to make mistake during pipeline configuration. Current message:

`Discarded inbound message PooledUnsafeDirectByteBuf(ridx: 0, widx: 2, cap: 2) that reached at the tail of the pipeline. Please check your pipeline configuration.`

Is not always meaningful and doesn't allow to find the wrong pipeline quickly.

Modification:

Added additional log placeholder that identifies pipeline handlers and channel info. This will allow for the end users quickly find the problem pipeline.

Result:

Meaningful warning when the message reaches the end of the pipeline. Fixes #7285"
131be58f4866e30626d53386df0c236d17044891,"Correctly take length of ByteBufInputStream into account for readLine… (#9310)

* Correctly take length of ByteBufInputStream into account for readLine() / readByte()

Motivation:

ByteBufInputStream did not correctly take the length into account when validate bounds for readLine() / readByte() which could lead to read more then allowed.

Modifications:

- Correctly take length into account
- Add unit tests
- Fix existing unit test

Result:

Correctly take length of ByteBufInputStream into account.
Related to https://github.com/netty/netty/pull/9306."
deea51e6093db224878b33eaefc3321f2a0d4a07,"Disable Huffman encoding for small headers (#9260)

Motivation:

Huffman coding saves only a little space, but has a huge CPU cost

Modification:

Disable huff coding for headers smaller than 512 bytes.  Also, add a
configurable limit to the encoder.

Result:

Faster HPACK

BEFORE:
```
Benchmark                     (duplicates)  (limitToAscii)  (sensitive)  (size)  Mode  Cnt       Score       Error  Units
HpackEncoderBenchmark.encode          true            true         true   SMALL  avgt   10    2572.595 ±    16.184  ns/op
HpackEncoderBenchmark.encode          true            true         true  MEDIUM  avgt   10   19580.815 ±   397.780  ns/op
HpackEncoderBenchmark.encode          true            true         true   LARGE  avgt   10  379456.381 ±  2059.919  ns/op
HpackEncoderBenchmark.encode          true            true        false   SMALL  avgt   10     730.579 ±     8.116  ns/op
HpackEncoderBenchmark.encode          true            true        false  MEDIUM  avgt   10    2087.590 ±    84.644  ns/op
HpackEncoderBenchmark.encode          true            true        false   LARGE  avgt   10   11725.228 ±    89.298  ns/op
HpackEncoderBenchmark.encode          true           false         true   SMALL  avgt   10     555.971 ±     5.120  ns/op
HpackEncoderBenchmark.encode          true           false         true  MEDIUM  avgt   10    2831.874 ±    41.801  ns/op
HpackEncoderBenchmark.encode          true           false         true   LARGE  avgt   10   36054.025 ±   179.504  ns/op
HpackEncoderBenchmark.encode          true           false        false   SMALL  avgt   10     340.337 ±     3.313  ns/op
HpackEncoderBenchmark.encode          true           false        false  MEDIUM  avgt   10    1006.817 ±     8.942  ns/op
HpackEncoderBenchmark.encode          true           false        false   LARGE  avgt   10    8784.168 ±   164.014  ns/op
HpackEncoderBenchmark.encode         false            true         true   SMALL  avgt   10    2561.934 ±    27.056  ns/op
HpackEncoderBenchmark.encode         false            true         true  MEDIUM  avgt   10   22061.105 ±   154.533  ns/op
HpackEncoderBenchmark.encode         false            true         true   LARGE  avgt   10  435744.897 ±  8853.388  ns/op
HpackEncoderBenchmark.encode         false            true        false   SMALL  avgt   10    2737.683 ±    47.142  ns/op
HpackEncoderBenchmark.encode         false            true        false  MEDIUM  avgt   10   22385.146 ±    98.430  ns/op
HpackEncoderBenchmark.encode         false            true        false   LARGE  avgt   10  408159.698 ± 12044.931  ns/op
HpackEncoderBenchmark.encode         false           false         true   SMALL  avgt   10     544.213 ±     3.279  ns/op
HpackEncoderBenchmark.encode         false           false         true  MEDIUM  avgt   10    2908.978 ±    31.026  ns/op
HpackEncoderBenchmark.encode         false           false         true   LARGE  avgt   10   36471.262 ±  1044.010  ns/op
HpackEncoderBenchmark.encode         false           false        false   SMALL  avgt   10     609.305 ±     4.371  ns/op
HpackEncoderBenchmark.encode         false           false        false  MEDIUM  avgt   10    3223.946 ±    23.505  ns/op
HpackEncoderBenchmark.encode         false           false        false   LARGE  avgt   10   39975.152 ±   655.196  ns/op
```

AFTER:
```
NEW AFTER

Benchmark                     (duplicates)  (limitToAscii)  (sensitive)  (size)  Mode  Cnt     Score     Error  Units
HpackEncoderBenchmark.encode          true            true         true   SMALL  avgt    5   379.473 ± 133.815  ns/op
HpackEncoderBenchmark.encode          true            true         true  MEDIUM  avgt    5  1118.772 ±  89.258  ns/op
HpackEncoderBenchmark.encode          true            true         true   LARGE  avgt    5  5366.828 ±  89.746  ns/op
HpackEncoderBenchmark.encode          true            true        false   SMALL  avgt    5   284.401 ±   2.088  ns/op
HpackEncoderBenchmark.encode          true            true        false  MEDIUM  avgt    5   922.805 ±  10.796  ns/op
HpackEncoderBenchmark.encode          true            true        false   LARGE  avgt    5  8727.831 ± 462.138  ns/op
HpackEncoderBenchmark.encode          true           false         true   SMALL  avgt    5   337.093 ±  22.585  ns/op
HpackEncoderBenchmark.encode          true           false         true  MEDIUM  avgt    5   693.689 ±  16.351  ns/op
HpackEncoderBenchmark.encode          true           false         true   LARGE  avgt    5  5616.786 ±  98.647  ns/op
HpackEncoderBenchmark.encode          true           false        false   SMALL  avgt    5   286.708 ±  13.765  ns/op
HpackEncoderBenchmark.encode          true           false        false  MEDIUM  avgt    5   906.279 ±  32.338  ns/op
HpackEncoderBenchmark.encode          true           false        false   LARGE  avgt    5  8304.736 ± 128.584  ns/op
HpackEncoderBenchmark.encode         false            true         true   SMALL  avgt    5   351.381 ±  15.547  ns/op
HpackEncoderBenchmark.encode         false            true         true  MEDIUM  avgt    5  1188.166 ±   7.023  ns/op
HpackEncoderBenchmark.encode         false            true         true   LARGE  avgt    5  6876.009 ±  48.117  ns/op
HpackEncoderBenchmark.encode         false            true        false   SMALL  avgt    5   434.759 ±   8.619  ns/op
HpackEncoderBenchmark.encode         false            true        false  MEDIUM  avgt    5   954.588 ±  58.514  ns/op
HpackEncoderBenchmark.encode         false            true        false   LARGE  avgt    5  8534.017 ± 552.597  ns/op
HpackEncoderBenchmark.encode         false           false         true   SMALL  avgt    5   223.713 ±   4.823  ns/op
HpackEncoderBenchmark.encode         false           false         true  MEDIUM  avgt    5  1181.538 ±  11.851  ns/op
HpackEncoderBenchmark.encode         false           false         true   LARGE  avgt    5  6670.830 ± 267.927  ns/op
HpackEncoderBenchmark.encode         false           false        false   SMALL  avgt    5   424.609 ±  27.477  ns/op
HpackEncoderBenchmark.encode         false           false        false  MEDIUM  avgt    5  1003.578 ±  53.991  ns/op
HpackEncoderBenchmark.encode         false           false        false   LARGE  avgt    5  8428.932 ± 102.838  ns/op
```"
18e412195256190f3d4a1d88c0f44608d4fce6ba,"Pre-decompressed DNS record RData that may contain compression pointers (#9311)

Motivation:

When decoding DnsRecord, if the record contains compression pointers, and not all compression pointers are decompressed, but part of the pointers are decompressed. Then when encoding the record, the compressed pointer will point to the wrong location, resulting in bad label problem.

Modification:

Pre-decompressed record RData that may contain compression pointers.

Result:

Fixes #8962"
ff0045e3e10684425a26f5b6cb02223fb0444141,"Use Table lookup for HPACK decoder (#9307)

Motivation:
Table based decoding is fast.

Modification:
Use table based decoding in HPACK decoder, inspired by
https://github.com/python-hyper/hpack/blob/master/hpack/huffman_table.py

This modifies the table to be based on integers, rather than 3-tuples of
bytes.  This is for two reasons:

1.  It's faster
2.  Using bytes makes the static intializer too big, and doesn't
compile.

Result:
Faster Huffman decoding.  This only seems to help the ascii case, the
other decoding is about the same.

Benchmarks:

```
Before:
Benchmark                     (limitToAscii)  (sensitive)  (size)   Mode  Cnt        Score       Error  Units
HpackDecoderBenchmark.decode            true         true   SMALL  thrpt   20   426293.636 ±  1444.843  ops/s
HpackDecoderBenchmark.decode            true         true  MEDIUM  thrpt   20    57843.738 ±   725.704  ops/s
HpackDecoderBenchmark.decode            true         true   LARGE  thrpt   20     3002.412 ±    16.998  ops/s
HpackDecoderBenchmark.decode            true        false   SMALL  thrpt   20   412339.400 ±  1128.394  ops/s
HpackDecoderBenchmark.decode            true        false  MEDIUM  thrpt   20    58226.870 ±   199.591  ops/s
HpackDecoderBenchmark.decode            true        false   LARGE  thrpt   20     3044.256 ±    10.675  ops/s
HpackDecoderBenchmark.decode           false         true   SMALL  thrpt   20  2082615.030 ±  5929.726  ops/s
HpackDecoderBenchmark.decode           false         true  MEDIUM  thrpt   10   571640.454 ± 26499.229  ops/s
HpackDecoderBenchmark.decode           false         true   LARGE  thrpt   20    92714.555 ±  2292.222  ops/s
HpackDecoderBenchmark.decode           false        false   SMALL  thrpt   20  1745872.421 ±  6788.840  ops/s
HpackDecoderBenchmark.decode           false        false  MEDIUM  thrpt   20   490420.323 ±  2455.431  ops/s
HpackDecoderBenchmark.decode           false        false   LARGE  thrpt   20    84536.200 ±   398.714  ops/s

After(bytes):
Benchmark                     (limitToAscii)  (sensitive)  (size)   Mode  Cnt        Score      Error  Units
HpackDecoderBenchmark.decode            true         true   SMALL  thrpt   20   472649.148 ± 7122.461  ops/s
HpackDecoderBenchmark.decode            true         true  MEDIUM  thrpt   20    66739.638 ±  341.607  ops/s
HpackDecoderBenchmark.decode            true         true   LARGE  thrpt   20     3139.773 ±   24.491  ops/s
HpackDecoderBenchmark.decode            true        false   SMALL  thrpt   20   466933.833 ± 4514.971  ops/s
HpackDecoderBenchmark.decode            true        false  MEDIUM  thrpt   20    66111.778 ±  568.326  ops/s
HpackDecoderBenchmark.decode            true        false   LARGE  thrpt   20     3143.619 ±    3.332  ops/s
HpackDecoderBenchmark.decode           false         true   SMALL  thrpt   20  2109995.177 ± 6203.143  ops/s
HpackDecoderBenchmark.decode           false         true  MEDIUM  thrpt   20   586026.055 ± 1578.550  ops/s
HpackDecoderBenchmark.decode           false        false   SMALL  thrpt   20  1775723.270 ± 4932.057  ops/s
HpackDecoderBenchmark.decode           false        false  MEDIUM  thrpt   20   493316.467 ± 1453.037  ops/s
HpackDecoderBenchmark.decode           false        false   LARGE  thrpt   10    85726.219 ±  402.573  ops/s

After(ints):
Benchmark                     (limitToAscii)  (sensitive)  (size)   Mode  Cnt        Score       Error  Units
HpackDecoderBenchmark.decode            true         true   SMALL  thrpt   20   615549.006 ±  5282.283  ops/s
HpackDecoderBenchmark.decode            true         true  MEDIUM  thrpt   20    86714.630 ±   654.489  ops/s
HpackDecoderBenchmark.decode            true         true   LARGE  thrpt   20     3984.439 ±    61.612  ops/s
HpackDecoderBenchmark.decode            true        false   SMALL  thrpt   20   602489.337 ±  5397.024  ops/s
HpackDecoderBenchmark.decode            true        false  MEDIUM  thrpt   20    88399.109 ±   241.115  ops/s
HpackDecoderBenchmark.decode            true        false   LARGE  thrpt   20     3875.729 ±   103.057  ops/s
HpackDecoderBenchmark.decode           false         true   SMALL  thrpt   20  2092165.454 ± 11918.859  ops/s
HpackDecoderBenchmark.decode           false         true  MEDIUM  thrpt   20   583465.437 ±  5452.115  ops/s
HpackDecoderBenchmark.decode           false         true   LARGE  thrpt   20    93290.061 ±   665.904  ops/s
HpackDecoderBenchmark.decode           false        false   SMALL  thrpt   20  1758402.495 ± 14677.438  ops/s
HpackDecoderBenchmark.decode           false        false  MEDIUM  thrpt   10   491598.099 ±  5029.698  ops/s
HpackDecoderBenchmark.decode           false        false   LARGE  thrpt   20    85834.290 ±   554.915  ops/s
```"
1b8247428658600a6d976aabc56f1382cab6c602,"Fix NPE caused by re-entrance calls in FlowControlHandler (#9320)

Motivation:

2c99fc0f1290c65685c5036fdc9884921823ad7d introduced a change that eagly recycles the queue. Unfortunally it did not correct protect against re-entrance which can cause a NPE.

Modifications:

- Correctly protect against re-entrance by adding null checks
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9319."
16b98d370f77b3ff389cbcdffee3b63779f0587a,"Correctly handle http2 upgrades when Http2FrameCodec is used together… (#9318)


Motivation:

In the latest release we introduced Http2MultiplexHandler as a replacement of Http2MultiplexCodec. This did split the frame parsing from the multiplexing to allow a more flexible way to handle frames and to make the code cleaner. Unfortunally we did miss to special handle this in Http2ServerUpgradeCodec and so did not correctly add Http2MultiplexHandler to the pipeline before calling Http2FrameCodec.onHttpServerUpgrade(...). This did lead to the situation that we did not correctly receive the event on the Http2MultiplexHandler and so did not correctly created the Http2StreamChannel for the upgrade stream. Because of this we ended up with an NPE if a frame was dispatched to the upgrade stream later on.

Modifications:

- Correctly add Http2MultiplexHandler to the pipeline before calling Http2FrameCodec.onHttpServerUpgrade(...)
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9314."
707c95e80d60cd83336b5355474676dab7b26e3a,"Use ByteProcessor in HpackHuffmanDecoder to reduce bound-checks and r… (#9317)


Motivation:

ff0045e3e10684425a26f5b6cb02223fb0444141 changed HpackHuffmanDecoder to use a lookup-table which greatly improved performance. We can squeeze out another 3% win by using an ByteProcessor which will reduce the number of bound-checks / reference-count-checks needed by processing byte-by-byte.

Modifications:

Implement logic with ByteProcessor

Result:

Another ~3% perf improvement which shows up when using h2load to simulate load.

`h2load -c 100 -m 100 --duration 60 --warm-up-time 10 http://127.0.0.1:8080`

Before:

```
finished in 70.02s, 620051.67 req/s, 20.70MB/s
requests: 37203100 total, 37203100 started, 37203100 done, 37203100 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 37203100 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 1.21GB (1302108500) total, 41.84MB (43872600) headers (space savings 90.00%), 460.24MB (482598600) data
                     min         max         mean         sd        +/- sd
time for request:      404us     24.52ms     15.93ms      1.45ms    87.90%
time for connect:        0us         0us         0us         0us     0.00%
time to 1st byte:        0us         0us         0us         0us     0.00%
req/s           :    6186.64     6211.60     6199.00        5.18    65.00%
```

With this change:

```
finished in 70.02s, 642103.33 req/s, 21.43MB/s
requests: 38526200 total, 38526200 started, 38526200 done, 38526200 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 38526200 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 1.26GB (1348417000) total, 42.39MB (44444900) headers (space savings 90.00%), 466.25MB (488893900) data
                     min         max         mean         sd        +/- sd
time for request:      370us     24.89ms     15.52ms      1.35ms    88.02%
time for connect:        0us         0us         0us         0us     0.00%
time to 1st byte:        0us         0us         0us         0us     0.00%
req/s           :    6407.06     6435.19     6419.74        5.62    67.00%
```"
a0656d2a31a0c7369a047552978552b807d2a286,"Remove unnecessary code (#9303)

Motivation:

There are is some unnecessary code (like toString() calls) which can be cleaned up.

Modifications:

- Remove not needed toString() calls
- Simplify subString(...) calls
- Remove some explicit casts when not needed.

Result:

Cleaner code"
6da809dc1132da0733a1594c30fe3ac4bf4c139d,"Increase maxHeaderListSize for HpackDecoderBenchmark to be able to be… (#9321)


Motivation:

The previous used maxHeaderListSize was too low which resulted in exceptions during the benchmark run:

```
io.netty.handler.codec.http2.Http2Exception: Header size exceeded max allowed size (8192)
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:103)
	at io.netty.handler.codec.http2.Http2Exception.headerListSizeError(Http2Exception.java:188)
	at io.netty.handler.codec.http2.Http2CodecUtil.headerListSizeExceeded(Http2CodecUtil.java:231)
	at io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink.finish(HpackDecoder.java:545)
	at io.netty.handler.codec.http2.HpackDecoder.decode(HpackDecoder.java:132)
	at io.netty.handler.codec.http2.HpackDecoderBenchmark.decode(HpackDecoderBenchmark.java:85)
	at io.netty.handler.codec.http2.generated.HpackDecoderBenchmark_decode_jmhTest.decode_thrpt_jmhStub(HpackDecoderBenchmark_decode_jmhTest.java:120)
	at io.netty.handler.codec.http2.generated.HpackDecoderBenchmark_decode_jmhTest.decode_Throughput(HpackDecoderBenchmark_decode_jmhTest.java:83)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:748)

```

Also we should ensure we only use ascii for header names.

Modifications:

Just use Integer.MAX_VALUE as limit

Result:

Be able to run benchmark without exceptions"
db8dd66f093b5e54a85e36df0052a0a057adea26,"Reduce object creation on Http2FrameCodec (#9333)

Motivation:

We don't need the extra ChannelPromise when writing headers anymore in Http2FrameCodec. This also means we cal re-use a ChannelFutureListener and so not need to create new instances all the time.

Modifications:

- Just pass the original ChannelPromise when writing headers
- Reuse the ChannelFutureListener

Result:

Two less objects created when writing headers for an not-yet created stream."
91d6e0ea8ff7b076e6b9aeada233c75ced4a59f4,"Simplify HpackHuffmanDecoder table decode logic (#9335)

Motivation

The nice change made by @carl-mastrangelo in #9307 for lookup-table
based HPACK Huffman decoding can be simplified a little to remove the
separate flags field and eliminate some intermediate operations.

Modification

Simplify HpackHuffmanDecoder::decode logic including de-dup of the
per-nibble part.

Result

Less code, possibly better performance though not noticeable in a quick
benchmark."
4312e113168fa15c56c3d0ca40324ce44056d3ca,"DecoratingHttp2ConnectionEncoder.consumeRemoteSettings must not throw if delegate is instance of Http2SettingsReceivedConsumer (#9343)

Motivation:

b3dba317d797e21cc253bb6ad6776307297f612e introduced the concept of Http2SettingsReceivedConsumer but did not correctly inplement DecoratingHttp2ConnectionEncoder.consumeRemoteSettings(...).

Modifications:

- Add missing `else` around the throws
- Add unit tests

Result:

Correctly implement DecoratingHttp2ConnectionEncoder.consumeRemoteSettings(...)"
bded2a1c75b09650425f55a4d476d78a24aaa787,"HTTP2: Always apply the graceful shutdown timeout if configured (#9340)


Motivation:

Http2ConnectionHandler (and sub-classes) allow to configure a graceful shutdown timeout but only apply it if there is at least one active stream. We should always apply the timeout. This is also true when we try to send a GO_AWAY and close the connection because of an connection error.

Modifications:

- Always apply the timeout if one is configured
- Add unit test

Result:

Always respect gracefulShutdownTimeoutMillis"
c0f9364870239b3943a61e41329d88f5d8790a38,"Change the netty.io homepage scheme(http -> https) (#9344)

Motivation:

Netty homepage(netty.io) serves both ""http"" and ""https"".
It's recommended to use https than http.
Modification:

I changed from ""http://netty.io"" to ""https://netty.io""
Result:

No effects."
7fc355aa05b6753cf0bc57ecc8f9504af7182bf4,"Introduce SslMasterKeyHandler (#8653)

Motivation

Debugging SSL/TLS connections through wireshark is a pain -- if the cipher used involves Diffie-Hellman then it is essentially impossible unless you can have the client dump out the master key [1]

This is a work-in-progress change (tests & comments to come!) that introduces a new handler you can set on the SslContext to receive the master key & session id. I'm hoping to get feedback if a change in this vein would be welcomed.

An implementation that conforms to Wireshark's NSS key log[2] file is also included.

Depending on feedback on the PR going forward I am planning to ""clean it up"" by adding documentation, example server & tests. Implementation will need to be finished as well for retrieving the master key from the OpenSSL context.

[1] https://jimshaver.net/2015/02/11/decrypting-tls-browser-traffic-with-wireshark-the-easy-way/
[2] https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format

Modification

- Added SslMasterKeyHandler
- An implementation of the handler that conforms to Wireshark's key log format is included.

Result:

Be able to debug SSL / TLS connections more easily.

Signed-off-by: Farid Zakaria <farid.m.zakaria@gmail.com>"
b02ee1106f81a97334c076e5510d7f90d4f4e224,"feat(example-mqtt): new MQTT heartBeat broker and client examples (#9336)

Motivation:

Recently I'm going to build MQTT broker and client based on Netty. I had MQTT encoder and decoder founded, while no basic examples. So I'm going to share my simple heartBeat MQTT broker and client as an example.

Modification:

New MQTT heartBeat example under io.netty.example/mqtt/heartBeat/.

Result:

Client would send CONNECT and PINGREQ(heartBeat message).
  - CONNECT: once channel active
  - PINGREQ: once IdleStateEvent triggered, which is 20 seconds in this example
Client would discard all messages it received.
MQTT broker could handle CONNECT, PINGREQ and DISCONNECT messages.
  - CONNECT: send CONNACK back
  - PINGREQ: send PINGRESP back
  - DISCONNECT: close the channel
Broker would close the channel if 2 heartBeat lost, which set to 45 seconds in this example."
be26f4e00fe1c7aeaec0356f4f16ea643ca2f6da,"Fixed incorrect Sec-WebSocket-Origin header for v13, see #9134 (#9312)

Motivation:

Based on https://tools.ietf.org/html/rfc6455#section-1.3 - for non-browser
clients, Origin header field may be sent if it makes sense in the context of those clients.

Modification:

Replace Sec-WebSocket-Origin to Origin

Result:

Fixes #9134 ."
5384bbcf851a12c26c8a249310528f22f32ee803,"Epoll: Don't wake event loop when splicing (#9354)

Motivation

I noticed this while looking at something else.
AbstractEpollStreamChannel::spliceQueue is an MPSC queue but only
accessed from the event loop. So it could be just changed to e.g. an
ArrayDeque. This PR instead reverts to using is as an MPSC queue to
avoid dispatching a task to the EL, as appears was the original
intention.

Modification

Change AbstractEpollStreamChannel::spliceQueue to be volatile and lazily
initialized via double-checked locking. Add tasks directly to the queue
from the public methods rather than possibly waking the EL just to
enqueue.

An alternative is just to change PlatformDependent.newMpscQueue() to new
ArrayDeque() and be done with it :)

Result

Less disruptive channel/fd-splicing."
906fc02b3f62c1217405699b42c559803edafe82,"Allow to disable automatically sending PING acks. (#9338)

Motivation:

There are situations where the user may want to be more flexible when to send the PING acks for various reasons or be able to attach a listener to the future that is used for the ping ack. To be able to do so we should allow to manage the acks manually.

Modifications:

- Add constructor to DefaultHttp2ConnectionDecoder that allows to disable the automatically sending of ping acks (default is to send automatically to not break users)
- Add methods to AbstractHttp2ConnectionHandlerBuilder (and sub-classes) to either enable ot disable auto acks for pings
- Make DefaultHttp2PingFrame constructor public that allows to write acks.
- Add unit test

Result:

More flexible way of handling acks."
4f172c13bb25323894e45e3716e049809da14905,"Add deprecation to Http2StreamChannelBootstrap.open0(...) as it was marked as public by mistake (#9372)

Motivation:

Mark Http2StreamChannelBootstrap.open0(...) as deprecated as the user should not use it. It was marked as public by mistake.

Modifications:

Add deprecation warning.

Result:

User will be aware the method should not be used directly."
cd824e4e31564c9544fed57db260937456207dd7,"Cleanup in websockets, throw exception before allocating response if possible (#9361)

Motivation:

While fixing #9359 found few places that could be patched / improved separately.

Modification:

On handshake response generation - throw exception before allocating response objects if request is invalid.

Result:

No more leaks when exception is thrown."
1748352d98af81b195bc867d8e4178dfb2f5b0ad,"Fix epoll spliceTo file descriptor with offset (#9369)

Motivation

The AbstractEpollStreamChannel::spliceTo(FileDescriptor, ...) methods
take an offset parameter but this was effectively ignored due to what
looks like a typo in the corresponding JNI function impl. Instead it
would always use the file's own native offset.

Modification

- Fix typo in netty_epoll_native_splice0() and offset accounting in
AbstractEpollStreamChannel::SpliceFdTask.
- Modify unit test to include an invocation of the public spliceTo
method using non-zero offset.

Result

spliceTo FD methods work as expected when an offset is provided."
306299323cd47fed6d15767291a3d52e48d16786,"Move responsibility for creating upgrade stream to Http2FrameCodec (#9360)

Motivation:

The Http2FrameCodec should be responsible to create the upgrade stream.

Modifications:

Move code to create stream to Http2FrameCodec

Result:

More correct responsibility"
d07d7e2b9a3795139e0b6f64e55f8ed700f8ff5c,"Return null in HttpPostRequestEncoder (#9352)

Motivation:

If the encoded value of a form element happens to exactly hit
the chunk limit (8096 bytes), the post request encoder will
throw a NullPointerException.

Modifications:

Catch the null case and return.

Result:

No NPE."
a82d62ae67f654692206632a6a9d37114a5c5e36,"prefer instanceOf instead of getClass() (#9366)

Motivation:

`instanceOf` doesn't perform null check like `getClass()` does. So `instanceOf` may be faster. However, it not true for all cases, as C2 could eliminate these null checks for `getClass()`.

Modification:

Replaced `string.getClass() == AsciiString.class` with `string instanceof AsciiString`.

Proof:

```
@BenchmarkMode(Mode.Throughput)
@Fork(value = 1)
@State(Scope.Thread)
@Warmup(iterations = 5, time = 1, batchSize = 1000)
@Measurement(iterations = 10, time = 1, batchSize = 1000)
public class GetClassInstanceOf {

    Object key;

    @Setup
    public void setup() {
        key = ""123"";
    }

    @Benchmark
    public boolean getClassEquals() {
        return key.getClass() == String.class;
    }

    @Benchmark
    public boolean instanceOf() {
        return key instanceof String;
    }

}
```

```
Benchmark                           Mode  Cnt       Score      Error  Units
GetClassInstanceOf.getClassEquals  thrpt   10  401863.130 ± 3092.568  ops/s
GetClassInstanceOf.instanceOf      thrpt   10  421386.176 ± 4317.328  ops/s
```"
e8d27560d036e43f28c4591961e86cc83ad347c9,"Use latest OpenJDK13 EA release (#9378)

Motivation:

A new EA release for OpenJDK13 was released

Modifications:

Update EA version

Result:

Use latest OpenJDK 13 EA on ci"
4a3dd23f2f6ca775a4e8f8f03ae96520f1696a32,"Update to adopt@1.8.212-04 (#9384)

Motivation:

We should use latest jdk 1.8 release

Modifications:

Update to adopt@1.8.212-04

Result:

Use latest jdk 1.8 on ci"
e8ab79f34d5a52fde3a2ce510c1af3e8876a07ed,"Add testcase to prove that ET semantics for eventFD are correct (#9385)

Motivation:

We recently made a change to use ET for the eventfd and not trigger a read each time. This testcase proves everything works as expected.

Modifications:

Add testcase that verifies thqat the wakeups happen correctly

Result:

More tests"
dd1785ba66dca72a82ec5e5d2e63498f1f591db0,"Fix an NPE in AbstractHttp2StreamChannel (#9379)


Motivation:

If a read triggers a AbstractHttp2StreamChannel to close we can
get an NPE in the read loop.

Modifications:

Make sure that the inboundBuffer isn't null before attempting to
continue the loop.

Result:

No NPE.
Fixes #9337"
26c3abc63c8318f93e8b8df3b836412c8a0d8920,"Add websocket encoder / decoder in correct order to the pipeline when HttpServerCodec is used (#9386)

Motivation:

We need to ensure we place the encoder before the decoder when doing the websockets upgrade as the decoder may produce a close frame when protocol violations are detected.

Modifications:

- Correctly place encoder before decoder
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9300"
84cf8f14e9466fcd31fe87d47f47c788dd0ef6dc,"Cache the ChannelHandlerContext used in Http2StreamChannelBootstrap (#9382)

Motivation:

At the moment we lookup the ChannelHandlerContext used in Http2StreamChannelBootstrap each time the open(...) method is invoked. This is not needed and we can just cache it for later usage.

Modifications:

Cache ChannelHandlerContext in volatile field.

Result:

Speed up open(...) method implementation when called multiple times"
1e8c0c59f1b80e315b2baeda2d3d4c7d077a0c5a,"Use allocator when constructing ByteBufHolder sub-types or use Unpool… (#9377)


Motivation:

In many places Netty uses Unpooled.buffer(0) while should use EMPTY_BUFFER. We can't change this due to back compatibility in the constructors but can use Unpooled.EMPTY_BUFFER in some cases to ensure we not allocate at all. In others we can directly use the allocator either from the Channel / ChannelHandlerContext or the request / response.

Modification:

- Use Unpooled.EMPTY_BUFFER where possible
- Use allocator where possible

Result:

Fixes #9345 for websockets and http package"
924150198e456189037c9ccd69ca8d22ee03a307,"Update java versions (#9393)

Motivation:

There were new openjdk releases

Modifications:

Update releases to latest

Result:

Use latest openjdk versions on CI"
04afa3a07ee62d6c1eab6ff9e29326d560c2abd2,"Reuse Http2FrameStreamEvent instances to reduce GC pressure (#9392)


Motivation:

We can easily reuse the Http2FrameStreamEvent instances and so reduce GC pressure as there may be multiple events per streams over the life-time.

Modifications:

Reuse instances

Result:

Less allocations"
60cf18cf202726167ec3599cf8986aa37a3b5b74,"HTTP/2 multiplex: Correctly process buffered inbound data even if autoRead is false (#9389)

Motivation:

When using the HTTP/2 multiplex implementation we need to ensure we correctly drain the buffered inbound data even if the RecvByteBufallocator.Handle tells us to stop reading in between.

Modifications:

Correctly loop through the buffered inbound data until the user does stop to request from it.

Result:

Fixes https://github.com/netty/netty/issues/9387.

Co-authored-by: Bryce Anderson <banderson@twitter.com>"
94f3930850b5b40fc020fbedcfbbab8f7d40a0c0,"Recycler availableSharedCapacity will be slowly exhausted due missing reclaimSpace(...) call (#9394)

Motivation:

We did miss to call reclaimSpace(...) in one case which can lead to the situation of having the Recycler to not correctly reclaim space and so just create new objects when not needed.

Modifications:

Correctly call reclaimSpace(...)

Result:

Recycler correctly reclaims space in all situations."
513e9f28938a06ad0a9fc7d25741c90d69661739,"HTTP/2: Ensure newStream() is called only once per connection upgrade and the correct handler is used (#9396)

Motivation:

306299323cd47fed6d15767291a3d52e48d16786 introduced some code change to move the responsibility of creating the stream for the upgrade to Http2FrameCodec. Unfortunaly this lead to the situation of having newStream().setStreamAndProperty(...) be called twice. Because of this we only ever saw the channelActive(...) on Http2StreamChannel but no other events as the mapping was replaced on the second newStream().setStreamAndProperty(...) call.

Beside this we also did not use the correct handler for the upgrade stream in some cases

Modifications:

- Just remove the Http2FrameCodec.onHttpClientUpgrade() method and so let the base class handle all of it. The stream is created correctly as part of the ConnectionListener implementation of Http2FrameCodec already.
- Consolidate logic of creating stream channels
- Adjust unit test to capture the bug

Result:

Fixes https://github.com/netty/netty/issues/9395"
aa032b8aea688b62d494056b900ac4f833048b6b,"Future.java: Fix typos in Javadoc (#9391)


Motivation:

Docs should have no typos

Modifications:

Fix a few typos

Result:

More correct docs."
465c900c0477da3c89727c1a8b05e95a1fcbaff0,[maven-release-plugin] prepare release netty-4.1.38.Final
718b7626e680530aa08be9f643268ef4c5f0b8bc,[maven-release-plugin] prepare for next development iteration
1194577bd053a8906823cf39ecfbb15fa1d9b08e,"Decrease the level of logging in WebSocketFrameEncoder/Decoder (#9415)

Motivation:

Our QA servers are spammed with this messages:

13:57:51.560 DEBUG- Decoding WebSocket Frame opCode=1
13:57:51.560 DEBUG- Decoding WebSocket Frame length=4
I think this is too much info for debug level. It is better to move it to trace level.

Modification:

logger.debug changed to logger.trace for WebSocketFrameEncoder/Decoder

Result:

Less messages in Debug mode."
005fd55b8805ee2d510355395c199bc6a7912cc9,"#7285 Improved ""Discarded inbound message"" warning for embedded channel (#9414)

Motivation:

Look like `EmbeddedChannelPipeline` should also override `onUnhandledInboundMessage(ChannelHandlerContext ctx, Object msg)` in order to do not print ""Discarded message pipeline"" because in case of `EmbeddedChannelPipeline` discarding actually not happens.

This fixes next warning in the latest netty version with websocket and `WebSocketServerCompressionHandler`:

```
13:36:36.231 DEBUG- Decoding WebSocket Frame opCode=2
13:36:36.231 DEBUG- Decoding WebSocket Frame length=5
13:36:36.231 DEBUG- Discarded message pipeline : [JdkZlibDecoder#0, DefaultChannelPipeline$TailContext#0]. Channel : [id: 0xembedded, L:embedded - R:embedded].
```

Modification:

Override correct method

Result:
Follow up fix after https://github.com/netty/netty/pull/9286"
7c5a3c5898b03e839fcbb8e2fd6e7203303b7dfa,"Allow to turn off Utf8FrameValidator creation for websocket with Bina… (#9417)

…ryWebSocketFrames

Motivation:

`Utf8FrameValidator` is always created and added to the pipeline in `WebSocketServerProtocolHandler.handlerAdded` method. However, for websocket connection with only `BinaryWebSocketFrame`'s UTF8 validator is unnecessary overhead. Adding of `Utf8FrameValidator` could be easily avoided by extending of `WebSocketDecoderConfig` with additional property.

Specification requires UTF-8 validation only for `TextWebSocketFrame`.

Modification:

Added `boolean WebSocketDecoderConfig.withUTF8Validator` that allows to avoid adding of `Utf8FrameValidator` during pipeline initialization.

Result:

Less overhead when using only `BinaryWebSocketFrame`within web socket."
17f10d6a924b30245f692d33dd2e3d0aec0a1d6d,"Update os-maven-plugin version to match netty-tcnative (#9409)

Motivation:

Since both projects (to some extend) rely on classifier parsing via the
os-maven-plugin, they should ideally use the same version in case the parsing
changed.

Modifications:

Upgrade os-maven-plugin from 1.6.0 to 1.6.2

Result:

Same os-maven-plugin with same parsing logic."
3f0f322562699a65b4133fdb328075da6670bec3,"Fix native-build/target/lib wanted but build in native-build/target/lib64 (#9410)


Motivation:

On openSUSE (probably more), 64 bit builds use lib64, e.g. /usr/lib64, and
configure picks this up and builds the native library in
native-build/target/lib64 where maven is not looking.

Modifications:

Explicitly specify --libdir=${project.build.directory}/native-build/target/lib
during configuration.

Result:

Maven uses the correct lib directory."
cbc8fc4428e227f01adac3e236d4c1efa89fd0f8,"Fix HttpUtil.getCharset to not throw illegal charset exception (#9439)

Motivation:

If the HttpUtil.getCharset method is called with an illegal charset like
""charset=!illegal!"" it throws an IllegalCharsetNameException. But the javadoc
states, that defaultCharset is returned if incorrect header value. Since the
client sending the request sets the header value this should not crash.

Modification:

HttpUtil.getCharset catches the IllegalCharsetNameException and returns the
defualt value.

Result:

HttpUtil.getCharset does not throw IllegalCharsetNameException any more."
fedcc401966e26296baaeebadd73fad9e0e88ab0,"Fix ByteBufUtil#writeUtf8 subsequence split surrogate edge-case bug (#9437)


Motivation:

#9224 introduced overrides of ByteBufUtil#writeUtf8(...) and related
methods to operate on a sub-CharSequence directly to save having to
allocate substrings, but it missed an edge case where the subsequence
does not extend to the end of the CharSequence and the last char in the
sequence is a high surrogate.

Due to the catch-IndexOutOfBoundsException optimization that avoids an
additional bounds check, it would be possible to read past the specified
end char index and successfully decode a surrogate pair which would
otherwise result in a '?' byte being written.

Modifications:

- Check for end-of-subsequence before reading next char after a high
surrogate is encountered in the
writeUtf8(AbstractByteBuf,int,CharSequence,int,int) and
utf8BytesNonAscii methods
- Add unit test for this edge case

Result:

Bug is fixed.

This removes the bounds-check-avoidance optimization but it does not
appear to have a measurable impact on benchmark results, including when
the char sequence contains many surrogate pairs (which should be rare in
any case)."
b8ac02d8ac11eee1f7b09bd39e872f945b555c01,"Set the ORIGIN header from a custom headers if present (#9435)

Motivation:

Allow to set the ORIGIN header value from custom headers in WebSocketClientHandshaker

Modification:

Only override header if not present already

Result:

More flexible handshaker usage"
bcf6d56b92e74a6340b961154cac4a064196fb5d,"Do not cache local/remote address when creating EpollDatagramChannel with InternetProtocolFamily (#9436)

Motivation:

EpollDatagramChannel#localAddress returns wrong information when
EpollDatagramChannel is created with InternetProtocolFamily,
and EpollDatagramChannel#localAddress is invoked BEFORE the actual binding.

This is a regression caused by change
https://github.com/netty/netty/commit/e17ce934da501788c3737631a02d02ee89ebf9df

Modifications:

EpollDatagramChannel() and EpollDatagramChannel(InternetProtocolFamily family)
do not cache local/remote address

Result:

Rebinding on the same address without ""reuse port"" works
EpollDatagramChannel#localAddress returns correct address"
8d9cea2ce0355c8ae907e164a72885216d1ba4e4,"Try to load native linux libraries with matching classifier first (#9411)

Motivation:

Users' runtime systems may have incompatible dynamic libraries to the ones our
tcnative wrappers link to. Unfortunately, we cannot determine and catch these
scenarios (in which the JVM crashes) but we can make a more educated guess on
what library to load and try to find one that works better before crashing.

Modifications:

1) Build dynamically linked openSSL builds for more OSs (netty-tcnative)
2) Load native linux libraries with matching classifier (first)

Result:

More developers / users can use the dynamically-linked native libraries."
d30212134d81228a05ce84b58b6db059615539b7,"Always wrap X509ExtendedTrustManager when using OpenSSL and JDK < 11 (#9443)

Motivation:

When using OpenSSL and JDK < 11 is used we need to wrap the user provided X509ExtendedTrustManager to be able to support TLS1.3. We had a check in place that first tried to see if wrapping is needed at all which could lead to missleading calls of the user provided trustmanager. We should remove these calls and just always wrap if needed.

Modifications:

Always wrap if OpenSSL + JDK < 11 and TLS1.3 is supported

Result:

Less missleading calls to user provided trustmanager"
e707a62a76eaddb446b0e0913a21a5fc387ec260,"Use delegated docker mount option to speedup builds (#9441)

Motivation:

As we use the docker files for the CI we should use the delegated mount option to speed up builds.

See https://docs.docker.com/docker-for-mac/osxfs-caching/#delegated

Modifications:

Use delegated mount option

Result:

Faster builds when using docker"
6862ab76c017fc4cc796e3e448852e43efa04c77,"Delay Http2ConnectionPrefaceAndSettingsFrameWrittenEvent by one EventLoop tick when using the Http2FrameCodec (#9442)

Motivation:

We should delay the firing of the Http2ConnectionPrefaceAndSettingsFrameWrittenEvent by one EventLoop tick when using the Http2FrameCodec to ensure all handlers are added to the pipeline before the event is passed through it.

This is needed to workaround a race that could happen when the preface is send in handlerAdded(...) but a later handler wants to act on the event.

Modifications:

Offload firing of the event to the EventExecutor.

Result:

Fixes https://github.com/netty/netty/issues/9432."
695aa0959dcc7fb97f6d0e0fa26a45bed32f730a,"Use alloc().heapBuffer(...) to allocate new heap buffer.

Motivation

Underlying array allocations in UnpooledHeapByteBuf are intended be done
via the protected allocateArray(int) method, so that they can be tracked
and/or overridden by subclasses, for example
UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf or #8015. But
it looks like an explicit allocation was missed in the copy(int,int)
method.

Modification

Just use alloc().heapBuffer(...) for the allocation

Result

No possibility of ""missing"" array allocations when ByteBuf#copy is used."
cecb46a3dd1737cef38ae49ad5f57ac7a1b2faaa,"HTTP2: Add protection against remote control frames that are triggered by a remote peer (#9460)

Motivation:

Due how http2 spec is defined it is possible by a remote peer to flood us with frames that will trigger control frames as response, the problem here is that the remote peer can also just stop reading these (while still produce more of these) and so may drive us to the pointer where we either run out of memory or burn all CPU. To protect against this we need to implement some kind of limit that will tear down connections that cause the above mentioned situation.

See CVE-2019-9512 / CVE-2019-9514 / CVE-2019-9515

Modifications:

- Add Http2ControlFrameLimitEncoder which limits the number of queued control frames that were caused because of the remote peer.
- Allow to insert ths Http2ControlFrameLimitEncoder by setting AbstractHttp2ConnectionBuilder.encoderEnforceMaxQueuedControlFrames(...) to a number higher then 0. The default is 10000 which provides some protection by default but will hopefully not cause too many false-positives.
- Add unit tests

Result:

Protect against DDOS due control frames. Fixes CVE-2019-9512 / CVE-2019-9514 / CVE-2019-9515 ."
7003dbdc0801fd65b75700acb2cf77044075ff8c,"HTTP2: Guard against empty DATA frames (without end_of_stream flag) set (#9461)

Motivation:

It is possible for a remote peer to flood the server / client with empty DATA frames (without end_of_stream flag) set and so cause high CPU usage without the possibility to ever hit a limit. We need to guard against this.

See CVE-2019-9518

Modifications:

- Add a new config option to AbstractHttp2ConnectionBuilder and sub-classes which allows to set the max number of consecutive empty DATA frames (without end_of_stream flag). After this limit is hit we will close the connection. A limit of 10 is used by default.
- Add unit tests

Result:

Guards against CVE-2019-9518"
88c2a4cab5add947df50884a6e787f8dff3d85f7,[maven-release-plugin] prepare release netty-4.1.39.Final
d45a4ce01b8e2aa4671b411018ea8e595b3fa16f,[maven-release-plugin] prepare for next development iteration
ac939e22dcbee3bf92e45757e8006dee82b7cd75,"Use OpenJDK13 RC (#9457)

Motivation:

The first release canidate for OpenJDK13 was released.

Modifications:

Update version.

Result:

Use latest OpenJDK13 release"
1fa7a5e697825bdd2f5ad7885b64749ede5c3192,"EPOLL - decouple schedule tasks from epoll_wait life cycle (#7834)


Motivation:
EPOLL supports decoupling the timed wakeup mechanism from the selector call. The EPOLL transport takes advantage of this in order to offer more fine grained timer resolution. However we are current calling timerfd_settime on each call to epoll_wait and this is expensive. We don't have to re-arm the timer on every call to epoll_wait and instead only have to arm the timer when a task is scheduled with an earlier expiration than any other existing scheduled task.

Modifications:
- Before scheduled tasks are added to the task queue, we determine if the new
  duration is the soonest to expire, and if so update with timerfd_settime. We
also drain all the tasks at the end of the event loop to make sure we service
any expired tasks and get an accurate next time delay.
- EpollEventLoop maintains a volatile variable which represents the next deadline to expire. This variable is modified inside the event loop thread (before calling epoll_wait) and out side the event loop thread (immediately to ensure proper wakeup time).
- Execute the task queue before the schedule task priority queue. This means we
  may delay the processing of scheduled tasks but it ensures we transfer all
pending tasks from the task queue to the scheduled priority queue to run the
soonest to expire scheduled task first.
- Deprecate IORatio on EpollEventLoop, and drain the executor and scheduled queue on each event loop wakeup. Coupling the amount of time we are allowed to drain the executor queue to a proportion of time we process inbound IO may lead to unbounded queue sizes and unpredictable latency.

Result:
Fixes https://github.com/netty/netty/issues/7829
- In most cases this results in less calls to timerfd_settime
- Less event loop wakeups just to check for scheduled tasks executed outside the event loop
- More predictable executor queue and scheduled task queue draining
- More accurate and responsive scheduled task execution"
1cce3b1ac9293940a1731ea31455d538631b6329,"Fix ByteBuf leak in Http2ControlFrameLimitEncoderTest (#9466)

Motivation:

We recently introduced Http2ControlFrameLimitEncoderTest which did not correctly notify the goAway promises and so leaked buffers.

Modifications:

Correctly notify all promises and so release the debug data.

Result:

Fixes leak in HTTP2 test"
299954e13879851c664159ac0e907049dcca53a8,"Correctly respect mask parameters in all WebSocketClientHandshakerFactory#newHandshaker(...) methods (#9464)

Motivation:

We did not correctly pass the mask parameters in all cases.

Modifications:

Correctly pass on parameters

Result:

Fixes https://github.com/netty/netty/issues/9463."
04d71b3773a0036e60498408f368e552ff52ca8b,"DnsNameResolverTest.testTruncated0(...) should only close socket once envelope is received (#9469)

Motivation:

We should only ever close the underlying tcp socket once we received the envelope to ensure we never race in the test.

Modifications:

- Only close socket once we received the envelope
- Set REUSE_ADDR

Result:

More robust test"
d4038d09377ed63edc9129a5768d3d31d26f9242,"Http2EmptyDataFrameConnectionDecoder.frameListener() should return unwrapped Http2FrameListener (#9467)

Motivation:

As we decorate the Http2FrameListener under the covers we should ensure the user can still access the original Http2FrameListener.

Modifications:

- Unwrap the Http2FrameListener in frameListener()
- Add unit test

Result:

Less suprises for users."
9ec3411c91bdc50e78f3d50b393ab815d2be0f92,"Fix possible NPE when using HttpClientCodec (#9465)


Motivation:

It was possible to produce a NPE when we for examples received more responses as requests as we did not check if the queue did not contain a method before trying to compare method names.

Modifications:

- Add extra null check
- Add unit tet

Result:

Fixes https://github.com/netty/netty/issues/9459"
4db38b4e0c734b9cdaf0591dd0c5b3f4d4f11ea4,"Don't zero non-readable buffer regions when capacity is decreased (#9427)

Motivation

#1802 fixed ByteBuf implementations to ensure that the whole buffer
region is preserved when capacity is increased, not just the readable
part. The behaviour is still different however when the capacity is
_decreased_ - data outside the currently-readable region is zeroed.

Modifications

Update ByteBuf capacity(int) implementations to also copy the whole
buffer region when the new capacity is less than the current capacity.

Result

Consistent behaviour of ByteBuf#capacity(int) regardless of whether the
new capacity is greater than or less than the current capacity."
bcad76e2db425fc319d881c1ad1041226c536c92,"HTTP2: Update local flow-controller on Channel.read() if needed (#9400)

Motivation:

We should better update the flow-controller on Channel.read() to reduce overhead and memory overhead.

See https://github.com/netty/netty/pull/9390#issuecomment-513008269

Modifications:

Move updateLocalWindowIfNeeded() to doBeginRead()

Result:

Reduce memory overhead"
10eb2cd2e612b1ba8ff502322ce5f0a8915fc34e,"Cleanup docker / docker-compose configs (#9473)

Motivation:

We should use the same java versions whenever we use CentOS 6 or 7 and also use the latest Java12 version

Modifications:

- Use same Java versions
- Use latest Java 12 version
- Remove old configs which are not used anymore

Result:

Docker cleanup"
97361fa2c89da57e88762aaca9e2b186e8c148f5,"Replace synchronized usage with ConcurrentHashMap in *Bootstrap classes (#9458)


Motivation:

In AbstractBoostrap, options and attrs are LinkedHashMap that are synchronized on for every read, copy/clone, write operation.
When a lot of connections are triggered concurrently on the same bootstrap instance, the synchronized blocks lead to contention, Netty IO threads get blocked, and performance may be severely degraded.

Modifications:

Use ConcurrentHashMap

Result:

Less contention. Fixes https://github.com/netty/netty/issues/9426"
d8e59ca638b8aa4fe4d18c52c70bd92a0150de58,"Avoid creating FileInputStream and FileOutputStream for obtaining Fil… (#8110)

Motivation:

If all we need is the FileChannel we should better use RandomAccessFile as FileInputStream and FileOutputStream use a finalizer.

Modifications:

Replace FileInputStream and FileOutputStream with RandomAccessFile when possible.

Result:

Fixes https://github.com/netty/netty/issues/8078."
8a082532f2c9464aa23b4edfd6caa427cc4dd779,"AsciiString contentEqualsIgnoreCase fails when arrayOffset is non-zero (#9477)

Motivation:

AsciiString.contentEqualsIgnoreCase may return true for non-matching strings of equal length when offset is non zero.

Modifications:

- Correctly take offset into account
- Add unit test

Result: 

Fixes #9475"
d0bfbdde8ee3a5ae19506890b034baf3b77a3471,"Detect truncated responses caused by EDNS0 and MTU miss-match (#9468)

Motivation:

It is possible that the user uses a too big EDNS0 setting for the MTU and so we may receive a truncated datagram packet. In this case we should try to detect this and retry via TCP if possible

Modifications:

- Fix detecting of incomplete records
- Mark response as truncated if we did not consume the whole packet
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9365"
839aab855844e23f0f0d394155baa2d0d63507ff,"Ensure we replace WebSocketServerProtocolHandshakeHandler before doing the handshake (#9472)

Motivation:

We need to ensure we replace WebSocketServerProtocolHandshakeHandler before doing the actual handshake as the handshake itself may complete directly and so forward pending bytes through the pipeline.

Modifications:

Replace the handler before doing the actual handshake.

Result:

Fixes https://github.com/netty/netty/issues/9471."
873988676a2b1bb9cc6e5c1a80e5b27725b1d75c,"Epoll: Avoid redundant EPOLL_CTL_MOD calls (#9397)

Motivation

Currently an epoll_ctl syscall is made every time there is a change to
the event interest flags (EPOLLIN, EPOLLOUT, etc) of a channel. These
are only done in the event loop so can be aggregated into 0 or 1 such
calls per channel prior to the next call to epoll_wait.

Modifications

I think further streamlining/simplification is possible but for now I've
tried to minimize structural changes and added the aggregation beneath
the existing flag manipulation logic.

A new AbstractChannel#activeFlags field records the flags last set on
the epoll fd for that channel. Calls to setFlag/clearFlag update the
flags field as before but instead of calling epoll_ctl immediately, just
set or clear a bit for the channel in a new bitset in the associated
EpollEventLoop to reflect whether there's any change to the last set
value.

Prior to calling epoll_wait the event loop makes the appropriate
epoll_ctl(EPOLL_CTL_MOD) call once for each channel who's bit is set.

Result

Fewer syscalls, particularly in some auto-read=false cases. Simplified
error handling from centralization of these calls."
9e2922b04d2901647b717232ed8fa1745bdbe0df,"Fix unexpected IllegalReferenceCountException on decode multipart request. (#8575)

Motivation:

Http post request may be encoded as 'multipart/form-data' without any files and consist mixed attributes only.

Modifications:

- Do not double release attributes
- Add unit test

Result:

Code does not throw an IllegalReferenceCountException."
14607979f6db074247d764cc4583461bcd298719,"Add tests for using Amazon Corretto Crypto Provider with Netty (#9480)


Motivation:

Amazon lately released Amazon Corretto Crypto Provider, so we should include it in our testsuite

Modifications:

Add tests related to Amazon Corretto Crypto Provider

Result:

Test netty with Amazon Corretto Crypto Provider"
cb739b26194ebaf89f99d83bc6c573723a225173,"Update javadoc for NioEventLoop.setRatio() #9481 (#9484)

Motivation:

Improve java apidoc for NioEventLoop.setRatio

Modification:

javadoc

Result:

Fixes #9481"
a22d4ba859b115d353b4cea1af581b987249adf6,"Simplify EventLoop abstractions for timed scheduled tasks (#9470)


Motivation

The epoll transport was updated in #7834 to decouple setting of the
timerFd from the event loop, so that scheduling delayed tasks does not
require waking up epoll_wait. To achieve this, new overridable hooks
were added in the AbstractScheduledEventExecutor and
SingleThreadEventExecutor superclasses.

However, the minimumDelayScheduledTaskRemoved hook has no current
purpose and I can't envisage a _practical_ need for it. Removing
it would reduce complexity and avoid supporting this specific
API indefinitely. We can add something similar later if needed
but the opposite is not true.

There also isn't a _nice_ way to use the abstractions for
wakeup-avoidance optimizations in other EventLoops that don't have a
decoupled timer.

This PR replaces executeScheduledRunnable and
wakesUpForScheduledRunnable
with two new methods before/afterFutureTaskScheduled that have slightly
different semantics:
 - They only apply to additions; given the current internals there's no
practical use for removals
 - They allow per-submission wakeup decisions via a boolean return val,
which makes them easier to exploit from other existing EL impls (e.g.
NIO/KQueue)
 - They are subjectively ""cleaner"", taking just the deadline parameter
and not exposing Runnables
 - For current EL/queue impls, only the ""after"" hook is really needed,
but specialized blocking queue impls can conditionally wake on task
submission (I have one lined up)

Also included are further optimization/simplification/fixes to the
timerFd manipulation logic.

Modifications

- Remove AbstractScheduledEventExecutor#minimumDelayScheduledTaskRemoved()
and supporting methods
- Uplift NonWakeupRunnable and corresponding default wakesUpForTask()
impl from SingleThreadEventLoop to SingleThreadEventExecutor
- Change executeScheduledRunnable() to be package-private, and have a
final impl in SingleThreadEventExecutor which triggers new overridable
hooks before/afterFutureTaskScheduled()
- Remove unnecessary use of bookend tasks while draining the task queue
- Use new hooks to add simpler wake-up avoidance optimization to
NioEventLoop (primarily to demonstrate utility/simplicity)
- Reinstate removed EpollTest class

In EpollEventLoop:
 - Refactor to use only the new afterFutureTaskScheduled() hook for
updating timerFd
 - Fix setTimerFd race condition using a monitor
 - Set nextDeadlineNanos to a negative value while the EL is awake and
use this to block timer changes from outside the EL. Restore the
known-set value prior to sleeping, updating timerFd first if necessary
 - Don't read from timerFd when processing expiry event

Result

- Cleaner API for integrating with different EL/queue timing impls
- Fixed race condition to avoid missing scheduled wakeups
- Eliminate unnecessary timerFd updates while EL is awake, and
unnecessary expired timerFd reads
- Avoid unnecessary scheduled-task wakeups when using NIO transport

I did not yet further explore the suggestion of using
TFD_TIMER_ABSTIME for the timerFd."
3f6762ec9c2b4d631f84efc88be5880e79e365bb,"Use same JDK SSL test workaround when using ACCP as when just using the JDK SSL implementation (#9490)

Motivation:

14607979f6db074247d764cc4583461bcd298719 added tests for using ACCP but did miss to use the same unwrapping technique of exceptions as JdkSslEngineTest. This can lead to test-failures on specific JDK versions

Modifications:

Add the same unwrapping code

Result:

No more test failures"
85fcf4e58164806645b79239d0e6bf00287e26dc,"Use `AppendableCharSequence.charAtUnsafe(int)` in `HttpObjectDecoder` (#9492)

Motivation:

`HttpObjectDecoder` pre-checks that it doesn't request characters
outside of the `AppendableCharSequence`'s length. `0` is always allowed
because the minimal length of `AppendableCharSequence` is `1`. We can
legally skip index check by using
`AppendableCharSequence.charAtUnsafe(int)` in all existing cases in
`HttpObjectDecoder`.

Modifications:

- Use `AppendableCharSequence.charAtUnsafe(int)` instead of
`AppendableCharSequence.charAt(int)` in `HttpObjectDecoder`.

Result:

No unnecessary index checks in `HttpObjectDecoder`."
9fa974f6a5fa4d90fc13572c92d94e0681db4570,"Update links to the latest HTTP/2 specifications (#9493)

Motivation:

Some of the links in javadoc point to the obsolete drafts of HTTP/2
specifications. We should point them to the latest RFC 7540 or 7541.

Modifications:

Update links from `draft-ietf-httpbis-*` to the `rfc7540` and `rfc7541`.

Result:

Correct links in javadoc."
d9d39f1394d9e2bd466ccaa425a18d56a49283c8,"Include c source files in source jar (#9497)

Motivation:

We should not only include the java source files but also the c source file in our source jars.

Modifications:

Add files from src/main/c as well

Result:

Fixes https://github.com/netty/netty/issues/9494"
14e856ac722cab5060a273b007c7c577f9e13e14,"Correctly handle client side http2 upgrades when Http2FrameCodec …(9495) (#9501)


Motivation:

In the release (4.1.37) we introduced Http2MultiplexHandler as a
replacement of Http2MultiplexCodec. This did split the frame parsing from
the multiplexing to allow a more flexible way to handle frames and to make
the code cleaner. Unfortunally we did miss to special handle this in
Http2ClientUpgradeCodec and so did not correctly add Http2MultiplexHandler
to the pipeline before calling Http2FrameCodec.onHttpClientUpgrade(...).
This did lead to the situation that we did not correctly receive the event
on the Http2MultiplexHandler and so did not correctly created the
Http2StreamChannel for the upgrade stream. Because of this we ended up
with an NPE if a frame was dispatched to the upgrade stream later on.

Modifications:

- Correctly add Http2MultiplexHandler to the pipeline before calling Http2FrameCodec.onHttpClientUpgrade(...)

Result:

Fixes #9495."
da2aba574239367f2641cb7b0802840739e61520,"Reduce GC produced by AbstractByteBuf.indexOf(..) implementation (#9502)


Motivation:

AbstractByteBuf.indexOf(...) currently delegates to ByteBufUtils.indexOf(...) which will create a new ByteBufProcessor on each call. This is done to reduce overhead of bounds-checks. Unfortunally while this reduces bounds checks it produces a lot of GC. We can just implement our own version in AbstractByteBuf which makes use of _getByte(...) and so does no bound checks as well but also not need to create any garbage.

Modifications:

Write optimized implementation of indexOf(...) for AbstractByteBuf

Result:

Fixes https://github.com/netty/netty/issues/9499."
1a22c126be73b6898caea5e59018f1c28ed86b11,"Fix log format in HashedWheelTimer (#9507)


Motivation:

log message did not correctly use `{}`

Modification:

replace `%d` by `{}`

Result:

The log is correct."
4c14fa5c54b80051767b2c3aed86030e224ad4d0,"Correctly pass all parameters in WebSocketServerProtocolHandler constructor (#9506)

Motivation:

We did not correctly pass all supplied parameters to the called constructor and so did not apply the timeout.

Modification:

Correctly pass on the parameters.

Result:

Use timeout"
a89cde947558c74281c3616862967e5b5cd2e260,"Support cancellation in the Http2StreamChannelBootstrap (#9519)

Motivation:

Right now you can cancel the Future returned by
`Http2StreamChannelBootstrap.open()` and that will race with the
registration of the stream channel with the event loop, potentially
culminating in an `IllegalStateException` and potential resource leak.

Modification:

Ensure that the returned promise is uncancellable.

Result:

Should no longer see `IllegalStateException`s."
68673b652e422df6db462afb8c8f3ce9413c5c90,"Do not try to retrieve domain search list via reflection hack on windows when using Java9 and later (#9511)

Motivation:

We currently try to access the the domain search list via reflection on windows which will print a illegal access warning when using Java9 and later.

Modifications:

Add a guard against the used java version.

Result:

Fixes https://github.com/netty/netty/issues/9500."
cfcf20aecc19ce8f0c0885e28a46c0d61ea7510f,"Include native-image properties in the netty-all jar (#9518)

Motivation:

We need to also include the native-image configuration files in the netty all jar to be able to use it with GraalVM native.

Modifications:

Add files in META-INF/native-image as well

Result:

Fixes https://github.com/netty/netty/issues/9514"
491b1f428b00bba45a2c51d171cf819704b0fbe6,"Fix sending an empty String like """" causes an error #9429 (#9512)

Motivation:

Handle https://tools.ietf.org/html/rfc7692#section-7.2.3.6

Result:

The empty buffer is correctly handled in deflate  encoder/decoder.

 Fixes #9429 ."
95527eec91bd10d38cb85a73b44abf09e72cdd75,"HttpPostStandardRequestDecoder leaks memory when constructor throws ErrorDataDecoderException. (#9517)

Motivation:

Currently when HttpPostStandardRequestDecoder throws a ErrorDataDecoderException during construction we leak memory. We need to ensure all is released correctly.

Modifications:

- Call destroy() if parseBody() throws and rethrow the ErrorDataDecoderException
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9513."
b7e9829a492d26c5b981575367c2c032d4f05863,"Update GraalVM Native Image configuration. (#9515)

Motivation:

The Netty classes are initialized at build time by default for GraalVM Native Image compilation. This is configured via the `--initialize-at-build-time=io.netty` option. While this reduces start-up time it can lead to some problems:

 - The class initializer of `io.netty.buffer.PooledByteBufAllocator` looks at the maximum memory size to compute the size of internal buffers. If the class initializer runs during image generation, then the buffers are sized according to the very large heap size that the image generator uses, and Netty allocates several arrays that are 16 MByte. The fix is to initialize the following 3 classes at run time: `io.netty.buffer.PooledByteBufAllocator,io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBufUtil`. This fix was dependent on a GraalVM Native Image fix that was included in 19.2.0.

 - The class initializer of `io.netty.handler.ssl.util.ThreadLocalInsecureRandom` needs to be initialized at runtime to ensure that the generated values are trully random and not fixed for each generated image.

 - The class initializers of `io.netty.buffer.AbstractReferenceCountedByteBuf` and `io.netty.util.AbstractReferenceCounted` compute field offsets. While the field offset recomputation is necessary for correct execution as a native image these initializers also have logic that depends on the presence/absence of `sun.misc.Unsafe`, e.g., via the `-Dio.netty.noUnsafe=true` flag. The fix is to push these initializers to runtime so that the field offset lookups (and the logic depending on them) run at run time. This way no manual substitutions are necessary either.
 
Modifications:

Add `META-INF/native-image` configuration files that correctly trigger the inialization of the above classes at run time via `--initialize-at-run-time=...` flags.
 
Result:

Fixes the initialisation issues described above for Netty executables built with GraalVM."
291f80733ac84a2a45301bffc946e4c5522cd558,"Use byte[] to create DatagramSocketAddress and so reduce overhead (#9516)

Motivation:

At the moment we use the String representation of the IP to create the DatagramSocketAddress. This is not for free and we should better use the byte[] directly to reduce the overhead of parsing the String (and creating it in the first place)

Modifications:

Directly use byte[] as input for the DatagramSocketAddress

Result:

Less overhead when using Datagrams with native transports"
21b7e29ea7c211bb2b889bae3a0c6c5d9f60fb01,"Remove extra checks to fix #9456 (#9523)

Motivation:

There are some extra log level checks (logger.isWarnEnabled()).

Modification:

Remove log level checks (logger.isWarnEnabled()) from io.netty.channel.epoll.AbstractEpollStreamChannel, io.netty.channel.DefaultFileRegion, io.netty.channel.nio.AbstractNioChannel, io.netty.util.HashedWheelTimer, io.netty.handler.stream.ChunkedWriteHandler and io.netty.channel.udt.nio.NioUdtMessageConnectorChannel

Result:

Fixes #9456"
1039f69e53792ff58f3f61f5ab6f7b89ef1fecf0,"Fix for incorrect values from CompositeByteBuf#component(int) (#9525)

Motivation

This is a ""simpler"" alternative to #9416 which fixes the same
CompositeByteBuf bugs described there, originally reported by @jingene
in #9398.

Modifications
- Add fields to Component class for the original buffer along with its
adjustment, which may be different to the already-stored unwrapped
buffer. Use it in appropriate places to ensure correctness and
equivalent behaviour to that prior to the earlier optimizations
- Add comments explaining purpose of each of the Component fields
- Unwrap more kinds of buffers in newComponent method to extend scope of
the existing indirection-reduction optimization
- De-duplicate common buffer consolidation logic
- Unit test for the original bug provided by @jingene

Result
- Correct behaviour / fixed bugs
- Some code deduplication / simplification
- Unwrapping optimization applied to more types of buffers

The downside is increased mem footprint from the two new fields, and
additional allocations in some specific cases, though those should be
rare.


Co-authored-by: jingene <jingene0206@gmail.com>"
affbdf712501203696d9c7a9657c74127043a7d2,"Correctly protect DefaultChannelPipeline nodes when concurrent removals happen due handlerAdded(...) throwing (#9530)

Motivation:

We need to update the doubly-linked list nodes while holding a lock via synchronized in all cases as otherwise we may end-up with a corrupted pipeline. We missed this when calling remove0(...) due handlerAdded(...) throwing an exception.

Modifications:

- Correctly hold lock while update node
- Add assert
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9528"
394a1b3485000c211595aff7495c4f863972af29,"Add support for recvmmsg when using epoll transport (#9509)

Motivation:

When using datagram sockets which need to handle a lot of packets it makes sense to use recvmmsg to be able to read multiple datagram packets with one syscall.

Modifications:

- Add support for recvmmsg on linux
- Add new EpollChannelOption.MAX_DATAGRAM_PACKET_SIZE
- Add tests

Result:

Fixes https://github.com/netty/netty/issues/8446."
2123fbe495cc86b5a8203a0452ecdd0e5ec8d7c3,"Close eventfd shutdown/wakeup race by closely tracking epoll edges (#9535)

Motivation

This is another iteration of #9476.

Modifications

Instead of maintaining a count of all writes performed and then using
reads during shutdown to ensure all are accounted for, just set a flag
after each write and don't reset it until the corresponding event has
been returned from epoll_wait.

This requires that while a write is still pending we don't reset
wakenUp, i.e. continue to block writes from the wakeup() method.

Result

Race condition eliminated. Fixes #9362"
d446765b8469ca40db40f46e5c637d980b734a8a,"Replace synchronized blocks + assert with synchronized method (#9538)

Motivation:

Following up on discussion with @normanmaurer with suggestion to improve code clarity.

Modification:

Method is synchronized, no need for assert or verbose sync blocks around calls.

Result:

Reduce verbosity and more idiomatic use of keyword. Also rename the method to better describe what it's for."
768a8250353d5ab3664f5382b57d0c19a256d68d,"Avoid CancellationException construction in DefaultPromise (#9534)

Motivation

#9152 reverted some static exception reuse optimizations due to the
problem with Throwable#addSuppressed() raised in #9151. This introduced
a performance issue when promises are cancelled at a high frequency due
to the construction cost of CancellationException at the time that
DefaultPromise#cancel() is called.

Modifications

- Reinstate the prior static CANCELLATION_CAUSE_HOLDER but use it just
as a sentinel to indicate cancellation, constructing a new
CancellationException only if/when one needs to be explicitly
returned/thrown
- Subclass CancellationException, overriding fillInStackTrace() to
minimize the construction cost in these cases

Result

Promises are much cheaper to cancel. Fixes #9522."
6fc7c589f023b069ac5f4df8a6766f0b501487fb,"Correctly handle ipv6 mapped ipv4 addresses when using recvmmsg (#9541)


Motivation:

394a1b3485000c211595aff7495c4f863972af29 introduced the possibility to use recvmmsg(...) but did not correctly handle ipv6 mapped ip4 addresses to make it consistent with other transports.

Modifications:

- Correctly handle ipv6 mapped ipv4 addresses by only copy over the relevant bytes
- Small improvement on how to detect ipv6 mapped ipv4 addresses by using memcmp and not byte by byte compare
- Adjust test to cover this bug

Result:

Correctly handle ipv6 mapped ipv4 addresses"
7b7f319fecc666fcf67f78470abf919643449579,"Also support sendmmsg(...)  on connected UDP channels when using native epoll transport (#9536)

Motivation:

We should also use sendmmsg on connected channels whenever possible to reduce the overhead of syscalls.

Modifications:

No matter if the channel is connected or not try to use sendmmsg when supported to reduce the overhead of syscalls

Result:

Better performance on connected UDP channels due less syscalls"
6bc2da614152b0b91322242dec00c27e25d1ad29,"Add support for recvmmsg(...) even with connected datagram channels w… (#9539)


Motivation:

394a1b3485000c211595aff7495c4f863972af29 added support for recvmmsg(...) for unconnected datagram channels, this change also allows to use recvmmsg(...) with connected datagram channels.

Modifications:

- Always try to use recvmmsg(...) if configured to do so
- Adjust unit test to cover it

Result:

Less syscalls when reading datagram packets"
572b6a8f196ad619859ab0a4bd391a7c405d5f2a,"SimpleChannelPool POOL_KEY attribute name is easy to get conflict from user code (#9542) (#9548)

Motivation:

    It is noticed that SimpleChannelPool's POOL_KEY attribute name channelPool is easy to get conflict with user code and throws an exception 'channelPool' is already in use. Being a generic framework - it would be great if we can name the attribute something unique - may be use UUID for the name since the name is not required later.

    Modifications:

    This change make sure that the POOL_KEY used inside SimpleChannelPool is unique by appending the object hashcode in the name.

    Result:

    No unwanted channel attribute name conflict with user code."
629eae20823a44618e8684c4accc954756ea2a11,"Avoid redundant volatile read in DefaultPromise#get() (#9547)

Motivation

Currently every call to get() on a promise results in two reads of the
volatile result field when one would suffice. Maybe this is optimized
away but it seems sensible not to rely on that.

Modification

Reimplement get() and get(...) in DefaultPromise to reduce volatile access.

Result

Fewer volatile reads."
454cc80141172ec7c6fbc98b8e249ca7645fa27e,"Fix WriteTimeoutException java doc description (#9554)

Motivation:

The java doc doesn't match the real case: The exception only happen when a write operation
 cannot finish in a certain period of time instead of write idle happen.

Modification:

Correct java doc

Result:
java doc matched the real case"
3e3a748eb6ac80c52792519a99b6bfef7522f22d,"SocksAuthRequest constructor occasionally throws IllegalStateException (#9558)

Motivation:

There appears to be a thread-safety issue in the way that `SocksAuthRequest` is using its `CharsetEncoder` instance.  `CharsetUtil#encoder` returns a cached thread-local encoder instance, so it is not correct to store this instance in a static member variable and reuse it across multiple threads.  The result is an occasional `IllegalStateException` as in the following example:

```
java.lang.IllegalStateException: Current state = RESET, new state = FLUSHED
	at java.base/java.nio.charset.CharsetEncoder.throwIllegalStateException(CharsetEncoder.java:989)
	at java.base/java.nio.charset.CharsetEncoder.flush(CharsetEncoder.java:672)
	at java.base/java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:801)
	at java.base/java.nio.charset.CharsetEncoder.canEncode(CharsetEncoder.java:907)
	at java.base/java.nio.charset.CharsetEncoder.canEncode(CharsetEncoder.java:982)
	at io.netty.handler.codec.socks.SocksAuthRequest.<init>(SocksAuthRequest.java:43)
```

Modification:

Instead of retrieving the thread-local encoder instance once and storing it as a static member instance, the encoder should be retrieved each time the constructor is invoked.  This change prevents any potential concurrency issues where multiple threads may end up using the same encoder instance.

Result:

Fixes #9556."
bcb0d0224895ea40d64d9de12263c6fcc85cde27,"Fix HttpContentEncoder does not handle multiple Accept-Encoding  (#9557)

Motivation:
At the current moment HttpContentEncoder handle only first value of multiple accept-encoding headers.

Modification:

Join multiple accept-encoding headers to one separated by comma.

Result:

Fixes #9553"
7a547aab65b15a4d4dcaf3a39666d0b6b89fd1ed,"Correctly handle IPV6-mapped-IPV4 addresses in native code when receiving datagrams (#9560)

Motivation:

291f80733ac84a2a45301bffc946e4c5522cd558 introduced a change to use a byte[] to construct the InetAddress when receiving datagram messages to reduce the overhead. Unfortunally it introduced a regression when handling IPv6-mapped-IPv4 addresses and so produced an IndexOutOfBoundsException when trying to fill the byte[] in native code.

Modifications:

- Correctly use the offset on the pointer of the address.
- Add testcase
- Make tests more robust and include more details when the test fails

Result:

No more IndexOutOfBoundsException"
267e5da48110fff014d3b62ca1968772fc87f1eb,[maven-release-plugin] prepare release netty-4.1.40.Final
aef47bec7f0f72d104bf3525aded05d0b8c8e499,[maven-release-plugin] prepare for next development iteration
8280252d0e80e5e844215234732a7cda4862e260,"Revert ""Close eventfd shutdown/wakeup race by closely tracking epoll edges (#9535)""

This reverts commit 2123fbe495cc86b5a8203a0452ecdd0e5ec8d7c3."
b409f8e7fa70da80d9801737e051c860aa979f13,"Revert ""Epoll: Avoid redundant EPOLL_CTL_MOD calls (#9397)""

This reverts commit 873988676a2b1bb9cc6e5c1a80e5b27725b1d75c."
7f391426a2179d3c68e3a116567aa9a0aaf0524c,"Revert changes in EpollEventLoop that were done recently and did cause various problems in different testsuites.

Motivation:

Changes that were done to the EpollEventLoop to optimize some things did break some testsuite and caused timeouts. We need to investigate to see why this is the case but for
now we should just revert so we can do a release.

Modifivations:

- Partly revert 1fa7a5e697825bdd2f5ad7885b64749ede5c3192 and a22d4ba859b115d353b4cea1af581b987249adf6

Result:

Testsuites pass again."
7cf69022d48d123ac9f2920729613766f08f0874,[maven-release-plugin] prepare release netty-4.1.41.Final
01d805bb768833adc6fb2951933be9d1a104ea18,[maven-release-plugin] prepare for next development iteration
21720e4a7865b77d252a4263271663d7ed462440,"Allow to build on powerpc

Motivation:

At the moment it is not possible to build netty on a power 8 systems.

Modifications:

- Improve detection of the possibility of using Conscrypt
- Skip testsuite-shading when not on x86_64 as this is the only platform for which we build tcnative atm
- Only include classifier if on x86_64 for tcnative as dependency as this is the only platform for which we build tcnative atm
- Better detect if UDT test can be run

Result:

Fixes https://github.com/netty/netty/issues/9479"
d01282e5f908e61f89b3621b3b64a351c3c2214e,"Remove duplicated calculation (#9565)

Motivation:

calculateMaxBytesPerGatheringWrite() contains duplicated calculation:  getSendBufferSize() << 1

Modifications:

Remove the duplicated calculation

Result:

The method will be clear and better"
72716be648cce725590259305e63f39f12742c7e,"Correctly synchronize before trying to set key material to fix possible native crash (#9566)

Motivation:

When using io.netty.handler.ssl.openssl.useTasks=true we may call ReferenceCountedOpenSslEngine.setKeyMaterial(...) from another thread and so need to synchronize and also check if the engine was destroyed in the meantime to eliminate of the possibility of a native crash.
The same is try when trying to access the authentication methods.

Modification:

- Add synchronized and isDestroyed() checks where missing
- Add null checks for the case when a callback is executed by another thread after the engine was destroyed already
- Move code for master key extraction to ReferenceCountedOpenSslEngine to ensure there can be no races.

Result:

No native crash possible anymore when using io.netty.handler.ssl.openssl.useTasks=true"
57e048147b7f17c7e6859d727fd74c95a106793f,"Correctly handle task offloading when using BoringSSL / OpenSSL (#9575)


Motivation:

We did not correctly handle taskoffloading when using BoringSSL / OpenSSL. This could lead to the situation that we did not write the SSL alert out for the remote peer before closing the connection.

Modifications:

- Correctly handle exceptions when we resume processing on the EventLoop after the task was offloadded
- Ensure we call SSL.doHandshake(...) to flush the alert out to the outboundbuffer when an handshake exception was detected
- Correctly signal back the need to call WRAP again when a handshake exception is pending. This will ensure we flush out the alert in all cases.

Result:

No more failures when task offloading is used."
2fe2a155935b45b222f55c137c6fdbedb09d7678,"No need to explicit use the AccessController when SystemPropertyUtil is used (#9577)

Motivation:

SystemPropertyUtil already uses the AccessController internally so not need to wrap its usage with AccessController as well.

Modifications:

Remove explicit AccessController usage when SystemPropertyUtil is used.

Result:

Code cleanup"
3ad037470ec4677a7e1e1cee476c1b752603aab7,"Correctly reset cached local and remote address when disconnect() is called (#9545)

Motivation:

We should correctly reset the cached local and remote address when a Channel.disconnect() is called and the channel has a notion of disconnect vs close (for example DatagramChannel implementations).

Modifications:

- Correctly reset cached kicak abd remote address
- Update testcase to cover it and so ensure all transports work in a consistent way

Result:

Correctly handle disconnect()"
338e1a991c5d15695bd654a7b8d2bd4008e868ae,"Fix a bug introduced by 79706357c73ded02615d0445db7503b646ff9547 which can cause thread to spin in an infinite loop. (#9579)

Motivation:
peek() is implemented in a similar way to poll() for the mpsc queue, thus it is more like a consumer call.
It is possible that we could have multiple thread call peek() and possibly one thread calls poll() at at the same time.
This lead to multiple consumer scenario, which violates the multiple producer single consumer condition and could lead to spin in an infinite loop in peek()

Modification:
Use isEmpty() instead of peek() to check if task queue is empty

Result:
Dont violate the mpsc semantics."
2b9f69ac3833b5409b7115b999967cdf3e4e4968,"Epoll: Avoid redundant EPOLL_CTL_MOD calls (#9397) (#9583)

Motivation

Currently an epoll_ctl syscall is made every time there is a change to
the event interest flags (EPOLLIN, EPOLLOUT, etc) of a channel. These
are only done in the event loop so can be aggregated into 0 or 1 such
calls per channel prior to the next call to epoll_wait.

Modifications

I think further streamlining/simplification is possible but for now I've
tried to minimize structural changes and added the aggregation beneath
the existing flag manipulation logic.

A new AbstractChannel#activeFlags field records the flags last set on
the epoll fd for that channel. Calls to setFlag/clearFlag update the
flags field as before but instead of calling epoll_ctl immediately, just
set or clear a bit for the channel in a new bitset in the associated
EpollEventLoop to reflect whether there's any change to the last set
value.

Prior to calling epoll_wait the event loop makes the appropriate
epoll_ctl(EPOLL_CTL_MOD) call once for each channel who's bit is set.

Result

Fewer syscalls, particularly in some auto-read=false cases. Simplified
error handling from centralization of these calls."
ec34fce4310676e6eecc386d3afd840e8e2ffed2,"FIX : Unpacking causes socks5proxy init failure (#9582)

Motivation:

Socks5InitialRequestDecoder does not correctly handle fragmentation

Modifications:

- Delete detection of not enough bytes as ReplyingDecoder already handles all of this correctly.
- Add unit test

Result:

Fixes #9574."
39cafcb05c99f2aa9fce7e6597664c9ed6a63a95,"Correctly handle whitespaces in HTTP header names as defined by RFC7230#section-3.2.4 (#9585)

Motivation:

When parsing HTTP headers special care needs to be taken when a whitespace is detected in the header name.

Modifications:

- Ignore whitespace when decoding response (just like before)
- Throw exception when whitespace is detected during parsing
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/9571"
07fe1a299a6909d5a67faf53c4eddeff28ae6832,"Optimize the QueryStringEncoder performance (#9568)

Motivation:

Optimize the QueryStringEncoder for lower memory overhead and higher encode speed.

Modification:

Encode the space to + directly, and reuse the uriStringBuilder rather then create a new one.

Result:

Improved performance"
aebe2064d5866cfbcb24660005ad25ce245d4826,"Allow domain sockets to configure SO_SNDBUF and SO_RCVBUF (#9584)

Motivation:

Running tests with a `KQueueDomainSocketChannel` showed worse performance than an `NioSocketChannel`. It turns out that the default send buffer size for Nio sockets is 64k while for KQueue sockets it's 8k. I verified that manually setting the socket's send buffer size improved perf to expected levels.

Modification:

Plumb the `SO_SNDBUF` and `SO_RCVBUF` options into the `*DomainSocketChannelConfig`.

Result:

Can now configure send and receive buffer sizes for domain sockets."
8648171abc27497d87a8b47e509e8adabd622f5b,"Fix *SslEngineTest to not throw ClassCastException and pass in all cases (#9588)

Motivation:

Due some bug we did endup with ClassCastExceptions in some cases. Beside this we also did not correctly handle the case when ReferenceCountedOpenSslEngineTest did produce tasks to run in on test.

Modifications:

- Correctly unwrap the engine before to fix ClassCastExceptions
- Run delegated tasks when needed.

Result:

All tests pass with different OpenSSL implementations (OpenSSL, BoringSSL etc)"
4499384135cdaca5ccdda85b0c9610d4ecd6c3cc,"Update to netty-tcnative 2.0.26.Final (#9589)

Motivation:

We just released a new version of netty-tcnative.

Modifications:

Bump up to netty-tcnative 2.0.26.Final

Result:

Use latest netty-tcnative release"
dc4de7fbb4e17c606c92c542d5015042ada48e38,"We need to use NewGloblRef when caching jclass instances (#9595)

Motivation:

It is not safe to cache a jclass without obtaining a global reference via NewGlobalRef.

Modifications:

Correctly use NewGlobalRef(...) before caching

Result:

Correctly cache jclass instance"
0a2d85f1d32749eb278b27502ba7de20de958485,"Fix GraalVM native image build error (#9593)

Motivation:

Error: Class that is marked for delaying initialization to run time got initialized during image building: io.netty.handler.codec.http2.Http2CodecUtil. Try marking this class for build-time initialization with --initialize-at-build-time=io.netty.handler.codec.http2.Http2CodecUtil
Error: Use -H:+ReportExceptionStackTraces to print stacktrace of underlying exception
Error: Image build request failed with exit status 1
Modification:

After debugging, it seems the culprit is io.netty.handler.codec.http2.Http2ClientUpgradeCodec, which also needs runtime initialisation.

Result:

Fixes #micronaut-projects/micronaut-grpc#8"
76592db0bde9d4908191c2d7e54af3466ffd4673,"Close eventfd shutdown/wakeup race by closely tracking epoll edges (#9586)

Motivation

This is another iteration of #9476.

Modifications

Instead of maintaining a count of all writes performed and then using
reads during shutdown to ensure all are accounted for, just set a flag
after each write and don't reset it until the corresponding event has
been returned from epoll_wait.

This requires that while a write is still pending we don't reset
wakenUp, i.e. continue to block writes from the wakeup() method.

Result

Race condition eliminated. Fixes #9362

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
eb3c4bd926e697da3ea16079a5f4211adb375ea5,"ChunkedNioFile can use absolute FileChannel::read to read chunks (#9592)

Motivation:

Users can reuse the same FileChannel for different ChunkedNioFile
instances without being worried that FileChannel::position will be
changed concurrently by them.
In addition, FileChannel::read with absolute position allows to
use on *nix pread that is more efficient then fread.

Modifications:

Always use absolute FileChannel::read ops

Result:

Faster and more flexible uses of FileChannel for ChunkedNioFile"
5e69a13c21bcf89bf26dbf1421c5ec8188561a17,"Cleanup JNI code to always correctly free memory when loading fails and also correctly respect out of memory in all cases (#9596)

Motivation:

At the moment we not consistently (and also not correctly) free allocated native memory in all cases during loading the JNI library. This can lead to native memory leaks in the unlikely case of failure while trying to load the library.

Beside this we also not always correctly handle the case when a new java object can not be created in native code because of out of memory.

Modification:

- Copy some macros from netty-tcnative to be able to handle errors in a more easy fashion
- Correctly account for New* functions to return NULL
- Share code

Result:

More robust and clean JNI code"
86ff76a4f77662fe1bf61deeec5f3e39e16d4020,"Fix incorrect comment  (#9598)

Motivation:

The comment is incorrect and so missleading

Modification:

Correct the comment

Result:

Correct comment in code"
2791f0fefac82663ca09dc8aa5dda024152c92f8,"Avoid use of global AtomicLong for ScheduledFutureTask ids (#9599)

Motivation

Currently a static AtomicLong is used to allocate a unique id whenever a
task is scheduled to any event loop. This could be a source of
contention if delayed tasks are scheduled at a high frequency and can be
easily avoided by having a non-volatile id counter per queue.

Modifications

- Replace static AtomicLong ScheduledFutureTask#nextTaskId with a long
field in AbstractScheduledExecutorService
- Set ScheduledFutureTask#id based on this when adding the task to the
queue (in event loop) instead of at construction time
- Add simple benchmark

Result

Less contention / cache-miss possibility when scheduling future tasks

Before:

Benchmark      (num)   Mode  Cnt    Score    Error  Units
scheduleLots  100000  thrpt   20  346.008 ± 21.931  ops/s

Benchmark      (num)   Mode  Cnt    Score    Error  Units
scheduleLots  100000  thrpt   20  654.824 ± 22.064  ops/s"
bd907c3b3acf3d746ad1143270224aa0f784cd1b,[maven-release-plugin] prepare release netty-4.1.42.Final
92941cdcac8a97733da7d664749c33c505a779d0,[maven-release-plugin] prepare for next development iteration
3ef00eaa0626489324fcd8c40466674058097605,"Double check `size` to avoid `ArrayIndexOutOfBoundsException` (#9609)

Motivation:

Recycler$Stack.pop will occurs `ArrayIndexOutOfBoundsException` in some race cases, we should double check `size` even after `scavenge` called.

Modifications:

Double check `size` after `scavenge`

Result:

avoid ArrayIndexOutOfBoundsException in `pop`"
299a682d3f6b1b05610864939be515d2d10bb49a,"Correctly take Http2FrameCodecBuilder.isValidateHeaders() into account when creating a Http2FrameCodec from an existing Http2FrameWriter. (#9600)

Motivation:

We did miss to take Http2FrameCodecBuilder.isValidateHeaders() into account when a Http2FrameWriter was set on the builder and always assumed validation should be enabled.

Modifications:

Remove hardcode value and use configured value

Result:

Http2FrameCodecBuilder.isValidateHeaders() is respected in all cases"
1f4b9e36ea29a1e8d1b5d4296516a05c440fc2ff,"We should only disable releasing of the message once writeData(...) was called successfully (#9610)

Motivation:

At the moment we set release to false before we call writeData(...). This could let to the sitatuation that we will miss to release the message if writeData(...) throws. We should set release to false after we called writeData(...) to ensure the ownership of the buffer is correctly transferred.

Modifications:

- Set release to false after writeData(...) was successfully called only

Result:

No possibility for a buffer leak"
622cc232f0647b7e6c9581ed7417436e14f15d9b,"Use configured ByteBufAllocator in InboundHttp2ToHttpAdapter (#9611)

Motivation:

At the moment we use Unpooled.buffer(...) in InboundHttp2ToHttpAdapter when we need to do a copy of the message. We should better use the configured ByteBufAllocator for the Channel

Modifications:

Change internal interface to also take the ByteBufAllocator as argument and use it when we need to allocate a ByteBuf.

Result:

Use the ""correct"" ByteBufAllocator in InboundHttp2ToHttpAdapter in all cases"
fed552d09de499f5a0424680e031a2d4414538c7,"Fix broken pipe due to /usr/bin/ldd (#9606)

Motivation:

The build script for the module Netty Transport Native Epoll can cause
intermittent build break due to broken pipe by /usr/bin/ldd. This issue
likely to occur on a build environment with multiple processors.

Modifications:

The root cause is that the consumer head command finishes earlier the
producer ldd command. Buffering the outputs of the ldd command by an
intermediate tail command avoids the broken pipe.

Result:

A build on multiple processors can finish successfully.

Signed-off-by: Tatsushi Inagaki <e29253@jp.ibm.com>"
85a663fa52ca07c8c282cd688966b921d35fb29f,"Null out completed tasks to help with garbage collection (#9613)

Motivation

When ScheduledFutureTasks complete, there's no need to retain a ref to
the wrapped task. Clearing it could help in particular with the case
where many scheduled tasks have been cancelled but their queue removal
delayed (since it is done lazily).

Modifications

This comprises just the PromiseTask changes from #9580. Upon completion,
replace the task reference with a static sentinel depending on the type
of completion (so that it will be reflected by toString).

Result

More expedient collection of cancelled task objects"
b39ffed042844adecaf0a4fc4e9a2f53edaa111d,"Fix incorrect calculation of next buffer size in AdaptiveRecvByteBufAllocator (#9555)

Motivation:

Due a bug we did not always correctly calculate the next buffer size in AdaptiveRecvByteBufAllocator.

Modification:

Fix calculation and add unit test

Result:

Correct calculation is always used."
ed142442a4de15a03991915e3944e0bc6ae2b20a,"Enable Netty on a big endian platform

Motivation:

We would like to enable Netty also on a big endian platform such as
s390_64. We need to fix a function which assumes that the target
platform is little endian.

Modifications:

Modify netty_unix_socket_accept() to write an address length as jbyte
instead of jsize.

Result:

Netty can be enabled on a big endian platform.

Signed-off-by: Tatsushi Inagaki <e29253@jp.ibm.com>"
d8b1a2d93f556a08270e6549bf7f91b3b09f24bb,"Allow to build on s390_64

Motivation:

It is not possible to build Netty on an s390_64 platform.

Modifications:

Modify pom.xml so that s390_64 is acceptable as os.detected.arch.

Result:

Netty can be built on an s390_64 platform.

Signed-off-by: Tatsushi Inagaki <e29253@jp.ibm.com>"
4980a6b30416af6fa73af1226ac305965cc516e7,"Register sun.nio.ch.SelectorImpl fields for unsafe access. (#9631)

Motivation:

On JDK > 9 Netty uses Unsafe to write two internal JDK fields: sun.nio.ch.SelectorImp.selectedKeys and sun.nio.ch.SelectorImpl.publicSelectedKeys. This is done in transport/src/main/java/io/netty/channel/nio/NioEventLoop.java:225, in openSelector() method. The GraalVM analysis cannot do the Unsafe registration automatically because the object field offset computation is hidden behind two layers of calls.

Modifications:

This PR updates the Netty GraalVM configuration by registering those fields for unsafe access.
 
Result:

Improved support for Netty on GraalVM with JDK > 9."
031c2e2e8899d037228a492a458ccd194eb8df9c,"Reference-counted SslEngines retain a reference to their parent SslContext (#9626)

Motivation:
With the Netty ref-counted OpenSSL implementation the parent SslContext
maintains state necessary for the SslEngine's it produces. However, it's
possible for the parent context to be closed and release those resources
before the child engines are finished which causes problems.

Modification:
Spawned ReferenceCountedOpenSslEngine's retain a reference to their
parent ReferenceCountedOpenSslContext.

Result:
The lifetime of the shared data is extended to include the lifetime of
the dependents."
4dc1eccf60252f8a690610c20495ed095e274d3a,"Make some inner classes static (#9624)

Motivation:
Classes `AbstractHttp2StreamChannel.Http2StreamChannelConfig`
and `DnsNameResolver.AddressedEnvelopeAdapter` may be static:
it doesn't reference its enclosing instance.

Modification:
Add `static` modifier.

Result:
Prevents a possible memory leak and uses less memory per class instance."
1fb5ff15a89b133653bdd04662cedb1d9330df4f,"Fix possible NPE in DefaultHttp2UnknownFrame#equals (#9625)

Motivation:
`DefaultHttp2UnknownFrame#equals` may produce NPE due to
incorrect comparison of `stream` field.

Modification:
- Fix the `stream` field compare.
- Cleanup usage of class fields: use direct access instead of getters
(because the class is final).

Result:
No NPE in `equals` method."
45be693889d5c3dddbc073d3064cfabd3684b8ec,"Add `io.netty.handler.codec.http2.Http2ConnectionHandler` for runtime GraalVM compilation (#9621)

Motivation:

Native image compilation is failing without extra flags:

```
Warning: Aborting stand-alone image build. No instances of io.netty.buffer.UnpooledHeapByteBuf are allowed in the image heap as this class should be initialized at image runtime. Object has been initialized by the io.netty.handler.codec.http2.Http2ConnectionHandler class initializer with a trace: 
 	at io.netty.buffer.Unpooled.wrappedBuffer(Unpooled.java:157)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.<clinit>(Http2ConnectionHandler.java:74)
.  To fix the issue mark io.netty.buffer.UnpooledHeapByteBuf for build-time initialization with --initialize-at-build-time=io.netty.buffer.UnpooledHeapByteBuf or use the the information from the trace to find the culprit and --initialize-at-run-time=<culprit> to prevent its instantiation.

Detailed message:
Trace: 	object io.netty.buffer.ReadOnlyByteBuf
	object io.netty.buffer.UnreleasableByteBuf
	method io.netty.handler.codec.http2.Http2ConnectionHandler.access$500()
Call path from entry point to io.netty.handler.codec.http2.Http2ConnectionHandler.access$500(): 
	at io.netty.handler.codec.http2.Http2ConnectionHandler.access$500(Http2ConnectionHandler.java:66)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:299)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:239)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:438)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:505)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:444)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:283)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
	at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:56)
	at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:365)
	at com.oracle.svm.core.jdk.RuntimeSupport.executeHooks(RuntimeSupport.java:144)
	at com.oracle.svm.core.jdk.RuntimeSupport.executeStartupHooks(RuntimeSupport.java:89)
	at com.oracle.svm.core.JavaMainWrapper.runCore(JavaMainWrapper.java:143)
	at com.oracle.svm.core.JavaMainWrapper.run(JavaMainWrapper.java:186)
	at com.oracle.svm.core.code.IsolateEnterStub.JavaMainWrapper_run_5087f5482cc9a6abc971913ece43acb471d2631b(generated:0)
```

Modification:

Add `io.netty.handler.codec.http2.Http2ConnectionHandler` for runtime compilation, as the buffer library's `io.netty.buffer.UnpooledHeapByteBuf` is also marked for runtime.

Result:

Native image compilation works again."
170e4deee6f78a564727dee18af7dd7ce322a35f,"Fix event loop shutdown timing fragility (#9616)


Motivation

The current event loop shutdown logic is quite fragile and in the
epoll/NIO cases relies on the default 1 second wait/select timeout that
applies when there are no scheduled tasks. Without this default timeout
the shutdown would hang indefinitely.

The timeout only takes effect in this case because queued scheduled
tasks are first cancelled in
SingleThreadEventExecutor#confirmShutdown(), but I _think_ even this
isn't robust, since the main task queue is subsequently serviced which
could result in some new scheduled task being queued with much later
deadline.

It also means shutdowns are unnecessarily delayed by up to 1 second.

Modifications

- Add/extend unit tests to expose the issue
- Adjust SingleThreadEventExecutor shutdown and confirmShutdown methods
to explicitly add no-op tasks to the taskQueue so that the subsequent
event loop iteration doesn't enter blocking wait (as looks like was
originally intended)

Results

Faster and more robust shutdown of event loops, allows removal of the
default wait timeout"
c591d03320fced5257ca572755f85421c8745d5b,"Remove redundant epollWaitNow() call in EpollEventLoop#closeAll() (#9614)

Motivation

This is a vestige that was removed in the original PR #9535 before it
was reverted, but we missed it when re-applying in #9586.

It means there is a possible race condition because a wakeup event could
be missed while shutting down, but the consequences aren't serious since
there's a 1 second safeguard timeout when waiting for it.

Modification

Remove call to epollWaitNow() in EpollEventLoop#closeAll()

Result

Cleanup redundant code, avoid shutdown delay race condition"
ca915ae590b66ad1866283580bb98069c9020aa1,"Initialize dynamicMethods before use (#9618)

Motivation:

There is a goto statement above the current position of initialize dynamicMethods, and dynamicMethods is used after the goto which might cause undefined behavior.

Modifications:

Initialize dynamicMehtods at the top.

Result:

No more undefined behavior."
27397e87b240564b0f2498458b1bb77dc1a74dff,"Remember to return writability events to flow controller in HTTP2 Multiplexer (#9642)

Motivation:

Http2MultiplexCodec extends Http2FrameCodec extends Http2ConnectionHandler.  It appears  Http2MultiplexCodec overrode the channelWritabilityChanged method, which prevented the flow controller from becoming active.  In the case the parent channel becomes unwritable, and then later becomes writable, it needs to indicate that the child channels can still write data.   This is slightly confusing, because the child channels may still themselves be unwritable, but should still drain their data to the parent channel.

Modification:

Still propagate writability changes to the HTTP/2 flow controller

Result:

Fixes https://github.com/netty/netty/issues/9636"
271d8de9ec15b648fd73c79077153617be9e7348,"Ensure we finish setup mock before we use it in Http2ConnectionRoundtripTest.headersWriteForPeerStreamWhichWasResetShouldNotGoAway (#9645)

Motivation:

We did dispatch the client code before we did finish setup the mock and so may end up with org.mockito.exceptions.misusing.UnfinishedStubbingException if the connect happens quickly enough.

See https://ci.netty.io/job/netty-centos6-java8-prb/1637/testReport/junit/io.netty.handler.codec.http2/Http2ConnectionRoundtripTest/headersWriteForPeerStreamWhichWasResetShouldNotGoAway/

Modifications:

First finish setup the mock and the dispatch.

Result:

Fix flacky test"
99a4cecec64552a56ec50255ea5d670d91ab4e00,"Fix NioEventLoopTest#testChannelsRegistered flakiness (#9650)

Motivation

NioEventLoopTest#testChannelsRegistered() fails intermittently due to
use of SingleThreadEventLoop#channelsRegistered() which is not
threadsafe and unreliable when called from outside the event loop.

Modifications

Add static registeredChannels method to NioEventLoopTest and
AbstractSingleThreadEventLoopTest to call from the tests via event loop
instead of directly.

Result

Hopefully fewer test failures"
b11aba354aa5ca5fb675897462611da72c20e20f,"Use adopt@1.13.0-0 when building with Java 13 (#9641)

Motivation:

We should use adaptjdk 13 and not oracle openjdk 13 when building with Java 13

Modifications:

Use adopt@1.13.0-0

Result:

More consistent java vendor usage"
bd8cea644a07890f5bada18ddff0a849b58cd861,"Fix typos in javadocs (#9527)

Motivation:

We should have correct docs without typos

Modification:

Fix typos and spelling

Result:

More correct docs"
a31a3e31da018ec68eeb1de7d8a8b11b1a0eec6f,"Add vscode specific files / directory to .gitignore (#9652)

Motivation:

We should not commit vscode specific files, so at it to gitignore

Modifications:

Add files to .gitignore

Result:

Correctly ignore ide related files"
35862cad7ec2f198ecb068dd53980631811818d2,"Fix SSL tests that use SslProvider.OPENSSL_REFCNT (#9649)

Motivation:

031c2e2e8899d037228a492a458ccd194eb8df9c introduced some change to reduce the risk of have the `ReferenceCountedOpenSslContext` be destroyed while the `ReferenceCountedSslEngine` is still in us. Unfortunaly it missed to adjust a few tests which make assumptions about the refCnt of the context.

Modifications:

Adjust tests to take new semenatics into acount.

Result:

No more tests failures"
08e9b456a4febef5d4926af9f5c4f2e90f9b30c3,"Fixes validation of input bytes in the Base64 decoder (#9623)

Motivation:
In the current implementation of Base64 decoder an invalid
character `\u00BD` treated as `=`.
Also character `\u007F` leads to ArrayIndexOutOfBoundsException.

Modification:
Explicitly checks that all input bytes are ASCII characters
(greater than zero). Fix `decodabet` tables.

Result:
Correctly validation input bytes in Base64 decoder."
e0b15ed952873aa2b7d12b3e12a99561d180f1f6,"[DOC] Add CWE-113 warning to DefaultHttpHeaders constructor (#9646)

### Motivation:

I've now found two libraries that use Netty to be vulnerable to [CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')](https://cwe.mitre.org/data/definitions/113.html) due to using `new DefaultHttpHeaders(false)`.

Some part of me hopes that this warning will help dissuade library authors from disabling this important security check.

### Modification:

Add documentation to `DefaultHttpHeaders(boolean)` to warn about the implications of `false`.

### Result:

This improves the documentation on `DefaultHttpHeaders`."
f4203c433948865d334f26576f39582988201a94,"Update commons-compress dependency (#9657)

Motivation:

We should use the latest commons-compress release to fix CVE-2019-12402 (even it is only a test dependency)

Modifications:

Update commons-compress to 1.19

Result:

Fix security alert"
ec8d43c29462d342cbd85a6f80d30fb421b2046e,"Do not mandate direct bytes in SslHandler queue (#9656)


Motivation:

Currently when the SslHandler coalesces outbound bytes it always
allocates a direct byte buffer. This does not make sense if the JDK
engine is being used as the bytes will have to be copied back to heap
bytes for the engine to operate on them.

Modifications:

Inspect engine type when coalescing outbound bytes and allocate heap
buffer if heap bytes are preferred by the engine.

Result:

Improved performance for JDK engine. Better performance in environments
without direct buffer pooling."
166caf96ef87cf1d7ebfb43141939e596486928e,"Avoid unnecessary epoll event loop wake-ups (#9605)

Motivation

The recently-introduced event loop scheduling hooks can be exploited by
the epoll transport to avoid waking the event loop when scheduling
future tasks if there is a timer already set to wake up sooner.

There is also a ""default"" timeout which will wake the event
loop after 1 second if there are no pending future tasks. The
performance impact of these wakeups themselves is likely negligible but
there's significant overhead in having to re-arm the timer every time
the event loop goes to sleep (see #7816). It's not 100% clear why this
timeout was there originally but we're sure it's no longer needed.

Modification

Combine the existing volatile wakenUp and non-volatile prevDeadlineNanos
fields into a single AtomicLong that stores the next scheduled wakeup
time while the event loop is in epoll_wait, and is -1 while it is awake.

Use this as a guard to debounce wakeups from both immediate scheduled
tasks and future scheduled tasks, the latter using the new
before/afterScheduledTaskSubmitted overrides and based on whether the
new deadline occurs prior to an already-scheduled timer.

A similar optimization was already added to NioEventLoop, but it still
uses two separate volatiles. We should consider similar streamlining of
that in a future update.

Result

Fewer event loop wakeups when scheduling future tasks, greatly reduced
overhead when no future tasks are scheduled."
deb34a0f8bf719b86aa68f9a242b94db78e9172b,"remove useless doc for 5.0 (#9546)

Fix javadoc issues

Motivation:

Remove useless doc for 5.0

Modifications:

Remove description for 5.0

Result:

Useless doc will be removed."
833f11be75ccf0cdb97e0947e3111ac280855374,"Remove usage of AtomicIntegerFieldUpdater in ReferenceCountedOpenSslE… (#9653)

Motivation:

There is not need to use a CAS as everything is synchronized anyway. We can simplify the code a bit by not using it.

Modifications:

- Just remove the CAS operation
- Change from int to boolean

Result:

Code cleanup"
6c05d16967df5cadcebcc498223eec3f25bacf89,"Use @SuppressJava6Requirement for animal sniffer plugin to ensure we always guard correctly (#9655)

Motivation:

We can use the `@SuppressJava6Requirement` annotation to be more precise about when we use Java6+ APIs. This helps us to ensure we always protect these places.

Modifications:

Make use of `@SuppressJava6Requirement` explicit

Result:

Fixes https://github.com/netty/netty/issues/2509."
2e5dd288008d4e674f53beaf8d323595813062fb,"Fix DnsNameResolver TCP fallback test and message leaks (#9647)

Motivation

A memory leak related to DNS resolution was reported in #9634,
specifically linked to the TCP retry fallback functionality that was
introduced relatively recently. Upon inspection it's apparent that there
are some error paths where the original UDP response might not be fully
released, and more significantly the TCP response actually leaks every
time on the fallback success path.

It turns out that a bug in the unit test meant that the intended TCP
fallback path was not actually exercised, so it did not expose the main
leak in question.

Modifications

- Fix DnsNameResolverTest#testTruncated0 dummy server fallback logic to
first read transaction id of retried query and use it in replayed
response
- Adjust semantic of internal DnsQueryContext#finish method to always
take refcount ownership of passed in envelope
- Reorder some logic in DnsResponseHandler fallback handling to verify
the context of the response is expected, and ensure that the query
response are either released or propagated in all cases. This also
reduces a number of redundant retain/release pairings

Result

Fixes #9634"
3d7dba373fff33270a897a7de86f7311952301a2,"Eliminate unnessary copy of ByteBuf on ByteToMessageDecoder removal (#9662)

Motivation:

At the moment we do a ByteBuf.readBytes(...) on removal of the ByteToMessageDecoder if there are any bytes left and forward the returned ByteBuf to the next handler in the pipeline. This is not really needed as we can just forward the cumulation buffer directly and so eliminate the extra memory copy

Modifications:

Just forward the cumulation buffer directly on removal of the ByteToMessageDecoder

Result:

Less memory copies"
bbc34d0eda38efb4a6364561e9ac1d2319682694,"HTTP/2: Prevent memory leak when trying to create new streams on a connection that received a GOAWAY. (#9674)


Motivation:

In https://github.com/netty/netty/issues/8692, `Http2FrameCodec` was
updated to keep track of all ""being initialized"" streams, allocating
memory before initialization begins, and releasing memory after
initialization completes successfully.

In some instances where stream initialization fails (e.g. because this
connection has received a GOAWAY frame), this memory is never released.

Modifications:

This change updates the `Http2FrameCodec` to use a separate promise
for monitoring the success of sending HTTP2 headers. When sending of
headers fails, we now make sure to release memory allocated for stream
initialization.

Result:

After this change, failures in writing HTTP2 Headers (e.g. because this
connection has received a GOAWAY frame) will no longer leak memory."
19b4adf79c2d82d14e645be0e5f3eca30067bf1b,"Avoid wrapping scheduled Runnables in Callable adapter (#9666)


Motivation

Currently when future tasks are scheduled via schedule(Runnable, ...)
methods, the supplied Runnable is wrapped in a newly allocated Callable
adapter prior to being wrapped in a ScheduledFutureTask.

This can be avoided which saves an object allocation per scheduled task.

Modifications

Change the Callable task field of ScheduledFutureTask to be of type
Object so that it can hold/run Runnables directly in addition to
Callables.

An ""adapter"" is still used in the case a Runnable is scheduled with an
explicit constant non-null completion value, assumed to be rare.

Result

Less garbage"
95230e01da5d9cf2447a9d09d4c42bf42eb7d479,"Try to reduce GC produced while writing headers (#9682)

Motivation:

bbc34d0eda38efb4a6364561e9ac1d2319682694 introduced correct handling of ""in process"" setup of streams but there is some room for improvements. Often the writeHeaders(...) is completed directly which means there is not need to create the extra listener object.

Modifications:

- Only create the listener if we really need too.

Result:

Less GC"
e745ef0645cc63e017d0a6599610a59af22842f8,"fix remove handler cause ByteToMessageDecoder out disorder (#9670)

Motivation:

Data flowing in from the decoder flows out in sequence，Whether decoder removed or not.

Modification:

fire data in out and clear out when hander removed
before call method handlerRemoved(ctx)

Result:

Fixes #9668 ."
c7441f68f3a83bc6770b0c8def37ca97201ae601,"Ignore invalid entries in /etc/resolv.conf when parsing (#9697)

Motivation:

We should just ignore (and so skip) invalid entries in /etc/resolver.conf.

Modifications:

- Skip invalid entries
- Add unit test

Result:

Fix https://github.com/netty/netty/issues/9684"
9bf10f2dc5e722dd3a7c197012ee034bef0c0ed0,"Correctly propagate failures while update the flow-controller to the … (#9664)


Motivation:

We may fail to update the flow-controller and in this case need to notify the stream channel and close it.

Modifications:

Attach a future to the write of the update frame and in case of a failure propagate it to the channel and close it

Result:

Fixes https://github.com/netty/netty/issues/9663"
247a4db470d58c5087fb4f2388a18be42b0ce9d0,"Add ability to set attributes on a SslContext (#9654)


Motivation:

Sometimes it is useful to be able to set attributes on a SslContext.

Modifications:

Add new method that will return a AttributeMap that is tied to a SslContext instance

Result:

Fixes https://github.com/netty/netty/issues/6542."
b3fb2eb27f71de20cb53d64ab2281eb2d8d31aae,"Add a utility that checks if the a SslProvider supports ALPN (#9693)

Motivation:

We have a public utility `OpenSsl.isAlpnSupported()` that helps users to
check if ALPN is available for `SslProvider.OPENSSL`. However, we do not
provide a similar utility for `SslProvider.JDK`. Therefore, users who
configured ALPN with `SslProvider.JDK` will get a runtime exception at
the time when a new connection will be created.

Modifications:

- Add public `SslProvider.isAlpnSupported(SslProvider)` utility method
that returns `true` if the `SslProvider` supports ALPN;
- Deprecate `OpenSsl.isAlpnSupported()`;

Result:

Users can verify if their environment supports ALPN with
`SslProvider` upfront (at bootstrap), instead of failing with
runtime exception when a new connection will be created."
8674ccfcd269382be993c23cebe4a72233e905fb,"Fix indexOutOfBoundsException when multipart/form-data is incorrect value (#9688)

Motivation:

HttpPostRequestDecoder.splitHeaderContentType() throws a StringIndexOutOfBoundsException when it parses a Content-Type header that starts with a semicolon ;. We should skip the execution for incorrect multipart form data.


Modification:

Avoid invocation of HttpPostRequestDecoder#splitHeaderContentType(...) for incorrect multipart form data content-type.

Result:

Fixes #8554"
a77fe9333da8bfa7c94b2b7a8e73b91b0fc8df1d,"Add 'toString' method into IdleStateEvent (#9695)

### Motivation:

IdleStateEvent is very convenient and frequently used type of events. However both in runtime (logs) and in debug you need some manual steps to see their actual content. Default implementation generates worthless trash like this:

    io.netty.handler.timeout.IdleStateEvent@27f674d

There are examples already, where event has convenient and useful toString implementation:

* io.netty.handler.proxy.ProxyConnectionEvent
* io.netty.handler.ssl.SslCompletionEvent

### Modification:

* Implement 'IdleStateEvent.toString' method.
* Unit test.

### Result:

More useful String representation of IdleStateEvent"
73f5c8384ed657c573315fac25106f5fcbcb27dd,"Bugfix #9667: FlowControllerHandler swallows read-complete event when auto-read is disabled (#9691)

### Motivation:

FlowControllerHandler currently may swell read-complete events in some situations.

### Modification:

* Fire read-complete event from flow controller, when it previously was swallowed
* New unit test to cover this case

### Result:

Fixes #9667: FlowControllerHandler swallows read-complete event when auto-read is disabled"
39cc7a673939dec96258ff27f5b1874671838af0,"Refactor SslHandler internals to always use heap buffers for JDK SSLE… (#9696)


Motivation:

We should aim to always use heap buffers when using the JDK SSLEngine for now as it wants to operate on byte[] and so will do internal memory copies if a non heap buffer is used. Beside this it will always return BUFFER_OVERFLOW when a smaller buffer then 16kb is used when calling wrap(...) (even if a very small amount of bytes should be encrypted). This can lead to excercive direct memory usage and pressure for no good reason.

Modifications:

Refactor internals of SslHandler to ensure we use heap buffers for the JDK SSLEngine impelementation

Result:

Less direct memory usage when JDK SSLEngine implementation is used"
ff9df03d2143639c3581a5b3192ccc8f67b334bc,"Make only default IdleStateEvents cached string representation (#9705)

Motivation:

In PR https://github.com/netty/netty/pull/9695   IdleStateEvents
were made to cache their string representation.   The reason for this
was to avoid creating garbage as these values would be used frequently.
However, these objects may be used on multiple event loops and this
may cause an unexpected race to occur.

Modification:
Only make the events that Netty creates cache their toString representation.

Result:
No races."
e8e7a206b353058d17bc7fbfd2e36ba17b5f75f3,"Use fast HPACK comparisons when not checking sensitive headers (#9259)

Motivation:
Constant time comparison functions are used to compare HTTP/2 header
values, even if they are not sensitive.

Modification:
After checking for sensitivity, use fast comparison.

Result: Faster HPACK table reads/writes"
7d6d953153697bd66c3b01ca8ec73c4494a81788,"Support semicolons in query parameters as explain in the W3C recommentation (#9701)

Motivation:

Support semicolons in query parameters as explain in the W3C recommentation:
https://www.w3.org/TR/2014/REC-html5-20141028/forms.html#url-encoded-form-data

Modification:

- Add a new constructor arg that can be used to ""switch"" modes for decoding ;
- Add unit test

Result:

Fixes #8855"
d066f163d7476a4a332f95d4dc62af751378f536,[maven-release-plugin] prepare release netty-4.1.43.Final
844b82b986b42d76f29992fb7a0530784786b203,[maven-release-plugin] prepare for next development iteration
2f32e0b8adb63decd9031e26fa5dd4154d93ce97,"Changed Netty JDK SSL to use default protocols instead of hardcoded supported (#9707)

Motivation:

Netty should respect JVM flags to control SSL protocols, eg. `-Djdk.tls.client.protocols`


Modification: 

Changed `JdkSslContext` to use `SSLContext.getDefaultSSLParameters().getProtocols()` instead of `engine.getSupportedProtocols()` which is hardcoded as `SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2`.

Result:

Without `-Djdk.tls.client.protocols`, `SSLContext.getDefaultSSLParameters().getProtocols()` returns `TLSv1, TLSv1.1, TLSv1.2`.

With `-Djdk.tls.client.protocols=TLSv1.2`, `SSLContext.getDefaultSSLParameters().getProtocols()` returns `TLSv1.2`.

Fixes #9706"
f4b4a44c7cfff909ee83753d9b29b7443f211962,"Change javadoc of ByteBuf#indexOf(...) to match its behaviour (#9679)

Motivation

Currently doc != code and so one needs to change. Though behaviour as
currently documented might be more intuitive, we don't want to break
anyone so will adjust the doc instead. See #9503 for discussion.

Modifications

Correct the javadoc of indexOf(...) method in ByteBuf abstract class.

Results

Correct javadoc"
aba9b34a59a2ad1182330506c9e3f6a6f681ea75,"Accept Iterable as argument to SslContextBuilder methods. (#9711)

Motivation:

It is common, especially in frameworks, for the parameters to `SslContextBuilder` methods to be built up as a `List` or similar `Iterable`. It is currently difficult to use `SslContextBuilder` in this case because it requires a conversion to array.

Modification:

Add overloads for methods that accept varargs to also accept `Iterable`, delegating by copying into an array.

Result:

Fixes #9293"
f4b536edcbb97f20f1b7b0ad848e7cf9657d9d33,"Add BlockHound integration that detects blocking calls in event loops (#9687)

Motivation:

Netty is an asynchronous framework.
If somebody uses a blocking call inside Netty's event loops,
it may lead to a severe performance degradation.
BlockHound is a tool that helps detecting such calls.

Modifications:

This change adds a BlockHound's SPI integration that marks
threads created by Netty (`FastThreadLocalThread`s) as non-blocking.
It also marks some of Netty's internal methods as whitelisted
as they are required to run the event loops.

Result:

When BlockHound is installed, any blocking call inside event loops
is intercepted and reported (by default an error will be thrown)."
7961c84199b420f87e1443ab4d2ac510ac7ed66d,Fix version of transport-blockhound-tests introduced in f4b536edcbb97f20f1b7b0ad848e7cf9657d9d33
efce8e5363db53c640119eecda9e5c60273c7a6a,"Guard against busy spinning in HashedWheelTimer when using windows and a tickDuration of 1 (#9714)

Motivation:

We do not correct guard against the gact that when applying our workaround for windows we may end up with a 0 sleep period. In this case we should just sleep for 1 ms.

Modifications:

Guard agains the case when our calculation will produce 0 as sleep time on windows

Result:

Fixes https://github.com/netty/netty/issues/9710."
aa3c57508b629ebc4aa26f2cf356b7d0a2cc727b,"Adds DeflateDecoder to native-image.properties of codec-http (#9708)

Motivation:
DeflateDecoder was found to be needed when building spring examples app
with graalvm's native image: https://github.com/spring-projects-experimental/spring-graal-native

Modification:
Adds extra native-image.properties to code-http package

Result:
Both:
https://github.com/spring-projects-experimental/spring-graal-native/tree/master/spring-graal-native-samples/spring-petclinic-jpa
and 
https://github.com/spring-projects-experimental/spring-graal-native/tree/master/spring-graal-native-samples/webflux-netty
Build and run"
6c061abc4905e0a7379d9ede5677409df32a9489,"Hide Recycler implemention to allow experimenting with different implementions of an Object pool (#9715)

Motivation:

At the moment we directly extend the Recycler base class in our code which makes it hard to experiment with different Object pool implementation. It would be nice to be able to switch from one to another by using a system property in the future. This would also allow to more easily test things like https://github.com/netty/netty/pull/8052.

Modifications:

- Introduce ObjectPool class with static method that we now use internally to obtain an ObjectPool implementation.
- Wrap the Recycler into an ObjectPool and return it for now

Result:

Preparation for different ObjectPool implementations"
ffc3b2da72c09bb17fd1eb284e1b59bb4ed23b2a,"Validate pseudo and conditional HTTP/2 headers (#8619)


Motivation:

Netty HTTP/2 implementation is not 100% compliant to the spec. This
commit improves the compliance regarding headers validation,
in particular pseudo-headers and connection ones.

According to the spec:
   All HTTP/2 requests MUST include exactly one valid value for the
   "":method"", "":scheme"", and "":path"" pseudo-header fields, unless it is
   a CONNECT request (Section 8.3).  An HTTP request that omits
   mandatory pseudo-header fields is malformed (Section 8.1.2.6).

Modifications:

- Introduce Http2HeadersValidator class capable of validating HTTP/2
headers
- Invoke validation from DefaultHttp2ConnectionDecoder#onHeadersRead
- Modify tests to use valid headers when required
- Modify HttpConversionUtil#toHttp2Headers to not add :scheme and
:path header on CONNECT method in order to conform to the spec

Result:

- Initial requests without :method, :path, :scheme will fail
- Initial requests with multiple values for :method, :path, :scheme
will fail
- Initial requests with an empty :path fail
- Requests with connection-specific header field will fail
- Requests with TE header different than ""trailers"" will fail
-
- Fixes 8.1.2.2 tests from h2spec #5761
- Fixes 8.1.2.3 tests from h2spec #5761"
bf07592668da9150890184c0a9b346aa3b312a73,Fix typo in test which did introduce a failing test after ffc3b2da72c09bb17fd1eb284e1b59bb4ed23b2a
9a473b4ff111dc08f2e6f50685db2e6cd34805fa,"Update to latest jdk8 release (#9717)

Motivation:

We should use latest jdk8 release to build on CI

Modifications:

Update to latest adoptjdk release

Result:

Use latest jdk8"
816350fba1ad2bbb05bfd241a5c293d794f8fda5,"Respect all informational status codes. (#9712)

Motivation:

HTTP 102 (WebDAV) is not correctly treated as an informational response

Modification:

Delegate all `1XX` status codes to superclass, not just `100` and `101`.

Result:

Supports WebDAV response.
Removes a huge maintenance [headache](https://github.com/line/armeria/pull/2210) in Armeria which has forked the class for these features"
de537b98ef4a2fcf64810d801343ab77506c11ea,"Complete todo in SelfSignedCertificate (#9720)

Motivation:

Easier to debug SelfSignedCertificate failures.

Modifications:

Add first throwable as suppressed to thrown exception.

Result:

Less technical debt."
939e928312f1099373582f9811817a6226550987,"Introduce MacOSDnsServerAddressStreamProvider which correctly detect all nameserver configuration on MacOS (#9161)

Motivation:

On MacOS it is not really good enough to check /etc/resolv.conf to determine the nameservers to use. We should retrieve the nameservers using the same way as mDNSResponser and chromium does by doing a JNI call.

Modifications:

Add MacOSDnsServerAddressStreamProvider and testcase

Result:

Use correct nameservers by default on MacOS."
0ba9192e9d706afcef1529913cc83db469ee7fc2,Fix version for resolver-dns-native-macos introduced by 939e928312f1099373582f9811817a6226550987
ff2a7929235257642d8f63edb1c580347307f3ee,"Don't pollute FastThreadLocal for Threads with WeakHashMap if maxDelayedQueues == 0 (#9722)

Motivation:

If maxDelayedQueues == 0 we should never put any WeakHashMap into the FastThreadLocal for a Thread.

Modifications:

Check if maxDelayedQueues == 0 and if so return directly. This will ensure we never call FastThreadLocal.initialValue() in this case

Result:

Less overhead / memory usage when maxDelayedQueues == 0"
cf74acfce09feff66487a8dd32da9294ffe8c4fb,"Remove todo in StringEncoder (#9719)

Motivation:

StringEncoder is marked @Shareable and CharsetEncoder is not thread-safe.

Modifications:

Remove TODO.

Result:

Less technical debt."
a6681e74fb887bd2bdd2e37c01f6b4ae6d7e319d,"HttpClientCodec need to keep request / response pairs in sync all the… (#9721)


Motivation:

At the moment we miss to poll the method queue when we see an Informational response code. This can lead to out-of-sync of request / response pairs when later try to compare these.

Modifications:

Always poll the queue correctly

Result:

Always compare the correct request / response pairs"
4f6c21fa97c7daa68b110c7d9285ae80ed7e2e12,"Fix Http2Headers.method(...) javadocs (#9718)

Motivation:

The javadocs of Http2Headers.method(...) are incorrect, we should fix these.

Modifications:

Correct javadocs

Result:

Fixes https://github.com/netty/netty/issues/8068."
8d99aa1235d07376f9df3ae3701692091117725a,"Simplify WebSocket handlers constructor arguments hell #9698 (#9699)

### Motivation:

Introduction of `WebSocketDecoderConfig` made our server-side code more elegant and simpler for support.

However there is still some problem with maintenance and new features development for WebSocket codecs (`WebSocketServerProtocolHandler`, `WebSocketServerProtocolHandler`).

Particularly, it makes me ~~crying with blood~~ extremely sad to add new parameter and yet another one constructor into these handlers, when I want to contribute new feature.

### Modification:

I've extracted all parameters for client and server WebSocket handlers into config/builder structures, like it was made for decoders in PR #9116.

### Result:

* Fixes #9698: Simplify WebSocket handlers constructor arguments hell
* Unblock further development in this module (configurable close frame handling on server-side; automatic close-frame sending, when missed; memory leaks on protocol violations; etc...)

Bonuses:

* All defaults are gathered in one place and could be easily found/reused.
* New API greatly simplifies usage, but does NOT allow inheritance or modification.
* New API would simplify long-term maintenance of WebSockets module.

### Example

    WebSocketClientProtocolConfig config = WebSocketClientProtocolConfig.newBuilder()
        .webSocketUri(""wss://localhost:8443/fx-spot"")
        .subprotocol(""trading"")
        .handshakeTimeoutMillis(15000L)
        .build();
    ctx.pipeline().addLast(new WebSocketClientProtocolHandler(config));"
82376fd889b3f34af318bf48eb28673ef5789a31,"Remove an unnecessary expression in NioEventLoop (#9729)

Motivation:

Remove an unnecessary expression to make the code more readable

Modification:

Remove `eventLoop == null`

Result:

Fixes #9725"
9976ab7fe86e052d29ca7accf528c885e93dcb4c,"Prefer Log4J2 over Log4J1 for default InternalLoggerFactory (#9734)

##Motivation

The InternalLoggerFactory attempts to instantiate different logger
implementations to discover what is available on the class path,
accepting the first implementation that does not throw an exception.

Currently, the default ordering will attempt to instantiate a Log4j1
logger before Log4j2. For environments where both Log4j1 and Log4j2 are
available, this will result in using the older version. It seems that it
would be more intuitive to prefer the newer version, when possible.

##Modifications

Change the default ordering to attempt to use the Log4J2LoggerFactory
before the Log4JLoggerFactory.

##Result

For environments where both Log4j1 and Log4j2 are available on the class
path (but Slf4J is not available), Netty will now use Log4j2 instead of
Log4j1."
7c85c9ea0b3f6e83ffadbdcc54950f90f2486768,"Correctly update size of the Stack before doing any validation in Recycler (#9731)

Motivation:

We null out the element in the array after we decrement the current size of the Stack but not directly write back the updated size to the stored field. This is problematic as we do some validation before we write it back and so may never do so if the validation fails. This then later can lead to have null objects returned where not expected

Modifications:

Update size directly after null out object

Result:

No more unexpected null value possible"
1d57241565ef556db353036ef53f177e80ae9844,"Remove usage of finalizer in Recycler (#9726)

Motivation:

We currently use a finalizer to ensure we correctly return the reserved back to the Stack but this is not really needed as we can ensure we return it when needed before dropping the WeakOrderQueue

Modifications:

Use explicit method call to ensure we return the reserved space back before dropping the object

Result:

Less finalizer usage and so less work for the GC"
a18c57ea8779ceee0e4dccad7e981b36077fc557,"Externalize lazy execution semantic for EventExecutors (#9587)

Motivation

This is already done internally for various reasons but it would make
sense i.m.o. as a top level concept: submitting a task to be run on the
event loop which doesn't need to run immediately but must still be
executed in FIFO order relative all other submitted tasks (be those
""lazy"" or otherwise).

It's nice to separate this abstract ""relaxed"" semantic from concrete
implementations - the simplest is to just delegate to existing execute,
but for the main EL impls translates to whether a wakeup is required
after enqueuing.

Having a ""global"" abstraction also allows for simplification of our
internal use - for example encapsulating more of the common scheduled
future logic within AbstractScheduledEventExecutor.

Modifications

- Introduce public LazyRunnable interface and
AbstractEventExecutor#lazyExecute method (would be nice for this to be
added to EventExecutor interface in netty 5)
- Tweak existing SingleThreadEventExecutor mechanics to support these
- Replace internal use of NonWakeupRunnable (such as for pre-flush
channel writes)
- Uplift scheduling-related hooks into AbstractScheduledEventExecutor,
eliminating intermediate executeScheduledRunnable method

Result

Simpler code, cleaner and more useful/flexible abstractions - cleaner in
that they fully communicate the intent in a more general way, without
implying/exposing/restricting implementation details"
fb0d34a2f91697a4938eb19e75e55643de9b8581,"Avoid synthetic methods in Recycler (#9736)

Motivation

Currently the visibility of the various Recycler inner classes and their
fields isn't optimal. Some private members are accessed by other classes
resulting in synthetic methods, and other non-private classes/members
are only accessed privately and so can be made private.

Modifications

- Increase/reduce visibility of various fields/methods/classes within
Recycler
- Have WeakOrderQueue extend WeakReference<Thread> to eliminate the
owner field
- Change local DefaultHandle var to DefaultHandle<?> to avoid raw type
compiler warning

Result

Tidier code, fewer implicit methods on hot paths (reducing inlining
depths)"
656371ee733454f9cf7691f60d2d1acd16c41c9a,"Upgrade various JDK flavors / version in our docker-compose files (#9737)

Motivation:

We should always test with the latest JDK versions on our CI.

Modifications:

Update versions

Result:

Use latest JDK versions on our CI"
369e667427dbadca95da935cbe8404b3691c68cb,"Make BlockHound tests run on Java 13 (#9742)

Motivation:
Java 13 requires special flags to be set to make BlockHound work

Modifications:
- Added jdk13 profile to `transport-blockhound-tests`
- Enabled `-XX:+AllowRedefinitionToAddDeleteMethods` on jdk13

Result:
The tests work on Java 13"
cedfa41f3ff06fdfef278912202b6615ac75d59a,"Test that `NettyBlockHoundIntegration` can be loaded with `ServiceLoader` (#9743)

Motivation:

If something is mis-configured, the ""main"" test will fail but it is unclear
whether it fails because the integration does not work or it wasn't applied
at all.
Also see:
https://github.com/netty/netty/issues/9738#issuecomment-548416693

Modifications:

This change adds a test that uses the same mechanism as BlockHound does
(`ServiceLoader`) and checks that `NettyBlockHoundIntegration` is present.

Result:

It is now clear whether the integration is not working or it wasn't loaded at all."
71860e5b94dbc665fdb8d279d3780d6fe1c618ea,"Enforce ratioMask also for WeakOrderQueue (#9727)

Motivation:

At the moment we only enfore ratioMask for the Stack which means that we only guard against recycle burts when recycled from the same Thread. We should also enforce the ratioMask in the WeakOrderQueue so we also guard against the bursts when recycle from other threads.

Modifications:

- Keep counter in WeakOrderQueue to enforce ratioMask as well
- Adjust unit test

Result:

Better guard against recycle bursts which could pollute the heap unnecessary."
2796407fe87d67c23d313ef7cb59cb473a81d0be,"Remove unnecessary line in Http2ClientUpgradeCodec (#9750)

Motivation:
To clean up code.

Modification:
Remove unnecessary line.

Result:
There's no functional change."
17bffce90e2051250be7eea85a3e327717a6aa7f,"Use interval instead of mask comparison for Recycler ratio (#9748)

Motivation

The recycling ratio is currently implemented by comparing with a masked
count. The mask operation is not free and also not necessary.

Modification

Change the count(s) to just iterate over the corresponding interval,
which requires only a comparison and no mask.

Also make ""first time recycle"" behaviour consistent and revert change to
RecyclerTest made in #9727.

Result

Less recycling overhead"
feb804dca8579c93ff3224564aafcf5938bb2c52,"Avoid extra Runnable allocs when scheduling tasks outside event loop (#9744)


Motivation

Currently when future tasks are scheduled via EventExecutors from a
different thread, at least two allocations are performed - the
ScheduledFutureTask wrapping the to-be-run task, and a Runnable wrapping
the action to add to the scheduled task priority queue. The latter can
be avoided by incorporating this logic into the former.

Modification

- When scheduling or cancelling a future task from outside the event
loop, enqueue the task itself rather than wrapping in a Runnable
- Have ScheduledFutureTask#run first verify the task's deadline has
passed and if not add or remove it from the scheduledTaskQueue depending
on its cancellation state
- Add new outside-event-loop benchmarks to ScheduleFutureTaskBenchmark

Result

Fewer allocations when scheduling/cancelling future tasks"
804c33ef465a1455269535c963efa663b593514a,"Cleanup Recycler to better encapsulate stuff (#9739)

Motivation:

We can move some methods etc to make encapsulation better in Recycler

Modifications:

Move / rename methods to make usage more clear

Result:

Code cleanup"
044beae3131c65b9fdbf2f60e9e232b1f87a53e0,"Remove padding when writing CONTINUATION frame (#9752)

Motivation:

Padding was removed from CONTINUATION frame in http2-spec, as showed in [PR](https://github.com/http2/http2-spec/pull/510). We should follow it.

Modifications:

- Remove padding when writing CONTINUATION frame in DefaultHttp2FrameWriter
- Add a unit test for writing large header with padding

Result:

More spec-compliant"
adc4a6170de66e9c60e9000728d795b4415b14d5,"Clean up expired docs. (#9756)

Motivation:
Since the `extractFrame` has used `retainedSlice` to avoid memory copy, we should clean this doc that was expired.

Result:
Better doc."
042b51ae5215721420916d3e436f0317f3e2b1d5,"Fix websocket examples (#9757)

Motivation:

After fix #9377 some websocket examples work incorrect

Modification:

Replace `Unpooled.EMPTY_BUFFER` to `ctx.alloc().buffer(0)` for responses with possible content

Result:

Examples work"
535d59849219b1a6fe93195565e9562c7570d3ae,"Introduce ByteBuf#isContiguous() method (#9735)

Motivation

There's currently no way to determine whether an arbitrary ByteBuf
behaves internally like a ""singluar"" buffer or a composite one, and this
can be important to know when making decisions about how to manipulate
it in an efficient way.

An example of this is the ByteBuf#discardReadBytes() method which
increases the writable bytes for a contiguous buffer (by readerIndex)
but does not for a composite one.

Unfortunately !(buf instanceof CompositeByteBuf) is not reliable, since
for example this will be true in the case of a sliced CompositeByteBuf
or some third-party composite implementation.

isContiguous was chosen over isComposite since we want to assume ""not
contiguous"" in the unknown/default case - the doc will it clear that
false does not imply composite.

Modifications

- Add ByteBuf#isContiguous() which returns true by default
- Override the ""concrete"" ByteBuf impls to return true and ensure
wrapped/derived impls delegate it appropriately
- Include some basic unit tests

Result

Better assumptions/decisions possible when manipulating arbitrary
ByteBufs, for example when combining/cumulating them."
85230bbca0dbbdf663c20d79de2196f8862d4635,"Fix encoding/decoding for UTF-8 stomp commands and headers (#9740)

Motivation:

According STOMP spec (https://stomp.github.io/stomp-specification-1.2.html#Value_Encoding) we have to encode and decode commands and headers to UTF-8

Modification:

Provide ability for StompSubframeDecoder and StompSubframeEncoder work with UTF-8"
b381cb253ab023ceb7cb7d1f5e9c5117b72fa2a2,"At the moment the cache provided by OpenSslCachingKeyMaterialProvider… (#9759)


Motivation:

At the moment te cache is not bound and so lead to huge memory consumpation. We should ensure its bound by default.

Modifications:

Ensure cache is bound

Result:

Fixes https://github.com/netty/netty/issues/9747."
394e7f0287ae41dff9f02d5a527ecb32922298fe,"Prevent memory leak when SimpleChannelPools are destroyed (#9760)

Motivation:

https://github.com/netty/netty/pull/9548 introduced a change that creates a new AttributeKey
for each SimpleChannelPool instance created. AttributeKeys are cached statically in a ConstantPool
by the AttributeKey.newInstance method. Because of this, creating a SimpleChannelPool instance will
allocate memory that will never be released, even after the SimpleChannelPool is closed.

Modifications:

This change goes back to a single AttributeKey per SimpleChannelPool, just using a more specific
name to reduce the chance of conflicts with user code.

Result:

No memory is leaked after a SimpleChannelPool instance is created and destroyed."
c35a80d6f7733419208be0db0482beda54f7979e,"Don't cache key material if sun.security.ssl.X509KeyManagerImpl is used (#9762)

Motivation:

sun.security.ssl.X509KeyManagerImpl will not use ""stable"" aliases and so aliases may be changed during invocations. This means caching is useless. Because of this we should disable the cache if its used.

Modifications:

- Disable caching if sun.security.ssl.X509KeyManagerImpl is used
- Add tests

Result:

More protection against https://github.com/netty/netty/issues/9747."
64bda51d40fb5009cb4556df26dbb43f7ce5bb1d,"Update to latest netty-tcnative release (#9763)

Motivation:

There is a new netty-tcnative release. We should use it.

Modifications:

Update to 2.0.27

Result:

Use latest netty-tcnative release"
dc618d6046ffccf6257f39b9ec88007192bfa215,"Add test to check Connection-Specific headers are removed in HTTP/2 (by HttpConversionUtil.toHttp2Headers) (#9766)

Motivation:
To avoid regression regarding connection-specific headers[1], we should add a test.
[1] https://tools.ietf.org/html/rfc7540#section-8.1.2.2

Modification:
Add test that checks the following headers are removed.
- Connection
- Host
- Keep-Alive
- Proxy-Connection
- Transfer-Encoding
- Upgrade

Result:
There's no functional change."
e55e3a59f9566f489c245bcf1ea35ea662ac7a59,"Add constants for fixed-header only MQTT messages (#9749)

Motivation:

Currently, the only way to create fixed-header only messages PINGREQ,
PINGRESP and DISCONNECT is to explicitly instantiate a `MqttFixedHeader` like:
```
MqttFixedHeader disconnectFixedHeader = new MqttFixedHeader(MqttMessageType.DISCONNECT,
    false, MqttQoS.AT_MOST_ONCE, false, 0);
MqttMessage disconnectMessage = new MqttMessage(disconnectFixedHeader);
```

According to the MQTT spec
(http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718077),
the fixed-header flags for these messages are reserved and  must be set to zero, otherwise
the receiver must close the connection. It's easy to mess this up when
you're creating the header explicitly, for e.g by setting the QoS bit to
`AT_LEAST_ONCE`.

As such, provide static constants for PINGREQ, PINGRESP and
DISCONNECT messages that will set the flags correctly for the developer.

Modification:

Add static constants to MqttMessage class to construct PINGREQ, PINGRESP and
DISCONNECT messages that will set the fixed-header flags correctly to 0.

Result:

Easier usage."
b0feb5a81fd03f35b9e26108efc71070d0a52288,"Reduce ByteBuffer duplication when resizing pooled direct ByteBufs (#9765)

Motivation:

Currently when use of Unsafe is disabled and an internal reallocation is
performed for a direct PooledByteBuf, a one-off temporary duplicate is
made of the source and destination backing nio buffers so that the
copy can be done in a threadsafe manner.

The need for this can be reduced by sharing the temporary duplicate
buffer that is already stored in the corresponding destination
PooledByteBuf instance.

Modifications:

Have PoolArena#memoryCopy(...) take the destination PooledByteBuf
instead of the underlying mem reference and offset, and use
internalNioBuffer() to obtain/initialize a reusable duplicate of the
backing nio buffer.

Result:

Fewer temporary allocations when resizing direct pooled ByteBufs in the
non-Unsafe case"
a1f9d50174d12521357917869d43e92996a4ab72,"Unify parameter validation's code style. (#9778)

Motivation:

Unify parameter validation's code style.

Modifications:

Change the parameter's validation statements to the method: ObjectUtil.checkNotNull.

Result:

The parameter's validation code will keep same style with other codes"
920fab6e335208ec1469ace04340018c045d77d8,"Improve java doc  for MINIMAL_WAIT (#9779)

Motivation:

MINIMAL_WAIT is the key constant. Thus, When we see the constant, we must read more code logic to see if it is ms or ns. So improving java doc will be better.

Modifications:
Improve java doc by add ""10ms"" such as DEFAULT_CHECK_INTERVAL with ""1s"".

Result:

Easy to know it is ms and keep same java doc style with other constants such as DEFAULT_CHECK_INTERVAL."
2f3622ee635bac23112ba35ce826331078f2c18b,"Enable generation of test JARs (#9774)

Motivation:

Netty currently doesn't build and distribute the test JARs. Having easy access to the test JARs would enable downstream projects (such as GraalVM) to integrate the Netty unit tests in their CI pipeline to ensure continous compatibility with Netty features. The alternative would be to build Netty from source every time to obtain the test jars, however, depending on the CI setup, that may not always be possible.
 
Modifications:

Modify `pom.xml` to enable generation of test JARs and corresponding source JARs.
 
Result:

Running the Maven build will create the test JARs and corresponding source JARs. This change was tested locally via `mvn install` and the test JARs are correctly copied under the Maven cache. The expectation is that running `mvn deploy` will also copy the additional JARs to the maven repository."
aa2a9931e8dbb3e4d54265c6e982c24bf12de1c9,"Add one new constructor with threadFactory only (#9773)

Motivation:
In most cases, we want to use MultithreadEventLoopGroup such as NioEventLoopGroup without setting thread numbers but thread name only. So we need to use followed code:
NioEventLoopGroup boss = new NioEventLoopGroup(0, new DefaultThreadFactory(""boss""));
It looks a bit confuse or strange for the number 0 due to we only want to set thread name. So it will be better to add new constructor for this case.

Modifications:
add new constructor into all event loop groups, for example: public NioEventLoopGroup(ThreadFactory threadFactory)

Result:
User can only set thread factory without setting the thread number to 0:
NioEventLoopGroup boss = new NioEventLoopGroup(new DefaultThreadFactory(""boss""));"
7632de7084ed6bdb2527796690b28f92f33b7873,"Update to latest recommended maven version (#9785)

Motivation:

Latest recommended maven version is 3.6.2 so we should use it

Modifications:

Update from 3.5.2 to 3.6.2

Result:

Use latest recommended maven version"
b5230c7b9c38e4c1e3a611c6ce1e057252b98ed6,"Send close frame on channel close, when this frame was not send manually (#9745)

Motivation:
By default CloseWebSocketFrames are handled automatically.
However I need manually manage their sending both on client- and on server-sides.

Modification:
Send close frame on channel close automatically, when it was not send before explicitly.

Result:
No more messages like ""Connection closed by remote peer"" for normal close flows."
43252a61352f2785c19e321c67d5ac87aee4d172,"Update to latest JMH version (#9787)

Motivation

JMH 1.22 was released recently, we might as well use the latest when
running benchmarks.

Summary of changes:
https://mail.openjdk.java.net/pipermail/jmh-dev/2019-November/002879.html

Modifications

Update jmh dependencies in microbench module from version 1.21 to 1.22.

Result

Benchmarks run using latest JMH"
b413464091608c3bad00f4d072aaad29bac60554,"Optimize WriteTask recycling (#9800)

Motivation

AbstractChannelHandlerContext uses recyclable tasks when performing
writes from outside of the event loop. There's currently two distinct
classes WriteTask and WriteAndFlushTask used for executing writes versus
writeAndFlushes, and these are recycled in separate pools. However it is
straightforward to just have a single class / recycler pool, with a
flush flag.

Modifications

- Unify WriteTasks into a single class using the sign bit of the
existing size field to indicate whether a flush should be performed
- Use the new executor lazyExecute() method to lazily execute the
non-flush write tasks explicitly
- Change AbstractChannelHandlerContext#invokeWrite and
AbstractChannelHandlerContext#invokeWriteAndFlush from private to
package-private to avoid synthetic methods
- Correct the default object size estimate for WriteTask

Results

- Possibly improved reuse of recycled write tasks
- Fewer virtual method calls and shorter path lengths
- Less code"
38109b288e6cb2137c9d89bd0e498cfb3aef3048,"Remove dependency on GLIBC 2.12 by using syscalls directly (#9797)

Motivation:

394a1b3485000c211595aff7495c4f863972af29 introduced a hard dependency on GLIBC 2.12 which was not the case before. This had the effect of not be able to use the native epoll transports on platforms which ship with earlier versions of GLIBC.
To make things a backward compatible as possible we should not introduce such changes in a bugfix release.

Special thanks to @weissi with all the help to fix this.

Modifications:

- Use syscalls directly to remove dependency on GLIBC 2.12
- Make code consistent that needs newer GLIBC versions
- Adjust scattering read test to only run if recvmmsg syscall is supported
- Cleanup pom.xml as some stuff is not needed anymore after using syscalls.

Result:

Fixes https://github.com/netty/netty/issues/9758."
09eed19438ca42eace467308aea72a707db7ea71,"Log expected STREAM_CLOSED exceptions for already closed streams at DEBUG level (#9798)

Motivation:

There is an intrinsic race between a local session resetting a stream
and the peer no longer sending any frames. This can result in the
session receiving frames for a stream that the local peer no longer
tracks. This results in a StreamException being thrown which triggers a
RST_STREAM frame, which is a good thing, but also logging at level WARN,
which is noisy for an expected and benign condition.

Modification:

Change the log level to DEBUG when logging stream errors with code
STREAM_CLOSED. All others are more interesting and will continue to be
logged at level WARN.

Additionally, it was found that DATA frames for streams that could not
have existed only resulted in a StreamException when the spec is clear
that such a situation should be fatal to the connection, resulting in a
GOAWAY(PROTOCOL_ERROR).

Fixes #8025."
ad67d1d7517742e67aae3da9e7c0d9f2bc3fb172,"Correctly only active not_x86_64 profile when using a non x86_64 platform (#9805)

Motivation:

21720e4a7865b77d252a4263271663d7ed462440 introduced a change which aimed to enable the not_x86_64 profile when building on a x86_64 platform. Unfortunaly it made an assemption which not holds true and so the profile was already enabled. This lead to the situation that native SSL tests were skipped if non boringssl impl was used.

Modifications:

Fix profile activation to work as expected

Result:

Correctly run aal native SSL tests"
e208e96f128b43cbd41654c94eacfbce732fa62d,"Clean up NioEventLoop (#9799)

Motivation

The event loop implementations had become somewhat tangled over time and
work was done recently to streamline EpollEventLoop. NioEventLoop would
benefit from the same treatment and it is more straighforward now that
we can follow the same structure as was done for epoll.

Modifications

Untangle NioEventLoop logic and mirror what's now done in EpollEventLoop
w.r.t. the volatile selector wake-up guard and scheduled task deadline
handling.

Some common refinements to EpollEventLoop have also been included - to
use constants for the ""special"" deadline/wakeup volatile values and to
avoid some unnecessary calls to System.nanoTime() on task-only
iterations.

Result

Hopefully cleaner, more efficient and less fragile NIO transport
implementation."
6e3d784a2cc8a065a1725d758c5fe28cca18b3aa,"Support Passing KeyManager and TrustManager into SslContextBuilder (#9805) (#9786)

Motivation:

This is a PR to solve the problem described here: https://github.com/netty/netty/issues/9767
Basically this PR is to add two more APIs in SslContextBuilder, for users to directly specify
the KeyManager or TrustManager they want to use when building SslContext. This is very helpful
when users want to pass in some customized implementation of KeyManager or TrustManager.

Modification:

This PR takes the first approach in here:
https://github.com/netty/netty/issues/9767#issuecomment-551927994 (comment)
which is to immediately convert the managers into factories and let factories continue to pass
through Netty.

1. Add in SslContextBuilder the two APIs mentioned above
2. Create a KeyManagerFactoryWrapper and a TrustManagerFactoryWrapper, which take a KeyManager
and a TrustManager respectively. These are two simple wrappers that do the conversion from
XXXManager class to XXXManagerFactory class
3.Create a SimpleKeyManagerFactory class(and internally X509KeyManagerWrapper for compatibility),
which hides the unnecessary details such as KeyManagerFactorySpi. This serves the similar
functionalities with SimpleTrustManagerFactory, which was already inside Netty.

Result:

Easier usage."
ed1fa0d77591b12d65cea49ef550376979cba8b5,"Fix the transport-native-unix-common build on FreeBSD (#9814)

Motivation:

Modern versions of FreeBSD define IP_RECVORIGDSTADDR, but don't define
SOL_IP.  This causes the build to fail.

Modifications:

The equivalent to SOL_IP on FreeBSD is IPPROTO_IP.  Define SOL_IP as that
if SOL_IP is not defined and IPPROTO_IP is.

Result:

This allows a successful build on FreeBSD"
5f5776c3e6e5a8a53c5fef6eb1471c95041b81f5,"Correctly guard against multiple RST frames for the same stream (#9811)

Motivation:

Http2ConnectionHandler tries to guard against sending multiple RST frames for the same stream. Unfortunally the code is not 100 % correct as it only updates the state after it calls write. This may lead to the situation of have an extra RST frame slip through if the second write for the RST frame is done from a listener that is attached to the promise.

Modifications:

- Update state before calling write
- Add unit test

Result:

Only ever send one RST frame per stream"
2886bd667711f9d2f65feed35339e0585057c52d,"Simplify Deflate* implementations by using EmbeddedChannel.finishAndReleaseAll() (#9808)

Motivation:

We can simplify the code by just using finishAndReleaseAll()

Modifications:

Remove some code and simplify

Result:

Cleaner code"
6d0c0e991bc78629369f5be83b847f5e201222b6,"Small simplification to WriteTask optimization (#9807)

Motiviation

#9800 was just merged which consolidates the flush/no-flush WriteTasks
in AbstractChannelHandlerContext, but after looking at the changes again
I noticed a tiny simplification that would be good to make imo.

Modification

Remove use of conditional operator in decrementPendingOutboundBytes()

Result

Simpler code, one less branch"
19a46338595beba0ae3854a6346ec6f2ec73a0b9,"Bugfix #9673: Origin header is always sent from WebSocket client (#9692)

### Motivation:

Those who need 'Origin' or 'Sec-WebSocket-Origin' headers should provide them explicitly, like it is stated in WebSocket specs.

E.g. through custom headers:

    HttpHeaders customHeaders = new DefaultHttpHeaders()
        .add(HttpHeaderNames.ORIGIN, ""http://localhost:8080"");
    new WebSocketClientProtocolHandler(
        new URI(""ws://localhost:1234/test""), WebSocketVersion.V13, subprotocol, 
        allowExtensions, customHeaders, maxFramePayloadLength, handshakeTimeoutMillis)


### Modification:

* Remove enforced origin headers.
* Update tests

### Result:

Fixes #9673: Origin header is always sent from WebSocket client"
4a6f5b19b7f51a7016b7b659a549b5b3b34ad35c,"Use latest maven release (#9820)

Motivation:

Apache Maven 3.6.3 was released

Modifications:

Update to latest version

Result:

Use latest version to build"
030ab560d0c76c79feb0578a3bb3587f5d30f6f4,"Correctly set writerIndex when EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE is used in all cases (#9819)

Motivation:

Due a bug we did not correctly set the writerIndex of the ByteBuf when a
user specified EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE but we ended
up with a non scattering read.

Modifications:

- Set writerIndex to the correct value
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/9788"
98615a0de5ffb41dbf29ef449a75d5d1d3e60aa0,"Don't send window update frame for unconsumed bytes when stream is already closed (#9816)

Motivation:

At the moment we send a window update frame for the connection + stream when a stream is closed and there are unconsumed bytes left. While we need to do this for the connection it makes no sense to write a window update frame for the stream itself as it is already closed

Modifications:

- Don't write the window update frame for the stream when the stream is closed
- Add unit test

Result:

Don't write the window frame for closed streams"
3654d2c245146c344bb0d27052990da1059161f9,"Use EmbeddedChannel.finishAndReleaseAll() to remove boiler-plate code (#9824)

Motivation:

We can make use of EmbeddedChannel.finishAndReleaseAll() and so remove some code

Modifications:

Use finishAndReleaseAll()

Result:

Less code to maintain"
d0f94200e83aeba1b33eea42538f8130bdb5232b,"Call ctx.flush() when onStreamClosed(...) produces a window update frame (#9818)

Motivation:

We use the onStreamClosed(...) callback to return unconsumed bytes back to the window of the connection when needed. When this happens we will write a window update frame but not automatically call ctx.flush(). As the user has no insight into this it could in the worst case result in a ""deadlock"" as the frame is never written out ot the socket.

Modifications:

- If onStreamClosed(...) produces a window update frame call ctx.flush()
- Add unit test

Result:

No stales possible due unflushed window update frames produced by onStreamClosed(...) when not all bytes were consumed before the stream was closed"
88712a9ea2efd0f1decfad7d785c6b88026f6f96,"Improve error handling in ByteToMessageDecoder when expand fails (#9822)

Motivation:

The buffer which the decoder allocates for the expansion can be
leaked if there is a subsequent issue writing to it.

Modifications:
The error handling has been improved so that the new buffer always
is released on failure in the expand.

Result:
The decoder will not leak in this scenario any more.

Fixes: https://github.com/netty/netty/issues/9812"
9ba13f0afc27f4847ba0f4140b03d44e0df789f6,"Correctly handle fragmented Handshake message when trying to detect SNI (#9806)

Motivation:

At the moment our AbstractSniHandler makes the assemption that Handshake messages are not fragmented. This is incorrect as it is completely valid to split these across multiple TLSPlaintext records.

Thanks to @sskrobotov for bringing this to my attentation and to @Lukasa for the help.

Modifications:

- Adjust logic in AbstractSniHandler to handle fragmentation
- Add unit tests

Result:

Correctly handle fragmented Handshake message in AbstractSniHandler (and so SniHandler)."
df121e5e55606a2b0d0e5995de4178e6814d194c,"Replace map with set. (#9833)


Motivation:
Replace Map with Set. `reportedLeaks` has better semantics as a Set, and if it is a Map, it seems that the value of this Map has no meaning to us.

Modifications:

Use Set.

Result:
Cleaner code"
dcbfe17eeb588a8ba2acb95800776526d01cc5a2,"Prevent any leaks when HttpPostStandardRequestDecoder constructor throws (#9837)

Motivation:

HttpPostStandardRequestDecoder may throw multiple different exceptions in the constructor which could lead to memory leaks. We need to guard against this by explicit catch all of them and rethrow after we released any allocated memory.

Modifications:

- Catch, destroy and rethrow in any case
- Ensure we correctly wrap IllegalArgumentExceptions
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/9829"
0af9c1089eb56a15735cc7a87d7796bdf7d45ff1,"Update to netty-tcnative 2.0.28.Final (#9846)

Motivation:

netty-tcnative 2.0.28.Final was released

Modifications:

Update to latest version

Result:

Use latest version of netty-tcnative"
3d47da0aacfe3e333f63b50e35fa3c85218a3aeb,"Correctly take architecture into account when define syscalls for recvmmsg and sendmmsg usage (#9844)

Motivation:

https://github.com/netty/netty/pull/9797 changed the code for recvmmsg and sendmmsg to use the syscalls directly to remvove the dependency on newer GLIBC versions. Unfortunally it made the assumption that the syscall numbers are the same for different architectures, which is not the case.

Thanks to @jayv for pointing it out

Modifications:

Add #if, #elif and #else declarations to ensure we pick the correct syscall number (or not support if if the architecture is not supported atm).

Result:

Pick the correct syscall number depending on the architecture."
385a17b10373b327c3a4b0033ce97faee1160a79,"Include JCTools sources for shaded classes in the sources jar (#9838)

Motivation:

We should include the shaded sources for JCTools in our sources jar to make it easier to debug.

Modifications:

- Adjust plugin configuration to execute plugins in correct order
- Update source plugin
- Add configuration for shade plugin to generate source jar content

Result:

Fixes https://github.com/netty/netty/issues/6640."
a322addb17f2cfb30969f0b555e7509c460710a8,"Asynchronously close pools in AbstractChannelPoolMap (#8238) (#9830)

Motivation:

In certain scenarios mutliple concurrent AbstractChannelPoolMap
operations might be called from event loops that handle also
ChannelPool close operations. If the map uses synchronous close
it could end up blocking the event loop and if multiple threads
are waiting for each other a deadlock might occur.

Modifications:

Previously #9226 introduced a closeAsync operation for
FixedChannelPool, which is now extended to SimpleChannelPool class.
The AbstractChannelPoolMap now uses the closeAsync operations when
closing redundant or removed SimpleChannelPool instances.

Result:

The AbstractChannelPoolMap get/remove operations will not wait
until the pools are closed as they will happen asynchronously and
avoid situations that could cause the event loop being blocked in
deadlocks."
63d33b390ad667b62b39bd1248c5143def7d7c91,"Minor simplifications/optimizations to AbstractByteBuf methods (#9845)

Motivation

While working on other changes I noticed some opportunities to
streamline a few things in AbstractByteBuf.

Modifications

- Avoid duplicate ensureAccessible() checks in discard(Some)ReadBytes()
and ensureWritable0(int) methods
- Simplify ensureWritable0(int) logic
- Make some conditional checks more concise

Result

Cleaner, possibly faster code"
e69c4173ea09250cf91e92c09feaf6f70971223a,"Replace synchronized with ConcurrentHashMap in Http2StreamChannelBootstrap (#9848)

Motivation:

97361fa2c89da57e88762aaca9e2b186e8c148f5 replace synchronized with ConcurrentHashMap in *Bootstrap classes but missed to do the same for the Http2 variant.

Modifications:

- Use ConcurrentHashMap
- Simplify code in *Bootstrap classes

Result:

Less contention"
d6638d53737736ec50f13b49edb158bc45dc88fd,"Correctly close `EmbeddedChannel` and release buffers in `SnappyFrameDecoderTest` (#9851)

Motivation:

We did not correctly close the `EmbeddedChannel` which would lead to not have `handlerRemoved(...)` called. This can lead to leaks. Beside this we also did not correctly consume produced data which could also show up as a leak.

Modifications:

- Always call `EmbeddedChannel.finish()`
- Ensure we consume all produced data and release it

Result:

No more leaks in test. This showed up in https://github.com/netty/netty/pull/9850#issuecomment-562504863."
15b6ed92a03ad8cd5e95bc0971f09afa5094f29c,"SnappyFrameDecoderTest ByteBuf leak (#9854)

Motivation:
SnappyFrameDecoderTest has a few tests which fail to close the EmbeddedChannel
and therefore may leak ByteBuf objects.

Modifications:
- Make sure EmbeddedChannel#finishAndReleaseAll() is called in all tests

Result:
No more leaks from SnappyFrameDecoderTest."
e875e59a9bbe10671240e7ee96fee1a35eaee045,"DefaultHttp2ConnectionEncoder writeHeaders method always send an head frame with a priority (#9852)

Motivation:

The current implementation delegates to writeHeaders(ChannelHandlerContext ctx, int streamId, Http2Headers headers, int streamDependency, short weight, boolean exclusive, int padding, boolean endStream, ChannelPromise promise) that will send an header frame with the priority flag set and the default priority values even if the user didnt want too.

Modifications:

- Change DefaultHttp2ConnectionEncoder to call the correct Http2FrameWriter method depending on if the user wants to use priorities or not
- Adjust tests

Result:

Fixes https://github.com/netty/netty/issues/9842"
0cde4d9cb4d19ddc0ecafc5be7c5f7c781a1f6e9,"Uniform null pointer check. (#9840)

Motivation:
Uniform null pointer check.

Modifications:

Use ObjectUtil.checkNonNull(...)

Result:
Less code, same result."
84547029d99cc8e35354983eb5fcaf5f933cb0ae,"Change DefaultByteBufHolder.equals() to treat instances of different classes as not equal (#9855)


# Motivation:
`DefaultByteBufHolder.equals()` considers another object equal if it's an instance of `ByteBufferHolder` and if the contents of two objects are equal. However, the behavior of `equals` method is not a part of the `ByteBufHolder` contract so `DefaultByteBufHolder`'s version may be causing violation of the symmetric property if other classes have different logic.
There are already a few classes that are affected by this: `DefaultHttp2GoAwayFrame`, `DefaultHttp2UnknownFrame`, and `SctpMessage` are all overriding `equals` method breaking the symmetric property.
Another effect of this behavior is that all instances with empty data are considered equal. That may not be desireable in the situations when instances are created for predefined constants, e.g. `FullBulkStringRedisMessage.NULL_INSTANCE` and `FullBulkStringRedisMessage.EMPTY_INSTANCE` in `codec-redis`. 

# Modification:
Make `DefaultByteBufHolder.equals()` implementation only work for the objects of the same class.

# Result:
- The symmetric property of the `equals` method is restored for the classes in question.
- Instances of different classes are not considered equal even if the content of the data they hold are the same."
4138cba86138b390f934e615ad4f96bad621124d,"Add Server Cookie Parser overload for multiple cookies. (#9856)

Motivation:

Multiple cookie values can be present in a single header.

Modification:

Add `decodeAll` overload which returns all cookies

Result:

Fixes #7210

Note:

This change is not as perscriptive as the ideas brought up in the linked issue.  Changing the Set implementation or the equals/compareTo definition is likely a breaking change, so they are practical."
66fca3b58e82c680674b49dea1cdcfa69ffa5266,"Update ChannelOutboundBuffer.java (#9863)

Motivation:

fix comment of ChannelOutboundBuffer.CHANNEL_OUTBOUND_BUFFER_ENTRY_OVERHEAD

Modifications:

6 (NOT 8) reference fields is right

Result:
Correct comment"
af58bfcfb802e2b05549deb93c6ec219ef6be77b,"Synchronously close pools when closing AbstractChannelPoolMap (#9857)

Motivation:

In #9830 the get/remove/close methods implementation changed to avoid
deadlocks on event loops. The change involved modifying the methods to
close the managed ChannelPools asynchronously and return immediately.
While this behavior might be fine for get/remove, it is changing what
a user expects from a close() method and after returning from close()
there might be still resources open.

Modifications:

This change is a follow-up for #9830 to preserve the synchronous
behavior of the AbstractChannelPoolMap#close() method.

Result:

AbstractChannelPoolMap#close() returns once the managed pools have
been closed."
ed16da2e845b08235a66e34c859a20026387d009,"Ensure scheduled tasks are executed before shutdown (#9858)

Motivation:

In #9603 the executor hung on shutdown because of an abandoned task
on another executor the first was waiting for.

Modifications:

This commit modifies the executor shutdown sequence to include
switching to SHUTDOWN state and then running all remaining tasks.
This ensures that no more tasks are scheduled after SHUTDOWN and
the last pass of running remaining tasks will take it all.
Any tasks scheduled after SHUTDOWN will be rejected.

This change preserves the functionality of graceful shutdown with
quiet period and only adds one more pass of task execution after
the default shutdown process has finished and the executor is
ready for termination.

Result:

After this change tasks that succeed to be added to the executor will
be always executed. Tasks which come late will be rejected instead of
abandoned."
9fa8b02dbd119aa9fb6af01bbe719f30a5489145,"Revert ""Epoll: Avoid redundant EPOLL_CTL_MOD calls (#9397) (#9583)""

This reverts commit 2b9f69ac3833b5409b7115b999967cdf3e4e4968."
cf63bc1005ec7b7193d2a53ac6a7881191ce1096,"Fix #9770, last frame may contain extra data that doesn't affect decompression (#9832)

Motivation:
Client can split data into different numbers of fragments and sometimes the last frame may contain trash data that doesn't affect decompression process.

Modification:
Added check if last frame is `ContinuationWebSocketFrame` and decompression data is empty
then don't throw an exception.

Result:
Fixes #9770"
a7c18d44b46e02dadfe3da225a06e5091f5f328e,"Detect missing colon when parsing http headers with no value (#9871)

Motivation:

Technical speaking its valid to have http headers with no values so we should support it. That said we need to detect if these are ""generated"" because of an ""invalid"" fold.

Modifications:

- Detect if a colon is missing when parsing headers.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9866"
0992718f87bf0f0c23660489b1f7e697a24f2a4b,"#9867 fix confusing method parameter name (#9874)

Motivation:

Parameter name is confusing and not match the actual type.

Modification:

Rename parameter.

Result:

Code cleanup"
9a0ccf24f32ff8d5a9b3485cc379ae04ea1c0cd3,"Add unit test for leak aware CompositeByteBuf that proves that there is no NPE (#9875)

Motivation:

https://github.com/netty/netty/issues/9873 reported a NPE in previous version of netty. We should add a unit test to verify there is no more NPE

Modifications:

Add a unit test

Result:

Prove that https://github.com/netty/netty/issues/9873 is fixed"
8494b046ec7e4f28dbd44bc699cc4c4c92251729,"Verify we do not receive multiple content-length headers or a content-length and transfer-encoding: chunked header when using HTTP/1.1 (#9865)

Motivation:

RFC7230 states that we should not accept multiple content-length headers and also should not accept a content-length header in combination with transfer-encoding: chunked

Modifications:

- Check for multiple content-length headers and if found mark message as invalid
- Check if we found a content-length header and also a transfer-encoding: chunked and if so mark the message as invalid
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9861"
e7091c04d78e29ad8f6843b96f2c47184b03f7a4,"Channel Pool LocalAddress initialization and cleanup (#9879)


Motivation:
The Channel Pool tests commonly use the same fixed local address String. This
has been observed to result in test failures if a single test fails and cleanup
is not done properly, or if tests are run in parallel. Also each test should
close any channel pool objects or maps to make sure resources are reclaimed.

Modifications:
- Use a random string for the address on each test to reduce the chance of
  collision.
- close all ChannelPool and ChannelPoolMap objects at the end of each test

Result:
Less likely to observe spurious failures due to LocalAddress collisions and more
complete test cleanup."
ee7027288ec5f3d688be3cee45a521a5786ccf71,"ByteToMessageDecoder Cumulator improments (#9877)

Motivation:
ByteToMessageDecoder's default MERGE_CUMULATOR will allocate a new buffer and
copy if the refCnt() of the cumulation is > 1. However this is overly
conservative because we maybe able to avoid allocate/copy if the current
cumulation can accommodate the input buffer without a reallocation. Also when the
reallocation and copy does occur the new buffer is sized just large enough to
accommodate the current the current amount of data. If some data remains in the
cumulation after decode this will require a new allocation/copy when more data
arrives.

Modifications:
- Use maxFastWritableBytes to avoid allocation/copy if the current buffer can
  accommodate the input data without a reallocation operation.
- Use ByteBufAllocator#calculateNewCapacity(..) to get the size of the buffer
  when a reallocation/copy operation is necessary.

Result:
ByteToMessageDecoder MERGE_CUMULATOR won't allocate/copy if the cumulation
buffer can accommodate data without a reallocation, and when a reallocation
occurs we are more likely to leave additional space for future data in an effort
to reduce overall reallocations."
3cad3c0ae71e67ce16eb7dcf34d908c188ca22de,"Revert ""Validate pseudo and conditional HTTP/2 headers (#8619)"" (#9893)

This reverts commit ffc3b2da72c09bb17fd1eb284e1b59bb4ed23b2a."
d24dfb1051183e14a1a2ca7875d9ab6a23b0d76f,"Revert ""Bugfix #9673: Origin header is always sent from WebSocket client (#9692)""

This reverts commit f48d9fa8d05cfe5848509d0ed2739cc857d071ce as this needs more thoughts."
5ddf45a2d51bf88e94ef5a60e0abdc492b008ce7,[maven-release-plugin] prepare release netty-4.1.44.Final
79d4e740190a466b4a63caeeccc37af31fd119b5,[maven-release-plugin] prepare for next development iteration
68cfab472ee005e554f1dd911679189a110282aa,"Ignore inline comments when parsing nameservers (#9894)

Motivation:

The resolv.conf file may contain inline comments which should be ignored

Modifications:

- Detect if we have a comment after the ipaddress and if so skip it
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/9889"
95b8db0633031e5b6143a54aba1b32d8340ba980,"Use array to buffer decoded query instead of ByteBuffer. (#9886)

Motivation:

In Java, it is almost always at least slower to use `ByteBuffer` than `byte[]` without pooling or I/O. `QueryStringDecoder` can use `byte[]` with arguably simpler code.

Modification:

Replace `ByteBuffer` / `CharsetDecoder` with `byte[]` and `new String`

Result:

After
```
Benchmark                                   Mode  Cnt  Score   Error   Units
QueryStringDecoderBenchmark.noDecoding     thrpt    6  5.612 ± 2.639  ops/us
QueryStringDecoderBenchmark.onlyDecoding   thrpt    6  1.393 ± 0.067  ops/us
QueryStringDecoderBenchmark.mixedDecoding  thrpt    6  1.223 ± 0.048  ops/us
```

Before
```
Benchmark                                   Mode  Cnt  Score   Error   Units
QueryStringDecoderBenchmark.noDecoding     thrpt    6  6.123 ± 0.250  ops/us
QueryStringDecoderBenchmark.onlyDecoding   thrpt    6  0.922 ± 0.159  ops/us
QueryStringDecoderBenchmark.mixedDecoding  thrpt    6  1.032 ± 0.178  ops/us
```

I notice #6781 switched from an array to `ByteBuffer` but I can't find any motivation for that in the PR. Unit tests pass fine with an array and we get a reasonable speed bump."
f995426a594c6aa40ecf228542a08fd256f260d5,"Avoid possible comparison contract violation (#9883)



Motivation:

The current implementation causes IllegalArgumetExceptions to be thrown on Java 11.

The current implementation would violate comparison contract for two cookies C1 and C2 with same path length, since C1 < C2 and C2 < C1. Returning 0 (equality) does not since C1 == C2 and C2 == C1. See #9881

Modification:

Return equality instead of less than on same path length.

Result:

Fixes #9881."
b615495762ac7cf0ebeb41494caf12d4fdfd54cd,"Add testcase for internal used Comparator in ClientCookieEncoder (#9897)

Motivation:

https://github.com/netty/netty/pull/9883 added a bug-fix for the Comparator in ClientCookieEncoder but did not add a testcase.

Modifications:

- Add testcase
- Simplify code

Result:

Include a test to ensure we not regress."
687308b4de56ff77a03d731d67153947497271f5,"Separate out query string encoding for non-encoded strings. (#9887)

Motivation:

Currently, characters are appended to the encoded string char-by-char even when no encoding is needed. We can instead separate out codepath that appends the entire string in one go for better `StringBuilder` allocation performance.

Modification:

Only go into char-by-char loop when finding a character that requires encoding.

Result:

The results aren't so clear with noise on my hot laptop - the biggest impact is on long strings, both to reduce resizes of the buffer and also to reduce complexity of the loop. I don't think there's a significant downside though for the cases that hit the slow path.

After
```
Benchmark                                     Mode  Cnt   Score   Error   Units
QueryStringEncoderBenchmark.longAscii        thrpt    6   1.406 ± 0.069  ops/us
QueryStringEncoderBenchmark.longAsciiFirst   thrpt    6   0.046 ± 0.001  ops/us
QueryStringEncoderBenchmark.longUtf8         thrpt    6   0.046 ± 0.001  ops/us
QueryStringEncoderBenchmark.shortAscii       thrpt    6  15.781 ± 0.949  ops/us
QueryStringEncoderBenchmark.shortAsciiFirst  thrpt    6   3.171 ± 0.232  ops/us
QueryStringEncoderBenchmark.shortUtf8        thrpt    6   3.900 ± 0.667  ops/us
```

Before
```
Benchmark                                     Mode  Cnt   Score    Error   Units
QueryStringEncoderBenchmark.longAscii        thrpt    6   0.444 ±  0.072  ops/us
QueryStringEncoderBenchmark.longAsciiFirst   thrpt    6   0.043 ±  0.002  ops/us
QueryStringEncoderBenchmark.longUtf8         thrpt    6   0.047 ±  0.001  ops/us
QueryStringEncoderBenchmark.shortAscii       thrpt    6  16.503 ±  1.015  ops/us
QueryStringEncoderBenchmark.shortAsciiFirst  thrpt    6   3.316 ±  0.154  ops/us
QueryStringEncoderBenchmark.shortUtf8        thrpt    6   3.776 ±  0.956  ops/us
```"
7f241f1f3ca52ce0d6d5b00d1aea02d2528b17e2,"Fix typos in javadocs (#9900)

Motivation:

Javadocs should have no typos.

Modifications:

Fix two typos

Result:

Less typos."
1d22fbd78c23efd0c99edceacfe96f677a2bc11d,"Other ByteToMessageDecoder streamlining (#9891)

Motivation

This PR is a reduced-scope replacement for #8931. It doesn't include the
changes related to how/when discarding read bytes is done, which we plan
to address in subsequent updates.

Modifications

- Avoid copying bytes in COMPOSITE_CUMULATOR in all cases, performing a
shallow copy where necessary; also guard against (unusual) case where
input buffer is composite with writer index != capacity
- Ensure we don't pass a non-contiguous buffer when MERGE_CUMULATOR is
used
- Manually inline some calls to ByteBuf#writeBytes(...) to eliminate
redundant checks and reduce stack depth

Also includes prior minor review comments from @trustin

Result

More correct handling of merge/composite cases and
more efficient handling of composite case."
bc026ef8ba70ab4f1be20ee4a768f16d834a4382,"Faster decodeHexNibble (#9896)

Motivation:

decodeHexNibble can be a lot faster using a lookup table

Modifications:

decodeHexNibble is made faster by using a lookup table

Result:

decodeHexNibble is faster"
06a5173e8d700f5f431557f21f647f2199bb3d52,"Utf8FrameValidator must release buffer when validation fails (#9909)

Motivation:

Utf8FrameValidator must release the input buffer if the validation fails to ensure no memory leak happens

Modifications:

- Catch exception, release frame and rethrow
- Adjust unit test

Result:

Fixes https://github.com/netty/netty/issues/9906"
2be3d888e73defb863ee460fc276a8959cb82604,"FlushConsolidationHandler may suppress flushes by mistake (#9931)

Motivation:

When `consolidatedWhenNoReadInProgress` is true, `channel.writeAndFlush (data) .addListener (f-> channel.writeAndFlush (data2))` Will cause data2 to never be flushed. 

Because the flush operation will synchronously execute the `channel.writeAndFlush (data2))` in the `listener`, and at this time, since the current execution thread is still an `eventloop`(`executor.inEventLoop()` was true), all handlers will be executed synchronously. At this time, since `nextScheduledFlush` is still not null, the `flush` operation of `data2` will be ignored in `FlushConsolidationHandler#scheduleFlush`.

Modification:

 - reset `nextScheduledFlush` before `ctx.flush`
 - use `ObjectUtil` to polish code

Result:

Fixes https://github.com/netty/netty/issues/9923"
76fb4c894af15cd1e30495a91074b2d95940e451,"use io.netty.leakDetection.targetRecords as replacement for io.netty.leakDetection.maxSampledRecords (#9925)

Motivation:

""io.netty.leakDetection.maxSampledRecords"" was removed in https://github.com/netty/netty/commit/16b1dbdf9244f831aa0cd92d5531d8cb61010b07

Modification:

Replaced it with targetRecords

Result: 

Use correct flag during test execution"
b82258b72fdf4c733d9c4a641c6b8725b036485f,"Introduce `needReport` for `ResourceLeakDetector`. (#9910)

Motivation:

We can extend `ResourceLeakDetector` through `ResourceLeakDetectorFactory`, and then report the leaked information by covering `reportTracedLeak` and `reportUntracedLeak`. However, the behavior of `reportTracedLeak` and `reportUntracedLeak` is controlled by `logger.isErrorEnabled()`, which is not reasonable. In the case of extending `ResourceLeakDetector`, we sometimes need `needReport` to always return true instead of relying on `logger.isErrorEnabled ()`.

Modification:

introduce `needReport` method and let it be `protected`

Result:

We can control the report leak behavior."
41c47b41bf0caa2f0faffec901a374516fbd19f7,"Fix event loop hang in SniHandler (#9933)


Motivation

A bug was introduced in #9806 which looks likely to be the cause of
#9919. SniHandler will enter an infinite loop if an SSL record is
received with SSL major version byte != 3 (i.e. something other than TLS
or SSL3.0)

Modifications

- Follow default path as intended  for majorVersion != 3 in
AbstractSniHandler#decode(...)
- Add unit test to reproduce the hang

Result

Fixes #9919"
ac69c877f1a9857fd8a97c704c882414e66c4920,"Fix SniHandlerTest when jdkCompatibilityMode is false (#9934)

Motivation:

41c47b4 introduced a change in an existing testcase which let the build fail when jdkCompatibilityMode is false.

Modifications:

Fix unit tests

Result:

Build passes when jdkCompatibilityMode is false as well"
f7d357312fa634431aa4af180691cb12efacd902,"Add TLS SNI Extension in HTTP/2 Client request. (#9937)


Motivation:

Since ""Http2ClientInitializer"" creates a new SSLContext Handler without specifying Host, Netty does not add SNI Extension in TLS Client Hello request and the request fails if the server uses SNI to establish TLS Connection. 

Modification:

Specified Host while creating a new SSLContext Handler in ""Http2ClientInitializer"".

Result:

Netty adds SNI Extension of the Host Specified in new SSLContext Handler and sends it with TLS Client Hello request.

Fixes #9815."
ba140ac6bcf24fdd90d1231ee397ba5a204c17e8,"Fix SimpleChannelPoolTest#testCloseAsync() test flake (#9943)

Motivation

This test is failing intermittently and upon inspection has a race
condition.

Modification

Fix race condition by waiting for async release calls to complete prior
to closing the pool.

Result

Hopefully fixed flakey test"
607bc05a2c1453323b2f8c67cbd4aff0d5b17531,"Fix BufferOverflowException during non-Unsafe PooledDirectByteBuf resize (#9912)


Motivation

Recent optimization #9765 introduced a bug where the native indices of
the internal reused duplicate nio buffer are not properly reset prior to
using it to copy data during a reallocation operation. This can result
in BufferOverflowExceptions thrown during ByteBuf capacity changes.

The code path in question applies only to pooled direct buffers when
Unsafe is disabled or not available.

Modification

Ensure ByteBuffer#clear() is always called on the reused internal nio
buffer prior to returning it from PooledByteBuf#internalNioBuffer()
(protected method); add unit test that exposes the bug.

Result

Fixes #9911"
136db8680afa73c7491277d6fed1e85e703fa905,[maven-release-plugin] prepare release netty-4.1.45.Final
9b1ea10a1275c143f2ce0424380d519ece776826,[maven-release-plugin] prepare for next development iteration
b7b6fc13b4a1cc5392f1ff428defca9647e421a9,"Close encoder when handlerRemoved. (#9950)

Motivation:

We should close encoder when `LzfEncoder` was removed from pipeline.

Modification:

call `encoder.close` when `handlerRemoved` triggered.

Result:

Close encoder to release internal buffer."
0fd0e7acbdd694380d89cca330484af0598fe6e0,"Remove @UnstableApi annotation from resolver-* (#9952)

Motivation:

The resolver API and implementations should be considered stable by now so we should not mark these with @UnstableApi

Modifications:

Remove @UnstableApi annotation from API and implementation of resolver

Result:

Make it explicit that the API is considered stable"
c9d8152e887e195c83fb16ce22cc3f97e5e60338,"Fix remove 'WebSocketServerExtensionHandler' from pipeline after upgrade  (#9940)

Motivation:

We should remove WebSocketServerExtensionHandler from pipeline after successful WebSocket upgrade even if the client has not selected any extensions.

Modification:

Remove handler once upgrade is complete and no extensions are used.

Result:

Fixes #9939."
8410b083b551d78d7c03081cd49b48987176a4fe,"Use JCTools 3.0 + do not break on shaded jars API changes (should not be used by downstream) (#9920)


Motivation:

Use latest JCTools, bug fixes etc.

Modification:

Change pom to depend on 3.0.0 version, and ignore shaded jar API changes

Result:

Using newer JCTools"
4c2fb0b55e139732da6cf7b88d0a730d8f57652b,"Enables lgtm.com to process this project and create a CodeQL database


Motivation:

I'm performing some security research against various Java-based projects as a part of the new [GitHub Security Lab](https://securitylab.github.com/) Bug Bounty program.
Currently, LGTM.com can't create a CodeQL database for this project because of missing dependencies. This fixes the build so it works correctly.

The maintainers may also want to consider enabling the free [LGTM Integration](https://github.com/marketplace/lgtm) once this PR is merged.

Modification:

Adds a `.lgtm.yml` with a tested configuration:
A successful build can be found here:
https://lgtm.com/logs/6695df28f6b2b1d3fd4d03e968b600a3e9c9aecf/lang:java

Result:

LGTM.com will be able to process this repository to create a CodeQL database."
34e3ea9ee8692a6ecd05f4d636d1020f0aa3edfa,"Add ResolveAddressHandler which can be used to resolve addresses on the fly (#9947)

Motivation:

At the moment resolving addresses during connect is done via setting an AddressResolverGroup on the Bootstrap. While this works most of the times as expected sometimes the user want to trigger the connect() from the Channel itself and not via the Bootstrap. For this cases we should provide a ChannelHandler that the user can use that will do the resolution.

Modifications:

Add ResolveAddressHandler and tests

Result:

Be able to resolve addresses without Bootstrap"
69cd04240195c4652413f7a14b7764981815968a,"Remove extra field from ChunkedWriteHandler to make it less error-prone (#9958)

Motivation:

At the moment we use an extra field in ChunedWriteHandler to hold the current write. This is not needed and makes sense even more error-prone. We can just peek in the queue.

Modifications:

Use Queue.peek() to keep track of current write

Result:

Less error-prone code"
de3b3678d7aa93d5c83b638082a43852699e4867,"Reduce allocations in ChunkedWriteHandler when processing the queued … (#9960)

Motivation:

At the moment we create a new ChannelFutureListener per chunk when trying to write these to the underlying transport. This can be optimized by replacing the seperate write and flush call with writeAndFlush and only allocate the listener if the future is not complete yet.

Modifications:

- Replace seperate write and flush calls with writeAndFlush
- Only create listener if needed, otherwise execute directly

Result:

Less allocations"
a7de4747d0979cc393307cd7cc54575476133135,"Add ByteBufFormat option to LoggingHandler (#9915)


Motivation

LoggingHandler is a very useful tool for debugging and for tracking the
sequence of events in a pipeline. LoggingHandler also includes the
functionality to log a hex dump of all written and received ByteBufs.
This can be useful for small messages, but for large messages, this can
potentially result in extremely large logs. E.g., a 1 MB payload will
result in over a 1 MB log message being recorded. While LoggingHandler
may only be intended for debugging, this can still be too excessive in
some debugging scenarios.

Modifications

* Create a new ByteBufFormat enum that allows users to specify ""SIMPLE""
or ""HEX_DUMP"" logging for ByteBufs.
* For all constructors that currently accept a LogLevel parameter,
create new overloaded constructors that also accept this enum as a
parameter.
* Continue to record hex dumps by default.

Result

Users will be able to opt out of full hex dump recording, if they wish
to."
066a180a43186ee5a54afdcca9077ab07328ff6a,"Initialize some classes at runtime to improve GraalVM support (#9963)

Motivation:

Deploying a Micronaut application as GraalVM native image to AWS Lambda with custom runtime fails when using Micronaut Http Client.

This PR initializes at runtime some classes needed to fix the issue. There is more information in our original issue in Micronaut https://github.com/micronaut-projects/micronaut-core/issues/2335#issuecomment-570151944

At this moment I've added those classes into Micronaut (https://github.com/micronaut-projects/micronaut-core/pull/2680/commits/b383d3ab14a8fb9368758f889f361e76994ac963) as a workaround but this should be included in Netty so it's available for everyone.

Modification:

Mark 3 classes to be initialized at runtime for GraalVM.

Result:

Mark 3 classes to be initialized at runtime for GraalVM."
a61e844c9a1a3829c77f42f3a31866b93d76b77d,"Use latest java 11 version when building via docker (#9968)

Motivation:

We should update the used java11 version when building via docker to the latest release

Modifications:

Update to 1.11.0-6

Result:

Use latest java11 version"
2023a4f60759772261280159bccb4869e63c14e7,"Remove usage of forbiddenHttpRequestResponder (#9941)

Motivation:

At the moment we add a handler which will respond with 403 forbidden if a websocket handshake is in progress (and after). This makes not much sense as it is unexpected to have a remote peer to send another http request when the handshake was started. In this case it is much better to let the websocket decoder bail out.

Modifications:

Remove usage of forbiddenHttpRequestResponder

Result:

Fixes https://github.com/netty/netty/issues/9913"
384eaf773cc668979192b8a9537fa5b2b91ce952,"Set keystoreType for JdkSslClientContext Keystores (#9965)

Motivation:

In the PR #9003, the issue #8998 was supposedly solved. But actually the fix only made it so the TrustManager can use the specified keystore type instead of also supporting it in the KeyManagerFactory.

In my environment, we are using PKCS#11 Keys which are then rejected by the PKCS#12 keystore. A PKCS#12 keystore is created since the keystoreType was set to null by the code from the mentioned PR.

Modification:

Do not ignore the keystoreType parameter during the creation of the JdkSslClientContext KeyManagerFactory.

Result:

Fixes #8998."
fb3ced28cf61f2dd8638a11fd0ede62b46cc2db7,"#9944 Merge WebSocketCloseFrameHandler into WebSocketProtocolHandler … (#9967)

…in order to minimize pipeline

Motivation:

Handling of `WebSocketCloseFrame` is part of websocket protocol, so it's logical to put it within the `WebSocketProtocolHandler`. Also, removal of `WebSocketCloseFrameHandler` will decrease the channel pipeline.

Modification:

- `WebSocketCloseFrameHandler` code merged into `WebSocketProtocolHandler`. `WebSocketCloseFrameHandler` not added to the pipeline anymore
- Added additional constructor to `WebSocketProtocolHandler`
- `WebSocketProtocolHandler` now implements `ChannelOutboundHandler` and implements basic methods from it

Result:

`WebSocketCloseFrameHandler` is no longer used.

Fixes https://github.com/netty/netty/issues/9944"
663fbaa50661eb5576d88aa0d053f2ccc2fae317,"SslHandler.wrap(...) must ensure it not loose the original exception when finishWrap(...) fails (#9974)

Motivation:

When SslHandler.finishWrap throws an exception, ensure that the promise and buf is not reused to avoid throwing IllegalArgumentException or IllegalReferenceCountException which causes the original exception to be lost.

Modification:

The change ensures that the values for the promise and bytebuf are nulled before calling finishWrap so that it will not be called again with the same arguments.

Result:

Fixes #9971 .

Co-authored-by: Norman Maurer <norman_maurer@apple.com>

Co-authored-by: Antony T Curtis <atcurtis@gmail.com>"
bbbfd5ca9f7c7b6918d4c54fa8335ebc208fbfba,"Update to java8-242 (#9978)

Motivation:

A new java 8 version was released, lets use it

Modifications:

Update to java8-242

Result:

Use latest java8 version"
eb50e5148a4d5d8229bdbdf49581a8b1d429ca06,"Initialize ThreadLocalRandom at runtime to improve GraalVM support (#9977)

Motivation:

We need to initialize ThreadLocalRandom at runtime as it uses System.nanoTime() in a static block to init the seed.

Modifications:

Add io.netty.util.internal.ThreadLocalRandom to properties file

Result:

Better support for GraalVM"
b49bd5644f3d0e5c44d5645cdcb3c454cd3a6845,"Use compile time constants instead of status field in WebSocketServer/ClientProtocolConfig (#9976)

Motivation:

Avoid allocation of default static `WebSocketServerProtocolConfig` and `WebSocketClientProtocolConfig` configs. Prefer compile time constants instead.

Modification:

Static field with config object replaced with constructor with default fields.

Result:

No more default config allocation and static field for it. Compile time variables used instead."
0671b18e24b1f53cee26a0d3104850da8d942654,"SSL / BlockHound works out of the box with the default SSL provider (#9969)

Motivation:

JDK is the default SSL provider and internally uses blocking IO operations.

Modifications:

Add allowBlockingCallsInside configuration for SslHandler runAllDelegate function.

Result:

When BlockHound is installed, SSL works out of the box with the default SSL provider.


Co-authored-by: violetagg <milesg78@gmail.com>"
6e5f229589bd122e70cb0eae8c968b4f9e3feb4e,"fix bug: scheduled tasks may not be executed (#9980)

Motivation:

If there was always a task in the taskQueue of GlobalEvenExecutor, scheduled tasks in the
scheduledTaskQueue will never be executed.

Related to  #1614

Modifications:

fix bug in GlobalEventExecutor#takeTask

Result:

fix bug"
1543218d3e7afcb33a90b728b14370395a3deca0,"Allow a limit to be set on the decompressed buffer size for ZlibDecoders (#9924)


Motivation:
It is impossible to know in advance how much memory will be needed to
decompress a stream of bytes that was compressed using the DEFLATE
algorithm. In theory, up to 1032 times the compressed size could be
needed. For untrusted input, an attacker could exploit this to exhaust
the memory pool.

Modifications:
ZlibDecoder and its subclasses now support an optional limit on the size
of the decompressed buffer. By default, if the limit is reached,
decompression stops and a DecompressionException is thrown. Behavior
upon reaching the limit is modifiable by subclasses in case they desire
something else.

Result:
The decompressed buffer can now be limited to a configurable size, thus
mitigating the possibility of memory pool exhaustion."
42aa7f0c58375c6fcdc9a3ed26b431999c63c6c7,"Update checkstyle to 8.29 and netty-build to 26 (#9990)

Motivation:

A new checkstyle version was released which fixes a security vulnerability.

Modifications:

- Update to latest checkstyle version
- Update netty-build to latest version to be compatible with latest checkstyle version

Result:

No more security vulnerability caused by checkstyle during build"
9bc20d3f7d97e04d628d45764606bbb03fa45b6b,"Use latest checkstyle version for all artifact as well. (#9993)

Motivation:

42aa7f0c58375c6fcdc9a3ed26b431999c63c6c7 did update the checkstyle version but missed that we declared it explicitly in the all artifact as well.

Modifications:

Remove explicit definition in the all artifact.

Result:

Use latest checkstyle version everywhere."
5f68897880467c00f29495b0aa46ed19bf7a873c,"Added tests for Transfer-Encoding header with whitespace (#9997)

Motivation:

Need tests to ensure that CVE-2020-7238 is fixed.

Modifications:

Added two test cases into HttpRequestDecoderTest which check that
no whitespace is allowed before the Transfer-Encoding header.

Result:

Improved test coverage for #9861"
07149729cc4c629200a0ca8f8e63f54ee05601c8,"Use correct system property name in PooledByteBufAllocator (io.netty.allocator.cacheTrimIntervalMillis) (#9994)

Motivation:

We had a typo in the system property name that was used to lookup the cache trime interval. We should ensure we use the correct naming when lookup the property

Modifications:

- Support the old and the new (correct) naming of the property when configure the cache trim interval.
- Log something if someone uses the old (deprecated) name

Result:

Fixes https://github.com/netty/netty/issues/9981"
77effdc4da76cb967b9c214b0682b742e90b4203,"Add SslClientHelloHandler which allows to do something based on the S… (#9827)


Motivation:

Sometimes it is useful to do something depending on the Ssl ClientHello (like for example select a SslContext to use). At the moment we only allow to hook into the SNI extension but this is not enough.

Modifications:

Add SslClientHelloHandler which allows to hook into ClientHello messages. This class is now also the super class of AbstractSniHandler

Result:

More flexible processing of SSL handshakes"
38b5607c6d5d9e1b8d99047610ef752136d890fe,"Copy IPV6-mapped-IPV4 addresses correctly in native code (#9996)

Motivation:

8dc6ad5 introduced IPV6-mapped-IPV4 address support but
copied the addresses incorrectly. It copied the first
4 bytes of the ipv6 address to the address byte array
at offset 12, instead of the other way around.

7a547aa implemented this correctly in netty_unix_socket.c
but it seems the change should've been applied to
netty_epoll_native.c as well.

The current behaviour will always set the address to
`0.0.0.0`.

Modifications:

Copy the correct bytes from the ipv6 mapped ipv4 address.
I.e. copy 4 bytes at offset 12 from the native address
to the byte array `addr` at offset 0.

Result:

When using recvmmsg with IPV6-mapped-IPV4 addresses,
the address will be correctly copied to the byte array
`addr` in the NativeDatagramPacket instance."
56055f4404fbebeb6403165d352d62330a1bf81d,"Ensure ChannelOptions are applied in the same order as configured in *Bootstrap (#9998)

Motivation:

https://github.com/netty/netty/pull/9458 changed how we handled ChannelOptions internally to use a ConcurrentHashMap. This unfortunally had the side-effect that the ordering may be affected and not stable anymore. Here the problem is that sometimes we do validation based on two different ChannelOptions (for example we validate high and low watermarks against each other). Thus even if the user specified the options in the same order we may fail to configure them.

Modifications:

- Use again a LinkedHashMap to preserve order
- Add unit test

Result:

Apply ChannelOptions in correct and expected order"
5bc644ba41c3c2f0eb1a12622b1854c3d620b29f,"Ensure ChannelOptions are applied in the same order as configured in Http2StreamChannelBootstrap (#9998) (#10001)

Motivation:

https://github.com/netty/netty/pull/9848 changed how we handled ChannelOptions internally to use a ConcurrentHashMap. This unfortunally had the side-effect that the ordering may be affected and not stable anymore. Here the problem is that sometimes we do validation based on two different ChannelOptions (for example we validate high and low watermarks against each other). Thus even if the user specified the options in the same order we may fail to configure them.

Modifications:

- Use again a LinkedHashMap to preserve order

Result:

Apply ChannelOptions in correct and expected order"
2a5118f824afefa53f1cd199cf56dee0746b8688,"add AUTH & EMPTY to SmtpCommand (#9999)

Motivation:
AUTH command is used to login to a SMTP server.
EMPTY command is for request with only parameter.

Modifications:
Add AUTH & EMPTY to SmtpCommand & SmtpRequests
Update SmtpRequestEncoder#writeParameters, handle SP according to
command
Add unit test

Result:
fix #9995"
e7f291629b404009eb49778b7633b83b4478a87d,"ClearTextHttp2ServerUpgradeHandler can be merged with inner PriorKnowledgeHandler (#10008)

Motivation:

ClearTextHttp2ServerUpgradeHandler is currently more complex then needed. We can simplify it by directly implement the prior-knowledge logic as part of the handler.

Modifications:

Merge inner PriorKnowledgeHandler logic into ClearTextHttp2ServerUpgradeHandler by extending ByteToMessageDecoder directly

Result:

Cleaner code and less pipeline operations"
a308ac94cd39db3430fb7250d49aa1fccb704f56,"Update to Blockhound 1.0.2 (#10007)


Motivation:

A new version of blockhound was released today

Modifications:

Upgrade to latest blockhound version

Result:

Use latest blockhound release"
a3e5e4876cf6ddb28e9896867517759fba4146ef,"FixedCompositeByteBuf.isDirect() may return wrong value when constructed with empty array (#10005)

Motivation:

FixedCompositeByteBuf.isDirect() should return the same value as EMPTY_BUFFER.isDirect() when constructed via an empty array

Modifications:

- Return correct value when constructed via empty array.
- Add unit test

Result:

FixedCompositeByteBuf.isDirect() returns correct value"
5114588cba45179c85b0ce141e10e1e16145af51,"Clear listeners when `AddressResolverGroups` close. (#10011) (#10012)

Motivation:

When an `AddressResolverGroup` closes, it can leave unwanted listeners attached to its `EventExecutor`'s termination future.

Modifications:

- Keep track of listeners attached to termination futures
- Clear listeners if the `AddressResolverGroup` closes before its associated executor(s)

Result:

Unwanted listeners no longer remain in memory after an `AddressResolverGroup` closes before its associated executor(s)."
238aa73e36fbfc418083cc8183525cb393e2cde8,"DefaultHttp2ConnectionDecoder notifies frame listener before connection of GOAWAYS (#10009)

Motivation:

Users of the DefaultHttp2ConnectionDecodcer are notified of inbound GoAwayFrames
after the connection has already closed any ignored streams, potentially
losing the signal that some streams may have been ignored by the peer and
are thus retryable.

Modifications:

Reorder the notifications of the frame and connection listeners to
propagate the frame first, giving the frame listeners the opportunity to
clean up ignored streams in their own way.

Result:
Fixes #9986"
629034624626b722128e0fcc6b3ec9d406cb3706,"Remove ""Content-Length"" when decoding HTTP/1.1 message with both ""Tra… (#10003)

Motivation

As part of a recent commit for issue
https://github.com/netty/netty/issues/9861 the HttpObjectDecoder was
changed to throw an IllegalArgumentException (and produce a failed
decoder result) when decoding a message with both ""Transfer-Encoding:
chunked"" and ""Content-Length"".

While it seems correct for Netty to try to sanitize these types of
messages, the spec explicitly mentions that the Content-Length header
should be *removed* in this scenario.

Both Nginx 1.15.9 and Tomcat 9.0.31 also opt to remove the header:
https://github.com/apache/tomcat/blob/b693d7c1981fa7f51e58bc8c8e72e3fe80b7b773/java/org/apache/coyote/http11/Http11Processor.java#L747-L755
https://github.com/nginx/nginx/blob/0ad4393e30c119d250415cb769e3d8bc8dce5186/src/http/ngx_http_request.c#L1946-L1953

Modifications

* Change the default behavior from throwing an IllegalArgumentException
to removing the ""Content-Length"" header
* Extract the behavior to a new protected method,
handleChunkedEncodingWithContentLength(), that can be overridden to
change this behavior (or capture metrics)

Result

Messages of this nature will now be successfully decoded and have their
""Content-Length"" header removed, rather than creating invalid messages
(decoder result failures). Users will be allowed to override and
configure this behavior."
536b83a1a822c8a160f31d3288be35e419d7a11c,"Reduce scope of synchronized block introduced in 5114588cba45179c85b0ce141e10e1e16145af51 (#10013)

Motivation:

We should keep the scope of the synchronized block as small as possible.

Modifications:

Reduce scope by copy to an array first before iterate through it

Result:

Smaller scope of synchronized"
a6896eae43af6ec1e01a7eb92cd80629224e5f83,"NioEventLoopTest.testChannelsRegistered test failure (#10014)

Motivation:

NioEventLoopTest.testChannelsRegistered sometimes fails due a race which is related to how SelectionKey and Selector is implemented in the JDK. In the current implementation it will ""lazy"" remove SelectionKeys from the Set which means we may still have these included sometimes when we use size() to get the number of SelectionKeys.

Modifications:

Just retry to read the number of registered Channels if we still see 2

Result:

Fixes https://github.com/netty/netty/issues/9895"
b410ff9c281d972807ae76ce7f8bbfad78b64d4c,"Fix of undefined behavior of null referencing (#10016)

Motivation:

Current code depends on some ""undefined behaviour"".

Modification:

Fix of undefined behavior of null referencing

Result:

Correct c code."
ef50cf5696a3d4d140308c6c93777dc1f9af3902,"remove unused shutdownLock (#10010)

Motivation:

This is unused variable

Modification:

removed variable

Result:

Removes unused lock

Co-authored-by: phani254 <phani254@yahoo.com>"
2d4b5abc9984e49b63ea52a959824a56186fea56,"HTTP/2 child channel may discard flush when done from an arbitrary thread (#10019)

Motivation:

We need to carefully manage flushes to ensure we not discard these by mistake due wrongly implemented consolidation of flushes.

Modifications:

- Ensure we reset flag before we actually call flush0(...)
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10015"
fcf55fcf718af1e4cae85eb86cdb679094186aed,"When BlockHound is installed, do not report GlobalEventExecutor/SingleThreadEventExecutor#takeTask as blocking call. (#10020)

Motivation:

GlobalEventExecutor/SingleThreadEventExecutor#taskQueue is BlockingQueue.

Modifications:

Add allowBlockingCallsInside configuration for GlobalEventExecutor/SingleThreadEventExecutor#takeTask.

Result:

Fixes #9984
When BlockHound is installed, GlobalEventExecutor/SingleThreadEventExecutor#takeTask is not reported as a blocking call."
f88a3434553c2ba328fbc2bcc7e0c100df441441,"Remove System.out.println(...) in test (#10024)

Motivation:

We did had some System.out.println(...) call in a test which seems to be some left-over from debugging.

Modifications:

Remove System.out.println(...)

Result:

Code cleanup"
1859170e69f8765e0656b1259363dc40f8ac59fc,"Change String comparison to equals() from == (#10022)

Motivation:

Even if it was stored in the string constant pool, I thought it was safe to compare it through the Equals() method.

Modification:

So, I changed ""=="" comparison to equals() comparison

Result:

It has become safer to compare String values with different references and with the same values."
713e0aa68a60fd97c10cd80ef256cc746b4f3256,"java.security.AccessControlException: access denied (""java.io.FilePermission"" ""/etc/os-release"" ""read"") (#10018)

Motivation:

Modifications:

- Wrap the code and execute with an AccessController
- Ignore SecurityException (by just logging it)
- Add some more debug logging

Result:

Fixes https://github.com/netty/netty/issues/10017"
e648aa259d2a08387ef6677027f6467d5cf88f4e,"Add a null check to NetUtil. sysctlGetInt(...) (#10027)

Motivation:

BufferedReader.readLine() may return null and cause a NPE.

Modification:

Simply add a null check.

Result:

If BufferedReader.readLine() returns null, the sysctlGetInt will just return null rather than cause NPE."
0e2e17f9a251549cec707976677856c4e878ffde,"Adding pipeline rename handler tests (#10028)

Motivation:

Current pipeline handler replace tests are replacing handler with same name.
we need test that test handler can renamed, old handlers are removed from pipeline.

Modification:

There is coverage missing related to renaming of handlers

Result:

Adds missing tests

Co-authored-by: phani254 <phani254@yahoo.com>"
d348ae9e7ad9754e4cfce9e417630d153d6f3c1f,"Correctly handle lifecycle of clientHello ByteBuf in SslClientHelloHandler (#10030)

Motivation:

Due incorrectly handling of reference count of the clientHello ByteBuf we may overrelease the buffer. This did show up in the log of a test:

11:55:16.595 [main] DEBUG i.n.h.ssl.SslClientHelloHandler - Unexpected client hello packet: 16030100bd010000b90303a74225676d1814ba57faff3b3663656ed05ee9dbb2a4dbb1bb1c32d2ea5fc39e0000000100008c0000001700150000164348415434e380824c45414e434c4f5544e38082434e000b000403000102000a00340032000e000d0019000b000c00180009000a00160017000800060007001400150004000500120013000100020003000f0010001100230000000d0020001e060106020603050105020503040104020403030103020303020102020203000f00010133740000
io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1
	at io.netty.util.internal.ReferenceCountUpdater.toLiveRealRefCnt(ReferenceCountUpdater.java:74)
	at io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:138)
	at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:100)
	at io.netty.handler.ssl.SslClientHelloHandler.releaseIfNotNull(SslClientHelloHandler.java:181)
	at io.netty.handler.ssl.SslClientHelloHandler.select(SslClientHelloHandler.java:225)
	at io.netty.handler.ssl.SslClientHelloHandler.decode(SslClientHelloHandler.java:149)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:498)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:437)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
	at io.netty.channel.embedded.EmbeddedChannel.writeInbound(EmbeddedChannel.java:343)
	at io.netty.handler.ssl.SniHandlerTest.testNonAsciiServerNameParsing(SniHandlerTest.java:297)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)

Modifications:

Correctly transfer lifetime of buffer and so not over-release it.

Result:

Correctly handle buffer lifecycle and so not swallow the original exception"
862efc618c3ae2038852613155ec4de444580d4d,"Remove the synchronized flag of fillInStackTrace method to improve performance while throwing exception. (#10031)

Motivation:

The method body of fillInStackTrace method of TimeoutException class in FixedChannelPool.java is so simple (just return this) that there is no need to be marked as synchronized.

Modification:

Remove the synchronized flag of fillInStackTrace method.

Result:
It can improve performance slightly while throwing a TimeoutException."
dcd62c2598b2fc9f04fd2ce25fbcb1c281b1a6c8,"Remove the synchronized flag of fillInStackTrace method to improve performance while creating exception instance. (#10033)

Motivation:

The method body of fillInStackTrace method of IllegalStateException class in SimpleChannelPool.java is so simple (just return this) that there is no need to be marked as synchronized.

Modification:

Remove the synchronized flag of fillInStackTrace method.

Result:

It can improve performance slightly while creating a IllegalStateException instance."
125cd9552d3f341b98c0b725bbc0a93a448ee0be,"Add a null check to method HttpStaticFileServerHandler.sendListing (#10040)

Motivation:

java.io.File.listFiles() may return null and cause a unexpected NPE.

Modification:

Extract a local variable from the return value of File.listFiles() and do a null check.

Result:

Fix the potential NPE."
f8d587156798a694e5cfbf3afbed7d0beb2a8706,"Don't depend on implementation details of SSLEngine in SniHandlerTest (#10037)

Motivation:

In SniHandlerTest we depended on implementation details of the SSLEngine. We should better not doing this

Modifications:

Just release all outbound data

Result:

Dont depend on implementation details"
5c458c9a98d4d3d0345e58495e017175156d624f,"Workaround Android bug that cause AbstractDnsRecord to throw when the name is only a ROOT label (#10039)

Motivation:

Having only the ROOT label (""."") as the name is valid, but Android 9 and prior does not correctly handle the case. We should add a workaround for it.

Modifications:

Detect if we are on Android and if so check if the name is the ROOT label and if so just return the name without trying to convert it

Result:

Fixes https://github.com/netty/netty/issues/10034"
60082c955398d9a31e153ffabfc5b534ec8dcac1,"Update to netty-tcnative 2.0.29.Final (#10044)

Motivation:

A new release of netty-tcnative is out

Modifications:

Update to latest version

Result:

Use latest netty-tcnative"
b1c57257af27965f816b928abd65b28aba221bad,"Correctly calculate the initial size of the LinkedHashMap during DefaultChannelGroup.write* (#10055)

Motivation:

We should not include the number of ServerChannel that are part of the DefaultChannelGroup when specify the initial size of the LinkedHashMap

Modifications:

Only use the number of the non ServerChannel

Result:

Reduce memory-footprint"
914b433a8dad50132f34df2b2da501c31e218790,"Replace the type of fragments field with IntObjectMap in SctpMessageCompletionHandler (#10057)

Motivation:

The type IntObjectMap with the key of primitive int can help lower the cost of boxing and unboxing,  and improve performance. I think it's more suitable for fragments field in SctpMessageCompletionHandler.java.

Modification:

Just replace the type of fragments field with IntObjectMap.

Result:
Improve performance slightly while decoding sctp message."
880e1239c5d82660b5ba46abc5ddf76f08822c69,"NetworkInterface.getByInetAddress() may return null on Android platform (#10056)


Motivation:

NetworkInterface.getByInetAddress() may return null on Android. This is incorrect by the API but still happens. To help our users we should provide a workaround

Modifications:

Just return an empty Enumeration when null is returned.

Result:

Fixes https://github.com/netty/netty/issues/10045"
6d09298d1d5018495947190a0bf852f1e0ea4063,"Add a null check to method TestUtils.compressHeapDumps (#10053)

Motivation:

java.io.File.listFiles() may return null and cause a unexpected NPE.

Modification:

Add a null check for variable files. And if variable files is null, the compressHeapDumps method will just return after logging a error message.

Result:

Fix the potential NPE."
9ae782d632ff18f7c9e645c58458b3180d257ff3,"More strict parsing of initial line / http headers (#10058)


Motivation:

Our parsing of the initial line / http headers did treat some characters as separators which should better trigger an exception during parsing.

Modifications:

- Tighten up parsing of the inital line by follow recommentation of RFC7230
- Restrict separators to OWS for http headers
- Add unit test

Result:

Stricter parsing of HTTP1"
f451295c75f41e3146d3028c4e923107c27e1b42,"Add test cases for ImmediateExecutor. (#10060)

Motivation:

ImmediateExecutor needs more test cases.

Modification:

Add several test cases for ImmediateExecutor.

Result:

Improve test coverage slightly."
b64abd0e52d2358c19ee8f72283b509367b9955b,"Correctly calculate the produced bytes in all cases when calling Refe… (#10063)


Motivation:

We did not correctly account for produced bytes when SSL_write(...) returns -1 in all cases. This could lead to lost data and so a corrupt SSL connection.

Modifications:

- Always ensure we calculate the produced bytes correctly
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/10041"
9b7e091b8d2ae024fe3545c54c8d8dc02bbbfbb5,"Add SslHandshakeTimeoutException and use it for handshake timeouts (#10062)


Motivation:

Often it is useful to be able to detect different sorts of SSL errors that cause the handshake to fail. To make this easier we should throw and explicit exception type for handshake timeouts.

Modifications:

- Add SslHandshakeTimeoutException (which extends SSLHandshakeException) and use it for handshake timeouts
- Adjust testcases

Result:

Easier to detect that handshake failed because of a timeout"
a304d61b26cb8041dd1fc8b88641226f3c32412b,"fix snappy crc32c checksum (#10048)

Motivation:

The Snappy crc32c checksum produced by SnappyFrameEncoder maybe failed to be validated on other languages snappy decoder, such as golang/snappy.

Modification: 

- make the 4-byte cast later after the mask operation. Because whether retaining the higher 4-7 bytes in a long java type will make difference in (checksum >> 15 | checksum << 17) + 0xa282ead8 result.

Result:

Checksum correctly calculated"
c9f38f855ee8b848d21ff849f6df4928c7f44b5a,"PromiseTask.isCancelled performs an unsynchronized read (#10066)

Motivation:

PromiseTask.isCancelled performs an unsynchronized read and so may trigger race-detectors. As this was just done for a small optimization which should not really make a lot of difference we should just remove it.

Modifications:

Remove unsynchronized read optimization

Result:

Fixes https://github.com/netty/netty/issues/10026."
ebe7af510228f9c6b7f1aff4725ceac85f1e9cc3,[maven-release-plugin] prepare release netty-4.1.46.Final
e0d73bca4dd36910c7cdbe3d577c51aeb8287cc6,[maven-release-plugin] prepare for next development iteration
04532220152a69a04064537daffd9e57953b81c0,"Add test cases for MathUtil. (#10071)

Motivation:

MathUtil needs more test cases.

Modification:

Add several test cases for MathUtil.

Result:

Improve test coverage slightly."
7fce06a0d1f76865b1494fde99697c31a8a1f92f,"Preserve order when using alternate event loops (#10069)

Motivation:

When the HttpContentCompressor is put on an alternate EventExecutor, the order of events should be
preserved so that the compressed content is correctly created.

Modifications:
- checking that the executor in the ChannelHandlerContext is the same executor as the current executor when evaluating if the handler should be skipped.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10067

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
7ab68adbe87795f9e2be6738e73a3a5af10bcb75,"Add test cases for StringUtil. (#10074)

Motivation:

StringUtil needs more test cases.

Modification:

Add several test cases for StringUtil.

Result:

Improve test coverage slightly."
1b0e3d95f43b710261695b1731522ed3b6d29e0d,"Fix AssertionError in ScheduledFutureTask (#10073)

Motivation:

Some JVMs (like OpenJDK 8 on Windows) use a low resolution timer in System.nanoTime() and may return the same value more than once. This triggered an assertion failure when deadlineNanos was equal to nanoTime and AbstractScheduledEventExecutor#pollScheduledTask called #setConsumed.

Modifications: 
With this change the assertion checks exactly the same condition as AbstractScheduledEventExecutor#pollScheduledTask, and will no longer fail under these circumstances.

Result:

Fixes #10070."
7b946a781e9ed78d9283f7907aeb4b8471dc9a3a,"Make sure we always flush window update frames in AbstractHttp2StreamChannel (#10075)

Motivation:

Under certain read patters the AbstractHttp2StreamChannel can fail to
flush, resulting in flow window starvation.

Modifications:

- Ensure we flush if we exit the `doBeginRead()` method.
- Account for the Http2FrameCodec always synchronously finishing writes
  of window update frames.

Result:

Fixes #10072"
65b1713ce70d4d4bf374071bf92d944c635dc661,"Update ProtocolDetectionResult to fix typo (#10086)

Motivation:

Correct a typo.

Modification:

Changed a name of a private constant variable, 'NEEDS_MORE_DATE' to 'NEEDS_MORE_DATA'

Result:

Cleanup"
15fa45a84b103c38c8c4c3235f594b382fd5d8f9,"Add log level check simply before logging. (#10080)

Motivation:

In general, we will close the debug log in a product environment. However, logging without external level check may still affect performance as varargs will need to allocate an array.

Modification:

Add log level check simply before logging.

Result:

Improve performance slightly in a product environment."
161c237fb9ec3faf5d870238231471d2bb1d3e24,"http multipart decode with chinese chars should work (#10089)

Motivation:

I am receiving a mutlipart/form_data upload from postman. The filename contains Chinese, and so some invalid chars. We should ensure all of these are removed before trying to decode.

Modification:

Ensure all invalid characters are removed

Result:

Fixes #10087

Co-authored-by: liming.zhang <liming.zhang@luckincoffee.com>"
660759b99757748dc416b52028b31f97d80f7d08,"Use MacOSDnsServerAddressStreamProvider when on the classpath and we … (#10079)


Motivation:

939e928312f1099373582f9811817a6226550987 introduced MacOSDnsServerAddressStreamProvider which will ensure the right nameservers are selected when running on MacOS. To ensure this is done automatically on MacOS we should use it by default on these platforms.

Modifications:

Try to use MacOSDnsServerAddressStreamProvider when on MacOS via reflection and fallback if not possible

Result:

Ensure the right nameservers are used on MacOS even when a VPN (for example) is used."
b892722efbddaef6d871763e6f4f1c6148595548,"Add a log level check simply before logging. (#10093)

Motivation:

ThrowableUtil.stackTraceToString is an expensive method call. So I think a log level check before this logging statement is quite needed especially in a environment with the warning log disabled.

Modification:

Add log level check simply before logging.

Result:

Improve performance in a environment with the warning log disabled."
59c8ce317a5e2ef9d7827e6dff5f968e8d6136f2,"Add a HTTP/2 client example using the newer frames approach the current HTTP/2 client example uses the older 'HTTP/1 <--> HTTP/2' translation approach. (#10081)


**Motivation:**

When I was previously working on a project using Netty's HTTP/2 support, I used the newer frames approach but I struggled to find any good examples or documentation online. I did, however, see a few people ask the same (or similar) questions as me on StackOverflow and a couple of older Netty Github issues.

Reading issue [9733](https://github.com/netty/netty/issues/9733) therefore prompted me to pull together a few bits of code into this HTTP/2 frame client example.

**Modification:**

Populated the previously-empty `example/src/main/java/io/netty/example/http2/helloworld/frame/client/` folder with a HTTP/2 frame client example.

**Result:**

Gives a clear example of how the newer HTTP/2 support can be used for Netty clients."
8df19ce1f3ad2159bbeaa42f647bfc3e322092f7,"Replace several magic numbers. (#10094)

Motivation:

Magic numbers seem hard to read or understand.

Modification:

Replace several magic numbers with named constants.

Result:

Improve readability and make it easier to maintain."
a401b2ac92bad5bc566387d95a9fd94cf3eb2897,[maven-release-plugin] prepare release netty-4.1.47.Final
c623a50d19a6d700c1e5e572d359c7604aa81e3e,[maven-release-plugin] prepare for next development iteration
2576a2dd742010138a9e16a7c889cf042fef3791,"Fix WebSocketClientHandshaker not generating correct handshake request when path is empty (#10095)

Motivation:

WebSocketClientHandshaker#upgradeUrl doesn't comperly compute relative url when path is empty and produces url such as `?access_token=foo` instead of `/?access_token=foo`.

Modifications:

* fix WebSocketClientHandshaker#upgradeUrl
* add tests for urls without path, with and without query

Result:

WebSocketClientHandshaker properly connects to url without path."
60cbe8b7b2f7e54cb25218229f0e6af407441735,"Let LzfEncoder support length aware ability. (#10082)

Motivation:

Since the LZF support non-compress and compress format, we can let LzfEncoder support length aware ability. It can let the user control compress.

Modification:

When the data length over compressThreshold, LzfEncoder use compress format to compress data. Otherwise, only use non-compress format. Whatever compress format the encoder use, the LzfDecoder can decompress data well.

Result:

Gives users control over compression capabilities"
e4af5c363152e6589e46eb3e3f7c44e8ebae9b09,"Added support for the SameSite attribute in Cookies (#10050)


Motivation:

Netty currently does not support the SameSite attribute for response cookies (see issue #8161 for discussion).

Modifications:

The attribute has been added to the DefaultCookie class as a quick fix since adding new methods to the Cookie interface would be backwards-incompatible.
ServerCookieEncoder and ClientCookieDecoder have been updated accordingly to process this value. No validation for allowed values (Lax, None, Strict) has been implemented.

Result:

Response cookies with the SameSite attribute set can be read or written by Netty.

Co-authored-by: David Latorre <a-dlatorre@hotels.com>"
260540b25aacfff3591eaa0b0a702f8ce3e62f04,"Don't override HOST header if provided by user already in WebSocketClientHandshaker (#10104)

Motivation:

The user may need to provide a specific HOST header. We should not override it when specified during handshake.

Modifications:

Check if a custom HOST header is already provided by the user and if so dont override it

Result:

Fixes https://github.com/netty/netty/issues/10101"
4b22d8ab352912e9ac1217f51ecbff68c5b99572,"Use WebSocketVersion.toAsciiString() as header value when possible (#10105)

Motivation:

In our WebSocketClientHandshaker* implementations we ""hardcode"" the version number to use. This is error-prone, we should better use the WebSocketVersion so we dont need to maintain the value multiple times. Beside this we can also use an AsciiString to improve performance

Modifications:

- Use WebSocketVersion.toAsciiString

Result:

Less stuff to maintain and small performance win"
679c606f138dd4c5382680325ea9b8de1a721c65,"Add test case for Http2StreamChannelId. (#10108)

Motivation:

Http2StreamChannelId is Serializable. A test case is needed to ensure that it works.

Modification:

Add a test case about serialization.

Result:

Improve test coverage slightly."
427a64129901c1b34d4169f2b62d905e90240ea6,"Replace oio's default thread factory with netty's DefaultThreadFactory. (#10107)

Motivation:

Netty's DefaultThreadFactory that creates FastThreadLocalThread instance is widely used in NioEventLoopGroup, EpollEventLoopGroup, etc, but not OioEventLoopGroup. Although oio is quite stale, I still think this change may be useful.

Modification:

Replace oio's default thread factory with netty's DefaultThreadFactory just like NioEventLoopGroup, EpollEventLoopGroup, etc.

Result:

Faster access to FastThreadLocal in oio."
c74469bc6c632759637c22a44b76137f45ddcca9,"Ensure WebSocket*Handshaker can not corrupt pipeline when HttpProxyHa… (#10103)


Motivation:

HttpProxyHandler itself will add a HttpClientCodec into the ChannelPipeline and so confuse the WebSocket*Handshaker when it tries to modify the pipeline as it will replace the wrong HttpClientCodec.

Modifications:

Wrap the internal HttpClientCodec that is added by HttpProxyHandler so it will not be replaced by HttpProxyHandler.

Result:

Fixes  https://github.com/netty/netty/issues/5201 and https://github.com/netty/netty/issues/5070"
286f14f04a0c21de7954a2f30f48e9a93fbfa9d4,"Close Channel upon exceptions during bootstrap to avoid leaking (#10110)

Motivation:

We need to ensure we always close the Channel when we see an exception during bootstrapping it.

Modification:

Ensure we correct close the Channel if we see an exception during retrieving the Resolver from the group while bootstrapping.

Result:

Fixes #10109


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
0fb58d3c542231d2e95a16a4182d46e7ebc293d1,"HttpObjectDecoder should limit the number of control chars (#10112)

Motivation:

At the moment HttpObjectDecoder does not limit the number of controls chars. These should be counted with the initial line and so a limit should be exposed

Modifications:

- Change LineParser to also be used when skipping control chars and so enforce a limit
- Add various tests to ensure that limit is enforced

Result:

Fixes https://github.com/netty/netty/issues/10111"
c10c697e5bf664d9d8d1dcee93569265b19ca03a,[maven-release-plugin] prepare release netty-4.1.48.Final
14e4afeba26a3ea48d5462c2025531f4fb7a6364,[maven-release-plugin] prepare for next development iteration
99aca1879fcd69e4beecd100dcff5bec61eb2b84,"Update to netty-tcnative 2.0.30.Final to fix small memory leak (#10118)

Motivation:

A new netty-tcnative version was just released which fixes a small memory leak.

Modifications:

Update to 2.0.30.Final

Result:

Small memory leak fixed"
fcf7144f7c192d36bc3722c3e6ab181d81906edb,"Add some HTTP header constants (#10127)

Motivation:

Add some missing HTTP header names and values constants.

Modification:

* names:
  * dnt (Do Not Track)
  * upgrade-insecure-requests
  * x-requested-with
* values:
  * application/xhtml+xml
  * application/xml
  * text/css
  * text/html
  * text/event-stream
  * XmlHttpRequest

Result:

More constants available"
4d7d249cc37a12b38b6d7ee1b3409739f2c24b6b,"Fix a mistake in javadoc of ReplayingDecoder (#10129)

Motivation:

In the code example of ReplayingDecoder, an input parameter List<Object> out is missing.

Modification:

Just add this parameter.

Result:

The right doc."
913cae6fef1f708238918cbdf3b25db03c805604,"Optimize log2 in PoolThreadCache (#10128)

Motivation:
The current implementation of log2 in PoolThreadCache uses a loop and less efficient than an version based on Integer.numberOfLeadingZeros (intrinsic).

Modifications:
Replace the current log2 implementation in PoolThreadCache with a version based on Integer.numberOfLeadingZeros

Result:
It can improve performance slightly during allocation and de-allocation of ByteBuf using pooled allocator."
0c3eae34ec25203e22d3fa6a678a11a936f9c8b4,"fix a potential ByteBuf leak in HttpProxyHandler. (#10130)

Motivation:

An exception may occur between ByteBuf's allocation and release. For example:
```java
java.lang.OutOfMemoryError: Java heap space
	at java.lang.String.<init>(String.java:325)
	at io.netty.buffer.ByteBufUtil.decodeString(ByteBufUtil.java:838)
	at io.netty.buffer.AbstractByteBuf.toString(AbstractByteBuf.java:1247)
	at io.netty.buffer.AbstractByteBuf.toString(AbstractByteBuf.java:1242)
	at io.netty.handler.proxy.HttpProxyHandler.<init>(HttpProxyHandler.java:105)
	at io.netty.handler.proxy.HttpProxyHandler.<init>(HttpProxyHandler.java:90)
	at io.netty.handler.proxy.HttpProxyHandler.<init>(HttpProxyHandler.java:85)
```
It may cause the ByteBuf variable authz and authzBase64's leak.

Modification:

Release the ByteBuf in a finally block as soon as possible.

Result:

Fix a potential ByteBuf leak."
62e3c463c4b0867600c516dddfafaab40b803cb8,"Don't produce multiple calls to exceptionCaught(...) on SSL handshake failure (#10134)

Motivation:

Before release 4.1.23, there was only ONE call to exceptionCaught method when an ssl handshake failure occurs, now we have two when using the JDK provider.

Modifications:

- Ensure we only propagate one exception fi we already failed the handshake and channelInactive(...) produce an exception again
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10119"
81513c3728df8add3c94fd0bdaaf9ba424925b29,"Add JDK 14 and update JDK 13 for builds (#10136)

Motivation:

JDK 14 was released so we should include it in our build matrix. Beside this there was also a JDK 13 update

Modifications:

- Add docker-compose files for JDK 14
- Update JDK 13 version

Result:

Build with JDK 14 as well and use latest JDK 13 release"
aed5a74e098c3a82777007c5bf509b1359b9c487,"Release the ByteBuf when IOException occurs in AbstractMemoryHttpData. (#10133)

Motivation:

An IOException may be thrown from InputStream.read or checkSize method, and cause the ByteBuf leak.

Modification:

Release the ByteBuf when IOException occurs.

Result:
Avoid ByteBuf leak."
84ebf47515c93886e8e0302eb65effe86f152422,"making DefaultHttpDataFactory able to configure basedir and deleteonexit (#10146)

Motivation: 

currently (http) disk based attributes or uploads are globally configured in a single directory and can also only globally be deleted on exit or not. it does not fit well multiple cases, in particular the case you have multiple servers in the same JVM.

Modification: 
make it configurable per attribute/fileupload.

Result:

This PR duplicates Disk* constructor to add basedir and deleteonexit parameters and wires it in default http daa factory."
7e823e38426133a95a775383328d1cdc2fde9238,"Replace MQTT deprecated API usage

Motivation:

Mqtt procotol defines packetId instead of messageId, replace deprecated method to match protocol definition

Modification:

Replace messageId() to packetId() in MqttEncoder

Result:

Match mqtt protocol definition and improve readability."
fbc6709686090ddee4bed055a3ce394cfac36f15,"Add profile to build on JDK 14 (#10148)

Motivation:

JDK 14 was released and need some special settings to be able to build with. Also there seems to be one regression that we need to workaround for now.

Modifications:

- Add maven profile for JDK 14
- Update blockhound version to be able to work on JDK 14
- Add workaround for possible JDK 14 regression

Result:

Be able to build on JDK 14"
7309f2a13d974bd8b2f7e1da7467450762803d7b,"Fix allocate additional buffer for encoding stompFrame without readab… (#10150)

Motivation:

Not always STOMP frames contain any payload some times it just headers. So we wan't allocate additional buffer with NULL content for this situation.

Modification:

Modify StompSubframeEncoder to check if content is readable or not. If content is not readable just add NULL byte to encoded header buffer.

Result:

Less allocations"
4b235a96001e107401dce12aad520a42b2bbbc6f,"Introduce DomainWildcardMappingBuilder to fix wildcard matching accor… (#10132)

Motivation:

How we did wildcard matching was not correct according to RFC6125. Beside this our implementation was quite CPU heavy.

Modifications:

- Add new DomainWildcardMappingBuilder which correctly does wildcard matching. See https://tools.ietf.org/search/rfc6125#section-6.4
- Add unit tests
- Deprecate old implementations

Result:

Correctly implement wildcard matching and improve performance"
ea31b590375fbb9d6166f091b734bac9c5f135fe,"Replace usage() with freeBytes() in thresholds within hot paths of PoolChunkList (#10141)


Motivation:
PoolChunk.usage() method has non-trivial computations. It is used currently in hot path methods invoked when an allocation and de-allocation are happened.
The idea is to replace usage() output comparison against percent thresholds by Chunk.freeBytes plain comparison against absolute thresholds. In such way the majority of computations from the threshold conditions are moved to init logic.

Modifications:
Replace PoolChunk.usage() conditions in PoolChunkList with equivalent conditions for PoolChunk.freeBytes()

Result:
Improve performance of allocation and de-allocation of ByteBuf from normal size cache pool"
d4c268ae3e218b15dfd235684640b5d3da8b6242,"Close the file when IOException occurs in AbstractMemoryHttpData. (#10157)

Motivation:

An IOException may be thrown from FileChannel.read, and cause the fd leak.

Modification:

Close the file when IOException occurs.

Result:
Avoid fd leak."
db39b10249b9a619b14ada376ac178485cd3a328,Update link for JDK14 regression to point to the actual bugreport
21f375fa9080f1ed55aedf7977568bd3a3fa2e4a,"SslHandler should fail handshake / close promise and notify pipeline on removal (#10161)

Motivation:

If the SslHandler is removed from the pipeline we also need to ensure we fail the handshake / close promise if it was not notified before as otherwise we may never do so.

Modifications:

- Correctly fail promise and notify pipeline if handshake was not done yet when the SslHandler is removed
- Add unit test

Result:

Fix https://github.com/netty/netty/issues/10158"
c90acf476639c833751c59735a86ce2760d3f8ac,"Hardcode TLS version used during blockhound tests (#10162)

Motivation:

Different versions of the JDK use different TLS versions by default. We should define the versions explicit

Modifications:

Explicit specify TLSv1.2

Result:

Blockhound tests pass on JDK14 as well"
bdaa935756c3ae86f8b5353011d9682d5e247dcc,"Release the temporary ByteBuf in case of unexpected exception in WebSocketUtil.base64. (#10160)

Motivation:

An exception may occur between ByteBuf's allocation and release. So I think it's a good idea to place the release operation in a finally block.

Modification:

Release the temporary ByteBuf in finally blocks.

Result:

Avoid ByteBuf leak."
05b7af7ae4a2f7f4b6053c363f88fba6dead69c8,"Propagate ref to pool thread cache down in the allocation stack to avoid extra thread local lookup (#10166)

Motivation:
PoolChunk requires a link to a PoolThreadCache to init ByteBuf. Currently the link is retrieved from a thread local: arena.parent.threadCache().
It has some performance cost. At the beginning of the allocation call the PoolThreadCache is already retrieved from the thread local. The reference can be propagated through the calls and used.

Modifications:
Replace second lookup of PoolThreadCache during ByteBuf init by propagation of a reference to PoolThreadCache down in the allocation stack explicitly

Result:
Improve performance of ByteBuf allocation
--Before--
Benchmark                                            (size)  (tokens)  (useThreadCache)  Mode  Cnt    Score   Error  Units
SimpleByteBufPooledAllocatorBenchmark.getAndRelease     123         0              true  avgt   20   57.112 ± 1.004  ns/op
SimpleByteBufPooledAllocatorBenchmark.getAndRelease     123       100              true  avgt   20  222.827 ± 1.307  ns/op

--After--
Benchmark                                            (size)  (tokens)  (useThreadCache)  Mode  Cnt    Score   Error  Units
SimpleByteBufPooledAllocatorBenchmark.getAndRelease     123         0              true  avgt   20   50.732 ± 1.321  ns/op
SimpleByteBufPooledAllocatorBenchmark.getAndRelease     123       100              true  avgt   20  216.892 ± 3.806  ns/op"
363c4ecc7f2f2ec0d499ceae17c23ada5d0b0765,"Add the missing comment (#10169)

Motivation:

The comment of SingleThreadEventExecutor#run() is missing

Modification:

Just fill it in.

Result:

Method comment is not blank now."
3ebf3d7705be0ed7dac0763687a0cdba476efc11,"Close the file in case of an IOException in AbstractMemoryHttpData.renameTo. (#10163)

Motivation:

An `IOException` may be thrown from `FileChannel.write` or `FileChannel.force`, and cause the fd leak.

Modification:

Close the file in a finally block.

Result:

Avoid fd leak."
a4c96483d1e83981a1e0860d3a6f71fbe21d500c,"Fix a bug where making IPv6 DnsQuestion when it's not supported (#10170)

Motivation:
Related https://github.com/line/armeria/issues/2463
Here is an example that an NIC has only link local address for IPv6.
```
$ ipaddr
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
3: eth0@if18692: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1460 qdisc noqueue
    link/ether 1a:5e:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff
    inet 10.xxx.xxx.xxx/24 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::xxxx:xxxx:xxxx:xxxx/64 scope link
       valid_lft forever preferred_lft forever
```
If the NICs have only local or link local addresses, We should not send IPv6 DNS queris.

Modification:
- Ignore link-local IPv6 addresses which may exist even on a machine without IPv6 network.

Result:
- `DnsNameResolver` does not send DNS queries for AAAA when IPv6 is not available."
7d7e1f5ed7704bda856bbfd20bff62413af62070,"Stop sending DNS queries if promise is cancelled (#10171)

Motivation:
A user might want to cancel DNS resolution when it takes too long.
Currently, there's no way to cancel the internal DNS queries especially when there's a lot of search domains.

Modification:
- Stop sending a DNS query if the original `Promise`, which was passed calling `resolve()`, is canceled.

Result:
- You can now stop sending DNS queries by cancelling the `Promise`."
2b14775446f3f3937ddd6eb6bd7b22686810908f,"Stomp over WebSocket Chat example (#10152)

Motivation:

Often people want to use `stomp-codec` with WebSocket transport or other but cannot figure out how can do this staff on Netty.

Modification:

Create example for demonstrating integration between STOMP and WebSocket.
Inspired by https://github.com/jmesnil/stomp-websocket

Result:

Fixes #9383"
79ef0c4706b64bd0b6c3ce24516beb587a0c5f4a,"Allow Conscrypt to be used on Android (#10182)

**Motivation:**

Following up on https://github.com/netty/netty/issues/10181

I was able to successfully setup a Netty server with TLS on Android, using Conscrypt, with the change proposed here. Conscrypt publishes an [Android specific version](https://github.com/google/conscrypt#android). But the current availability check prevents Netty from using it (the call `PlatformDependent.javaVersion()` returns `6` on Android).

**Modification:**

Check whether the java version is above 8, or if it's running on an Android device, to flag Conscrypt as available (besides the remaining checks).

**Result:**

Netty with TLS runs fine on Android 👍"
d5e42f855370387b7888fed89d03779d6068af68,"Log protocol version during handshake (#10178)

Motivation:

Only cipher suite is logged during handshake. Picked protocol is interesting too.

Modification:

Log protocol as well.

Result:

More interesting information when debugging TLS handshakes."
b996bf2151fe99b5fc528b98ac5ea65681380e2f,"Update Bouncycastle dependency (#10185)

Motivation:

We should update our optional bouncycastle dependency to ensure we use the latest which has all the security fixes

Modifications:

Update bouncycastle version

Result:

Fixes https://github.com/netty/netty/issues/10184"
2d4d64dc42ad102a1e4b3bca5d9136a636afc3d4,"Add the unit test of ChannelOutboundBuffer (#10180)

Motivation:

Parameter maxCount needs the unit test.

Modifications:

1. Change the conditional statement to avoid the ineffective maxCount (enhance the robustness of the code merely).
2. Add the unit test for maxCount.

Result:

Enable this parameter to be tested."
1b3e1985b4986af0b9d6a045a66e18872763d5db,"Release the channel attribute--REOPEN_TASK after removing the TrafficShapingHandler from channel pipeline. (#10177)

Motivation:

The `AbstractTrafficShapingHandler` caches the `ReopenReadTimerTask` instance in the channel attribute. However, if this handler is removed from the channel pipeline, this `ReopenReadTimerTask` instance may not be released.

Modification:

Release the channel attribute `REOPEN_TASK` in `handlerRemoved` method.

Result:

Avoid a channel attribute leak."
4c9d7492fb15489624ae58a4d120d4d4cfe33d33,"CodecOutputList should be recycled in a finally block (#10186)

Motivation:

To ensure we always recycle the CodecOutputList we should better do it in a finally block

Modifications:

Call CodecOutputList.recycle() in finally

Result:

Less chances of non-recycled lists. Related to https://github.com/netty/netty/issues/10183"
17f205fab351e1a42f08e47dc83ac5365dc0575c,"Close the FileChannel in case of an IOException in AbstractDiskHttpData.addContent. (#10188)

Motivation:

`FileChannel.force` may throw an IOException. A fd leak may happen here.

Modification:

Close the fileChannel in a finally block.

Result:

Avoid fd leak."
ff6d2e4949caaa573ac693562de42aaefa42fee3,"Remove duplicate code in PoolArena. (#10174)

Motivation:

Remove duplicate code in PoolArena.

Modification:

Replace duplicate code with `tinyIdx` and `smallIdx`.

Result:

Clean code."
fb5e2cd3aa5644c294905fce3b45c2278f17e15d,"Efficient BytBuf search algorithms (#9914) (#9955)


Motivation:

We have found out that ByteBufUtil.indexOf can be inefficient for substring search on
ByteBuf, both in terms of algorithm complexity (worst case O(needle.readableBytes *
haystack.readableBytes)), and in constant factor (esp. on Composite buffers).
With implementation of more performant search algorithms we have seen improvements on
the order of magnitude.

Modifications:

This change introduces three search algorithms:
1. Knuth Morris Pratt - classical textbook algorithm, a good default choice.
2. Bit mask based algorithm - stable performance on any input, but limited to maximum
search substring (the needle) length of 64 bytes.
3. Aho–Corasick - worse performance and higher memory consumption than [1] and [2], but
it supports multiple substring (the needles) search simultaneously, by inspecting every
byte of the haystack only once.

Each algorithm processes every byte of underlying buffer only once, they are implemented
as ByteProcessor.

Result:

Efficient search algorithms with linear time complexity available in Netty (I will share
benchmark results in a comment on a PR)."
6dad12defaf94d6c0eeb8850ccb3f0a042f003e4,"Add workaround for possible classloader deadlock when trying to load JNI code (#10190)

Motivation:

netty_epoll_linuxsocket_JNI_OnLoad(...) may produce a deadlock with another thread that will load IOUtil in a static block. This seems to be a JDK bug which is not yet fixed. To workaround this we force IOUtil to be loaded from without java code before init the JNI code

Modifications:

Use Selector.open() as a workaround to load IOUtil

Result:

Fixes https://github.com/netty/netty/issues/10187"
2c78b4c84fb968c6d130a63bee30cbef706c3da9,"Correctly propagate exceptions from inbound operations in all cases (#10176)

Motivation:

In AbstractChannelHandlerContext we had some code where we tried to guard against endless loops caused by exceptions thrown by exceptionCaught(...) that would trigger exceptionCaught again. This code was proplematic for two reasons:
 - It is quite expensive as we need to compare all the stacks
 - We may end up not notify another handlers exceptionCaught(...) if in our exeuction stack we triggered actions that will cause an exceptionCaught somewhere else in the pipeline

Modifications:

- Just remove the detection code as we already handle everything correctly when we invoke exceptionCaught(...)
- Add unit tests

Result:

Ensure we always notify correctly and also fixes performance issue reported as https://github.com/netty/netty/issues/10165"
37948bc9debb3646150365e21da5d38342bbb3c5,"Add support for HAProxyMessageEncoder (#10175)

Motivation:

Add support for HAProxyMessageEncoder.
This should help java based HAProxy server implementations propagate proxy information.

Modification:

Add public constructors for `HAProxyMessage`, `HAProxyTLV`, `HAProxySSLTLV`.
Add additional argument checks for `HAProxyMessage` and modify exceptions thrown when creating via public constructors directly.
Introduce a `@Sharable` `HAProxyMessageEncoder` which encodes a `HAProxyMessage` into a byte array.
Add an example `HAProxyServer` and `HAProxyClient` to `io.netty.example`


Result:

Fixes #10164"
32e32fe98fceb114f6c7bf97a5286a76fe9bdb29,"Fix a potential fd leak in AbstractDiskHttpData.setContent (#10198)

Motivation:

`RandomAccessFile.setLength` may throw an IOException. We must deal with this in case of the occurrence of `I/O` error.

Modification:

Place the `RandomAccessFile.setLength` method call in the `try-finally` block.

Result:

Avoid fd leak."
232c669fa413a9079ee6216056b57a647143f4b6,"Guard against overflow when calling CompositeByteBuf.addComponent(...) (#10197)

Motivation:

We need to ensure we not overflow when adding buffers to a CompositeByteBuf

Modifications:

- Correctly validate overflow before adding to the internal storage
- Add testcase

Result:

Fixes https://github.com/netty/netty/issues/10194"
5cd00d22d98db89313ccc592307cb5e5759db4c8,"Ensure we support ALPN when using java 8u251 (#10196)


Motivation:

ALPN support was backported to java 8 lately. Ensure we support it if the user uses the latest java 8 release

Modifications:

- Update logic to be able to detect if ALPN is supported out of the box when using Java8
- Update jetty alpn version

Result:

Be able to use ALPN out of the box when using java 8u251"
d0c2f6e8b3c91dcc018d2029d2cab8e21460fb09,"Clarify exception message when ALPN is not supported (#10155)

Motivation:

We should provide more informations when ALPN is not supported and a user tries to use it.

Modifications:

- Use UnsupportedOperationException

Result:

Easier to debug ALPN problems"
d0ec961cce19646519d6a0d59e7604b0eacd9bf2,[maven-release-plugin] prepare release netty-4.1.49.Final
9c5008b10927ab0ecb4c0198741a284e2739987f,[maven-release-plugin] prepare for next development iteration
0cf919c389970d9b5a61cbd2e6f293928d509612,"HTTP2: Guard against multiple ctx.close(...) calls with the same ChannelPromise (#10201)

Motivation:

Http2ConnectionHandler may call ctx.close(...) with the same promise instance multiple times if the timeout for gracefulShutdown elapse and the listener itself is notified. This can cause problems as other handlers in the pipeline may queue these promises and try to notify these later via setSuccess() or setFailure(...) which will then throw an IllegalStateException if the promise was notified already

Modification:

- Add boolean flag to ensure doClose() will only try to call ctx.close(...) one time

Result:

Don't call ctx.close(...) with the same promise multiple times when gradefulShutdown timeout elapses."
660611c4507def91ffd6bf13f294e21826b584a5,"Add epoll aarch64 maven config and Dockerfile (#9804)

Motivation:

`transport-native-epoll` doesn't have ARM release package. 

Modification:

This PR added cross compile profile for epoll. Then we can easily build aarch64 package on X86 machine. 

Result:
Fixes #8279"
5a08dc0d9aeafe3b4e242e3b7722bfbd38acbbb2,"Add fastpath implementation for Unpooled.copiedBuffer(CharSequence, Charset) when UTF-8 or US-ASCII is used (#10206)

Motivation:

We can make use of our optimized implementations for UTF-8 and US-ASCII if the user request a copy of a sequence for these charsets

Modifications:

- Add fastpath implementation
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/10205"
9778f05e14a17d36daa87b45d6a357f90fe1e64c,"Update testsuite / pom.xml to be able to build with Java15 (#10210)


Motivation:

We need to make some slightly changes to be able to build on Java15 as some previous deprecated methods now throw UnsupportedOperationException

Modifications:

- Add code to handle UnsupportedOperationException
- Revert previous applied workaround for bug that was fixed in Java15
- Add maven profile

Result:

Be able to build with latest Java15 EA release"
eb3721b97155f969623123f2bdb35f5607e263fc,"Fix a potential fd leak in AbstractDiskHttpData.delete (#10212)

Motivation:

An unexpected IOException may be thrown from `FileChannel.force`. If it happens, the `FileChannel.close` may not be invoked.

Modification:

Place the `FileChannel.close` in a finally block.

Result:

Avoid fd leak."
be28b266d5d85a24f846d1978fc46b9ae1565a93,"Remove unused import in JsonObjectDecoder.java (#10213)

Motivation:

`io.netty.channel.ChannelHandler` is never used in JsonObjectDecoder.java.

Modification:

Just remove this unused import.

Result:

Make the JsonObjectDecoder.java's imports simple and clean."
5fa5ce34e1580932c54cde56dd51c207288edde3,"Add check for DefaultFileRegion to calculate size of msg in AbstractTrafficShapingHandler (#10215)


Motivation:

Currently calculateSize method in AbstractTrafficShapingHandler calculates size for object of type ByteBuf or ByteBufHolder. Adding a check for FileRegion, makes it possible to do traffic shaping for FileRegion objects as well

Modification:

Check if object to be sent is of type FileRegion, if yes calculate the size using its count() method.


Co-authored-by: Dinesh Joshi <dinesh.joshi@apple.com>"
4f72cdf2333f682410e23e1eb5d77bc66b186cf4,"Dns resolver: honor resolv.conf timeout, rotate and attempts options (#10207)

Motivations
-----------
DnsNameResolverBuilder and DnsNameResolver do not auto-configure
themselves uing default options define in /etc/resolv.conf.
In particular, rotate, timeout and attempts options are ignored.

Modifications
-------------
 - Modified UnixResolverDnsServerAddressStreamProvider to parse ndots,
attempts and timeout options all at once and use these defaults to
configure DnsNameResolver when values are not provided by the
DnsNameResolverBuilder.
 - When rotate option is specified, the DnsServerAddresses returned by
UnixResolverDnsServerAddressStreamProvider is rotational.
 - Amend resolv.conf options with the RES_OPTIONS environment variable
when present.

Result: 

Fixes https://github.com/netty/netty/issues/10202"
9751bb3ebc5593dfd369c86800d0cfb1319cda97,"Move up the size check in AbstractDiskHttpData.setContent. (#10222)

Motivation:

`AbstractHttpData.checkSize` may throw an IOException if we set the max size limit via `AbstractHttpData.setMaxSize`. However, if this exception happens, the `AbstractDiskHttpData.file` and the `AbstractHttpData.size` are still be modified. In other words, it may break the failure atomicity here.

Modification:

Just move up the size check.

Result:

Keep the failure atomicity even if `AbstractHttpData.checkSize` fails."
c354fa48e10de847cf17c10083a2cbc2c0a63a36,"HttpPostRequestDecoder: retain instead of copy when first buf is last (#10209)


Motivations
-----------
There is no need to copy the ""offered"" ByteBuf in HttpPostRequestDecoder
when the first HttpContent ByteBuf is also the last (LastHttpContent) as
the full content can immediately be decoded. No extra bookeeping needed.

Modifications
-------------
HttpPostMultipartRequestDecoder
 - Retain the first ByteBuf when it is both the first HttpContent offered
to the decoder and is also LastHttpContent.
 - Retain slices of the final buffers values

Results
-------
ByteBufs of FullHttpMessage decoded by HttpPostRequestDecoder are no longer
unnecessarily copied. Attributes are extracted as retained slices when
the content is multi-part. Non-multi-part content continues to return
Unpooled buffers.

Partially addresses issue #10200"
83012a038b7d1f55badca29039b2169f522567de,"Update to latest Conscrypt release and add workarounds for bugs (#10211)


Motivation:

We are far behind with the version of Conscrypt we are using during testing. We should ensure we use the latest.

Modifications:

- Update conscrypt dependency
- Ensure we use conscrypt provider in tests
- Add workarounds for conscrypt bugs in testsuite

Result:

Use latest Conscrypt release"
387e451c8289f05bf553821170bde30052101f8a,"Detect CNAME loops in the CNAME cache while trying to resolve (#10221)


Motivation:

We need to detect CNAME loops during lookup the DnsCnameCache as otherwise we may try to follow cnames forever.

Modifications:

- Correctly detect CNAME loops in the cache
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10220"
6cd193e83f9bb438bd9b8c1903441207c69272fc,"Don't log with warn level in the DnsNameResolver in most cases (#10225)

Motivation:

We should only log with warn level if something really critical happens as otherwise we may spam logs and confuse the user.

Modifications:

- Change log level to debug for most cases

Result:

Less noisy logging"
987a68eb02cd148092507b647e96da27abfe7456,"Fix memory leak in HttpPostMultipartRequestDecoder (#10227)

Motivation:

We need to release all ByteBufs that we allocate to prevent leaks. We missed to release the ByteBufs that are used to aggregate in two cases

Modifications:

Add release() calls

Result:

No more memory leak in HttpPostMultipartRequestDecoder"
ff36f2826c4ebf854cde94bb9805f6c2f1791f64,"Remove some debugging cruft (#10229)

Motivation:

RtspDecoderTest did include a println(...) call which was a left over from debugging.

Modifications:

Remove println(...)

Result:

Cleanup"
8f7ca2b4ef53b94607992494adf17a6237df7356,"Reuse the same allocator as used by the `ByteBuf` that is used during… (#10226)


Motivation:

We should not use Unpooled to allocate buffers if possible to ensure we can make use of pooling etc.

Modifications:

- Only allocate a buffer if really needed
- Use the ByteBufAllocator of the offered ByteBuf
- Ensure we not use buffer.copy() but explicitly allocate a buffer and then copy into it to not hit the limit of maxCapacity()

Result:

Improve allocations"
9427255ffb112f5cf3d736fa71eae06fd447373e,"Specify algorithm for key pair in self signed certificate to generate EC or RSA based certificate. (#10223)


Motivation:

EC is better than RSA because of the small key size, efficient and secure which makes it perfect for testing purposes.

Modification:

Added support to specify an algorithm (EC or RSA) in constructors for key pair generation. The default key size is 256-bits as promulgated by NSA Suite B.

Result:
Able to generate a self-signed certificate of EC or RSA."
cfcd7a4fdecde6173a1cddea9c1df703e9910895,"Rename testmethods to make these more clear (#10231)

Motivation:

The currently used method names don't make a lot of sense.

Modifications:

Rename to cleanup

Result:

Cleanup"
c3db0391affb7eca0cd95a49d0b1063e3a2c3599,"Correctly handle WrappedCompositeByteBufs in addFlattenedComponents() (#10247)

Motivation

An NPE was reported in #10245, caused by a regression introduced in
#8939. This in particular affects ByteToMessageDecoders that use the
COMPOSITE_CUMULATOR.

Modification

- Unwrap WrappedCompositeByteBufs passed to
CompositeByteBuf#addFlattenedComponents(...) method before accessing
internal components field
- Extend unit test to cover this case and ensure more of the
CompositeByteBuf tests are also run on the wrapped variant

Results

Fixes #10245"
40448db5bbce3a000024c0c9eb3e0d0554eee36a,"Remove a unused import in DefaultHttp2ConnectionEncoder.java (#10249)

Motivation:

`io.netty.handler.codec.http2.Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT` is never used in DefaultHttp2ConnectionEncoder.java.

Modification:

Just remove this unused import.

Result:

Make the DefaultHttp2ConnectionEncoder.java's imports clean."
f00160bca36d9f795f015b78349f2be800674be0,"Don't reuse ChannelPromise in WebSocketProtocolHandler (#10248)

Motivation:

We cant reuse the ChannelPromise as it will cause an error when trying to ful-fill it multiple times.

Modifications:

- Use a new promise and chain it with the old one
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10240"
4c9a30d5f9b6b97be4b82a92a9da14bcb925c1a8,"Use `io.netty.recycler.ratio` directly (#10253)

Motivation

1. It's inable to collect all object because RATIO is always >=1 after
`safeFindNextPositivePowerOfTwo`

2. Enable drop object in `WeakOrderQueue`(commit:
71860e5b94dbc665fdb8d279d3780d6fe1c618ea) enlarge the drop ratio. We
can subtly control the overall drop ratio by using `io.netty.recycler.ratio` directly,

Modification

- Remove `safeFindNextPositivePowerOfTwo` before set the ratio

Results

Able to disable drop when recycle object"
731d33070f8dba2a6f19becc2edd6e949bc07f78,"Add a DNS client example. (#10237)

Motivation:

It seems that there is no DNS client example in Netty project so far.

Modification:

Add a Netty DNS client example.

Result:

More examples"
909e7c9c29f395ba83bd5a2c7d5cc477e4135c36,"Add option to configure recycler delayed queue drop ratio (#10251) (#10255)

Motivation

- Recycler stack and delayed queue drop ratio can only be configured with
the same value. The overall drop ratio is ratio^2.

- #10251 shows that enable drop in `WeakOrderQueue` may introduce
performance degradation. Though the final reason is not clear now,
it would be better to add option to configure delayed queue drop ratio separately.

Modification

- ""io.netty.recycler.delayedQueue.ratio"" as the drop ratio of delayed queue
- default ""delayedQueue.ratio"" is same as ""ratio""

Results

Able to configure recycler delayed queue drop ratio separately"
cf589a8f31304f85b22c80a6ebf0cdc8f9d01646,"Add DoT and TCP DNS Client Example (#10256)

Motivation:

[DNS-over-TLS (DoT)](https://tools.ietf.org/html/rfc7858.html) encrypts DNS queries and sends it over TLS connection to make sure queries are secure in transit.

[TCP DNS](https://tools.ietf.org/html/rfc7766) sends DNS queries over TCP connection (unencrypted).

Modification:

Add DNS-over-TLS (DoT) Client Example which uses TLSv1.2 and TLSv1.3.
Add TCP DNS Client Example

Result:

DNS-over-TLS (DoT) Client Example
TCP DNS Client Example"
79915347c643d564f2e5e96335faba1328eb6f92,"Cleanup test case (#10232)

* Motivation:

JsonObjectDecoderTest did include 3 println(...) call which was leftover from debugging.

Modifications:

Removed println(...)

Result:

Cleanup

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
09d38c87df62caba7c1af97bc11b84f684bf9602,"Add GlobalEventExecutor#addTask to BlockHound exceptions. (#10262)

Motivation:

GlobalEventExecutor#addTask may be called during SingleThreadEventExecutor shutdown.
May result in a blocking call, because GlobalEventExecutor#taskQueue is a BlockingQueue.

Modifications:

Add allowBlockingCallsInside configuration for GlobalEventExecutor#addTask.

Result:

Fixes #10257.
When BlockHound is installed, GlobalEventExecutor#addTask is not reported as a blocking call."
322d96ef9295a0df4438d60b0959bff7a65b5a22,"Fix date format in headers to use 2-digit day of month (#10259)

Motivation:

`Date`, `Expires`, and `Set-Cookie` headers are being generated with a 1-digit day of month,
e.g. `Sun, 6 Nov 1994 08:49:37 GMT`. RFC 2616 specifies that `Date` and `Expires` headers should
use ""a fixed-length subset of that defined by RFC 1123"" which includes a 2-digit day of month.
RFC6265 is lax in it's specification of the `Set-Cookie` header and permits a 2-digit day of month.

See: https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html
See: https://tools.ietf.org/html/rfc1123#page-55
See: https://tools.ietf.org/html/rfc6265#section-5.1.1

Modifications:

- Update `DateFormatter` to correctly implement RFC 2616 headers

Result:

```
Date: Sun, 06 Nov 1994 08:49:37 GMT
Expires: Sun, 06 Nov 1994 08:49:37 GMT
Set-Cookie: id=a3fWa; Expires=Sun, 06 Nov 1994 08:49:37 GMT
```"
4c758a214de6aac63d346a3c26898fbd9993e722,"Remove unused imports in DefaultHttp2LocalFlowController.java and HpackStaticTable.java (#10265)

Motivation:

`io.netty.handler.codec.http2.Http2Stream.State` is never used in DefaultHttp2LocalFlowController.java, and `io.netty.handler.codec.http2.HpackUtil.equalsConstantTime` is never used in HpackStaticTable.java.

Modification:

Just remove these unused imports.

Result:

Make imports cleaner."
d10c946e1b5a50fd0168bd4048d40394a57a1a1e,"Remove a unused private method with empty body in HttpConversionUtil.java (#10266)

Motivation:

After searching the whole netty project, I found that the private method `translateHeader(...)` with empty body is never used actually. So I think it could be safely removed.

Modification:

Just remove this unused method.

Result:

Clean up the code."
68105b257d915d8a0cb7b2acd9061661666537b6,"Select correct nameserver for CNAME (#10272)

Motivation:

The nameserver that should / must be used to resolve a CNAME may be different then the nameserver that was selected for the hostname to resolve. Failing to select the correct nameserver may result in problems during resolution.

Modifications:

Use the correct DnsServerAddressStream for CNAMEs

Result:

Always use the correct DnsServerAddressStream for CNAMEs and so fix resolution failures which could accour when CNAMEs are in the mix that use a different domain then the original hostname that we try to resolve"
1c21733fb902ae40be29c11184cc712ddcc0a259,"Update Java versions (#10273)

Motivation:

We should use the latest patch release of each java version

Modifications:

Update versions

Result:

Use latest versions on CI"
71467892bf1213472d73bdd656c550fe0a65d4ca,"OpenSslSession.getLocalCertificates() and  getLocalPrincipal() must r… (#10275)


Motivation:

OpenSslSession.getLocalCertificates() and  getLocalPrincipal() must return null on client side if mTLS is not used as stated in the API documentation. At the moment this is not always the case

Modifications:

- Ensure we only return non-null if mTLS is used
- Add unit tests

Result:

Follow SSLSession API contract"
8f617b6305028e56cc8f6b007dc598abe81d84c2,"Use correct JDK 13 version (#10276)

Motivation:

We had a typo in the JDK 13 version to use.

Modifications:

Use the correct version string

Result:

Be able to run CI with JDK13 again"
8c5b72aaf02e7f349a9972dd9179b449b5a6067b,[maven-release-plugin] prepare release netty-4.1.50.Final
caf51b72840e12142b3a87355da63e33230b24b4,[maven-release-plugin] prepare for next development iteration
d5087deec63e0152b76d1564d3fa8ae31d84c6af,"Fix regression in HttpPostStandardRequestDecoder to always decode + to whitespace (#10285)

Motivations
-----------
HttpPostStandardRequestDecoder was changed in 4.1.50 to provide its own
ByteBuf UrlDecoder. Prior to this change, it was using the decodeComponent
method from QueryStringDecoder which decoded + characters to
whitespaces. This behavior needs to be preserved to maintain backward
compatibility.

Modifications
-------------
Changed HttpPostStandardRequestDecoder to detect + bytes and decode them
toe whitespaces. Added a test.

Results
-------
Addresses issues#10284"
9411f2a434f5cc8c29282080576f03ebb468e290,"Fix classifier for aarch64 (#10279)

Motivation:

The defined classifier for aarch64 was not correct

Modifications:

Fix classifier

Result:

Be able to correctly include the aarch64 native libs"
2183b37892851dc5d993652a3b9d88f11015366d,"Fix a potential fd leak in AbstractDiskHttpData.getChunk (#10270)

Motivation:

`FileChannel.read()` may throw an IOException. We must deal with this in case of the occurrence of `I/O` error.

Modification:

Place the `FileChannel.read()` method call in the `try-finally` block.

Result:

Advoid fd leak.


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
91ca3d332fc44f25498cce3ff9997484fa758d6c,"Allow to have the session tickets automatically managed by the native… (#10280)


Motivation:

BoringSSL supports to automatically manage the session tickets to be used and so also rotate them etc. This is often prefered by users as it removed some complexity. We should support to make use of this.

Modifications:

- Allow to have setSessionTickets() called without an argument or an empty array
- Add tests

Result:

Easier usage of session tickets"
91a7f49f0daa38f657d31b6d6335606bcf380f26,"Add DNS client examples for run-example.sh (#10283)

Motivation:

There exists no DNS client examples in run-example.sh for the moment.

Modification:

Add DNS client examples for run-example.sh.

Result:

Help run the examples."
75df58a7e160938716146bb761f4099a0a89c38f,"Guard against re-entrancy issues while draining AbstractCoalescingBufferQueue (#10294)

Motivation:

AbstractCoalescingBufferQueue had a bug which could lead to an empty queue while still report bytes left. This was due the fact that we decremented the pending bytes before draining the queue one-by-one. The problem here is that while the queue is drained we may notify the promise which may add again buffers to the queue for which we never decrement the bytes while we drain these

Modifications:

- Decrement the pending bytes every time we drain a buffer from the queue
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/10286"
69db5bff7126fb1d4c26370aa20b258f14246da4,"Respect jdk.tls.client.enableSessionTicketExtension and jdk.tls.server.enableSessionTicketExtension when using native SSL impl (#10296)

Motivation:

We should respect jdk.tls.client.enableSessionTicketExtension and jdk.tls.server.enableSessionTicketExtension when using the native SSL implementation as well to make the usage of it easier and more consistent. These properties were introduced by JDK13:

https://seanjmullan.org/blog/2019/08/05/jdk13

Modifications:

Check if the properties are set to true and if so enable tickets

Result:

Easier to enable tickets and be more consistent"
20b8685c8b9a35b33f27c8b26900cf65e1575417,"Make ReferenceCountedOpenSslContext.setUseTasks public (#10289)

Motivation:
make the existing setter `ReferenceCountedOpenSslContext.setUseTasks` public

Modification:

Added the `public` qualified and removed the comment ""for tests only""

Result:

Fixes #10288"
bdbf68f9881b7187c0da45d5b45f32f92fe5efaa,"Include aarch64 packages in netty-bom (#10292)


Motivation:

The linux-aarch64 packages are not declared in netty-bom. There are no consistency checks for netty bom, hence it can easily miss updates when artifacts are added.

Modifications:

- Add declarations.
- Modify netty-all to depend on netty-bom for version declarations,
thus requiring netty-bom to be uptodate.

Result:

Be able to reference aarch64 packages without an explicit version. The content of netty-all is guaranteed to be declared in netty-bom, adding a safety net.

Signed-off-by: Robert Varga <robert.varga@pantheon.tech>"
1b6595b358d470bcf4b20905db34a3f2676f223a,"Check if SSL pointer was freed before using it in RefereceCountedOpenSslEngine in all cases (#10299)

Motivation:

To ensure we not crash in all cases we should better check that the SSL pointer was not freed before using it.

Modifications:

Add missing `isDestroyed()` checks

Result:

Ensure we not crash due usage of freed pointer."
877db52e3765a8099b72f54b03e78e0d4d34476a,"Do not require BoringSSL for testSessionTicketsWithTLSv12AndNoKey (#10301)

Motivation:

`SslHandlerTest.testSessionTicketsWithTLSv12AndNoKey` does not require
BoringSSL and works with OpenSSL as well.

Modifications:

- Remove assume statement that expected BoringSSL;

Result:

Test works for any implementation of `OPENSSL` provider."
d1b99b702c3cd76d2b8ed277274b7f18c04db104,"Use allocation free algorithm to detect CNAME cache loops (#10291)


Motivation:

We did use a HashSet to detect CNAME cache loops which needs allocations. We can use an algorithm that doesnt need any allocations

Modifications:

Use algorithm that doesnt need allocations

Result:

Less allocations on the slow path"
f66412c84c57f77915accb003dec8dc9b3896afe,"Dequeue all cached messages and destroy the queue instance after removing the FlowControlHandler from channel pipeline. (#10304)

Motivation:

The `FlowControlHandler` may cache the received messages in a queue in order to do the flow control. However, if this handler is manually removed from pipeline during runtime, those cached messages might not be passed to the next channel handler forever.

Modification:

Dequeue all these cached messages and call `ChannelHandlerContext.fireChannelRead(...)` in `handlerRemoved(...)` method.

Result:
Avoid losing the received messages."
6339557676a80685946d5e03f42536662b28f01b,"We should fail fast when a CNAME loop is detected (#10305)

Motivation:

Once a CNAME loop was detected we can just fail fast and so reduce the number of queries.

Modifications:

Fail fast once a CNAME loop is detected

Result:

Fail fast"
0375e6e01b0b6412c2369a8d3e2a990f41a9edfa,"Fix very tiny comment error in Recycler (#10309)

Motivation:

Fix very tiny comment error in Recycler

Modifications:

Fix very tiny comment error in Recycler

Result:

Correctly comment about drop in WeakOrderQueue#add"
bc943808d081f04d64e25d54f042b208b286d7fe,"SslHandler#wrap to preserve exception if SSLEngine is closed (#10327)


Motivation:
SslHandler currently throws a general SSLException if a wrap attempt
fails due to the SSLEngine being closed. If writes are queued the
failure rational typically requires more investigation to track down the
original failure from a previous event. We may have more informative
rational for the failure and so we should use it.

Modifications:
- SslHandler#wrap to use failure information from the handshake or prior
transport closure if available

Result:
More informative exceptions from SslHandler#wrap if the SSLEngine has
been previously closed."
6e0d22335d3419d91ae60cb40811a0faa25bed50,"Include more details if we throw an IllegalArgumentException because of overflow (#10330)

Motivation:

We should include as much details as possible when throwing an IllegalArgumentException because of overflow in CompositeByteBuf

Modifications:

Add more details and factor out check into a static method to share code

Result:

Make it more clear why an operations failed"
18bdfd9cf772d77ae4cd7760135b5b6379ca780b,"Update GraalVM with JDK 8 and add GraalVM with JDK 11 (#10333)

Motivation:

A new GraalVM with JDK 11 was released and GraalVM adds Java 11 support

Modification:

- Update GraalVM JDK 8 version
- Add GraalVM JDK 11 support

Result:

Build with GraalVM JDK 11 and use latest GraalVM JDK 8 version"
0dc94e4965ae4f599f668d28b75183fa346cf7e5,"Set (and override) reserved websocket handshake response headers after custom to avoid duplication (#10319)

Motivation:
Currently we passing custom websocket handshaker response headers to a `WebSocketServerHandshaker` but they can contain a reserved headers (e.g. Connection, Upgrade, Sec-Websocket-Accept) what lead to duplication because we use response.headers().add(..) instead of response.headers().set(..).

Modification:
In each `WebSocketServerHandshaker00`, ... `WebSocketServerHandshaker13` implementation replace the method add(..) to set(..) for reserved response headers.

Result:

Less error-prone"
de134da720d23909151d20e6af6eb2a96181bf03,"More values other than chunked defined in Transfer-Encoding header leads to decode failure (#10321)

Motivation:

`containsValue()` will check if there are multiple values defined in the specific header name, we need to use this method instead of `contains()` for the `Transfer-Encoding` header to cover the case that multiple values defined, like: `Transfer-Encoding: gzip, chunked`

Modification:

Change from `contains()` to `containsValue()` in `HttpUtil.isTransferEncodingChunked()` method.

Result:

Fixes #10320"
21eb936dbe713561505ea46b325ede29cd51e49e,"Fix a test case problem: testSwallowedReadComplete(...) may fail with an AssertionError sometimes. (#10313)

Motivation:

It seems that `testSwallowedReadComplete(...)` may fail with an AssertionError sometimes after my tests. The relevant stack trace is as follows:

```
java.lang.AssertionError: expected:<IdleStateEvent(READER_IDLE, first)> but was:<null>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at io.netty.handler.flow.FlowControlHandlerTest.testSwallowedReadComplete(FlowControlHandlerTest.java:478)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)

```
Obviously the `readerIdleTime` of `IdleStateHandler` and the thread sleep time before `EmbeddedChannel.runPendingTasks` are both 100ms. And if `userEvents.poll()` happened before `userEvents.add(...)` or no `IdleStateEvent` fired at all, this test case would fail.

Modification:

Sleep for a little more time before running all pending tasks in the `EmbeddedChannel`.

Result:

Fix the problem of small probability of failure."
0bd87716976f36cfa35d8ddbbb7bc0d700b402e6,"Fix possible StackOverflowError when try to resolve authorative names… (#10337)


Motivation:

There is a possibility to end up with a StackOverflowError when trying to resolve authorative nameservers because of incorrect wrapping the AuthoritativeDnsServerCache.

Modifications:

Ensure we don't end up with an overflow due wrapping

Result:

Fixes https://github.com/netty/netty/issues/10246"
9a558f1be989c557bccf05ced361a7767880c375,"Update test to directly check for SslHandshakeTimeoutException (#10339)

Motivation:

9b7e091 added a special SSLHandshakeException sub-class to signal handshake timeouts but we missed to update a testcase to directly assert the type of the exception.

Modifications:

Assert directly that SslHandshakeTimeoutException is used

Result:

Test cleanup"
714dd00aabb414e6cfa931888328ad41d8f323e9,"Fix #10261 stomp can be chunked, so implement StompWebSocketFrameEncoder (#10274)

Motivation:

Current implementation `StompSubframeEncoder` can encode `StompFrame` into several separate chunks or encode separately `StompHeadersSubframe` and `StompContentSubframe`. But some client libraries (e.g. stomp.js) do not support aggregation.

Modification:

Add StompWebSocketFrameEncoder for integration between origin stomp suframe encoder and `ContinuationWebSocketFrame` to support  chunks on transport level.

Result:

Fixes #10261"
b559711f3e1b712c3f1dfc77d5504cd1ca58aa38,"Motivation: (#10326)

The current FLowControlHandler keeps a flag to track whether a read() call is pending.
This could lead to a scenario where you call read multiple times when the queue is empty,
and when the FlowControlHandler Queue starts getting messages, channelRead will be fired only once,
when we should've fired x many times, once for each time the handlers downstream called read().

Modifications:

Minor change to replace the boolean flag with a counter and adding a unit test for this scenario.

Result:

I used TDD, so I wrote the test, made sure it's failing, then updated the code and re-ran the test
to make sure it's successful after the changes.

Co-authored-by: Kareem Ali <kali@localhost.localdomain>"
bcb62be62bd989c0292e0f8e22a51127907cefdc,"Consolidate HttpObjectDecoder default values into constants (#10344)

Motivation

HttpObjectDecoder and its associated classes make frequent use of
default values for maxInitialLineLength, maxHeaderSize, maxChunkSize,
etc. Today, these defaults are defined in-line in constructors and
duplicated across many classes. This repetition is more prone to error
and inconsistencies.

Furthermore, due to the current lack of builder support, if a user wants
to change just one of these values (e.g., maxHeaderSize), they are also
required to know and repeat the other default values (e.g.,
maxInitialLineLength and maxChunkSize).

The primary motivation for this change is as we are considering adding
another constructor parameter (for multiple content length behavior),
appending this parameter may require some users to have prior knowledge
of the default initialBufferSize, and it would be cleaner to allow them
to reference the default constant.

Modifications

* Consolidate the HttpObjectDecoder default values into public constants
* Reference these constants where possible

Result

No functional change. Additional telescoping constructors will be easier
and safer to write. Users may have an easier experience changing single
parameters."
4dc6764d7b6cee4bd788b35c1a8ef36e7e3be05f,"version: remove Duplicating managed version (#10329)

Motivation:

remove Duplicating managed version, cause it is already defined in the parent project.

Modification:

- origin 
```
<dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-dev-tools</artifactId>
      <scope>test</scope>
      <version>${project.version}</version>
      <optional>true</optional>
</dependency>

<plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.10</version>
</plugin>
```

- after modify

```
<dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-dev-tools</artifactId>
      <scope>test</scope>
      <optional>true</optional>
</dependency>

<plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
</plugin>
```

Result:

remove Duplicating managed version"
48938e2d99d51c8226f60b045b9a7a4520ed65da,"Fix memory leak in AbstractDiskHttpData when CompositeByteBuf is used (#10360)

Motivation:

AbstractDiskHttpData may cause a memory leak when a CompositeByteBuf is used. This happened because we may call copy() but actually never release the newly created ByteBuf.

Modifications:

- Remove copy() call and just use ByteBuf.getBytes(...) which will internally handle the writing to the FileChannel without any extra copies that need to be released later on.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10354"
8b3abf3b49d20def418f634bd2634811ebc3e53d,"Fix a javadoc mistake. (#10364)

Motivation:

There exists a `javadoc` mistake in `HttpHeaderValues.java`.

Modification:

Just correct this `javadoc` mistake..."
e0dc054927c70270e757b09660a008ed4e6a9086,"Expand ChannelPipeline javadocs to cover UnorderedThreadPoolEventExecutor (#10361)

Motivation:

Seems like some users are suprised by the behaviour of DefaultEventExecutor when used within the ChannelPipeline. We should clarify the semantics and also mention UnordedThreadPoolEventExecutor which may be more inline with their expectations

Modifications:

Add javadocs section about UnorderedThreadPoolEventExecutor and expand details for DefaultEventExecutor

Result:

Clarify sematics"
f3356c298939ade98a12263a23d05f5b21eae472,"Ensure ApplicationProtocolNegotiationHandler does handle handshake fa… (#10363)


Motivation:

When ApplicationProtocolNegotiationHandler is in the pipeline we should expect that its handshakeFailure(...) method will be able to completly handle the handshake error. At the moment this is not the case as it only handled SslHandshakeCompletionEvent but not the exceptionCaught(...) that is also triggered in this case

Modifications:

- Call handshakeFailure(...) in exceptionCaught and so fix double notification.
- Add testcases

Result:

Fixes https://github.com/netty/netty/issues/10342"
bd577ef52f178ceb9e2f0d9b718a5397afb2578b,"Ensure we feed all data to the SSLEngine during handshaking in our tests (#10373)

Motivation:

Due a bug in our test we may dropped data on the floor which are generated during handshaking (or slightly after). This could lead to corrupt state in the engine itself and so fail tests. This is especially true for TLS1.3 which generates the sessions on the server after the ""actual handshake"" is done.

Modifications:

Contine with wrap / unwrap until all data was consumed

Result:

Correctly feed all data to the engine during testing"
9c6c5154274d218698026593b0204f94203284d7,"X509TrustManager with OPENSSL provider is not wrapped with hostname verification if Conscrypt is inserted in the first place (#10375)

Motivation:

Modifications:

Directly specify the provider which is used to create the SSLContext

Result:

Fixes https://github.com/netty/netty/issues/10374"
eccb87b1f7e6b0169ced65be79a5f6b973373fa7,"The bounded Mpsc Queue for no Unsafe users behave differently from Unsafe ones (#10377)

Motivation:

Unsafe users are getting MpscChunkedArrayQueue while no Unsafe ones MpscGrowableAtomicArrayQueue

Modifications:

MpscChunkedAtomicArrayQueue should be used for no Unsafe users (matching MpscChunkedArrayQueue behaviour)

Result:

no Unsafe users uses MpscChunkedAtomicArrayQueue while allocating bounded Mpsc Queues"
662e0b4b81833a835b290e60982c9de3a1878656,"Ensure we preserve the original cause of the SSLException in all case… (#10372)


Motivation:

We did not correctly preserve the original cause of the SSLException when all the following are true:

 * SSL_read failed
 * handshake was finished
 * some outbound data was produced durigin SSL_read (for example ssl alert) that needs to be picked up by wrap(...)

Modifications:

Ensure we correctly preserve the original cause of the SSLException and rethrow it once we produced all data via wrap(...)

Result:

Be able to understand why we see an error in all cases"
523dc5c269fef07d3e9ceb1e7944118645b0717c,"Fix #10378,ResourceLeakDetectorFactory.newResourceLeakDetector(Class, int) ignores  sampling interval (#10383)

Motivation:

newResourceLeakDetector(...) did not correctly pass the samplingInterval parameter and so it was ignored.

Modification:

ResourceLeakDetectorFactory.newResourceLeakDetector(Class, int) use the second parameter as the sampling interval of the newly created ResourceLeakDetector.

Result:

Fixes #10378"
cbe238a95bab238455e3ff1849d450a9836f39ef,"Correctly include TLS1.3 ciphers in the enabled ciphersuites when using BoringSSL (#10388)

Motivation:

BoringSSL behaves differently then OpenSSL and not include any TLS1.3 ciphers in the returned array when calling SSL_get_ciphers(...). This is due the fact that it also not allow to explicit configure which are supported and which not for TLS1.3. To mimic the behaviour expected by the SSLEngine API we should workaround this.

Modifications:

- Add a unit test that verifies enabled protocols / ciphers
- Add special handling for BoringSSL and tls1.3

Result:

Make behaviour consistent"
a6084370891725006779786d789eed7ca2522661,"Add unit test for HpackDynamicTable. (#10389)

Motivation:

`HpackDynamicTable` needs some test cases to ensure bug-free.

Modification:

Add unit test for `HpackDynamicTable`.

Result:

Improve test coverage slightly."
9893ac726fef12157c996bc827e2cdc840f7ef35,"Do not report ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback.verify as blocking call (#10387)

Motivation:

When BlockHound is installed,
ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback.verify
is reported as blocking call.

Modifications:

Add allowBlockingCallsInside configuration for
ReferenceCountedOpenSslClientContext$ExtendedTrustManagerVerifyCallback.verify

Result:

Fixes #10384"
7a05aa1cf874c49ef07f1f2fd85fe35437642d41,"Add detailed error message corresponding to the IndexOutOfBoundsException while calling getEntry(...) (#10386)

Motivation:
`getEntry(...)` may throw an IndexOutOfBoundsException without any error messages.


Modification:

Add detailed error message corresponding to the IndexOutOfBoundsException while calling `getEntry(...)` in HpackDynamicTable.java.

Result: 

Easier to debug"
9557c88da2aaa49b3c3fd7525462dc0694681c19,"Add option to HttpObjectDecoder to allow duplicate Content-Lengths (#10349)


Motivation:

Since https://github.com/netty/netty/pull/9865 (Netty 4.1.44) the
default behavior of the HttpObjectDecoder has been to reject any HTTP
message that is found to have multiple Content-Length headers when
decoding. This behavior is well-justified as per the risks outlined in
https://github.com/netty/netty/issues/9861, however, we can see from the
cited RFC section that there are multiple possible options offered for
responding to this scenario:

> If a message is received that has multiple Content-Length header
> fields with field-values consisting of the same decimal value, or a
> single Content-Length header field with a field value containing a
> list of identical decimal values (e.g., ""Content-Length: 42, 42""),
> indicating that duplicate Content-Length header fields have been
> generated or combined by an upstream message processor, then the
> recipient MUST either reject the message as invalid or replace the
> duplicated field-values with a single valid Content-Length field
> containing that decimal value prior to determining the message body
> length or forwarding the message.

https://tools.ietf.org/html/rfc7230#section-3.3.2

Netty opted for the first option (rejecting as invalid), which seems
like the safest, but the second option (replacing duplicate values with
a single value) is also valid behavior.

Modifications:

* Introduce ""allowDuplicateContentLengths"" parameter to
HttpObjectDecoder (defaulting to false).
* When set to true, will allow multiple Content-Length headers only if
they are all the same value. The duplicated field-values will be
replaced with a single valid Content-Length field.
* Add new parameterized test class for testing different variations of
multiple Content-Length headers.

Result:

This is a backwards-compatible change with no functional change to the
existing behavior.

Note that the existing logic would result in NumberFormatExceptions
for header values like ""Content-Length: 42, 42"". The new logic correctly
reports these as IllegalArgumentException with the proper error message.

Additionally note that this behavior is only applied to HTTP/1.1, but I
suspect that we may want to expand that to include HTTP/1.0 as well...
That behavior is not modified here to minimize the scope of this change."
39928e3423494c749f55fb12315acf73ec961fd0,"Update to netty-tcnative 2.0.31.Final and make SslErrorTest more robust (#10392)

Motivation:

There was a new netty-tcnative release which we should use. Beside this the SSLErrorTest was quite fragile and so should be adjusted.

Modifications:

Update netty-tcnative and adjust test

Result:

Use latest netty-tcnative release"
e04803daec0e42356efff26bd6798719f3943609,"Modify OpenSSL native library loading to accommodate GraalVM (#10395)

**Motivation:**

We are interested in building Netty libraries with Ahead-of-time compilation with GraalVM. We saw there was [prior work done on this](https://github.com/netty/netty/search?q=graalvm&unscoped_q=graalvm). We want to introduce a change which will unblock GraalVM support for applications using netty and `netty-tcnative`.

This solves the error [that some others encounter](https://github.com/oracle/graal/search?q=UnsatisfiedLinkError+sslOpCipherServerPreference&type=Issues):

```
Exception in thread ""main"" java.lang.UnsatisfiedLinkError: io.grpc.netty.shaded.io.netty.internal.tcnative.NativeStaticallyReferencedJniMethods.sslOpCipherServerPreference()I [symbol: Java_io_grpc_netty_shaded_io_netty_internal_tcnative_NativeStaticallyReferencedJniMethods_sslOpCipherServerPreference or Java_io_grpc_netty_shaded_io_netty_internal_tcnative_NativeStaticallyReferencedJniMethods_sslOpCipherServerPreference__]
```

**Modification:**

The root cause of the issue is that in the tcnative libraries, the [`SSL.java` class](https://github.com/netty/netty-tcnative/blob/783a8b6b69028ef947354cd3c54910dbf519c225/openssl-dynamic/src/main/java/io/netty/internal/tcnative/SSL.java#L67) references a native call in the static initialization of the class - the method `sslOpCipherServerPreference()` on line 67 is used to initialize the static variable. But you see that `OpenSsl` also uses[ `SSL.class` to check if `netty-tcnative` is on the classpath before loading the native library](https://github.com/netty/netty/blob/cbe238a95bab238455e3ff1849d450a9836f39ef/handler/src/main/java/io/netty/handler/ssl/OpenSsl.java#L123). 

So this is the problem because in ahead-of-time compilation, when it references the SSL class, it will try to load those static initializers and make the native library call, but it cannot do so because the native library has not been loaded yet since the `SSL` class is being referenced to check if the library should be loaded in the first place.

**Solution:** So the proposed solution here is to just choose a different class in the `tcnative` package which does not make a native library call during static initialization. I just chose `SSLContext` if this is OK.

This should have no negative effects other than unblocking the GraalVM use-case.

**Result:**

It fixes the unsatisfied link error. It will fix error for future users; it is a common error people encounter."
cb9d4a1ef5dad8bb52f853eadb58ceee809c7c65,"Correctly return NEED_WRAP if we produced some data even if we could not consume any during SSLEngine.wrap(...) (#10396)

Motivation:

At the moment we may report BUFFER_OVERFLOW when wrap(...) fails to consume data but still prodce some. This is not correct and we should better report NEED_WRAP as we already have produced some data (for example tickets). This way the user will try again without increasing the buffer size which is more correct and may reduce the number of allocations

Modifications:

Return NEED_WRAP when we produced some data but not consumed any.

Result:

Fix ReferenceCountedOpenSslEngine.wrap(...) state machine"
646934ef0abe9c2c0934ca24dfb66b7018a284d0,[maven-release-plugin] prepare release netty-4.1.51.Final
bfbeb2dec62102836e096e89cedf7b230517d786,[maven-release-plugin] prepare for next development iteration
5a372f0cb1a05fcbdbb513fc46034f64bd0ce0e8,"jdk.tls.client.enableSessionTicketExtension must be respected by OPENSSL and OPENSSL_REFCNT SslProviders (#10401)

Motivation:

jdk.tls.client.enableSessionTicketExtension property must be respect by OPENSSL and OPENSSL_REFCNT SslProvider to ensure a consistent behavior. Due a bug this was not the case and it only worked for OPENSSL_REFCNT but not for OPENSSL.

Modifications:

Move the property check into static method that is used by both

Result:

Correctly respect jdk.tls.client.enableSessionTicketExtension"
77101ab8af0b14f7d96de394f13886dcb49733c4,"Eliminate a redundant method call in HpackDynamicTable.add(...) (#10399)

Motivation:

The result of `header.size()` is already cached in `headerSize`. There is no need to call it again actually.

Modification:

Replace the second `header.size()` with `headerSize` directly.

Result:

Improve performance slightly."
9da40ec311ab11a376632d0c93610c65758996a6,"Simple fix typo (#10403)

Motivation:

Wrong typo in annotation at line 925.

Modifications:

Fix typo. *then -> than.

Result:

Fix typo."
825916c7f0c85e9df0516a7c0b3cbc994c6a4472,"Support session cache for client and server when using native SSLEngine implementation (#10331)

Motivation:

At the moment we don't support session caching for client side when using native SSLEngine implementation and our implementation of SSLSessionContext is incomplete.

Modification:

- Consume netty-tcnative changes to be able to cache session in an external cache
- Add and adjust unit tests to test session caching
- Add an in memory session cache that is hooked into native SSLEngine

Result:

Support session caching on the client and server side"
7caced28c62f88f5045c3deaf8dfa4d4be1c803c,"Review PooledByteBufAllocator in respect of jemalloc 4.x changes and update allocate algorithm.(#10267)


Motivation:

For size from 512 bytes to chunkSize, we use a buddy algorithm. The
drawback is that it has a large internal fragmentation.

Modifications:

1. add SizeClassesMetric and SizeClasses
2. remove tiny size, now we have small, normal and huge size
3. rewrite the structure of PoolChunk
4. rewrite pooled allocate algorithm in PoolChunk
5. when allocate subpage, using lowest common multiple of pageSize and
   elemSize instead of pageSize.
   6. add more tests in PooledByteBufAllocatorTest and PoolArenaTest

Result:
Reduce internal fragmentation and closes #3910"
cd0203b5c7dde9e94cfd8f976c77baae95c0d790,"Add default handling for switch statement (#10408)

Motivation:

When a switch statement is used we should always define a `default:` so we don't introduce bugs due fall-through.

Modification:

Add missing `default:`s

Result:

Less error-prone code"
9f89eb6429d6de67e03ee5811e070a5f15ddb2a7,"Add IndexOutOfBoundsException error message (#10405)

Motivation:

We should provide details about why an IOOBE was thrown

Modification:

Add IndexOutOfBoundsException error information in io.netty.util.internal.AppendableCharSequence and io.netty.handler.codec.CodecOutputList class

Result:

Easier to debug"
4e86f768b916a34d3a929251eff8428ef47be65d,"Reduce the scope of synchronized block in PoolArena (#10410)

Motivation:

We shouldn't call incSmallAllocation() in a synchronized block as its backed by a concurrent datastructure

Modifications:

Move call of incSmallAllocation() out of synchronized block

Result:

Minimize scope of synchronized block"
28e1fbd366602d8f4b50921afb2c9d5e41b94a2d,"Make the TLSv1.3 check more robust and not depend on the Java version… (#10409)


Motivation:

TLSv1.3 is not strictly limited to Java11+ anymore as different vendors backported TLSv1.3 to Java8 as well. We should ensure we make the detection of if TLSv1.3 is supported not depend on the Java version that is used.

Modifications:

- Add SslProvider.isTlsv13Supported(...) and use it in tests to detect if we should run tests against TLSv1.3 as well
- Adjust testcase to work on latest JDK 8 release as well

Result:

Correct detection of TLSv1.3 support even if Java version < 11."
573ff0a33eeb574a12bc1bcee0579f7f0969c669,"Making AES_128_GCM_SHA256 have a higher priority over CHACHA20_POLY1305_SHA256 on HTTP2 (#10418)

Motivation:

From the recent benchmark using gRPC-Java based on Netty's HTTP2, it appears that it prefers `ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` over `ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` since it uses the Netty HTTPS Cipher list as is. Both are considered safe but `ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` has a good chance to get more optimized implementation. (e.g. AES-NI) When running both on GCP Intel Haswell VM, `TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` spent 3x CPU time than `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`. (Note that this VM supports AES-NI)

From the cipher suites listed on `Intermediate compatibility (recommended)` of [Security/Server Side TLS](https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility), they have a cipher preference which is aligned with this PR.

```
0x13,0x01  -  TLS_AES_128_GCM_SHA256         TLSv1.3  Kx=any   Au=any    Enc=AESGCM(128)             Mac=AEAD
0x13,0x02  -  TLS_AES_256_GCM_SHA384         TLSv1.3  Kx=any   Au=any    Enc=AESGCM(256)             Mac=AEAD
0x13,0x03  -  TLS_CHACHA20_POLY1305_SHA256   TLSv1.3  Kx=any   Au=any    Enc=CHACHA20/POLY1305(256)  Mac=AEAD
0xC0,0x2B  -  ECDHE-ECDSA-AES128-GCM-SHA256  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AESGCM(128)             Mac=AEAD
0xC0,0x2F  -  ECDHE-RSA-AES128-GCM-SHA256    TLSv1.2  Kx=ECDH  Au=RSA    Enc=AESGCM(128)             Mac=AEAD
0xC0,0x2C  -  ECDHE-ECDSA-AES256-GCM-SHA384  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AESGCM(256)             Mac=AEAD
0xC0,0x30  -  ECDHE-RSA-AES256-GCM-SHA384    TLSv1.2  Kx=ECDH  Au=RSA    Enc=AESGCM(256)             Mac=AEAD
0xCC,0xA9  -  ECDHE-ECDSA-CHACHA20-POLY1305  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=CHACHA20/POLY1305(256)  Mac=AEAD
0xCC,0xA8  -  ECDHE-RSA-CHACHA20-POLY1305    TLSv1.2  Kx=ECDH  Au=RSA    Enc=CHACHA20/POLY1305(256)  Mac=AEAD
0x00,0x9E  -  DHE-RSA-AES128-GCM-SHA256      TLSv1.2  Kx=DH    Au=RSA    Enc=AESGCM(128)             Mac=AEAD
0x00,0x9F  -  DHE-RSA-AES256-GCM-SHA384      TLSv1.2  Kx=DH    Au=RSA    Enc=AESGCM(256)             Mac=AEAD
```

Modification:

Moving up `AES_128_GCM_SHA256` in the CIPHERS of HTTPS so that it gets priority.

Result:

When connecting to the server supporting both `ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` and `ECDSA_WITH_CHACHA20_POLY1305_SHA256` and respecting the client priority of cipher suites, it will be able to save significant cpu time when running it on machines with AES-NI support."
11107a4121de4fe8e2519677170e03844a82ca78,"Ignore `.shelf/` folder generated by IntelliJ IDEA (#10445)

Motivation:

IntelliJ IDEA may generate a local folder `.shelf/` for version control.
For more information, see
https://www.jetbrains.com/help/idea/shelving-and-unshelving-changes.html

Modifications:

- Add `.shelf/` folder to the `.gitignore` file;

Result:

IntelliJ IDEA's `.shelf/` folder is ignored by git."
8a567f491003d55be4de387760455fb4f5da41a8,"Fix bug in Http2FrameClient (#10427)

Motivation:
This request only has headers frame, it should set endOfStream flag, or
it will never get a response.

Modifications:
Set endOfStream=true in header frame.

Result:
Http2FrameClient can get a response now."
dd168f406e5c4a81ee80a11194fa81eaef2e5ab6,"Make `DefaultHttp2FrameStream.stream` private (#10442)

Motivation:

`DefaultHttp2FrameStream.stream` is not used outside of its class and
therefore can be private.

Modifications:

- Make `DefaultHttp2FrameStream.stream` private;

Result:

Correct visibility scoping for `DefaultHttp2FrameStream.stream`."
c4754cf7b890e7169b2438567fa2f881728715ed,"Fix DnsNameResolver may have LEAK ByteBuf after cancelling the returned future (#10448)

Motivation:

If we cancel the returned future of resolve query, we may get LEAK. Try to release the ByteBuf if netty can't pass the DnsRawRecord to the caller.

Modification:

Using debug mode I saw there are two places that don't handle trySuccess with release. Try to release there.

Result:

Fixes #10447."
0601389766e2feec82c1d6d9e1834a3930c82caa,"Do not try to use Unsafe.staticFieldOffset() method under a native image. (#10428)

Motivation:

GraalVM's native images built with native-image tool do not support Unsafe.staticFieldOffset() method (at least, currently). If an application using Netty (and causing initialization of io.netty.util.internal.PlatformDependent0 class) is built into a native image and run, this results in the following error thrown during initialization:

Exception in thread ""main"" com.oracle.svm.core.jdk.UnsupportedFeatureError: Unsupported method of Unsafe
	at com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:86)
	at jdk.internal.misc.Unsafe.staticFieldOffset(Unsafe.java:230)
	at sun.misc.Unsafe.staticFieldOffset(Unsafe.java:662)
	at io.netty.util.internal.PlatformDependent0$5.run(PlatformDependent0.java:294)
	at java.security.AccessController.doPrivileged(AccessController.java:83)
	at io.netty.util.internal.PlatformDependent0.<clinit>(PlatformDependent0.java:279)

This seems to be the reason of the behavior described in #10051.

Modification:

The idea of this commit is to only invoke Unsafe.staticFieldOffset() is we are not in a native image; if we are, behave like if we could not find the field at all.

GraalDetector is borrowed from Spring framework.

Result:

Fixes #10051"
de4627852f5b1c42fd0b8cb2d66634be569a86a3,"New H2 stream promise may never complete (#10443)


Motivation:

`Http2StreamChannelBootstrap#open0` invokes
`Http2MultiplexHandler#newOutboundStream()` which may throw an
`IllegalStateException`. In this case, it will never complete
the passed promise.

Modifications:

- `try-catch` all invocations of `newOutboundStream()` and fail
promise in case of any exception;

Result:

New H2 stream promise always completes."
70292f6823a1e38e2f859787b60763e2332ee64e,"Replace Class.getClassLoader with io.netty.util.internal.PlatformDependent.getClassLoader in Openssl (#10454)

Motivation:

Replace Class.getClassLoader with io.netty.util.internal.PlatformDependent.getClassLoader in Openssl so it also works when a SecurityManager is in place

Modification:

Replace Class.getClassLoader with io.netty.util.internal.PlatformDependent.getClassLoader in Openssl

Result:

No issues when a SecurityManager is in place"
5aea78950f6ee0b02169c9fec15901e8bc0c3888,"Create a new h2 stream only if the parent channel is still active (#10444)


Motivation:

If a request to open a new h2 stream was made from outside of the
EventLoop it will be scheduled for future execution on the EventLoop.
However, during the time before the `open0` task will be executed the
parent channel may already be closed. As the result,
`Http2MultiplexHandler#newOutboundStream()` will throw an
`IllegalStateException` with the message that is hard to
interpret correctly for this use-case: ""Http2FrameCodec not found. Has
the handler been added to a pipeline?"".

Modifications:

- Check that the parent h2 `Channel` is still active before creating a
new stream when `open0` task is picked up by EventLoop;

Result:

Users see a correct `ClosedChannelException` in case the parent h2
`Channel` was closed concurrently with a request for a new stream."
686df17b1a1bca9ca2d26fe53e5e4eb3404a6b3f,"Fix #10449, buffer.getBytes(...) not change a file channel position (#10453)

Motivation:

Regression appeared after making changes in fix #10360 .
The main problem here that `buffer.getBytes(buffer.readerIndex(), fileChannel, fileChannel.position(), localsize)`
doesn't change channel position after writes.

Modification:

Manually set position according to the written bytes.

Result:

Fixes #10449 ."
cd7552f551bc108039ed6637b44507718c7b0446,"Add whitelist entry to BlockHound config to workaround issue when TLS… (#10459)


Motivation:

SSLEngineImpl.unwrap(...) may call FileInputStream.read(...) internally when TLS1.3 is used. This will cause an BlockingOperationError when BlockHound is enabled.

For more details see https://mail.openjdk.java.net/pipermail/security-dev/2020-August/022271.html

Modifications:

- Add whitelist entry to BlockHound config for now
- Update NettyBlockHoundIntegrationTest to include testing for this workaround

Result:

No BlockingOperationError when TLS1.3 is used with JDK SSL implementation and BlockHound is enabled"
a4c44aa34a7e9ac023cb26328a0df0948067b257,"Upgrade jctools from 3.0.0 to 3.1.0 (#10456)

Motivation:

JCTools 3.1.0 is out and includes several fixes, see https://github.com/JCTools/JCTools/releases/tag/v3.1.0

Modification:

Upgrade jctools-core version in pom.xml

Result:

Netty ships latest version of jctools."
bb184794341255cf02f9b7156c5ad828b172fdab,"Fix compilation error on JDK 15 (#10462)

Motivation:

AlgorithmId.sha256WithRSAEncryption_oid was removed in JDK15 and later so we should not depend on it as otherwise we will see compilation errors

Modifications:

Replace AlgorithmId.sha256WithRSAEncryption_oid usage with specify the OID directly

Result:

Compiles on JDK15+"
b1d3aad404a39143da7a86c121d60f35c0d21108,"Enable TLS1.3 by default of JDK SSLEngine implementation does by default (#10451)

Motiviation:

When TLSv1.3 was introduced almost 2 years ago, it was decided to disable it by default, even when it's supported by the underlying TLS implementation.

TLSv13 is pretty stable now in Java (out of the box in Java 11, OpenJSSE for Java 8, BoringSSL and OpenSSL) and may be enabled by default.

Modifications:

Ensure TLSv13 is enabled by default when the underyling JDK SSLEngine implementation enables it as well

Result:

TLSv1.3 is now enabled by default, so users don't have to explicitly enable it.

Co-authored-by: Stephane Landelle <slandelle@gatling.io>"
4b7dba14c429b70c75d8fea65cc3a5359ea14927,"If user explicit ask to use an Inet6Address we should try to do so in… (#10415)


Motivation:

Even if the system does not support ipv6 we should try to use it if the user explicit pass an Inet6Address. This way we ensure we fail and not try to convert this to an ipv4 address internally.

This incorrect behavior was introduced by https://github.com/netty/netty/commit/70731bfa7ef884ee354a5cf96e1545a8d9d090b8

Modifications:

If the user explicit passed an Inet6Address we force the usage of ipv6

Result:

Fixes https://github.com/netty/netty/issues/10402"
3ac6a827df4de91ac843d027075844087c845de9,"Revert #10326 due regression in FlowControlHandler

Motivation:

This reverts commit b559711f3e1b712c3f1dfc77d5504cd1ca58aa38 due regression introduced by it.

Modification:

Revert commit

Result:

Fixes https://github.com/netty/netty/issues/10464"
8007f907ddab1c46efd5016e83d0fb5819e42099,"Use strerror_r for JNI error messages. (#10463)

Motivation:
We previously relied on `strerror`, but this function is unfortunately not thread-safe.

Modification:
The use of `strerror` has been changed to `strerror_r`, which is thread-safe.
This function has a more complicated API, and has portability concerns that needs to be handled.
This accounts for the relatively large increase in lines of code.

Result:
Error messages from JNI are now always generated in a thread-safe way."
f58223982ce8d9ed056c3d127972222966d0ebd1,"Fix netty_unix_errors.c compilation on MacOS (#10469)

Motivation:
 The feature test macros did not work as expected on MacOS, so we ended up compiling for the GNU
 variant which resulted in compilation errors.
Modification:
 Add `__APPLE__` as another indicator to use the XSI variant of `strerror_r`.
Result:
 The project now once again compiles on MacOS."
3d7ec896ac92a4a4ed5f1e5d1731655acaf80a14,"Avoid name-clash with future java.lang.Record (#10470)

Motivation:
 Recent Intellij versions are starting to anticipate
 future versions of Java that include a
 `java.lang.Record` class, and the Intellij compiler
 gets confused by the `Record` class in our
 `ResorceLeakDetector`.

Modification:
 Rename our `Record` class to `TracerRecord`.
 This matches what the class is doing, while avoiding
 any future name clashes.

Result:
 Intellij can now compile the project again, even when
 configured to use a future (snapshot or early access)
 version of Java."
cfeda0fef26ca52007ae664c967f24e3f25236f0,"Fix overflow bug in GenericEventExecutorChooser (#10468)

Motivation:
 The executor chooser should pluck executors in round-robin, but at the 32-bit
 overflow boundary, the round-robin sequence was disrupted when the number of
 executors are not a power of 2.

Modification:
 Changed the index counter from a 32-bit to a 64-bit long. The overflow bug is
 still technically there, but it now takes so long to reach that it will never
 happen in practice. For example, 2^63 nanoseconds is almost 300 years.

Result:
 The round-robin behaviour for all EventExecutorChoosers is now preserved in
 practice.
 This fixes #10423."
564e817cfb793bfeb6346b8466f0ccf0c30b9f64,"Cleanup Conscrypt initialization (#10466)

Motivation:

How we init our static fields in Conscrypt was kind of error-prone and may even lead to NPE later on when methods were invoked out of order.

Modifications:

- Move all the init code to a static block
- Remove static field which is not needed anymore

Result:

Cleanup and also fixes https://github.com/netty/netty/issues/10413"
61b0fa97d7e5fee763e331b536345844640c092e,"Permit h2 PRIORITY frames with a dependency on the connection (#10473)

Motivation:

Setting a dependency on the connection is normal and permitted; streams
actually default to depending on the connection. Using a PRIORITY frame
with a dependency on the connection could reset a previous PRIORITY,
change the relative weight, or make all streams dependent on one stream.

The previous code was disallowing these usages as it considered
depending on the connection to be a validation failure.

Modifications:

Loosen validation check to also allow depending on the connection. Fix
error message when the validation check fails.

Result:

Setting a dependency on connection would be permitted. Fixes #10416"
54bfd21e525f5d197bbaff583a832ec0f3cb8735,"Fix #10434 OutOfDirectMemoryError causes cpu load too high and socket is full (#10457)

Motivation:

When we were using the netty http protocol, OOM occurred, this problem has been in 4.1.51.Final Fix [# 10424](https://github.com/netty/netty/issues/10424), even if OOM is up, the service will still receive new connection events, will occur again OOM and eventually cause the connection not to be released. 

code `byteBuf = allocHandle.allocate(allocator);`

Modification:

I fail to create buffer when I try to receive new data, i determine if it is OOM then the close read event releases the connection.
```java
        if (close || cause instanceof OutOfMemoryError || cause instanceof IOException) {
            closeOnRead(pipeline);
        }
```

Result:

Fixes # [10434](https://github.com/netty/netty/issues/10434)."
92fff79c5fc06950ac00557dce7b55ac1aca4f10,"DnsAddressResolverGroup should respect configured EventLoop (#10479)

Motivation:

DnsAddressResolverGroup allows to be constructed with a DnsNameResolverBuilder and so should respect its configured EventLoop.

Modifications:

- Correctly respect the configured EventLoop
- Ensure there are no thread-issues by calling copy()
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/10460"
fdd4706783ef6fb5eac71d31de78fb45f155591d,"Include TLSv1.3 ciphers as recommented ciphers for HTTP2 (#10480)


Motivation:

We should include TLSv1.3 ciphers as well as recommented ciphers these days for HTTP/2. That is especially true as Java supports TLSv1.3 these days out of the box

Modifications:

- Add TLSv1.3 ciphers that are recommended by mozilla as was for HTTP/2
- Add unit test

Result:

Include TLSv1.3 ciphers as well"
b27914e3020fcf1f3d3ce2868c7507e5fea6480a,"AbstractDiskHttpData#getChunk closes fileChannel only if everything w… (#10481)


Motivation:
AbstractDiskHttpData#getChunk opens and closes fileChannel every time when it is invoked,
as a result the uploaded file is corrupted. This is a regression caused by #10270.

Modifications:

- Close the fileChannel only if everything was read or an exception is thrown
- Add unit test

Result:
AbstractDiskHttpData#getChunk closes fileChannel only if everything was read or an exception is thrown"
46cb4015ff25ff2dd3d0dede5c3185ac498e56b0,"Correctly limit queries done to resolve unresolved nameservers (#10478)

Motivation:

We need limit the number of queries done to resolve unresolved nameserver as otherwise we may never fail the resolve when there is a missconfigured dns server that lead to a ""resolve loop"".

Modifications:

- When resolve unresolved nameservers ensure we use the allowedQueries as max upper limit for queries so it will eventually fail
- Add unit tests

Result:

No more possibility to fail in a loop while resolve. This is related to https://github.com/netty/netty/issues/10420"
32178fac7f0d46d9ed7059eeec4708ed3d70c6eb,"Enable SSL_MODE_ENABLE_FALSE_START if jdkCompatibilityMode is false (#10407)


Motivation:

To reduce latency and RTTs we should use TLS False Start when jdkCompatibilityMode is not required and its supported

Modifications:

Use SSL_MODE_ENABLE_FALSE_START when jdkCompatibilityMode is false

Result:

Less RTTs and so lower latency when TLS False Start is supported"
830fc0d660896ce781aba0a8eb614053a4fe9201,"Remove incorrect javadocs that were not updated for new versions of netty (#10487)

Motivation:

At some point a ChannelHandlerContext did have its own AttributeMap which is not true since 4.1.x was released. Unfortunally we missed to update the javadocs and so these don't reflect reality

Modifications:

Update javadocs

Result:

Fixes https://github.com/netty/netty/issues/10477"
0bbe4ce9fd2c531a777bdfa3e0d8bfcd1e93768a,"Expose a LoggingDnsQueryLifeCycleObserverFactory (#10490)

Expose a LoggingDnsQueryLifeCycleObserverFactory

Motivation:
 There is a use case for having logging in the DnsNameResolver, similar to the LoggingHandler.
 Previously, one could set `traceEnabled` on the DnsNameResolverBuilder, but this is not very configurable.
 Specifically, the log level and the logger context cannot be changed.

Modification:
 Expose a LoggingDnsQueryLifeCycleObserverFactory, that permit changing the log-level
 and logger context.

Result:
 It is now possible to get logging in the DnsNameResolver at a custom log level and logger,
 without very much effort.

Fixes #10485"
f51ae686c48bd86c3a07193b330d52bf07594b28,"Small fix that takes into account the remainder when assigning the size (see #10453) (#10491)

Motivation:

This is small fixes for #10453 PR according @njhill and @normanmaurer conversation.

Modification:

Simple refactor and takes into account remainder when calculate size.

Result:

Behavior is correct"
b2e52e98a351a4a77336a7b8e876e245c14421f8,"Update netty-tcnative to 2.0.34.Final (#10494)

Motivation:

A new netty-tcative was released

Modifications:

Update to latest version

Result:

Use latest version"
4be9387151d9702a17da56cffaa6e5e4c92245fd,"Add validation when constructing Http2FrameLogger (#10495)

Motivation:

There should be a validation for the input arguments when constructing Http2FrameLogger

Modification:

Check that the provided arguments are not null

Result:

Proper validation when constructing Http2FrameLogger"
98c98d53d773e509adc0d408801f9ccede68fc4d,"Don't try to remove the task when the underlying executor fails the execution of self (#10505)

Motivation:

It makes no sense to remove the task when the underlying executor fails as we may be able to pick it up later. Beside this the used Queue doesnt support remove(...) and so will throw.

Modifications:

Remove the queue.remove(...) call

Result:

Fixes https://github.com/netty/netty/issues/10501."
8e8f01e01dbfdbb7005ba6650ce20504dc5a1478,"Use ByteBuf#isAccessible() in more places (#10506)

Motivation

ByteBuf has an isAccessible method which was introduced as part of ref
counting optimizations but there are some places still doing
accessibility checks by accessing the volatile refCnt() directly.

Modifications

- Have PooledNonRetained(Duplicate|Sliced)ByteBuf#isAccessible() use
their refcount delegate's isAccessible() method
- Add static isAccessible(buf) and ensureAccessible(buf) methods to
ByteBufUtil
(since ByteBuf#isAccessible() is package-private)
- Adjust DefaultByteBufHolder and similar classes to use these methods
rather than access refCnt() directly

Result

- More efficient accessibility checks in more places"
b908c82b7b60afae16f510f6cbb5093b9a69ee33,"Lazily construct contained DataOutputStream in ByteBufOutputStream (#10507)

Motivation

This is used solely for the DataOutput#writeUTF8() method, which may
often not be used.

Modifications

Lazily construct the contained DataOutputStream in ByteBufOutputStream.

Result

Saves an allocation in some common cases"
ee77fad3f8151a6d9cf58d085b956373b9429786,"Minor typo (#10518)

Motivation:
I was working on the transport part in Netty (ofc, solving a major issue) and I found this typo so thought to fix it.

Modification:
Fixed Typo

Result:
No more confusion between `us` and `use`."
82fa2d780a692efe22bdd1f3ed44d90372c08dec,"Remove javassist dependency (#10514)

Motivation:
 Avoid keeping unused dependencies around.

Modification:
 Remove all references to javassist dependency, since it does not appear to be used by anything.

Result:
 One less dependency to worry about."
bc344617b4d1f513491be8e9f71d2fe582619449,"Adjust testsuite to pass on JDK15+ (#10511)

Motivation:

JDK15 is about to be released as GA, we should ensure netty works and builds on it. SSLSession#getPeerCertificateChain() throws UnsupportedOperationException in JDK15 and later as it was deprecated before and people should use SSLSession#getPeerCertificates(). We need to account for that in our tests

Modifications:

- Catch UnsupportedOperationException in our testsuite and ignore it when on JDK15+ while rethrowing it otherwise.

Result:

Testsuite passes on JDK15+"
6c1840749de1304332e2581f52374a361817716b,"Use all configured nameservers when using DnsNameResolver in all cases (#10503)

Motivation:

Due a change introduced in 68105b257d915d8a0cb7b2acd9061661666537b6 we incorrectly skipped the usage of nameservers in some cases.

Modifications:

Only fetch a new stream of nameserver if the hostname not matches the original hostname in the query.

Result:

Use all configured nameservers. Fixes https://github.com/netty/netty/issues/10499"
fde6bc88859a41b2bdd5aae00beef09b1b17bda7,"Add ipv4AddressToInt(Inet4Address) in NetUtils (#10500)

Motivation:

We're converting `Inet4Address` to `Integer` quite frequently so it's a good idea to keep that code in `NetUtils`.

Modification:

Added ipv4AddressToInt(Inet4Address) in NetUtils

Result:
Easy conversion of  `Inet4Address` to `Integer`."
be2cd68443948f9d7a8c77d3ae286899146bfee8,"MQTT5 support for netty-codec-mqtt (#10483)

Motivation:

 MQTT Specification version 5 was released over a year ago,
 netty-codec-mqtt should be changed to support it.

Modifications:

  Added more message and header types in `io.netty.handler.codec.mqtt`
  package in `netty-coded-mqtt` subproject,
  changed `MqttEncoder` and `MqttDecoder` to handle them properly,
  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version

Result:

  `netty-codec-mqtt` supports both MQTT5 and MQTT3 now."
d2c03c9a29ecb3ff5fb2d203e314fad88fa07509,"Improve MqttMessageType::valueOf cost (#10400)

Motivation:

MqttMessageType::valueOf has O(N) cost

Modifications:

MqttMessageType::valueOf uses a const lookup table

Result:

MqttMessageType::valueOf has O(1) cost"
d487086a2ce42d9e7c3914e0373d8f1bf2a0499c,"Allow to customize how SslMasterKeyHandler is enabled (#10513)

Motivation:

Right now after a SslMasterKeyHandler is added to the pipeline,
it also needs to be enabled via a system property explicitly. In
some environments where the handler is conditionally added to
the pipeline this is redundant and a bit confusing.

Modifications:

This changeset keeps the default behavior, but allows child
implementations to tweak the way on how it detects that it
should actually handle the event when it is being raised.

Also, removed a private static that is not used in the wireshark
handler.

Result:

Child implementations can be more flexible in deciding when
and how the handler should perform its work (without changing
any of the defaults)."
39c840d7119ef997d5f7aa9cebb64f7dc32e4898,"Fix JavaDoc of RuleBasedIpFilter (#10521)

Motivation:

`RuleBasedIpFilter` had JavaDoc `{@link #channelRejected(ChannelHandlerContext, SocketAddress)}` instead of `{@link AbstractRemoteAddressFilter#channelRejected(ChannelHandlerContext, SocketAddress)}`.

Modification:
Added `AbstractRemoteAddressFilter` reference.

Result:
Fixed JavaDoc error and made documentation more clear."
5d27a3d0bbf763ec49d2e08893f20d37d78b1195,"Binary search based IpSubnetFilter (#10492)

Motivation:

`IpSubnetFilter` uses Binary Search for IP Address search which is fast if we have large set of IP addresses to filter.

Modification:

Added `IpSubnetFilter` which takes `IpSubnetFilterRule` for filtering.

Result:
Faster IP address filter."
4ececfb70d35201f84f30a480e1b5f6f87a370b9,"Create a stackless ClosedChannelException to reduce overhead when the… (#10523)


Motivation:

In some benchmarks closing the Channel attributes to a lot of overhead due the call of fillInStackTrace(). We should reduce this overhead.

Modifications:

- Create a StacklessClosedChannelException and use it to reduce overhead.
- Only call ChannelOutboundBuffer.failFlushed(...) when there was a flushed message at all.

Result:

Less performance overhead when closing the Channel"
fb39fc450ebb374a62694927478b7bed7b554013,"Http2ConnectionHandlerBuilder: make initialSettings() public (#10526)

Motivation:
be able to modify Http2Settings of Http2ConnectionHandlerBuilder.

Modifications:
make initialSettings() of Http2ConnectionHandlerBuilder public.

Result:
public initialSettings() of Http2ConnectionHandlerBuilder allow Http2Settings modification."
5157d3b8e0248538849956bf957fd328176228f4,"Revert ""Support session cache for client and server when using native SSLEngine implementation (#10331)"" (#10528)

Motivation:

This reverts commit 825916c7f0c85e9df0516a7c0b3cbc994c6a4472 as it turns out it introduced a big performance regression.

Modifications:

Revert 825916c7f0c85e9df0516a7c0b3cbc994c6a4472

Result:

Performance of TLS is back to normal"
a99a8f2a1f49f4b3d63a028896bbc7e2d36646d2,"Fix ByteBufUtil.getBytes() incorrectly sharing the array in some cases (#10529)


Motivation:

If ByteBufUtil.getBytes() is called with copy=false, it does not
correctly check that the underlying array can be shared in some cases.

In particular:

* It does not check that the arrayOffset() is zero. This causes it to
  incorrectly return the underlying array if the other conditions are
  met. The returned array will be longer than requested, with additional
  unwanted bytes at its start.

* It assumes that the capacity() of the ByteBuf is equal to the backing
  array length. This is not true for some types of ByteBuf, such as
  PooledHeapByteBuf. This causes it to incorrectly return the underlying
  array if the other conditions are met. The returned array will be
  longer than requested, with additional unwanted bytes at its end.

Modifications:

This commit fixes the two bugs by:

* Checking that the arrayOffset() is zero before returning the
  underlying array.

* Comparing the requested length to the underlying array's length,
  rather than the ByteBuf's capacity, before returning the underlying
  array.

This commit also adds a series of test cases for ByteBufUtil.getBytes().

Result:

ByteBufUtil.getBytes() now correctly checks whether the underlying array
can be shared or not.

The test cases will ensure the bug is not reintroduced in the future."
38f01e08403920f56c05da6d42e407f3651b73dc,"Reduce garbage on MQTT (#10509)

Reduce garbage on MQTT encoding

Motivation:

MQTT encoding and decoding is doing unnecessary object allocation in a number of places:
- MqttEncoder create many byte[] to encode Strings into UTF-8 bytes
- MqttProperties uses Integer keys instead of int
- Some enums valueOf create unnecessary arrays on the hot paths
- MqttDecoder was using unecessary Result<T>

Modification:

- ByteBufUtil::utf8Bytes and ByteBufUtil::reserveAndWriteUtf8 allows to perform the same operation GC-free
- MqttProperties uses a primitive key map
- Implemented GC free const table lookup/switch valueOf
- Use some bit-tricks to pack 2 ints into a single primitive long to store both result and numberOfBytesConsumed and use byte[].length to compute numberOfByteConsumed on fly. These changes allowed to save creating Result<T>.

Result:
Significantly less garbage produced in MQTT encoding/decoding"
ada9c38c0a96e593b895b93dd4600d5299e77cef,[maven-release-plugin] prepare release netty-4.1.52.Final
957ef746d823ba5c38471639449d41f42a3640b9,[maven-release-plugin] prepare for next development iteration
b43ce7ae1dab35ca92947d14128176a6cbbd7d08,"Fix regression when trying to bind an EpollDatagramChannel with port (#10552)

only

Motivation:

4b7dba1 introduced a change which was not 100 % complete and so
introduce a regression when a user specified to use
InetProtocolFamily.IPv4 and trying to bind to a port (without specify
the ip).

Modifications:

- Fix regression by respect the InetProtocolFamily
- Add unit test

Result:

Fix regression when binding to port explicit"
5631f1b2b772d44ac2fe131ebe9b3ca952bab15a,"Make kernel version detection code in EpollReuseAddrTest more robust (#10556)

Motivation:

When we try to parse the kernel version we need to be careful what to
expect. Especially when a custom kernel is used we may get extra chars
in the version numbers. For example I had this one fail because of my
custom kernel that I built for io_uring:

5.8.7ioring-fixes+

Modifications:

- Try to be a bit more lenient when parsing
- If we cant parse the kernel version just use 0.0.0

Result:

Tests are more robust"
162e59848ad1801ab26e501c3c93ee08e83f5065,"Improve predictability of writeUtf8/writeAscii performance (#10368)

Motivation:

writeUtf8 can suffer from inlining issues and/or megamorphic call-sites on the hot path due to ByteBuf hierarchy

Modifications:

Duplicate and specialize the code paths to reduce the need of polymorphic calls

Result:

Performance are more stable in user code"
1dda2be8aac12060ae118c5a208900a42b09e41e,"Disable Maven build HTTP connection pooling (#10558)

Motivation:
 The builds often fail when downloading dependencies.
 This might be caused by the build taking a long time, and cause pooled connections to be closed
 by the remote end, if they are idle for too long.

Modification:
 Disable connection pooling. This should force Maven to reestablish the connection for each download,
 thus reducing the likelihood of the remote end closing connections we wish to use.

Result:
 I'll leave it up the statistis of our CI to confirm, but we should see more stable builds."
8c1db6ccb82918a7bdb79bdf55cf0713e674681b,"Make RetainedHandlingPolicy enum public (#10565)

Motivation:

Impossible to specify retained messages handling policy because the corresponding enum
isn't public (https://github.com/netty/netty/issues/10562)

Modification:

Made `RetainedHandlingPolicy` public

Result:

Fixes #10562."
d889397c1ee82d9194550aedde433dd4d801e48b,"Add PcapWriteHandler Support (#10498)

Motivation:
Write TCP and UDP packets into Pcap `OutputStream` which helps a lot in debugging.

Modification:
Added TCP and UDP Pcap writer.

Result:
New handler can write packets into an `OutputStream`, e.g. a file that can be opened with Wireshark.

Fixes #10385."
3b47427cf7abcca72442989c29ae5b9561ed918c,"Fix NPE with MqttUnsubAckMessage - regression of MQTT5 support (#10557)


Recent changes for MQTT5 may cause NPE if UNSUBACK message is created with `MqttMessageFactory`
and client code isn't up-to-date.

Modifications:

Added default body in `MqttUnsubAckMessage` constructor if null body is passed,
added null checks in `encodeUnsubAckMessage`

Result:

`MqttUnsubAckMessage` created with `MqttMessageFactory` doesn't cause NPE
even if null body is supplied."
e8aaf7f5867bb67501c09da5e9da862af72e3968,"Bump ant from 1.9.7 to 1.9.15 (#10573)

Bumps ant from 1.9.7 to 1.9.15.

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
95ce1b95ea5679f826cdefcbaabb3b7c2d596100,"Fix DeleteOnExitHook cause memory leak (#10560)

Motivation:

If DeleteOnExitHook is in the open state and the program runs for a long time, the DeleteOnExitHook file keeps increasing.
This results in a memory leak


Modification:

I re-customized a DeleteOnExitHook hook. If DeleteOnExitHook is turned on, this hook will be added when creating a temporary file. After the request ends and the corresponding resources are released, the current file will be removed from this hook, so that it will not increase all the time.

Result:

Fixes https://github.com/netty/netty/issues/10351"
aa85ea9947bde2342cd006427da653319ee39192,"Make MQTT property value publicly accessible (#10577)

Motivation:

There was no way to read MQTT properties outside of `io.netty.handler.codec.mqtt` package

Modification:

Expose `MqttProperties.MqttProperty` fields `value` and `propertyId` via public methods

Result:

It's possible to read MQTT properties now"
836bb74051da73b3c56751ed7555847559d497fa,"Call `long` as `l` instead of `i` (#10578)

Motivation:

Long should be called `l` instead of `i` because `i` is generally used for `int`.

Modification:

Changed `i` to `l`.

Result:
Better naming"
79a7c157a3e122872321844b73c4881e412dba77,"Clear scheduled timeout if channel is closed with incomplete WebSocket handshake (#10510)


Motivation:

Consider a scenario when the client iniitiates a WebSocket handshake but before the handshake is complete,
the channel is closed due to some reason. In such scenario, the handshake timeout scheduled on the executor
is not cleared. The reason it is not cleared is because in such cases the handshakePromise is not completed.

Modifications:

This change completes the handshakePromise exceptinoally on channelInactive callback, if it has not been
completed so far. This triggers the callback on completion of the promise which clears the timeout scheduled
on the executor.

This PR also adds a test case which reproduces the scenario described above. The test case fails before the
fix is added and succeeds when the fix is applied.

Result:

After this change, the timeout scheduled on the executor will be cleared, thus freeing up thread resources."
71d034593f8284515452aad2b06afb7c7b041095,"Only create ConnectTimeoutException if really needed (#10595)

Motivation:

Creating exceptions is expensive so we should only do so if really needed.

Modifications:

Only create the ConnectTimeoutException if we really need it.

Result:

Less overhead"
b112483799cd410a3aa41fab022c3f7183c8691d,"Not truncate MQTT SUBACK reason codes (#10584)

Motivation:

Reason code for MQTT SUBACK messages is truncated, thus not allowing to get new codes supported by MQTT v.5

Modification:

Changed `MqttCodecTest.testUnsubAckMessageForMqtt5` to catch it then, removed truncation in `MqttDecoder.decodeSubackPayload` to make it pass.

Result:

Codec users can get all reason codes supported by MQTT5 now."
69f9a94f594007d6600d060f0198e59c5f6acbe3,"Increase initial buffer size in AdaptiveRecvByteBufAllocator (#10600)

Motivation:

We should use an initial buffer size with is >= 1500 (which is a common setting for MTU) to reduce the need for memory copies when a new connection is established. This is especially interesting when SSL / TLS comes into the mix.

This was ported from swiftnio:

https://github.com/apple/swift-nio/pull/1641

Modifications:

Increase the initial size from 1024 to 2048.

Result:

Possible less memory copies on new connections"
a4276e8dffd42ea7b990e6707c11c2c2037d2d82,"Fix Javadoc Typo (#10603)

Motivation:

Following Javadoc standard

Modification:

Change from `@param KeyManager` to `@param keyManager`

Result:

The `@param` matches the actual parameter variable name"
6bda0fd0826efb84da84494f6bb567460bc7873a,"Filter out duplicates before trying to find the alias to use (#10612)

Motivation:

Calling chooseServerAlias(...) may be expensive so we should ensure we not call it multiple times for the same auth methods.

Modifications:

Remove duplicated from authMethods before trying to call chooseServerAlias(...)

Result:

Less performance overhead during key material selection"
bc00be7e98d9b08cff4cc398f5244bd8a7f2d920,"Correctly report back when we fail to select the key material and ens… (#10610)


Motivation:

We need to let openssl know that we failed to find the key material so it will produce an alert for the remote peer to consume. Beside this we also need to ensure we wrap(...) until we produced everything as otherwise the remote peer may see partial data when an alert is produced in multiple steps.

Modifications:

- Correctly throw if we could not find the keymaterial
- wrap until we produced everything
- Add test

Result:

Correctly handle the case when key material could not be found"
5a9256a183acfe42a1b21c5ba62268b42377e6c9,"Only set the keymaterial once and correctly handle errors during keymaterial setting on the client-side as well (#10613)

Motivation:

We should stop as soon as we were able to set the key material on the server side as otherwise we may select keymaterial that ""belongs"" to a less prefered cipher. Beside this it also is just useless work.
We also need to propagate the exception when it happens during key material selection on the client side so openssl will produce the right alert.

Modifications:

- Stop once we were able to select a key material on the server side
- Ensure we not call choose*Alias more often then needed
- Propagate exceptions during selection of the keymaterial on the client side.

Result:

Less overhead and more correct behaviour"
6545e4eb2b0edb147c91c16b9886adb4a2203740,"Use SelfSignedCertificate to fix test-failure related to small key size (#10620)

Motivation:

Some JDKs dissallow the usage of keysizes < 2048, so we should not use such small keysizes in tests.

This showed up on fedora 32:

```
Caused by: java.security.cert.CertPathValidatorException: Algorithm constraints check failed on keysize limits. RSA 1024bit key used with certificate: CN=tlsclient.  Usage was tls client
        at sun.security.util.DisabledAlgorithmConstraints$KeySizeConstraint.permits(DisabledAlgorithmConstraints.java:817)
        at sun.security.util.DisabledAlgorithmConstraints$Constraints.permits(DisabledAlgorithmConstraints.java:419)
        at sun.security.util.DisabledAlgorithmConstraints.permits(DisabledAlgorithmConstraints.java:167)
        at sun.security.provider.certpath.AlgorithmChecker.check(AlgorithmChecker.java:326)
        at sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
        ... 23 more
```

Modifications:

Replace hardcoded keys / certs with SelfSignedCertificate

Result:

No test-failures related to small key sizes anymore."
4d09c5ff98ebd4d2b0ff30f382cc655a463b52ef,"Respect the Provider when detecting if TLSv1.3 is used by default / supported (#10621)

Motivation:

We need to take the Provider into account as well when trying to detect if TLSv1.3 is used by default / supported

Modifications:

- Change utility method to respect provider as well
- Change testcode

Result:

Less error-prone tests"
69b44c6d06d4449920b6b8990b0f6e0473f3532b,"Reduce DefaultAttributeMap lookup cost (#10530)

Motivation:

DefaultAttributeMap::attr has a blocking behaviour on lookup of an existing attribute:
it can be made non-blocking.

Modification:

Replace the existing fixed bucket table using a locked intrusive linked list
with an hand-rolled copy-on-write ordered single array

Result:
Non blocking behaviour for the lookup happy path"
3298f5efee8e9bec0cc8df19fb2de22c4f864376,"Use ObjectUtil#checkPositive and Add missing JavaDoc In InboundHttp2ToHttpAdapter (#10637)

Motivation:
We can use ObjectUtil#checkPositive instead of manually checking maxContentLength. Also, there was a missing JavaDoc for Http2Exception,

Modification:
Used ObjectUtil#checkPositive for checking maxContentLength.
Added missing JavaDoc.

Result:
More readable code."
461b6e0f7b3277fe980b7293a6ab644340af1d7c,"Add Close method for closing OutputStream and PcapWriteHandler (#10638)

Motivation:
We should implement the Closeable method to properly close `OutputStream` and `PcapWriteHandler`. So whenever `handlerRemoved(ChannelHandlerContext)` is called or the user wants to stop the Pcap writes into `OutputStream`, we have a proper method to close it otherwise writing data to close `OutputStream` will result in `IOException`.

Modification:
Implemented `Closeable` in `PcapWriteHandler` which calls `PcapWriter#close` and closes `OutputStream` and stops Pcap writes.

Result:
Better handling of Pcap writes."
d01471917b94d15fbe8b3b2e0f0ed8f24ee2954a,"Add validation check about websocket path (#10583)

Add validation check about websocket path

Motivation:

I add websocket handler in custom server with netty.
I first add WebSocketServerProtocolHandler in my channel pipeline.
It does work! but I found that it can pass ""/websocketabc"". (websocketPath is ""/websocket"")

Modification:
`isWebSocketPath()` method of `WebSocketServerProtocolHandshakeHandler` now checks that ""startsWith"" applies to the first URL path component, rather than the URL as a string.

Result:
Requests to ""/websocketabc"" are no longer passed to handlers for requests that starts-with ""/websocket""."
33cfcd1cfabaeac86287f0a739f22820457814c0,"Remove extra line from end (#10673)

Motivation:
`Http2MultiplexHandler` have to 2 empty lines at the end instead of 1.

Modification:
Removed 1 extra line.

Result:
Little better code style."
d3a41b8b9a53da8f9f4dc25203f42ce43eb5b488,"Avoid integer overflow in ByteBuf.ensureWritable (#10648)

Motivation:

- To make ensureWritable throw IOOBE when maxCapacity is exceeded, even if
the requested new capacity would overflow Integer.MAX_VALUE

Modification:

- AbstractByteBuf.ensureWritable0 is modified to detect when
targetCapacity has wrapped around
- Test added for correct behaviour in AbstractByteBufTest

Result:

- Calls to ensureWritable will always throw IOOBE when maxCapacity is
exceeded (and bounds checking is enabled)"
00f21845f82f535c5b4e74baa8a78fa65231984f,"Suppress warnings about weak hash algorithms (#10647)

Motivation:

LGTM reported that WebSocketUtil uses MD5 and SHA-1
that are considered weak. Although those algorithms
are insecure, they are required by draft-ietf-hybi-thewebsocketprotocol-00
specification that is implemented in the corresponding WebSocket
handshakers. Once the handshakers are removed, WebSocketUtil can be
updated to stop using those weak hash functions.

Modifications:

Added SuppressWarnings annotations.

Result:

Suppressed warnings."
5b55ee434b8d5434cfbd8186a00dfd1ff382b93a,"Avoid casting numbers to narrower types (#10645)

Motivation:

Avoid implicit conversions to narrower types in
AbstractMemoryHttpData and Bzip2HuffmanStageEncoder classes
reported by LGTM.

Modifications:

Updated the classes to avoid implicit casting to narrower types.
It doesn't look like that an integer overflow is possible there,
therefore no checks for overflows were added.

Result:

No warnings about implicit conversions to narrower types."
4c231a2e7754e90d06b2a9b70bdfabfccf9ed77f,"Simplify and Remove useless Bit operations from HpackHuffmanDecoder (#10656)

Motivation:
We should simplify and remove useless bit operations to make code more efficient, faster, and easier to understand.

Modification:
Simplified and Removed Useless Bit Operations

Result:
Simpler Code."
9d457c3f0f883312c155a495b566f6c576d89a52,"Add checkInRange in ObjectUtil (#10668)

Motivation:
We check lots of numbers if it lies in a range. So it's better to add a method in `ObjectUtil` to check if a number lies inside a range.

Modification:
Added Range check method.

Result:
A faster and better way to check if a number lies inside a range."
d4a0050ef33cab2542a80e11489a4977a63859f8,[maven-release-plugin] prepare release netty-4.1.53.Final
01b7e18632afd26cdb7b6c623d2622be07672341,[maven-release-plugin] prepare for next development iteration
cd1581faadd7e213cd5a63eb00ade73129a8b92b,"Add a build profile for JDK 16 (#10676)

Motivation:
Java 16 will come around eventually anyway, and this makes it easier for people to experiment with Early Access builds.

Modification:
Added Maven profiles for JDK 16 to relevant pom files.

Result:
Netty now builds on JDK 16 pre-releases (provided they've not broken compatibility in some way)."
fd8c1874b4e24a18c562c7013efabcb155395459,"Fix #10614 by making UnorderedTPEExecutor.scheduleAtFixedRate run tasks more than once (#10659)

Motivation:
All scheduled executors should behave in accordance to their API.
The bug here is that scheduled tasks were not run more than once because we executed the runnables directly, instead of through the provided runnable future.

Modification:
We now run tasks through the provided future, so that when each run completes, the internal state of the task is reset and the ScheduledThreadPoolExecutor is informed of the completion.
This allows the executor to prepare the next run.

Result:
The UnorderedThreadPoolEventExecutor is now able to run scheduled tasks more than once.
Which is what one would expect from the API."
36f682141f0bccdda2f998b05c29ae4a011adb81,"Bump junit from 4.12 to 4.13.1 (#10681)

Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.1.
- [Release notes](https://github.com/junit-team/junit4/releases)
- [Changelog](https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.12.md)
- [Commits](https://github.com/junit-team/junit4/compare/r4.12...r4.13.1)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
6cb72be2dda2b5690aa39180ae22552d16882f38,"Use ObjectUtil for multiple operations (#10679)

Motivation:
We should use ObjectUtil for checking if Compression parameters are in range. This will reduce LOC and make code more readable.

Modification:
Used ObjectUtil

Result:
More readable code"
08ff3442ecc9354f1fc1c42c918c2ad14a38c3a1,"Update OWASP Links in Cookie class (#10677)

Motivation:
Fix Broken Link of OWASP HttpOnly Cookie in Cookie class.

Modification:
Updated the broken link.

Result:
Broken Link Fix for better Documentation."
a3c154f2679b0b6397b7a4b478b41db38562348b,"Added a security policy (#10692)

Motivation:

The process of reporting security issues should be documented
and easy to find.

Modification:

Added a SECURITY.md file that describes how to report a security issue.

Result:

It's a bit easier to find the docs that describe how security issues
should be reported. Also, when someone creates an issue the repository,
they will see a link to the security policy."
6b613682ba450c5f7c6d528881ba028d03bf3448,"Ensure we don't leak the ClassLoader in the backtrace (#10691)

Motivation:

We have a few classes in which we store and reuse static instances of various exceptions. When doing so it is important to also override fillInStacktrace() and so prevent the leak of the ClassLoader in the internal backtrace field.

Modifications:

- Add overrides of fillInStracktrace when needed
- Move ThrowableUtil usage in the static methods

Result:

Fixes https://github.com/netty/netty/pull/10686"
0ed788c15e688dd052e51a5934e881a7786b94a2,"Fire SniCompletionEvent after onLookupComplete(...) was called (#10688)

Motivation:

Users may want to do special actions when onComplete(...) was called and depend on these once they receive the SniCompletionEvent

Modifications:

Switch order and so call onLookupComplete(...) before we fire the event

Result:

Fixes https://github.com/netty/netty/issues/10655"
9563d2bd61cabc4558246a6b6986d8769e32829e,"Cleanup PoolChunk / PoolSubpage and add a few more asserts (#10690)

Motivation:

As the PooledByteBufAllocator is a critical part of netty we should ensure it works as expected.

Modifications:

- Add a few more asserts to ensure we not see any corrupted state
- Null out slot in the subpage array once the subpage was freed and removed from the pool
- Merge methods into constructor as it was only called from the constructor anyway.

Result:

Code cleanup"
fbb42a292fb9ecf8ddbd235c62edd9e745ab659e,"Add docker-compose files to compile with OpenJDK15 (#10697)

Motivation:

OpenJDK15 was released, we should compile with it on the CI

Modifications:

Add docker-compose files to be able to compile with OpenJDK15

Result:

Compile with latest major JDK version"
cc79f5f4ffabe8eeb5d3a4b0d05541844d898311,"Fix unit tests that sometimes failed due timeouts (#10698)

Motivation:

We had two unit tests that sometimes failed due timeouts. After insepecting these I noticed these can be improved to run faster while still do the right validation

Modifications:

- Only submit one task for execution per execute
- Cleanup

Result:

No test failures due timeout"
5e808eb9a5276acc746f1c9a3e0a6d5982bf9f2b,"Add missing -XX:+AllowRedefinitionToAddDeleteMethods for blockhound testsuite (#10700)

Motivation:

We need to also add -XX:+AllowRedefinitionToAddDeleteMethods for JDK15 and 16 as otherwise blockhound will not work

Modifications:

Add profiles for JDK15 and JDK16

Result:

Blockhound tests pass again"
1ca7d5db8167f904395d879b8851eb35d6f596f3,"Fix or suppress LGTM findings (#10689)

Motivation:

LGTM reports multiple issues. They need to be triaged,
and real ones should be fixed.

Modifications:
- Fixed multiple issues reported by LGTM, such as redundant conditions,
  resource leaks, typos, possible integer overflows.
- Suppressed false-positives.
- Added a few testcases.

Result:

Fixed several possible issues, get rid of false alarms in the LGTM report."
e051b5f338c3f7b722a65d2dd1ee36178b44dfdd,"Add `null` rule check in `rules` array of RuleBasedIpFilter (#10527)

Motivation:

We can filter out `null` rules while initializing the instance of `RuleBasedIpFilter` so we don't have to keep checking for `null` rules while iterating through `rules` array in `for loop` which is just a waste of CPU cycles.

Modification:
Added `null` rule check inside the constructor.

Result:
No more wasting CPU cycles on check the `null` rule each time in `for loop` and makes the overall operation more faster."
f9414d129f149ab9356db6c2a66de357546a0e70,"Update java patch versions (#10703)

Motivation:

We should use the latest patch releases when building via docker

Modifications:

Update all java versions to the latest patch release

Result:

Use latest releases"
5924262175b5e36ba81f82a978f342b7a8674c64,"Fix ByteBuf leaks in HaProxyMessageEncoderTest (#10704)

Motivation:

We need to ensure we not leak in tests. We did see some leaks reported related to HaProxyMessageEncoderTest on our CI.

Modifications:

- Use readSlice(...) and so not create new ByteBuf instances that need to be released

Result:

No more leaks"
ea2a0899ded0016ee976b0896844252598f3ed25,"Create codeql-analysis.yml (#10696)

Motivation:

Github now allows to run CodeQL during pull request verification. This allows to detect errors / security problems early.

Modification:

Add config

Result:

Fixes https://github.com/netty/netty/issues/10669


Co-authored-by: Artem Smotrakov <artem.smotrakov@sap.com>"
ffbddcd8423b73edaae89daf09c109459cf602a0,"Replace deprecated Assert.assertThat(...) with MatcherAssert.assertThat(...) (#10699)


Motivation:

junit deprecated Assert.assertThat(...)

Modifications:

Use MatcherAssert.assertThat(...) as replacement for deprecated method

Result:

Less deprecation warnings"
303baf5c0bea7f5c330290847a8d9eee614f02e1,"Minor performance improvement in websocket upgrade (#10710)

Motivation:

I noticed WebSocketServerExtensionHandler taking up a non-trivial
amount of CPU time for a non-websocket based menchmark. This attempts
to speed it up.

Modifications:

- It is faster to check for a 101 response than to look at headers,
so an initial response code check is done
- Move all the actual upgrade code into its own method to increase
chance of this method being inlined
- Add an extra contains() check for the upgrade header, to avoid
allocating an iterator if there is no upgrade header

Result:

A small but noticable performance increase.

Signed-off-by: Stuart Douglas <stuart.w.douglas@gmail.com>"
ad8fe88abd752d320b597f265b153f5aaecae70b,"We should have a special config that allows to configure half closure for DuplexChannel (#10701)

Motivation:

DuplexChannel allow for half-closure, we should have a special config interface for it as well.

Modifications:

Add DuplexChannelConfig which allows to configure half-closure.

Result:

More consistent types"
ee4164ab8fa240becc17802d4914a14a850bfc48,"DatagramDnsResponseDecoder should rethrow as CorruptedFrameException (#10714)

Motivation:

DatagramDnsResponseDecoder should rethrow as CorruptedFrameException if an IndexOutOfBoundsException happens.

Modifications:

- Catch IndexOutOfBoundsException and rethrow as CorruptedFrameException
- Add a testcase

Result:

Less noise in the logs"
726944146b97d6f2e483edd96a5eea57ea6f6fb0,"Use named exceptions in ChannelPool implementations (#10721)

Motivation:

I was collecting stats for failed promises with a FixedChannelPool and I was bucketing by stats using cause.getSimpleName(). After #9152 was released, the introduction of the anonymous classes make getSimpleName() return """" causing confusion.

Modification:

Use named classes in the ChannelPool implementations. I made them private, but I can change that if you think otherwise.

Result:

The SimpleChannelPool fails the promises with a ChannelPoolFullException. The FixedChannelPool fails the promises with an AcquireTimeoutException. Also AcquireTimeoutException is more specific than just a plain TimeoutException, which is also useful for troubleshooting. If you want different class names, please advise."
24e6f37745fa4db1826445e41f0b61223a89ceeb,"Add NULL checks to fix possible undefined behavior (#10718)

Motivation:

In some situations we could have end up calling some functions with NULL parameters which in this case could lead to undefined behavior. All of this would have happened during loading of the native lib.

Modifications:

Add NULL check as guards and return early

Result:

Fix some possible undefined behavior"
e5951d46fc89db507ba7d2968d2ede26378f0b04,"Enable nohttp check during the build (#10708)

Motivation:

HTTP is a plaintext protocol which means that someone may be able
to eavesdrop the data. To prevent this, HTTPS should be used whenever
possible. However, maintaining using https:// in all URLs may be
difficult. The nohttp tool can help here. The tool scans all the files
in a repository and reports where http:// is used.

Modifications:

- Added nohttp (via checkstyle) into the build process.
- Suppressed findings for the websites
  that don't support HTTPS or that are not reachable

Result:

- Prevent using HTTP in the future.
- Encourage users to use HTTPS when they follow the links they found in
  the code."
6ae7f9e1a8d9c02785d7b67a33c2eacdd3621efa,"Fix JavaDoc of Http2Headers (#10711)

Motivation:
Http2Headers has JavaDoc error which says Sets the {@link PseudoHeaderName#AUTHORITY} header or {@code null} if there is no such header however it should be Sets the {@link PseudoHeaderName#AUTHORITY} header in Http2Headers#authority(CharSequence) methods because it only sets CharSequence.

This is true for all setters in Http2Headers.

Modification:
Fixed all JavaDoc errors.

Result:
Better JavaDoc."
33de96f4487c594c243cfc138be4592a51651451,"Provide new client and server websocket handshake exceptions (#10646)

Motivation:

At the moment we have only one base `WebSocketHandshakeException` for handling WebSocket upgrade issues.
Unfortunately, this message contains only a string message about the cause of the failure, which is inconvenient in handling.

Modification:

Provide new `WebSocketClientHandshakeException` with `HttpResponse` field  and `WebSocketServerHandshakeException` with `HttpRequest` field both of them without content for avoid reference counting 
problems. 

Result:

More information for more flexible handling.

Fixes #10277 #4528 #10639."
d58d1add34fca3f78edb6d9b677843d7060ee6ce,Fix checkstyle errors introduced by 33de96f4487c594c243cfc138be4592a51651451
090e9a727196d60af3f463a13762e8bdb697c1f1,"Allow EventLoops to rethrow Error (#10694)

Motivation:

Thread.stop() works by producing a ThreadDeath error in the target thread. EventLoops swallow all Throwables, which makes them effectively unkillable. This is effectively a memory leak, for our application. Beside this we should also just regrow all `Error` as there is almost no way to recover.

Modification:

Edit the EventLoops that swallow Throwables to instead rethrow Error.

Result:

`EventLoop` can crash if `Error` is thrown"
4ecd78e1044f8874b2f78d1e9b40283d6b62541a,"Fix native image build on modern GraalVM versions for the cases when the program uses netty-dns (#10630)

Motivation:

Since GraalVM version 19.3.0, instances of java.net.InetAddress (and its subclasses Inet4Address and Inet6Address) are not allowed in native image heap (that is, they cannot be stored in static fields of classes initialized at build time or be reachable through static fields of such classes). When building a native image, it makes sense to initialize at build time as many classes as possible.
But some fields of some classes in Netty (for example, NetUtil.LOCALHOST4) contain InetAddress instances. If a program is using code path that makes it possible to reach such fields at build time initialization, it becomes impossible to build a native image initializing core Netty classes initialized at runtime. An example of such a program is a client that uses netty-dns.

Modifications:

- Add netty-testsuite-native-image-client Maven module to test that such an example program can be built after the corresponding fixes
- Add native-image.properties to resolver-dns module to move initialization of some classes to runtime (some of them are parsing configuration during initialization, so it makes no sense to initialize them at build time; for others, it's needed to avoid InetAddress reachability at build time)
- Add substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST to overcome the InetAddress-related prohibition
- Extract some initialization code from NetUtil to NetUtilInitializations to allow it to be used by the substitutions

Result:

A client program using netty-dns with --initialize-at-build-time=io.netty builds successfully"
f5185ed73b347ba684eef2348622030b5cbe99cf,"Release message before notify promise (#10726)

Motivation:

We should preferable always release the message before we notify the promise. Thhis has a few advantages:

 - Release memory as soon as possible
 - Listeners observe the ""more correct"" reference count

Modifications:

Release message before fail the promises

Result:

Faster releasing of resources. This came up in https://github.com/netty/netty/issues/10723"
321f0f0e6671a2d4e3eaa3f7d5d454a3c2599aa2,"Upgrade Slf4j to 1.7.30 (#10712)

Motivation:
SLF4J 1.7.30 is the latest version in 1.7.x and we should upgrade to it from 1.7.21.

Modification:
Changed 1.7.21 to 1.7.30

Result:
Newer version of SLF4J"
03aafb9cff352269a7fc73e4cf0c281770676be9,"Unregister all previous registered native methods if loading of native code fails… (#10719)


Motivation:

It's important to unload all previous registered native methods when there is a failure during loading the native lib. Failing to do so may lead to an ""invalid state"" and so may segfault the JVM when trying to call a native method that was previous loaded.

This was observed when two versions of netty-tcnative were on the classpath which had different requirements in terms of linking.

Something like this was reported in he hs log:

```
Instructions: (pc=0x0000000116413bf0)
0x0000000116413bd0:
[error occurred during error reporting (printing registers, top of stack, instructions near pc), id 0xb]

Register to memory mapping:

RAX=0x0000000116413bf0 is an unknown value
RBX={method} {0x000000011422e708} 'aprMajorVersion' '()I' in 'io/netty/internal/tcnative/Library'
RCX=0x000000000000000a is an unknown value
RDX=0x000000000000000a is an unknown value
```

Modifications:

- Unregister previous registered native methods on failure
- Unregister previous registered native methods on on unload of the native lib

Result:

No more segfault caused by invalid state when loading of the native lib fails in between. In this case the user will receive an error now like:"
065c39611e0f65a3c6d4650638b395258e1fd8f2,"Better hash algorithm in FingerprintTrustManagerFactory (#10683)


Motivation:

FingerprintTrustManagerFactory can only use SHA-1 that is considered
insecure.

Modifications:

- Updated FingerprintTrustManagerFactory to accept a stronger hash algorithm.
- Deprecated the constructors that still use SHA-1.
- Added a test for FingerprintTrustManagerFactory.

Result:

A user can now configure FingerprintTrustManagerFactory to use a
stronger hash algorithm.
The compiler shows a warning if the code still uses one of the
unsafe constructors.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
ee3b9a5f7b1829e1095fdbbccb5490949ac3e94e,"Fix possible NPEs and IndexOutOfBoundsExceptions in HTTP/2 Codec (#10640)

Motivation:

There are possible NPEs and IndexOutOfBoundsExceptions in HTTP/2 code. 

Modification:
Fixed possible NPEs and IOOBEs

Result:
Better code"
fe5a9f3e32433109d0276dffc10ba8e3add19718,"Upgrade Conscrypt to 2.5.1 (#10732)

Motivation:
Conscrypt 2.5.1 is available and it's a good idea to upgrade to the latest version.

Modification:
Upgraded Conscrypt 2.4.0 to 2.5.1

Result:
Newer Conscrypt version."
701eed8762b1ab9f46138385191912c407bfdafe,"Unregister all native methods on unload for kqueue (#10738)

Motivation:

03aafb9cff352269a7fc73e4cf0c281770676be9 did ensure we unregister all native methods when we unload / or fail during load of the native library. Unfortunally it missed to unregister in one case for kqueue.

Modifications:

Add unregister calls to the unload function

Result:

Correctly unregister in all cases"
ddebc1027d7cc09850acdd961417c1d650f43dd5,"Make changes to prepare for io_uring incubator repository (#10741)

Motivation:

During the last few month we did develop an io_uring based transport which shows very promising performance numbers. To give it more time to bake we will develop it outside of netty in an ""incubator"" module which will make it clear to users what to expect and also allow us to seperate its release cycle. While the implementation of it is very self contained there are few small adjustments that need to be made in netty itself to allow us to reuse code.

Modifications:

- AbstractChannel: Add method which can be used when a write fails and remove final from one method
- IovArray: Allow to create an IovArray from a ByteBuf instance
- FileDescriptor: Allow to reuse mark close logic via sub-class

Result:

Be able to reuse netty core classes in io_uring incubator repository"
d4defc30b880072db6e9e5c7459506e6a153f2f3,"Add PlatformDependent* methods that are needed by io_uring (#10744)

Motivation:

ddebc10 added a few adjustments that are needed by io_uring that we will add as an incubator repository. Unfortunally we missed the changed in PlatformDependent*.

Modifications:

Add missing methods

Result:

Be able to compile io_uring code against core netty"
d371b1bbaa3b98f957f6b025673098ad3adb5131,"Rethrow NoSuchMethodError with more hints about incompatible native library versions (#10740)

Motivation:

03aafb9cff352269a7fc73e4cf0c281770676be9 did ensure we fail while loading a natibe library which is not compatible. While this is great it is still sometimes hard for people to understand what NoSuchMethodError means in this context.

Modifications:

If possible rethrow the NoSuchMethodError and provide some more hints about multiple versions of the shared library

Result:

Easier to understand for people why loading fails"
b4edf21bd3b98c69cf4755a5c7a5552f65c04cae,"Errors.throwConnectException(...) should be public (#10745)

Motivation:

ddebc1027d7cc09850acdd961417c1d650f43dd5 missed to make Errors.throwConnectException(...) public

Modifications:

Make method public

Result:

Be able to use Errors.throwConnectException(...) from other module"
96da45de2d53d74ad3a77e83c840410eb3f847c7,"Fix explicitly little-endian accessors in SwappedByteBuf (#10747)


Motivation:
Some buffers implement ByteBuf#order(order) by wrapping themselves in a SwappedByteBuf.
The SwappedByteBuf is then responsible for swapping the byte order on accesses.
The explicitly little-endian accessor methods, however, should not be swapped to big-endian, but instead remain explicitly little-endian.

Modification:
The SwappedByteBuf was passing through calls to e.g. writeIntLE, to the big-endian equivalent, e.g. writeInt.
This has been changed so that these calls delegate to their explicitly little-endian counterpart.

Result:
This makes all buffers that make use of SwappedByteBuf for their endian-ness configuration, consistent with all the buffers that use other implementation strategies.
In the end, all buffers now behave exactly the same, when using their explicitly little-endian accessor methods."
8a10adaa55a008d64cc587bdf2fb7da1b460b979,"Make Http2ToHttpHeaderTranslator method package-private. (#10736)

Motivation:
Http2ToHttpHeaderTranslator is a private class but translateHeaders(Iterable<Entry<CharSequence, CharSequence>>) is public but it should be package-private.

Modification:
Removed public.

Result:
Correct access modifer."
e9b28e76a366dadaf6da4375c503f670ec3e3ae4,"Change variable name of Http2Headers (#10743)

Motivation:
`addHttp2ToHttpHeaders(int streamId, Http2Headers sourceHeaders, FullHttpMessage destinationMessage, boolean addToTrailer)` 
should match 
`addHttp2ToHttpHeaders(int streamId, Http2Headers inputHeaders, HttpHeaders outputHeaders, HttpVersion httpVersion, boolean isTrailer, boolean isRequest)`.

However, the `Http2Headers` variable name is different.

Modification:
Changed `sourceHeaders` to `inputHeaders`.

Result:
Variable and JavaDoc naming now correct."
a63faa4fa1ae08efc391e9bcf461ab699a5d7efd,"Use netty-jni-util and so remove a lot of duplication (#10735)

Motivation:

We had a lot of duplication in our jni code which was mostly due macros but also related to how we support shading. By using netty-jni-util we can share all the code between netty and netty-tcnative ( and possible other jni based netty projects in the future).

Modifications:

- Use netty-jni-util and re-use its macros / functions
- Remove duplicated code
- Adjust build files

Result:

Less code duplication for JNI"
dab9a068a982f85169d506a35c9746a8208e5b92,"Fix compile error introduced by a63faa4fa1ae08efc391e9bcf461ab699a5d7efd (#10750)

Motivation:

a63faa4fa1ae08efc391e9bcf461ab699a5d7efd missed to update the macos specific c files for the resolver.

Modifications:

Fix up c files so it compiles again on macos

Result:

Compiles on macos again"
7b736a3ae4efef8280aaf3b7165268ef5e1086b0,"MQTT5: support multiple Subscription ID properties (#10734)

Motivation:

Subscription ID property of the PUBLISH message may be repeated multiple times, which wasn't taken into account when developing `MqttProperties` API.

Modification:

Store Subscription ID properties separately from others - in `MqttProperties.subscriptionIds`. 
Add `MqttProperties.getProperties` method to retrieve properties that may be repeated.
Change internal representation of User Properties for uniformity with Subscription ID - now they're stored in `MqttProperties.userProperties` rather than the common hash map.

Result:

Multiple Subscription ID properties can be set or retrieved."
26976310d26e11a850cf3cb0b9aa38287aefc1f8,"Enable header valication in HttpServerUpgradeHandler (#10643)

Motivation:

HttpServerUpgradeHandler takes a list of protocols from an incoming
request and uses them for building a response.
Although the class does some validation while parsing the list,
it then disables HTTP header validation when it builds a responst.
The disabled validation may potentially allow
HTTP response splitting attacks.

Modifications:

- Enabled HTTP header validation in HttpServerUpgradeHandler
  as a defense-in-depth measure to prevent possible
  HTTP response splitting attacks.
- Added a new constructor that allows disabling the validation.

Result:

HttpServerUpgradeHandler validates incoming protocols
before including them into a response.
That should prevent possible HTTP response splitting attacks."
81544ab94f831dfe1782ab5cad917626c6b4a169,"Add support for heartbeat in STOMP decoder/encoder.  (#10695)

Motivation:

Heart-beat is a functionality of STOMP enabling clients and servers to know the healthiness of the connection. The current decoder didn't allow for heart-beat messages to be forwarded to the decoder and were simply swallowed as part of the frame decoding.

Modifications:

Adding support for heartbeat message parsing by introducing a new HEARTBEAT command (not a real STOMP command).
Heartbeat received on the channel will trigger a StompFrame with the command set to HEARTBEAT.
Sending heartbeat on the channel is achieved by creating a StompFrame with the command set to HEARTBEAT.

Result:

Heartbeat can now be received/sent and acted upon to determine the healthiness of the connection and terminate it if needed."
d62384b227d3cfd94f602956e3e48623025dd145,"Add reflection config for JMX runtime (#10753)

Motivation:

`DefaultChannelId` uses reflection to access the JMX runtime. This needs some extra config for GraalVM.

Modification:

Add config for GraalVM

Result:

Works when using GraalVM native image"
87c46113d1ff9fa25322ab9dadf703e0e8a97d41,"Fix typo in Http2HeadersFrame javadocs (#10756)

Motivation:
`Http2HeadersFrame#isEndStream()` JavaDoc says `Returns {@code true} if the END_STREAM flag ist set.`. The typo is `ist` word. However, it should be `is`.

Modification:
Changed `ist` to `is`.

Result:
Better JavaDoc by fixing the typo."
1efc5f81e28066c0805229efb9e12f01131b00a0,"Fix typo in Http2DataFrame javadocs (#10755)

Motivation:
`Http2DataFrame#isEndStream()` JavaDoc says `Returns {@code true} if the END_STREAM flag ist set.`. The typo is `ist` word. However, it should be `is`.

Modification:
Changed `ist` to `is`.

Result:
Better JavaDoc by fixing the typo."
0b0b446d38f0557eb9de2872a99b0e388b8bb909,"Fix typo in Http2FrameCodec#write(...) comment

Motivation:
`Http2FrameCodec#write(...)` has typo in comment.
`// In the event of manual SETTINGS ACK is is assumed the encoder will apply the earliest received but not`.
The typo is `is is`. However, it should be `it is`.

Modification:
Changed `is is` to `it is`.

Result:
Correct comment without typos."
1492374f99c8dd536bf9900c956dc502b7e40821,"Remove extra empty line (#10754)

Motivation:
`Http2Frame` has extra empty line after `String name();`. However, it should not be there.

Modification:
Removed extra empty line.

Result:
Empty-line code style now matching with other classes."
175d1368e52c94a193a73916d03664401d8aa3f1,"Revert ""Add support for heartbeat in STOMP decoder/encoder.  (#10695)"" (#10766)

This reverts commit 81544ab94f831dfe1782ab5cad917626c6b4a169."
d1cf9774d532d96ee16ba859127a4e8ea50b4134,"Add `toString` method in DefaultHttp2WindowUpdateFrame (#10763)

Motivation:
We should have the `toString` method in `DefaultHttp2WindowUpdateFrame` because it makes debugging a little easy.

Modification:
Added `toString` method.

Result:
`toString` method to help in debugging.


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
c5077a3d8751bbe69873b7c576049a50f8d7f8ea,"HttpConversionUtil#toHttpResponse should use false in `isRequest` parameter (#10760)

Motivation:
`HttpConversionUtil#toHttpResponse` translates `Http2Headers` to `HttpResponse`. It uses `#addHttp2ToHttpHeaders(..., boolean isRequest)` to do so. However, `isRequest` field is set to `true` instead of `false`. It should be set to `false` because we're doing conversion of Response not Request.

Modification:
Changed `true` to `false`.

Result:
Correctly translates `Http2Headers` to `HttpResponse`."
7e1147ea4fac41f39029e539f56ea8bd87e19bf2,"Avoid auto boxing in PoolChunk#removeAvailRun (#10769)

Motivation:
PoolChunk maintains multiple PriorityQueue<Long> collections. The usage
of PoolChunk#removeAvailRun unboxes the Long values to long, and then
this method uses queue.remove(..) which will auto box the value back to
Long. This creates unnecessary allocations via Long.valueOf(long).

Modifications:
- Adjust method signature and usage of PoolChunk#removeAvailRun to avoid
boxing

Result:
Less allocations as a result of PoolChunk#removeAvailRun."
3b90b536bb26b6b7e1123e3237807b8c3ff49b6e,"Allow and skip null handlers when adding a vararg list of handlers (#10751)

Motivation:

Allowing null handlers allows for more convenient idioms in
conditionally adding handlers, e.g.,

ch.pipeline().addLast(
        new FooHandler(),
        condition ? new BarHandler() : null,
        new BazHandler()
);

Modifications:

* Change addFirst(..) and addLast(..) to skip null handlers, rather than
break or short-circuit.
* Add new unit tests.

Result:

* Makes addFirst(..) and addLast(..) behavior more consistent
* Resolves https://github.com/netty/netty/issues/10728"
c6e2934357ca7284c474f9da2823b54936d3addc,"Revert ""Allow and skip null handlers when adding a vararg list of handlers (#10751)"" (#10770)

This reverts commit 3b90b536bb26b6b7e1123e3237807b8c3ff49b6e."
1c0662ea42a8c4d8cd9706ecceae4ae5bd2e9f75,"Use JUnit 5 for running all tests (#10764)

Motivation:
JUnit 5 is the new hotness. It's more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel. But most importantly, it's able to directly run JUnit 4 tests.
This means we can update and start using JUnit 5 without touching any of our existing tests.
I'm also introducing a dependency on assertj-core, which is like hamcrest, but arguably has a nicer and more discoverable API.

Modification:
Add the JUnit 5 and assertj-core dependencies, without converting any tests at time time.

Result:
All our tests are now executed through the JUnit 5 Vintage Engine.
Also, the JUnit 5 test APIs are available, and any JUnit 5 tests that are added from now on will also be executed."
ab56fb6f44d30b82d25c4d1dc325625a25cac9e9,"Update to latest java 8/11/15 versions (#10774)

Motivation:

There were new releases of java.

Modifications:

Update java versions so we use the latest on the CI

Result:

Use latest releases"
23864d25b993e9f75cc910d6318d831a01730a83,"Fix License type of dnsinfo (#10773)

Motivation:
`dnsinfo` uses `Apple Public Source License 2.0` not `Apache License 2.0`.

Modification:
Changed `Apache License 2.0` to `Apple Public Source License 2.0`

Result:
Fixes #10772"
b63e2dfb1baa7dbe3da381458f6d9ab004777090,"Drop unknown frames on connection stream (#10771)

Motivation:

We received a [bug report](https://bugs.chromium.org/p/chromium/issues/detail?id=1143320) from the Chrome team at Google, their canary builds are failing [HTTP/2 GREASE](https://tools.ietf.org/html/draft-bishop-httpbis-grease-00) testing to netflix.com.

The reason it's failing is that Netty can't handle unknown frames without an active stream created. Let me know if you'd like more info, such as stack traces or repro steps. 

Modification:

The change is minor and simply ignores unknown frames on the connection stream, similarly to `onWindowUpdateRead`.

Result:

I figured I would just submit a PR rather than filing an issue, but let me know if you want me to do that for tracking purposes."
027a68604273032f4cb6b181b40c47ced2108239,"codec-http2: Correct last-stream-id for HEADERS-triggered connection error (#10775)

Motivation:

When parsing HEADERS, connection errors can occur (e.g., too large of
headers, such that we don't want to HPACK decode them). These trigger a
GOAWAY with a last-stream-id telling the client which streams haven't
been processed.

Unfortunately that last-stream-id didn't include the stream for the
HEADERS that triggered the error. Since clients are free to silently
retry streams not included in last-stream-id, the client is free to
retransmit the request on a new connection, which will fail the
connection with the wrong last-stream-id, and the client is still free
to retransmit the request.

Modifications:

Have fatal connection errors (those that hard-cut the connection)
include all streams in last-stream-id, which guarantees the HEADERS'
stream is included and thus should not be silently retried by the HTTP/2
client.

This modification is heavy-handed, as it will cause racing streams to
also fail, but alternatives that provide precise last-stream-id tracking
are much more invasive. Hard-cutting the connection is already
heavy-handed and so is rare.

Result:

Fixes #10670"
76d5cdb9e8d3676f0306daac07a3d93e24430a46,"Add HttpScheme Support in HttpToHttp2ConnectionHandler (#10641)

Motivation:
We should have a method to add `HttpScheme` if `HttpRequest` does not contain `x-http2-scheme` then we should use add it if `HttpToHttp2ConnectionHandler` is build using specified `HttpScheme`.

Modification:
Added `HttpScheme` in `HttpToHttp2ConnectionHandlerBuilder`.

Result:
Automatically add `HttpScheme` if missing in `HttpRequest`."
2d1b143dfac76a434928945c99035a8d598cf25a,"Update netty-build version (#10780)

Motivation:

We recently released a new netty-build version and changed the artifact name

Modifications:

Update version and artifact name

Result:

Use latest version"
b27d8379742f075f47244ac8c786cb6163ee6353,"Smaller output in codeql build (#10787)

Motivation:
Printing download progress in the build log makes it harder to see what's wrong when the build fails.

Modification:
Change the maven command to not show transfer progress, also enable batch mode so Maven don't print in colors that we can't see anyway.

Result:
More concise code analysis build logs."
1c37c8f0725dcc810d8607126d56f5dcaef16379,"Use special exception when failing because the SSLEngine was closed (#10783)

Motivation:

Sometimes it would be helpful to easily detect if an operation failed due the SSLEngine already be closed.

Modifications:

Add special exception that is used when the engine was closed

Result:

Easier to detect a failure caused by a closed exception"
ff638cac9cb157f8e688c0357f4eb7b169cbd241,"Add ByteBuf parameter HttpConversionUtil (#10785)

Motivation:
`HttpConversionUtil#toFullHttpResponse` and `HttpConversionUtil#toFullHttpRequest` has `ByteBufAllocator` which is used for building `FullHttpMessage` and then data can be appended with `FullHttpMessage#content`. However, there can be cases when we already have `ByteBuf` ready with data. So we need a parameter to add `ByteBuf` directly into `FullHttpMessage` while creating it.

Modification:
Added `ByteBuf` parameter,

Result:
More functionality for handling `FullHttpMessage` content."
5ffca6ef4a32c8d810795457dd0885235a587ee0,"Use http in xmlns URIs to make maven release plugin happy again (#10788)

Motivation:

https in xmlns URIs does not work and will let the maven release plugin fail:

```
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  1.779 s
[INFO] Finished at: 2020-11-10T07:45:21Z
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare (default-cli) on project netty-parent: Execution default-cli of goal org.apache.maven.plugins:maven-release-plugin:2.5.3:prepare failed: The namespace xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" could not be added as a namespace to ""project"": The namespace prefix ""xsi"" collides with an additional namespace declared by the element -> [Help 1]
[ERROR]
```

See also https://issues.apache.org/jira/browse/HBASE-24014.

Modifications:

Use http for xmlns

Result:

Be able to use maven release plugin"
cea659bd8a5730422724fa9fa165d343ef93bae0,[maven-release-plugin] prepare release netty-4.1.54.Final
e256074e49f29f36d8265eb7869a6fd0e35679db,[maven-release-plugin] prepare for next development iteration
afca81a9d83b2f72a2c466c02922750dda23f967,[maven-release-plugin] rollback the release of netty-4.1.54.Final
5557d77090b94a86c424dc266fc060c7d9413bb7,"Use correct netty-build artifact

Motivation:

2d1b143dfac76a434928945c99035a8d598cf25a missed to change the artifactId in one place

Modification:

Change to netty-build-common

Result:

Release works"
715353ecd6b9031fe53f65767037bc0ecc052dc2,[maven-release-plugin] prepare release netty-4.1.54.Final
944a0205862e32f1020647bbf4ef4eca5587446e,[maven-release-plugin] prepare for next development iteration
c717d4b97aa164a500098c6fb7b834535d13bf53,"Fix UnsafeByteBufUtil#setBytes() cause JVM crash (#10791) (#10795)

Motivation:

Passing a null value of byte[] to the `Unsafe.copyMemory(xxx)` would cause the JVM crash 

Modification:

Add null checking before calling `PlatformDependent.copyMemory(src,  xxx)`

Result:

Fixes #10791 ."
8b2ed77042b5a3023974d7a6d2f22fc0d3edef34,"Fix comment typo DelegatingDecompressorFrameListener (#10789)

Motivation:
`DelegatingDecompressorFrameListener#initDecompressor` has multiple dots `.` in comments. However, it should not have that.

Modification:
Removed multiple dots.

Result:
Clean comment"
1c230405fd4f7c445773b662beeccebc18f85f98,"Fix for performance regression on HttpPost RequestDecoder (#10623)

Fix issue #10508 where PARANOID mode slow down about 1000 times compared to ADVANCED.
Also fix a rare issue when internal buffer was growing over a limit, it was partially discarded
using `discardReadBytes()` which causes bad changes within previously discovered HttpData.

Reasons were:

Too many `readByte()` method calls while other ways exist (such as keep in memory the last scan position when trying to find a delimiter or using `bytesBefore(firstByte)` instead of looping externally).

Changes done:
- major change on way buffer are parsed: instead of read byte per byte until found delimiter, try to find the delimiter using `bytesBefore()` and keep the last unfound position to skeep already parsed parts (algorithms are the same but implementation of scan are different)
- Change the condition to discard read bytes when refCnt is at most 1.

Observations using Async-Profiler:
==================================

1) Without optimizations, most of the time (more than 95%) is through `readByte()` method within `loadDataMultipartStandard` method.
2) With using `bytesBefore(byte)` instead of `readByte()` to find various delimiter, the `loadDataMultipartStandard` method is going down to 19 to 33% depending on the test used. the `readByte()` method or equivalent `getByte(pos)` method are going down to 15% (from 95%).

Times are confirming those profiling:
- With optimizations, in SIMPLE mode about 82% better, in ADVANCED mode about 79% better and in PARANOID mode about 99% better (most of the duplicate read accesses are removed or make internally through `bytesBefore(byte)` method)

A benchmark is added to show the behavior of the various cases (one big item, such as File upload, and many items) and various level of detection (Disabled, Simple, Advanced, Paranoid). This benchmark is intend to alert if new implementations make too many differences (such as the previous version where about PARANOID gives about 1000 times slower than other levels, while it is now about at most 10 times).

Extract of Benchmark run:
=========================

Run complete. Total time: 00:13:27

Benchmark                                                                           Mode  Cnt  Score   Error   Units
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigAdvancedLevel   thrpt    6  2,248 ± 0,198 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigDisabledLevel   thrpt    6  2,067 ± 1,219 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigParanoidLevel   thrpt    6  1,109 ± 0,038 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigSimpleLevel     thrpt    6  2,326 ± 0,314 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighAdvancedLevel  thrpt    6  1,444 ± 0,226 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighDisabledLevel  thrpt    6  1,462 ± 0,642 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighParanoidLevel  thrpt    6  0,159 ± 0,003 ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighSimpleLevel    thrpt    6  1,522 ± 0,049 ops/ms"
3354c7b0bf977cabfd0097f80973a9175788a8a6,"Let object serialisation exceptions propagate in the Object Echo example (#10807)

Motivation:
People may use the object serialisation example as a vehicle to test out sending their own objects across the wire.
If those objects are not actually serialisable for some reason, then we need to let the exception propagate so that this becomes obvious to people.

Modification:
Add a listener to the future that sends the first serialisable message, so that we ensure that any exceptions that shows up during serialisation becomes visible.
Without this, the state of the future that sent the first message was never checked or inspected anywhere.

Result:
Serialisation bugs in code derived from the Object Echo example are much easier to diagnose.

This fixes #10777"
f40b4f15a6fe02ecfd21927223b14878864064e3,"Override Sec-WebSocket-Protocol websocket handshake response header after custom headers to avoid duplication (#10793)

Motivation:

According rfc (https://tools.ietf.org/html/rfc6455#section-11.3.4), `Sec-WebSocket-Protocol` header field MUST NOT appear
more than once in an HTTP response.
At the moment we can pass `Sec-WebSocket-Protocol`  via custom headers and it will be added to response.

Modification:

Change method add() to set() for avoid duplication. If we pass sub protocols in handshaker constructor it means that they are preferred over custom ones.

Result:

Less error prone behavior."
c1ba23933cd3e7c723fe33d58173b58da80ac3bb,"Add ABORT and COMMIT STOMP commands to the StompCommand enum (#10790)

Motivation:

ABORT and COMMIT commands were missing from the enum but they are part of the STOMP spec.

Modifications:

Modified the enum to add the missing commands.

Result:

ABORT and COMMIT commands can now be parsed properly and acted on."
2ff8973f69ef8dfc4d3ebccfb7dc601e84b1dfea,"Allow blocking calls inside HashedWheelTimer start() and stop() (#10810)

Motivation:

When a HashedWheelTimer instance is started or stopped, its working
thread is started or stopped. These operations block the calling
thread:
- start() calls java.util.concurrent.CountDownLatch.await() to wait
for the worker thread to finish initializing;
- stop() calls java.lang.Thread.join(long) to wait for the worker
thread to exit.
BlockHound detects these calls and as a consequence, prevents
HashedWheelTimer from working properly, if it is started or stopped
in a thread that is not allowed to block.

Modifications:

Added two more BlockHound exceptions to
io.netty.util.internal.Hidden.NettyBlockHoundIntegration: one
for HashedWheelTimer.start() and one for HashedWheelTimer.stop().

Result:

HashedWheelTimer can now be started and stopped properly when
BlockHound is activated."
ba83a8840f6383904202cf8254c5ac1ff20e8ac9,"IovArray should support when there is no unsafe present (#10814)


Motivation:

In some enviroments sun.misc.Unsafe is not present. We should support these as well.

Modifications:

Fallback to JNI if we can't directly access the memoryAddress of the buffer.

Result:

Fixes https://github.com/netty/netty/issues/10813"
02cd85181aef2502c2f90b978453d210d08781ef,"Allow blocking calls inside SingleThreadEventExecutor.addTask (#10811)

Motivation:

GlobalEventExecutor.addTask was rightfully allowed to block by commit
09d38c8. However the same should have been done for
SingleThreadEventExecutor.addTask.

BlockHound is currently intercepting that call, and as a consequence,
it prevents SingleThreadEventExecutor from working properly, if addTask is
called from a thread that cannot block.

The interception is due to LinkedBlockingQueue.offer implementation,
which uses a ReentrantLock internally.

Modifications:

* Added one BlockHound exception to
io.netty.util.internal.Hidden.NettyBlockHoundIntegration for
SingleThreadEventExecutor.addTask.
* Also added unit tests for both SingleThreadEventExecutor.addTask
and GlobalEventExecutor.addTask.

Result:

SingleThreadEventExecutor.addTask can now be invoked from any thread
when BlockHound is activated."
9cfe3bf5e3a3f0527bf70d969a32c2cd54a30343,"Fix NPE in ByteToMessageDecoder if the user removes the handler while channelInputClosed(...) is processing the buffer. (#10817)

Motivation:

We need to carefully check for null before we pass the cumulation buffer into decodeLast as callDecode(...) may have removed the codec already and so set cumulation to null.

Modifications:

- Check for null and if we see null use Unpooled.EMPTY_BUFFEr
- Only call decodeLast(...) if callDecode(...) didnt remove the handler yet.

Result:

Fixes https://github.com/netty/netty/issues/10802"
0c2b761cfb3b61cd0536d774fe57bc528e4ff3a5,"OpenSsl.memoryAddress(...) should use internalNioBuffer(...) if it can't access the memoryAddress (#10818)

Motivation:

We can make use of internalNioBuffer(...) if we cant access the memoryAddress. This at least will reduce the object creations.

Modifications:

Use internalNioBuffer(...) and so reduce the GC

Result:

Less object creation if we can't access the memory address."
221c1a1ed7f09e7c3c2fe4cc8088f9d254a1ae49,"Fix caching for normal allocations (#10825)

Motivation:

https://github.com/netty/netty/pull/10267 introduced a change that reduced the fragmentation. Unfortunally it also introduced a regression when it comes to caching of normal allocations. This can have a negative performance impact depending on the allocation sizes.

Modifications:

- Fix algorithm to calculate the array size for normal allocation caches
- Correctly calculate indeox for normal caches
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10805"
567b46fa0182e5b613ae1c975972a3cfa35c06a4,"Don't use the cname cache when using DnsRecordResolveContext (#10808)

Motivation:

The DnsNameResolver internally follows CNAME indirects for all records types, and supports caching for CNAME resolution and A* records. For DNS record types that are not cached (e.g. SRV records) the caching of CNAME records may result in failures at incorrect times. For example if a CNAME record has a larger TTL than the entries it resolves this may result in failures which don't occur if the CNAME cache is disabled.

Modifications:

- Don't cache CNAME and also dont use the cache for CNAME when using DnsRecordResolveContext
- Add unit test

Result:

More correct resolving and also not possible to have failures due CNAME still be in the cache while the queried record experied"
c41d46111dc37aaf9c8ee7aec162d87221df1d70,"Create bespoke long/long hashmap and long-valued priority queue for PoolChunk (#10826)


Motivation:
The uncached access to PoolChunk can be made faster, and avoid allocating boxed Longs, if we have a primitive hash map and priority queue implementation for it.

Modification:
Add bespoke primitive implementations of a hash map and a priority queue for PoolChunk.
Remove all the long-boxing caused by the previous implementation.
The hashmap is a linear probing map with a fairly short probe that keeps the search within a couple of cache lines.
The priority queue is the same binary heap algorithm that's described in Algorithms by Sedgewick and Wayne.
The implementation avoids the Long boxing by relying on a long[] array.
This makes the internal-remove method faster, which is an important operation in PoolChunk.

Result:
Roughly 13% performance uplift in buffer allocations that miss cache."
b27f0fccced002e700d8f3bb7a88c1349d83d8ee,"Let Http2ConnectionHandler close stream with voidPromise (#10819)


Motivation:

Http2ConnectionHandler tries to addListener to the future without checking if it's void. If it is void, this will fail and generate an exception. 
 
Modifications:
Unvoid the promise in writeData()
 
Result:

Fixes #10816, Writing with a voidPromise no longer generates exceptions."
d2e16fb6212ee208d48130d260518b987b0e4647,"Fix a bug in LongPriorityQueue internal remove (#10832)

Motivation:
We rely on this functionality in PoolChunk, and a bug was caught by a non-deterministic test failure

Modification:
Went back to the Algorithms book, and reimplemented remove() the way it was meant to.

Result:
No test failures after 200.000 runs, so we have some confidence the code is correct now."
37267f95ce6a7ec486b69bd04ebdac83e114f9d9,"Initialize Recycler.INITIAL_CAPACITY before invoking InternalLogger.debug() (#10836)

Motivation:

If Log4J2's `Filter` creates `Recycler.Stack` somehow, `Recycler.Stack()` will see uninitialized `Recycler.INITIAL_CAPACITY`. This has been raised originally in https://github.com/micrometer-metrics/micrometer/issues/2369.

Modification:

This PR changes to initialize `Recycler.INITIAL_CAPACITY` before invoking `InternalLogger.debug()` to avoid it.

Result:

Fixes the problem described in the ""Motivation"" section."
44f85bba5f47df885dbbe5243d008220bfbab5ca,"Ensure we don't leak the ClassLoader in the backtrace of TrackRecord.BOTTOM (#10839)

Motivation:

We need to ensure we override fillInStacktrace() when we store exceptions in static fields to not leak the Classloader in the backtrace.

Came up in https://github.com/netty/netty/pull/10691#issuecomment-738331186. Thanks to @amir-shalem for notice this one.

Modifications:

- Add overrides of fillInStracktrace in TrackRecord.BOTTOM

Result:

Related fix to https://github.com/netty/netty/pull/10686"
8a7c580bf679628617fde26c3913fa62f0895e18,"Add whitelist entry for SSLEngineImpl.wrap to BlockHound configuration (#10844)

Motivation:

Internally SSLEngineImpl.wrap(...) may call FileInputStream.read(...).
This will cause the error below when BlockHound is enabled
reactor.blockhound.BlockingOperationError: Blocking call! java.io.FileInputStream#readBytes
	at java.io.FileInputStream.readBytes(FileInputStream.java)
	at java.io.FileInputStream.read(FileInputStream.java:255)

Modifications:

- Add whitelist entry to BlockHound configuration
- Add test

Result:

Fixes #10837"
f551db2bda878eb458baafeecc45c8ed7913dd57,"Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding (allocate one buffer for full frame considering the size of the headers) (#10778)

Motivation:

At the moment `StompSubframeEncoder` encode a frame only to `ByteBuf` it is not convenient if further we need to convert it to another type of message,  e.g. `WebSocketFrame`. Also, if we send a full frame, it splits into two headers and a content what makes it difficult to convert it in the next handler. 

Modification:

Introduce additional converter methods e.g. (`Object protected convertFullFrame(StompFrame original, ByteBuf encoded`)...) for extending encoder functionality and allocate only one `ByteBuf` for full stomp frame. Change headers size calculation, previously used only 256 bytes that reallocate a new buffer each time when headers size more than this threshold. Add `StompEncoderBenchmark`.

Result:

Improved  `StompSubframeEncoder` fro extensions.

Previous version benchmark
```
Benchmark                              (contentLength)  (headersType)  (pooledAllocator)   Mode  Cnt        Score        Error  Units
StompEncoderBenchmark.writeStompFrame                0            ONE               true  thrpt   10  4432132.884 ± 178923.436  ops/s
StompEncoderBenchmark.writeStompFrame                0            ONE              false  thrpt   10  1281122.756 ±  52484.174  ops/s
StompEncoderBenchmark.writeStompFrame                0          THREE               true  thrpt   10  2980897.937 ± 130253.049  ops/s
StompEncoderBenchmark.writeStompFrame                0          THREE              false  thrpt   10  1116883.574 ±  35471.482  ops/s
StompEncoderBenchmark.writeStompFrame                0          SEVEN               true  thrpt   10  1988012.159 ±  74352.450  ops/s
StompEncoderBenchmark.writeStompFrame                0          SEVEN              false  thrpt   10   881772.343 ±  94633.870  ops/s
StompEncoderBenchmark.writeStompFrame                0         ELEVEN               true  thrpt   10  1048125.919 ± 151053.902  ops/s
StompEncoderBenchmark.writeStompFrame                0         ELEVEN              false  thrpt   10   429900.066 ±  47956.661  ops/s
StompEncoderBenchmark.writeStompFrame                0         TWENTY               true  thrpt   10   660584.122 ± 104973.439  ops/s
StompEncoderBenchmark.writeStompFrame                0         TWENTY              false  thrpt   10   278255.488 ±  20143.708  ops/s
StompEncoderBenchmark.writeStompFrame               10            ONE               true  thrpt   10  4251498.549 ± 625050.979  ops/s
StompEncoderBenchmark.writeStompFrame               10            ONE              false  thrpt   10  1214006.861 ±  60421.601  ops/s
StompEncoderBenchmark.writeStompFrame               10          THREE               true  thrpt   10  3117736.486 ± 173613.974  ops/s
StompEncoderBenchmark.writeStompFrame               10          THREE              false  thrpt   10  1046605.891 ±  94428.064  ops/s
StompEncoderBenchmark.writeStompFrame               10          SEVEN               true  thrpt   10  2006986.881 ± 108456.748  ops/s
StompEncoderBenchmark.writeStompFrame               10          SEVEN              false  thrpt   10   877983.112 ±  82919.387  ops/s
StompEncoderBenchmark.writeStompFrame               10         ELEVEN               true  thrpt   10  1132844.437 ±  84578.571  ops/s
StompEncoderBenchmark.writeStompFrame               10         ELEVEN              false  thrpt   10   429334.649 ±  35403.161  ops/s
StompEncoderBenchmark.writeStompFrame               10         TWENTY               true  thrpt   10   657093.390 ±  48092.947  ops/s
StompEncoderBenchmark.writeStompFrame               10         TWENTY              false  thrpt   10   252140.876 ±  37337.255  ops/s
StompEncoderBenchmark.writeStompFrame              100            ONE               true  thrpt   10  4720507.067 ± 100993.908  ops/s
StompEncoderBenchmark.writeStompFrame              100            ONE              false  thrpt   10  1266182.925 ±  85888.413  ops/s
StompEncoderBenchmark.writeStompFrame              100          THREE               true  thrpt   10  2898746.621 ± 452579.753  ops/s
StompEncoderBenchmark.writeStompFrame              100          THREE              false  thrpt   10  1019555.288 ±  65640.507  ops/s
StompEncoderBenchmark.writeStompFrame              100          SEVEN               true  thrpt   10  2259187.459 ±  20025.989  ops/s
StompEncoderBenchmark.writeStompFrame              100          SEVEN              false  thrpt   10   896405.412 ±  53750.148  ops/s
StompEncoderBenchmark.writeStompFrame              100         ELEVEN               true  thrpt   10  1110670.772 ± 107650.327  ops/s
StompEncoderBenchmark.writeStompFrame              100         ELEVEN              false  thrpt   10   445187.398 ±  28845.959  ops/s
StompEncoderBenchmark.writeStompFrame              100         TWENTY               true  thrpt   10   611506.846 ±  25304.240  ops/s
StompEncoderBenchmark.writeStompFrame              100         TWENTY              false  thrpt   10   247687.007 ±  43471.578  ops/s
StompEncoderBenchmark.writeStompFrame             1000            ONE               true  thrpt   10  4140949.576 ± 270274.087  ops/s
StompEncoderBenchmark.writeStompFrame             1000            ONE              false  thrpt   10  1154515.598 ± 134413.876  ops/s
StompEncoderBenchmark.writeStompFrame             1000          THREE               true  thrpt   10  3349996.875 ± 162309.889  ops/s
StompEncoderBenchmark.writeStompFrame             1000          THREE              false  thrpt   10  1141040.562 ±   5895.693  ops/s
StompEncoderBenchmark.writeStompFrame             1000          SEVEN               true  thrpt   10  2184632.248 ±   8957.833  ops/s
StompEncoderBenchmark.writeStompFrame             1000          SEVEN              false  thrpt   10   959545.704 ±   5835.161  ops/s
StompEncoderBenchmark.writeStompFrame             1000         ELEVEN               true  thrpt   10  1081113.327 ±   3957.527  ops/s
StompEncoderBenchmark.writeStompFrame             1000         ELEVEN              false  thrpt   10   467524.660 ±   1383.236  ops/s
StompEncoderBenchmark.writeStompFrame             1000         TWENTY               true  thrpt   10   568411.797 ± 108712.493  ops/s
StompEncoderBenchmark.writeStompFrame             1000         TWENTY              false  thrpt   10   260764.231 ±  43149.129  ops/s
StompEncoderBenchmark.writeStompFrame            10000            ONE               true  thrpt   10  4369787.147 ± 619367.939  ops/s
StompEncoderBenchmark.writeStompFrame            10000            ONE              false  thrpt   10  1246782.845 ±  47468.764  ops/s
StompEncoderBenchmark.writeStompFrame            10000          THREE               true  thrpt   10  3333328.810 ± 253061.481  ops/s
StompEncoderBenchmark.writeStompFrame            10000          THREE              false  thrpt   10  1108278.988 ±  81905.149  ops/s
StompEncoderBenchmark.writeStompFrame            10000          SEVEN               true  thrpt   10  2062961.266 ± 247096.284  ops/s
StompEncoderBenchmark.writeStompFrame            10000          SEVEN              false  thrpt   10   925199.985 ±  36734.594  ops/s
StompEncoderBenchmark.writeStompFrame            10000         ELEVEN               true  thrpt   10  1223240.034 ±  58833.801  ops/s
StompEncoderBenchmark.writeStompFrame            10000         ELEVEN              false  thrpt   10   460864.117 ±   2361.459  ops/s
StompEncoderBenchmark.writeStompFrame            10000         TWENTY               true  thrpt   10   655864.762 ±  35237.335  ops/s
StompEncoderBenchmark.writeStompFrame            10000         TWENTY              false  thrpt   10   286388.865 ±   1002.460  ops/s
```
A new version benchmark
```
Benchmark                              (contentLength)  (headersType)  (pooledAllocator)   Mode  Cnt        Score        Error  Units
StompEncoderBenchmark.writeStompFrame                0            ONE               true  thrpt   10  4366110.018 ± 420377.867  ops/s
StompEncoderBenchmark.writeStompFrame                0            ONE              false  thrpt   10  1289437.153 ± 215271.656  ops/s
StompEncoderBenchmark.writeStompFrame                0          THREE               true  thrpt   10  2818791.355 ± 218894.471  ops/s
StompEncoderBenchmark.writeStompFrame                0          THREE              false  thrpt   10  1040151.615 ±  75352.695  ops/s
StompEncoderBenchmark.writeStompFrame                0          SEVEN               true  thrpt   10  1842144.001 ±  94668.864  ops/s
StompEncoderBenchmark.writeStompFrame                0          SEVEN              false  thrpt   10   916742.825 ±  65467.820  ops/s
StompEncoderBenchmark.writeStompFrame                0         ELEVEN               true  thrpt   10  1310454.012 ± 100747.490  ops/s
StompEncoderBenchmark.writeStompFrame                0         ELEVEN              false  thrpt   10   679934.001 ±  82168.249  ops/s
StompEncoderBenchmark.writeStompFrame                0         TWENTY               true  thrpt   10   746867.549 ±  68373.269  ops/s
StompEncoderBenchmark.writeStompFrame                0         TWENTY              false  thrpt   10   483316.314 ±  50978.009  ops/s
StompEncoderBenchmark.writeStompFrame               10            ONE               true  thrpt   10  4791698.722 ± 263890.510  ops/s
StompEncoderBenchmark.writeStompFrame               10            ONE              false  thrpt   10  1289877.116 ± 128677.185  ops/s
StompEncoderBenchmark.writeStompFrame               10          THREE               true  thrpt   10  2984662.187 ± 395567.524  ops/s
StompEncoderBenchmark.writeStompFrame               10          THREE              false  thrpt   10  1079028.782 ±  43548.555  ops/s
StompEncoderBenchmark.writeStompFrame               10          SEVEN               true  thrpt   10  1806763.709 ±  59162.209  ops/s
StompEncoderBenchmark.writeStompFrame               10          SEVEN              false  thrpt   10   935274.980 ±  22064.148  ops/s
StompEncoderBenchmark.writeStompFrame               10         ELEVEN               true  thrpt   10  1284172.151 ± 119068.047  ops/s
StompEncoderBenchmark.writeStompFrame               10         ELEVEN              false  thrpt   10   687174.498 ±  30270.916  ops/s
StompEncoderBenchmark.writeStompFrame               10         TWENTY               true  thrpt   10   803843.483 ±  29106.133  ops/s
StompEncoderBenchmark.writeStompFrame               10         TWENTY              false  thrpt   10   502134.552 ±  23653.215  ops/s
StompEncoderBenchmark.writeStompFrame              100            ONE               true  thrpt   10  4337438.694 ± 378524.452  ops/s
StompEncoderBenchmark.writeStompFrame              100            ONE              false  thrpt   10  1289174.213 ±  50640.853  ops/s
StompEncoderBenchmark.writeStompFrame              100          THREE               true  thrpt   10  3232767.156 ± 311934.194  ops/s
StompEncoderBenchmark.writeStompFrame              100          THREE              false  thrpt   10  1115247.028 ±  15683.477  ops/s
StompEncoderBenchmark.writeStompFrame              100          SEVEN               true  thrpt   10  2213147.232 ±  86326.187  ops/s
StompEncoderBenchmark.writeStompFrame              100          SEVEN              false  thrpt   10   901120.188 ±  71344.491  ops/s
StompEncoderBenchmark.writeStompFrame              100         ELEVEN               true  thrpt   10  1238317.714 ±  68148.477  ops/s
StompEncoderBenchmark.writeStompFrame              100         ELEVEN              false  thrpt   10   671336.339 ±  72735.337  ops/s
StompEncoderBenchmark.writeStompFrame              100         TWENTY               true  thrpt   10   754565.791 ±  28574.382  ops/s
StompEncoderBenchmark.writeStompFrame              100         TWENTY              false  thrpt   10   498939.383 ±  38146.118  ops/s
StompEncoderBenchmark.writeStompFrame             1000            ONE               true  thrpt   10  3722594.471 ± 515861.000  ops/s
StompEncoderBenchmark.writeStompFrame             1000            ONE              false  thrpt   10  1265629.633 ±  84113.347  ops/s
StompEncoderBenchmark.writeStompFrame             1000          THREE               true  thrpt   10  2829696.349 ± 172520.267  ops/s
StompEncoderBenchmark.writeStompFrame             1000          THREE              false  thrpt   10  1111454.609 ±  26275.913  ops/s
StompEncoderBenchmark.writeStompFrame             1000          SEVEN               true  thrpt   10  1901506.449 ±  37701.353  ops/s
StompEncoderBenchmark.writeStompFrame             1000          SEVEN              false  thrpt   10   912528.888 ±  46221.215  ops/s
StompEncoderBenchmark.writeStompFrame             1000         ELEVEN               true  thrpt   10  1299674.123 ±  21889.002  ops/s
StompEncoderBenchmark.writeStompFrame             1000         ELEVEN              false  thrpt   10   724527.644 ±   2757.370  ops/s
StompEncoderBenchmark.writeStompFrame             1000         TWENTY               true  thrpt   10   811389.799 ±   2606.626  ops/s
StompEncoderBenchmark.writeStompFrame             1000         TWENTY              false  thrpt   10   504955.449 ±   6737.804  ops/s
StompEncoderBenchmark.writeStompFrame            10000            ONE               true  thrpt   10  3837912.649 ± 380742.919  ops/s
StompEncoderBenchmark.writeStompFrame            10000            ONE              false  thrpt   10  1375544.306 ±   3157.068  ops/s
StompEncoderBenchmark.writeStompFrame            10000          THREE               true  thrpt   10  3224743.448 ± 297369.719  ops/s
StompEncoderBenchmark.writeStompFrame            10000          THREE              false  thrpt   10  1125772.007 ±   4051.498  ops/s
StompEncoderBenchmark.writeStompFrame            10000          SEVEN               true  thrpt   10  2127352.136 ± 106787.777  ops/s
StompEncoderBenchmark.writeStompFrame            10000          SEVEN              false  thrpt   10   934848.418 ±   4564.147  ops/s
StompEncoderBenchmark.writeStompFrame            10000         ELEVEN               true  thrpt   10  1379672.772 ±   8778.640  ops/s
StompEncoderBenchmark.writeStompFrame            10000         ELEVEN              false  thrpt   10   723169.459 ±   2317.767  ops/s
StompEncoderBenchmark.writeStompFrame            10000         TWENTY               true  thrpt   10   802275.113 ±   4155.137  ops/s
StompEncoderBenchmark.writeStompFrame            10000         TWENTY              false  thrpt   10   517604.265 ±   3398.384  ops/s
```
For headers over 256 bytes we get a speedup."
abd5a7d922dadc24bcfc6f3f34802d7de115445d,"Add state in exception message (#10842)

Motivation:
We should add `state` in the exception message of `HttpObjectEncoder` because it makes debugging a little easier.

Modification:
Added `state` in the exception message.

Result:
Better exception message for smooth debugging."
3ac9685580d988a0a70d3eb9c09250689143a7dc,"Use aarch_64 in a consistent way (#10845)


Motivation:

We should use aarch_64 in our classifier / jni libname on aarch64 as  os.detected.arch uses the name. Being non consistent (especially across our different projects) already gave us a lot of trouble in the past.
Let's fix this once for all.

Modifications:

Use aarch_64

Result:

More consistent classifier usage on aarch64"
05093de0d6fe5787447439836e2ca159e79c88bf,"Enforce status code validation in CloseWebSocketFrame (#10846)

Motivation:

According to specification 1006 status code must not be set as a status code in a
Close control frame by the endpoint. However 1006 status code can be
used in applications to indicate that the connection was closed abnormally.

Modifications:

- Enforce status code validation in CloseWebSocketFrame
- Add WebSocketCloseStatus construction with disabled validation
- Add test

Result:

Fixes #10838"
80c28a3c332ad3c557f5853987b3f3d58c80de69,"Fix native image build for the cases when io.netty.util.NetUtil is initialized at run-time (#10799)

Motivation:

In #10630, field substitutions were introduced for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST fields. They were required to allow a native image be built with most of Netty (including NetUtil) initialized at build time.

The substitutions created in #10630 only define getters, so the 3 fields can only be read in a native image.

But when NetUtil is initialized at run-time (this is what happens in #10797), its static initialization block is executed, and this block writes to all 3 fields. As the substitutions do not provide any setters, field stores are not valid, and such builds fail.

Modifications:

- Add netty-testsuite-native-image-client-runtime-init Maven module that builds a native image deferring NetUtil class initialization till run-time; this module is used to demonstrate the problem and verify the problem is gone with the fix
- Add no-op setters to substitutions for NetUtil.LOCALHOST4, NetUtil.LOCALHOST6 and NetUtil.LOCALHOST

Result:

A native image initializing NetUtil at run-time builds successfully.

Fixes #10797"
e3ace04b571ca25851d45bf35230302fa7fdf464,"Update to netty-tcnative 2.0.35.Final (#10850)

Motivation:

There was a new netty-tcnative release

Modifications:

Update to 2.0.35.Final

Result:

Use latest release"
38da45ffe11b74e708c9b575006db8ebcdffb644,[maven-release-plugin] prepare release netty-4.1.55.Final
f57d64f1c75b3032a556fdf57528d191a3e732e2,[maven-release-plugin] prepare for next development iteration
6f2302cd4bd04b32cad2f9663af8a2b04af06c2a,Fix classifier usage in bom
0dd1346c239feeccd9ef5871d71caa79776d6f82,"Removed redundant assignment (#10853)

Motivation:

Found a redundant assignment.

Modification:

Removed the redundant assignment.

Result:

Minor performance improvement."
aba3cc49db630e4e38f05481313665fdb946ad84,"Fixed JavaDoc of LimitingByteInput (#10852)

Motivation:

I found a typo in LimitingByteInput.

Modification:

Fixed the typo in LimitingByteInput

Result:

No typo anymore in LimitingByteInput."
0537170ab530017a54f5ef4bbbc67177c4314f5f,"Fixed a comment in UnpooledDirectByteBuf (#10854)

Motivation:

Found an invalid comment in UnpooledDirectByteBuf.

Modification:

Fixed a comment in UnpooledDirectByteBuf.

Result:

Fixed a comment in UnpooledDirectByteBuf."
b4479353e2485aa2f0293bc748920560c0ddeaf2,"Improve logging in `DnsServerAddressStreamProviders` (#10848)

Motivation:

`DnsServerAddressStreamProviders` tries to load `MacOSDnsServerAddressStreamProvider`
on macOS. However, it doesn't warn users when `MacOSDnsServerAddressStreamProvider`
is not awailable, which may cause incorrect results for DNS resolutions.

Modifications:

- Log at warn level if `MacOSDnsServerAddressStreamProvider` is not found on macOS;
- Log at debug level when `MacOSDnsServerAddressStreamProvider` is loaded and available;

Result:

macOS users are notified when `MacOSDnsServerAddressStreamProvider` is not available."
c0674cff29ae017e9fd144b6728ac0521874e883,"Fix infinite loop (#10855)

Motivation:

To fix the infinite loop parsing a multipart body.

Modifications:

Modified the loop to use the correct variable.

Result:

Multipart bodies will be parsed correctly again."
dd6ef486f42bf23e2fb1f4214f01a0abfa767949,"Workaround possible JDK bug in SSLEngineImpl when using TLSv1.3 that lead to multiple notifications (#10860)


Motivation:

When using the JDKs SSLEngineImpl with TLSv1.3 it sometimes returns HandshakeResult.FINISHED multiple times. This can lead to have SslHandshakeCompletionEvents to be fired multiple times.

Modifications:

- Keep track of if we notified before and if so not do so again if we use TLSv1.3
- Add unit test

Result:

Consistent usage of events"
9560241e1b0441977782ae88769414092ae75bfe,"Removed redundant local variable (#10858)

Motivation:

Found a redundant local variable.

Modification:

Removed the local variable.

Result:
Minor performance improvement."
286176be65cf3aed7d996d33a4c05be0770265d6,"Fix Bundle-NativeCode in MANIFEST file on macOS (#10865)

Motivation:

We did include some extra "" in the Bundle-NativeCode line on macOS.

Modifications:

Remove ""

Result:

Fixes https://github.com/netty/netty/issues/10856"
e8b5aeddef6f342e5e8ca1e03092c7b278da2915,"Fix Bundle-NativeCode in MANIFEST file (#10867)

Motivation:

We used , but should have used ;

Modifications:

Replace , by ;

Result:

Correct manifest"
8ea0d8f41ac5b0b09229a53690cad7febb4332ef,"Don't catch Throwable in InternalLoggerFactory (#10866)


Motivation:

We shouldnt catch Throwable in InternalLoggerFactory as this may hide OOME etc.

Modifications:

Only catch LinkageError and Exception

Result:

Fixes https://github.com/netty/netty/issues/10857"
882c1115683e0cd942e5d9b1961b9bf52d817ecd,"Ensure IovArray is usuable without sun.misc.Unsafe (#10870)

Motivation:

https://github.com/netty/netty/pull/10814 did fix a bug where we did try to call memoryAddress() even tho this is not supported. Unfortunally this fix was only applied for one method and so we missed another method which then could throw an exception when we called memoryAddress()

Modifications:

- Also fix the memoryAddress(offset) method.
_ Adjust unit test to also test this.

Result:

Fixes https://github.com/netty/netty/issues/10813 completely."
1188d8320edb00304847ac6ea760ddb3d2965478,[maven-release-plugin] prepare release netty-4.1.56.Final
a9ec3d86f60c193f73079b4c3d0fbafb460c62fb,[maven-release-plugin] prepare for next development iteration
5c1613df814a408a73b59333c6b36ca74e4f7a26,"Simplify InternalThreadLocalMap (#10872)

Motivation:
I did not see any tangible advantage to the padding.
The only other field that was guarded was a rarely changed object reference to a BitSet.
Without the padding, there is also no longer any use of the inheritance hierarchy.
The padding was also using `long`, which would not necessarily prevent the JVM from fitting the aforementioned object reference in an alignment gap.

Modification:
Move all the fields into the InternalThreadLocalMap and deprecate the stuff we'd like to remove.

Result:
Simpler code.
This resolves the discussion in https://github.com/netty/netty/issues/9284"
7fb62a93b8000c73ad2c40fc22bd02f289f1623a,"Ensure we only register native methods once (#10876)

Motivation:

We need to ensure we only register native methods once as otherwise we may end up in an ""invalid"" state. The problem here was that before it was basically the responsibility the user of transport-native-unix-common to register the methods. This is error prone as there may be multiple users of these on the classpath at the same time.

Modifications:

- Provide a way to init native lib without register the native methods of the provided classes. This is needed to be able to re-use functionality which is exposed to our internal native code
- Use flatten plugin to correctly resolve classifier and so have the correct dependency
- Call Unix.* method to ensure we register the methods correctly once
- Include native lib as well in the native jars of unix-common

Result:

Be able to have multiple artifacts of the classpath that depends on the unix-common. Related to https://github.com/netty/netty-incubator-transport-io_uring/issues/15"
9c0c996729513c0eaf1d48d40ef6a6b219ee79b8,"MQTT: foolproof SUBSCRIBE QoS encoding (#10874)

Motivation:

If the MQTT client specifies Subscribe Options parameters only available in MQTT v5 and tries to encode the message as MQTT v3 then an invalid QoS value is encoded

Modification:

Check MQTT version when encoding SUBSCRIBE message options, if it's 3.1 or 3.1.1 - only encode QoS, skip other options.

Result:

MqttEncoder produces a valid SUBSCRIBE message even if the client has specified options not available in the current MQTT version."
3e8e52725bbd9d999873880956bc8f241372daa8,"Use netty-jni-util via maven central (#10877)

Motivation:

netty-jni-util is now also hosted on maven central. Let's use it

Modifications:

Adjust plugins to just unpack netty-jni-util and use it

Result:

Be able to use what is in the maven cache for netty-jni-util"
ab8c4f22c6bc11b7082fddfc6890fd02f30d5524,"Improve performance of HPACK static table lookup (#10840)


Motivation:

HPACK static table is organized in a way that fields with the same
name are sequential. Which means when doing sequential scan we can
short-circuit scan on name mismatch.

Modifications:

* `HpackStaticTable.getIndexIndensitive` returns -1 on name mismatch
rather than keep scanning.
* `HpackStaticTable` statically defined max position in the array
where name duplication is possible (after the given index there's
no need to check for other fields with the same name)
* Benchmark for different lookup patterns

Result:

Better HPACK static table lookup performance.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
95b96126c3e8d54db5c566d43511d438a389d5dc,"Use Github workflows for CI (#10879)

Motivation:

We should just use GitHub Actions for the CI

Modifications:

- Adjust docker / docker compose files 
- Add different workflows and jobs to deploy and build the project

Result:

Don't depend on external CI services"
7bf2ffac35041b4cf3c270894b9fa1ceadab7301,Fix deploy config
87f5cc5fa2e77efbe57f04d6aa62bc06a7f96904,Fix non leak build condition
2b1785458b2867645270d3ae284ba35157a2818d,"Change switch to if (#10880)

Motivation:
switch is used when we have a good amount of cases because switch is faster than if-else. However, we're using only 1 case in switch which can affect performance.

Modification:
Changed switch to if.

Result:
Good code."
cd33d56f45c760b33015e59c7f445bad5bed33eb,Only use build and deploy workflows for 4.1 for now
11d2ce76148f79cb6ee231e05402be7c188cc91b,"Add fallback for android when trying to access the filedescriptor via JNI (#10882)

Motivation:

Android seems to use a different field name so we should also try to access it with the name used by android.

Modifications:

Try first fd and if this fails try descriptor as field name

Result:

Workaround for android."
0af6031110d205dbc53de3722977336246626c9e,"Add deploy job for cross compiled aarch64 (#10883)

Motivation:

We should also deploy snapshots for our cross compiled native jars.

Modifications:

- Add job and docker files for deploying cross compiled native jars
- Ensure we map the maven cache into our docker containers

Result:

Deploy aarch64 jars and re-use cache"
900a85c6882d16b5623b3f0c757b034121ffe1d6,Use correct docker-compose file to deploy cross compiled artifacts
33833dec26c48a0511cf8709b2ebc9703151d50d,Use correct docker-compose task to deploy for cross compiled artifacts
9da336f2fc4d5e7aa761191c3eb5edff334c03c7,"Split pr and normal build (#10884)

Motivation:

We should better use seperate workflows for PR and normal builds

Modifications:

- Split workflows
- Better cache reuse

Result:

Cleanup"
01d44ff592e0b3a50527e0c65df8812f6923d378,"Add ConnAck message builder method to handle the creation of related properties. (#10812)

Motivation:
The CONNACK message builder `ConnAckBuilder` doesn't provide a smooth way to assign the message properties. This PR try to provide an simpler way to create them, in a lazy way.

Modification:
This PR permit to store properties in the ConnAck message, collecting them and inserting during the build phase. The syntax this PR introduces is:
```java
 MqttMessageBuilders.connAck().properties(new MqttMessageBuilders.PropertiesInitializer<MqttMessageBuilders.ConnAckPropertiesBuilder>() {
        @Override
        public void apply(MqttMessageBuilders.ConnAckPropertiesBuilder builder) {
            builder.assignedClientId(""client1234"");
            builder.userProperty(""custom_property"", ""value"");
         }
 }).build()
```
The name of the properties are defined in the `ConnAckPropertiesBuilder` so that is can be easily used by autocompletion tools.

Result:
This PR adds the builder class `ConnAckPropertiesBuilder`which is used by newly introduced method `properties` inside the message builder class `ConnAckBuilder`."
c10606ef2a07e21d4714b0a9512ee587b778d221,"Only deploy snapshots for one arch

Motivation:

We need to find a way to deploy SNAPSHOTS for different arch with the same timestamp. Otherwise it will cause problems.

See https://github.com/netty/netty/issues/10887

Modification:

Skip all other deploys then x86_64

Result:

Users are able to use SNAPSHOTS for x86_6"
9145f285860f1cf9f3196affb3dedbe748996c8f,"Use maven cachen when running analyze job (#10888)

Motivation:

To prevent failures to problems while downloading dependencies we shoud cache these

Modifications:

Add maven cache

Result:

No more failures due problems while downloading dependencies"
1a708ac17248ad91f83e6b8a05e3851aaabc92bf,"Also include one PR job that uses boringssl (#10886)


Motivation:

When validating PRs we should also at least run one job that uses boringssl

Modifications:

- Add job that uses boringssl
- Cleanup docker compose files
- Fix buffer leak in test

Result:

Also run with boringssl when PRs are validated"
78fcd5cf8f25cced4f0929e6d4d17def5beca66a,"Use matrix for job configurations (#10889)

Motivation:

We can use the matrix feature to define our jobs. This reduces a lot of config

Modification:

Use job matrix

Result:

Easier to maintain"
4f6e62d50c434509a7c42e1080ad0c6d6795c63d,"Avoid unsynchronized access to scheduledTaskQueue in GlobalEventExecutor (#10890)

Motivation:

A race detector discovered a data race in GlobalEventExecutor present in
netty 4.1.51.Final:

```
  Write of size 4 at 0x0000cea08774 by thread T103:
    #0 io.netty.util.internal.DefaultPriorityQueue.poll()Lio/netty/util/internal/PriorityQueueNode; DefaultPriorityQueue.java:113
    #1 io.netty.util.internal.DefaultPriorityQueue.poll()Ljava/lang/Object; DefaultPriorityQueue.java:31
    #2 java.util.AbstractQueue.remove()Ljava/lang/Object; AbstractQueue.java:113
    #3 io.netty.util.concurrent.AbstractScheduledEventExecutor.pollScheduledTask(J)Ljava/lang/Runnable; AbstractScheduledEventExecutor.java:133
    #4 io.netty.util.concurrent.GlobalEventExecutor.fetchFromScheduledTaskQueue()V GlobalEventExecutor.java:119
    #5 io.netty.util.concurrent.GlobalEventExecutor.takeTask()Ljava/lang/Runnable; GlobalEventExecutor.java:106
    #6 io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run()V GlobalEventExecutor.java:240
    #7 io.netty.util.internal.ThreadExecutorMap$2.run()V ThreadExecutorMap.java:74
    #8 io.netty.util.concurrent.FastThreadLocalRunnable.run()V FastThreadLocalRunnable.java:30
    #9 java.lang.Thread.run()V Thread.java:835
    #10 (Generated Stub) <null>

  Previous read of size 4 at 0x0000cea08774 by thread T110:
    #0 io.netty.util.internal.DefaultPriorityQueue.size()I DefaultPriorityQueue.java:46
    #1 io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run()V GlobalEventExecutor.java:263
    #2 io.netty.util.internal.ThreadExecutorMap$2.run()V ThreadExecutorMap.java:74
    #3 io.netty.util.concurrent.FastThreadLocalRunnable.run()V FastThreadLocalRunnable.java:30
    #4 java.lang.Thread.run()V Thread.java:835
    #5 (Generated Stub) <null>
```

The race is legit, but benign. To trigger it requires a TaskRunner to
begin exiting and set 'started' to false, more work to be scheduled
which starts a new TaskRunner, that work then needs to schedule
additional work which modifies 'scheduledTaskQueue', and then the
original TaskRunner checks 'scheduledTaskQueue'. But there is no danger
to this race as it can only produce a false negative in the condition
which causes the code to CAS 'started' which is thread-safe.

Modifications:

Delete problematic references to scheduledTaskQueue. The only way
scheduledTaskQueue could be modified since the last check is if another
TaskRunner is running, in which case the current TaskRunner doesn't
care.

Result:

Data-race free code, and a bit less code to boot."
42145902a72da415c8505042285802c592ceb874,"Correctly deploy artifacts that are build on different archs (#10893)

Motivation:

We need to take special care when deploying snapshots as we need to generate the jars in multiple steps

Modifications:

- Use the nexus staging pluging to stage jars locally in multiple steps
- Add extra job that will merge these staged jars and deploy these

Result:

Fixes https://github.com/netty/netty/issues/10887"
3bfe9d72428a4bf0b6beaada1ec3d7552953176f,"Dont use cron for PRs

Motivation:

It doesnt make sense to use cron for PRs

Modifications:

Remove cron config

Result:

Cleanup"
3a058d217285e4c5cd420d808742dfe2ece40c64,"We run all combinations when validate the PR, let's just use one type for normal push

Motivation:

Let us just only use one build config when building the 4.1 branch.

Modifications:

As we already do a full validation when doing the PR builds we can just only use one build config for pushes to the ""main"" branches

Result:

Faster build times"
c5ffa293acde1b3da1bf363aa56e1740dbbd9549,"Update README

Motivation:

We can add some status badge and also should clarify requirements.

Modifictations:

- Add status badge
- Clarify requirements

Result:

Cleanup docs"
08681a817d66e5a1a443ccb2b2b0e3d4a18d474b,"Add PushPromise and Priority Frame support in Http2FrameCodec (#10765)

Motivation:
Right now, we don't have to handle Push Promise Read in `Http2FrameCodec`. Push Promise is one of the key features of HTTP/2 and we should support it in our `Http2FrameCodec`.

Modification:
Added `Http2PushPromiseFrame` and `Http2PushPromiseFrame` to handle Push Promise and Promise Frame.

Result:
Fixes #10748"
249392fe123bebf71172e5c876a950b5826bf8a8,"Update action-docker-layer-caching (#10900)

Motivation:

We are three releases behind.

Modifications:

Update to latest version

Result:

Use up-to-date action-docker-layer-caching version"
3043ebb21ca99a950517b2edad1d3d1a1dded2c4,"Ensure Checkstyle suppression for dependency-reduced-pom.xml on Windows (#10899)

Motivation:

`mvn package` on Windows fails if there are some `dependency-reduced-pom.xml` files generated by the previous build.
`mvn clean package` does not help because it does not remove those files at the clean phase.

Modifications:

Use the correct file pattern for the suppression filters.

Result:

Following `mvn package` runs well on Windows."
0dc246eb129796313b58c1dbdd674aa289f72cad,"Update BouncyCastle Libraries (#10906)

Motivation:
New versions of `Bouncy Castle` libraries are out and we should upgrade to them.

Modification:
Upgraded all `Bouncy Castle` libraries to the latest version.

Result:
The latest versions of `Bouncy Castle` libraries.

Fixes #10905."
3f043859191a0699c9475d0c7c72ebd6a16aa54a,"Fix url in README.md (#10915)

Motivation:

We had a typo in the markdown

Modification:

Fix typo

Result:

Corect markdown"
cbebad8417854f6294a3ed9c4b83171e3dbe035c,"We need to ensure we always drain the error stack when a callback throws (#10920)

Motivation:

We need to ensure we always drain the error stack when a callback throws as otherwise we may pick up the error on a different SSL instance which uses the same thread.

Modifications:

- Correctly drain the error stack if native method throws
- Add a unit test which failed before the change

Result:

Always drain the error stack"
e01f80ec0a55750099a2f32b693b210ab5d5ecd5,"Update to netty-tcnative 2.0.36.Final (#10923)

Motivation:

Update to latest netty-tcnative release

Modifications:

Update version

Result:

Use latest version"
b016568e21360c8c48cada8331e2d553a4fef7b5,[maven-release-plugin] prepare release netty-4.1.57.Final
c6b894d03dddac1adb693ccdc14ab06eb7357fe1,[maven-release-plugin] prepare for next development iteration
d58ce7a151f9b87e62f74772c570774ac758f7c4,"Revert ""Ensure we only register native methods once (#10876)"" (#10928)

Motivation:

This reverts commit 7fb62a93b8000c73ad2c40fc22bd02f289f1623a as it broke native loading in some cases due maven dependencies.

Modification:

Revert the commit.

Result:

Native loading works again"
10b03e65f19cd810f632b20a55d4ac6e2b155338,[maven-release-plugin] prepare release netty-4.1.58.Final
a137ce204264e0b7411c5aa853e4459291e75b36,[maven-release-plugin] prepare for next development iteration
775b36ee66f8fe646868cb07e424882b25c41737,"Verify we can load native modules and add job that verifies on aarch64 as well (#10933)


Motivation:

As shown in the past we need to verify we actually can load the native as otherwise we may introduce regressions.

Modifications:

- Add new maven module which tests loading of native modules
- Add job that will also test loading on aarch64

Result:

Less likely to introduce regressions related to loading native code in the future"
5b41f3d25b9709b9f4c779938aa7a4b6550b727f,"Ensure native methods for unix-native-common are only registered once. (#10932)


Motiviation:

We need to ensure we only register the methods for unix-native-common once as otherwise it may have strange side-effects.

Modifications:

- Add extra method that should be called to signal that we need to register the methods. The registration will only happen once.
- Adjust code to make use of it.

Result:

No more problems due incorrect registration of these methods."
c509a477efd4a0c4efcc13e3a91b3a5938948718,"Ensure we also build dependent modules for deployments (#10936)

Motivation:

We need to ensure we also build the modules we depend on as otherwise we may not be able to resolve the dependencies correctly

Modifications:

- Add -am when calling maven

Result:

Deployment works all the time"
5b699b722c25a3c34656fc8bbb8e36bee27a5244,"Allow blocking calls in UnixResolverDnsServerAddressStreamProvider#parse (#10935)


Motivation:

Internally UnixResolverDnsServerAddressStreamProvider#parse calls FileInputStream.read(...)
when parsing the etcResolverFiles.
This will cause the error below when BlockHound is enabled
reactor.blockhound.BlockingOperationError: Blocking call! java.io.FileInputStream#readBytes
     	at java.io.FileInputStream.readBytes(FileInputStream.java)
     	at java.io.FileInputStream.read(FileInputStream.java:255)

Modifications:

- Add whitelist entry to BlockHound configuration
- Add test

Result:

Fixes #10925"
bba0017d6e9f0fcf87284fd5618c153f45d8a9da,"Update the javadocs on FastThreadLocal (#10942)

Motivation: The writing was unclear.
Modification: Clarified the documentation.
Result: No more ambiguity about what FTL.remove() does.

Fixes #10914"
9a02832fdb10afbc09f144a462d604176fb11049,"Implement SWAR indexOf byte search (#10737)

Motivation:

Faster indexOf

Modification:

Create generic SWAR indexOf that any ByteBuf implementation can use

Result:

Fixes #10731"
342f52e8130085648b676bfb86973310ebe6d03d,"Let script fail if one command fail (#10945)

Motivation:

We should use `set -e` to ensure we fail the script if one command fails.

Modifications:

Add set -e to script

Result:

Fail fast"
94646ac546a72f58bc2221018b0d99a79f15f4b2,"Use GracefulShutdown when stream space is exhausted (#10946)

Motivation:

We should use GracefulShutdown when we try to create a stream and fail it because the stream space is exhausted as we may still want to process the active streams.

Modifications:

- Use graceful shutdown
- Add unit test

Result:

More graceful handling of stream creation failure due stream space exhaustation"
4d43f16bb9ccb10f575dcae432d25f6796b9886c,"Make native loading logging less confusing (#10944)


Motivation:

We produced a lot of noise during loading native libraries as we always included the stacktrace if we could not load by one mechanism. We should better just not include the stacktrace in the debugging logging if one mechanism fails. We will log all the stacks anyway when all of the mechanisms fail.

Modifications:

Make logging less aggressive

Result:

Less confusing behaviour for the end-user"
59b3831bbc786621ee2eb61fe4ddb9f1fa25c91c,"Correctly handle fragmentation in JdkZlibDecoder (#10948)

Motivation:

We had multiple bugs in JdkZlibDecoder which could lead to decoding errors when the data was received in a fragmentated manner.

Modifications:

- Correctly handle skipping of comments
- Correctly handle footer / header decoding
- Add unit test that verifies the correct handling of fragmentation

Result:

Fixes https://github.com/netty/netty/issues/10875"
8cae1ed959b252a812c7606bdb5c97d51fdaf07b,"Ignore priority frames for non existing streams and so prevent a NPE (#10943)


Motivation:

https://github.com/netty/netty/pull/10765 added support for push promise and priority frames when using the Http2FrameCodec. Unfortunally it didnt correctly guard against the possibility to receive a priority frame for an non-existing stream, which resulted in a NPE

Modifications:

- Ignore priority frame for non existing stream
- Correctly implement equals / hashcode for DefaultHttp2PriorityFrame
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/10941"
ae3eebf11b2f8700b3d5aea87af4ace0372f9f25,"Mark some methods as protected to make it easier to write own SslContext implementations (#10953)

Motivation:

We should expose some methods as protected to make it easier to write custom SslContext implementations.
This will be reused by the code for https://github.com/netty/netty-incubator-codec-quic/issues/97

Modifications:

- Add protected to some static methods which are useful for sub-classes
- Remove some unused methods
- Move *Wrapper classes to util package and make these public

Result:

Easier to write custom SslContext implementations"
42ba43357671443613974e787fa6b9b28e02fdd2,"Override ALPN methods on ReferenceCountedOpenSslEngine (#10954)

Motivation:

We should override the get*ApplicationProtocol() methods in ReferenceCountedOpenSslEngine to make it easier for users to obtain the selected application protocol

Modifications:

Add missing overrides

Result:

Easier for the user to get the selected application protocol (if any)"
41e79835f20719ca368b23b7ebbbbc96e6b6b666,"Move OpenSsl*X509Certificate to util package and rename it (#10955)

Motivation:

Creating certificates from a byte[] while lazy parse it is general useful and is also needed by https://github.com/netty/netty-incubator-codec-quic/pull/141

Modifications:

Move classes, rename these and make them public

Result:

Be able to reuse code"
4fbbcf8702a98f4477cb0c733eab736eca988979,"Merge WebSocket extensions, close #10792 (#10951)

Motivation:

We currently append extensions to the user defined ""sec-websocket-extensions"" headers. This can cause duplicated entries.

Modifications:

* Replace existing `WebSocketExtensionUtil#appendExtension` private helper with a new `computeMergeExtensionsHeaderValue`. User defined parameters have higher precedence.
* Add tests (existing method wasn't tested)
* Reuse code for both client and server side (code was duplicated).

Result:

No more duplicated entries when user defined extensions overlap with the ones Netty generated."
60780c647e1382eca8f3dc862d0c5e2819309069,"Revert ""Merge WebSocket extensions, close #10792 (#10951)""

This reverts commit 4fbbcf8702a98f4477cb0c733eab736eca988979."
f54bf7aeb06c6a4cf9350482f7814c3fb9c4fd82,"Allow to use int while build MqttMessageIdVariableHeader (#10930)

Motivation:

Exception occurs in the MQTT message builder class (`io.netty.handler.codec.mqtt.MqttMessageBuilders`) when trying to create a message with packetId > 32767

Modification:

-add method that takes int
- deprecate old methods that take short. 

Result:


Fixes #10929 ."
ccd01934f5a30c62f352fe888d45dbf7ad2352c8,"Merge WebSocket extensions, close #10792 (#10956)

Motivation:

We currently append extensions to the user defined ""sec-websocket-extensions"" headers. This can cause duplicated entries.

Modifications:

* Replace existing `WebSocketExtensionUtil#appendExtension` private helper with a new `computeMergeExtensionsHeaderValue`. User defined parameters have higher precedence.
* Add tests (existing method wasn't tested)
* Reuse code for both client and server side (code was duplicated).

Result:

No more duplicated entries when user defined extensions overlap with the ones Netty generated."
16f2a5e49f7bc018d3a0c3d3a8f090749229f301,"Don't use Fixed ports for UDP test (#10961)

Motivation:
If the given port is already bound, the PcapWriteHandlerTest will sometimes fail.

Modification:
Use a dynamic port using `0`, which is more reliable

Result:
Less Flaky"
305cb1719ac20572de0482679f23dbf75785e189,"Use action to report unit test errors (#10966)

Motivation:

To make it easier to understand why the build fails lets use an action that will report which unit test failed

Modifications:

- Replace custom script with action-surefire-report

Result:

Easier to understand test failures"
1e87c711b4404299fe140eabffa9be3e2ada6565,"Ensure we create a copy of the attributes and options when bootstrap a channel (#10965)

Motivation:

We need to ensure we copy the attributes and options when bootstrap the channel as otherwise we may change the underlying Entry.
This is similar to what was reported in https://github.com/netty/netty-incubator-codec-quic/issues/152.

Modifications:

- Do a copy and re-use methods
- Add unit tests

Result:

Don't affect attributes / options of channels that are already bootstrapped"
b743e3ab42accc84abd56453b2752b63ba8744b2,"Update dependency declaration in all pom.xml (#10967)

Motivation:

We did have the architecture hardcoded in the dependency which is not correct as this will let the build fail on Applie Silicion (m1). Also we did miss some dependencies on other BSDs

Modifications:

- Fix classifier
- Add missing dependencies

Result:

Be able to build on Apple Silicon (m1)"
147ccb6213d7ba256f899ff4db48128475b6af33,"Use custom script to check for build failures (#10968)

Motivation:

It turns out we can't use the action to check for build failures as it can't be used when a PR is done from a fork. Let's just use our simple script.

Modifications:

- Replace action with custom script

Result:

Builds for PRs that are done via forks work again."
c932e1d6526bfda4f30f1f27cc66d01007a86e2e,"Ignore SocketShutdownOutputBySelfTest.testWriteAfterShutdownOutputNoWritabilityChange (#10970)

Motivation:

The testWriteAfterShutdownOutputNoWritabilityChange() failed a few times on the CI randomly. Let's skip it for now while we investigate and see if there is anything we can do to make the test less flaky on the CI.

Modifications:

Add @Ignore on the testWriteAfterShutdownOutputNoWritabilityChange method

Result:

Less flaky CI"
df10dfbb49f566e12265dfc0175f2bdac241518c,"Correctly filter out TLSv1.3 ciphers if TLSv1.3 is not enabled (#10919)


Motivation:

We didnt correctly filter out TLSv1.3 ciphers when TLSv1.3 is not enabled.

Modifications:

- Filter out ciphers that are not supported due the selected TLS version
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/10911

Co-authored-by: Bryce Anderson <banderson@twitter.com>"
5c522916f796aef7a9bf7a7b234bfb81232b52d0,"Fix possible SEGV when using native dns resolver on macos (#10971)

Motivation:

We should add some more NULL checks to ensure we not SEGV in some cases

Modifications:

Add more NULL checks

Result:

More robust implementation"
3353bc115217ccb292c95680da063212ae94d533,"Revert ""Enable SSL_MODE_ENABLE_FALSE_START if jdkCompatibilityMode is false (#10407)"" (#10980)

Motivation:

TLS_FALSE_START slightly changes the ""flow"" during handshake which may cause suprises for the end-user. We should better disable it by default again and later add a way to enable it for the user.

Modification:

This reverts commit 514d349e1fa5a057e815a5f3ac6a7e3f3aa19784.

Result:

Restore ""old flow"" during TLS handshakes."
a9a3e2cef1e2ed35b88dce5f5c363158ccb956c7,"Clarify who is responsible closing the InputStream once SslContext w… (#10983)


Motivation:

It was not 100% clear who is responsible calling close() on the InputStream.

Modifications:

Clarify javadocs.

Result:

Related to https://github.com/netty/netty/issues/10974

Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
ab8b8ae81b24439ff94085f3f4bd060c172c1712,"Introduce SslContextOption which can be used for ""optional"" features … (#10981)


Motivation:

Some of the features we want to support can only be supported by some of the SslContext implementations. We should allow to configure these in a consistent way the same way as we do it with Channel / ChannelOption

Modifications:

- Add SslContextOption and add builder methods that take these
- Add OpenSslContextOption and define two options there which are specific to openssl

Result:

More flexible configuration and implementation of SslContext"
6ce15414ff35f4c5b7987f13af82689e759306a9,"Revert HttpPostMultipartRequestDecoder and HttpPostStandardRequestDecoder to e5951d46fc89db507ba7d2968d2ede26378f0b04 (#10989)

Motivation:

The changes introduced in 1c230405fd4f7c445773b662beeccebc18f85f98 did cause various issues while the fix itself is not considered critical. For now it is considered the best to just rollback and investigate more.

Modifications:

- Revert changes done in 1c230405fd4f7c445773b662beeccebc18f85f98 (and later) for
the post decoders.
- Ensure we give memory back to the system as soon as possible in a safe manner

Result:

Fixes https://github.com/netty/netty/issues/10973"
5460ae7d54e7c523c7bba701d02860fa5593a297,"Bump ant from 1.9.15 to 1.10.9 (#10990)

Bumps ant from 1.9.15 to 1.10.9.

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
d0bcf44445f8692bae6d5a0868f6d3fbe39daf8d,"Fix memory release failure when ""maxNumElems == 1"" of PoolSubpage (#10988)

Motivation:

when customer need large of 'byteBuf.capacity' in [7168, 8192], the size of 'chunk.subpages' may be inflated when large of byteBuf be released, not consistent with other 'byteBuf.capacity'

Modification:

when maxNumElems == 1 need consider remove from pool

Result:

Fixes #10896. 

Co-authored-by: zxingy <zxingy@servyou.com.cn>"
d943d11eb065a067784f3acfccca8758d2397f01,"DecodeHexBenchmark is too branch-predictor friendly (#9942)


Motivation:

DecodeHexBenchmark needs to be less branch-predictor friendly
to mimic the ""real"" behaviour while decoding

Modifications:

DecodeHexBenchmark uses a larger sets of inputs, picking them at
random on each iteration and the benchmarked method is made !inlineable

Result:

DecodeHexBenchmark is more trusty while showing the performance
difference between different decoding methods"
73286d5d5778cf6a6f3f712b8d190e111fdcf101,"Publish test results after PR run (#11002)

Motivation:

To make it easier to understand why a build failed let us publish the rest results

Modifications:

Use a new workflow to be able to publish the test reports

Result:

Easier to understand why a PR did fail"
c9a8d1d6bd1dbd4b6903af5c4b48fe7971f8c198,Fix test reports name
8f397e29e3ee0b8a04aa8ccb99bf5f092dd3dd1b,"Update to latest os-maven-plugin (#11003)

Motivation:

A new version of the os-maven-plugin was released

Modifications:

Update to latest version

Result:

Use latest version"
c735357bf29d07856ad171c6611a2e1a0e0000ec,"Use Files.createTempFile(...) to ensure the file is created with proper permissions

Motivation:

File.createTempFile(String, String)` will create a temporary file in the system temporary directory if the 'java.io.tmpdir'. The permissions on that file utilize the umask. In a majority of cases, this means that the file that java creates has the permissions: `-rw-r--r--`, thus, any other local user on that system can read the contents of that file.
This can be a security concern if any sensitive data is stored in this file.

This was reported by Jonathan Leitschuh <jonathan.leitschuh@gmail.com> as a security problem.

Modifications:

Use Files.createTempFile(...) which will use safe-defaults when running on java 7 and later. If running on java 6 there isnt much we can do, which is fair enough as java 6 shouldnt be considered ""safe"" anyway.

Result:

Create temporary files with sane permissions by default."
97d044812dc84288ea2c44c0862c5b1c26cb5b2d,[maven-release-plugin] prepare release netty-4.1.59.Final
411f76d3ad8c8e9ec4df2e7182df1df6db808e51,[maven-release-plugin] prepare for next development iteration
8562c43b36e955a11ac7c2acd92ad803813e7f6a,"Update the java version that is used in the docker file (#11007)

Motivation:

Jabba does not contain version 1.8 anymore

Modifications:

Use some java version that exists

Result:

Builder the docker image from scratch work again"
ecd7dc3516b5a9fc612330f2dd617576569a256b,"Enable stateless resumption for TLSv1.3 by default when using OpenSSL / BoringSSL (#10997)


Motivation:

At the moment we always set SSL_OP_NO_TICKET when building our context. The problem with this is that this also disables resumption for TLSv1.3 in BoringSSL as it only supports stateless resumption for TLSv1.3 which uses tickets.
We should better clear this option when TLSv1.3 is enabled to be able to resume sessions. This is also inline with the OpenJDK which enables this for TLSv1.3 by default as well.

Modifications:

Check for enabled protocols and if TLSv1.3 is set clear SSL_OP_NO_TICKET.

Result:

Be able to resume sessions for TLSv1.3 when using BoringSSL."
83895f0f7a784225333c99a194009e7f9b7c7406,"Add a profile for debugging tests that run from Maven (#11011)

Motivation:
In some cases, Intellij struggles to recreate the build and test
environment/configuration that Maven produces, and this can lead to tests
behaving differently when run from Intellij compared to when they run from
Maven.
This in turn can make debugging those tests harder.

Modification:
Add a profile to the Maven build, that will add the necessary command line
arguments for attaching the Intellij debugger to tests that are executed from
Maven.

Result:
It is now possible to debug the tests that Maven is running, from Intellij,
by enabling the -PijDebug Maven profile."
ecc12903c5ede4afdfd0b62045898a08112f26b0,"Revert test debugging flags and update surefire/failsafe (#11016)

* Revert ""Add a profile for debugging tests that run from Maven (#11011)""

This reverts commit 83895f0f

The same functionality is already natively available in surefire, by adding the `-Dmaven.surefire.debug` flag to Maven.

* Update surefire/failsafe version

These new versions copes better when our tests prints to STDOUT, and disturbs the progress processing that these plugins do."
bb9370f2a27465f2933b34e73d5d69e3c260cb9f,"Simplity some code (#11000)

Motivation:

There was some code that could be simplified.

Modification:

Simplify code.

Result:

Code cleanup"
6808d7582a06dfb5038ac1dd8fa58190ab359d19,"Allow blocking calls when parsing etcResolver/hosts files (#11009)

Motivation:

When etcResolver/hosts files are parsed, FileInputStream.read(...) is internally called by

- UnixResolverDnsServerAddressStreamProvider#parseEtcResolverSearchDomains
- UnixResolverDnsServerAddressStreamProvider#parseEtcResolverOptions
- HostsFileParser#parse

This will cause the error below when BlockHound is enabled

reactor.blockhound.BlockingOperationError: Blocking call! java.io.FileInputStream#readBytes
     	at java.io.FileInputStream.readBytes(FileInputStream.java)
     	at java.io.FileInputStream.read(FileInputStream.java:255)

Modifications:

- Add whitelist entries to BlockHound configuration
- Fix typos in UnixResolverDnsServerAddressStreamProvider
- Add tests

Result:

Fixes #11004"
12b5ef545a8b5afeee76cde3b1a7068ce27716af,"Disable flaky test (#11017)

Motivation:

The testGlobalWriteThrottle is flaky and failed our build multiple times now. Lets disable it for now until we had time to investigate

Modifications:

Disable flaky test

Result:

Less failures during build"
b68dcd5c47c7299f764904f507370c1b90ac247c,"Upgrade graalvm version to the latest version (#11012)

Motivation:
The current netty's graalvm dependency version is too low, so you need to upgrade the plugin

Modification:
Upgrade Graalvm version to the latest version, please review this pr, thank you

Result:

Use up-to-date version.

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
a98293f08403961db8bf3eb8ba66a21cb86ecf08,"Add workflow to cut releases (#11019)

Motivation:

Doing releases manually is error-prone, it would be better if we could do it via a workflow

Modification:

- Add workflow to cut releases
- Add related scripts

Result:

Be able to easily cut a release via a workflow"
9cac18687d15be113cf869426f4bd1aca804b6b0,"Fix link in javadoc (#11022)

Motivation:

There was an incorrect link in the javadoc

Modification:

Fix link

Result:

Doc cleanup"
56adab2743e90175c958c1fb0ce8857a851e02ea,"TCP Fast Open for clients (#11006)

Support TCP Fast Open for clients and make SslHandler take advantage

Motivation:
- TCP Fast Open allow us to send a small amount of data along side the initial SYN packet when establishing a TCP connection.
- The TLS Client Hello packet is small enough to fit in there, and is also idempotent (another requirement for using TCP Fast Open), so if we can save a round-trip when establishing TLS connections when using TFO.

Modification:
- Add support for client-side TCP Fast Open for Epoll, and also lowers the Linux kernel version requirements to 3.6.
- When adding the SslHandler to a pipeline, if TCP Fast Open is enabled for the channel (and the channel is not already active) then start the handshake early by writing it to the outbound buffer.
- An important detail to note here, is that the outbound buffer is not flushed at this point, like it would for normal handshakes. The flushing happens later as part of establishing the TCP connection.

Result:
- It is now possible for clients (on epoll) to open connections with TCP Fast Open.
- The SslHandler automatically detects when this is the case, and now send its Client Hello message as part of the initial data in the TCP Fast Open flow when available, saving a round-trip when establishing TLS connections.

Co-authored-by: Colin Godsey <crgodsey@gmail.com>"
080d69137f94424b3fbfa0eeab6ed953dd1fbd8e,"Simplify `flushAtEnd` flag computation in `SslHandler#handlerAdded` (#11025)

Motivation:

The `!fastOpen` part of `active || !fastOpen` is always false.

Modification:

- Remove `!fastOpen` and keep only `active` as a `flushAtEnd` flag for
`startHandshakeProcessing`;
- Update comment;

Result:

Simplified `flushAtEnd` flag computation in `SslHandler#handlerAdded`."
5d012954fd61a722090b0637aa109595659eb927,"Avoid letting ipv6 addresses join ipv4 groups (#11015)

Motivation:

#10995 

when `io.netty.channel.unix.Socket` is ipv6 and join a multicast group with ipv4 address will cause `io.netty.channel.ChannelException: setsockopt() failed: Invalid argument` (at least in `Linux centos.dev 4.18.0-240.10.1.el8_3.x86_64 #1 SMP Mon Jan 18 17:05:51 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux`)


Modification:

check if target group address is ipv6 before call  `io.netty.channel.epoll.LinuxSocket#joinGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)` 

I'm not sure if this modification is currect, but i checked source code of java NIO

```
Java_sun_nio_ch_Net_canJoin6WithIPv4Group0(JNIEnv* env, jclass cl)
{
#if defined(__APPLE__)
    /* IPV6_ADD_MEMBERSHIP can be used to join IPv4 multicast groups */
    return JNI_TRUE;
#else
    /* IPV6_ADD_MEMBERSHIP cannot be used to join IPv4 multicast groups */
    return JNI_FALSE;
#endif
}
```
seems ipv6 address can't join ipv4 group except osx

Result:

test on `Linux 3.10.0-514.el7.x86_64 #1 SMP Tue Nov 22 16:42:41 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux` exception  ` setsockopt() failed: Invalid argument` has fixed

Fixes #10995"
b0ec37d686898161583be692510dc2fb25f8ef25,"Fail the the finish_release.sh script if the tag already exists locally

Motivation:

We should fail the script if the tag already exists locally to ensure we really deploy the right code

Modifications:

Check if the tag already exists and if so print an error and exit

Result:

No risks to deploy wrong code as part of the release"
fe041e8e438f7e3f2e6f94de036fba06b123e3d7,"Close and release the staging repository at the end

Motivation:

We can just close and release the staging repository at the end and so remove the extra manual steps

Modification:

Execute extra goals for close and release

Result:

Less manual actions needed for release"
329dae1ec5aa26908f14cdd067b6f4f744b1132c,"Fix incorrect comment in code (#11029)

Motivation:
Comment on method is outdated / incorrect.

Modification:
Adjust comment

Result:
Correct docs"
bd8a337e992dbe9e63a5f237424ff08d695a2a7d,"Propagate SSLException to the Http2StreamChannels (#11023)

Motivation:

When TLSv1.3 is used (or TLS_FALSE_START) together with mTLS the handshake is considered successful before the server actually did verify the key material that was provided by the client. If the verification fails we currently will just close the stream without any extra information which makes it very hard to debug on the client side.

Modifications:

- Propagate SSLExceptions to the active streams
- Add unit test

Result:

Better visibility into why a stream was closed"
28d4154fffc9c51f73b5969c64d74ca17ca4baba,"Fix hash collision handling in DefaultHeaders iterator remove (#11028)

Motivation:
If two different headers end up in the same hash bucket, and you are iterating the header that is not the first in the bucket, and you use the iterator to remove the first element returned from the iterator, then you would get a NullPointerException.

Modification:
Change the DefaultHeaders iterator remove method, to re-iterate the hash bucket and unlink the entry once found, if we don't have any existing iteration starting point.

Also made DefaultHeaders.remove0 package private to avoid a synthetic method indirection.

Result:
Removing from iterators from DefaultHeaders is now robust towards hash collisions."
6aed84d0096e591f86ce2c714fb6978438354ce5,"Add script which list staged releases

Motivation:

When finish the release process we need to give the id of the staged release. Let's add a script for that

Modifications:

Add script which allows to show all staged releases

Result:

No need to login into sonatype anymore"
a0b1984c50438e60703294aa684327a85caea350,"Update timeout to 10 minutes

Motivation:

We should use a higher timeout as sometimes the verification process in oss.sonatype.org is very slow.

Modifications:

Bump up timeout to 10 minutes

Result:

Less likely to see timeouts"
5158e3976dcdcb0ed878763ca0fa2014c8f949d4,"Less noisy logging in `DnsServerAddressStreamProviders` (#11031)


Motivation:

It is not uncommon to run Netty on OS X without the specific
`MacOSDnsServerAddressStreamProvider`. The current log message is too
verbose because it prints a full stack trace on the console while a
simple logging message would have been enough.

Modifications:

- Print a `WARN` message when `MacOSDnsServerAddressStreamProvider`
class is not found;
- Print a `ERROR` message with a stack trace when the class was found
but could not be loaded due to some other reasons;

Result:

Less noise in logs."
a60825c3b425892af9be3e9284677aa8a58faa6b,"Dont create stack variable in adjustMarkers. (#11033)

Motivation:

No extra variable is needed.

Modification:

Remove extra variable

Result:

Fixes #11032"
dde82f62f07de5e794dda1c3324d8331ca522114,"Fix bug in Recycler with racing calls to recycle (#11037)

Motivation:
It is possible for two separate threads to race on recycling an object.
If this happens, the object might be added to a WeakOrderQueue when it shouldn't be.
The end result of this is that an object could be acquired multiple times, without a recycle in between.
Effectively, it ends up in circulation twice.

Modification:
We fix this by making the update to the lastRecycledId field of the handle, an atomic state transition.
Only the thread that ""wins"" the race and succeeds in their state transition will be allowed to recycle the object.
The others will bail out on their recycling.
We use weakCompareAndSet because we only need the atomicity guarantee, and the program order within each thread is sufficient.
Also, spurious failures just means we won't recycle that particular object, which is fine.

Result:
Objects no longer risk circulating twice due to a recycle race.

This fixes #10986"
edf44732de4b831d87980c3eed7ddbe2e34f49f4,"Remove unnecessary `this`. (#11035)

Motivation:
There are unnecessary `this` keyword usages in `HttpStaticFileServerHandler`.

Modification:
Removed unnecessary `this` keywords.

Result:
Clean code"
1529ef1794e0a6654fa4334fd979b769d6940e61,"Minimize get byte multipart and fix buffer reuse (#11001)

Motivation:
- Underlying buffer usages might be erroneous when releasing them internaly
in HttpPostMultipartRequestDecoder.

2 bugs occurs:
1) Final File upload seems not to be of the right size.
2) Memory, even in Disk mode, is increasing continuously, while it shouldn't.

- Method `getByte(position)` is too often called within the current implementation
of the HttpPostMultipartRequestDecoder.
This implies too much activities which is visible when PARANOID mode is active.
This is also true in standard mode.

Apply the same fix on buffer from HttpPostMultipartRequestDecoder to HttpPostStandardRequestDecoder
made previously.

Finally in order to ensure we do not rewrite already decoded HttpData when decoding
next ones within multipart, we must ensure the buffers are copied and not a retained slice.

Modification:
- Add some tests to check consistency for HttpPostMultipartRequestDecoder.
Add a package protected method for testing purpose only.

- Use the `bytesBefore(...)` method instead of `getByte(pos)` in order to limit the external
access to the underlying buffer by retrieving iteratively the beginning of a correct start
position.
It is used to find both LF/CRLF and delimiter.
2 methods in HttpPostBodyUtil were created for that.

The undecodedChunk is copied when adding a chunk to a DataMultipart is loaded.
The same buffer is also rewritten in order to release the copied memory part.

Result:

Just for note, for both Memory or Disk or Mixed mode factories, the release has to be done as:

      for (InterfaceHttpData httpData: decoder.getBodyHttpDatas()) {
          httpData.release();
          factory.removeHttpDataFromClean(request, httpData);
      }
      factory.cleanAllHttpData();
      decoder.destroy();

The memory used is minimal in Disk or Mixed mode. In Memory mode, a big file is still
in memory but not more in the undecodedChunk but its own buffer (copied).

In terms of benchmarking, the results are:

Original code Benchmark                                                             Mode  Cnt  Score    Error   Units
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigAdvancedLevel   thrpt    6  0,152 ±  0,100  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigDisabledLevel   thrpt    6  0,543 ±  0,218  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigParanoidLevel   thrpt    6  0,001 ±  0,001  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigSimpleLevel     thrpt    6  0,615 ±  0,070  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighAdvancedLevel  thrpt    6  0,114 ±  0,063  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighDisabledLevel  thrpt    6  0,664 ±  0,034  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighParanoidLevel  thrpt    6  0,001 ±  0,001  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighSimpleLevel    thrpt    6  0,620 ±  0,140  ops/ms

New code Benchmark                                                                  Mode  Cnt  Score   Error   Units
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigAdvancedLevel   thrpt    6  4,037 ± 0,358  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigDisabledLevel   thrpt    6  4,226 ± 0,471  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigParanoidLevel   thrpt    6  0,875 ± 0,029  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigSimpleLevel     thrpt    6  4,346 ± 0,275  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighAdvancedLevel  thrpt    6  2,044 ± 0,020  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighDisabledLevel  thrpt    6  2,278 ± 0,159  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighParanoidLevel  thrpt    6  0,174 ± 0,004  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighSimpleLevel    thrpt    6  2,370 ± 0,065  ops/ms

In short, using big file transfers, this is about 7 times faster with new code, while
using high number of HttpData, this is about 4 times faster with new code when using Simple Level.
When using Paranoid Level, using big file transfers, this is about 800 times faster with new code, while
using high number of HttpData, this is about 170 times faster with new code."
c22c6b845d28783375823e4c8222957ffe3664d9,"Add support for UDP_SEGMENT (GSO) when using sendmmsg (#11038)

Motivation:

For protocols like QUIC using UDP_SEGMENT (GSO) can help to reduce the
overhead quite a bit. We should support it.

Modifications:

- Add a SegmentedDatagramPacket which can be used to use UDP_SEGMENT
- Add unit test

Result:

Be able to make use of UDP_SEGMENT"
690d1a53d5394c39f81d109210cdd0eaad176028,"Add tests verifying channel configure/initialisation order (#11050)

Motivation:
Channels need to have their configurations applied before we can call out to user-code via handlerAdded and initChannel.

Modification:
This adds tests for this behaviour, which already works correctly.

Result:
Better test coverage."
18c66a9d70e60d079f8ca1e1f265f80efbde10af,"Ensure removal from queue happens before writeAndFlush(...) is called (#11049)


Motivation:

We need to ensure that we call queue.remove() before we cal writeAndFlush() as this operation may cause an event that also touches the queue and remove from it. If we miss to do so we may see NoSuchElementExceptions.

Modifications:

- Call queue.remove() before calling writeAndFlush(...)
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/11046"
8872c1454a7f23c1663db93672a3c8699dfc9f22,"Allow to create PendingWriteQueue via a Channel (#11055)

Motivation:

At the moment its only possible to create a PendingWriteQueue via a ChannelHandlerContext.

Modifications:

Add another constructor

Result:

More flexible usage of PendingWriteQueue"
5d41611b7930293c2e986e0d640aa4aa790115ba,"Fix NPE that can happen in the WriteTimeoutHandler when multiple executors are used (#11056)

Motivation:

In WriteTimeoutHandler we did make the assumption that the executor which is used to schedule the timeout is the same that is backing the write promise. This may not be true which will cause concurrency issues

Modifications:

Ensure we are on the right thread when try to modify the doubly-linked-list and if not schedule it on the right thread.

Result:

Fixes https://github.com/netty/netty/issues/11053"
7d4aaa268b8a536f61fbc7711365147c58238745,"Support session cache for client and server when using native SSLEngine implementation (#10994)

Motivation:

At the moment we don't support session caching on the client side at all when using the native SSL implementation. We should at least allow to enable it.

Modification:

Allow to enable session cache for client side but disable ti by default due a JDK bug atm.

Result:

Be able to cache sessions on the client side when using native SSL implementation ."
0f12472b580bcbb34cbe84810077aa33c1091d14,"Allow to config dns bind address in DnsNameResolver (#11061)

Motivation:

The DnsResolver default start address listen to ""0.0.0.0"", which may be not what the user wants. 

Modification:

Add localAddress as a param of DnsNameResolver and its builder

Result:

The DnsNameResolver's bind address can be configured."
4f498709d49de63872118fbbea0ba305feac0f03,"Always include the OS in the tcnative library name (#11064)

Motivation:

These days we always include the OS in the library name. This means we also can simplify things

Modifications:

Adjust build configuration to address for libray name change

Result:

Simplify build"
bf9b90c3402683099b6da0e07fd55a4cebd21895,"[HttpObjectDecoder] Include hex-value of illegal whitespace char (#11067)

Motivation:

HttpObjectDecoder may throw an IllegalArgumentException if it encounters
a character that Character.isWhitespace() returns true for, but is not
one of the two valid OWS (optional whitespace) values. Such values may
not have friendly or readable toString() values. We should include the
hex value so that the illegal character can always be determined.

Modifications:

Add hex value as well

Result:

Easier to debug 

Co-authored-by: Bennett Lynch <Bennett-Lynch@users.noreply.github.com>"
89c241e3b1795ff257af4ad6eadc616cb2fb3dc4,"Merge pull request from GHSA-wm47-8v5p-wjpj

Motivation:

As stated by https://tools.ietf.org/html/rfc7540#section-8.1.2.6 we should report a stream error if the content-length does not match the sum of all data frames.

Modifications:

- Verify that the sum of data frames match if a content-length header was send.
- Handle multiple content-length headers and also handle negative values
- Add io.netty.http2.validateContentLength system property which allows to disable the more strict validation
- Add unit tests

Result:

Correctly handle the case when the content-length header was included but not match what is send and also when content-length header is invalid"
44e392e8512cce870d9b00da346e119f6323591e,[maven-release-plugin] prepare release netty-4.1.60.Final
4f099dd11fa3d1c9f4963a72a0f72f4809c1459b,[maven-release-plugin] prepare for next development iteration
b8d843757b6291e32e920c0ce9c00d505c4e62f0,[maven-release-plugin] rollback the release of netty-4.1.60.Final
23ff30c40f3420345567191849c3abac284eb4d7,"Try to stabilize docker build by using https (#11070)

Motivation:

At the moment we use http to download rpms, let's switch to https

Modifications:

Use https for rpms

Result:

Hopefully more stable docker image builds"
eef26e8bb571612b76235841a84f605b9ae5d777,[maven-release-plugin] prepare release netty-4.1.60.Final
e83132fcf2f3ee560826586043ed9a87ef2dcfbf,[maven-release-plugin] prepare for next development iteration
4949d4a0ad271d5d48e4f67f1b691c53c2bafe8c,"Return correct result for Futures that are returned from UnorderedThreadPoolExecutor (#11074)


Motivation:

Due a regression in fd8c1874b4e24a18c562c7013efabcb155395459 we did not correctly set the result for the returned Future if it was build for a Callable.

Modifications:

- Adjust code to call get() to retrive the correct result for notification of the future.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/11072"
24b5a21e462a6ea1d994c9b9fe743e3b04472a45,"Add unit tests that validate that header validation exception is propagated to the child channels (#11076)

Motivation:

We should validate the exception is actually propagted

Modifications:

Add unit tests

Result:

Verify all works as expected"
3f23f59b87cf118f78e0a0250b5588f354cb3e03,"Introduce HttpMessageDecoderResult to expose decoded header size (#11068)

Motivation

The HttpObjectDecoder accepts input parameters for maxInitialLineLength
and maxHeaderSize. These are important variables since both message
components must be buffered in memory. As such, many decoders (like
Netty and others) introduce constraints. Due to their importance, many
users may wish to add instrumentation on the values of successful
decoder results, or otherwise be able to access these values to enforce
their own supplemental constraints.

While users can perhaps estimate the sizes today, they will not be
exact, due to the decoder being responsible for consuming optional
whitespace and the like.

Modifications

* Add HttpMessageDecoderResult class. This class extends DecoderResult
and is intended for HttpMessage objects successfully decoded by the
HttpObjectDecoder. It exposes attributes for the decoded
initialLineLength and headerSize.
* Modify HttpObjectDecoder to produce HttpMessageDecoderResults upon
successfully decoding the last HTTP header.
* Add corresponding tests to HttpRequestDecoderTest &
HttpResponseDecoderTest.

Co-authored-by: Bennett Lynch <Bennett-Lynch@users.noreply.github.com>"
773ecb81fe5ac5474fc89bfce5347ab0959d426e,"Also support CompositeByteBuf with SegmentedDatagramPacket (#11081)

Motivation:

c22c6b845d28783375823e4c8222957ffe3664d9 introduced support for
UDP_SEGMENT but did restrict it to continous buffers. This is not needed
as it is also fine to use CompositeByteBuf

Modifications:

- Allow to use CompositeByteBuf as well
- Add unit test

Result:

More flexible usage of segmented datagrams possible"
c651baa5701bd277fb6a209eba6876dfa13770ac,"codec-http2: Exception as cause, not message format argument (#11084)

Motivation:

There are several overloads of streamError(), with one receiving the
Throwable to be made the cause of the new exception. However, the wrong
overload was being called and instead the IllegalArgumentException was
being passed as a message format argument which was summarily thrown
away as the message format didn't reference it.

Modifications:

Move IllegalArgumentException to proper argument position.

Result:

A useful exception, with the underlying cause available."
3f9750173c675adf196b5ff3bfea7c6f66bb3e15,"Make EpollSocketConnectTest correctly configure TFO (#11083)

Motivation:
The EpollSocketConnectTest was not correctly configuring TCP Fast Open on the server socket.
It's an option, not a child option.

Modification:
EpollSocketConnectTest now correctly enables TCP Fast Open on the server side, when available, for the test that needs it.

Result:
Test covers what it was intended to."
0b0c234bed5ffdbe3f9a65c05c9ab353a5d300ae,"SslHandler flushing with TCP Fast Open fix (#11077)


Motivation:
SslHandler owns the responsibility to flush non-application data
(e.g. handshake, renegotiation, etc.) to the socket. However when
TCP Fast Open is supported but the client_hello cannot be written
in the SYN the client_hello may not always be flushed. SslHandler
may not wrap/flush previously written/flushed data in the event
it was not able to be wrapped due to NEED_UNWRAP state being
encountered in wrap (e.g. peer initiated renegotiation).

Modifications:
- SslHandler to flush in channelActive() if TFO is enabled and
  the client_hello cannot be written in the SYN.
- SslHandler to wrap application data after non-application data
  wrap and handshake status is FINISHED.
- SocketSslEchoTest only flushes when writes are done, and waits
  for the handshake to complete before writing.

Result:
SslHandler flushes handshake data for TFO, and previously flushed
application data after peer initiated renegotiation finishes."
95652fef12926b78d8b6200cc37eb11cef9b950e,"Allow to configure the maximum number of message to write per eventloop (#11086)


Motivation:

Allow to configure the maximum number of messages to write per eventloop run. This can be useful to ensure we read data in a timely manner and not let writes dominate the CPU time. This is especially useful in protocols like QUIC where you need to read ""fast enough"" as otherwise you may not read the ACKs fast enough.

Modifications:

- Add new ChannelOption / config that allows to limit the number of messages to write per eventloop run.
- Respect this setting for DatagramChannels

Result:

Reduce the risk of having WRITES block the processing of other events in a timely manner

Co-authored-by: terrarier2111 <58695553+terrarier2111@users.noreply.github.com>"
a82af640477509aa4f9f003f4bdbea34bd5a7695,"Continue reading when the number of bytes is less then the configured… (#11089)

... number of bytes when using DatagramChannels

Motivation:

In our FixedRecvByteBufAllocator we dont continue to read if the number of bytes is less then what was configured. This is correct when using it for TCP but not when using it for UDP. When using UDP the number of bytes is the maximum of what we want to support but we often end up processing smaller datagrams in general. Because of this we should use contineReading(UncheckedBooleanSupplier) to determite if we should continue reading

Modifications:

- use contineReading(UncheckedBooleanSupplier) for DatagramChannels

Result:

Read more then once in the general case for DatagramChannels with the default config"
bd62a9d6ffd9941d9e399cbbd73a10f06e38f217,"Github Actions dawidd6/action-download-artifact set workflow_conclusion (#11096)

Motivation:
Newer versions of dawidd6/action-download-artifact changed the default
workflow_conclusion from ""completed"" to ""completed, success"" which can
result in download failures if the associated job fails, which is
expected when tests fail.

Modifications:
- Explicitly set the workflow_conclusion to ""completed""

Result:
Test failures which result in build failures will still download test
data and generate reports after updating
dawidd6/action-download-artifact."
9f242d27e05651a909571f232dd1f5afb1aed20c,"Make CompositeByteBuf throw IllegalStateException when components are missing (#11100)

Motivation:
Components in a composite buffer can ""go missing"" if the composite is a slice of another composite and the parent has changed its layout.

Modification:
Where we would previously have thrown a NullPointerException, we now have a null-check for the component, and we instead throw an IllegalStateException with a more descriptive message.

Result:
It's now a bit easier to understand what is going on in these situations.

Fixes #10908"
aea9e381a7470d33323ccfa0d4377aea3e1f7323,"Fix grammar in javadoc (#11090)

Motivation:

There was some grammar / spelling error in the javadocs

Modification:

Fix error

Result:

Cleanup"
36cacc201e1c7a362358f7f6baa59cd8ece02df6,"Don't bind to a specify port during SSLEngine tests as the port may also be used (#11102)

Motivation:

We should always bind to port 0 to ensure we not try to bind to a port that is already in use during our tests.
As we missed to do this in one test we did see test failures sometimes.

This showed up here:
https://pipelines.actions.githubusercontent.com/obCqqsCMwwGme5y2aRyYOiZvWeJK4O0EY5AYRUDMSELILdqEjV/_apis/pipelines/1/runs/1963/signedlogcontent/18?urlExpires=2021-03-19T12%3A41%3A21.4370902Z&urlSigningMethod=HMACV1&urlSignature=zL6O0msEkghT%2B0hOAL1lqLK66SR0Mp99QIjiau1yPe4%3D

Modifications:

- Use new InetSocketAddress(0)

Result:

Fixes possible test failures."
fc90a8d0a9c4c7d0942e64372bf0e83e2776c341,"Update netty-build version (#11103)

Motivation:

We released a new version of netty-build

Modifications:

Update to latest version

Result:

Use latest netty-build version"
4f316b7cbd8af2bbf47319c82941a6f80afcb609,"Fix exception if Response has content (#11093)

Motivation:

If compression is enabled and the HttpResponse also
implements HttpContent (but not LastHttpContent) then
the buffer will be freed to eagerly.

Modification:

I retain the buffer the same way that is done for the LastHttpContent case.

Note that there is another suspicious looking call a few lines above (if beginEncode returns null). I am not sure if this should also be retained.

Result:

Fixes #11092"
30ff7f19347f055dd47272aa1cebdb5546027020,"Do not send GOAWAY frame before connection preface (#11107)

Motivation

A GOAWAY frame (or any other HTTP/2 frame) should not be sent before the
connection preface. Clients that immediately close the channel may
currently attempt to send a GOAWAY frame before the connection preface,
resulting in servers receiving a seemingly-corrupt connection preface.

Modifications

* Ensure that the preface has been sent before attempting to
automatically send a GOAWAY frame as part of channel shutdown logic
* Add unit test that only passes with new behavior

Result

Fixes https://github.com/netty/netty/issues/11026

Co-authored-by: Bennett Lynch <Bennett-Lynch@users.noreply.github.com>"
207108691976ac8ef646156b4289776d7966c4f7,"Fix alignment handling for pooled direct buffers (#11106)

Motivation:
Alignment handling was broken, and basically turned into a fixed offset into each allocation address regardless of its initial value, instead of ensuring that the allocated address is either aligned or bumped to the nearest alignment offset.
The brokenness of the alignment handling extended so far, that overlapping ByteBuf instances could even be created, as was seen in #11101.

Modification:
Instead of fixing the per-allocation pointer bump, we now ensure that 1) the minimum page size is a whole multiple of the alignment, and 2) the reference memory for each chunk is bumped to the nearest aligned address, and finally 3) ensured that the reservations are whole multiples of the alignment, thus ensuring that the next allocation automatically occurs from an aligned address.

Incidentally, (3) above comes for free because the reservations are in whole pages, and in (1) we ensured that pages are sized in whole multiples of the alignment.

In order to ensure that the memory for a chunk is aligned, we introduce some new PlatformDependent infrastructure.
The PlatformDependent.alignDirectBuffer will produce a slice of the given buffer, and the slice will have an address that is aligned.
This method is plainly available on ByteBuffer in Java 9 onwards, but for pre-9 we have to use Unsafe, which means it can fail and might not be available on all platforms.
Attempts to create a PooledByteBufAllocator that uses alignment, when this is not supported, will throw an exception.
Luckily, I think use of aligned allocations are rare.

Result:
Aligned pooled byte bufs now work correctly, and never have any overlap.

Fixes #11101"
1c9fe6cb38f668cf24cde0f472ebf49d2e8e0bf6,"Ensure we can correctly propagate exceptions to streams even if endStream flag is set (#11105)

Motivation:

We need to ensure we are still be able to correctly map errors to streams in all cases. The problem was that we sometimes called closeStreamRemote(...) in a finally block and so closed the underyling stream before the actual exception was propagated. This was only true in some cases and not in all. Generally speaking we should only call closeStreamRemote(...) if there was no error as in a case of error we should generate a RST frame.

Modifications:

- Only call closeStreamRemote(...) if no exeption was thrown and so let the Http2ConnectionHandler handle the exception correctly
- Add unit tests

Result:

Correctly handle errors even when endStream is set to true"
d5208096e40df642048dfb81341f450e531a11be,"Allow to have an empty path when convert a CONNECT request (#11108)


Motivation:

CONNECT requests have no path defined as stated in the HTTP/2 spec, at the moment we will throw an exception if we try to convert such a request to HTTP/1.1

Modifications:

- Don't throw an exception if we try to convert a HTTP/2 CONNECT request that has no path
- Add unit test

Result:

Related to https://github.com/netty/netty-incubator-codec-http3/pull/112."
72d7ec9d8c6892c94631f525ce4e2a3d252ecd0c,"Let's use gcc10 when cross-compiling for LSE support (#11112)

Motivation:

LSE (https://mysqlonarm.github.io/ARM-LSE-and-MySQL/) can have a huge performance difference. Let's ensure we use a compiler that can support it.

Modifications:

Update to gc10 when cross-compiling as it supports LSE and enables it by default

Result:

More optimized builds for aarch64"
7ed840e62ad1aa36f8152bc0233b001d8edad0a9,"Use netty-jni-util 0.0.3.Final (#11115)

netty-jni-util 0.0.2.Final is incompatible with static linking. Before
the netty-jni-util dependency was introduced netty-tcnative supported
static linking via NETTY_BUILD_STATIC. netty-jni-util 0.0.3.Final adds
static linking compatibility.

Modifications:

Bump netty-jni-util to version 0.0.3.Final and update to its new API
which requires the caller to manage packagePrefix.

Result:

Using latest version of netty-jni-util and restored static linking
compatibility."
f34feff0e03cf93f00a7b8ccde2114dd7856da33,"Fix build for aarch64 (#11116)

Motivation:

We had a typo and so the build for aarch64 failed before

Modifications:

Fix typo

Result:

Build for aarch64 works again"
cc2b443150c95501c5261b8dee2203705efc1dc1,"DefaultThreadFactory must not use Thread.currentThread() when constructed without ThreadGroup (#11119)

Motivation:

We had a bug in out DefaulThreadFactory as it always retrieved the ThreadGroup to used during creation time when now explicit ThreadGroup was given. This is problematic as the Thread may die and so the ThreadGroup is destroyed even tho the DefaultThreadFactory is still used.

This could produce exceptions like:

java.lang.IllegalThreadStateException
        at java.lang.ThreadGroup.addUnstarted(ThreadGroup.java:867)
        at java.lang.Thread.init(Thread.java:405)
        at java.lang.Thread.init(Thread.java:349)
        at java.lang.Thread.<init>(Thread.java:599)
        at io.netty.util.concurrent.FastThreadLocalThread.<init>(FastThreadLocalThread.java:60)
        at io.netty.util.concurrent.DefaultThreadFactory.newThread(DefaultThreadFactory.java:122)
        at io.netty.util.concurrent.DefaultThreadFactory.newThread(DefaultThreadFactory.java:106)
        at io.netty.util.concurrent.ThreadPerTaskExecutor.execute(ThreadPerTaskExecutor.java:32)
        at io.netty.util.internal.ThreadExecutorMap$1.execute(ThreadExecutorMap.java:57)
        at io.netty.util.concurrent.SingleThreadEventExecutor.doStartThread(SingleThreadEventExecutor.java:978)
        at io.netty.util.concurrent.SingleThreadEventExecutor.startThread(SingleThreadEventExecutor.java:947)
        at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:830)
        at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:818)
        at io.netty.channel.AbstractChannel$AbstractUnsafe.register(AbstractChannel.java:471)
        at io.netty.channel.SingleThreadEventLoop.register(SingleThreadEventLoop.java:87)
        at io.netty.channel.SingleThreadEventLoop.register(SingleThreadEventLoop.java:81)
        at io.netty.channel.MultithreadEventLoopGroup.register(MultithreadEventLoopGroup.java:86)
        at io.netty.bootstrap.AbstractBootstrap.initAndRegister(AbstractBootstrap.java:323)
        at io.netty.bootstrap.AbstractBootstrap.doBind(AbstractBootstrap.java:272)
        at io.netty.bootstrap.AbstractBootstrap.bind(AbstractBootstrap.java:239)
        at io.netty.incubator.codec.quic.QuicTestUtils.newServer(QuicTestUtils.java:138)
        at io.netty.incubator.codec.quic.QuicTestUtils.newServer(QuicTestUtils.java:143)
        at io.netty.incubator.codec.quic.QuicTestUtils.newServer(QuicTestUtils.java:147)
        at io.netty.incubator.codec.quic.QuicStreamFrameTest.testCloseHalfClosure(QuicStreamFrameTest.java:48)
        at io.netty.incubator.codec.quic.QuicStreamFrameTest.testCloseHalfClosureUnidirectional(QuicStreamFrameTest.java:35)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.lang.Thread.run(Thread.java:748)

Modifications:

- If the user dont specify a ThreadGroup we will just pass null to the constructor of FastThreadLocalThread and so let it retrieve on creation time
- Adjust tests

Result:

Don't risk to see IllegalThreadStateExceptions."
b05fdf3ff8889c09dbea12d3844116b5489844c6,"Add support for UDP_GRO (#11120)


Motivation:

UDP_GRO can improve performance when reading UDP datagrams. This patch adds support for it.

See https://lwn.net/Articles/768995/

Modifications:

- Add recvmsg(...)
- Add support for UDP_GRO in recvmsg(...) and recvmmsg(...)
- Remove usage of recvfrom(...) and just always use recvmsg(...) or recvmmsg(...) to simplify things
- Refactor some code for sharing
- Add EpollChannelOption.UDP_GRO and the getter / setter in EpollDatagramConfig

Result:

UDP_GRO is supported when the underlying system supports it."
aaef54951f70ffdde706d8610d63777a033bac34,"remove unnecessary check in WebSocketFrameDecoder (#11113)

Motivation:

There are some redundant checks and so these can be removed

Modifications:

- First check frameOpcode != OPCODE_PING is removed because the code executed int the branch where frameOpcode  <= 7, while OPCODE_PING is 9.
- Second check frameOpcode != OPCODE_PING is removed because its checked before.

Result:

Code cleanup"
6c741932aad04d79377c03e6ce9dd116a9baa45f,"Move SegmentedDatagramPacket to transport-native-unix-common (#11121)

Motivation:

As we can supported SegmentedDatagramPacket in multiple native
transports (like in epoll and io_uring) we should just move it to
unix-common so we can share code.

Modification:

- Move SegmentedDatagrampPacket to transport-native-unixu
- Mark the SegmentedDatagramPacket in epoll as deprecated
- Update code to use updated package.

Result:

Possibility of code re-use"
5867de70d7159415652da2f390f111d59ef0c5a9,Update to netty-tcnative 2.0.38.Final (#11126)
b0fa4d5aab4215f3c22ce6123dd8dd5f38dc0432,"Merge pull request from GHSA-f256-j965-7f32

Motivation:

We also need to ensure that all the header validation is done when a single header with the endStream flag is received

Modifications:

- Adjust code to always enforce the validation
- Add more unit tests

Result:

Always correctly validate"
ccb3ff388f2eb0d107e746fc8b7222b98dd0339a,[maven-release-plugin] prepare release netty-4.1.61.Final
7192ab0f0a429a03029894fef0afb4c008d45991,[maven-release-plugin] prepare for next development iteration
3706b73d926be2e92be340dd8a707dba3e4edad0,"Also build modules we depend on when finish the release

Motivation:

We also need to compile the modules we depend on when finish up the release otherwise it may fail.

Modifications:

Add ""-am"" to the mvn args

Result:

Correctly also compile the modules we depend on"
ff0c014adec2418d3a2e7d82309d8156e760c539,"Skip deployment of testsuite jars (#11127)

Motivation:

We should skip the deployment of jars that are not meant to be consumed by the user as there is no public API.

Modifications:

Let's skip deployment for modules that are not useful for users

Result:

Build cleanup"
41ef4e4b025a4113b7fdabdf903b958f56e0d330,"AbstractKQueueChannel#writeFilter is invoked with the correct boolean depending on the ChannelOutboundBuffer state (#11128)

Motivation:

This is a regression caused by #11086

Modifications:

AbstractKQueueChannel#writeFilter should be invoked with `!in.isEmpty()`
- false - all messages are written
- true - there are still messages to be written

Result:

AbstractKQueueChannel#writeFilter is invoked with the correct boolean depending on the ChannelOutboundBuffer state"
573d1f4bf585e369feadd593eea3b19fb47fb9b9,[maven-release-plugin] prepare release netty-4.1.62.Final
e4dd6ee53278018b1bce86ed79581876f1a89ba5,[maven-release-plugin] prepare for next development iteration
6b48e690fdeccf4dfa74a09951a498f3efdd9605,"SslHandler wrap reentry bug fix (#11133)

Motivation:
SslHandler's wrap method notifies the handshakeFuture and sends a
SslHandshakeCompletionEvent user event down the pipeline before writing
the plaintext that has just been wrapped. It is possible the application
may write as a result of these events and re-enter into wrap to write
more data. This will result in out of sequence data and result in alerts
such as SSLV3_ALERT_BAD_RECORD_MAC.

Modifications:
- SslHandler wrap should write any pending data before notifying
  promises, generating user events, or anything else that may create a
  re-entry scenario.

Result:
SslHandler will wrap/write data in the same order."
b78d8f2abda50fbc0ff3f177d72d1a0b05b5ff41,[maven-release-plugin] prepare release netty-4.1.63.Final
6724786dcc9fa38ba516dab97a04e2bbc17e81d9,[maven-release-plugin] prepare for next development iteration
df53de5b687cd25ba1079b556318da2b773cf4f1,"Less blocking in ChunkedStream (#11150)

Motivation:
We should avoid blocking in the event loop as much as possible.
The InputStream.read() is a blocking method, and we don't need to call it if available() returns a positive number.

Modification:
Bypass calling InputStream.read() if available() returns a positive number.

Result:
Fewer blocking calls in the event loop, in general, when ChunkedStream is used."
c93419ba57a97f86b5fbc2196c19a9efd0ed51ba,"Fire `SslHandshakeCompletionEvent` after the last decoded data chunk (#11148)

Motivation:

`SslHandler#unwrap` may produce `SslHandshakeCompletionEvent` if it
receives `close_notify` alert. This alert indicates that the engine is
closed and no more data are expected in the pipeline. However, it fires
the event before the last data chunk. As the result, further handlers
may loose data if they handle `SslHandshakeCompletionEvent`.
This issue was not visible before #11133 because we did not write
`close_notify` alert reliably.

Modifications:

- Add tests to reproduce described behavior;
- Move `notifyClosePromise` after fire of the last `decodeOut`;

Result:

`SslHandshakeCompletionEvent` correctly indicates that the engine is
closed and no more data are expected on the pipeline."
16b40d8a37937fd6e73858db2f05bd1e778a1d6f,"SslHandler consolidate state to save memory (#11160)

Motivation:
SslHandler has many independent boolean member variables. They can be
collapsed into a single variable to save memory.

Modifications:
- SslHandler boolean state consolidated into a single short variable.

Result:
Savings of 8 bytes per SslHandler (which is per connection) observed on
OpenJDK."
93f021141d93e6529215601ba6b5938e44f499c8,"Fix behavior of HttpPostMultipartRequestDecoder for Memory based Factory (#11145)

Motivation:
When Memory based Factory is used, if the first chunk starts with Line Break, the HttpData
is not filled with the current available buffer if the delimiter is not found yet, while it may
add some.

Fix JavaDoc to note potential wrong usage of content() or getByteBuf() if HttpDatais has
a huge content with the risk of Out Of Memory Exception.

Fix JavaDoc to explain how to release properly the Factory, whatever it is in Memory,
Disk or Mixed mode.

Fix issue #11143

Modifications:
First, when the delimiter is not found, instead of searching Line Break from readerIndex(), we should search
from readerIndex() + readableBytes() - delimiter size, since this is the only part where usefull
Line Break could be searched for, except if readableBytes is less than delimiter size (then we search from
readerIndex).

Second, when a Memory HttpData is created, it should be assigned an empty buffer to be
consistent with the other implementations (Disk or Mixed mode).
We cannot change the default behavior of the content() or getByteBuf() of the Memory based HttpData
since the ByteBuf is supposed to be null when released, but not empty.
When a new ByteBuf is added, one more check verifies if the current ByteBuf is empty, and if so, it
is released and replaced by the new one, without creating a new CompositeByteBuf.

Result:
In the tests testBIgFileUploadDelimiterInMiddleChunkDecoderMemoryFactory and related for other modes,
the buffers are starting with a CRLF.
When we offer only the prefix part of the multipart (no data at all), the current Partial HttpData has
an empty buffer.
The first time we offer the data starting with CRLF to the decoder, it now
has a correct current Partial HttpData with a buffer not empty.

The Benchmark was re-run against this new version.

Old Benchmark                                                                       Mode  Cnt  Score   Error   Units
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigAdvancedLevel   thrpt    6  4,037 ± 0,358  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigDisabledLevel   thrpt    6  4,226 ± 0,471  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigParanoidLevel   thrpt    6  0,875 ± 0,029  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigSimpleLevel     thrpt    6  4,346 ± 0,275  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighAdvancedLevel  thrpt    6  2,044 ± 0,020  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighDisabledLevel  thrpt    6  2,278 ± 0,159  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighParanoidLevel  thrpt    6  0,174 ± 0,004  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighSimpleLevel    thrpt    6  2,370 ± 0,065  ops/ms

New Benchmark                                                                       Mode  Cnt  Score   Error   Units
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigAdvancedLevel   thrpt    6  5,604 ± 0,415  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigDisabledLevel   thrpt    6  6,058 ± 0,111  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigParanoidLevel   thrpt    6  0,914 ± 0,031  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderBigSimpleLevel     thrpt    6  6,053 ± 0,051  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighAdvancedLevel  thrpt    6  2,636 ± 0,141  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighDisabledLevel  thrpt    6  3,033 ± 0,181  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighParanoidLevel  thrpt    6  0,178 ± 0,006  ops/ms
HttpPostMultipartRequestDecoderBenchmark.multipartRequestDecoderHighSimpleLevel    thrpt    6  2,859 ± 0,189  ops/ms

So +20 to +40% improvement due to not searching for CRLF/LF into the full buffer when no delimiter is found,
but only from the end and delimiter size + 2 (CRLF)."
0ef2f05373be323f8a70a8e343473cf9e6f49683,"SslHandler LocalChannel read/unwrap reentry fix (#11156)

Motivation:
SslHandler invokes channel.read() during the handshake process. For some
channel implementations (e.g. LocalChannel) this may result in re-entry
conditions into unwrap. Unwrap currently defers updating the input
buffer indexes until the unwrap method returns to avoid intermediate
updates if not necessary, but this may result in unwrapping the same
contents multiple times which leads to handshake failures [1][2].

[1] ssl3_get_record:decryption failed or bad record mac
[2] ssl3_read_bytes:sslv3 alert bad record mac

Modifications:
- SslHandler#unwrap updates buffer indexes on each iteration so that if
  reentry scenario happens the correct indexes will be visible.

Result:
Fixes https://github.com/netty/netty/issues/11146"
1a5ebfb9993abbccf54e030734d90e7ecb854bd7,"Log fewer stack traces from initialisation code (#11164)

Motivation:
We are increasingly running in environments where Unsafe, setAccessible, etc. are not available.
When debug logging is enabled, we log a complete stack trace every time one of these initialisations fail.
Seeing these stack traces can cause people unnecessary concern.
For instance, people might have alerts that are triggered by a stack trace showing up in logs, regardless of its log level.

Modification:
We continue to print debug log messages on the result of our initialisations, but now we only include the full stack trace is _trace_ logging (or FINEST, or equivalent in whatever logging framework is configured) is enabled.

Result:
We now only log these initialisation stack traces when the lowest possible log level is enabled.

Fixes #7817"
976486f021bc0d96c022fb563644ef582864101b,"[Clean] Remove useless code (#11154)

Motivation:
There is an unused field

Modifications:
Remove useless code

Result:
Code cleanup

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
3b89ac7cf0c818ef5138f88a8131767041c6deff,"Use ThreadLocalRandom instead of Math.random() (#11165)

Motivation:

`ThreadLocalRandom` doesn't cause contention. Also `nextInt()` generates only 4 random bytes while `Math.random()` generates 8 bytes.

Modification:

Replaced `(int) Math.random()` with `PlatformDependent.threadLocalRandom().nextInt()`

Result:

No possible contention when random numbers for WebSockets."
e2daae9ac8e4b5c0a04f47b163157445915b949a,"Fix StreamBufferingEncoder GOAWAY bug (#11144)

Motivation:

There is a bug in `StreamBufferingEncoder` such that when client receives GOWAY while there are pending streams due to MAX_CONCURRENT_STREAMS, we see the following error:
```
io.netty.handler.codec.http2.Http2Exception$StreamException: Maximum active streams violated for this endpoint.
        at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:147)
        at io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultEndpoint.checkNewStreamAllowed(DefaultHttp2Connection.java:896)
        at io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultEndpoint.createStream(DefaultHttp2Connection.java:748)
        at io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultEndpoint.createStream(DefaultHttp2Connection.java:668)
        at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders0(DefaultHttp2ConnectionEncoder.java:201)
        at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:167)
        at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:53)
        at io.netty.handler.codec.http2.StreamBufferingEncoder.writeHeaders(StreamBufferingEncoder.java:153)
        at io.netty.handler.codec.http2.StreamBufferingEncoder.writeHeaders(StreamBufferingEncoder.java:141)
        at io.grpc.netty.NettyClientHandler.createStreamTraced(NettyClientHandler.java:584) 
        at io.grpc.netty.NettyClientHandler.createStream(NettyClientHandler.java:567)
        at io.grpc.netty.NettyClientHandler.write(NettyClientHandler.java:328)
        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:717)
        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:709)
        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:792)
        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:702)
        at io.netty.channel.DefaultChannelPipeline.write(DefaultChannelPipeline.java:1015)
        at io.netty.channel.AbstractChannel.write(AbstractChannel.java:289)
        at io.grpc.netty.WriteQueue$AbstractQueuedCommand.run(WriteQueue.java:213)
        at io.grpc.netty.WriteQueue.flush(WriteQueue.java:128)
        at io.grpc.netty.WriteQueue.drainNow(WriteQueue.java:114)
        at io.grpc.netty.NettyClientHandler.goingAway(NettyClientHandler.java:783)
        at io.grpc.netty.NettyClientHandler.access$300(NettyClientHandler.java:91)
        at io.grpc.netty.NettyClientHandler$3.onGoAwayReceived(NettyClientHandler.java:280)
        at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwayReceived(DefaultHttp2Connection.java:236)
        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.onGoAwayRead0(DefaultHttp2ConnectionDecoder.java:218)
        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onGoAwayRead(DefaultHttp2ConnectionDecoder.java:551)
        at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onGoAwayRead(Http2InboundFrameLogger.java:119)
        at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readGoAwayFrame(DefaultHttp2FrameReader.java:591)
        at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:272)
        at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
        at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:174)
        at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:378)
        at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:438)
        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:498)
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:437)
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
        at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1486)
        at io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1235)
        at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1282)
        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:498)
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:437)
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:792)
        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:475)
        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)
        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.base/java.lang.Thread.run(Unknown Source)
```

The bug should come from the way that `StreamBufferingEncoder.writeHeaders()` handles the condition `connection().goAwayReceived()`. The current behavior is to delegate to `super.writeHeaders()` and let the stream fail, but this will end up with `Http2Exception` with the message ""Maximum active streams violated for this endpoint"" which is horrible. See https://github.com/netty/netty/blob/e5951d46fc89db507ba7d2968d2ede26378f0b04/codec-http2/src/main/java/io/netty/handler/codec/http2/StreamBufferingEncoder.java#L152-L155

Modification:

Abort new stream immediately if goaway received *and* MAX_CONCURRENT_STREAM reached in `StreamBufferingEncoder` rather than delegating to the `writeHeaders()` method of its super class.

Result:

In the situation when GOAWAY received as well as MAX_CONCURRENT_STREAM exceeded, the client will fail the buffered streams with `Http2Error.NO_ERROR` and message ""GOAWAY received"" instead of ""Maximum active streams violated for this endpoint"".

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
d34212439068091bcec29a8fad4df82f0a82c638,"Ensure DnsNameResolver resolves the host(computer) name on Windows (#11167)


Motivation:

On Windows DnsNameResolver is not able to resolve the host(computer) name as it is not in the hosts file and the DNS server is also not able to resolve it.
The exception below is the result of the resolution:
Caused by: java.net.UnknownHostException: failed to resolve 'host(computer)-name' after 2 queries
	at io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1013)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:966)
	at io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:414)
	at io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:938)
	at io.netty.resolver.dns.DnsResolveContext.access$700(DnsResolveContext.java:63)
	at io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:467)

Modifications:

On Windows DnsNameResolver maps host(computer) name to LOCALHOST

Result:

DnsNameResolver is able to resolve the host(computer) name on Windows

Fixes #11142"
697952e3e65acd8f40f9c5bb57c9a9134f77d397,"Add WebSocketClientHandshaker / WebSocketServerHandshaker close methods that take ChannelHandlerContext as parameter (#11171)


Motivation:

At the moment we only expose close(...) methods that take a Channel as paramater. This can be problematic as the write will start at the end of the pipeline which may contain ChannelOutboundHandler implementations that not expect WebSocketFrame objects. We should better also support to pass in a ChannelHandlerContext as starting point for the write which ensures that the WebSocketFrame objects will be handled correctly from this position of the pipeline.

Modifications:

- Add new close(...) methods that take a ChannelHandlerContext
- Add javadoc sentence to point users to the new methods.

Result:

Be able to ""start"" the close at the right position in the pipeline."
e27831d76723c08acfd266b185e4516ed77f93f1,"Fix support for IP_RECVORIGDSTADDR when using native epoll transport (#11173)


Motivation:

While adding support for GRO (b05fdf3ff8889c09dbea12d3844116b5489844c6) we broke support for IP_RECVORIGDSTADDR when using the native transport. Beside this we also didnt correctly handle IP_RECVORIGDSTADDR when recvmmsg was used.

Modifications:

- Fix support for IP_RECVORIGDSTADDR when using the native epoll transport for normal reads (recvmsg) but also for scattering reads (recvmmsg)
- Remove code from unix code-base as the support is linux specific and we not need the code there anymore

Result:

Fixes https://github.com/netty/netty/issues/11141"
8d7ffec081ac00192dbe3f07972471ec7d1a3933,"Used already calculated SETTINGS frame payload length when allocating ByteBuf

Motivation:  We have already calculated the payload length. So no need to calculate again when allocating ByteBuf

Modification:  Used payloadLength variable instead of calculating the payload length again

Result:  Re-use the variable value and make the code cleaner"
f7795c81a5f32021f77c0d8117866d92c1173e03,"Remove duplicate HTTP2 payload length check against max frame size

Motivation:

In the method processHeaderState(), we have checked the http2 payload length against max frame size. But later for
different types of frames, we checked this again.

Modifications:

Removed the duplicate check in verify*() methods. And removed verifyPayloadLength() method, since it will not be used anymore.

Result:

Remove duplicate check and make the code cleaner."
56ef371676ed48262a46ce827d5462cd6f218a6d,"BouncyCastle ALPN support (#11157)


Motivation:

Under Android it was not possible to load a specific web page. It might be related to the (missing?) ALPN of the internal TLS implementation. BouncyCastle as a replacement works but this was not supported so far by Netty.
BouncyCastle also has the benefit to be a pure Java solution, all the other providers (OpenSSL, Conscrypt) require native libraries which are not available under Android at least.

Modification:

BouncyCastleAlpnSslEngine.java and support classes have been added. It is relying on the JDK code, hence some support classes had to be opened to prevent code duplication.

Result:

BouncyCastle can be used as TLS provider.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
2c757d11be2dff89c246c51f8d33ebeac7f47d23,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (commons) (#11170) (#11172)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* Add some checks to ObjectUtil not present today but utilized in the code.
* Add unit test for ObjectUtil
* Update commmons internal usage with ObjectUtil

Result:

All checks needed are present, subsequent changes of usage of ObjectUtil are possible.

Fixes for https://github.com/netty/netty/issues/11170"
1d802d9da599997aa569d304712b8db2bb6111b0,"Add default block to CompositeByteBuf (#11178)

Motivation:

Switch statements should always have a default block to ensure we not ""fall-through"" by mistake.

Modification:

Add default block

Result:

code cleanup.

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
36dcaf0c507ca7a4cc4e1117a760c12ac0b22eb4,Fix typo in exception message
acd9b383bc0a4597c81aea7fd52190c5dbfe5a00,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (codec) (#11170) (#11179)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.

Fixes #11170"
75c1134c0d33becb0b746155472e6076e9005340,"SimpleChannelPromiseAggregator use first exception instead of last (#11168)

Motivation:
SimpleChannelPromiseAggregator implements the promise API and allows for
multiple operations to share a common promise. It currently propagates
the last exception to occur, but this may mask the original exception
which lead to the last exception and make debugging more difficult.

Modifications:
- SimpleChannelPromiseAggregator propagates the first exception instead
  of the last exception.

Result:
Fixes https://github.com/netty/netty/issues/11161."
2f4beae8ecfec25d0504119a7c4881092872e16a,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (handler) (#11170) (#11180)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.

Fixes #11170"
c3416d8ad2260f3c9bc98a9061d25bba92020f93,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (transport*) (#11170) (#11181)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.

Fixes #11170"
d5fabe78a7b4b7d4124177c0f3dd103b1028c18e,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (buffer) (#11170) (#11182)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.

Fixes #11170"
52ca64033a30938d042fa12486db322bf7e2f610,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (example) (#11170) (#11183)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.

Fixes #11170"
d3fa33058d72715c8c021dd0d8b33dfd0cd45268,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (codec*) (#11170) (#11185)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.
Fixes #11170"
4eafccf9714a331c1964acc73cf2d7db48af62fa,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (misc) (#11170) (#11186)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved in microbench and resolver-dns

Fixes #11170"
db2f60c870cf24fca28d15ebac95dbfded912636,"Utilize i.n.u.internal.ObjectUtil to assert Preconditions (codec-http) (#11170) (#11187)

Motivation:

NullChecks resulting in a NullPointerException or IllegalArgumentException, numeric ranges (>0, >=0) checks, not empty strings/arrays checks must never be anonymous but with the parameter or variable name which is checked. They must be specific and should not be done with an ""OR-Logic"" (if a == null || b == null) throw new NullPointerEx.

Modifications:

* import static relevant checks
* Replace manual checks with ObjectUtil methods

Result:

All checks needed are done with ObjectUtil, some exception texts are improved.

Fixes #11170"
183559ddb6e1de1c78659460a49a9e6e7d92d2a1,"Add a new HTTP/2 pseudo header `:protocol` (#11192)

Motivation:

RFC 8411 defines a new HTTP/2 pseudo header called `:protocol`:

- https://datatracker.ietf.org/doc/rfc8441/

Netty currently raises an exception when validating an `Http2Headers`.

Modifications:

- Added `Http2Headers.PseudoHeaderNames.PROTOCOL` so that `:protocol`
  pseudo header is not rejected.

Result:

- A user can implement WebSockets with HTTP/2."
a98c60283b38830607780e039c7dd52715ec5814,"Enable Tlsv1.3 when using BouncyCastle ALPN support (#11193)

Motivation:

In the latest version of BouncyCastle, BCJSSE:'TLSv1.3' is now a supported protocol for both client and server. So should consider enabling TLSv1.3 when TLSv1.3 is available

Modification:

This pr is to enable TLSv1.3 when using BouncyCastle ALPN support, please review this pr,thanks

Result:

Enable TLSv1.3 when using BouncyCastle ALPN support

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
c1b922b224f57122c615b4871b6200cad58d5f3b,"adjust validation logic when websocket server check starts with '/' (#11191)


Motivation:

When create a WebSocketServerProtocolConfig to check URI path starts from '/',
only '/' or '//subPath' can be passed by the checker,but '/subPath' should be
passed as well

Modifications:

in `WebSocketServerProtocolHandshakeHandler.isWebSocketPath()` treat '/' a special case

Result:
'/subPath' can be passed"
48e2c0d5cdabd7f52706d618969da5f961ff2d0f,"Be more lenient when check the number of registered channels (#11194)

Motivation:

Some SingleEventLoop implementations may need some ""time"" to update the number of registered Channels. We should loop until we see the correct value or timeout if we did not observe the correct value.

Modifications:

- Loop until we see the correct value
- add test timeout

Result:

Fixes https://github.com/netty/netty/issues/11169"
216cd38ff275bbe8dd3597bee05d5f292e7acfad,"Re-enable running openssl (shared) tests on CI (#11197)


Motivation:

It turned out we didnt run the openssl tests on the CI when we used the non-static version of netty-tcnative.

Modifications:

- Upgrade netty-tcnative to fix segfault when using shared openssl
- Adjust tests to only run session cache tests when openssl supports it
- Fix some more tests to only depend on KeyManager if the underlying openssl version supports it

Result:

Run all openssl test on the CI even when shared library is used"
268f5a9108d17bccf8abc7fc9ff0a0661d6f0b51,"Update run-on-arch-action (#11199)

Motivation:

In the past we did see problems sometime when run-on-arch-action was used. We are multiple releases behind, lets update and so maybe fix the problems.

Modifications:

Update to latest release

Result:

Use latest run-on-arch-action release"
3657805711668ff1249b4c19e227bedb94d55417,"Correctly throw ErrorDataDecoderException for errors while decoding (#11198)

Motivation:

We didn't correctly handle the case when no content-type header was found or if the charset was illegal and just did throw a NPE or ICE. We should in both cases throw an ErrorDataDecoderException to reflect what is documented in the javadocs.

Modifications:

- Throw correct exception
- Merge private method into the constructor as it is only used there
- Add unit tests

Result:

Throw expected exceptions on decoding errors"
def8a3f17d875ac188ed1d3364618f559a0b59ce,"Destroy HttpPostMultipartRequestDecoder if contructor throws (#11207)

Motivation:

We need to call destroy() if the constructor of HttpPostMultipartRequestDecoder throws as otherwise we may leak memory.

Modifications:

- Call destroy() if we throw
- Add unit test

Result:

No more leaks when constructor throws

Co-authored-by: Frederic Bregier <frederic.bregier@waarp.fr>"
d22a35628db9b9bd473d7be76d989b05fdc7a12f,"Give a choice for app to extend the length limitation of clientId even in mqtt v3.1 on the server side (#11205)

Motivation:

In the mqtt v3.1 protocol, the default maximum Client Identifier length is 23.However, in (#11114), there are many cases, the server may still receive a client ID with a length greater than 23. Perhaps should consider letting the user decide whether accept client id greater than 23 on the server side

Modification:

- Allow to specify max length.

Result:

Give a choice for app to extend the length limitation of clientId even in mqtt v3.1 on the server side.

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
c32c520edde1bd554314f51d76b3eda4858e404c,"Before throwing TooLongFrameException,should skip the bytes to be read  in MqttDecoder (#11204)

Motivation:

Before throwing TooLongFrameException, should call the skipBytes method to skip the bytes to be read

Modification:
- skip bytes before throw

Result:
Actually skip the bytes when we detect too much data

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
d0fea48604359239d71923447b9138b5c0c54cee,"ReferenceCountedOpenSslEngine unwrap handshake complete status fix (#11210)

Motivation:
ReferenceCountedOpenSslEngine may unwrap data and complete the handshake
in a single unwrap() call. However it may return HanshakeStatus of
HandshakeStatus of NEED_UNWRAP instead of FINISHED. This may result in
the SslHandler sending the unwrapped data up the pipeline before
notifying that the handshake has completed, and result in out-of-order
events.

Modifications:
- if ReferenceCountedOpenSslEngine handshake status is NEED_UNWRAP and
  produced data, or NEED_WRAP and consumed some data, we should call
  handshake() to get the current state.

Result:
ReferenceCountedOpenSslEngine correctly indicates when the handshake has
finished if at the same time data was produced or consumed."
63352b135a2a49ec91b5cf0d183ef744aa53a7a6,"Improve `Http2FrameCodecBuilder` usability (#11195)


__Motivation__

 `Http2FrameCodecBuilder` constructor calls `server()` internally which disallows using certain methods on the builder later. Additionally, the constructor is package private which limits extension of the `Builder` as well as usage outside the available `forClient()` and `forServer()` static methods.

 __Modification__

 - Introduce a `public` no-arg constructor to `Http2FrameCodecBuilder`.

 __Result__

 `Http2FrameCodecBuilder` can now be used to create the codec with `Http2Connection` or `Http2ConnectionDecoder` and `Http2ConnectionEncoder` which was earlier not possible due to implicit call to `server()` by the `Http2FrameCodecBuilder` constructor."
c0708fc464695abe62c1cf2f79ad76c0d9b05e7e,"Verify SslHandler#unwrap send fireChannelRead event after a notification for a handshake success (#11203)

Motivation:

#11210 fixed a regression caused by #11156. This change adds a unit test for it.

Modifications:

- Add test

Result:

Verify fix in #11210 

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
e7330490e3ff29146b7658e1e2a23593edfb4d5e,"Fix Memory release not correctly in Multipart Decoder (#11188)

Motivation:
2 years ago a change remove the default clearing of all HttpData, whatever
they are disk based or memory based.

A lot of users were probably releasing HttpData directly, so there was no issue.
But now, it seems, and as the Javadoc said, that `decoder.destroy()` shall clean up
also Memory based HttpData, and not only Disk based HttpData as currently.

Change:
- Add in `destroy()` method the necessary code to release if necessary
the underlying Memory based HttpDatas.

- Change one Junit Test (using Mixed, Memory and Disk based factories)
in order to check the correctness of this behavior and to really act
as a handler (releasing buffers or requests).

- Modify one Junit core to check validity when a delimiter is present in the Chunk
but not CRLF/LF (false delimiter), to ensure correctness.

Result:
No more issue on memory leak

Note that still the List and the Map are not cleaned, since they were not
before. No change is done on this, since it could produce backward issue compatibility.

Fix issues #11175 and #11184"
0bd9d43b18eabe9e61de943106459c3b8b686b07,"Move HttpPostMultiPartRequestDecoder specific tests to HttpPostMultiPartRequestDecoderTest (#11211)

Motivation:

Some of the HttpPostMultiPartRequestDecoder specific tests were included in HttpPostRequestDecoderTest. We should better move these in the correct test class.

Modifications:

Move specific tests

Result:

Cleanup"
617c26d3441542b9ea509c8b8d711f0a5b8bb956,Update java versions (#11217)
6b3ec62e6e4e19a85304aecd8cb5331a3fcc70be,"Preload classes before calling native OnLoad function to prevent clas… (#11215)

Motivation:

It turns out it is quite easy to cause a classloader deadlock in more recent java updates if you cause classloading while you are in native code. Because of this we should just workaround this issue by pre-load all the classes that needs to be accessed in the OnLoad function.

Modifications:

- Preload all classes that would otherwise be loaded by native OnLoad functions.

Result:

Workaround for https://github.com/netty/netty/issues/11209 and https://bugs.openjdk.java.net/browse/JDK-8266310"
612ab584489eae74b28ce0bc1b75fb23c5d24b57,"Don't bundle all netty dependencies into netty-all (#11202)

Motivation:

netty-all already depends on the other netty-* packages so there's no need to also bundle them.

The duplicated classes cause classpath issues, particularly with Java > 8, which reports errors like this:
The package io.netty.buffer is accessible from more than one module: io.netty.all, io.netty.buffer

Modifications:

- Removed bundling tasks from netty-all's maven pom.xml

Result:

- netty-all no longer bundles all classes. Instead, classes are provided by expressed dependencies.

Fixes #4671"
dccdecc7f497540f63c7c751140ef7297efccfba,"Update from JDK15 to JDK16 (#11218)

Motivation:

The last non-LTS release is JDK16 now.

Modifications:

Update from JDK15 to JDK16 for building as this is the last non-LTS release atm

Result:

Build with latest non-LTS release as well"
4010769051db4b233e2d70df2dd7da6c403c6212,"Decrease visibility of `Http2FrameCodecBuilder` default ctor to `protected` (#11220)

Motivation:

`Http2FrameCodecBuilder` defines static factory methods `forClient()`
and `forServer()` that should be used to create a new instance.
The default ctor is useful only when users need to override behavior
of the existing builder. Those users should define another way to create
an instance.

Modifications:

- Decrease visibility of `Http2FrameCodecBuilder` default ctor from
`public` to `protected`;
- Add javadoc to clarity responsibilities;

Result:

Users of `Http2FrameCodecBuilder` are not confused why
`new Http2FrameCodecBuilder().build()` works for the server-side, but
does not work for the client-side."
7b9a97a81f10ea574a8e6f2596075615d2eeb185,"Only fall back to CNAME on A/AAAA queries (#11216)

Motivation:

DNS resolver falls back to trying CNAME if no records found, but should
only try this for A/AAAA queries. Does not make sense for other query
types, results in a redundant CNAME query that is just going to fail.

Modification:

Check query type before deciding to try CNAME. Only proceed if type is A
or AAAA.

Added unit test to verify CNAME is only tried after A/AAAA queries.

Result:

Fixes #11214."
03c2644c19ca7f800caaf75488c02a92b818dbde,"Bump initial timeouts in SSLEngineTest (#11221)

Motivation:
We've seen (very rare) flaky test failures due to timeouts.
They are too rare to analyse properly, but a theory is that on overloaded, small cloud CI instances, it can sometimes take a surprising amount of time to start a thread.
It could be that the event loop thread is getting an unlucky schedule, and takes seconds to start, causing the timeouts to elapse.

Modification:
Increase the initial timeouts in the SSLEngineTest, that could end up waiting for the event loop thread to start.
Also fix a few simple warnings from Intellij.

Result:
Hopefully we will not see these tests be flaky again."
574e079381f9b947fad979a88fa0b27f306f627d,"Update to use maven 3.8.1 (#11223)

Motivation:

We use an old version of maven atm.

Modifications:

Update to maven 3.8.1

Result:

Use latest maven release when compiling"
84356bbeb0ce2ffd655819c0e722c518b9934931,"Add default block in MqttVersion (#11226)

Motivation:

Fix switch case fall through, add default block in MqttVersion

Modification:

Fix switch case fall through, add default block in MqttVersion

Result:

Code cleanup


Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
2bcd03f788c21cb5e1f8c99c94ebde8541f7a2d3,"Improved exception messages in MqttVersion (#11228)

Motivation:
When checking the latest commit i saw some bad exception messages in MqttVersion hence i improved them.

Modification:

Improved exception messages in MqttVersion.

Result:

Better exception messages in MqttVersion."
bb7b05be01b19868407d772d37733dff1c9d1fa3,"Add explicit null checks in OpenSslX509KeyManagerFactory (#11230)

Motivation:

We should add explicit null checks so its easier for people to understand why it throws.

Modification:

Add explicit checkNotNull(...)

Result:

Easier to understand for users why it fails.

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
b8a5148569fd9b7f600eece53f57feeb337b8ad6,"Simplify ByteToMessageDecoder#callDecode (#11224)

Motivation:
After the if case, outSize is always 0, so we can simplify the code.

Modification:
Simplify code by not updating and using `isEmpty()`.

Result:
Clearer than before"
0f252139189c3d528bea280172f7f57e2abe9b52,"Workaround frequent connection reset / timeout on CI (#11231)

Motivation:

It seems like it is a known issue that maven frequently sees connection reset / connection timeout during CI builds. We should workaround these issues like others did:

- https://github.com/kiegroup/kie-wb-common/pull/3416

Modifications:

Add extra maven options during build to reduce the likelyness of timeouts / resets

Result:

More stable builds"
86762030cf023fab7cbcb474daa2a95b37b3e32f,"Use profile for overriding properties when building on the CI (#11232)

Motivation:

0f252139189c3d528bea280172f7f57e2abe9b52 introduced some properties that were used to make builds more stable on the ci. All of these properties were duplicated everywhere, this made it hard to maintain

Modifications:

- Add profile which sets the properties.
- Just use the profile when build on the ci

Result:

Easier to maintain custom properties for the ci build"
400858cd5e5b8b3b58570bad08cd4156d7a6371e,"Introduce BrotliDecoder (#10960)

Motivation:

Netty lacks client side support for decompressing Brotli compressed response bodies.

Modification:

* Introduce optional dependency to brotli4j by @hyperxpro. It will be up to the user to provide the brotli4j libraries for the target platform in the classpath. brotli4j is currently available for Linux, OSX and Windows, all for x86 only.
* Introduce BrotliDecoder in codec module
* Plug it onto `HttpContentDecompressor` for HTTP/1 and `DelegatingDecompressorFrameListener` for HTTP/2
* Add test in `HttpContentDecoderTest`
* Add `BrotliDecoderTest` that doesn't extend `AbstractDecoderTest` that looks flaky

Result:

Netty now support decompressing Brotli compressed response bodies."
0d009033ebc0401be740995afbd0780e251da668,"Re-order list of resolvers according to their searchOrder (#11236)

Motivation:
Mac OS specific DNS resolver fails to take into account search order
of resolvers causing wrong resolver being used is some circumstances

Modifications:
Re-order array of resolvers using their sort order as an ordering key.
Final order is opposite of the search order to make sure that resolver
with the lower sort order goes last (so it overrides previous one
in the `resolverMap`).

Result:
Fixes issue https://github.com/netty/netty/issues/11225"
3ecb32357c45529deb701b1e956395fdef2b95b1,"Use `PlatformDependent#normalizedOs()` instead of reading `os.name` prop (#11239)

Motivation:

`PlatformDependent#normalizedOs()` already caches normalized variant of
the value of `os.name` system property. Instead of inconsistently
normalizing it in every case, use the utility method.

Modifications:

- `PlatformDependent`: `isWindows0()` and `isOsx0()` use `NORMALIZED_OS`;
- `PlatformDependent#normalizeOs(String)` define `darwin` as `osx`;
- `OpenSsl#loadTcNative()` does not require `equalsIgnoreCase` bcz `os`
is already normalized;
- Epoll and KQueue: `Native#loadNativeLibrary()` use `normalizedOs()`;
- Use consistent `Locale.US` for lower case conversion of `os.name`;
- `MacOSDnsServerAddressStreamProvider#loadNativeLibrary()` uses
`PlatformDependent.isOsx()`;

Result:

Consistent approach for `os.name` parsing."
57a70c5d836a6b897ee03e0709f1daa7cb77f2cf,"Update conscrypt and add workaround for test failure (#11238)

Motivation:

Conscrypt not correctly filters out non support TLS versions which may lead to test failures.

Related to https://github.com/google/conscrypt/issues/1013

Modifications:

- Bump up to latest patch release
- Add workaround

Result:

No more test failures caused by conscrypt"
00fd4ea2647ae3551508654ddff7dfb7e2ab0e61,"Disable TLSv1 and TLSv1.1 by default (#11237)


Motivation:

TLSv1 and TLSv1.1 is considered insecure. Let's follow the JDK and disable these by default

Modifications:

- Disable TLSv1 and TLSv1.1 by default when using OpenSSL.
- Add unit tests

Result:

Use only strong TLS versions by default when using OpenSSL"
d984d4422ca36aac4ddcdb54362f12b589e52f71,"Use the same maven cache for all (#11241)

Motivation:

We should use the same maven cache for all builds so we can re-use as much of the downloaded maven dependencies as possible

Modifications:

- Just use the same cache for all

Result:

Hopefully be able to re-use most of the dependencies"
c83601167fa02315f8860df3c7e4872333d9e8fa,"Correctly setup cache to be able to make use of different restore keys (#11248)

Motivation:

We should setup the caching so it will be able to use different restore keys and so almost never need to start from scratch

Modifications:

Adjust caching config to make use of different restore keys for maven caching but also docker caching

Result:

Better cache usage"
52dfe6c2c00135fcbfdfa06b49c9b50add943f87,"Fix java version for java16 (#11243)


Motivation:

When trying to compile with java16 we should use adopt@1.16*

Modifications:

- Use adopt@1.16.0-1-
- Upgrade to blockhoud 1.0.6 to be able to support java16

Result:

Use correct java version / flavor"
da2f7a414e30517f97d6902a4a94988785995e84,"Cleanup test classes

Motivation:

We had some println left in the test-classes.

Modifications:

Remove println usage

Result:

Cleanup"
d0b7f76b9b1de53878137595992f09b000709eec,"Use tasks by default when using openssl based SSL provider (#11242)

Motivation:

We introduced the ability to offload certain operations to an executor that may take some time to complete. At the moment this is not enabled by default when using the openssl based SSL provider. Let's enable it by default as we have this support for some while now and didnt see any issues yet. This will also make things less confusing and more consistent with the JDK based provider.

Modifications:

Use true as default value for io.netty.handler.ssl.openssl.useTasks.

Result:

Offloading works with openssl based SSL provider as well by default"
c443bc40fa997262b9057c8c50e205e73099c7e3,"Use MAVEN_OPTS to setup timeouts for dependency downloads (#11250)

Motivation:

Just use MAVEN_OPTS to setup all the timeouts etc for dependency downloads. This way we at least can be sure these are applied.

Modifications:

- Use MAVEN_OPTS
- Remove ci profile
- Remove unused settings.xml file
- Always use ./mvnw

Result:

Build stability improvements"
11e6a77fba9ec7184a558d869373d0ce506d7236,"Change asterisk to 'x' in FQDN of SelfSignedCertificate (#11245)

Motivation:

`SelfSignedCertificate` creates a certificate and private key files and store them in a temporary directory. However, if the certificate uses a wildcard hostname that uses asterisk *, e.g. `*.shieldblaze.com`, it'll throw an error because * is not a valid character in the file system.

Modification:
Replace the asterisk with 'x'

Result:
Fixes #11240"
fa8f7a3510d0dbb57488272cf5ba92cca8076794,"Add DefaultHostsFileEntriesResolver#addresses to provide all hosts file's entries for a hostname (#11246)


Motivation:
DefaultHostsFileEntriesResolver should provide all hosts file's entries for a hostname when
DnsNameResolver#resolveAll as opposed to the current implementation where only the first
entry is taken into consideration

Modification:
- Add DefaultHostsFileEntriesResolver#addresses to provide all hosts file's entries for a hostname
- Add HostsFileEntriesProvider to provide all hosts file's entries for a hostname and to keep
backwards compatibility for HostsFileEntries and HostsFileParser
- DnsNameResolver#resolveAll uses the new DefaultHostsFileEntriesResolver#addresses
- BlockHound configuration: replace HostsFileParser#parse with HostsFileEntriesProvider$ParserImpl#parse
as the latter does the parsing
- Add junit tests

Result:
Fixes #10834

* Address feedback"
265b2ea9bc4bc75eea4ab8390d6fea479677c392,"Fix typo in DnsCodecUtil class (#11252)

Motivation:

There is a typo in the javadocs

Modification:

correct grammar mistakes

Result:

cleanup"
78050c59abdb09cbdd8b4d0ce94e91514a6d6e5f,"Don't create a new ParserImpl on each parser() call (#11255)

Motivation:

ParserImpl is stateless and so we can use the same instance multiple times

Modifications:

- Make constructor private
- Return the same instance all the time

Result:

Less object creation"
9ca4e21ea096bfb1d681fbafae67a222dcf6de69,Fix typo in release workflow
060889da5ddb2fb4da93058a3ba646a86ca6ea8a,Fix another typo in the release workflow
c22642629ddf9d8bc467b9e7818442fc1d109d02,"Add script to copy apidocs and xref to netty-website

Motivation:

After the release was done we need to also copy the apidocs and xref to the netty-website

Modifications:

Add script that does the copy etc

Result:

Less manual steps to remember"
67bedf0efee3d244890855015ae0d3641383dd81,[maven-release-plugin] prepare release netty-4.1.64.Final
d5c81d9a3efdcdaa064f3801996bdcad0701fcc6,[maven-release-plugin] prepare for next development iteration
5178b2c7a5eb876f06912753e8251836bc3f1051,"make Slf4JLoggerFactory be singleton (#11253)

Motivation:

The current initialization of Slf4JLoggerFactory is not singleton.

Modification:

Use Slf4JLoggerFactory.INSTANCE to initialize Slf4JLoggerFactory.

Result:

The instance of Slf4JLoggerFactory became a singleton."
a273c231fd409935343fc7e36fe5b62ee05201c8,"Add profile for generating javadocs and xref files (#11259)

Motivation:

When changing the netty-all artifact to not include any sources we also removed the ability to generate the javadocs / xref files for our website

Modifications:

- Add new profile which will generate the files
- Add script which generates all the files and copy these over to the netty-website

Result:

Easier to generate files for website"
ccca3959fd64b133edca855925fb68d077c3a8a2,"Fix loading of the native library for DNS resolutions on MacOS (#11260)

Motivation:

Cannot load the native library for DNS resolutions on MacOS.
The exception below is observed:

18:02:43.453 [Test worker] ERROR i.n.r.d.DnsServerAddressStreamProviders - Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS.
java.lang.reflect.InvocationTargetException: null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at io.netty.resolver.dns.DnsServerAddressStreamProviders.<clinit>(DnsServerAddressStreamProviders.java:64)
	at io.netty.resolver.dns.DnsNameResolverBuilder.<init>(DnsNameResolverBuilder.java:60)
	at reactor.netty.transport.NameResolverProvider.newNameResolverGroup(NameResolverProvider.java:432)
...
Caused by: java.lang.UnsatisfiedLinkError: io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.resolvers()[Lio/netty/resolver/dns/macos/DnsResolver;
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.resolvers(Native Method)
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.retrieveCurrentMappings(MacOSDnsServerAddressStreamProvider.java:127)
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.<init>(MacOSDnsServerAddressStreamProvider.java:123)

This is a regression made with #11239

Modification:

When checking for OS, an exception must be thrown when the OS is not MacOS

Result:

The native library for DNS resolutions on MacOS can be loaded"
8a03a1db7dd4c73317478d4a88b91f98c6473baa,"Ensure we fail if native lib can not be loaded on macos (#11261)


Motivation:

ccca3959fd64b133edca855925fb68d077c3a8a2 fixed a regression which caused the native resolver code to not be loaded but this was not reported by the tests.

Modifications:

Adjust tests to actually fail the build if we cant load the native lib

Result:

Ensure we don't introduce another regression in the future"
6e866317d28cfd1e9cadc301bb488b654ee87797,"Ensure we can load the native library or fail the build (#11262)

Motivation:

We used assumeTrue(...) in some places before to detect if we could load the native library but this could lead to the sitation that we not notice if we break native loading.

Modifications:

Always fail if we cant load the native library

Result:

Ensure we not cause any regression in the native loading code in the future"
cc28ec2b921dc20360303789168eff6b5fe44927,"Remove usage of non-existing ci profile (#11270)

Motivation:

c443bc40fa997262b9057c8c50e205e73099c7e3 removed the CI profile but we missed to adjust the docker-compose.yaml file

Modifications:

Remove -Pci as the profile doesn't exist anymore

Result:

No more warning during build"
6f193193ea757f6d6cde0fcc45bd0ebb0088f9de,"Upgrade logback dependency due CVE (#11271)

Motivation:

Older version of logback are affected by [CVE-2017-5929]. While its an optional dependency we should upgrade

Modifications:

Upgrade to 1.2.3

Result:

No more reports about using affected logback version"
3972bacd601031bb6ae683435da79cc8ef0c03e7,"Provide a way to pass through a certain HTTP upgrade request (#11267)


Motivation:

A user might want to handle a certain HTTP upgrade request differently
than what `HttpServerUpgradeHandler` does by default. For example, a
user could let `HttpServerUpgradeHandler` handle HTTP/2 upgrades but
not WebSocket upgrades.

Modifications:

- Added `HttpServerUpgradeHandler.isUpgrade(HttpRequest)` so a user can
  tell `HttpServerUpgradeHandler` to pass the request as it is to the
  next handler.

Result:

- A user can handle a certain upgrade request specially."
72db32a80123227f005b904e54d3a798787cf5e2,"Don't include netty-examples as dependency for netty-all (#11273)

Motivation:

We shouldn't include netty-examples as dependency for netty-all as this will try to pull in all sorts of dependencies which are optional.

Modifications:

Remove dependency on netty-examples

Result:

Related to https://github.com/netty/netty/issues/11272"
7c955a19dce2e7ea95e15a5c578e7e71d0d4a238,"Redirect Log4J 1.x to Log 2.x (#11264)

Removes flag by Whitesource vulnerability scanner

Motivation:

WhiteSource vulnerability scan flags the Log4J 1.x stream as vulnerable.

Modification:

Replaced reference to `log4j` with `log4j-1.2-api`
Ran `mvn test` (on a Mac) successfully

Result:

Fixes #11263"
1a67c1feb8854fa4e9244926fe8798767b8c40e1,"Correctly cleanup jars created during shading tests (#11276)

Motivation:

We need to ensure we correctly cleanup all the jars that are build for the integration tests that verify shading otherwise we may deploy these during release.

Modifications:

Correctly remove all the generated jars

Result:

Not deploy the jars by mistake"
08dbd7275810b940528ac1bbc910f6904cd42e4e,"Fail the build if we can't load the OpenSSL library (#11269)


Motivation:

We should better fail the build if we can't load the OpenSSL library to ensure we not introduce a regression at some point related to native library loading

Modifications:

Remove usages of assumeTrue and let the tests fail if we cant load the native lib

Result:

Ensure we not regress"
037eddd5a2f01dc4dde340400822ecf11207191a,"Fix netty-all artifact (#11274)

Motivation:

612ab584489eae74b28ce0bc1b75fb23c5d24b57 did change the way how netty-all was produced by unfortunally it messed up the dependency graph for our native artifacts. This commit reverts changes done by 612ab584489eae74b28ce0bc1b75fb23c5d24b57 and also clean up the profiles

Modifications:

netty-all is useable again

Result:

Fixes https://github.com/netty/netty/issues/11272"
8be7c5b860aae8bf73a93283238b9e0e8f78febb,Delete tag if already exist locally
eca0e160edcf614b9779e93152a43ddcf5879d0d,"Add license header to our scripts and workflows (#11282)

Motivation:

We should have license header whenever possible.

Modifications:

Add header to scripts and workflow config

Result:

More clear licensing"
9e06241ddbe4d3aedc7994d37450013de276f062,[maven-release-plugin] prepare release netty-4.1.65.Final
02142a25107901e8be3b43a4485297af67b5e41b,[maven-release-plugin] prepare for next development iteration
09336b5a049872f8738a215184afc6b9e15d0cc7,Checkout previous branch again after finish copy the docs
bed04fc5975c305750ffbdabcd66b352616d0c1d,"Don't include benchmarks and tests in the generated javadocs

Motivation:

We shouldn't include benchmarks and tests in the generated javadocs to keep things clean

Modifications:

Add some more excludes

Result:

Javadocs for benchmarks and tests are not published"
9747739962dc9ca620417568d4f4de4d5659547a,"Change docs of method io.netty.util.internal.MathUtil#isOutOfBounds (#11281)

Motivation:

1. The docs about the 'retun value' of the method `io.netty.util.internal.MathUtil#isOutOfBounds` is not correct.
2. The capacity parameter should be checked for overflowed case.

Modification:

1. Changed the doc to:

>  @return {@code false} if the requested {@code index} and {@code length} will fit within {@code capacity}.
>  {@code true} if this would result in an index out of bounds exception.

2. Improved the bounder checking logic.

Result:
Fixes #11279 
Fixes #11280"
bb800d606761fc31f926f0d4eea877d3a27e479a,"Delete obsolete javadoc warning about pendingTasks() method expensiveness (#11287)

Co-authored-by: Roman Fedorov <roman.fedorov@spikeapp.com>"
7b064700a0e65a933793345f013008690054a7ea,"correct the doc of methods:io.netty.buffer.ByteBuf#setBytes(int, io.netty.buffer.ByteBuf) and io.netty.buffer.ByteBuf#setBytes(int, io.netty.buffer.ByteBuf, int) (#11290)"
cfaed1219f883cc23974342a51444d8fbe84cc45,"Add fast path in ByteBufUtil.compare and ByteBufUtil.equals methods (#11296)

Motivation:

When object-references are both same, the method should return 0 directly with no necessary go loop&compare the content of the ByteBuf.

Modification:

Added short circuit when both object-references are the same for equals and compare methods.

Result:

Added short circuit code."
e9a8eaeb18bfdfc414659dcebc0f831f8de4e33d,"Migrate codec-smtp tests to JUnit 5 (#11309)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in codec-smtp tests

Result:

Related to https://github.com/netty/netty/issues/10757"
187c6015b40e820b1dcabd5e82c7066d2f143372,"Migrate codec-haproxy tests to JUnit 5 (#11308)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in codec-smtp tests

Result:

Related to https://github.com/netty/netty/issues/10757"
28d4600aa6204456253ef2f41fca560e156a06df,"Migrate codec-xml tests to JUnit 5 (#11311)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in codec-smtp tests

Result:

Related to https://github.com/netty/netty/issues/10757"
7be16c549b3bd88c78958ed91ad8665e4e4c9c4d,"Migrate codec-dns tests to JUnit 5 (#11307)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in codec-dns tests

Result:

Related to https://github.com/netty/netty/issues/10757"
c6aaaffec256a358e8949e1cc7fdde3502a8a6fa,"Migrate codec-memcache tests to JUnit 5 (#11310)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in codec-memcache tests

Result:

Related to https://github.com/netty/netty/issues/10757"
6ffb001caf116716ed648bfb1240063138d388da,"Migrate codec-stomp tests to JUnit 5 (#11312)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in codec-stomp tests

Result:

Related to https://github.com/netty/netty/issues/10757"
a63a4d99e07cbce92c0d6cc0017f4318313323b7,"Migrate handler-proxy tests to JUnit 5 (#11313)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in  handler-proxy  tests

Result:

Related to https://github.com/netty/netty/issues/10757"
22faf32c253b465d4b188afa377b015020f54ccc,"Migrate codec-socks tests to JUnit 5 (#11314)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
bfd2c5ac8ac83b1983d6f8ae20595e469b2aafbe,"Migrate transport tests to JUnit 5 (#11315)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
cb1b3517dca1457f7067cfa44b5410d888d9e83d,"Don't iterate through active h2-streams if `lastStreamId` is MAX_VALUE (#11304)

Motivation:

Incoming `Http2GoAwayFrame#lastStreamId()` tells what was the last
streamId that the remote peer takes for processing [1]. We fire a
userEvent for all streams above that value to let users know those are
safe to retry on another connection. There is no need to go through
`forEachActiveStream` if `lastStreamId == Integer.MAX_VALUE` because
none of the streams can have id greater that MAX_VALUE.

1. https://datatracker.ietf.org/doc/html/rfc7540#section-6.8

Modifications:

- Return fast from `onHttp2GoAwayFrame` in `Http2MultiplexCodec` and
`Http2MultiplexHandler` if `lastStreamId() == Integer.MAX_VALUE`;

Result:

No unnecessary iteration over active streams on GO_AWAY if
`lastStreamId() == Integer.MAX_VALUE`."
0ff93519a43c7ef1e299f531461a5b665a85f143,"Add builds for windows (#11284)

Motivation:

Let's also build on windows during PR validation

Modifications:

Add build on windows during PR

Result:

Validate that all also pass on windows"
f81149324ff42ee375d094b20ac481e40206f678,"Automatically use netty-tcnative-boringssl-static on windows (#11317)

Motivation:

We only release a static compiled version of netty-tcnative for windows so we need to ensure we use it when on windows and not try to use a dynamic build version.

Modifications:

Automatically renable the boringssl profile when on windows

Result:

Fixes https://github.com/netty/netty/issues/11302"
5e71336ffbea4f0c7573b84ef5b1e81ea779381c,"Migrate codec tests to JUnit 5 (#11306)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
a743b74bfbbe3cd3fd0c1050e793df011060a61d,"Remove not needed null check (#11303)

Motivation:

throw exception if there is no method, it never is null, condition is always true

Modification:

remove unnecessary condition

Result:

cleanup"
3efd9642ca17b9470f38eea8d100e4cec9c41291,"Migrate common tests to JUnit 5 (#11319)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
84826a4ea61168bf75e2d51a7fc16347b85640f3,"Migrate codec-redis tests to JUnit 5 (#11318)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
b646a2670ad0025f9c894df478125071adeaa1ed,"Some minor cleanups for TypeParameterMatcher (#11286)

Motivation:

The code in TypeParamterMatcher can be simplified and cleaned up.

Modification:

Cleanup

Result:

Cleanup"
ac3f823cce911b5239f3d01c9f6b44be683b2e48,"Migrate codec-http tests to JUnit 5 (#11316)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
b89a807d15fd925c21d3c875836145cd5302c8c9,"Migrate buffer tests to JUnit 5 (#11305)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
bc7434aedb6f25b2c3f6679340e4d540c5ca8815,"Migrate testsuite, transport-native-epoll, transport-native-kqueue, and transport-native-unix-common-tests tests to JUnit 5 (#11320)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
2ea670021bed5e7886042e1d2fe90b5725789e6e,"Migrate transport-native-unix-common tests to JUnit 5 (#11321)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
0ac8835e36ca20c33dc58d4710b23d95525b696d,"Migrate testsuite-shading tests to JUnit 5 (#11323)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
496ba801d610753ebf364b1bfeca916ea5c09c21,"Migrate transport-blockhound-tests tests to JUnit 5 (#11322)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
83290c5a4b9f45d4a74b70c62346a11a11fdcac1,"Migrate resolver-dns tests to JUnit 5 (#11326)

Motivation:

JUnit 5 is more expressive, extensible, and composable in many ways, and it's better able to run tests in parallel.

Modifications:

Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757"
cfe631ad0556b83f564babcb1616f4efc902ec59,"Add default block in DefaultHttpHeaders (#11329)

Motivation:

Every switch block should also have a default case.

Modification:

Add default block in DefaultHttpHeaders to ensure we not fall-through by mistake

Result:

Cleanup

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
c098b48692c1b88673e236112b12d75e1ff35568,"Add default block in AbstractDnsMessage (#11327)

Motivation:

Every switch block should also have a default case.

Modification:

Add default block in AbstractDnsMessage to ensure we not fall-through by mistake

Result:

Cleanup

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
b7e23e2c39e1f4ba96b2ca2bd92c3c7cf6fa93d4,"Add default block in DnsOpCode (#11328)

Motivation:

Every switch block should also have a default case.

Modification:

Add default block in DnsOpCode to ensure we not fall-through by mistake

Result:

Cleanup

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
4d681bfc6f19deaf63a42dd0983d15ef89224318,"Fix test-error which was introduced by porting tests to junit5 (#11330)

Motivation:

b89a807d15fd925c21d3c875836145cd5302c8c9 moved the buffer tests to junit5 but introduced a small error which could lead to test-failure

Modifications:

Correctly override the method and assert that super throws (as we can not expand the buffer).

Result:

No more test failures"
18e92304a700c1b3664f5a3cf24ee3ed58bafbdd,"Move sctp tests to correct directory and migrate to junit5 (#11331)


Motivation:

The sctp tests were in the incorrect directory and so were never executed. Beside this we also should use junit5

Modifications:

- Move to correct directory
- Use JUnit5 in tests

Result:

Related to https://github.com/netty/netty/issues/10757 and fixes https://github.com/netty/netty/issues/11325"
fa58542417df4f29cc3837549c373b1f40c0fb7b,"Remove unUsed import statement (#11338)

Motivation:

Remove unused import statement

Modification:

Remove unused import statement

Result:

Cleanup"
103f1d269ed0e4cb335241286e53973703574626,"HttpPostMultipartRequestDecoder IndexOutOfBoundsException error (#11335)

Motivation:

When searching for the delimiter, the decoder part within HttpPostBodyUtil
was not checking the left space to check if it could be included or not,
while it should.

Modifications:

Add a check on toRead being greater or equal than delimiterLength before
going within the loop. If the check is wrong, the delimiter is obviously not found.

Add a Junit test to preserve regression.

Result:

No more IndexOutOfBoundsException

Fixes #11334"
a64a7eb39db8a7a2f5087407427112152d45eacd,"Remove useless code (#11339)

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>

Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
d334146ccde7be7ffc5bdd14e6a5bc36685be940,"Add default block in IdleStateHandler (#11341)

Motivation:

We should have a default case in every switch block.

Modification:

Add default block in IdleStateHandler

Result:

Cleanup

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
8d815d55f93bc0787a1afd3b08543000f9f21bbe,"Add default block in HttpClientCodec (#11352)

Motivation:

There should always be a default in switch blocks.

Modification:

Add default

Result:

Code cleanup.

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
6621e4a60f24064e8e5757678179056b42a31436,"Add default block in HttpObjectDecoder (#11342)

Motivation:

There should always be a default in switch blocks.

Modification:

Add default

Result:

Code cleanup.

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
dbf56c527d6891e6a5c63fca64cefc403b3d020d,"Fix IpSubnetFilterRule with IPv6 Default Route does not accept all IPv6 addresses (#11351)

Motivation:

In this issue(https://github.com/netty/netty/issues/11349 ),IpSubnetFilterRule needs to support ipv6 reserved addresses, such as 8000::, but the current implementation does not support

Modification:

Added support for default rule

Result:

Fixes https://github.com/netty/netty/issues/11349

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
113ed8fe4fd79641b17244e54fd9b7537883023d,"Fix typo in word `accelerating` (#11359)

Motivation:
There is a small typo in `pom.xml`. Typo is: `acclerating`, however it should be `accelerating`.

Modification:
Corrected the typo.

Result:
Typo-free `pom.xml`."
10b3cee3fa55a11dac570cefc8abd76e03aed6ad,"Fix typo in AbstractMultiSearchProcessorFactory (#11368)

Motivation:

There was a typo in the docs.

Modification:

occurence -> occurrence

Result:

Cleanup."
9f8bfa348e5437417cdfce0cd9d5a3c8ecec71a9,"Fix issue if encoding is enabled but not used (#11358)

Motivation:

Fixes an IllegalReferenceCountException

Modification:

Retained the buffers so the encoder works correctly.

Result:

Fixes #11357"
d5d6c3d3cf1718ad02838423954c407b8f806f73,"Make build log output less chatty (#11365)

Motivation:
When Maven does not run in batch mode, it will continuously print its progress as it downloads dependencies.
This can produce a very large amount of log output, that makes it harder to debug build failures.

Modification:
Make all Maven builds run in batch mode by adding the `-B` command line flag, and have transfer progress suppressed with the `-ntp` flag.
Some builds were already running batch mode but had the flag in a different location – these have had their `-B` flag moved so all builds are consistent.

Result:
Much less output in our build logs where Maven is just downloading stuff."
e69107ceaf247099ad9a198b8ef557bdff994a99,"Fix ServerCookieDecoder javadoc (#11372)

Motivation:
When decoding the cookies on the server, the ""Cookie"" HTTP request header value should be considered.
The ""Set-Cookie"" HTTP response header is used to send cookies from the server to the user agent.

Modification:
- Specify in javadoc that the ""Cookie"" HTTP request header value should be considered and
not the ""Set-Cookie"" HTTP response header value.

Result:
Correct ServerCookieDecoder javadoc"
625a7a1075749aa293a4680d78d0a7b1253ae3ab,"HttpUtil.getCharset() fails for charset in double-quotes (#11373)


__Motivation__

As described in https://github.com/netty/netty/issues/11370 we should support quoted charset values

__Modification__

Modify `HttpUtil.getCharset(CharSequence contentTypeValue, Charset defaultCharset)` to trim the double-quotes if present.

__Result__

`HttpUtil.getCharset()` now supports quoted charsets. Fixes https://github.com/netty/netty/issues/11370"
e12ae476667766878873eb6f3560c6286db0003c,"Modify List to Map of pooled redis message in FixedRedisMessagePool (#11300)

Motivation:

To simplify retrieving pooled message messages, add enums that can be used as key.

Modifications:

- Modify pooled collections from List to Map in FixedRedisMessagePool
- Allow to use enum as the key to easy get pooled message.
- Add unit tests

Result:

Users can get pooled message by enum instead of the whole string

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
c78afbc4f13ac4d6cb488fb14b31379960f03fff,"Remove tarball module (#11377)

Motivation:

We don't publish any tarballs these days so we can just remove the module

Modifications:

Remove tarball module and also adjust release scripts

Result:

Less code / config to mantain"
06f7deb0304ab58cb6f4d8ce3253160bf1ae78f4,"The MqttDecoder incorrectly skip bytes before throwing TooLongFrameException (#11362)


Motivation:

Commit c32c520edde1bd554314f51d76b3eda4858e404c incorrectly skip the bytes of the replay decoder buffer. The number of bytes to skip is determined by ByteBuf#readableBytes() instead of using ByteToMessageDecoder#actualReadableBytes(). As result it throws an exception because the ByteBuf provided will return a too large value (Integer.MAX_VALUE - reader index) causing a bound check error in the skipBytes method. This is not detected by the tests because most tests are calling the decode(...) method with a regular ByteBuf. In practice when this method is called with a specialized ByteBuf when channelRead(...) is called. Such tests should actually use channelRead with proper mocking of the ChannelHandlerContext

Modification:

- Rewrite the MqttCodecTest to use channelRead(...) instead of decode(...) and use proper mocking of ChannelHandlerContext to get the message emitted by the decoder.
- Use actualReadableBytes() instead of buff.readableBytes() to compute the number of bytes to skip

Result:

Skip correctly the number of bytes when a too large message is found and improve testing. See #11361

Signed-off-by: Julien Viet <julien@julienviet.com>"
50e0e8c5ca8466da9057efc5a1e65c20de2714dc,"Skip the windows tests when there is an entry for localhost in the hosts file (#11385)


Motivation:

The tests must be executed only when there is no hosts file or
there is no entry for localhost in the hosts file. The tested functionality
is relevant only in these use cases.

Modifications:

Skip the windows tests when there is an entry for localhost in the hosts file.

Result:

Fix failing tests on Windows CI when using GitHub Actions
Related to #11384"
0d5774a82b470833c5f8a84fa4708142a4801f52,"Make all compression codecs support buffers that don't have arrays (#11383) (#11387)

Motivation:
Various compression codecs are currently hard-coded to only support buffers that are backed by byte-arrays that they are willing to expose.
This is efficient for most of the codecs, but compatibility suffers, as we are not able to freely choose our buffer implementations when compression codecs are involved.

Modification:
Add code to the compression codecs, that allow them to handle buffers that don't have arrays.
For many of the codecs, this unfortunately involves allocating temporary byte-arrays, and copying back-and-forth.
We have to do it that way since some codecs can _only_ work with byte-arrays.
Also add tests to verify that this works.

Result:
It is now possible to use all of our compression codecs with both on-heap and off-heap buffers.
The default buffer choice has not changed, however, so performance should be unaffected.

Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
2f4f7135fb4e52d57a28b3256ddf43cb3a43dead,"Validate fixed header bits in MQTT (#11389)

Motivation:
The MQTT spec states that the bits in the fixed header must be set to specific values depending on message type. If a client sends a message with the wrong bits, the server must treat the message as malformed. Netty did not check the value of the reserved bits in the fixed header.

See:
MQTT3.1.1: http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180835
MQTT 5.0: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901023


Modification:
Add validation checks to MqttDecoder.java
Add unit tests to MqttCodecTest.java 
Fixed two instances where messages were generated for other unit tests with an incorrect fixed header.

Result:
Fixes #11379."
f1742c0e43aae592360358c648727ce074462269,"Accept smaller `server_max_window_bits` than requested (#11394)

Motivation:

Netty will fail a handshake for the Per-Message Deflate WebSocket
extension if the server response contains a smaller
`server_max_window_bits` value than the client offered.

However, this is allowed by RFC 7692:

> A server accepts an extension negotiation offer with this parameter
> by including the “server_max_window_bits” extension parameter in the
> extension negotiation response to send back to the client with the
> same or smaller value as the offer.

Modifications:

- Allow the server to respond with a smaller value than offered.
- Change the unit tests to test for this.

Result:

The client will not fail when the server indicates it is using a
smaller window size than offered by the client."
0c9a86db812573fbdc9f39b4ec4f29188248ff3a,"Log if the user tries to explicit set TLSv1.3 ciphers and using BoringSSL (#11392)


Motivation:

At the moment BoringSSL doesnt support explicit set the TLSv1.3 ciphers that should be used. If TLSv1.3 should be used it just enables all ciphers. We should better log if the user tries to explicit set a specific ciphers and using BoringSSL to inform the user that what is tried doesnt really work.

Modifications:

Log if the user tries to not use all TLSv1.3 ciphers and use BoringSSL

Result:

Easier for the user to understand why always all TLSv1.3 ciphers are enabled when using BoringSSL

Co-authored-by: Trustin Lee <trustin@gmail.com>"
ac177753d835286bb82fae3e731cb3f891510f4f,"Add GraalVM to the PR build matrix (#11405)

Motivation:

Native image compatibility is fragile and breaks easily, so we need a PR build to tell us when this happens.

Modification:

Add a graalvm-based build to the PR build matrix.

Result:

Every PR is now also tested on Graal."
956e1da2adb597164ff4a69aa19f97e0d7dde0be,"Update graal annotations dependencies GAV to allow license GPL2+CE (#11404)

Motivation:

We need to use a GraalVM dependency which uses GPL2 + CE.

Modifications:

- Update all graalvm dependencies to new GAV which introduces a license change from GPL2 to GPL2 + CE
- This also required a small bump on the general version from 19.2 to 19.3, which should be fine as 19.3 is an official maintained LTS version, while 19.2 wasn't.

Result:

Fixes: #11398

Signed-off-by: Paulo Lopes <pmlopes@gmail.com>"
98a3a0c0cb7e2b9076da8d335549ae60970cf8fe,"Recycler.WeakOrderQueue drop Object hasBeenRecycled (#11402)


Motivation:

WeakOrderQueue would drop object that has been recycled, even when it has space for it.
WeakOrderQueue#add should check DefaultHandler.hasBeenRecycler field  first

Modifications:

WeakOrderQueue test the DefaultHandler.hasBeenRecycler first

Result:

WeakOrderQueue would not drop object that has been recycled when there is space


Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Trustin Lee <t@motd.kr>"
5a658bb8875e5e13cbcf47cde417d88d9851e1ae,"`HttpUtil#normalizeAndGetContentLength()` should handle empty value (#11409)

__Motivation__

`HttpUtil#normalizeAndGetContentLength()` throws `StringIndexOutOfBoundsException` for empty `content-length` values, it should instead throw `IllegalArgumentException` for all invalid values.

__Modification__

- Throw `IllegalArgumentException` if the `content-length` value is empty.
- Add tests

__Result__

Fixes https://github.com/netty/netty/issues/11408"
6edb231bf501dc8b7ab0b234e8d7c86a685936cf,"Update to netty-tcnative 2.0.40.Final (#11411)

Motivation:

A new version of netty-tcnative was released

Modifications:

Update to 2.0.40.Final

Result:

Use latest version"
a71ec15fc488ff6c85fc164749ff9a1ccc46de9f,"Correctly use HandshakeStatus.NEED_WRAP when a handshake failed and a alert was produced (#11412)

Motivation:

We need to ensure we always ""consumed"" all alerts etc via SSLEngine.wrap(...) before we teardown the engine. Failing to do so may lead to a situation where the remote peer will not be able to see the actual cause of the handshake failure but just see the connection being closed.

Modifications:

Correctly return HandshakeStatus.NEED_WRAP when we need to wrap some data first before we shutdown the engine because of a handshake failure.

Result:

Fixes https://github.com/netty/netty/issues/11388"
6c618e30afdd3b92f3ef3c1054639a778c612e47,"CombinedChannelDuplexHandler.removeOutboundHandler() cause connect(...) to not pass the correct parameters (#11414)


Motivation:

Due a bug we did not pass the correct remote and localaddress to the next handler if the outbound portion of the CombinedChannelDuplexHandler was removed

Modifications:

- Call the correct connect(...) method
- Refactor tests to test that the parameters are correctly passed on
- Remvoe some code duplication in the tests

Result:

CombinedChannelDuplexHandler correctly pass parameters on"
d99a8f75b4cecfc6823cc8ec4d305958a7b3c90d,"Use Two way algorithm to optimize ByteBufUtil.indexOf() method (#11367)

Use Two way algorithm to optimize ByteBufUtil.indexOf() method

Motivation:

ByteBufUtil.indexOf can be inefficient for substring search on
ByteBuf, in terms of algorithm complexity (O(needle.readableBytes * haystack.readableBytes)), consider using the Two Way algorithm to optimize the ByteBufUtil.indexOf() method

Modification:

Use the Two Way algorithm to optimize ByteBufUtil.indexOf() method.

Result:

The performance of the ByteBufUtil.indexOf() method is higher than the original implementation"
d8ad931488f6b942dabe28ecd6c399b4438da0a8,"`ByteBufFormat ` constructor for LoggingHandler (#11420)

__Motivation__

`LoggingHandler` misses a constructor variant that only takes `ByteBufFormat`

__Modification__

Added the missing constructor variant.

__Result__

`LoggingHandler` can be constructed with `ByteBufFormat` only.

Co-authored-by: Nitesh Kant <nitesh_kant@apple.com>"
8c73dbe9bdf02ecf061f6070b831498f80bf82a9,"Migrate codec-http2 to junit5 (#11422)


Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust codec-http2 tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
29be99c5381b721548e2fd29797f33ea8945698e,"Migrate the rest of codec-http2 to junit5 (#11424)

Motivation:

8c73dbe9bdf02ecf061f6070b831498f80bf82a9 did migrate the codec-http2 code to use junit5 but missed two classes.

Modifications:

Adjust the rest of codec-http2 tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
2c3e78566ed8a7e07ef1ab6cfa398aea4473fae3,"Migrate resolver to junit5 (#11425)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust resolver tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
be606df4f0b865bf0fb0cc358f34f273487a831d,"Migrate codec-redis to junit5 (#11426)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust codec-redis tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
371657510261d8c3483e7208c4aa8eac446396ac,"Migrate codec to junit5 (#11426) (#11430)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust codec tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
94a4880358a6dd0d32a77e1bd02d1475a3babef4,"Migrate codec-mqtt to junit5 (#11431)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust codec-mqtt tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
8d76f402b1d27eba44cf98877c86128280df4a0a,"Migrate transport to junit5 (#11431) (#11432)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust transport tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
194a81ff4f0304d928bbcfd57ff3e961e12ac8d4,"Fix Buffer Overflow During Lz4FrameEncoder Close (#11429)

Motivation:

We failed to account for the last header when estimating the buffer
size. If the data does not compress enough to make space for the
last header we would exceed the ByteBuf's capacity.

Modifications:

Call #ensureWritable with appropriate capacity for footer ByteBuf
befor writing footer.

Result:

If there is not enough space left in the buffer, the buffer will be
expanded."
801819b359935e5f4fa097b58396eb86787c848e,"Fix HttpHeaderValue#XML_HTTP_REQUEST case (#11433)

Motivation:

HTTP header values are case sensitive. The expected value for `x-request-with` header is `XMLHttpRequest`, not `XmlHttpRequest`.

Modification:

Fix constant's case.

Result:

Correct `XMLHttpRequest` HTTP header value."
3226e774853f95b50f0d2955e41884efebc9225f,"Add support for GMSSL (#11406) (#11410)

__Motivation__

Add support for GMSSL protocol to SslUtils.

__Modification__

Modify `SslUtils.getEncryptedPacketLength(ByteBuf buffer, int offset)` to get packet length when protocol is GMSSL.
Modify `SslUtils.getEncryptedPacketLength(ByteBuffer buffer)` to get packet length when protocol is GMSSL.

__Result__

`SslUtils.getEncryptedPacketLength` now supports GMSSL protocol. Fixes https://github.com/netty/netty/issues/11406"
20e4ccbd33176457dddd4d5abe1722afd92b1cd7,"Skip Brotli related tests on platforms which not support Brotli (#11435)


Motivation:

The native module is not yet available on aarch64 Mac / Windows thus causing tests in codec/ to fail (specifically all the Brotli ones, since the module could not be loaded).

Modification:

Disable Brotli tests when platform is not supported

Result:

Tests under codec/ now pass under Mac/aarch64 and Windows/aarch64"
2abe20a6b5f53a5e8c508b6abb9eeed9562cb5d7,"Tail tasks queue: configure separately from tasks queue (#11400)


Motivation:

IO transports (primarily epoll, but also applies to kqueue, nio) cant be configured with separate tail tasks queue factory -
instead single queue factory is used for both normal tasks and tail tasks.

Modifications:

Add constructor accepting tail EventLoopTaskQueueFactory to aforementioned transports

Result:

IO transports can be configured with separate tail tasks"
077e5f282cb1f16dd70c7b93cea5c097f93a2c34,"Fix deprecated GC logging switch (#11395)

Motivation:

This caused test failures due to the deprecation warning and produced a
dumpstream.

Modification:

Replace deprecated flag with recommended one.

Result:
Fix deprecation and cause of test failure in codec project."
126e9f873b2a8b64f9b1e082eeb3b1cd43e71553,"Revert ""Fix deprecated GC logging switch (#11395)"" (#11436)

This reverts commit 077e5f282cb1f16dd70c7b93cea5c097f93a2c34."
750d23583c187b4e8dafdfea3f4fbeaf1d9be7cd,"Add ALPN Buffering to support HTTP/2 Prior Knowledge (#11407)

Motivation:
Currently, Netty cannot handle HTTP/2 Preface messages if the client used the Prior knowledge technique. In Prior knowledge, the client sends an HTTP/2 preface message immediately after finishing TLS Handshake. But in Netty, when TLS Handshake is finished, ALPNHandler is triggered to configure the pipeline. And between these 2 operations, if an HTTP/2 preface message arrives, it gets dropped.

Modification:

Buffer messages until we are done with the ALPN handling.

Result:
Fixes #11403.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
bc206ff173d171bfe19829858dcb0e43938ebc7c,"Delay initialization of io.netty.handler.codec.compression.BrotliDecoder to runtime (#11428)

Motivation:
Including codec-http in the project and building a native-image out of it using a GraalVM 21.2 nightly can result in a failure.

Modification:
By delaying the initialization of `io.netty.handler.codec.compression.BrotliDecoder` to runtime, native-image will not try to eagerly initialize the class during the image build, avoiding the build failure described in the issue.

Result:
Fixes #11427"
8003ea8a034ce4b4a7536e567d8c03600c37a5ef,"Migrate transport-udt to junit5 (#11439)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust transport-udt tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
c82c17782cd803561342773c341dc9811a742339,"Migrate common to junit5 (#11431) (#11438)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust common tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
5179e532940924accefdc396914a292344550833,"Migrate codec-http to junit5 (#11440)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust codec-http tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
7c6be99da0b7403f42725898478e0d2ae8eb4694,"Migrate rest of epoll module to junit5 (#11442)


Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust missing epoll tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
842e73f8d3d0085590b900ecb365c563fa3406df,"Migrate microbenchmark to junit5 (#11440) (#11443)

Motivation:

We should update to use junit5 in all modules.

Modifications:

Adjust microbenchmark to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
c97981403d02f4386da8fcb8840118c37a4caf93,"Improve `PerMessageDeflateClientExtensionHandler` (#11413)

Motivation:

The `PerMessageDeflateClientExtensionHandler` has the following strange behaviors currently:

* The `requestedServerNoContext` parameter doesn't actually add the `server_no_context_takeover` parameter to the client offer; instead it depends on the requested server window size.
* The handshake will fail if the server responds with a `server_no_context_takeover` parameter and `requestedServerNoContext` is false. According to RFC 7692 (7.1.1.1) the server may do this, and this means that to cover both cases one needs to use two handshakers in the channel pipeline: one with `requestedServerNoContext = true` and one with `requestedServerNoContext = false`.
* The value of the `server_max_window_bits` parameter in the server response is never checked (should be between 8 and 15). And the value of `client_max_window_bits` is checked only in the branch handling the server window parameter.

Modification:

* Add the `server_no_context_takeover` parameter if `requestedServerNoContext` is true.
* Accept a server handshake response which includes the server no context takeover parameter even if we did not request it.
* Check the values of the client and server window size in their respective branches and fail the handshake if they are out of bounds.

Result:

There will be no need to use two handshakers in the pipeline to be lenient in what handshakes are accepted."
7cc31b865366f31790895f573b2e6c97f171d382,"Use Junit5 for handler module (#11444)


Motivation:

We should aim to use junit5 everywhere

Modifications:

Migrate most of the handler module to use junit5

Result:

Part of #10757"
ae7944459d5dae7f6ea211889ab8742e612a3c1b,Fix test failure introduced by 7cc31b865366f31790895f573b2e6c97f171d382
7c57c4be17ed245d8e0c3b5270f516690188d219,"Introduce OpenSslAsyncPrivateKeyMethod which allows to asynchronously sign / decrypt the private key (#11390)

Motivation:

At the moment we only support signing / decrypting the private key in a synchronous fashion. This is quite limited as we may want to do a network call to do so on a remote system for example.

Modifications:

- Update to latest netty-tcnative which supports running tasks in an asynchronous fashion.
- Add OpenSslAsyncPrivateKeyMethod interface
- Adjust SslHandler to be able to handle asynchronous task execution
- Adjust unit tests to test that asynchronous task execution works in all cases

Result:

Be able to asynchronous do key signing operations"
f2295628e95476a27d2433658a7b50165102ac56,"`ApplicationProtocolNegotiationHandler` should drain buffer messages on channel close (#11445)


__Motivation__

`ApplicationProtocolNegotiationHandler` buffers messages which are read before SSL handshake complete event is received and drains them when the handler is removed. However, the channel may be closed (or input shutdown) before SSL handshake  event is received in which case we may fire channel read after channel closure (from `handlerRemoved()`).

__Modification__

Intercept `channelInactive()` and input closed event and drain the buffer.

__Result__

If channel is closed before SSL handshake complete event is received, we still maintain the order of message read and channel closure.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
266c98733927419413de34b4ef075dd2c21ce31a,"[Feature] Add zstd encoder (#11437)

Motivation:

As discussed in #10422, ZstdEncoder can be added separately

Modification:

Add ZstdEncoder separately

Result:

netty supports ZSTD with ZstdEncoder

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>
Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
ac91eaaae8b06b8954e4a5f4c68d4e17548af142,"Ensure we only try to wrap if handler was not removed yet. (#11455)

Motivation:
7c57c4be17ed245d8e0c3b5270f516690188d219 did add a way to async sign keys but did not guard against the handler been removed before try to wrap in cause of an error which could lead to a harmless NPE.

Modifications:

Add check

Result:

No more harmless NPE"
0b2e955aff1555616e0d5b1d5047f1737347bdfe,"Revert ""Introduce OpenSslAsyncPrivateKeyMethod which allows to asynchronously sign / decrypt the private key (#11390)""

This reverts commit 7c57c4be17ed245d8e0c3b5270f516690188d219."
ede7a604f185cd716032ecbb356b6ea5130f7d0d,"Add SslProtocols and Cipher suites constants (#11457)

Motivation:
Protocols and Cipher suites constants to prevent typos in protocol and cipher suites names and ease of use.

Modification:
Added Protocols and Cipher suites as constants in their respective classes.

Result:
Fixes #11393"
7e39b96402a2e99fcda1a1b45546fe4d4c491c8e,"Only run one SSL task per delegation (#11462)


Motivation:

We should only run one SSL task per delegation to allow more SSLEngines to make progress in a timely manner

Modifications:

- Only run one task per delegation to the executor
- Only create new SSL task if really needed
- Only schedule if not on the EventExecutor thread

Result:

More fair usage of resources and less allocations"
3e350993b70e3254db47ffa24c2b44a9048febe1,"Add script which can be used to build affected modules only (#11461)


Motivation:

At the moment we always build all modules. This script can be used to only build affected modules for a given change

Modifications:

Add script that will only build modules that are affected by a change

Result:

More targeted build"
7825fa8d7a1799032f4656d2b2fab61d50113436,"Add zstd http header value (#11463)

Motivation:

ZSTD has a wide range of uses on the Internet, so should consider adding `application/zstd` HTTP media-type and `zstd` content-encoding, see  https://tools.ietf.org/html/rfc8478

Modification:

Add `application/zstd` HTTP media-type and `zstd` content-encoding

Result:

netty provides `application/zstd` HTTP media-type and `zstd content-encoding` as http headers

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>
Co-authored-by: xingrufei <xingrufei@sogou-inc.com>"
fef761d03e4f8515d7b220cdd66fcdedeff5455d,"Introduce BrotliEncoder (#11256)

Motivation:
Currently, Netty only has BrotliDecoder which can decode Brotli encoded data. However, BrotliEncoder is missing which will encode normal data to Brotli encoded data.

Modification:
Added BrotliEncoder and CompressionOption

Result:
Fixes #6899.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
40fb6026efd2a9fc67049b437e4db5d6d81d688c,"Introduce OpenSslAsyncPrivateKeyMethod which allows to asynchronously sign / decrypt the private key (#11390) (#11460)

Motivation:

At the moment we only support signing / decrypting the private key in a synchronous fashion. This is quite limited as we may want to do a network call to do so on a remote system for example.

Modifications:

- Update to latest netty-tcnative which supports running tasks in an asynchronous fashion.
- Add OpenSslAsyncPrivateKeyMethod interface
- Adjust SslHandler to be able to handle asynchronous task execution
- Adjust unit tests to test that asynchronous task execution works in all cases

Result:

Be able to asynchronous do key signing operations"
d1ef28a22f1b14989987e14d13d2834cbed85d56,"Fix typo in ReferenceCountedOpenSslEngine (#11467)

Motivation:

There should be no typos in comments

Modifications:
```
alway -> always
```

Result:

Fixed typo."
e5adc1131ab1ecc892234689d5f5fb6d689fb8ee,"Only do a partial build for a few jobs when verify PRs (#11464)

Motivation:

Currently the PR verification takes a lot of time. We should try to only run builds for the affected modules in most cases to speed up the build.

Modifications:

Adjust docker files and workflow to only run build for affected modules for a lot of jobs while still run full builds for windows + java11 with BoringSSL

Result:

Hopefully quicker feedback loop when verify PRs"
3f9a5f50be78370c4a10471938d3eaf4a1b8e69f,"Add support for Unix domain datagram sockets when using native epoll/kqueue transport (#11423)

Motivation:

There are use cases when Unix domain datagram sockets are needed for communication. This PR adds such support for Epoll/KQueue.

Modification:

- Expose Channel, Config and Packet interfaces/classes for Unix domain datagram sockets. All interfaces/classes are in `transport-native-unix-common` module in order to be available for KQueue and Epoll implementations
- Add JNI code for Unix domain datagram sockets
- Refactor `DatagramUnicastTest` so that it can be used for testing also Unix domain datagram sockets
- Add Unix domain datagram sockets implementation for KQueue transport
- Add Unix domain datagram sockets implementation for Epoll transport

Result:

Fixes #6737"
6ce36f19095a2da337e91e5201d9dd316f365e57,"Add zstd http content compression support (#11470)

Motivation:

netty needs to support zstd content-encoding http content compression

Modification:

Add ZstdOptions, and modify HttpContentCompressor and CompressorHttp2ConnectionEncoder to support zstd compression

Result:

netty supports zstd http content compression

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
8cbdefae23c320c3f44de4a925119a84c329efa3,"HAProxyMessage.sourceAddress() can be null (#11475)

Motivation:

If `send-proxy-v2` is used `sourceAddress()` can be `null`.

Modification:

Update docs to reflect this.

Result:

Docs are more correct."
6085cd7ab6ad0efa1d3214a214ed2bb9538d5f34,"Update HttpContentCompressor to pass correct message to ObjectUtil (#11482)

Motivation:
In #11256, We introduced `Iterable` as a parameter but later in review, it was removed. But we forgot to change `compressionOptionsIterable` to just `compressionOptions`.

Modification:
Changed `compressionOptionsIterable` to `compressionOptions`.

Result:
Correct ObjectUtil message"
df22356a3a4d960834564c7ac4e5a97fe1959b08,"Refactor HttpContentCompressor using CompressionEncoderFactory (#11480)

Motivation:

The `HttpContentCompressor.beginEncode()` method has too many if else, so consider refactoring

Modification:

Create the corresponding `CompressionEncoderFactory` according to the compression algorithm, remove the if else

Result:

The code of `HttpContentCompressor` is cleaner than the previous implementation

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
98c446c49343f79504255e9adca7cdc017826edb,"Revert ""Only do a partial build for a few jobs when verify PRs (#11464)""

This reverts commit e5adc1131ab1ecc892234689d5f5fb6d689fb8ee."
7ec198ddf9480d77ca8557649fd5f45701af6657,"Fix JavaDoc and Run Brotli tests on Windows (#11468)

Motivation:
JavaDoc of StandardCompressionOptions should point towards public methods. Also, Brotli tests were failing on Windows.

Modification:
Fixed JavaDoc and enabled Brotli tests on Windows.

Result:
Better JavaDoc and Brotli tests will run on Windows

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
043e9e309e95cd53fdbc5e4e62eb00ba84752afd,"Remove rest of junit4 usage (#11484)

Motivation:

We did migrate all these modules to junit5 before but missed a few usages of junit4

Modifications:

Replace all junit4 imports by junit5 apis

Result:

Part of  https://github.com/netty/netty/issues/10757"
3b8e7c3e60abb1c48b666e98a2e1904f5ee3bf52,"Use Static Constants as Sample Data (#11485)

Motivation:
#11468 was merged but didn't fix tests completely. There is a fight between `LF` and `CRLF`. So to eliminate this, we should just get rid of them.

Modification:
Use a small sample dataset without `LF` and `CRLF`.

Result:
Simple and passing test."
876624a22b363d0302d1adb711c724cfc78afb54,"SelfSignedCertificate should work in http2 tests (#11486)

Motivation:

We need to add `--add-exports java.base/sun.security.x509=ALL-UNNAMED` when running the tests for codec-http2 as some of the tests use SelfSignedCertificate.

Modifications:

- Add `--add-exports java.base/sun.security.x509=ALL-UNNAMED` when running the tests for codec-http2
- Ensure we export correct when running with JDK12, 13, 14 and 15 as well

Result:

No more tests failure due not be able to access classes"
8337e3a9734fdc8c7d5f74cb75eb62d185987e7f,"Improve name matching in DNS answers (#11474)


__Motivation__

Upon receiving a DNS answer, we match whether the name in the question matches the name in the record. Some DNS servers we have encountered append a search domain to the record name which fails this match. eg: for question name `netty` and search domains `io` and `com`, we will do 2 queries: `netty.io.` and `netty.com.`, if the answer for `netty.io` contains `netty.com` then we ignore this record.

__Modification__

If the name in the record does not match the name in the question, append configured search domains to the question name to see if it matches the record name.

__Result__

Records names with appended search domains are still returned as valid answers."
2914134522f13f2e03b111be686681515c7989a8,"Disable flaky test for now (#11488)

Motivation:

JdkOpenSslEngineInteroptTest.testMutualAuthSameCerts() is flaky on the CI and so fails the PR build quite often.
Let's disable it for now until we were able to reproduce it locally and fix it.

Modifications:

Disable flaky test

Result:

More stable CI builds"
e236e99006bbe26a8dcae81c10f4aa151ed58468,"Migrate the rest of the ssl package to junit5 (#11483)


Motivation:

We should use junit5 everywhere.

Modifications:

- Refactor rest of tests to use junit5

Result:

Part of https://github.com/netty/netty/issues/10757"
55957d3e7551b7839e73e9757508538ffc517fd1,"SelfSignedCertificate should try BouncyCastle first (#11487)

Motivation:

In JDK version >= 9 the access to sun.* is not permitted anymore by default. Because of this we should better first try the BouncyCastle based implementation before falling back to the JDK based version.

Modifications:

Switch ordering of usage of BouncyCastle vs JDK internals.

Result:

Less surprising errors when using SelfSignedCertificate in Java >9"
9e8b8ff53ac432c77319f152a86a31664ef99167,"Fix a bug where SslHandler clients would not process Server Hello messages in a timely manner (#11472)

Motivation:
The TLS handshake must be able to finish on its own, without being driven by outside read calls.
This is currently not the case when TCP FastOpen is enabled.
Reads must be permitted and marked as pending, even when a channel is not active.

This is important because, with TCP FastOpen, the handshake processing of a TLS connection will start
before the connection has been established -- before the process of connecting has even been started.

The SslHandler on the client side will add the Client Hello message to the ChannelOutboundBuffer, then
issue a `ctx.read` call for the anticipated Server Hello response, and then flush the Client Hello
message which, in the case of TCP FastOpen, will cause the TCP connection to be established.

In this transaction, it is important that the `ctx.read` call is not ignored since, if auto-read is
turned off, this could delay or even prevent the Server Hello message from being processed, causing
the server-side handshake to time out.

Modification:
Attach a listener to the SslHandler.handshakeFuture in the EchoClient, that will call ctx.read.

Result:
The SocketSslEchoTest now tests that the SslHandler can finish handshakes on its own, without being driven by 3rd party ctx.read calls.
The various channel implementations have been updated to comply with this behaviour."
e43d0d99f1beec78cd00be3018f7afeef944e5f2,[maven-release-plugin] prepare release netty-4.1.66.Final
2a184ab9320e31e525e7312552de540f1a152b9c,[maven-release-plugin] prepare for next development iteration
b3e0e09a82f7d467766f36ac46e2bc36f5f09b2b,"Distribue weight to children when closing stream (#11490)

Motivation:

As suggested in [section 5.3.4 in http2 spec](https://datatracker.ietf.org/doc/html/rfc7540#section-5.3.4):

> When a stream is removed from the dependency tree, its dependencies can be moved to become dependent on the parent of the closed stream. The weights of new dependencies are recalculated by distributing the weight of the dependency of the closed stream proportionally based on the weights of its dependencies.

For example, we have stream A and B depend on connection stream with default weights (16), and stream C depends on A with max weight (256). When stream A was closed, we move stream C to become dependent on the connection stream, then we should distribute the weight of stream A to its children (only stream C), so the new weight of stream C will be 16. If we keep the weight of stream C unchanged, it will get more resource than stream B

Modification:
- distribute weight to its children when closing a stream
- add a unit test for the case above and fix other related unit tests

Result:

More spec-compliant and more appropriate stream reprioritization

Co-authored-by: Heng Zhang <zhangheng@imo.im>"
1ce76e7e9988c82aba7e6c6c90ad54c084315b6c,"Update BouncyCastle Libraries (#11495)

Motivation:
New versions of Bouncy Castle libraries are out and we should upgrade to them.

Modification:
Upgraded all Bouncy Castle libraries to the latest version.

Result:
The latest versions of Bouncy Castle libraries."
3a41a97b0e00145ec20c699b8ec472cb42965756,"Support large or variable chunk sizes (#11469)


Motivation:

Chunks are splitted up into even smaller chunks when the underlying
buffer's readable bytes are less than the chunk size.

The underlying buffer can be smaller than a chunk size if:

- The chunk size is larger than the maximum plaintext chunk allowed by the TLS RFC,
  see: io.netty.handler.ssl.SslHandler.MAX_PLAINTEXT_LENGTH.

- The chunk sizes are variable in size,
  which may cause Netty guess a buffer size that is smaller than a chunk size.

Modification:

Create a variable in HttpObjectDecoder: ByteBuf chunkedContent

- Initialize chunkedContent in READ_CHUNK_SIZE with chunkSize as buffer size.

- In READ_CHUNKED_CONTENT write bytes into chunkedContent

  - If the remaining chunk size is not 0 and toRead ==maxChunkSize,
    create a chunk using the chunkedContent and add it to the output messages
    before re-initializing chunkedContent with the remaining chunkSize as buffer size.

  - If the remaining chunk size is not 0 and toRead != maxChunkSize,
    return without adding any output messages.

  - If the remaining chunk size is 0,
    create a chunk using the chunkedContent and add it to the output messages;
    set chunkedContent = null and fall-through.

Result:

Support chunk sizes higher than the underlying buffer's readable bytes.

Co-authored-by: Nitesh Kant <nitesh_kant@apple.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
26cdfe2cdef8e6533260c12e87e33fe02f3cde2d,"Add PromiseNotifier static method which takes care of cancel propagation (#11494)


Motivation:

At the moment we not correctly propagate cancellation in some case when we use the PromiseNotifier.

Modifications:

- Add PromiseNotifier static method which takes care of cancellation
- Add unit test
- Deprecate ChannelPromiseNotifier

Result:

Correctly propagate cancellation of operation

Co-authored-by: Nitesh Kant <nitesh_kant@apple.com>"
3859805126c5be3499148950db7630d6476b28be,"Add StringDecoder test (#11496)

Motivation:

There is no test case of `StringDecoder` here

Modification:

Need to add `StringDecoder` test case

Result:

Added test case of `StringDecoder`

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>
Co-authored-by: xingrufei <xingrufei@sogou-inc.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
b14dfbb74cd2ca31170ed970e9c5855cea759dec,"FastLzFrameDecoder should use allocator to allocate output buffer (#11499)

Motivation:

FastLzFrameDecoder currently not use the allocator to alocate the output buffer. This means that if you use the PooledByteBufAllocator you still can't make use of the pooling. Beside this the decoder also does an uncessary memory copy when no compression is used.

Modifications:

- Allocate the output buffer via the allocator
- Don't allocate and copy if we handle an uncompressed chunk
- Make use of ByteBufChecksum for a few optimizations when running on a recent JDK

Result:

Less allocations when using FastLzFrameDecoder"
a1c3e3670de9298373590bfa40674574e5e03727,"Update japicmp plugin to support Java16+ (#11507)

Motivation:

japicmp did fix some issues related to Java16+. Let's update so we can also enable it in later java versions

Modifications:

Update to 0.15.3

Result:

Be able to use japicmp with all java versions"
0cb25f9fdd9abb275fa1998038aaeae5fd760d1f,"Be able to build on JDK17 (#11500)


Motivation:

As the release of JDK17 is getting closer and there are ea builds already we should ensure we can actually build netty with it.

Modifications:

- Add profile for JDK17
- Remove test-code that would fail with JDK17 due the changes in https://github.com/openjdk/jdk17/commit/4f4d0f5366a8926f373ea25774a536399281c841.

Result:

Be able to build and run testsuite with JDK17"
7110997072478a0760a37d66054442062de5f6ea,"Bump Brotli4j to 1.5.0 (#11509)

Motivation:
Brotli4j had some changes for performance improvements. So we should upgrade to the latest version of Brotli4j.

See https://github.com/hyperxpro/Brotli4j/pull/27

Modification:
Upgraded Broti4j from 1.4.2 to 1.5.0.

Result:
Up-to-date Broti4j library."
eb99f6c74ae91045cc91b4b4d27d86dcda774f79,"Fix JavaDoc of SelfSignedCertiticate regarding Private Key type (#11510)

Motivation:
SelfSignedCertificate generates EC/RSA key pair and this should be explicitly mentioned in JavaDoc. Currently, only ""RSA"" was mentioned not ""EC"".

Modification:
Changed RSA to EC/RSA

Result:
Correct JavaDoc"
8f2fe8659bcf3017934b61b9e293365303826027,"Optimize method io.netty.util.concurrent.DefaultPromise.await0(...) (#11504)

Motivation:

For the code pattern of `Object.wait(...)`  in `io.netty.util.concurrent.DefaultPromise.await0(...)`, it's better to follow the recommended code pattern according to [Object.wait(...)'s doc](https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait()):
```
synchronized (obj) {
     while (<condition does not hold>)
     obj.wait();
     ... // Perform action appropriate to condition
}
```

Modification:
Change the `Object.wait(...)`'s code pattern in `io.netty.util.concurrent.DefaultPromise.await0(...)`.

Result:

The `Object.wait(...)`'s code pattern in `io.netty.util.concurrent.DefaultPromise.await0(...)` meets the Java doc."
3549c4048c8055a98a9190bb951a15bb51d84ef1,"Use junit5 methods (#11508)

Motivation:

We missed to update one junit4 method usage to junit5

Modifications:

Use junit5 methods

Result:

No more usage of junit4"
ae875c35ec788c680f020b18b98bec22d67cf338,"FastLzFrameDecoder should not need to do any extra memory copies even when direct buffers are used (#11511)

Modifications:

Change code to not depend on heap buffers

Result:

Less memory copies"
8af59e4b401470c6435def0063654d0372626506,"Disable mutual auth tests on windows for now (#11513)

Motivation:

We did observe that the mutal auth tests are flaky on windows when running on the CI. Let's disable these for now.

Modifications:

Disable mutual auth tests on windows

Result:

More stable build. Related to https://github.com/netty/netty/issues/11489"
165a035a15ed1ed1183e8b8c63d69b0022f3d0b1,"Add some size checks to make code more robust and more clear (#11512)

Motivation:

While its technical impossible that a chunk is larger than 64kb it still makes things easier to read and more robust to add some size checks to LzfDecoder.

Modifications:

Check the maximum length

Result:

More robust and easier to reason about code"
c423891fb51aaa4e9063c53be7e4089c70d1937b,"Remove ApplicationProtocolNegotiationHandler when no SslHandler is present (#11503)


Motivation:

750d235 did introduce a change in ApplicationProtocolNegotiationHandler that let the handler buffer all inbound data until the SSL handshake was completed. Due of this change a user might get buffer data forever if the SslHandler is not in the pipeline but the ApplicationProtocolNegotiationHandler was added. We should better guard the user against this ""missconfiguration"" of the ChannelPipeline.

Modifications:

- Remove the ApplicationProtocolNegotiationHandler when no SslHandler is present when the first message was received
- Add unit test

Result:

No possible that we buffer forever"
e1be815a9428bcdd0fe000297c5d94d8bea16a19,"FastLzFrameEncoder should not depend on the buffer type (#11516)

Motivation:

At the moment FastLzFrameEncoder depends on the buffer type. This is not needed and may cause memory copies

Modifications:

Rewrite to be able to just act on the ByteBuf

Result:

Less memory copies"
412af40f5d6977ab50f7cbd86ef44d6cdddfc3fb,"Make DnsNameResolver.cnameCache() public (#11520)

Motivation:

Users may want to clear the cache manually. For this it should be possible to access it first.

Modifications:

Change the visibility to public

Result:

Be able to clear the cache manually. Related to https://github.com/netty/netty/issues/11519"
c83c5b7d7cd895bfa5d6c57f5cba279701034480,"JdkZlibDecoder may corrupt data when GZIP footer is fragmented (#11521)


Motivation:

Due a bug in the statemachine we produced an decoding error when the GZIP footer was fragmented in some cases

Modifications:

- Fix statemachine
- Add testcase

Result:

Correctly decode GZIP in all cases"
ccef8feedd726743d0355b34799e4915536d72ab,"Add TcpDnsQueryDecoder and TcpDnsResponseEncoder (#11415)


Motivation:
There is no decoder and encoder for TCP based DNS.

Result:
- Added decoder and encoder
- Added tests
- Added example

Result:

Be able to decode and encode TCP based dns 

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
e419dedc2cf34ef8ee2e867987f39be166916d51,Add @UnstableApi annotation to TcpDnsQueryDecoder introduced by ccef8feedd726743d0355b34799e4915536d72ab
8314e2fb047c225b65cf8bee7f43aba476fe2b5d,Fix false-positive report of japicmp-maven-plugin introduced by OCccef8feedd726743d0355b34799e4915536d72ab
a2e34ec5e8d47cb64c5b92e9bc7438ec28bb055c,"Add @UnstableApi to TcpDnsResponseEncoder (#11526)


Motivation:

We should mark TcpDnsResponseEncoder as unstable

Modifications:

Add annotation

Result:

Mark the encoder as unstable"
b6da6f58282b3e75417569e5a37dda85edbc7ca5,"Ensure we include hs_err* files when build failed (#11525)

Motivation:

We the build failed we should ensure we also include hs_err* files as it may have failed due a native crash

Modifications:

Adjust path matching to include hs_err as well

Result:

Easier to debug native crashes"
82418dafecacfaf2dd91910ed1f5d8ad42c6e016,"Add Increment and Decrement count positive check in ReferenceCountUtil (#11523)

Motivation:
We should have guards in place to check increment or decrement count in `ReferenceCountUtil`. Increment and Decrement counts must be a positive integer.

Modification:
Added `ObjectUtil#checkPositive` checks.

Result:
Prevent release due to invalid count."
8bcc27a16992d7837601e02448740f88613ffa3f,"Ensure we always wrap if there is something left to be send to the remote peer (#11535)

Motivation:

We need to ensure we call wrap as long as there is something left to be send to the remote peer in cases of non-application data (like for example alerts).

Modifications:

Check the pending data and based on it return NEED_WRAP even when the handshake was done.

Result:

Always produce alerts etc"
21df18deac2d94d8704d6deeb50e9f02f56e6cce,"Fix a bug with delegate/async SSL (#11537)

Motivation:
This bug could occasionally cause SSL handshakes to time out, because the server-side handshake would fail to resume its event loop.

Modification:
Async delegate SSL tasks now lower their NEED_TASK status after they have executed, but before they run their completion callback.
This is important because the completion callback could be querying the handshake status.
This could cause the task delegator thread and the event look to race.
If the event look queries the handshake status first, it might think that it still needs to delegate another task.
If this happens, the delegator find a null task, and then fail to resume the event loop, causing the handshake to stall.

Result:
This data race no longer causes handshake timeouts."
1ce28e80d18dff80669838d37574ed700c10a921,"Remove Unused Imports (#11546)

Motivation:
There are lots of imports which are unused. We should get rid of them to make the code look better,

Modification:
Removed unused imports.

Result:
No unused imports."
01b42c568ddfa9038c10d007cfa5f09e028d12c1,"Remove unnecessary semicolons (#11549)

Motivation:
We should get rid of unnecessary semicolons because they don't do anything in code.

Modification:
Removed unnecessary semicolons.

Result:
Better code"
6e387e2f5d247db01f4c3a5cb5eafe026d9e8a52,"Remove unnecessary toString calls (#11550)

Motivation:
We should get rid of the unnecessary toString calls because they're redundant in nature.

Modification:
Removed unnecessary toString calls.

Result:
Better code"
45c97fbdfddd0fc3540c07c666a3e172fe73bd82,"Make EpollSocketChannelConfigTest tollerant of fd reuse race (#11552)

Motivation:
We cannot control when ""the system"" reuses file descriptors.
This makes any test that assert on the behaviour of closed file descriptors inherently racy.

Modification:
Allow the EpollSocketChannelConfigTest socketoption tests a few tries to get the correct assertion on the behaviour of closed socket file descriptors.

Result:
The EpollSocketChannelConfigTest should now be much less flaky."
a3c4c9ebfda456fe7887277d4c0765b0f54dadc6,"Simplify Bitwise operations (#11547)

Motivation:
We should keep bitwise operations simple and easy to understand.

Modification:
Simplify few Bitwise operations.

Result:
Less complicated bitwise operation code"
fe7b18ee83552a3891adfeaf76381d4307470c74,"Make variables final (#11548)

Motivation:
We should make variables `final` which are not reinstated again in code to match the code style and makes the code look better.

Modification:
Made couples of variables as `final`.

Result:
Variables marked as `final`."
a27443df64b5cf5dc2a1f1d466dd68fb772a49fa,"Remove io.netty.http2.validateContentLength SystemProperty (#11561)

Motivation:
io.netty.http2.validateContentLength SystemProperty was added as a way
to opt-out for compabitility for libraries/applications that violated
the RFC's content-length matching requirements [1] but have not yet been
fixed. This SystemProperty has been around for a few months now and it
is assumed these issues have now been addressed in 3rd party code.

[1] https://tools.ietf.org/html/rfc7540#section-8.1.2.6

Modifications:
- Remove the io.netty.http2.validateContentLength SystemProperty,
  preventing folks from opting out of RFC's required content-length
  matching.

Result:
No more escape hatch in H2 for content-length matching enforcement."
1e6a34affd20eb31c623eeaac77508169d780d6f,Use the standard `japicmp.skip` instead of the custom `skipJapicmp` (#11558)
214448af034663f9cf9a542670f6047f1bfeaae8,"Fix typo in AbstractSearchProcessorFactory.java (#11562)

Motivation:

Fixed typo.

occurences -> occurrences"
0772e50750f5936fd3f3ae466b0473563ea56379,"Disable flaky `Http2MultiplexTransportTest` test on Windows (#11554)

* Disable flaky tests on Windows"
32523c53379ac59c4573795d473bf1b953f3ee06,"Make the TCP_FASTOPEN channel option transport agnostic (#11559)

Motivation:
TCP FastOpen is a pure optimisation, that is opportunistically applied.
There is no reason to make it specific to the epoll transport, and in the future we could add support to other transports.
Besides, the client-side equivalent, TCP_FASTOPEN_CONNECT, is already transport agnostic.

Modification:
Move the TCP_FASTOPEN channel option from EpollChannelOption to ChannelOption.
Mark the field in EpollChannelOption as deprecated.

Result:
All channel options related to TCP FastOpen are now transport agnostic.
However, we still only actually support TFO on the epoll transport."
ea45158c97ef27c9b49d0046e100e566c57dc57d,"Bump ant from 1.10.9 to 1.10.11 (#11538)

Bumps ant from 1.10.9 to 1.10.11.

---
updated-dependencies:
- dependency-name: org.apache.ant:ant
  dependency-type: direct:production
...

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
3f8dab5ad00a718dc8ad6c00e27b740783ea23c5,"Bump commons-compress from 1.19 to 1.21 (#11539)

Bumps commons-compress from 1.19 to 1.21.

---
updated-dependencies:
- dependency-name: org.apache.commons:commons-compress
  dependency-type: direct:production
...

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
3c27e008b658f2d3f4ba27b6c339a167fe37c93a,"Some small improvements (#11564)

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
beb4588b4a2e93ef88af8466c556363f67e770f7,"Inline variables to make code more readable (#11565)

Motivation:
There are lots of redundant variable declarations which should be inlined to make good look better.

Modification:
Made variables inlined.

Result:
Less redundant variable and more readable code."
699549dcbcc4b2de5aaa6e707e157925d20e3791,"Improve test failure reporting of EpollSocketChannelConfigTest (#11570)

Motivation:
This test is inherently flaky due to file descriptor reuse.
Even though we have taken steps to make it less flaky, it still fails sometimes.
When it does, the error message is not very helpful.

Modification:
Make use of assertThrows and assertThat to get more descriptive error messages when the tests fail.

Result:
More meaningful messages on test failures, which may help us make the tests more resilient in the future"
f750e2eb6a9e8598091abb48c8c806c5ef64b0bd,"Add support for client-side TCP FastOpen to KQueue MacOS (#11560)

Motivation:
The MacOS-specific `connectx(2)` system call make it possible to establish client-side connections with TCP FastOpen.

Modification:
Add support for TCP FastOpen to the KQueue transport, and add the `connectx(2)` system call to `BsdSocket`.

Result:
It's now possible to use TCP FastOpen when initiating connections on MacOS."
056eba4db4c1b466d6b45d261642a6aa6134fe38,"server h2c upgrade fail when request doesn't have connection header (#11569)

__Motivation__
Since request.headers().getAll() will never return null. And the check null condition will not work as expected.

__Modification__

Add isEmpty() checking as well.

__Result__

Fixes #11568"
f773733af68d38086bb90c3a10392c8ae92d811f,[maven-release-plugin] prepare release netty-4.1.67.Final
76c55caeb95c2ffb940efae4f4028181adfe96f2,[maven-release-plugin] prepare for next development iteration
ec23189e727a91269ff539aea8080e020c5886ed,"Revert ""[maven-release-plugin] prepare for next development iteration""

This reverts commit 76c55caeb95c2ffb940efae4f4028181adfe96f2."
7903a44a14912bddb893741d31e70c2cf9fae8f7,"Revert ""[maven-release-plugin] prepare release netty-4.1.67.Final""

This reverts commit f773733af68d38086bb90c3a10392c8ae92d811f."
b785fa9eedab659b3acd3f7ca3bb60b92bc8b285,[maven-release-plugin] prepare release netty-4.1.67.Final
f8f17f676dfd95fcb0f06a4f3f47171981561cb2,[maven-release-plugin] prepare for next development iteration
ea932dd70673b28420302b3323ff7809326955d1,"Ensure we only log message on BoringSSL when the ciphers really are not the default (#11583)

Motivation:

0c9a86db812573fbdc9f39b4ec4f29188248ff3a added a change to log a message if someone tried to change the TLSv1.3 ciphers when using BoringSSL. Unfortunally the code had some error and so even if the user did not change these we logged something.

Modifications:

- Ensure there are no duplicates in the ciphers
- Correctly take TLSv1.3 extra ciphers into account when using BoringSSL

Result:

Correctly log or not log"
794c45fd590ffc51b16bb4b8af87556c0d2025fb,"Add some docs for io.netty.leakDetection.acquireAndReleaseOnly. (#11580)

Motivation:

We should add some docs / comment to explain what io.netty.leakDetection.acquireAndReleaseOnly is all about.

Modifications:

Add some comments

Result:

Fixes https://github.com/netty/netty/issues/11576."
69f0de223ff99648c716a6e295783e6b0764201b,"Add cast to help compiler to build (#11587)


Motivation:

Sometimes intellij fails to build because the compiler cant really figure out what to do. We can workaround this by adding some explicit casts.

Modifications:

Add explicits casts

Result:

No more problems with intellij"
cafc669436f693412f36ba3206de541ce24e70f5,"Add CI job for JDK17 (#11584)


Motivation:

As JDK17 is really close to be released we should add a CI job for it to ensure netty works correctly when using it.

Modifications:

Add docker config and workflow config to run CI job for JDK17

Result:

Ensure netty works on JDK17 as well"
228a01e268c478bf5bb3717aa11ad37728ac4276,"Use StandardSocketOptions#IP_MULTICAST_IF as default source when joing multicast groups (#11585)

Motivation:

We should use StandardSocketOptions#IP_MULTICAST_IF as default source when joing multicast groups and only try to use the localAddress if this returns null.

Modifications:

First check if StandardSocketOptions#IP_MULTICAST_IF was set and if so use the network interface when joining mulicast groups

Result:

Fixes https://github.com/netty/netty/issues/11541"
b82cb34c6421ebd5a52a6a609c8f495e45388afc,"Fix IndexOutOfBoundsException caused by consuming the buffer multiple times in DatagramDnsQueryDecoder (#11592)

Motivation:

ccef8feedd726743d0355b34799e4915536d72ab introduced some changes to share code but did introduce a regression when decoding queries.

Modifications:

- Correctly only decode one time.
- Adjust unit test

Result:

Fixes https://github.com/netty/netty/issues/11591"
322f75c5a249cc585bd15eeabee0fdcea04407b9,"Fix a problem with IP protocol version confusion on MacOS when TCP FastOpen is enabled (#11588)

Motivation:
This fixes a bug that would result in an `io.netty.channel.unix.Errors$NativeIoException: connectx(..) failed: Address family not supported by protocol family` error.
This happens when the connecting socket is configured to use IPv6 but the address being connected to is IPv4.
This can occur because, for instance, Netty and `InetAddress.getLoopbackAddress()` have different preferences for IPv6 vs. IPv4.

Modification:
Pass the correct ipv6 or ipv4 flags to connectx, depending on whether the socket was created for AF_INET or AF_INET6, rather than relying on the IP version of the destination address.

Result:
No more issue with TCP FastOpen on MacOS when using addresses of the ""wrong"" IP version."
201f6b6bb2dcdff07df6e30552b96fedbcf21759,"Remove dead code and fix warnings in the http2 module (#11593)

Motivation:
Opportunities for clean up found while working on a different PR.

Modification:
* Dead code has been removed.
* Unnecessary parenthesis, qualifiers, etc. removed.
* Unused imports removed.
* Override annotations added where missing.

Result:
Cleaner code"
93484071d6f5696c6ac4db57dbcc7a5208b6473a,"Fix support for optional encoders errors in HttpContentCompressor (#11582)

Motivation:

- Fix `HttpContentCompressor` errors due to missing optional compressor libraries such as Brotli and Zstd at runtime.
- Improve support for optional encoders by only considering the `CompressionOptions` provided to the constructor and ignoring those for which the encoder is unavailable.

Modification:

The `HttpContentCompressor` constructor now only creates encoder factories for the CompressionOptions passed to the constructor when the encoder is available which must be checked for Brotli and Zstd. In case of Brotli, it is not possible to create BrotliOptions if brotly4j is not available so there's actually nothing to check. In case of Zstd, I had to create class `io.netty.handler.codec.compression.Zstd` similar to `io.netty.handler.codec.compression.Brotli` which is used to check that zstd-jni is availabie at runtime.

The `determineEncoding()` method had to change as well in order to ignore encodings for which there's no `CompressionEncoderFactory` instance.

When the HttpContentCompressor is created using deprecated constructor (ie. with no CompressionOptions), we consider all available encoders.

Result:

Fixes #11581."
9f4e155e3679b781e6073401045c382afb04358c,"Add Zstd.isAvailable() check in ZstdOptions (#11597)

Motivation:

At present, the verification methods of `ZstdOptions` and `BrotliOptions` are not consistent, and the processing methods of `ZstdOptions` and `BrotliOptions` in `HttpContentCompressor` are also inconsistent.
The http2 module does not add zstd-jni dependency, so `ClassNotFoundException` may be thrown

Modification:

Added `Zstd.isAvailable()` check in `ZstdOptions` to be consistent, and added zstd-jni dependency in http2 module

Result:

The verification methods of `ZstdOptions` and `BrotliOptions` are consistent, and `ClassNotFoundException` will not be thrown


Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
e9893ad021ab31f39fe17da73fecb7053ab24865,"Backport some fixes and cleanups for DefaultPromiseTest (#11600)

Motivation:
These cleanups were done in another PR but were not directly related to that PR.
This extracts those changes and backports them to 4.1.

Modification:
* Remove the use of mocking in DefaultPromiseTest.
* Fix a few warnings.
* Make `testStackOverFlowChainedFuturesB` test with the right listener chain.

Result:
Cleaner code."
22a188c8ccda28669978b7eae9fc82a1938b6480,"Call OpenSsl.ensureAvailability() before trying to construct OpenSsl*Context (#11602)

Motivation:

At the moment why you try to build a SslContext via SslProvider.OPENSSL* and netty-tcnative* is not on the classpath it will fail with:

```
Exception in thread ""main"" java.lang.NoClassDefFoundError: io/netty/internal/tcnative/SSLPrivateKeyMethod
	at io.netty.handler.ssl.SslContext.newClientContextInternal(SslContext.java:830)
	at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:611)
	at io.netty.handler.codec.http.Main.main(Main.java:34)
Caused by: java.lang.ClassNotFoundException: io.netty.internal.tcnative.SSLPrivateKeyMethod
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	... 3 more
```

We should do better here.

Modifications:

Call `OpenSsl.ensureAvailability()` before trying to construct OpenSsl*Context instances

Result:

More clear error message like:

```
java.lang.UnsatisfiedLinkError: failed to load the required native library

	at io.netty.handler.ssl.OpenSsl.ensureAvailability(OpenSsl.java:540)
	at io.netty.handler.ssl.SslContext.newClientContextInternal(SslContext.java:830)
	at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:611)
        ...
Caused by: java.lang.ClassNotFoundException: io.netty.internal.tcnative.SSLContext
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:522)
	at java.base/java.lang.Class.forName0(Native Method)
	at java.base/java.lang.Class.forName(Class.java:398)
	at io.netty.handler.ssl.OpenSsl.<clinit>(OpenSsl.java:126)
	... 68 more
```"
fd475546693f0218f295d3d198c83e1cd5a90895,"Only suppert TLSv1.3 when JDK does support it as well (#11604)

Motivation:

We tightly integrate the TrustManger and KeyManager into our native SSL implementation which means that both of them need to support TLSv1.3 as protocol. This is not always the case and so can produce runtime exceptions.

As TLSv1.3 support was backported to Java8 quite some time now we should be a bit more conservative and only enable TLSv1.3 for our native implementation if the JDK implementation supports it as well. This also allows us to remove some hacks we had in place to be able to support it before in Java8.

Modifications:

- Only enable TLSv1.3 support for our native SSL implementation when the JDK supports it as well
- Remove OpenSslTlsv13X509ExtendedTrustManager as its not needed anymore

Result:

Fixes https://github.com/netty/netty/issues/11589"
36eb399b4b7451e0fbfbbf87a6300ecce33257d3,"Always release the sslEngine inside SslHandler's handlerRemoved0 (#11605)


Motivation:
Make SslHandler's handlerRemoved0 method release the sslEngine
even if it fails in the middle.
See details in https://github.com/netty/netty/issues/11595.

Modifications:
Wrap the release of sslEngine into a finally block.

Result:
The sslEngine would be released eventually.

Co-authored-by: Chen Liu <cliu@splunk.com>"
33b63c325ff6b6bfd8e1a4b8aaf3f4c8c3462bd6,"Allow server initiated renegotiate when using OpenSSL / BoringSSL based SSLEngine (#11601)


Motivation:

We should allow server initiated renegotiation when OpenSSL / BoringSSL bases SSLEngine is used as it might be used for client auth.

Modifications:

- Upgrade netty-tcnative version to be able to allow renegotiate once
- Adjust code

Result
Fixes https://github.com/netty/netty/issues/11529"
9d25bc8a4e222ae7b938f1d90829d29e12b810c4,"Fix leak in TcpDnsTest (#11606)

Motivation:

In another PR we did observe a leak report for TcpDnsTest

Modifications:

Correctly release the query.

Result:

No more leaks"
2110755af09b66398fefa8ccfb2ad755fa3d50cc,"SimpleChannelPool::notifyConnect should tryFailure when an exception occurs (#11566)

Motivation:

During the channelAcquired handler invocation if an exception occurred the application will hang

Modifications:

Call tryFailure of the promise if an exception occurred

Result:

After this change, the promise will fail and the system won't hang.

Co-authored-by: NiteshKant <nitesh_kant@apple.com>"
5e7eb3748daaf68a85616bad283489a59b44c4b7,"Add version for netty-tcnative* to bom (#11609)

Motivation:

Keeping the version of netty-tcnative correct can sometimes be hard.

Modifications:

Add entries for netty-tcnative* to the bom

Result:

Fixes https://github.com/netty/netty/issues/11567"
fc8311cd18dd645e3e3fcec9ca6d4efa00b38d2f,"Try to get the PR Reports workflow running again (#11610)

Motivation:
This workflow has been broken for a couple of months now.
It would be nice if we could get junit test reports back in out PR checks.

Modificatoin:
Fix a test matrix typo.
Update workflow action versions.

Result:
Hopefully the PR Reports workflow starts working again.

Draft until it actually does work. There are probably several things wrong that will take time to work through."
60f8ed01cd540f01602ba6ff6bf83414af8ada98,"Correctly respect array offset when check for overflow (#11614)


Motivation:

232c669fa413a9079ee6216056b57a647143f4b6 did add overflow protection but did miss to take the array offset into account and so could report false-positives

Modifications:

- Correctly take offset into account when check for overflow.
- Add unit tests

Result:

Correctly take offset into account when overflow check is performed"
6b7c58a2f971ba792483b09c10075512fefa9622,"Don't throw if null is given as ByteBuf when adding components. (#11613)

Motivation:

232c669fa413a9079ee6216056b57a647143f4b6 did add some overflow protection but did not handle null elements in the array the same as before.

Modifications:

- Break the loop if a null element was found
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/11612"
6a7cccded07a46a0a7b50ac27ff3f86eb977859f,"Try to make the PR Reports workflow more robust (#11620)

Motiviation:
The workflow from the default branch is the one that gets to run for all PRs, regardless of what branch they are targeting.
This means the 4.1 PR Reports workflow needs to tollerate master branch PRs, where there is no Java 8 builds.

Modification:
Make the PR Reports tolerate that the Java 8 matrix fails if they are missing.

Result:
Hopefully we'll get working PR Reports for master branch PRs now."
88fcb5124b6d2fbe117e5cad66a4b50ab46c4a7a,"Fix QueryStringEncoder encodes tilde (#11590)

Motivation:

In this issue(#11578 ) discussed that tilde should not be encoded in QueryStringEncoder, this pr is to fix this problem

Modification:

Modified QueryStringEncoder so that it does not encode tilde, and added a test case

Result:

Fixes #11578"
95e1a218360b2b966c0d6df8f6a11ae362f055e9,"Replace master with main branch (#11629)

Motivation:

We should not use master as branch name, better to switch to main

Modifications:

Replace master branch name with main

Result:

Use main as replacement for master"
7b8050ae5348d9de2a8b27590994046552cd4916,"Added ""RSASSA-PSS"" algorithm in allowed algorithm list. (#11626)

Motivation:
While OpenSSK is provided support for the ""RSASSA-PSS"" algorithm this was still not valid from netty. Which was causing issue in validating certificates which was signed using this algorithm.

Modification:
Added ""RSASSA-PSS"" in LOCAL_SUPPORTED_SIGNATURE_ALGORITHMS.
validation:
Validated and tested with CA and User cert singed with RSASSA-PSS algorithm.

Result:
Fixes #11360

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
6f00c5ebf6591e2266c296f176d3cc1f08b1fe76,"Fix leak in TcpDnsTest (#11632)

Motivation:

We did get a report for a leak on the CI.

Modifications:

Fix leak in test by correctly releasing the query

Result:

No more leaks"
5c842dd89f19ca0fe49d6e049353d32aceab7e25,"Add missing annotations to test overrides (#11630)

Motivation:

When we override a test with params we also need to ensure we add the correct annotations to the override

Modifications:

Add the correct annotations so the tests are actually run in intellij

Result:

Each test can be run"
d2aceea3b03faaf138fdc07d6c9274c65974d137,"Ensure DiskFileUpload#toString returns a string that uses the correct deleteOnExit (#11628)


Motivation:
DiskFileUpload#toString should use the value provided when constructing DiskFileUpload
and not the default one

Modification:
- DiskFileUpload#toString is modified to use the correct deleteOnExit value

Result:
DiskFileUpload#toString returns a string that uses the correct deleteOnExit"
d027ba7320d430743992d613e52596b0182ca854,"[HTTP2] Fix memory leak while writing empty data frame with padding (#11633)


Motivation:

There is a memory leak while writing empty data frame with padding.

The empty data frame was occurred because we are running a proxy server
built by netty, and found that google services always sent data frames
followed by an empty data frame.

Modifications:

Calls the ctx.write even the payload is empty.

Result:

Fix memory leak.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
b3d3269b8c8f34e252c1db2caa005e9adc8696fa,"Avoid overspecifying ScheduledFuture when Future will do (#11636)

Motivation:
Overspecifying interfaces can increase coupling and make refactoring harder down the line.

Modification:
Places that were specifying fields, variables, and return types as ScheduledFuture, but did not use any features specific to ScheduledFuture, have been changed to specify Future instead.

Result:
Cleaner code."
77cf43cfe9504c91ba8a29b00c05805943db7e46,"Fix release problems caused by the testsuite-shading module (#11640)

Motivation:

Last time when we tried to do a release it failed due the fact that no javadoc jar was generated. Beside this how we did configure the shading module did introduce a lot of duplication

Modifications:

- Generate an empty javadoc jar
- Share config for shading plugin

Result:

No more problems during release process"
c8c45cfa4c9632578a772ebcad1edfae431b1011,"O(1) buffer next capacity computation (#11641)

Motivation:

Enlarging buffers approaching 4 MiB size requires n iterations

Modification:

Use a single instruction to compute the next buffer capacity

Result:

Faster/Simpler calculateNewCapacity"
5ebdee8537a3c953582351212b0b53c16f40b613,"Always log Http2UnknownStreamError at `DEBUG` level (#11643)

Motivation:

Exception logged by `onHttp2UnknownStreamError` is propagated to the
upper layers anyway. Receiver of the exception is responsible for
correct handling. Inside netty, it's enough to log at `DEBUG` level.

Modifications:

- `Http2FrameCodec#onHttp2UnknownStreamError` always logs at `DEBUG`
level;

Result:

Less noise in logs when `Http2UnknownStreamError` is properly handled by
upper layers.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Chris Vest <mr.chrisvest@gmail.com>"
d58d8a1df832a5185193368e589cb4a488709ffe,"Remove useless imports and redundant type cast (#11639)

Motivation:

There are some redundant imports and unnecessary type cast

Modification:

Remove useless imports and unnecessary type cast

Result:

The code is cleaner than original

Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
47bababfc718eaa676212f39d547dc8aefb1683b,"Ensure HttpData#addContent/setContent releases the buffer before throwing IOException (#11621)

Motivation:
When the ByteBuf size exceeds the max limit/defined size, IOException is thrown.
HttpData#addContent/setContent should release the buffer in such cases otherwise memory leak will happen.

Modification:
- Release the provided ByteBuf before throwing IOException
- Add unit tests

Result:
Fixes #11618"
37c03cce5e95fb200b3dc5b234b46fe0a281bdec,"Include number of maximum active streams in exception message (#11644)


Motivation:

When users receive ""Maximum active streams violated for this endpoint""
exception, it's useful to know what is the current max streams limit on
HTTP/2 connection.

Modifications:

- Include current number of maximum active streams in exception message;

Result:

Easier debugging of HTTP/2 connections."
21fb48e4d22b5d030b165200e663c11f545f5576,"Deprecate UnaryPromiseNotifier (#11653)

Motivation:

Users should use PromiseNotifier.cascade(...) methods and so the UnaryPromiseNotifier becomes useless.

Modifications:

- Mark UnaryPromiseNotifier as deprecated
- Replaces usages with PromiseNotifier.cascade(...)

Result:

Cleanup"
a329857ec20cc1b93ceead6307c6849f93b3f101,"Updated ""CipherSuitesConverter"" to make it public. (#11656)

Motivation:
While using netty there is sometimes need to handle the cipher suites and
signature algorithm in more strict environment. CipherSuiteConverter is
quite helpful in converting Cipher-Suites to and from java to openSSL.
Making it public would be helpful for the project which are using netty.

Modification:
Updated ""CipherSuitesConverter"" to make it public.
updated ""CipherSuitesConverter.toOpenssl"" to public.
updated ""CipherSuitesConverter.toJava"" to public.

Result:
Fixes #11655"
a53eb80901b8bf678e2ff65e4715d25c4fec638c,"Throw exceptions when rule violating UDS paths been passed in. (#11663)

Motivation:

Currently, Netty is silently truncating all over the limit UDS paths and ignoring the `sun_path`'s null-termination role, which hurts compatibility with other UDS clients and servers.

Modifications:

Adding a validation in the JNI code, if the UDS path is not satisfying the system limit or Linux spec throw a NativeIoException.

Result:

All UDS paths Netty can successfully bind are connectable by other programs."
f2de2bbe519c08f4a3269bc706e82ca94e6f29ab,"Add support for mac m1 (#11666)

Motivation:

As more and more people switch to a mac m1 we should support it

Modifications:

- Add profiles for cross-compile for mac m1
- Adjust script to finish release

Result:

Mac m1 is supported"
deb048985bd74a825131e51849446d1e905b5e93,"Respect jdk.tls.namedGroups when using native SSL implementation (#11660)


Motivation:

When using the JDK implementation for SSL its possible to adjust the used named groups. We should allow to do this as well and also select some default groups that will reduce the number of roundtrips.

Modifications:

- Upgrade netty-tcnative so we can set the curves
- Respect jdk.tls.namedGroups
- Use default groups of ""P-256"", ""P-384"", ""X25519"" so its compatible with what the JDK versions < 13 support as well.

Result:

Be able to set the used groups

Co-authored-by: Nitesh Kant <nitesh_kant@apple.com>"
41d3d61a61608f2223bb364955ab2045dd5e4020,"Merge pull request from GHSA-grg4-wf29-r9vv

Motivation:

We should do the Bzip2 decoding in a streaming fashion and so ensure we propagate the buffer as soon as possible through the pipeline. This allows the users to release these buffers as fast as possible.

Modification:

- Change the Bzip2Decoder to do the decompression of data in a streaming fashion.
- Add some safety check to ensure the block length never execeeds the maximum (as defined in the spec)

Result:

No more risk of an OOME by decompress some large data via bzip2.

Thanks to Ori Hollander of JFrog Security for reporting the issue.

(we got acquired during the process and now Vdoo is part of JFrog company)"
6da4956b31023ae967451e1d94ff51a746a9194f,"Merge pull request from GHSA-9vjp-v76f-g363

Motivation:

e Snappy frame decoder function doesn't restrict the size of the compressed data (and the uncompressed data) which may lead to excessive memory usage. Beside this it also may buffer reserved skippable chunks until the whole chunk was received which may lead to excessive memory usage as well.

Modifications:

- Add various validations for the max allowed size of a chunk
- Skip bytes on the fly when an skippable chunk is handled

Result:

No more risk of OOME. Thanks to Ori Hollander of JFrog Security for reporting the issue."
a0c9b2f9e15112cb52001f26fa3cb6772f53d674,"Fix netty-tcnative* entries in bom

Motivation:

We did use the incorrect classifier and also missed to add the osx-aarch_64 version of netty-tcnative-boringssl-static

Modifications:

Fix entries

Result:

Correct and complete bom"
7d34282f9d2ffdd64c91cb4780b09902d9779b92,[maven-release-plugin] prepare release netty-4.1.68.Final
fd5d40454e4536926a38c1371db1d13ffb4d10dd,[maven-release-plugin] prepare for next development iteration
d6383bf2478267eb62b1f71807c2a3c34794d1b0,"netty-bom to provide resolved tcnative version (#11672)

Motivation:
Netty's bom includes netty-tcnative dependencies with a variable for the
version [1]. However that variable isn't defined/resolved and therefore
leads to undefined dependencies.

[1] https://search.maven.org/artifact/io.netty/netty-bom/4.1.68.Final/pom

Modifications:
- Netty's bom file should inherit from netty-parent pom so variables can
  be resolved at inclusion time.

Result:
netty-bom allows for netty-tcnative version to be resolved in 3rd party
projects."
1e29bcc81b71fb0a41f7f9ab0fbd1d3803d83612,"Upgrade to netty-tcnative 2.0.43.Final (#11679)

Motivation:

netty-tcnative 2.0.42.Final did not include all native libs due a problem during the release. This was fixed with the new release.

Modifications:

Upgrade to 2.0.43.Final

Result:

Depend on a netty-tcnative version that includes all native libs."
51ebcbd9aba7eac854716e45f07765744f8dcdaf,"Use cpu_relax() implementation for aarch64 (#11677)

Motivation:

We only implement cpu_relax() for x86_64 atm, we should also do for aarch64

Modifications:

Add implementation

Result:

Possible better performance on aarch64 when busy spinning with epoll is used"
4377ece51640fe0eb0b21fac512a86443cf409ab,"Add pinnedHeap/DirectMemory methods to ByteBufAllocatorMetric (#11667)

Motivation:
The ""used memory"" is the amount of memory that a pooled allocator has currently allocated and committed for itself.
Ths is useful for managing resource usage of the pool versus the available system resources.
However, it is not useful for managing resources of the currently circulating buffer instances versus the pool.
The pinned memory is the memory currently in use by buffers in circulation, plus memory held in the thread-local caches.

Modification:
Add pinned memory accounting to PoolChunk.
We cannot just use the existing freeBytes because that field is only updated when pool subpages are retired, and a chunk will never retire its last subpage instance.
The accounting statistics are available on the PooledByteBufAllocator only, since the metrics interfaces cannot be changed due to backwards compatibility.

Result:
It is now possible to get a fairly accurate (with slight over-counting due to the thread-local caches) picture of how much memory is held up in buffer instances at any given moment.

Fixes #11637"
eca9dd2edc4961b5b73f18b9db3958e11450cc7f,"Ensure bom don't define extra dependencies (#11682)

Motivation:

The bom shouldnt depend on the parent as it may define extra dependencies that would be ""pulled"" in.

See https://github.com/netty/netty/pull/11672#discussion_r707619462

Modifications:

- Revert commit d6383bf2478267eb62b1f71807c2a3c34794d1b0.
- Add tcnative version and add comments to ensure we keep the version in-sync

Result:

Correct bom for netty"
d50cfc69e03a35e984d12d381de7a89ac8f0b2d7,"Disable Flaky test (#11688)

Motivation:
There are multiple instances when the build stalled at io.netty.channel.ThreadPerChannelEventLoopGroupTest test and kept running forever until it was interrupted by GitHub Actions for consuming 6 hours of runtime.

Modification:
Disabled the test until it's fixed.

Result:
No more build failure"
fd3c769fd11fea9a95d375d3c5d02675c8bb7b88,"Use the correct readerIndex() when handle BLOCK_TYPE_NON_COMPRESSED in Lz4FrameEncoder (#11690)

Motivation:

We need to use the readerIndex() as offset when handle BLOCK_TYPE_NON_COMPRESSED as it might not be 0 in Lz4FrameEncoder.

Modifications:

Correctly use readerIndex()

Result:

Correctly handle BLOCK_TYPE_NON_COMPRESSED when the readerIndex() != 0"
29b7c6e9f09e1770b28b71cf4634f82bd6eaafb7,"Fix ByteBufUtil indexOf ClassCastException (#11680)

Motivation:

In this issue(https://github.com/netty/netty/issues/11678) , it is proposed that `ByteBufUtil.indexOf()` may throw `ClassCastException`, so type checking on `haystack` is required

Modification:

Use `ByteBuf.indexOf()` instead of `firstIndexOf()`, and add test case

Result:

Fixes https://github.com/netty/netty/issues/11678


Co-authored-by: Aayush Atharva <hyperx.pro@outlook.com>
Signed-off-by: xingrufei <xingrufei@sogou-inc.com>"
5026b0258425aed1bd8ed0d5cbc96af5e84f820f,"change mvnw distributionUrl to use Google mirror of central, avoid repeated use of the apache 'backup' download servers (#11689)

Motivation:

The tree includes 'Maven Wrapper' with settings such that it downloads Maven 3.8.1 from the ASF 'backup' distribution servers, rather than the main distribution mirrors, or more typically in the wrappers case actually Maven Central (which it seems the settings did use prior to the last config update). As the CI jobs are grabbing Maven several times for every commit, plus adding on any related use from peoples Netty forks/downloads etc, this will add up. It would be good to direct them elsewhere.

Modifications:
This changes the wrapper settings so it grabs from the Google mirror of Maven Central.

Result:

Less load soon the apache backup download server"
1894c8d9ea2a7b8c9f8542db15f70fa2fa901c55,"Switch to using sdkman to install JDK versions / flavors (#11694)


Motivation:

We used jabba to install our JDK versions / flavors but it is not updated anymore for new releases. Let's switch to sdkman which includes latest releases.

Modifications:

- Remove unused doocker compose configs
- Adjust jabba usage to sdkman
- Update java versions to be the latest

Result:

Run latest java releases on the CI again"
aa21ec05004ab93173c76b1135446aa0c0c0fca9,"Remove JDK16 CI job (#11697)

Motivation:

JDK16 is EOL, let's remove it from the CI matrix

Modifications:

Remove JDK16 related docker config and workflow jobs

Result:

Don't run CI builds for EOL JDK"
23405e2000427e9cad104913e7071d8d08e91a3c,"Ensure CompositeByteBuf.decompose(...) returns the non unwrapped buffer (#11696)


Motivation:

We did return the previous unwrapped buffer when calling decompose(...). This could result in inconsistency in terms of reference counting and so to leaks.

Modifications:

- Correctly return the non unwrapped buffer (the original) when calling decompose(...)
- Add unit test

Result:

No more reference count issues when using decompose(...)

Co-authored-by: Nitesh Kant <nitesh_kant@apple.com>"
83278c50005cfa58762167505aa9be8f19814433,"Fix little-endian get/set methods in SwappedByteBuf (#11706)

Motivation:
The `*LE` family of accessor methods are documented to always perform accesses in little-endian byte order, regardless of what `ByteBuf.order()` has been set on a buffer.
This was not always honoured by the `SwappedByteBuf`, and many methods were fixed in #10747, except the get and set methods were missed by that PR.

Modification:
Fix the methods that were missed in #10747 and make the testing more thorough by also covering get and set methods.

Result:
Any `ByteBuf` accessor method that is suffixed with `LE` now always perform a little-endian access, regardless of the buffers configured byte order.

This fixes #11700"
58412e91040280263b5ddb18e27683e5d52f4c3e,"Disable flaky tests on all OSes (#11707)

Motivation:

We only had these tests disabled on windows so far but these are also flaky on linux. Let us disable these.

Modifications:

Disable flaky tests on all OSes

Result:

More stable builds"
6604ff261da4878dc6c1c824041739215d2a08cc,"Fix DnsQueryTest, we should call release on reference counted objects (#11716)

Motivation:

We should call release on reference counted objects because `touch` can be invoked inside pipeline.

Modification:

Add release().

Result:

Fix flaky test."
ef1f637b0f9979d98dbb0f3e5281d7272012c76d,"Fix runPendingTask for re-registered embedded event loop (#11715)

Motivation:
Currently, if an `EmbeddedChannel` is re-registered to another `EmbeddedEventLoop` and we send some task to execute then calling `runPendingTasks` will not execute it.

Modification:
Delegate `runPendingTasks` to a registered `EmbededEventLoop` otherwise use internal.

Result:

Proper handling pending tasks for re-registered `EmbededChannel`."
4a1297ffc2124b2266fbea295e406e31c2140993,"restore use of project.version to set appropriate dependency versions in bom (#11698)

Motivation:

The BOM unnecessarily defines a literal version for many dependencies whose
version should only ever match the version of the BOM pom itself. Although
these are handled and updated by the release plugin, this causes it to make
many many updates across the file unecessarily, making it harder to see
actual 'meaningful change', especially when comparing across given versions.

Modifications:

reinstate this part of changes from d6383bf2478267eb62b1f71807c2a3c34794d1b0,
since removed during fixups made in eca9dd2edc4961b5b73f18b9db3958e11450cc7f

This changes the pom to use the '${project.version}' version placeholder
that must match its own version, rather than a literal version.

Result:

Simpler more intuitive bom with less changes made during release,
easing comparison across versions."
059752db5d0eeaf62981000e5d70a18a5227b7f1,"Fix possible leak in StompSubframeDecoder when a frame not ending with the NULL octet (#11727)

Motivation:

Currently if a frame not ending with the NULL octet we throws an exception and not release `lastContent` frame if it present.

Modification:

Release `lastContent` if it present in exceptional case.

Result:

Fixed possible leak."
fdbcab8bc3dfb4ab5a986a26b4a443e4c845d635,"Fix CRLF split between 2 buffers before separator (#11670)

Motivation:

When a buffer ends with the last chunk for a part but containing
only a CR and no LF neither separator, it ends up with the CR
included within the content of the part, which is wrong.

Modificiations:

Rare case, but fixed by checking when not getting the delimiter,
not finding a LineBreak, we check if the last byte of the chunk is a CR
and if the content could be added to the current part (current length +
current buffer length - 1) could lead to the end of the part.

If so, then the CR can be safely ignored, waiting for the future LF and
separator, and the buffer can be added to the part content.

If not, the CR is part of the content and shall be included.


Add a non regression test.

Result: 
Fix issue #11668"
332e68411e87062a0c80a7be7e4f58a18351c0df,"Upgrade to netty-tcnative 2.0.44.Final (#11730)

Motivation:

A new version of netty-tcnative was released

Modifications:

Upgrade to 2.0.44.Final

Result:

Use latest version"
f87abab779613cbe730fc0fa8fd32fa7c90609d1,"Epoll compiled on GLIBC only supports GLIBC at runtime (#11722)

Motivation:
It is possible to run into JVM crashes when our native binaries are compiled for one libc but then linked with another at runtime.
There is no guarantee that their ABIs will be compatible, and this can cause all sorts of trouble.
All our Linux binaries are compiled for GLIBC, so it makes sense to check that any binary compiled for GLIBC also ends up with GLIBC at runtime.
Especially since alternative libc implementations, such as musl, are getting increasingly popular in a containerised/serverless world.

Modification:
Add a check when loading the epoll native library that verifies: if the library was compiled for GLIBC, then we must not have a Musl libc loaded at runtime.
The key is to make this check without making any libc calls in our native code.
We make this check by reading `/proc/self/maps`, which contain paths for all loaded libraries in our process.
Musl libc often have paths with a particular pattern to their name, so we look for that.
At compile time, we rely on `__GLIBC__` to determine if the binary is compiled for GLIBC or not.

Result:
Epoll is now reported as not available when running a GLIBC binary on a Musl based system.
Previously, epoll would be reported as available, but could cause JVM crashes."
3a5495864e38db4723696805a0fd4b6e238bef15,"Allow to specify taskExecutor when construct HashedWheelTimer (#11728)

Motivation:

Sometimes it might be useful to specify an Executor that will be used to execute the TimerTasks to ensure that the wheel is processed in a timely manner.

Modifications:

- Add constructor that allows to specify an Executor
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/11724"
9802afd141951f6d2d7223896161bb8746ab3014,"Make SniCompletionEvent constructor public (#11731)


Motivation:

It is useful to re-use these events (as for example in QUIC) so let us allow to do so by changing the visibility to public

Modifications:

Change constructors to public

Result:

Be able to re-use the events"
c3e33d376582fe165b4a891b035d39b84bee84be,"Ensure ServerChannel implementations accept multiple connections per read loop (#11729)


Motivation:

Due how the DefaultMaxMessagesRecvByteBufAllocator is implemented we did only ever accept one connection per read loop even thought there might be more pending.

Modifications:

- Introduce ServerChannelRecvByteBufAllocator and use it for all our ServerChannel implementations

Result:

Fixes https://github.com/netty/netty/issues/11708"
6cd9020fda4b6f9056688e5ddba9e4126fac5303,"Add server-side TCP FastOpen support for macOS (#11735)

Motivation:
This completes the story of TCP FastOpen support for macOS.

Modification:
On macOS, to enable TCP FastOpen for a listening socket, we need to set it as a socket option after the bind(2) and listen(2) calls (as opposed to before the listen call, like on Linux, or at config time).
Native methods are added to BsdSocket for getting and setting the TCP_FASTOPEN socket option.
Since activation happens at bind-time, a field is also added to KQueueServerChannelConfig, to track if TCP FastOpen should be enabled or not.
By default, it is off, which leaves this socket option unset to the operating system.

Result:
We now have both client and server support for TCP FastOpen on macOS."
1e9c6f9bbcdea544584b2cdf45ae3515fb6c087f,"Exclude target folder when doing xml validation (#11736)

Motivation:

The validation can fail when a previous build was done because of left-overs in the target directory. We should not do any validation of files in this directory.

Modifications:

Exclude the target directory

Result:

No more xml validation failures"
bc1359550d25f4a498351463374c9acc248c9eb0,"Use install_tool_name and codesign to patch id of shaded library (#11734)


Motivation:

How we did patch the id of the shaded library could lead to JVM crashes if signature validation was used on macOS. This is the case on m1 for example.

Modifications:

- Replace our ""hand-rolled"" way of patching the id with using install_tool_name
- Re-sign the library after patching the id

Result:

No more crashes due adjusted id on m1 when shading is used"
04f0eedea80b2462f240a0b95c2a9198daef3501,"netty-all should not re-package jars (#11732)


Motivation:

As of today our netty-all artifact does just re-package classes / native libs that are included in our other modules. This can result in all kind of different issues especially if some people have netty-all and other netty-* modules on the classpath.

Modifications:

- Change netty-all to not re-package but just depend on the other different modules
- Use the flatten plugin to ensure the correct dependencies are added to the final pom.xml and the optional dependencies are excluded
- Adjust profiles
- Adjust release scripts

Result:

netty-all does not repackage and just pulls in its dependencies.

Result:

After your change, what will change."
a93c1d09efa5085316d35f5422a7dfd8bfe6117e,"Update japicmp-maven-plugin (#11740)

Motivation:

A new japicmp-maven-plugin version was released which fixes a few issues that affected us.

Modifications:

- Upgrade the japicmp-maven-plugin
- Remove excludes that we added as a workaround

Result:

No more workarounds needed for japicmp-maven-plugin"
ee648c305b5cd613d531c645aaf7da7be82d13f2,"Revert ""Epoll compiled on GLIBC only supports GLIBC at runtime (#11722)"" (#11738)

Motivation:

It appears we can't do this while also ensuring that working glibc use cases are not impacted.
In particular, there's a musl/glibc compatibility layer which solves the binary compatibility even though musl can still be in the library mappings.

Modifications:

Reverts netty/netty#11722

Result:

native libs can be used again on alpine with glibc-compat"
acb5ba50ab2f31a3d969a650b0f522bbcdeef29a,"Make the needTask flag lowering consistent in ReferenceCountedOpenSslEngine (#11739)

Motivation:
The needTask flag needs to be lowered before an off-loaded task is executed.
This is because the executed task might want to inspect the needTask state, and it should not see itself in that case.

Modification:
Lower the needTask state before the task execution, not only for asynchronous tasks but also for synchronous tasks.

Result:
More consistent behaviour."
b6021330a7db9bf2a1a5e7fe9bb4b0584bb50ecd,"Our SNI hostname validation was really basic and could lead to exceptions later on (#11742)



Motivation:

Our validation of the SNI hostname was incomplete and so we could end up with an exception once the user calls getSSLParameters() later on

Modifications:

- Just use SNIHostName to validate the name when on Java8 and later
- Add unit test

Result:

Don't throw exceptions once we try to retrieve the SSLParamaters when an invalid SNI hostname was used while creating the engine"
34a31522f0145e2d434aaea2ef8ac5ed8d1a91a0,[maven-release-plugin] prepare release netty-4.1.69.Final
a919b82c042f6159a4e5f93aca67c1be1419c871,[maven-release-plugin] prepare for next development iteration
88319d422eef8efd6177b55dc43e67091f8aa035,"Use the correct flatten mode to pass ossrh validation

Motivation:

We need to use the ossrh mode as otherwise the geneerated pom.xml does not pass validation during the release process

Modifications:

Use correct mode

Result:

Generated pom.xml does pass validation"
3b846e021738632f25991dae2eebe60f5ea3387c,"Generate xref for examples as well (#11758)

Motivation:

We should generate the xref files for examples as well as we link to these on our website

Modifications:

Remove exclude

Result:

Correctly generate xref for examples"
9bda69359901ed2f527d3b80c55d7485e35f684f,"Update JMH version (#11763)

Motivation:
There has been a number of fixes to JMH regarding running and profiling on macOS.
Also, it's good to stay up to date regardless.

Modification:
Update the JMH version from 1.22 to 1.33.

Result:
Our JMH version is up to date."
5cb601d06e164aa92772b8acd130c7778124bd5b,Fix typo in HttpPostMultipartRequestDecoder (#11764)
07cc3fd57993ac3d7b18375e1bd453dfbdb2b27d,"Make it possible to query Epoll if TCP FastOpen is available (#11762)

Motivation:
While TCP FastOpen is mostly a pure optimisation (albeit one that demands idempotency of TFO messages), it can still sometimes be useful to query whether it can be expected to be available.
This information can for instance be useful for telemetry, where you want to include if TFO is available to the system, to see if it helps overall.
For epoll, we have such fields already, but they are not public.
The public field we do have, is deprecated and conflates clients and servers.

Modification:
Add static methods to Epoll that delegates to the existing IS_SUPPORTING_TCP_FASTOPEN_{CLIENT/SERVER} fields.
Whether TFO is available is also predicated upon epoll itself being available.

Result:
People, who specifically rely on epoll, can now query their system in pure Java about whether TFO is available or not."
77b7c1a56dcd4fc964137f21caf321a1ca19c0ed,"Make it possible to query KQueue if TCP FastOpen is available (#11766)

Motivation:
While TCP FastOpen is mostly a pure optimisation (albeit one that demands idempotency of TFO messages), it can still sometimes be useful to query whether it can be expected to be available.
This information can for instance be useful for telemetry, where you want to include if TFO is available to the system, to see if it helps overall.
For kqueue, it is possible to query `sysctl` to determine if client-side or server-side TFO is available.

Modification:
Add static methods to KQueue that delegates to IS_SUPPORTING_TCP_FASTOPEN_{CLIENT/SERVER} fields.
These fields are populated when Native is initialized, by querying `sysctl` in a platform-specific way.
Whether TFO is available is also predicated upon kqueue itself being available.

Result:
People, who rely on kqueue, can now query their system in pure Java about whether TFO is available or not.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
e1d2a95c4a4bc77ea2516c66af052e309d426c60,"Exclude transitive dependencies of rarely used modules from netty-all (#11786)

Motivation:
Netty-all is used to unconditionally pull in all netty modules with the same version.
Some of these modules have dependencies themselves that are pulled in transitively, yet they are rarely used.

Modification:
Exclude the transitive dependencies of netty-codec-xml, netty-transport-rxtx, and netty-transport-udt.

Those who wish to restore these modules to working order can additionally depend on org.fasterxml:aalto-xml, org.rxtx:rxtx, or com.barchart.udt:barchart-udt-bundle, respectively.

Result:
Depending on netty-all no longer transitively depends on any non-netty maven modules."
3a1fb3f10df18eece68e88a86d4561fdd1b7723a,"Fix the javadoc for ByteBuf.setCharSequence (#11793)

Motivation:
The javadoc appeared to have been copied from a write* method, but it has set* semantics.

Modification:
Update the javadoc to match its intended semantics.

Result:
The javadocs now describe the intended behaviour.

Fixes #11784"
658de70da9ce783a97c290d7fcffda149bdcef2f,"Update Groovy versions (#11800)

Motivation:
The old Groovy versions are running into compatibility issues with the latest JDK snapshots.

Modification:
Update the groovy maven plugin and its groovy dependency to the latest versions.
It looks like groovy-all is now a pom-dependency, so we switch to just groovy since we don't need what's in -all beyond that.

Result:
We now build on the latest JDK snapshots."
6a84af796571c7b54f0bb314db7f3bd8dd194311,"Move java classes out of the native modules (#11798)

Motivation:

To ensure the user doesnt end up with the same classes multiple times in the classpath when including native dependencies for different platforms we need to ensure we not include the java classes in this jars but provide them as seperate modules.

Modifications:

- Introduces a *-classes-* module for each *-native-* module and depend on it from the native module
- Add entries to the bom
- Depend on the correct artifacts in netty-all to ensure we not end up with the same classes multiple times

Result:

Fixes https://github.com/netty/netty/issues/11791"
555fcf22747dbacb26fe1c4ce8217337491d86c0,"Add unit test that verifies we not fail hostname verification if a matching SNI name was used (#11803)

Motivation:

We didn't have a unit test that verifies that the SNI hostname is respected when hostname verification is performed

Modifications:

Add unit test

Result:

Ensure we not regress"
baba1f4805bd8c0f05c694eed11413933fc3d15d,"Fail build if netty-all pulls in duplicated classes (#11804)


Motivation:

We should fail the build if netty-all pulls in dependencies that produce duplicated classes on the classpath

Modifications:

Add maven plugin to verify we not have duplicated classes on the classpath / dependencies

Result:

Related to https://github.com/netty/netty/issues/11791"
2a028dd454983717d6df2ede4b82a5492778b0d0,"Fix gzip decoding when FLG.FHCRC is set (#11805)

 
Motivation:

The current implementation is not respecting the spec at https://www.ietf.org/rfc/rfc1952, section 2.3.
> If FHCRC is set, a CRC16 for the gzip header is present,
> immediately before the compressed data. The CRC16 consists
> of the two least significant bytes of the CRC32 for all
> bytes of the gzip header up to and not including the CRC16.

The implementation is reusing the CRC32 logic without taking the two least significant bytes.

Modifications:

Use a method that respects the spec.
 
Result:

When the FLG.FHCRC bit is set, the correct verification algorithm will be used."
d6f029c279a6def4e2d4216b2c2b3e446a357b70,"Update java versions to latest update (#11812)

Motivation:

New java updates were released

Modifications:

Update java versions

Result:

Build with latest version"
30d9404b06d07447ea15b2e1584988d470828829,"Make static final buffers unreleasable and read-only (#11802)

Motivation:

Fix https://github.com/netty/netty/issues/11792 and avoid potential corruption issues caused by writable shared buffers.

TL;DR:

`HttpObjectEncoder` sends a duplicate of its static final `ByteBuf` field to encode HTTP chunks, such as `0\r\n\r\n`. This reused buffer is neither read-only nor unexpandable, and thus anyone in the pipeline can modify or expand it. As a result, `SslHandler` can sometimes expand it and append stuff to it, causing unexpected data corruption.

Modification:

Most of the static final buffers in the project are made unreleasable and read-only by wrapping them in `Unpooled.unreleasableBuffer(...).asReadOnly()`. Buffers that were excluded:

- Unpooled.EMPTY_BUFFER - EmptyByteBuf instances are not readable/writable/releasable. Wrapping this buffer in `Unpooled.unreleasableBuffer(...).asReadOnly()` would change the instance type, since it's a public API it could be a potential breaking change.
- ReplayingDecoderByteBuf.EMPTY_BUFFER - since it uses Unpooled.EMPTY_BUFFER and not releasable too.

Excluded buffers are marked with `SuppressWarnings` to skip check added in https://github.com/netty/netty-build/pull/12.

Result:

Fixes #11792."
f49c94c83a5b2a2625913f57515c8dc6ab8c2639,[maven-release-plugin] prepare release netty-4.1.70.Final
cf624c93c5f97097f1b13fe926ed50c32c8b1430,[maven-release-plugin] prepare for next development iteration
f622a52d62b78d4bda9fe410839f73e70f2af9b7,"Fix typo in WebSocketClientProtocolHandler.java (#11818)

Motivation:

Fixed typo.
```
succesful -> successful
```"
1a68cfd0209e03dced1ede66b3fbc9707a1d23eb,"Fix typo in comments (#11821)

Motivation:

There are some typos in source codes.

Modification:

Fix typos in source codes."
d6f6961ef377ab4c3f448446933e47e945e2ac01,"Clarify exception message for SearchDomainUnknownHostException (#11822)


Motivation:

Often users are not aware of the fact that search domains will be tried as well. The existing exception message was often kind of confusing

Modifications:

Change exception message to be more clear

Result:

Less confused users"
5d5dac659c440c84eab806357127c194867fd6f6,Add email address to report security issue
6978e13ef6c90f4f3dbf27870e03077e090d5b8c,"Correctly include fedora in netty-tcnative classifiers (#11838)

Motivation:

We did not include -fedora in the linux-aarch_64 classifier of netty-tcnative and also didnt list linux_x86_64-fedora at all.

Modifications:

- Fix one classifier and add the missing one

Result:

Fixes https://github.com/netty/netty/issues/11834"
f2cb277b27426c346136b5d71fa9108af25dbdc2,"Correctly handle InputStream.read() when it return -1 during writing to the ByteBuf (#11837)

Motivation:

We didnt correctly handle the case when the InputStream did reach EOF during writing to the ByteBuf and so return -1.

Modifications:

- Correctly handle EOF
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/11829"
4937e9c64a57464b93364463982a92e110fa23f0,"Clarify javadocs of ByteBuf methods that take InputStream / FileChannel / ScatteringByteChannel (#11840)


Motivation:

We should clarify in which scenarias the methods return -1.

Modifications:

Clarify the javadocs to reflect current behaviour

Result:

Javadocs are correct"
81f8b1a5017a4887bdd42dd8f4c8157953b07d24,"We should define netty-tcnative (with classifier) as runtime dependency (#11745)


Motivation:

The netty-tcnative lib that contains the native lib should be a runtime dependency while the one without the native lib should be compile time

Modifications:

- Add netty-tcnative-classes dependency as compile time and netty-tcnative with classifier as runtime dependency

Result:

More correct dependency declaration"
167bd2b37a6e035d63f5d0371de3a9d0d495e9d3,"Bump Brotli4j to 1.6.0 (#11843)

Motivation:
Brotli4j 1.6.0 was released a few months back and it's the latest version of Brotli4j. However, Netty is still using 1.5.0. So it's time to upgrade.

Modification:
Upgraded Brotli4j from 1.5.0 to 1.6.0

Result:
Up-to-date version of Brotli4j"
2b4ac369669116d152ec8893910a04cdf4d94c65,"Fix reentrancy bug in SslHandler which can cause IllegalReferenceCountException (#11854)

Motivation:

These days our native SSL implementation makes use of ""tasks"" to allow off-loading operations. Due a bug this could lead to an re-entrancy issue when the Executor used is directly executing the task by the same thread that submits it. As an end-result it was possible to see IllegalReferenceCountException when the tryDecode(...) method will cause the original buffer to be released.

Modifications:

- Always submit the resume to the eventloop to ensure we never have an re-entrancy problem
- Add unit tests that would fail before the fix.

Result:

Fixes https://github.com/netty/netty-tcnative/issues/680"
6860f32ce6757c25b18767c395eaaca8e5ff83c6,"Limit workaround on JDK-6427854 to Java <1.7 (#11863)

Motivation:

The workaround introduced by #203 (completed by #5644) on bug
[JDK-6427854](https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6427854)
turns out to be no longer applicable since Java 1.7.

Only first few builds of JDK 7 were affected by the bug, which got
fixed in **build 8**. Since JDK 7 was feature complete in
[build 123](https://blogs.oracle.com/java/post/jdk-7-feature-complete),
there's no need to therefore apply the workaround since Java 1.7.

Modifications:

This commit makes sure the workaround (consisting in setting the system
property `sun.nio.ch.bugLevel` to an empty string unless defined)
doesn't get applied when the detected Java version is greater than or
equal to 1.7.

Result:

The workaround gets only applied for Java versions strictly prior to 1.7.

Conditioning the workaround to the Java version will incidentally help
get rid of it when bumping up the minimum JDK support as proposed in
various issues s.a. #8259 and #8540."
40196a6305f7bfb5a3490196360b0862c9a0470d,"Rewrite and simplify Recycler (#11858)

Motivation:
We have in the past gotten reports of weird errors that we haven't been able to reproduce, but which could be explained by bugs in the Recycler.
The reason is that the Recycler was mixing concurrency, and interactions with the GC, in ways that were difficult to reason about.
It is unwise to leave suspicous-looking code unaddressed.
Concrete issues, like #11864, should also be addressed.

Modification:
The Recycler has been rewritten to use a much simpler algorithm, and now completely avoids the use of weak references.

The WeakOrderQueue is gone, and there is no longer a concept of a shared max capacity - only thread-local capacity.

There is also no more scavenging.
It turns out that other code was relying on the ability to forget references to objects they acquired from a Recycler, and this is hard to support if there is a shared pool for moving handles between threads.

Each thread now has a local pool (an MPSC queue).
Calls to get() and recycle() in the same thread will just operate on the local pool queue.
Calls to recycle() from a thread that did not get() that object (the object was acquired in another thread) will rely on the multi-producer safety of the queue to directly release it back to the local pool that the object came from.
We rely on setting an upper bound for the queue sizes, and the fallible offer() method, for restricting the max thread-local capacity of the recycler.

The constructors have been modified to deprecate the many configurations that are no longer relevant.
A new configuration parameter, the queue chunk-size, is exposed as a constructor parameter.
The queues will grow and shrink in units of this chunk size.

The benchmark from #8052 is copied over and updated, and shows that these changes help overall, with no hidden surprises.
Performance is roughly the same, and allocation rate is down a notch in all the benchmarks.

Result:
The Recycler code is much easier to understand."
d5faba2fbeb7da65daa0a10f41560f47443c1026,"Eagerly clear thread-local recycler pools (#11866)

Motivation:
An object acquired in thread A but strongly referenced from thread B, will keep the entire thread-local pool for A alive past the termination of A.

Modification:
Add an onRemoval callback to the thread-local that holds the local pool instances.
A call to FastThreadLocal.remove() will then clear the queue, reducing the memory pressure from objects strongly held in other threads.

Result:
Reduced memory overhead when recyclable objects are held past the life-time of the thread-local pool they were allocated from."
27cf661f5eec7eead99f01ee4c87e9f51980cf53,"Link required libraries for MacOS (#11868)

Motivation:

When building Netty on MacOS it can fail due to missing libraries

Modification:

A link for Native transports wiki page

Result:

When reading the README, the developer will know what are the required libraries for MacOS"
ea2742b4f628dfae9523c49b22472df921d1386c,"Do not allow third parties to provide Netty's native libraries (#11856)

Throw an exception when there are multiple netty-tcnative-** libraries with the same path in the classpath

Motivation:

Currently Netty loads the first resource in the classpath with a given name.
It seems there are [libraries](https://github.com/netty/netty-tcnative/issues/681#issuecomment-977752064) which provide Netty's native libraries themselves.

Modification:

From now on Netty will look for all resources with the given name and throw an exception if there are more than one.
The user application needs to make sure that there is at most one provider of Netty's native libraties (netty-tcnative-**)

Result:

Fixes https://github.com/netty/netty-tcnative/issues/681."
16d19ae2c7a10d0325dca019ab6a936364acc20c,"Fix implicit narrowing (#11881)

Motivation:
Compound assignment can cause a long RHS to be implicitly narrowed to an int LHS result.
This can cause overflow bugs.

Modification:
Compute and compare the sums as longs in our test.

Result:
Fewer overflow risks."
1e189654f913b13be3616c552a04459465b752b3,"Fix testsuite which was broken due ba3a58e2efc14e6754dfd3d7c8a8b59f91c7f87e (#11884)


Motivation:

ba3a58e2efc14e6754dfd3d7c8a8b59f91c7f87e intoduced a change which guards against loading native libraries if there are multiple of the same on the classpath. Unfortunally this also broke our native testsuites as the testsuites did include the native libs two times on the classpath.

Modifications:

Add an exclude which ensures we not copy the native libs to the test-classes folder and so end up with duplicates on the classpath

Result:

Testsuite passes again"
386fab76d62feba06efa5f24c4f526d9265c88e5,"Fix testResources and so the forbidden API plugin (#11893)

Motivation:

1e189654f913b13be3616c552a04459465b752b3 added a change to fix the testsuites but the declaration introduced there was not complete and so the forbidden API plugin failed when using java8

Modifications:

- Use the correct phase for running the resources plugin
- Include classes as well

Result:

Fixes the forbidden API failure"
333b450ee619da2cb14fe9b2323cc5b1b9e36c6f,"Remove static field from c code base (#11894)


Motivation:

This came up in another PR. We dont need to store the field in the jni layer which makes things easier.

Modifications:

Refactor code to just store it in the java class

Result:

Cleanup"
e7c4c3cacea22ecb09fcbc57abcd06929e4737a1,"Add Revapi and fix non-public classes exposed in public API (#11817)

Motivation:
Some of our public APIs expose non-public (private or package-private) members through various means.
This makes the API surface inconsistent, and can lead to compatibility pitfalls.

Modification:
Fix all instances where non-public API is exposed through the public API, by making the non-public API piece public.
The newly-public APIs are also marked with the UnstableApi annotation.

A revapi configuration has been added to the parent pom.xml file, which automatically checks for instances of such API exposures.
Revapi also checks backwards for backwards incompatible changes, like japicmp does.
In time, we might phase out japicmp and rely only on revapi, since revapi seems to perform a super-set of the checks that japicmp does.

Finally, neither revapi nor japicmp are able to ignore API elements annotated with UnstableApi, because the annotation has source retention, and these tools work on the byte code level.
Changing the retention policy would be a backwards incompatible change, so we can only do that in Netty 5.
A TODO note has been added to remind us of this.

Result:
We are no longer exposing non-public API elements through our public API, and automated checks have been put in place that will fail the build if new exposures are introduced."
e391d9f58a6c2eacaea1cded82a4702836f54a58,"Swap equals method call in SelfSignedCertificate (#11896)

Motivation:

Users may set the algorithm in the constructor of `SelfSignedCertificate`, and need to swap `equalsIgnoreCase` method to call in `SelfSignedCertificate`,can avoid throwing `NullPointerException`

Modification:

Swap `equalsIgnoreCase` method to call in `SelfSignedCertificate`


Result:

`SelfSignedCertificate` will not throw NullPointerException


Signed-off-by: xingrufei <rufeixing@tencent.com>"
559c08555eea54582b24c7c52152f75b6dbb4301,"Ensure we always run the register task of native libraries (#11887)

Motivation:

At some point we introduced guards to ensure we not bind native methods multiple times. While this seemed to have fixed the problem it introduced other problems
as these methods sometimes not only bind native methods but also init static fields. This could later then cause things like segfaults if we depend on static fields to not be NULL.

Modification:

Remove atomic guard
Use static synchronized for proper sequencing
Always call Socket.initialize()
Result:

No more segfaults due NULL fields"
d80a34ecf84bbe153b60123b059deabcc97a8935,"JdkZlibEncoder can use pooled heap buffers for deflater input (#11891)


Motivation:

Previously, when the input ByteBuf was not heap allocated we copied the
input into a new byte array allocated on the heap for every encode() call.
This puts high-throughput clients that use the JdkZlibEncoder under memory
pressure.

Modifications:

Now, when the input ByteBuf is not heap allocated we copy the input into a
heap ByteBuf allocated from the configured ByteBufAllocator (which might be pooled), releasing it after
the encode() has completed.

Result:

The result is less heap allocation and GC activity when the PooledByteBufAllocator is used (which is the default)

Fixes #11890

Signed-off-by: Daniel Ferstay <dferstay@splunk.com>
Co-authored-by: Daniel Ferstay <dferstay@splunk.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
07aa6b5938a8b6ed7a6586e066400e2643897323,"Merge pull request from GHSA-wx5j-54mm-rqqq

Motivation:

We should validate that only OWS is allowed before / after a header name and otherwise throw. At the moment we just ""strip"" everything except OWS.

Modifications:

- Adjust code to correctly validate
- Add unit tests

Result:

More strict and correct behaviour"
2e346c1d1d6fc58762f52fd31ee4dc5a92d3a5bd,[maven-release-plugin] prepare release netty-4.1.71.Final
2fd8695a63272123b44fe7edc16f9ffdd92bea94,[maven-release-plugin] prepare for next development iteration
e00d101d7c5a9c5f038b068f7fe47cdc2a484720,"Update tcnative version in bom (#11902)

Motivaiton:
The bom is out of sync with the project version
of tcnative. This results in unresolved
dependencies when using the bom."
19b503b70ad0313de28cc82c3f09d154dbe605b2,"Verify that all dependencies defined in the bom are resolvable (#11904)

Motivation:

We should ensure we can resolve all the dependencies that are defined in the bom

Modifications:

Add maven plugin which does the verification

Result:

Less likely to include incorrect dependencies in the bom"
4312720c01494c6d7af6b982ddb62b520a2636f7,"Update to log4j 2.15.0 to fix security issue (#11907)

Motivation:

log4j 2.15.0 was released to fix a 0-day security issue. While the log4j dependency is fully optional we should still upgrade.

See https://www.lunasec.io/docs/blog/log4j-zero-day/

Modifications:

Upgrade to 2.15.0

Result:

Use non-affected log4j version"
4ebeb7421b611ca27b6b249d2a39321d3e4af447,"Specify the platform version and deployment target on macos (#11906)

Motivation:

We should specify the platform version and deployment target when on macos as otherwise we might change requirements of minimal macOS version without notice it.

Modifications:

- Add -platform_version to the linker args
- Always specify MACOSX_DEPLOYMENT_TARGET target

Result:

Be able to use native macOS libs again on older macOS releases"
af708b3d0187d9f87a50e1fe1cc3e2548c7fbc73,"Update to log4j2 2.15.0 to fix security issue (#11909)

Motivation:

log4j 2.15.0 was released to fix a 0-day security issue. While the log4j dependency is fully optional we should still upgrade.

See https://www.lunasec.io/docs/blog/log4j-zero-day/

Modifications:

Upgrade to 2.15.0

Result:

Use non-affected log4j2 version"
b237c87bcc92d6875919a01b2445279dc5c6170c,"Add script which validates that netty-tcnative versions are in-sync (#11915)

Motivation:

We most ensure the netty-tcnative versions between our parent pom and the bom pom are in sync

Modifications:

Add script and use it during github action run to verify that the versions are the same

Result:

No more problems due version missmatch"
15196ad70ff76e02acb517f11350f457d06c7e65,[maven-release-plugin] prepare release netty-4.1.72.Final
cccce01497db4ac33b412dfb60630fc5ab443ce1,[maven-release-plugin] prepare for next development iteration
6224746d4a144cc7c8a751bbad592f61990fe4fd,"Use log4j2.version variable instead of fixed version for log4j-1.2-api in pom.xml (#11924)

Motivation:

We can just re-use the property some don't have to specify the version two times.

Modification:

Replace version with property

Result:

Easier to keep versions in sync"
11ba4cbdd5767b4f0fbb893880d255588d1067e6,"Update to log4j2 2.16.0 (#11923)

Motivation:

see https://logging.apache.org/log4j/2.x/changes-report.html#a2.16.0

Modification:

Upgrade to the latest release

Result:

Use latest log4j2 version"
3ac1f9c1b2f92b6a22c0cfe44ffda581bcaa9cfb,"Allow same native libraries if content is the same (#11927)

Motivation:

Sometimes a user might end up with the same native library on the classpath, for example if the user depends on the uber-jar but another dependency directly depend on the classifier version. As long as the native libraries are the same there is no reason to fail loading it.

Modification:

- Check if the native library is the same (by compare the SHA256 of the file) and if so not fail
- Add a unit test

Result:

More robust check for native libraries"
51dd89b9983908f98f25dd2f093d1ce101188e2a,"Allow to disable duplicate native library check (#11928)

Motivation:

ea2742b4f628dfae9523c49b22472df921d1386c introduced a change to fail loading the native lib if the lib is included multiple times in the classpath. While this makes a lot of sense it is not always easy for people to fix this easily in a fast-manner. We should allow to opt-out of it.

Modifications:

- Add 'io.netty.native.detectNativeLibraryDuplicates' property that allows to disable the check. Default is enabled
- When check is disabled we log via warn to notify the user about the need to fix it

Result:

Easier for people to upgrade"
ea6d48320a007d403c8245bc548c1dd9c5f54e11,"Re-read /etc/hosts periodically in `DefaultHostsFileEntriesResolver` (#11922)



Motivation:

`io.netty.resolver.DefaultHostsFileEntriesResolver` parses `/etc/hosts` only once, upon creation.
With these changes `DefaultHostsFileEntriesResolver` will periodically re-read configuration.

Modification:
1. Made `HostsFileEntriesProvider.Parser` dependency injectable via constructor to be able to test my changes
2. Added entries `expiry` check and re-read before resolving addresses
3. `address` now uses `addresses` function inside

Result:
`DefaultHostsFileEntriesResolver` now re-reads data from hosts file every 10 seconds. 

Fixes #11661"
c08beb543a6b8db0c7f3cee225042361b4025e4c,"Fix issue #11920: Slf4JLoggerFactory does not initialize when using no-op logger (#11931)

Motivation:

Fixes issue #11920: Slf4JLoggerFactory does not initialize when using no-op logger.

Modification:

Move the INSTANCE_WITH_NOP_CHECK to a nested class so that the failure does not affect the outer class.

Result:

Fixes #11920. 


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
67321455a594f06ab32d79d3941ca43ec6e94e96,"Fix typos in comments of the ConstantTimeUtils.java file (#11936)

Motivation:

The comments in the ConstantTimeUtils.java have example source code.
The code declares variables and uses them. There are typos in the name of the variables.

Modification:

Fix the variable names in the examples.

Result:

The typos are fixed."
b0eb54e7d0f4d3ab4eef8e3c1d4f083c27808e5f,"Update to log4j 2.17.0. (#11938)

See https://logging.apache.org/log4j/2.x/changes-report.html#a2.17.0

Motivation:

log4j 2.16 was recently discovered to be vulnerable to an infinite recursion DOS. Version 2.17 fixes [LOG4J2-3230](https://issues.apache.org/jira/browse/LOG4J2-3230).

Modification:

Change the POM from 2.16 to 2.17 for log4j.

Result:

This PR updates log4j to 2.17, which includes a patch for the issue."
16f31f83f2b17dc9f450943bf84192cd28874e42,"Move variable keepAlive declaration close to where it is used. (#11932)

Motivation:
Variable declaration should close to where it is used.

Modification:
Move variable keepAlive declaration close to where it is used

Result:

Cleaner code"
e21caf11d94d96657d140914ff65a62cf24e81ee,"Fix ArrayIndexOutOfBounds: 39 from PoolArena.findSubpagePoolHead (#11939)


Motivation:
We were getting occasional reports of an ArrayIndexOutOfBounds from PoolArena.findSubpagePoolHead, which always happened at index 39.
The sub-page size index array is 39 entries in length, so this access was one past the end.
This should not happen, because a size that *would* compute to index 39, would be a normal-sized allocation (rather than a small one) and thus not use sub-pages at all.
The reason this occurred, is because the ""handle"" associated with the allocation indicated that it was small, and thus upon freeing we would access the sub-page array, but the specific index was computed from the normalized allocation size, which was ""normal"" instead of ""small"".
This happened because of a use-after-free issue in PoolThreadCache, where the entire state of Entry objects were captured prior to return the entry to the recycler *except* for the normCapacity field.
The normCapacity field is what becomes the normSize down the stack, and accessing this field after a recycle could cause the access to race with a concurrent allocation.
So if the allocation was originally small and using sub-pages, then we would capture a sub-page handle, then recycle the entry object, which then got used in a normal-sized allocation, and *then* we read the normCapacity field of this other allocation.

Modification:
The fix is to capture the normCapacity field before calling Entry.recycle() in PoolThreadCache.freeEntry.
A couple of assertions have also been added, to possibly capture bugs like this at an earlier point in the execution.

Result:
We should no longer get this particular ArrayIndexOutOfBoundsException."
e90f9bc6c6664d679c61922c39386d51447f1a49,"Use boringssl when building on macOS m1 (#11944)

Motivation:

We currently only release netty-tcnative statically compiled against boringssl for macOS m1.

Modifications:

Add profile which will automatically use boringssl version if on macOS m1

Result:

Can build on m1 without problems. See https://github.com/netty/netty/issues/11941"
d4ce58e74874453534c51448085e0a94d5bbad26,"Use ChannelHandlerContext.isRemoved() to check if the handler was already removed (#11945)

Motivation:

We have a method to check if a handler was removed already, we should use it.

Modifications:

Replace usage of context(this) != null with isRemoved()

Result:

Cleanup / small perf improvement"
904a6924b4cbcbfdbd1e6023ae1662b5ac48526f,"`DefaultHostsFileEntriesResolver`: do not periodically re-read /etc/hosts by default (#11943)



Motivation:

After https://github.com/netty/netty/pull/11922, by default `io.netty.resolver.DefaultHostsFileEntriesResolver` synchronously reads `/etc/hosts` every 60 seconds, while before It read `/etc/hosts` once upon instantiation.

Modification:

By default `io.netty.resolver.DefaultHostsFileEntriesResolver` reads `/etc/hosts` once upon instantiation. This corresponds to io.netty.hostsFileRefreshInterval = 0

Negative values for io.netty.hostsFileRefreshInterval are forbidden

Result:

`io.netty.resolver.DefaultHostsFileEntriesResolver` reads `/etc/hosts` once upon instantiation, which corresponds to default behaviour prior to https://github.com/netty/netty/pull/11922"
64501bed7fb3a8deec9968ca679d24bbc487146a,Fix typo in AbstractMultiSearchProcessorFactory (#11957)
8d6b142a4df355a7b61f0d131b03461ec7dafad2,"Try to fix rare failure in DnsNameResolverTest (#11954)

Motivation:
We occasionally see the following stack trace from DnsNameResolverTest:
java.net.BindException: Address already in use (Bind failed)
 	at java.base/java.net.PlainSocketImpl.socketBind(Native Method)
 	at java.base/java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:436)
 	at java.base/java.net.ServerSocket.bind(ServerSocket.java:395)
 	at java.base/java.net.ServerSocket.<init>(ServerSocket.java:257)
 	at java.base/java.net.ServerSocket.<init>(ServerSocket.java:149)
 	at io.netty.resolver.dns.DnsNameResolverTest.testTruncated0(DnsNameResolverTest.java:3122)
 	at io.netty.resolver.dns.DnsNameResolverTest.testTruncatedWithTcpFallback(DnsNameResolverTest.java:3050)

The failure is too rare to say for sure why it happens — I was not able to observe it locally — but it could be because we try to bind before we allow port reuse.
The server in question binds to port 0, so a random free port chosen by the OS, but it binds a UDP socket.
I don't know if UDP and TCP sockets conflict like that.

Modification:
Make sure that we allow port reuse on the socket before we bind it to a port.

Result:
We will hopefully see fewer test failures here.
We already tried to enable port reuse, which I suppose we did for a reason, but by enabling before binding, we should get the desired effect from it."
395ae53baa24c1175ffe9125b7f95455154ac684,"Ignore some SslContextBuilderTests on certain JDKs (#11953)

Motivation:
The tests testUnsupportedPrivateKeyFailsFastForServer and testUnsupportedPrivateKeyFailsFastForClient are failing on RedHat/Fedora distributions of JDK 11.

The test try to assert that a certificate using an exotic curve is rejected by BoringSSL, and throws an SSLException when building the private key.

However, on RedHat JDK 11, this curve - 1.3.132.0.39 - is not in the JDK CurveDB, and so we get an IllegalArgumentException when creating the key manager.
The CurveDB on this distribution has a pretty limited set of curves available, so it might not be possible to find one that is accepted by the key manager, but rejected by the private key build.

Modification:
Make the tests look out for the IllegalArgumentException from the CurveDB, and if observed, abort the test as if by an assumption violation.

Result:
The tests will now be ignored, rather than fail the build, when running on JDKs that do not know about the curve used in the test."
9ab5e9180253e85eacdb978d436c087615c6e3b1,"Update GlobalTrafficShapingHandler javadocs to match reality (#11949)

Motivation:

Javadocs not match the real constructor argument type.

Modification:

Change ScheduledExecutorService to EventExecutor in javadocs

Result:

Fixes #11948."
bdcf3988c20c9c0dae92850b36ae63d5ddc5b502,"Update to log4j 2.17.1. (#11961)

Motivation:

log4j 2.17 is vulnerable to RCE via JDBC Appender when attacker controls configuration. CVE-2021-44832

Modification:

Bump log4j property to 2.17.1.

Result:

Updates log4j to 2.17.1, which includes a patch for the issue."
6feaf9c8b2b65810f41fde264f7d2ec7294b2085,"Add a `fast` maven profile (#11969)

Motivation:
To assist IDEs and other tools, it is often required to make `install` builds locally.
Since this can block work, it's desirable for these builds to be as fast as possible.

Modification:
Add a profile that skips many checks, to speed up the build.

Result:
It is now possible to make a clean build with `mvn clean install -Pfast -T1C` in (on my machine) under two minutes."
195b84910644e51f2323a30d55704f0e361fdcd8,"Fix ByteBufUtil.indexOf(buf, buf) (#11970)

Motivation:
The ByteBufUtil.indexOf(buf, buf) method has historically been returning absolute indexes in the haystack.
With the introduction of the Two-Way algorithm, it inadvertently got changed to return offsets relative to the haystacks reader index.
That's a compatibility breaking change.

Modification:
Restore the old behavior of returning absolute indexes.

Result:
Compatibility is restored.
Fixes #11963

Note that the impact of this bug has been relatively minor inside Netty itself, since the produced index was only used for the error message when Http2ConnectionHandler failed to detect ""HTTP/1"" in the client preface."
f1eb920467ebad658fc0a108f73a98017fa28612,"Make use of relaxed*() in Recycler when possible (#11960)


Motivation:

We should be able to make use of MessagePassingQueue.relaxed*() methods in Recycler to reduce the overhead.

Modifications:

Use MessagePassingQueue.relaxedOffer(...) / MessagePassingQueue.relaxedOffer(...)

Result:

Less overhead"
363884e13639e75a508be33db485b99fcbb8d26a,"Add a lock-based message passing queue to help debug a problem with Recycler (#11972)


Motivation:
The Recycler has been observed to produce infinite loops on ARM CPUs.
It is not clear if this is caused by a JDK bug, a JCTools bug, or a Recycler bug.
Having the ability to switch out the JCTools queue implementation will aid us in the investigation.

Modification:
Implement MessagePassingQueue as a synchronized ArrayDeque, and add a system property to enable the use of this implementation in Recycler.

Result:
We should now be able to rule out the possibility of a bug in either JCTools or the Recycler."
849649b48d3c8fbf86565b8fa28a07f8b673adaf,"(small) Fix linked issue in SslTasksRunner comment (#11977)

Motivation:

While debugging strange behavior of SSL tasks on older JDKs (~1.8.221) for grpc-java, noticed a typo in a comment referring to the issue with more context on the reentrancy issues and tasks. 
Ref  #11854.

Modification:
For posterity.

Result:
No op, just a change in a comment."
1cbd3afcdec9591b477ccddc3173afd7b30b7df5,"ByteToMessageDecoder must  not call read() in channelReadComplete(...), if no channelRead(...) was fired. (#11966)

Motivation:

When ByteToMessageDecoder added in channelRead(), the following channelReadComplete() will lead ByteToMessageDecoder to call a read(),
which is not expected.

Modifications:

Add a field variable tracking the state of if ByteToMessageDecoder.channelRead() is fired after handler added. And if it was NOT fired, then the next channelReadComplete() would not call read()

Result:

Fixes https://github.com/netty/netty/issues/11965

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
fd05a3311dd065d4af2650e2cf8dc22345d99a9f,"WebSocketServerProtocolHandshakeHandler should work without aggregation (#11976)

Motivation:

WebSocketServerProtocolHandshakeHandler assumes the msg is FullHttpRequest which is not really needed.

Modifications:

- Rework logic so we not depend on the fact that aggregation is used.
- Add test

Result:

Fixes https://github.com/netty/netty/issues/11952"
bd7e0f72bdcae09beccb42f0562a862caaf8c89e,Remove unused import (#11978)
ef69732a42d020a4af50de57d91087f4f4c4876c,"Correctly calculate the elementSize when cache alignment is configured (#11987)


Motivation:

We need to take the cache alignment into account when we pre-calculate the ementSize otherwise we fail later.

Modifications:

- Fix pre-calculation
- Add unit test
- Fix incorrect unit test

Result:

Fixes https://github.com/netty/netty/issues/11955"
cb106bed56046b4fd514702dc2dbfc48f94b7f72,"FastThreadLocal.set(V) method throws NegativeArraySizeException after called more than (1 << 30) times of new FastThreadLocal() (#11934)

Motivation:

Fixes issue #11933: FastThreadLocal.set(V) method throws NegativeArraySizeException after called more than (1 << 30) times of new FastThreadLocal()

Modification:

Add index bound check in methods `io.netty.util.internal.InternalThreadLocalMap#expandIndexedVariableTableAndSet` and `io.netty.util.internal.InternalThreadLocalMap#nextVariableIndex`.
Result:

Fixes #11933."
d60ea595bcd2399530d8becbced45df0b9b22aa5,"ensure the side which enable SO_LINGER and call showdownOutput to start TCP half-closure in fin_wait2 state can still receive and process the data which is send by another side in the close_wait state (#11982)

Motivation:

we can not call `doDeregister` to cancel the key of the channel from the selector in the `io.netty.channel.AbstractChannel.AbstractUnsafe#shutdownOutput(io.netty.channel.ChannelPromise, java.lang.Throwable)` method。

- because we should ensure the side which enbale `SO_LINGER` and call `showdownOutput` to start TCP half-closure in fin_wait2 state can still receive and process the data which is send by another side in the close_wait state。

- and the shutdown function does not block regardless of the SO_LINGER setting on the socket,so we don't need to use GlobalEventExecutor to execute the shutdown

Modification:

In summary there is no need to call `prepareToClose()` in the `AbstractChannel.AbstractUnsafe#shutdownOutput` method

Result:

Fixes issue #11981 

client in the FIN_WAIT2 state can read and process these data which is sended by server in the CLOSE_WAIT state，when SO_LINGGER is used in the TCP half-closed scenario

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
33247074a0becce08c1f48eec61e8da0c7bbe4c0,"Make ""pinned memory"" from PooledByteBufAllocator reflect buffers in use (#11990)

Motivation:
The pinned memory accounting was being done from a bad place.
Namely, it was being done at the same time as the PoolChunk free memory accounting was being done.
That means the thread local caching was messing up the accuracy of the numbers.

Modification:
Move pinned memory accounting to the PooledByteBuf init and deallocation methods, so it's tied to the buffer life cycle.

Result:
The pinned memory accounting is updated as part of the pooled buffer life cycle, and is no longer being tricked by the activities of the thread-local buffer cache.

Fixes #11984"
b5219aeb4ee62f15d5dfb2b9c29d0c694aca05be,[maven-release-plugin] prepare release netty-4.1.73.Final
c6e65cc006c4e0623e84ef96a88dc5bd5cb00a82,[maven-release-plugin] prepare for next development iteration
81385e04793bc7b0272ffb80519f3248932cdb5b,"Use LongCounter to count pinned memory (#11995)

Motivation:

We can use LongCounter and so use LongAdder when on Java8+.

Modifications:

Replace AtomicInteger with LongCounter

Result:

Less overhead"
55cdaa75adfaff89c9929de9893c8ff7bd2891ae,"Try to not recycle objects back to terminated threads (#11996)

Motivation:
The Recycler uses thread-local caches, and if objects are shared across threads, they will return to the thread-local pool they were allocated from.
However, if that thread has terminated, then it will have no use for any returning objects and the return process can be skipped.

Modification:
In the associated `onRemoval` for the thread-local, mark the local pool as dead, by setting the `pooledHandles` reference to `null`.
Returning objects to their original pools is then guarded by a null-check.
To make this thread-safe, the `pooledHandles` reference changes from `final` to `volatile`.
With a newer JVM baseline, we could have made the field plain, and null it out with an opaque store, because the `handle.toAvailable()` call otherwise gives us the compiler barriers we need to make our null-check thread-safe.

Result:
Recycler-able objects can be garbage collected sooner after the termination of the allocating thread.

Fixes #11864"
765e56a93ae15d682a0611fbb3886eb7df738fc9,"Upgrade to netty-tcnative 2.0.47.Final (#12003)

Motivation:

Upgrade to the latest netty-tcnative version

Modifications:

Update to 2.0.47.Final

Result:

Use latest version"
1aa02c1c6dc5808c9fd68d6397d0ae36d83ec29e,"Provide clarifications why SNI hostname has to be FQDN (#12014)

Motivation:

It's not immediately clear why Netty discards non fully qualified domain names from the SNI extension and it may look like a bug.

Modification:

Provided clarifications why SNI hostname has to be FQDN with links to the RFC

Result:

Related to #12005

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
f3173c322dd04309dd0ba3d6651fee3b7a7b83c8,"Fix incorrect comment in PoolThreadCache (#12020)

Motivation:

We don't have tiny sizes anymore so we should also not mention these in the comments

Modifications:

Remove old comment

Result:

Fixes https://github.com/netty/netty/issues/12015"
982b890095a11242fff0e90558f0f3b883f52bc9,"Don't strip scopeId when resolving ipv6 address (#12019)

Motivation:

Due a bug we did strip the scopeId of the ipv6 address string when using the DnsNameResolver. This could later then result to things like ""No Route to host"" exceptions.

Modifications:

- Add new method to NetUtil which will create the InetAddress for an string that contains an ip while still preserve the scopeId.
- Use this new method
- Add unit tests.

Result:

Fixes https://github.com/netty/netty/issues/11563"
f6ea528e0e6fe7d77970a0af18f09820b630fe14,"Refactor SizeClasses to not call private methods in the constructor (#12013)

Motivation:

Calling non-static methods from within the constructor that belong to the instance is considered a bad practice and can cause bugs. Beside of this it also has the side effect that we can not define all the fields final even tho these are not modified outside of the constructor.

Modifications:

- Refactor SizeClasses such so it will only use static methods from within its constructor
- Declare everything final that can
- Share some code

Result:

Cleaner / more optimal code that is also easier to maintain"
3cf83d5a2a601f033ddde7d43acab71ad1acf988,"Don't depend on readerIndex() of 0 when handling websocket frames (#12022)


Motivation:

We had some code iin the websocket implementation which depended on the fact that the buffers have a rreaderIndex() of 0. This is not needed at all and may produce bugs in the future.

Modifications:

- Refactor the code to not depend on the readerIndex of 0.
- Add unit test

Result:

Make implemenatation more robust"
8699a3e2612a6578f9edf6e3941faf87c6bd8c0f,"Added Fragment-Host declaration to bundles shipping native libs (#12018)

Motivation:
Bundles should attach to their host, that contains classes loading the native libraries, so they can be found via Bundle-Classloader. 

Modification:
Add Fragment-Host entry to manifest

Result:
Fixes issue #12017"
b50ebe446f63cb902113a07759a556d603f099dc,"Remove redundant  operator. (#12008)

Motivation:

The isRun() method call !isSubpage(), so we can simplify the conditional.

Modification:

If and else change position, and we avoid the NOT operator.

Result:
Fewer operations to execute."
fb4edb1ab87bc811960e092766b668dc04c3e309,"Use BeforeAll instead of static block to load Brotli4j library (#12029)

Motivation:
As of today, Brotli4j does not support macOS aarch64. Currently, in `BrotliEncoderTest`, we use the static block to load the Brotli4j library. However, this could lead to failure when performing this action on macOS aarch64.

The `DisabledIf` loads the `BrotliEncoderTest` class to see if the platform is supported or not. Loading this class triggers the static block which eventually leads to `ExceptionInInitializerError`.

Modification:
Use `BeforeAll` instead of static block.

Result:
Fixes #12024"
6c7cd59034fc6705ef9edb314b784b635064b902,"Update java versions (#12032)

Motivation:

There are new java version

Modifications:

Update all java versions to latest patch release

Result:

Use latest java versions on the CI"
6618c50d2ca1d31a630e1ebcff37b71358ccc97a,"Use correct exception message to notify about handler removal before … (#12033)

Motivation:

We used a wrong exception msg when the handler was removed but the engine was not closeed yet. This is confusing for the user.

Modifications:

Fix exception message.

Result:

Fixes https://github.com/netty/netty/issues/12027

Co-authored-by: Baurzhan <baurzhansahariev@gmail.com>"
13fd0229f4c100ae051e50628d94473ce4bea7cc,"Avoid producing heap dumps from *expected* OOME when running tests locally (#12037)

Motivation:
We have a test that deliberately causes an OutOfMemoryError.
We also tell our test JVMs to produce heap dumps if they encounter an OOME.
To avoid wasting time investigating these, we should disable this test when we run tests locally.

Modification:
Use the EnabledIfEnvironmentVariable annotation from JUnit 5, to disable FastThreadLocalTest.testInternalThreadLocalMapExpand unless there's a `CI=true` environment variable present.

Result:
This test no longer runs locally, but should still run in our Github Actions, which define such an environment variable by default."
716e499ad7444bc1fa9a92d35b865be8a0c67bb2,"Avoid masking the cause of availability failures for the Mac DNS provider (#12039)

Motivation:
If the MacOSDnsServerAddressStreamProvider is unavailable, we'd the root cause of it to show up.

Modification:
Move the initialisation of the `MacOSDnsServerAddressStreamProvider.currentMappings` field to the constructor.
Object initialisers run before the constructor does, so since `MacOSDnsServerAddressStreamProvider.retrieveCurrentMappings` relies on the native code, it would throw an `UnsatisfiedLinkError` before `ensureAvailability` would get to run.
This way, it was masking the root cause of the unavailability.
Now, the `currentMappings` is initialised *after* we've called `ensureAvailability`, so we don't lose the root cause if we cannot use native DNS on Mac.

Result:
Easier to debug problems with initialising native MacOS DNS."
9cd94547d0211c04b610878e5e267c8de2342b97,"Propagate BindException in DnsNameResolver (#12034)


Motivation:

If a user binds the DnsNameResolver to an address that is already in use we should include this as a cause of the failure so its easy to spot whats wrong

Modifications:

- Correctly propagate the BindException
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/12001"
31784c5df46ee9e73abdd38af6b393dd51dfd465,"Release DnsQuery in case of failure to prevent leak (#12048)

Motivation:

We needto release the DnsQuery incase of an failure as otherwise we will see a buffer leak.

This showed up in an unrelated PR:

```
https://netty.io/wiki/reference-counted-objects.html for more information.
2022-01-25T20:20:04.3902792Z Recent access records:
2022-01-25T20:20:04.3903007Z Created at:
2022-01-25T20:20:04.3903377Z 	io.netty.handler.codec.dns.AbstractDnsMessage.<init>(AbstractDnsMessage.java:44)
2022-01-25T20:20:04.3903869Z 	io.netty.handler.codec.dns.DefaultDnsQuery.<init>(DefaultDnsQuery.java:42)
2022-01-25T20:20:04.3904340Z 	io.netty.handler.codec.dns.DatagramDnsQuery.<init>(DatagramDnsQuery.java:56)
2022-01-25T20:20:04.3904825Z 	io.netty.handler.codec.dns.DatagramDnsQuery.<init>(DatagramDnsQuery.java:43)
2022-01-25T20:20:04.3905363Z 	io.netty.resolver.dns.DatagramDnsQueryContext.newQuery(DatagramDnsQueryContext.java:39)
2022-01-25T20:20:04.3905887Z 	io.netty.resolver.dns.DnsQueryContext.query(DnsQueryContext.java:101)
2022-01-25T20:20:04.3906342Z 	io.netty.resolver.dns.DnsNameResolver.query0(DnsNameResolver.java:1272)
2022-01-25T20:20:04.3906823Z 	io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:436)
2022-01-25T20:20:04.3907310Z 	io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:1113)
2022-01-25T20:20:04.3907816Z 	io.netty.resolver.dns.DnsResolveContext.internalResolve(DnsResolveContext.java:358)
2022-01-25T20:20:04.3908388Z 	io.netty.resolver.dns.DnsResolveContext.doSearchDomainQuery(DnsResolveContext.java:284)
2022-01-25T20:20:04.3909157Z 	io.netty.resolver.dns.DnsAddressResolveContext.doSearchDomainQuery(DnsAddressResolveContext.java:96)
2022-01-25T20:20:04.3909755Z 	io.netty.resolver.dns.DnsResolveContext$1.operationComplete(DnsResolveContext.java:240)
2022-01-25T20:20:04.3910277Z 	io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
2022-01-25T20:20:04.3910835Z 	io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:552)
2022-01-25T20:20:04.3911598Z 	io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
2022-01-25T20:20:04.3912122Z 	io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
2022-01-25T20:20:04.3912617Z 	io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609)
2022-01-25T20:20:04.3913131Z 	io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
2022-01-25T20:20:04.3913659Z 	io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1055)
2022-01-25T20:20:04.3914230Z 	io.netty.resolver.dns.DnsResolveContext.tryToFinishResolve(DnsResolveContext.java:1000)
2022-01-25T20:20:04.3914751Z 	io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:418)
2022-01-25T20:20:04.3915350Z 	io.netty.resolver.dns.DnsResolveContext.access$600(DnsResolveContext.java:66)
2022-01-25T20:20:04.3915878Z 	io.netty.resolver.dns.DnsResolveContext$2.operationComplete(DnsResolveContext.java:467)
2022-01-25T20:20:04.3916394Z 	io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
2022-01-25T20:20:04.3916945Z 	io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)
2022-01-25T20:20:04.3917507Z 	io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)
2022-01-25T20:20:04.3918064Z 	io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
2022-01-25T20:20:04.3918573Z 	io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
2022-01-25T20:20:04.3919083Z 	io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609)
2022-01-25T20:20:04.3919599Z 	io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
2022-01-25T20:20:04.3920103Z 	io.netty.resolver.dns.DnsQueryContext$2.operationComplete(DnsQueryContext.java:143)
2022-01-25T20:20:04.3920609Z 	io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
2022-01-25T20:20:04.3921163Z 	io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:552)
2022-01-25T20:20:04.3921717Z 	io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
2022-01-25T20:20:04.3922223Z 	io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
2022-01-25T20:20:04.3922730Z 	io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609)
2022-01-25T20:20:04.3923241Z 	io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
2022-01-25T20:20:04.3923744Z 	io.netty.resolver.dns.DnsNameResolver$4.operationComplete(DnsNameResolver.java:519)
2022-01-25T20:20:04.3924223Z 	io.netty.resolver.dns.DnsNameResolver$4.operationComplete(DnsNameResolver.java:514)
2022-01-25T20:20:04.3924741Z 	io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
2022-01-25T20:20:04.3925296Z 	io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:552)
2022-01-25T20:20:04.3925851Z 	io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
2022-01-25T20:20:04.3926356Z 	io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
2022-01-25T20:20:04.3926864Z 	io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609)
2022-01-25T20:20:04.3927377Z 	io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
2022-01-25T20:20:04.3927877Z 	io.netty.channel.AbstractChannel$AbstractUnsafe.safeSetFailure(AbstractChannel.java:999)
2022-01-25T20:20:04.3928373Z 	io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:564)
2022-01-25T20:20:04.3928993Z 	io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1334)
2022-01-25T20:20:04.3929596Z 	io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:506)
2022-01-25T20:20:04.3930214Z 	io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:491)
2022-01-25T20:20:04.3930779Z 	io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:973)
2022-01-25T20:20:04.3931251Z 	io.netty.channel.AbstractChannel.bind(AbstractChannel.java:260)
2022-01-25T20:20:04.3931695Z 	io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:356)
2022-01-25T20:20:04.3932341Z 	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
2022-01-25T20:20:04.3932960Z 	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
2022-01-25T20:20:04.3933500Z 	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:503)
2022-01-25T20:20:04.3933996Z 	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
2022-01-25T20:20:04.3934524Z 	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
2022-01-25T20:20:04.3935119Z 	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
2022-01-25T20:20:04.3935585Z 	java.base/java.lang.Thread.run(Thread.java:833)
2022-01-25T20:20:04.3936557Z 20:20:01.725 [nioEventLoopGroup-33-1] ERROR io.netty.util.ResourceLeakDetector - LEAK: DnsMessage.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.
2022-01-25T20:20:04.3937139Z Recent access records:
2022-01-25T20:20:04.3937351Z Created at:
2022-01-25T20:20:04.3937716Z 	io.netty.handler.codec.dns.AbstractDnsMessage.<init>(AbstractDnsMessage.java:44)
2022-01-25T20:20:04.3938209Z 	io.netty.handler.codec.dns.DefaultDnsQuery.<init>(DefaultDnsQuery.java:42)
2022-01-25T20:20:04.3938682Z 	io.netty.handler.codec.dns.DatagramDnsQuery.<init>(DatagramDnsQuery.java:56)
2022-01-25T20:20:04.3939165Z 	io.netty.handler.codec.dns.DatagramDnsQuery.<init>(DatagramDnsQuery.java:43)
2022-01-25T20:20:04.3939702Z 	io.netty.resolver.dns.DatagramDnsQueryContext.newQuery(DatagramDnsQueryContext.java:39)
2022-01-25T20:20:04.3940233Z 	io.netty.resolver.dns.DnsQueryContext.query(DnsQueryContext.java:101)
2022-01-25T20:20:04.3940686Z 	io.netty.resolver.dns.DnsNameResolver.query0(DnsNameResolver.java:1272)
2022-01-25T20:20:04.3941168Z 	io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:436)
2022-01-25T20:20:04.3941657Z 	io.netty.resolver.dns.DnsResolveContext.query(DnsResolveContext.java:1113)
2022-01-25T20:20:04.3942162Z 	io.netty.resolver.dns.DnsResolveContext.internalResolve(DnsResolveContext.java:358)
2022-01-25T20:20:04.3942731Z 	io.netty.resolver.dns.DnsResolveContext.doSearchDomainQuery(DnsResolveContext.java:284)
2022-01-25T20:20:04.3943371Z 	io.netty.resolver.dns.DnsAddressResolveContext.doSearchDomainQuery(DnsAddressResolveContext.java:96)
2022-01-25T20:20:04.3943968Z 	io.netty.resolver.dns.DnsResolveContext.resolve(DnsResolveContext.java:249)
2022-01-25T20:20:04.3944498Z 	io.netty.resolver.dns.DnsNameResolver.doResolveAllUncached0(DnsNameResolver.java:1158)
2022-01-25T20:20:04.3945026Z 	io.netty.resolver.dns.DnsNameResolver.access$500(DnsNameResolver.java:91)
2022-01-25T20:20:04.3945483Z 	io.netty.resolver.dns.DnsNameResolver$7.run(DnsNameResolver.java:1137)
2022-01-25T20:20:04.3946006Z 	io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)
2022-01-25T20:20:04.3946625Z 	io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:469)
2022-01-25T20:20:04.3947162Z 	io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:503)
2022-01-25T20:20:04.3947662Z 	io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
2022-01-25T20:20:04.3948181Z 	io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
2022-01-25T20:20:04.3948842Z 	io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
2022-01-25T20:20:04.3949289Z 	java.base/java.lang.Thread.run(Thread.java:833)
2022-01-25T20:20:04.3950155Z 20:20:01.726 [nioEventLoopGroup-33-1] DEBUG i.netty.resolver.dns.DnsNameResolver - [id: 0x9d025e67, L:/0.0.0.0:33141] RECEIVED: UDP [25881: /127.0.0.1:37922], DatagramDnsResponse(from: /127.0.0.1:37922, to: /0.0.0.0:33141, 25881, QUERY(0), NXDomain(3), RD)
2022-01-25T20:20:04.3950787Z 	DefaultDnsQuestion(lookup-address.netty.io. IN CNAME)
2022-01-25T20:20:04.3952826Z 20:20:01.726 [NioDatagramAcceptor-65] DEBUG o.a.d.s.d.p.DnsProtocolHandler - /127.0.0.1:33141 SENT:  org.apache.directory.server.dns.messages.DnsMessage@4c6a5830[transactionId=25881,opCode=QUERY,truncated=false,messageType=RESPONSE,recursionDesired=true,additionalRecords=[],responseCode=NAME_ERROR,authorityRecords=[],acceptNonAuthenticatedData=false,recursionAvailable=false,answerRecords=[],questionRecords=[org.apache.directory.server.dns.messages.QuestionRecord@6c937f18[domainName=lookup-address.netty.io,recordClass=IN,recordType=CNAME]],authoritativeAnswer=false,reserved=false]
2022-01-25T20:20:04.3954224Z 20:20:01.726 [main] DEBUG o.a.d.s.d.p.DnsProtocolHandler - /127.0.0.1:33141 CLOSED
2022-01-25T20:20:04.3954856Z 20:20:01.727 [main] INFO  o.a.directory.server.dns.DnsServer - DNS service stopped.
```

Modifications:

Release query on failure

Result:

No more leaks"
74a58023c3668f166af73c2022cc510d09dccdd3,"Update to netty-tcnative 2.0.48.Final (#12049)

Motivation:

A new version of netty-tcnative was released

Modifications:

Update to 2.0.48.Final

Result:

Use latest release"
561a7cbdbf710f87a3de664081a85d287b4b574f,"Copy localAddress as well when DnsNameResolverBuilder.copy() is called (#12050)

Motivation:

We missed to also copy the localAddress when copy() is called

Modifications:

Correctly set the localAddress as well

Result:

Make a complete copy"
62ef8f96e3ff5c21f4ff122756d8a21e6e6d1c01,"Use ObjectUtil#checkInRange instead of if-else (#12059)

Motivation:
We should use `ObjectUtil#checkInRange` instead of if-else to make the code look better and easier to understand.

Modification:
Replaced if-else with `ObjectUtil#checkInRange`

Result:
More readable and better code"
4a07367d743013b1f87d8337f0e56fc16b329abd,"Improve some FIXME (#12058)

Motivation:
Improve some FIXME codes

Modifications:
Extract static variables instead of magic numbers, modify some documents

Result:
Cleanup

Co-authored-by: Kvicii <Karonazaba@gmail.com>"
ac17a516d443f5087ac1bf0e51ef748d8314d0dc,"Improve FIXME code (#12063)

Motivation:

There are a few `FIXME` comments in the coce

Modification:
1.for deprecated code, add @deprecated doc
2.improve FIXME code

Result:
Cleanup

Co-authored-by: Kvicii <Karonazaba@gmail.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
1f357fc00e68091b320ada074d198b90a7c75377,"Support RFC 8879 Certificate Compression for TLSv1.3 (#12012)


Motivation:

Certificates in TLSv1.3 can be compressed but Netty does not yet support this. netty-tcnative support is available. This change provides a netty api which allows netty users to configure BoringSSL through netty-tcnative and enable certificate compression.

Modifications:

- `OpenSslCertificateCompressionConfig` class provides an interface, allowing netty users to configure netty-tcnative for certificate compression.
- Changes to `ReferenceCountedOpenSslContext` to consume and apply config.
- `OpenSslCertificateCompressionTest` to test this interface and the work done netty-tcnative

Result:

Netty provides support for certificate compression.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
a8966ac09724b3c3cf9c53f8a2e5470533de511e,"Fix ByteToMessageDecoder docs (#12069)

Motivation:
Fix ByteToMessageDecoder method documentation

Modification:
Correct grammar, remove invalid brackets.

Result:
Cleaner code, more correct English."
cbeb705841b5572be37b1b77c3ef09012e6b8aa1,"Upgrade to latest maven release (#12075)

Motivation:

We should use the latest maven version when building netty

Modifications:

Update to latest maven release

Result:

Use latest release"
fb4a3206ea49364b5a251029ea9618cd61549380,"Don't set the writerIndex to incorrect value when scattering reads are used for datagrams (#12076)

Motivation:

Due a bug we did set the writerIndex(...) of datagrams to an incorrect value sometimes when scattering reads are used.

Modifications:

- Remove incorrect call to writerIndex(...)
- Add comment

Result:

Correct writerIndex is used"
2ab9d653f6199c1438653e1d28c9948b7b9a541c,"Link to discord server in readme (#12079)

Closes #12071"
77ed04330487e7b7f319c41dbe8dd96568d46ba2,"Introduce `Http2DataChunkedInput` to send chunked Http2 Data Frames (#12066)

Motivation:
Currently, HTTP chunking is supported only in HTTP/1.X by Netty. And HTTP/2 implementation was missing.

Modification:
Added `Http2DataChunkedInput` to support chunked HTTP/2 Data frames.

Result:

Fixes #10801

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
773ac508b707368d69152711162e79fd63a59c6b,"add CORS Access Control for Private Networks (#12070)

Motivation:

Some browsers started to create warnings when requesting resources from a server on a private network. In the future these requests will quite likely be blocked.
See: [private-network-access-preflight](https://developer.chrome.com/blog/private-network-access-preflight/)

Modification:

Added HttpHeaderNames for `Access-Control-Request-Private-Network` and `Access-Control-Allow-Private-Network`
Modified the `CorsHandler` to act on the access control request

Result:
Added CORS Access Control for Private Networks 


Signed-off-by: Lukas Prettenthaler <rdx@wsn.at>"
54a2c6da44f57c1a8a721226165a7bb0a55beb8c,"Fix reverse port issue pcap capture (#12081)

Motivation:

While exploring how to introduce PCAP support into
Vert.x and Quarkus based on Netty's PcapWriteHandler,
I noticed that in server pipelines,
the capture has the source and destination ports
reversed for server pipelines.

This can be seen in the screenshot from https://github.com/eclipse-vertx/vert.x/pull/4260#issue-1117490827, where a browser is requesting
data from a REST API built with Quarkus listening on port 8080.
In the screenshot you can see that initial HTTP request has the ports
reversed.

Modification:

This change makes sure that source and destination ports are always properly determined no matter what type of pipeline is being used

Result:

Correct port is used"
51eda20432568ffdf736a673abc6b5a44839413f,[maven-release-plugin] prepare release netty-4.1.74.Final
60ebae0553e6b9b1af3ac2f036b3fe271c4d7da2,[maven-release-plugin] prepare for next development iteration
d1a8cd2dec422f3b8fbfd186ae1ec29e680ffd4e,"Avoid reading uninitialised memory when making domain socket address (#12085)

Motivation:
Stack variables contain uninitialised memory, unless explicitly initialised.
When we use recvfrom on a domain socket, it may not fill in any NULL terminator for the sockaddr_un->sun_path, since it technically provided the address length in the addrlen inout-parameter.
Thus, if we wish to later use strlen in createDomainDatagramSocketAddress to determine the length of the sockaddr_un->sun_path, we have to initialise the sockaddr to zero, so the NUL byte is already in place.
We have to do this on every iteration since we don't know the state of the memory after a failed or interrupted call.

Modification:
Always zero out the data allocated to the socket address, prior to calling recvfrom on domain sockets.

Result:
We no longer observe the occasional domain socket address that has some extra data in the end of its name."
6f1af8b84dc01a1d73d954e5e819fc9b17829f11,"HTTP/2 header validation must reject duplicate pseudo-headers (#12094)

Motivation:
Duplicate HTTP/2 pseudo-headers are either client bugs (best case) or an indication of a request smuggling attack (worst case).
Header validation should reject this with a protocol error.
Doing so is also in line with the current HTTP/2 spec draft, which says:

> The same pseudo-header field name MUST NOT appear more than once in a field block. A field block for an HTTP request or response that contains a repeated pseudo-header field name MUST be treated as malformed (Section 8.1.1).

See https://httpwg.org/http2-spec/draft-ietf-httpbis-http2bis.html#name-http-control-data

Modification:
If header validation is enabled, and we parsed a pseudo-header, and if we find that the header object already has such a header, then we throw a stream protocol error.
Also added a test for this.

Result:
Header validation now rejects duplicate pseudo-headers, in line with best practices and the draft spec."
3ba2eed16a627371839c63113cdb39df9d6bfe35,"Add HTTP-specific TooLongFrameExceptions (#12084)

* Add HTTP-specific TooLongFrameExceptions

Motivation:

I want to examine an HTTP request's decoderResult's cause to determine if my application should return a REQUEST_ENTITY_TOO_LARGE, REQUEST_URI_TOO_LONG, REQUEST_HEADER_FIELDS_TOO_LARGE. Currently the cause is just a plain TooLongFrameException. Although they have different messages, it seems unsafe to examine the messages.

Modifications:

I have extended TooLongFrameException to have TooLongHttpContentException, TooLongHttpHeaderException, and TooLongHttpLineException. Then I updated the sites to throw a specific subclass. Theoretically, more specific subclasses can be added for spdy and websocket, but I held off for now.

Result:

I can examine the decoderResult's cause and properly select how to respond based on what specifically happened.

* Add HTTP-specific TooLongFrameExceptions

Motivation:

I want to examine an HTTP request's decoderResult's cause to determine if my application should return a REQUEST_ENTITY_TOO_LARGE, REQUEST_URI_TOO_LONG, REQUEST_HEADER_FIELDS_TOO_LARGE. Currently the cause is just a plain TooLongFrameException. Although they have different messages, it seems unsafe to examine the messages.

Modifications:

I have extended TooLongFrameException to have TooLongHttpContentException, TooLongHttpHeaderException, and TooLongHttpLineException. Then I updated the sites to throw a specific subclass. Theoretically, more specific subclasses can be added for spdy and websocket, but I held off for now.

Result:

I can examine the decoderResult's cause and properly select how to respond based on what specifically happened."
2b811c7895e8c11d64b25fa6c1308846392e2be0,"Add check point to methods `FastThreadLocalThread.threadLocalMap()` and `FastThreadLocalThread.setThreadLocalMap(...)` (#12057)

Motivation:

`FastThreadLocalThread.threadLocalMap()` and `FastThreadLocalThread.setThreadLocalMap(...)` should firstly check whether the target thread is the current thread, and print warn log if not.
Actually, IMHO, we can throw `Exception` here, but for compatible consideration, it's might be better that we just print log.
OR, we can change the field `threadLocalMap` to `volatile threadLocalMap`, which I think it's not good because it will hurts performance.

Modification:

Add check point of whether the target thread is the current thread to methods `FastThreadLocalThread.threadLocalMap()` and `FastThreadLocalThread.setThreadLocalMap(...)`, and print warn log if not.

Result:

Prints warn log if the target thread is not the current thread.

Co-authored-by: laosijikaichele <laosijikaichele>"
86603872776e3ff5a60dea3c104358e486eed588,"Allow attaching additional metadata to ResourceLeakTrackers on creation (#12091)


Motivation:
Attaching metadata to the creation record of a ResourceLeakTracker allows implementations to give more context information about where the leak originated from, such as the currently running test case, or, for fuzzing tests, the input that caused the leak.

Modification:
Add a protected method getInitialHint to ResourceLeakDetector that is called to populate the hint of the first TraceRecord of a leak. The method returns null by default, keeping the old behavior.

Result:
Subclasses can override the new method to supply metadata that is then interpreted the same way as a hint passed to ResourceLeakTracker.track, and attached to the ""Created at:"" record.

Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
42e1c7eb118af74beb54a69d14883b1e4d58f9ba,"Fix typos in NetUtil

Motivation:

We had a typos in NetUtil comments

Modifications:

Fix typos

Result:

Fixes https://github.com/netty/netty/issues/12105"
dc8bb40bba2dc4b86fcfb62a4ff02b9ef852014a,"AssertionError crashes in PoolArena (#12106)

Motivation:

When AssertionError is thrown it is not immediately obvious what state is ""bad"".

Modifications:

Add state variables when throwing assertion.

Result:

Debug #12093"
28fcf2794745f91e9d9ec3a2e475c0d65d1b3826,"Try stabilising build with CERN CentOS mirror (#12110)

Motivation:
Recently, our builds have been failing a lot with `PYCURL ERROR 7`, where the repository metadata fails to download.
It seems like the vault.centos.org server(s) are sometimes having trouble keeping up with their load.
In my local testing, the mirror site hosted by CERN seemed much more responsive.

Modification:
Switch to the CERN mirror of vault.centos.org.

Result:
Hopefully we now have fewer builds fail because `yum` can't download repository metadata or download packages."
ec0fc8fc725c1575be0bfabd79c663a8a60ebbb2,"Correct javadocs of HttpUtil (#12114)

Motivation:

We should mention that the method will throw if the number couldnt be parsed

Modifications:

Add some clarification to the javadocs

Result:

Fixes https://github.com/netty/netty/issues/12113"
9c77e4021e3296ee445fe1512cf8b9c3ea3a7ab1,"Add PlatformDependent.estimateMaxDirectMemory (#12118)

Motivation:
Integrators may want to also have a cross-platform way to compute the max direct memory.
Since we do this already, we can just as well expose the method.
However, all methods in PlatformDependent remain internal and unsupported, so callers should be robust to changing signatures and method names.

Modification:
Rename the maxDirectMemory0 method to estimateMaxDirectMemory and make it public.

Result:
Fixes #12103"
7b91edd8e43b0c97ba88ae78b11cd378a904f480,"A potential optimization to NetUtil#getIPv6ByName (#12112)

Motivation:

The current implementation can be optimised

Modification:

- Optimize implementation
- Add benchmark

Result:

Fixes #12107

Co-authored-by: lijinliang <lijl@newdt.cn>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
c79a9c18c53679c58321e35b1893c4747b4427f6,"Update to latest netty-tcnative release (#12117)

Motivation:

We just released a new version of netty-tcnative

Modifications:

Update to latest release

Result:

Use latest release"
1fe29bd1e5c9e70399eb34540658db5ed6cabd29,"Fix typo in Snappy.java (#12121)

withing -> within"
f650303911e308dfdf10761273c2b8e4436ea0a4,"Reduce the default PooledByteBufAllocator chunk size from 16 MiB to 4 MiB (#12108)

Motivation:
By default we allocate 2 arenas per core, and each arena that is put to use will allocate a chunk.
If we don't need a lot of memory, and certainly not compared to the number of cores on a system, then this will take up more memory than necessary, since each chunk is 16 MiB.
By reducing the chunk size to 4 MiB, we reduce the minimum memory usage by a good deal, in these cases where not much is needed.
The drawback is that we risk allocating more huge buffers, but this is a fair trade-off since Netty's use cases mostly involve very small buffers.

Modification:
Reduce the default max order from 11 to 9.
Also make similar configuration changes in PooledByteBufAllocatorTest, to reduce the memory usage during testing.

Result:
Netty now uses less memory when less memory is needed by the application.
This fixes #8536"
cd0738aa02698a33e1deb30d997f3d0ef84f386e,"EpollEventLoopGroup.setIoRatio un-deprecate (#12126)

Motivation:
EpollEventLoopGroup.setIoRatio was deprecated and made to have
no effect as part of a change that set provide ioRatio==100 as
the default behavior where the next timer fire was managed
more precisely. However EpollEventLoop has changed back to
using ioRatio but there is no way to set this value.

Modifications:
- Un-deprecate the EpollEventLoopGroup.setIoRatio method. It
  is proposed this still be removed/revisited in 5.0 but while
  it is still used users should be able to configure it.

Result:
Epoll transport allows draining all tasks on each iteration
to reduce delay in executing tasks."
f79acfcb20d0be2d6bf80e1404375b1d3e39563c,"NetUtil static block should be whitelisted for blockhound (#12130)

Motivation:

When the NetUtil class is loaded it might produce a blockhound warning due it reading the proc filesystem. Let's whitelist this

Modifications:

Whitelist the reading of the proc filesystemm during NetUtil init

Result:

Less warnings when using blockhound"
09dbf99ffaf9b00c1df8e55590d58a524ea639d2,"Change MessageFormatter /  FormattingTuple to public  (#12131)

Motivation:

Allow other Logging integration to use optimised MessageFormatter implementation

Modifications:

Change MessageFormatter /  FormattingTuple to public  

Result:

Fix #12129"
94cfa608a8071e8a9005e0d52e0199b3584f4ae7,"Add ByteBufConvertible to Netty 4.1 (#12136)


Motivation:
This interface is used in the main branch to bridge buffer implementations.
Moving it to 4.1 will allow Netty 5 to use the 4.1 ByteBuf implementation.

Modification:
Copy the ByteBufConvertible interface from the main branch to 4.1.
And make ByteBuf implement the interface in the same way it does in the main branch.

Result:
The current main branch code can theoretically be made to use the ByteBuf implementation from 4.1."
4374612a4bedefd528d22daac5094e3c740baeb9,"Fixed the inability to receive channelInactive() events when using spliceTo(). Fixed high CPU usage when using spliceTo() (#12138)

Motivation:

1. spliceTo() ignores RdHup, causing users to fail to receive channelInactive().
2. When using spliceTo,epollInFinally() is meaningless,and epollInFinally will result in infinite calls to spliceIn(). spliceIn will return in only two cases: (1)There is no data to splice(). (2)sufficient length has been spliced. So just wait The next EPOLLIN event fires.
3. lastBytesRead is not updated, which will cause handle.guess() to get smaller and smaller, resulting in high CPU usage.

Modifications:

1. check isReceivedRdHup
2. not call epollInFinally when using spliceTo()
3. update lastBytesRead in spliceIn()

Result:
1. channelInactive() is correctly called back
2. reduce cpu usage"
4797b88d89304763fd92eeff73d077effa53685e,"Change default of io.netty.allocator.useCacheForAllThreads to false (#8991) (#12109)

Motivation:

We currently use a thread local cache for all threads which often is suprising to users as it may result in a lot of memory usage if they allocate buffers from outside the EventLoop in different threads.
We should better not do this by default to keep suprises to a minimum.
Users that need the performance and know what they are doing can still change this.

Modifications:

Change io.netty.allocator.useCacheForAllThreads to false by default

Result:

Related to https://github.com/netty/netty/issues/8536.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
e138117390bd1ffc8014ddc6e6d1cbb2f90dc7aa,"Change the access level of class PoolThreadLocalCache to private (#12141)

Motivation:

The inner class `PoolThreadLocalCache` is only used within the class `PooledByteBufAllocator`, so it's better to change its access level to private.

Modification:

Change the access level of class `PoolThreadLocalCache` to private.

Result:

Change the access level of class `PoolThreadLocalCache` to private.

Co-authored-by: laosijikaichele <laosijikaichele>"
b616d3eea479efe0e14e9469b71d418a4d84e90b,"Define tcnative as optional again (#12146)

Motivation:

https://github.com/netty/netty/pull/11745 introduced some change but missed to mark the tcnative classes jar as optional

Modifications:

Mark the dependency as optional again

Result:

Fixes https://github.com/netty/netty/issues/12101 and https://github.com/netty/netty/issues/12132"
1a84c738497887387ff60d70d49632391a015346,"AdoptOpenJDK has moved to different site (#12148)

Motivation:
AdoptOpenJDK has moved to https://adoptium.net/. So we should point OpenJDK URL to the new site.

Modification:
Changed https://adoptopenjdk.net to https://adoptium.net/

Result:
Latest OpenJDK Adopt site"
673849d13dc71c2f165c5b042d72afe206f1edbc,"Allow more permissive char set in SNI headers (#12147)


Motivation:

As explained in issue #11819, certain chars such as "":"" in the SNI header cause the netty pipeline to blow up.

Modifications:

By converting strings to byte arrays first, we can allow chars like "":""

Result:

Netty will have a more permissive char set allowed for SNI headers.


Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Aayush Atharva <hyperx.pro@outlook.com>"
1df38d2c7be98e11fa13c7ee52aadbfbea7669e6,"Fix race when handling delegating tasks in ReferenceCountedOpenSslEngine (#12149)

Motivation:

Due incorrect handling of delegating tasks in ReferenceCountedOpenSslEngine it was possible to observe handshake timeouts / failures.

Modification:

- Only reset needsTask variable after we actually ran the task.
- Add missing synchronized as otherwise we might end up calling native code concurrently which is not safe.
- Change how we excute delegating tasks in our SSLEngineTest. This change would result in timeouts / failures before the fix.

Result:

Fixes https://github.com/netty/netty/issues/12139"
7a745632655c92b96c633b4ec34fe3d671c1f218,"Use subject principal forget native SSLSession.getLocalPrincipal() implementation (#12151)

Motivation:

We should use the subject principal for the local principal to be consistent. In our impl it not really makes a difference but still it is better to ensure the code is consistent

Modifications:

Use subject pricipal

Result:

Code is consistent"
9e96358dcd409d7c4ce47f54d82e6f01526f158e,"Correct javadoc to be consistent with the current behavior (#12152)

Motivation:

4797b88d89304763fd92eeff73d077effa53685e change that default value related to ThreadLocal caches of buffers but did miss to update the javadocs

Modifications:

Correct javadocs

Result:

Javadocs reflect reality"
d1607d5dd300afa11e4ff9dd695230c73779e5e7,"Correct javadocs for default maxOrder value (#12154)

Motivation:

f650303911e308dfdf10761273c2b8e4436ea0a4 changed the default maxOrder from 11 to 9 but we missed to update the javadocs

Modifications:

Fix javadocs

Result:

Javadocs reflect reality"
669a4baed8609cea89eaa132e5e2890afe73c667,"Replace tabs by spaces (#12156)

Motivation:

Let's be consistent and not use tabs

Modifications:

Replace tabs by spaces

Result:

Cleanup"
24018418c3ca589ac32bed4e617b3704daad3c52,"Enable thread-local buffer cache for Thread that is used by EventExecutor by default (#12158)

Motivation:

https://github.com/netty/netty/pull/12109 changed the default of using the thread local cache for buffers only for FastThreadLocalThread. While this is good it also means that it would affect everyone that use a custom ThreadFactory when construct the EventLoop / EventExecutor

Modifications:

Make use of ThreadExecutorMap to check if the Thread is used by any EventExecutor and if so also enable the cache.

Result:

Fixes https://github.com/netty/netty/pull/12109#issuecomment-1061686373"
5f1802ac65d63076616c5b3ee7a3d4151c7f3414,[maven-release-plugin] prepare release netty-4.1.75.Final
f8bc2869e2b1a67bf6d649459640a1126f882925,[maven-release-plugin] prepare for next development iteration
7d6afadaa56ace3ec12943a18e467cc7a70d9587,"Setup workflows to release 5.0 (#12165)

Motivation:

To be able to trigger a workflow manually we need to put it in the default branch

Modifications:

- Add workflow file for release 5.0
- Add compose config for release with java 11

Result:

Be able to release 5.0"
4cdcfd9e1b683709249e0ed5662222590cbcf7be,Fix docker-compose file name for releasing netty 5
fb70176224dd3304670d68461ce6a76358b0f94c,"Upgrade netty-tcnative version (#12162)

Motivation:

We release a new netty-tcnative version

Modifications:

Upgrade to 2.0.51.Final

Result:

Use latest version"
30855c71c843db6d3d0c769d2547b948f61500a2,"Removed unused imports and fix some tests (#12167)

Modification:
Removed unused imports and fix some tests

Result:
Cleanup and more correct tests"
824a0b803431c58bd8dfe25a30413d7ff9759e8f,"Length field based frame decoder can be optimized (#12173)

Motivation:

LengthFieldBasedFrameDecoder.decode(ChannelHandlerContext ctx, ByteBuf in) methodcan be optimized -So we keep frameLengthInt in instance variable to avoid unnecessary calculations .

Modification:

Add an instance variable to avoid unnecessary calculations

Result:

Fixes #12171. 


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
5cda0444187c6f7c54b03a97b1956c44a2f24ccc,"Use windows-2019 in workflows (#12183)

Motivation:

windows-2016 was removed so we need to use the next lowest which is 2019

Modifications:

- Use windows-2019

Result:

Builds on windows work again"
40382fb1af275e931a765c5001f4b6bd8061991e,"Give netty-all an automatic module name (#12188)

Motivation
The netty-all module still produces an empty jar file, so it causes trouble for modular projects if this has no module name.

Modification:
Add an automatic module name for netty-all.

Result:
The netty-all module can now be used in a modula project, under the `io.netty.all` name.

Fixes #12175"
86004b7303621784f7ec8850323d9a707f17f9f8,"Reduce syscall overhead in native epoll transport when a lot of timeouts are scheduled(#12145)


Motivation:

At the moment we might end up calling timerfd_settime everytime a new timer is scheduled. This can produce quite some overhead. We should try to reduce the number of syscalls when possible.

Modifications:

- If we are using Linux Kernel >= 5.11 use directly epoll_pwait2(...)
- If the scheduled timeout is big enough just use epoll_wait(...) without timerfd_settime and accept some inaccuracy.

Result:

Fixes https://github.com/netty/netty/issues/11695"
481969ee18f3f463c92f99dac5dd40f1c6eb1ad2,"Add missing java module name (#12194)

Motivation:

We should ensure we add a valid module name in the manifest

Modifications:

Add missing declarations

Result:

Have a valid module name in the manifest"
00905d64c817b87aa37dee1c2bc3292b874b47a6,"Fix typos in docs (#12198)

Motivation:

There are a few typos 

Modification:

fix doc

Result:

provide the correct description."
8df70b59abf84c34fe1f69dd8a00f64da545d6f4,"Replace wildcard imports (#12202)

Motivation:

We don't use wildcard imports usually

Modification:

Replace wildcard imports

Result:

Cleanup


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
ec68df49169cb0fdd4d7b783e531105bf45f743e,"Optimize selection of cache on first invocation (#12207)

Motivation:

There is no need to iterate all caches if the first was never used before.

Modification:

Add fast-path 

Result:

Small optimization

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
0fae15828ec430d9a3a981d779b93d9089275b86,"Resolve TODO: Make handshake work without HttpObjectAggregator at all. (#12192)

Motivation:

Currently we support WebSocket versions: `0`, `7`, `8`, `13` and most of them is outdated, I think in Netty 5 we can only support the latest `13` version. However, we can remove the httpObjectAggregator from the handshake process and leave it only for version `0` and for backward compatibility if `contentLength` present. But i really don't know who send payload for WebSocket upgrade request.

Modification:

If contentLength header set or WebSocket version is 0 then use httpObjectAggregator otherwise use simple httpRequest.

Result:

Resolve TODO: Make handshake work without HttpObjectAggregator at all. Unfortunately for some cases we still need httpAggregator."
12e84a6fa558aa8ef9775a2a29e11ad87cf49cba,"The Utf8FrameValidator only handles its own protocol violation exception (#12210)

Motivation:

Currently `Utf8FrameValidator` catches all `CorruptedWebSocketFrameException` and trying to close the channel if it's open. This is incorrect behavior because `WebsocketFrameDecoder` throws the same type of exception, but with a different status code and reason, and does not close the channel if the `closeOnProtocolViolation` property is set to false.

Modification:

Correct that the Utf8FrameValidator only handles its own protocol violation exception  and sends the CloseWebsocketFrame with the appropriate status code and reason. Pass the `closeOnProtocolViolation` property to the `Utf8FrameValidator`;

Result:
The Utf8FrameValidator only handle its own protocol violation exception and consolidate with decoder config."
04c4c5213502efa7251eb4dad13454657f539d4c,"Resolve TODO: Make handshake work without HttpObjectAggregator at all inside WebSocketClientHandshaker. (#12214)

Motivation:

We can remove  `HttpObjectAggregator` from `WebSocketClientHandshaker` for handshake response which version is is greater than 0.

Modification:

Remove the httpObjectAggregator from the handshake process and leave it only for version 0. 

Result:

Resolve TODO: Make handshake work without `HttpObjectAggregator` at all inside `WebSocketClientHandshaker`."
7773044031613bc96990e434c36c484002693c30,Minor code cleanup (#12226)
06db4dc2c11aeee727225dc48b273af670300759,"fix typos in doc (#12233)

Motivation:

fix typos in doc

Modification:

fix typos in doc"
6a4dafc9e72c71cad544cb74688b37e83a46ccca,"Allow to construct ReadTimeoutException and WriteTimeoutException (#12234)

Motivation:

The userr might want to add more details to the exception so we should allow to construct it

Modifications:

Add public constructors

Result:

Fixes https://github.com/netty/netty/issues/12218"
f235b37c281977b5428dacb32cc44072c9a441e5,Fix a typo (#12241)
d9ed098eb744c828a823d4722c65280130962ede,"Avoid NullPointerException in DefaultHttp2HeadersDecoder.decodeHeaders failure path (#12232)

# Motivation:

I encountered the `NullPointerException` below from a gRPC service using Netty `4.1.75.Final` running OpenJDK Zulu 17.0.2+8-LTS. The NPE is hiding the actual underlying connection failure exception while decoding headers, as `Http2Exception.connectionError` does not currently handle cases where an exception message may be null.

Note that we do not encounter this NPE when using `4.1.51.Final`, but have not bisected the full set of changes.

# Steps to reproduce locally:
1. Run unit test to simulate connection error without exception message
2. See 2 tests fail

# Modification:

* [Add Http2Exception.connectionError NPE reproducer unit test](https://github.com/netty/netty/commit/a52afab0e8aca3fd4d8653e64231ca5cbc7f525e)
* [Update Http2Exception formatter handles null format message](https://github.com/netty/netty/commit/7ea075b25c9d72f9c4b9d4c712b98ab4e1ce8d5e)
* [Ensure non-null connection error message formats](https://github.com/netty/netty/commit/9bf83455a45023d2aedfeb1dc73c87b50303162b)

# Result:

New unit tests pass, netty should now propagate underlying exception when http2 header decode fails.


# Exception seen:

```
java.lang.NullPointerException:
  at java.util.Formatter.parse(Formatter.java:2717)
  at java.util.Formatter.format(Formatter.java:2671)
  at java.util.Formatter.format(Formatter.java:2625)
  at java.lang.String.format(String.java:4140)
  at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:122)
  at io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder.decodeHeaders(DefaultHttp2HeadersDecoder.java:136)
  at io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersBlockBuilder.headers(DefaultHttp2FrameReader.java:732)
  at io.netty.handler.codec.http2.DefaultHttp2FrameReader$1.processFragment(DefaultHttp2FrameReader.java:450)
  at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readHeadersFrame(DefaultHttp2FrameReader.java:457)
  at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:253)
  at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:159)
  at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
  at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:173)
  at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:378)
  at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:438)
  at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:510)
  at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:449)
  at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:279)
  at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
  at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
  at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
  at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1372)
  at io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1235)
  at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1284)
  at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:510)
  at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:449)
  at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:279)
  at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
  at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
  at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)
  at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)
  at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)
  at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)
  at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)
  at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
  at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)
  at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)
  at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)
  at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)
  at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)
  at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
  at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
  at java.lang.Thread.run(Thread.java:833)
```


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
d7d6166fe5100b1955dd2d7ab83782e28da7f352,"Allow to configure non-built-in socket options (#12246)


Motivation:

More and more socket options are added on every kernel / OS release. While we have ""build-in"" support for the most used there are situations when the user might want to specify something that we have not build-in.

Modifications:

- Add IntegerUnixChannelOption and RawUnixChannelOption which allows to set socket options that are not ""build-in"".
- Add unit tests

Result:

More flexibility for the user


Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
d88e0bf3ff2cd6e9506ccb749b53bbeadb09555e,"Fix function name miss-spelling (#12253)

Motivation:

We did have a typo in the function name.

Modifications:

Fix function name

Result:

Cleanup"
19d74affb0bc88118d64737df10569ac41ae1804,"Automatically use boringssl-static when compiling on Mac M1 (#12256)

Motivation:

As we only publish netty-tcnative-boringssl-static for Mac M1 we need to ensure we activate the correct profile.

Modifications:

Replace incorrect family value (osx) with correct one (mac)

Result:

Be able to compile on Mac M1 without the need to specify the profile manually.
Fixes https://github.com/netty/netty/issues/12251"
34ae67a5b1fb1f119c1ed509f576c205d1e7fd78,Bump Log4j2 to 2.17.2 (#12261)
afbf8d26b17548896b55d4edbcdcc4f8bb625a7d,"Upgrade to `Brotli4j` 1.7.1 and use new `ByteBuf` API (#12264)

Motivation:
`Brotli4j` v1.7.1 is released with the new `ByteBuf` API. It uses `ByteBuf` instead of `byte` array to minimize garbage creation and memory copy.

Modification:
Bumped to the `Brotli4j` to v1.7.1 and used new API for Encoder

Result:
New update and better performance


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
960121db545f2d8aec7a87da8c54a9645fde266c,"Allow explicit choice of internet family (#12270)

Motivation:

Netty should be able to bind to specific protocol family only (IPv4, IPv6) if requested by the caller.

Modification:

Added `InternetProtocolFamily` to `SocketChannel` constructors.

Result:

Fixes #12269"
5e23212172a761c416ec682c55f462852c381e92,"Break loop early if possible (#12254)

Motivation:

There is no need to finish inner loop when condensedInUse[i] setting as true.

Result:

Small optimization"
005a6a4e7b3632d6719640eac621690d3268fd1f,"Correctly encode result even if no timeout is used (#12283)


Motivation:

86004b7303621784f7ec8850323d9a707f17f9f8 did introduce a change to reduc the syscalls but missed to correctly encode the result in the case of no timeout used.

Modifications:

Correctly shift the result

Result:

Correctly behaviour even when no timeout is used.  Fixes #12280"
a9cac5ee0b921deaa51758f038f9316ca821616a,"Share code and improve logging (#12282)

Motivation:

960121db545f2d8aec7a87da8c54a9645fde266c introduced a change which allows to tie a channel to specific address family. While this change in general was a good idea we can do better in sharing code and also reduce noise in terms of logging

Modifications:

- Share code
- Only try to use new SelectorProvider method when on JDK15 and later
- Change log level to debug

Result:

Cleanup and less  noise"
cf8b7170505c2329b34ff1f8c0b76977a4d7c2c2,"Cope with misbehaving Http2Headers implementations (#12289)

Motivation:
Some integrators may choose to use custom `Http2Headers` implementations, and might not implement all methods, or might not anticipate the ways in which we'll use the methods.
For instance, this was a problem that affected GRPC.

Modification:
To cope with this, we guard our newly added call to `Http2Headers.contains()` call with an `instanceof` check to see if we're familiar with the implementation, and fall back to checking the direct accessor methods if not.

Result:
Avoid breaking those who wish to use old versions of GRPC with newer versions of Netty, or situations like that."
1ecc053e70d57a8da70bf23bf5293b2072337b09,"Log specific exception to debug ParameterizedSslHandlerTest (#12290)

Motivation:
We have been seeing this test fail intermittently on Windows for some time.
The stack trace of the exception was supposed to be included in the test failure output, but we don't see it in practice.

Modification:
Add some logging to the test, so when it is about to fail, it will capture additional context in the log.

Result:
Hopefully we'll be able to debug this test in the future."
701263610a72725c9d32b4022f1d51b1344890d1,[maven-release-plugin] prepare release netty-4.1.76.Final
c2b846750dd2131d65aa25c8cf66bf3649b248f9,prepare for next development iteration
f9e765e0ceddf30a5951e1f59ae6d9dece59819f,"AbstractReferenceCountedByteBuf can save using a volatile set on constructor (#12288)

Motivation:

AbstractReferenceCountedByteBuf can be made faster by ensure proper safe initialization vs volatile set on construction

Modification:

Using Unsafe and plain store instead of volatile set

Result:

Faster AbstractReferenceCountedByteBuf allocation"
7be44fba673147ff881903bb994fbdbd112f19d5,"Update transport-native-epoll compile flags (#12272) (#12313)

Motivation:

Loading of the native epoll transport might segfault the JVM if musl is used and no glibc-compat is installed:

Modifications:

- Move libraries to LIBS where they should be, avoiding need for
  -Wl,--no-as-needed.
- Use -O2 instead of -O3; there are no tight loops so -O3 just increases
  code size for no benefit.
- Add -pipe for faster compilation.
- Add -D_FORTIFY_SOURCE=2 and -Wl,-z,relro for security.
- Add -Wl,-z,now for security and to improve musl
  compatibility. musl does not implement __strdup and __strndup which
  old glibc aliases strdup and strndup to, but OpenJDK loads libraries
  with RTLD_LAZY, so this is not discovered until too late. See
  https://github.com/grpc/grpc-java/issues/8751#issuecomment-1086963256
  for more information.
- Add -ffunction-sections -fdata-sections -Wl,--gc-sections to reduce
  output size and avoid linking librt when not really needed (only used
  for kqueue)

Result:
""Fixes"" #11701 by making the native library load fail.

Co-authored-by: Alex Xu <351006+Hello71@users.noreply.github.com>"
eba838104474ae7350ab7e237d395552e200c178,"Enable debugging of asynchronous tasks in Intellij (#12316) (#12319)


Motivation:
Evented systems like Netty can be much harder to debug than sequential and blocking code.
Fortunately, with a few strategically placed hints, we can significantly improve the tooling support.

Modification:
Add a dependency on the JetBrains annotations, and use the `Schedule` and `Execute` annotations to tell the Intellij IDEA debugger how our event loops and executors handle asynchronous task execution.
Basically, we tell it where tasks are scheduled for asynchronous execution, and we tell it where this execution is picked up.

Result:
The Intellij IDEA debugger can then bridge the schedule and execute points, and present a unified, or spliced stack trace.
This way, we are able to see who scheduled what tasks, and why.

Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
0d653f08cd108a3ba6cf76d9fc052b8141ea3196,"Don't call strdup on packagePrefix. (#12273) (#12322)

Motivation:

We should improve must compat by not calling strdup.

Motifications:

- Update jni-util version and update code for changes
- Adjust CFLAGS

Result:
Improves musl compatibility and slightly improves efficiency. Fixes #11701.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>

Co-authored-by: Alex Xu <351006+Hello71@users.noreply.github.com>"
79d3fa52dc0ee07ccc1d9c68648b57dc3bafc88e,"Fix compilation on Mac OS (#12324)

Motivation:
My compiler require that the const-ness of the package prefix is preserved.

Modification:
Make the `staticPackagePrefix` variable `const`.
The `const` qualifier here means that the value pointed to is unassignable.
However, we are still allowed to assign to the pointer (the pointer itself isn't `const`), which is why the rest of the code does not complain about this change.

Result:
No more native compilation errors on MacOS."
40ce84c27c55cd4fac2164c37d1eb07e3de72d3a,"Update netty-jni-util and so not require gnu99 anymore (#12326)

Motivation:

We can remove the dependency of gnu99 flag

Modifications:

Update netty-jni-util and remove extra CFLAG

Result:

Cleanup"
bed705183f555eca1113f1359800abf0da3d067b,"Update to Maven 3.8.5 (#12314)

Motivation:
We should keep our Maven Wrapper up-to-date

Modification:
- Bumped Maven Wrapper to v3.8.5
- Not use jctools in microbenchmark module

Result:
Latest Maven release

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
cf9dc4099045f5ad13983f02c86191c06bcd2da4,"Fix InternalThreadLocalMap cpu cache sharing size to 128bytes (#12309)

Motivation:

in 4.0.36.Final `UnpaddedInternalThreadLocalMap` introduced a new `ArrayList<Object> arrayList` field.
This field will break cache line padding of `InternalThreadLocalMap` from 128 bytes to 136.

Modification:
Remove one of the 8-byte padding fields.

Result:
The `InternalThreadLocalMap` objects are once again sized a multiple of 64-byte cache lines.

Co-authored-by: Your Name <you@example.com>"
003919487d8e5fa0cf77742c0c8cd7e2472d462a,"Fix some typos (#12336)

Signed-off-by: cuishuang <imcusg@gmail.com>"
69e1d36cb19c034dcdcaaa1085c0387435c06975,"Fix some typos (#12336)

Signed-off-by: cuishuang <imcusg@gmail.com>"
f17b5fe3cd7155a0281d081edabe223e131ba332,"Fix typos (#12336)

Motivation:

There are a few typos.

Modifications:

Fixed typos.

Result:

Cleanup

Signed-off-by: cuishuang <imcusg@gmail.com>"
626f94f069647f4e60a6863ca6540be1722e6e45,"Check if epoll_pwait2 is implemented (#12345)


Motivation:

Its possible that while there is an epoll_pwait2(...) system call it is not implemented and so fail with ENOSYS.

Modifications:

Check if we can actually use epoll_pwait2(...) and it not fails due not implemented.

Result:

Fixes https://github.com/netty/netty/issues/12343"
f901ea2e712d9d16e199aaeb7b622e36944eb8dd,Fix typo in comment (#12346)
2a9b2cc50ea6b0a40043a84f3ec6dc8a401e051e,"Finish mocking before using the mocks (#12350)

Motivation:

We should ensure we finish the mocking before we bootstrap the servers as otherwise it might fail

Modifications:

Finish setup mocks before bootstrap

Result:

No more mocking failures"
8e8e9cc7b4e05b5bfd81a2aeba23b4e550466494,"Include classifier in Automatic-Module-Name (#12354)

Motivation:

To be able to have multiple native versions (for different architectures) on the classpath we need to include the classifier in the module name

Modifications:

Add classifier in the module name

Result:

Be able to have native bits for different architectures on the classpath when using modules"
eb005907caab01256c1d8baf6d96b06beae95be4,"Fix a bug where Netty fails to load a shaded native library (#12358)


Related: https://github.com/netty/netty-jni-util/pull/13

Motivation:

Netty can't load a shaded native library because `netty-jni-util` has a
bug that appends an extra `/` when attmpting JNI `FindClass`. For
example, `parsePackagePrefix()` returns `shaded//` instead of `shaded/`,
leading to a bad attempt to load `shaded//io/netty/...`.

Netty also doesn't handle the case where a shaded package name contains
an underscore (`_`), such as `my_shaded_deps.io.netty.*`, because it
simply replaces `.` with `_` and vice versa. JNI specification defines
a mangling rule to avoid this issue:

- https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#resolving_native_method_names

Modifications:

- Replace `_` into `_1` so that `parsePackagePrefix()` in
  `netty-jni-utils.c` can get the correct package name later.
- Update the `docker-compose.yaml` so that the integration tests in
  `testsuite-shading` are always run as a part of CI, so we don't have
  a regression in the future.

Result:

- A user can use a functionality that requires a native library even if
  they shaded Netty *and* the shaded package name contains an underscore
  (`_`)."
41761a3fc26807f0a0425cf910e37e552cda5757,"Update tcnative version (#12361)

Motivation:

Let's update tcnative version to the latest release

Modifications:

Update to 2.0.52.Final

Result:

Use latest tcnative release"
7dbca6aedc8cf5971e2a26d8fc2b7f265f2b4bf1,"Update to the latest enforcer plug-in (#12363)

Motivation:
Since we baseline on Java 11, we need a 3.x version of the enforcer plug-in anyway.
This is no longer a special case.

Modification:
Update the required enforcer plug-in version so we don't have to create a special case for it, for every Java release.

Result:
Build now works on Java 18, and likely future Java versions as well."
185f8b2756a36aaa4f973f1a2a025e7d981823f1,"Merge pull request from GHSA-269q-hmxg-m83q

* Correctly modify permission for temporary files when using Java 6 in all cases

Motivation:

[GHSA-5mcr-gq6c-3hq2](https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2) did not correctly fix all cases for temprory files when running on java 6.

Modifications:

- Add correctly adjust perms in all cases
- Add logging if adjusting of permissions fails

Result:

Fixes https://github.com/netty/netty/security/advisories/GHSA-269q-hmxg-m83q

* Throw on failure"
503cd74d3f8e6a342eeadc820705d1d7fd978d13,[maven-release-plugin] prepare release netty-4.1.77.Final
28b3905c772acb4efd1919750f2f5702a9102e09,[maven-release-plugin] prepare for next development iteration
d43655ad3fd1b1a93b453bdc8346b203009e7511,"Remove null check (#12367)

Motivation:
There is a `null` check for the `Process` instance. However, it can never be `null` because it is being initialized at the first line and if there is an exception during initialization then we will throw the exception directly.

Modification:
Removed useless `null` check

Result:
No need for a `null` check and simpler code."
b18f7913c6bc41aefa4aadc28097fde86fe47bda,"Only add OPT record if none is present yet (#12370)

Motivation:

We MUST NOT add an extra OPT record if one is already included as otherwise the remote DNS server will return FORMERR.

Modifications:

- Only add OPT record if there user did not specify one yet.

Result:

RFC complient"
9b8f8174c1b36855ca97e4181fef222fcf379283,"Use if-else instead of switch case in `MacAddressUtil#bestAvailableMac` (#12375)

Motivation:
`switch` cases are efficient when there are quite a few branches compared to `if-else`. Since we are only using 1 case, it's best to use the `if-else` condition.

Modification:
Changed `switch` to `if-else`

Result:
Efficient code"
6ceca6342ddb87d32129412e35376cc70cf9c818,"Simplify redundant if-block (#12376)

Motivation:
We can simplify redundant `if-blocks` to make the code look simpler.

Modification:
Replaced `if-block` with simpler `boolean` statements.

Result:
Simpler code"
04cb3a82b29bd59be711be8cd0655cff8d1ef474,"Update dawidd6/action-download-artifact (#12393)

Motivation:

We are using an old version of dawidd6/action-download-artifact

Modifications:

Update to latest release

Result:

Use recent version"
02bb6bff3d0fa8af4301726d5bb0292267759fcc,"fix:when diskFilename contain ""\"" create temp file error (#12334)

Motivation:

when diskFilename contain ""\"" create temp file error

Modification:

such as the curl :
you can copy the remarks body, if the  data-raw length more than 16kb,netty creates a temporary file，but the create filename will contain ""\"",When creating a file with this file name ，The part of  \ is treated as a folder,This results in the Caused by: java.io.IOException: Unable to create temporary file error.

curl --location --request POST 'http://localhost:8080/test/testdemo' \
--header 'User-Agent: apifox/1.0.0 (https://www.apifox.cn)' \
--header 'Content-Type: application/json' \
--data-raw '{""remarks"":""aaaa/bbbb=cccc,aaaa/bbbb=cccc,aaaa/bbbb=cccc,aaaa/bbbb=cccc,aaaa/bbbb=cccc""}'


Result:

Fixes # 12318. 

Co-authored-by: shanghang <shanghang@asiainfo.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
7de44fbeb60920f0084b0d5bb489afff12ed5bc9,"Update java versions (#12395)

Motivation:

There were new java releases

Modifications:

Update used java versions

Result:

Build with latest java releases"
1acd290072ebf4027773b2ea87a93e6009360057,"Add java 18 to our CI (#12402)

Motivation:

We should ensure the testsuites also pass on java 18

Modifications:

- Add java 18 ci setup
- Add profile for java 18
- Rename compose file to reflect its actually using centos7
- Disable blockhound on Java 18 and above, because their byte-buddy dependency does not support it.

Result:

Tests run on java 18 as well"
b61d7d40f40e3a797e8a60cd567f849a9799c771,"Fix the default chunk size to 4MiB (#12407)

Motivation:

Since the defaultMaxOrder equals 9, fix the try catch block with setting defaultMaxOrder with 9, to meet the requirement of default 4 MiB chunk size

Modification:

modify the try catch block cope with defaultMaxOrder to 9"
cb35e4b13485c674ea6118e9ecf99fba913a4804,"Fix typo in Blockhound integration (#12414)

Motivation:
We have a typo in the list of places where Blockhound should allow blocking calls.
This caused Blockhound to sometimes flag NetUtil as making blocking calls, instead of allowing them.

Modification:
Fix the typo in the allow-list to match the NetUtil class.

Result:
Fixes #12411"
064e5577bf6715cbb4f5cf76bc2a10b4532ae1d0,"Bump gson from 2.7 to 2.8.9 (#12416)

Bumps [gson](https://github.com/google/gson) from 2.7 to 2.8.9.
- [Release notes](https://github.com/google/gson/releases)
- [Changelog](https://github.com/google/gson/blob/master/CHANGELOG.md)
- [Commits](https://github.com/google/gson/compare/gson-parent-2.7...gson-parent-2.8.9)

---
updated-dependencies:
- dependency-name: com.google.code.gson:gson
  dependency-type: direct:development
...

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
f7cbe4bf4824777a72e00bb86b48928907dcce1b,"HTTP2: flush preface / settings frames when channel become active (#12349)


Motivation:

We need to manually flush the channl when it becomes active and we wrote the preface / settigns frame as otherwise the remote peer might never see it.

Modifications:

- Flush after writing preface / settings
- Adjust unit test to verify the new behaviour
- Adjust unit tests to complete mocking everything before the connection is actually established

Result:

Fixes https://github.com/netty/netty/issues/12089


Co-authored-by: Maksym Ostroverkhov <m.ostroverkhov@gmail.com>"
3b8e802c95a831cb3c8544f4af30ef421769907c,"Fix data race in `Http2ConnectionRoundtripTest` (#12429)

Motivation:
With HTTP/2 preface flushing from #12420, we need to wait for an additional message before we can be sure that we've received the headers frame.

Modification:
Increment the request count down latch by one in `Http2ConnectionRoundtripTest.priorityUsingHigherValuedStreamIdDoesNotPreventUsingLowerStreamId`.
This increment was already done in multiple other tests in #12420, but not in this one.
Usually that was ""fine"", but it left the headers check in the test racing with the headers frame.
This made the test flaky.

Result:
Now the test is always passing."
871dd2e5730a477738a5a9b9af19be35244137d0,"Fix compression integration testing with direct buffers (#12423)

Motivation:

We did not correctly increase the writerIndex when testing with direct buffers so the test did not test anything

Modifications:

Replace setBytes(...) with writeBytes(...)

Result:

Test with direct buffers are done correctly"
27e0f52600049b2bafdcb35d0a03e4bb456a693d,"Guard usage with null check to prevent possible NPE during finalization. (#12434)

Motivation:

We need to add a null check to ensure we not throw a NPE if the finalizer of ReferenceCountedOpenSslEngine runs because of an OOME before we assign the field.

Modifications:

- Add null check
- Assign fields first

Result:

No more NPE in finalizer possible"
8098219df6874ac88c702e9556de0a63671d81b4,"Makes Brotli more native compilation friendly (#12409)

Motivation:
CompressorHttp2ConnectionEncoder shouldn't load anything specific to Brotli if it isn't available

Modification:
Allows a null Brotli option to be passed to CompressorHttp2ConnectionEncoder

Result:
GraalVM Native compilation without Brotli doesn't requires Brotli classes"
56f7c50d19125dad36b97ed33d9797da941a7591,"Allow blocking calls in JdkSslContext class initializer (#12435)

Motivation:
Classes might be initialized inside the event loop where blocking calls are otherwise forbidden.
The JdkSslContext has a blocking call in its class initializer through initializing the Java SSLContext which does IO to deserialize its key store.

Modification:
Collect the class initialization code in a method, and allow it to have blocking calls in blockhound.

Result:
No more blockhound warnings about blocking calls in JdkSslContext class initializer.

Fixes #12425

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
c42a207f7242b2bdd170cc463b49bf50c7334165,"Remove the last references to JUnit 4 (#12442)

Motivation:
This completes our migration to JUnit 5.

Modification:
Remove all JUnit 4 dependencies.
Replace or remove the last references to JUnit 4 types in the code.
Add a revapi exception because a public TestUtils method was exposing JUnit 4 types and had to be removed.

Result:
No more JUnit 4 in our project.

Fixes #10757"
bffac7befcfc36fa801a2041a85092784d26c5e3,"correct comment of date from cate (#12448)

Motivation:

found a misspelling, the comment of RTSP header DATE should be ""date"" not ""cate""

Modification:

cate -> date

Result:

correct comment"
a1c9ccedb636aaafa442288932cfec919258d189,"Update tcnative version (#12454)

Motivation:

A new release is out.

Modifications:

Update to latest tcnative release

Result:

Use latest release"
bc085b06e3153bc975353671151c0c90e4265baa,"Update SslHandler to set bio fd member to facilitate openssl tracing (Pixie integration) (#12438)

Motivation:

I've been working on extending the pixie platform to support out of the box instrumentation for [twitter/finagle](https://github.com/twitter/finagle) and eventually the netty project (https://github.com/pixie-io/pixie/issues/407).

For those that aren't familiar, [Pixie](https://github.com/pixie-io/pixie) is an open source, Kubernetes Observability tool that provides auto instrumentation by leveraging eBPF. It has support for tracing network traffic for a variety of protocols (http/2, kafka, mysql, mux, etc) even if encrypted with openssl. Its openssl tracing support works by instrumenting the `SSL_read` and `SSL_write` functions through a uprobe. This uprobe captures the data just before encryption or just after decryption, in addition to navigating [openssl's rbio struct](https://github.com/pixie-io/pixie/blob/294d3f36214dece583dd499ebd578cecb7cc7425/src/stirling/source_connectors/socket_tracer/bcc_bpf/openssl_trace.c#L59-L78) to access the socket file descriptor (necessary for associating network traffic with a particular container).

Modification:

Due to how netty uses openssl today, the openssl SSL struct passed to `SSL_read` and `SSL_write` does not have the socket fd set. This is because netty's Java code handles the network transport and leverages openssl only for encryption and decryption. The functionality added in this PR allows netty to populate the SSL struct's rbio field with the socket file descriptor when a channel becomes active (first created). This change is dependent on the netty-tcnative changes made in https://github.com/netty/netty-tcnative/pull/731

My understanding is that each netty channel will be given its own ssl engine, so setting this socket file descriptor on a per connection basis shouldn't be a problem. It's also worth mentioning that getting this to work with Pixie requires setting `-Dio.netty.native.deleteLibAfterLoading=false`. So while the goal is to instrument netty TLS connections with no configuration, that option would be necessary.

Result:

Fixes the majority of the remaining work in https://github.com/pixie-io/pixie/issues/407. The remaining changes would be in the pixie project
- [x] Verified that pixie's netty TLS tracing works for a twitter/finagle service on https://github.com/pixie-io/pixie/pull/446

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
db8d5c5ae73e25131cc8e48d2126cfabdcd686c1,"Fix race in FlowControlHandlerTest that could lead to a NPE (#12457)

Motivation:

How we accessed the internal state of the handler was not thread safe and so we could see a NPE during testing like:

```
2022-06-09T10:27:09.1309221Z java.lang.NullPointerException: Cannot invoke ""io.netty5.handler.flow.FlowControlHandler$RecyclableArrayDeque.isEmpty()"" because ""this.queue"" is null
2022-06-09T10:27:09.1310056Z 	at io.netty5.handler.flow.FlowControlHandler.isQueueEmpty(FlowControlHandler.java:90)
2022-06-09T10:27:09.1310829Z 	at io.netty5.handler.flow.FlowControlHandlerTest.testFlowAutoReadOff(FlowControlHandlerTest.java:370)
2022-06-09T10:27:09.1311575Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2022-06-09T10:27:09.1312301Z 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
2022-06-09T10:27:09.1313093Z 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2022-06-09T10:27:09.1313760Z 	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
2022-06-09T10:27:09.1314400Z 	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)
2022-06-09T10:27:09.1315137Z 	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
2022-06-09T10:27:09.1315983Z 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
2022-06-09T10:27:09.1316828Z 	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)
2022-06-09T10:27:09.1317641Z 	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)
2022-06-09T10:27:09.1318493Z 	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)
2022-06-09T10:27:09.1319348Z 	at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
2022-06-09T10:27:09.1320165Z 	at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
2022-06-09T10:27:09.1321012Z 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
2022-06-09T10:27:09.1322136Z 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
2022-06-09T10:27:09.1323045Z 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
2022-06-09T10:27:09.1323943Z 	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
2022-06-09T10:27:09.1324743Z 	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
2022-06-09T10:27:09.1325482Z 	at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
2022-06-09T10:27:09.1326315Z 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)
2022-06-09T10:27:09.1327204Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1328123Z 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)
2022-06-09T10:27:09.1329864Z 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
2022-06-09T10:27:09.1330733Z 	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)
2022-06-09T10:27:09.1331591Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
2022-06-09T10:27:09.1332454Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1333319Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
2022-06-09T10:27:09.1334081Z 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
2022-06-09T10:27:09.1334851Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
2022-06-09T10:27:09.1335715Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1336583Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
2022-06-09T10:27:09.1337418Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
2022-06-09T10:27:09.1338067Z 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
2022-06-09T10:27:09.1338985Z 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
2022-06-09T10:27:09.1340052Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
2022-06-09T10:27:09.1340908Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1341965Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
2022-06-09T10:27:09.1342739Z 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
2022-06-09T10:27:09.1343508Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
2022-06-09T10:27:09.1344444Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1345330Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
2022-06-09T10:27:09.1346176Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
2022-06-09T10:27:09.1346868Z 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
2022-06-09T10:27:09.1347789Z 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
2022-06-09T10:27:09.1348854Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
2022-06-09T10:27:09.1349822Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1350695Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
2022-06-09T10:27:09.1351529Z 	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
2022-06-09T10:27:09.1352298Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
2022-06-09T10:27:09.1353161Z 	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
2022-06-09T10:27:09.1354049Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
2022-06-09T10:27:09.1354894Z 	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
2022-06-09T10:27:09.1355997Z 	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
2022-06-09T10:27:09.1357115Z 	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
2022-06-09T10:27:09.1358070Z 	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
2022-06-09T10:27:09.1358898Z 	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)
2022-06-09T10:27:09.1359628Z 	at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)
2022-06-09T10:27:09.1360424Z 	at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)
2022-06-09T10:27:09.1361216Z 	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)
2022-06-09T10:27:09.1361937Z 	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
2022-06-09T10:27:09.1362790Z 	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:150)
2022-06-09T10:27:09.1363688Z 	at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:124)
2022-06-09T10:27:09.1364571Z 	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
2022-06-09T10:27:09.1365399Z 	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
2022-06-09T10:27:09.1366134Z 	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
2022-06-09T10:27:09.1366804Z 	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
2022-06-09T10:27:09.1375974Z
```

Modifications:

Dispatch the EventLoop before accessing the state

Result:

No more NPE possible"
c18fc2bc68c08805b2553336a3bf02f0c8c50972,"Allow controlling time flow for EmbeddedEventLoop (#12459)

Motivation:

Tests using EmbeddedEventLoop can run faster if they can ""advance time"" so that scheduled tasks (e.g. timeouts) run earlier. Additionally, ""freeze time"" functionality can improve reliability of such tests.

Modification:

- Introduce a protected method `AbstractScheduledEventExecutor.getCurrentTimeNanos` that replaces the previous static `nanoTime` method (now deprecated). Replace usages of `nanoTime` with the new method.
- Override `getCurrentTimeNanos` with the new time control (freeze, unfreeze, advanceBy) features in `EmbeddedEventLoop`.
- Add a microbenchmark that tests one of the sites that seemed most likely to see negative performance impact by the change (`ScheduledFutureTask.delayNanos`).

Result:

Fixes  #12433. 

Local runs of the `ScheduleFutureTaskBenchmark` microbenchmark shows no evidence for performance impact (within error bounds of each other):

```
before:
Benchmark                                                   (num)   Mode  Cnt    Score    Error  Units
ScheduleFutureTaskBenchmark.scheduleCancelLotsOutsideLoop  100000  thrpt   20  132.437 ± 15.116  ops/s
ScheduleFutureTaskBenchmark.scheduleLots                   100000  thrpt   20  694.475 ±  8.184  ops/s
ScheduleFutureTaskBenchmark.scheduleLotsOutsideLoop        100000  thrpt   20   88.037 ±  4.013  ops/s
after:
Benchmark                                                   (num)   Mode  Cnt    Score   Error  Units
ScheduleFutureTaskBenchmark.scheduleCancelLotsOutsideLoop  100000  thrpt   20  149.629 ± 7.514  ops/s
ScheduleFutureTaskBenchmark.scheduleLots                   100000  thrpt   20  688.954 ± 7.831  ops/s
ScheduleFutureTaskBenchmark.scheduleLotsOutsideLoop        100000  thrpt   20   85.426 ± 1.104  ops/s
```

The new `ScheduleFutureTaskDeadlineBenchmark` shows some performance degradation:

```
before:
Benchmark                                             Mode  Cnt         Score        Error  Units
ScheduleFutureTaskDeadlineBenchmark.requestDeadline  thrpt   20  60726336.795 ± 280054.533  ops/s
after:
Benchmark                                             Mode  Cnt         Score        Error  Units
ScheduleFutureTaskDeadlineBenchmark.requestDeadline  thrpt   20  56948231.480 ± 188264.092  ops/s
```

The difference is small, but it's there, so I investigated this further using jitwatch. Looking at the generated assembly, the call to `getCurrentTimeNanos` is devirtualized and inlined in the absence of `EmbeddedEventLoop`, so the code is mostly identical. However there is the added getfield and checkcast for the executor, which probably explains the discrepancy.

In my opinion this is acceptable, because the performance impact is not severe, this use is likely the worst case (virtual call through `scheduledExecutorService()`), and it is never as hot as in this benchmark.

Note that if an `EmbeddedEventLoop` is present in the application, the performance impact is likely substantially higher, because this would necessitate a virtual call. However this is not an issue for production applications, and the affected code is still not very hot.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
c87c911c010c3a34a69e550d52299df20e5fc740,[maven-release-plugin] prepare release netty-4.1.78.Final
86bfb0282c230455dcfd3d9896b66f32df1528fc,[maven-release-plugin] prepare for next development iteration
b063c211277fcfb4453f24aad3bda8529cf21b8a,"DefaultChannelId, current ProcessId: use ProcessHandle instead of jmx in java9+ env (#12465)

Motivation:

Netty relies on jmx to get current process id used by DefaultChannelId. This brings in java.management JPMS module which takes additional 1.8mb in application runtime image of total size ~60 mb. It would be useful to remove this dependency for java9+ by using ProcessHandle API instead of jmx. 

Modification:

Current process id: use ProcessHandle API instead of jmx in java9+ env.

Result:

Less dependencies, smaller application runtime image with java9+ env."
dc69a943c3682fec16845828cb6d8f0554fad61f,"Avoid exponential back-off in PemReader (#12476)


Motivation:
The key and certificate patterns used in PemReader were susceptible to exponential back-off.
The reason is that they had two adjacent matching groups that overlapped in their matching characters.
For instance, it is not clear to the matcher if a long string of newlines after the header actually belong to the header or to the base64 text body.

Modification:
Now, the base64 text body always starts with a non-whitespace character, and any newlines in the body must follow after that.
This creates a fixture in the pattern that separates the header from the body unambiguously, and thus avoids exponential back-off.

Result:
More robust PEM parsing."
b1a63697465ea86ccd5a6f972ca274cd2563b4a9,"Check and skip if post body parameter name and value are empty (#12427)


HTTP form bodies sometimes have RFC illegal extra ampersands in them; this has become accepted by lots of frameworks and so it makes it difficult to migrate to Netty.

This builds on top of #12016

Contextual information:
A POST body with the following was not accepted by Netty:
&foo=bar&baz=bang
Now it will be.

Modification:

Skips name and valueless attributes silently

Result:

Library now compatible with the broken internets


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
f43a9dd0a384eb6226e31648b7168e4fa241527d,"Opt-out from blocking reads of OS files for classifiers (#12483)

Motivation:

On initialization netty does blocking reads of /etc/os-release, /usr/lib/os-release for specific classifiers that are never available on some popular distros (e.g. ubuntu, alpine). It would be helpful to avoid such blocking reads with system property containing distro classifier.

Modification:

Introduce system property `io.netty.osClassifiers` containing 0, 1 or 2(comma separated) distro classifiers that are used instead of reading etc/os-release, /usr/lib/os-release.

Result:

Skip blocking reads of OS files for distro classifiers if `io.netty.osClassifiers` system property is present with said classifiers."
c6c3bc606d4e716cf5a08ab68eb950ebb8f989b1,"Make SslHandler.handlerRemoved(...) more rebust in case it is called because handlerAdded(...) throws. (#12490)

Motivation:

We should ensure we do a null check in handlerRemoved(...) as handlerAdded(...) might throw before it inits the pendingUnencryptedWrites .

Modifications:

- Add null check
- init pendingUnencryptedWrites before we try to do anything else that might throw

Result:

More rebust handling of failures during handlerAdded(...). Related to https://github.com/netty/netty/issues/12473."
4e439264df0523fb6efce5f8f6c7c7fa74addd07,"Exception from release should not shadow encode exception (#12500)

Motivation:
Since release may throw, we can end up shadowing a root cause exception if we release from a finally-clause.

Modification:
In MessageToMessageEncoder, if encode() throws an exception, we release using safeRelease(), which will not throw.
Otherwise we release with release() like usual.

Result:
Exceptions from encode() in MessageToMessageEncoder can no longer be shadowed by exceptions from release().

Fixes #12499"
d0f8e736c5254a04a93631ead291cd51052139e8,"Fix race in DefaultHttp2PushPromiseFrameTest that could produce a NPE (#12521)

Motivation:

We need to ensure channelActive(...) was called before trying to access ChannelHandlerContext, otherwise we might produce a NPE

Modifications:

Add a CountdownLatch to ensure channelActive(...) was called

Result:

No more NPE possible"
86d4ee41cd917e7b28a691cca1b1d0720e1d5df6,"Fix OSGi processor directive on aarch64 (#12498)

Motivation:
OSGi has a limited set of permitted platform architecture names, which does not include `aarch_64` (with the underscore).

Modification:
Since our ARM builds use separate profiles, we can fix the hardcoded OSGi processor directive to use `aarch64` as it expects, without impacting our native code loading.

Result:
OSGi can now load our native code modules.
Except, probably, on FreeBSD and OpenBSD, which do not have separate ARM profiles and instead rely on our `os.detected.arch` which would include the underscore."
96f6414f2b6a08cdf53ee51f21d66ff1f73d73ac,"Check correct reference for exception during test run (#12538)

Motivation:

While working on some other problem I noticed that we didnt check the correct reference and so could end up in a timeout without seeing the correct cause of it.

Modifications:

Check the correct reference

Result:

Fix unit test"
96bd677cb5c580077d3d1b76def7e03b19da9492,"Avoid LocalAddress conflicts in tests (#12541)

Motivation:
RenegotiateTest has occasionally been failing because it tries to bind to a LocalAddress that is also being used by SniClientTest.

Modification:
Make both tests use LocalAddresses named after themselves to avoid conflict.

Result:
We should no longer get test failures with ""ChannelException: address already in use"" from these tests."
7bae6a7a13c3bc6406d49f638e5952cc2644342b,"Add methods to override address inference in PcapWriteHandler (#12526)

Motivation:
The PcapWriteHandler has requires either a SocketChannel or a DatagramChannel to infer TCP / UDP connection details. This makes it useless for debugging an EmbeddedChannel.

Modification:

- Add a builder for configuring and constructing `PcapWriteHandlers`.
- Add `forceTcpChannel` and `forceUdpChannel` methods to allow users to bypass the channel metadata inference and provide their own information.
- Move handler initialization from `channelActive` into a separate method that is also called on any write or read. This ensures the new inference code runs even if channelActive isn't called. With the old inference code, this would have broken further down the line because `handlerAddr` and `initiatiorAddr` are null and the writer code can't deal with that, except the udp DatagramPacket branch. The change is necessary to maintain compatibility with that DatagramPacket branch, and to make use with EmbeddedChannel easier (EmbeddedChannel does not fire channelActive unless requested).
- Add tests for EmbeddedChannel based on the existing tests. This also changes the test case for normal udp/tcp a bit, because the test case mixed up the remote and local address (this was previously not an issue because both were 127.0.0.1).
- Improve error message for incompatible channel type, and elevate it to a warning. It should never appear with proper use of PcapWriteHandler.

Result:
PcapWriteHandler can now be used to debug test cases that use EmbeddedChannel."
1df9067011cbfaf692df9f9977650a473b965efb,"Add method to EmbeddedChannel to check whether tasks are pending (#12536)


Before this patch, there was no way to determine whether `runPendingTasks()` would actually do anything. For an isolated EmbeddedChannel this is not an issue, as you can simply track whether you're adding any new tasks, and rerun the embedded event loop if necessary.

With more complex code that uses multiple channels this is not always possible, though. Consider the following artificial example:

```java
void methodToTest(Channel c1, Channel c2) {
    c1.eventLoop().execute(() -> {
        c2.eventLoop().execute(() -> {
            ...
        });
    });
}
```

Now, to ""fully run"" this code with embedded channels, it is necessary to repeatedly call `runPendingTasks()` on the two channels. This requires a way to know whether there is any work left to do.

Modification:

Add the `hasPendingTasks()` method. It has the same task selection semantics as `runPendingTasks()`, so it also considers scheduled tasks where the deadline has expired.

A potentially better alternative would have been to make `runPendingTasks()` return a boolean indicating whether any tasks were executed, but this is not possible while retaining binary compatibility.

Result:

Users of EmbeddedChannel can use `hasPendingTasks()` to fully run test code to completion, even in scenarios with multiple embedded event loops.


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
1a3ca6dcd86acc1953aa3c2148a637c90e08ad91,"Fix race in http2 test (#12547)

Motivation:

As we access the handler directly we need to ensure we wait until its added to the pipeline to eliminate races.

Modification:

Add latch to ensure we wait until the handlers are added

Result:

No more race in test"
f4edab3af3492fa5c512e014ff63f260d817f5e5,"Replace ctx.channel().writeAndFlush with ctx.writeAndFlush in WebSockets handlers (#12540)

Motivation:

There is no actual need to call `ctx.channel().writeAndFlush` instead of `ctx.writeAndFlush`.  Using the context is also more correct as it start at the right place in the pipeline.

Modification:

Use the context and not the channel

Result:

More correct code"
7d540fc39ce21c305efef7c182350f611ef51933,"Add Better Path Handling (#12533)

Motivation:

Paths, especially those of the form ""//path/to/resource"" are handled as ""/path/to/resource"" by most browsers and servers, but Netty fails on these, parsing them as having an authority.

Modification:

Directly forward the uri when it's a path instead of trying to parse it.

Also clean up isOriginForm/isAsteriskForm as their logic seems to be incorrect (for example, URI#getSchemeSpecificPart() never returns null so they both return false trivially).

Result:

Netty forwards uris unchanged when they look to be in origin or asterisk form."
985971e41f2b80cb6d56c99aa585068daa50716d,"Update to new codeql-action (#12551)

Motivation:

v1 of codeql-action is deprecated and will be removed

Modifications:

Update to v2

Result:

No more warning about the usage of v1"
29b203f75ad74146d78aa703e94be797ad1a48f2,"Fix typo in KQueueChannelConfig (#12537)

Motivation:

KQueueChannelConfigTest.testRawOption() fails on MacOS due to the buffer for the RawUnixChannelOption being over-allocated when retrieving the option value. Since the limit is not explicitly set (the buffer is just flipped), the limit of the buffer will be based on its size, causing the test to fail.

Modification:

Changes the buffer allocation for getOption of RawUnixChannelOption in KQueueChannelConfig to be based on the length of the option instead of the level. The use of level is likely a typo. The corresponding code in EpollChannelConfig allocates the buffer based on length rather than level.

Result:

One less test failure when building on MacOS (Intel) with JDK 1.8."
c949fa6a95725605a7e31be7abecbeb63262044a,Keep completed flag for retained/duplicated HttpData (#12576)
2f7234b7b8771cf8f6eaaf78c3f9932fbfe546bf,"Fix isOriginForm and isAsteriskForm (#12568)

Motivation:

These methods would always return false using the previously implementation (URI#getSchemeSpecificPart is [documented](https://docs.oracle.com/javase/8/docs/api/java/net/URI.html#getSchemeSpecificPart--) to *never* return `null`). They also had other implementation errors.

Modification:

Edit methods to conform with RFC 7230.

Result:

Methods handle the basic examples provided in RFC 7230. More test cases can be added as needed."
15812da820fd3aef3df687953bc54ee1c6eb894b,"Offload multicast operations to the EventLoop if not called from within an EventLoop thread (#12584)

Motivation:

LinuxSocket is not thread-safe and so we need to ensure we only access it from without the EventLoop thread.

Modifications:

Change EpollDatagramChannel to always dispatch to the EventLoop if not called from the EventLoop thread

Result:

No more threading issues"
1befae89aa1bc4605132b06618afc6a43efa3fa4,"Only enable test if brotli is there (#12592)

Motiviation:

We should only try to run the test if Brotli is really supported on the platform (which is not the case on m1)

Modifications:

Only run if brotli is supported

Result:

Testsuite pass on m1"
9728d62b406df45513ee693dcfdf727957bc8020,"Add support for LoongArch64 architecture (#12580)

Add support for LoongArch64 architecture

Motivation:

PlatformDependent didn't support detecting LoongArch64.

Modification:

Add code to detect architecture.

Result:

Be able to detect LoongArch64.


Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Pasqual Koschmieder <pasqual.koschmieder@gmail.com>"
aa59245955f5121c4230d46c41a4b7f55e0c9ba7,[maven-release-plugin] prepare release netty-4.1.79.Final
c05287c286f928e88de65e9b21a25ab42e20a1e4,[maven-release-plugin] prepare for next development iteration
73ef1f86c6c79a203d706394b52a7a0df5e7911f,"Fix test-failure on macOS with JDK versions < 20 (#12597)

Motivation:

Calling DatagramChannel.disconnect() on JDK versions < 20 with mapped ipv6 addresses throw an exception, we should workaround this bug.

Modifications:

Only try to call disconnect() when the DatagramChannel is not using NIO when using mapped ipv6 addresses

Result:

No more build failures on macOS"
9105d2985c9146b0b66bc1db548eebe16a0be6b9,"Correctly check the argument whe EpollServerSocketChannelConfig.setTcpFastOpen(...) is called (#12596)

Motivation:

Due a bug we didnt check the argument but the already set value when calling setTcpFastOpen(...)

Modifications:

- Correctly check argument
- Add unit test

Result:

Throw if incorrect argument is used"
c4329211684543fba378ea5df6f9064a6965a61c,"Don't use static instances of FixedRecvByteBufAllocator (#12594)

Motivation:

FixedRecvByteBufAllocator has state internally so we cant use a static instance across different ChannelConfig instances. This was noticed while working on https://github.com/netty/netty/pull/12593.

Modifications:

Create a new instance of FixedRecvByteBufAllocator when creating the ChannelConfig

Result:

Correctly handling internal state"
2e2904221f0bd927c64f688ffa54cb693bad4a2e,"Add missing synchronized when using setTcpMd5Sig(...) for epoll (#12604)

Motivation:

As we should guard with a synchronized block as setTcpMd5Sig(...) might do multiple operations on the socket

Modifications:

Add synchronized

Result:

Correctly guard"
4ebc4ee66f9202c5b49e4f403cc19a719444d0d9,"Add check for |Connection| and |Upgrade| headers inside WebSocketServerHandshaker13, see https://datatracker.ietf.org/doc/html/rfc6455#section-4.2.1 (#12606)

Motivation:

We faced with problem between proxies and Netty backend server. If we received a handshake request which doesn't contain a |Connection| or |Upgrade| headers with proper value the Netty accept this request and upgrade pipeline to handle websocket frames. But proxy thinks that is not upgrade request and can reuse this connection to any others http requests which we don't expect.

Modification:

Add check for |Connection| and |Upgrade| headers inside `WebSocketServerrHandshaker13` according spec
https://datatracker.ietf.org/doc/html/rfc6455#section-4.2.1. 

Result:

Proper handshake request handling for websocket version 13."
af686b8acef63b34aa0d265357dd6442ad205f44,"SingleThreadedEventLoop: add read-only iterator of channels (#12610)


Motivation:

For servers there is a need for per eventloop ""watchdog"" timer that ticks for all eventloop channels. For moderately high number of connections, It is cheaper cpu-wise than per channel scheduling.

Now this requires additional data structure to hold active channels - which is wasteful as It duplicates the one from SingleThreadedEventLoop (its practically useful impls - epoll, kqueue, nio).

Modification:

Add read-only iterator of eventloop channels exposed on SingleThreadedEventLoop as Iterator<Channel> registeredChannelsIterator()

Result:

SingleThreadedEventLoop channels may be iterated without additional redundant data structures


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
c882d807055244930dace81b822000183b805ec8,"Replace synchronized with Java Locks on the allocator (Fixes #12621) (#12622)

Motivation:
JDK 19 Virtual Thread preview is not compatible with synchronized blocks and Netty pooled allocator code is making uses of it to protect arenas/chunk/subpages accesses

Modification:
Replacing existing synchronized usages to make the existing core more Virtual threads friendly: no evident effects should exist on performance, but an increased allocation rate under contention.

Result:
Virtual Threads compliant pooled allocator"
f3260985303d6f1293b9ea01c351025baace0b35,"We need to use disconnectx(...) on macOS (#12629)

Motivation:

We need to use disconnectx(...) on macOS as using connect(...) for disconnect is not working anymore.

Modifications:

Use disconnectx(...)

Result:

No more failure on disconnect(...)"
1b1126896e8e07841121183a69409e31480ab447,"Add profile to cross-compile for intel on m1 mac (#12631)

Motivation:

As the new hw has a m1 / m2 chip we need to ensure we can also cross-compile for intel and do a release

Modifications:

- Add profile for cross-compile to intel
- Adjust finish_release.sh script to select the correct profile for cross compilation

Result:

Be able to cross compile on m1 and also do the release"
e158794363a7a2a6d06004f26e3e8b15e4fc3254,"Use netty-tcnative-boringssl-static when on linux aarch64 (#12632)

Motivation:

We only publish netty-tcnative-boringssl-static foor linux aarch64.

Modifications:

Use boringssl version

Result:

Build works on linux aarch64"
f01f3cb1ca9c8b0fe9d45dc4db2ed573a7730abe,"Add escaping for stomp headers, see https://stomp.github.io/stomp-specification-1.2.html#Value_Encoding (#12585)

Motivation:

Currently we compatible with STOMP 1.2 but one important thing like escaping has not been implemented, see 
https://stomp.github.io/stomp-specification-1.2.html#Value_Encoding

Modification:

Add escaping to stomp encoder/decoder according specification.

Result:

Fixes #4448 

Stomp codec comply with STOMP 1.2 and in most case backward compatible with 1.1 and 1.0."
89a42edbbdd9083cf05ec30a411baa11ac1a222d,Fix typo DnsCache originalTtl comments (#12645)
5cfc8f999197eec88629a356b113caa3b122c476,"Set IS_EXPLICIT_TRY_REFLECTION_SET_ACCESSIBLE to true by default for native images (#12638)

Motivation:
To prevent memory leaks when running as a native-image, users explicitly set the `io.netty.tryReflectionSetAccessible` property to true. If Netty is initialized at image build time, this property can be set during the image build and is not required when running the image.
However, if Netty is initialized at image runtime, users would need to supply this system property every time they run their image.

Modification:
To improve support for runtime initialization of Netty 4, this PR sets the `io.netty.tryReflectionSetAccessible` property to default to true if running in a native-image.
This ensures that even in the case of runtime initialization, users do not need to supply extra flags to their image."
ef9a583ee91cece0516b27289795eadb559ae39b,"Avoid allocating large buffers in JdkZlibEncoder (#12641)

Motivation:

Before this patch, JdkZlibEncoder allocates two buffers of roughly the same size as the input buffer: one for copying data to heap, one for output. The former is always unnecessary, since inflate calls can take smaller buffers, and the latter is sometimes unnecessary, if the input data compresses well. This behavior can lead to large heap buffer allocation that bypass pooling and lead to unnecessary heap pressure.

Modification:

This patch introduces a limit to both allocations. The limit is arbitrarily set to 64K (should it be configurable?) to stay within standard pool thresholds.

The copy-to-heap code is modified so that if the input is larger than this limit, it is gradually passed to the deflater with multiple setInput/deflate calls.

The output buffer code was already capable of expanding a too small buffer. If the output is larger than the limit, we could instead write it incrementally as small chunks downstream, however I don't know if this is worthwhile, since we don't really have any way of handling backpressure.

Additionally, this patch fixes three bugs I found during development:
- It is possible for the deflater to return `needsInput` even when there is still data to write, because the output buffer is full. I changed the code to check whether output is full first. This could potentially lead to a pointless resize if we estimated the output size exactly right, but this seems unlikely.
- the size estimate in `allocateBuffer` could overflow if the input buffer is almost 2G. The capacity limit fixes this issue.
- The deflater kept a reference to the input array even after the encode call had completed. I set the input to `new byte[0]` to avoid this.

Result:

JdkZlibEncoder does not allocate unnecessarily large temporary arrays. However, it may have to resize the output array more often if data can't be compressed well."
c37c637f096e7be3dffd36edee3455c8e90cb1b0,"Avoid including header values in header validation failure exceptions (#12642)

Motivation:
Exception messages may end up in logs, or other error reporting mechanisms, and we cannot necessarily tell at header validation time if the header value is sensitive information or not.
Hence, it's better to not include it, and instead rely on the header name as a debugging aid.

Modification:
Remove the inclusion of the header value that fails header validation.
And instead add the name of the header that fails validation.

Result:
If sensitive information fails header validation, it will no longer be exposed through the exception messages."
f191f89a827d4a4151faffb38d215385e91fa3d3,"Track independent refCnt in MixedAttribute and MixedFileUpload (#12650)

Motivation:

Before this patch, MixedAttribute and MixedFileUpload delegated reference counting to their underlying memory or file representation. When the representation changes from memory to disk because the memory size limit was exceeded, the reference count of the old representation is not transferred, so the reference attribute resets to 1. This may leak the memory of the old representation, and may lead to exceptions when users try to release the mixed data.

Modification:

Introduce a new AbstractMixedHttpData class, analogous to the existing abstract classes for disk and memory data. This new class does its own reference counting, and unifies the swapping mechanism for attributes and file uploads.

The change is fairly big, but it's mostly copied from the old implementations. Makes it a bit annoying to review though, so I might have missed a bug.

I tried inheriting from AbstractHttpData, but it didn't really reduce the code size much, and makes some code less clear because it leads to two copies of the name, charset, etc.

Regarding compatibility, I managed to fix most compat issues reported by revapi. However inheriting from a new class in a non-final class is apparently a breaking change no matter what we do, and additionally AbstractReferenceCounted.setRefCnt is problematic. I think both of these errors are unlikely to affect anyone, and are justifiable. I've added an exclusion to the pom.

There is a new test class to test the retain/refCnt behavior. I didn't add it to the HttpDataTest, because the data defined there does not have a size limit we can use to test easily.

Result:

MixedAttribute and MixedFileUpload now behave like any other reference counted object."
8b2297bc6c5c022e2c414890a21c74889d2c0471,"Fix epoll bug when receiving zero-sized datagrams (#12644)

Motivation:
Datagrams are allowed to be empty when sent over UNIX or INET sockets.
In such cases, we cannot use ""received zero bytes"" as a signal that no packets were received.

Modification:
When we receive a zero-sized datagram, tell the EpollRecvByteAllocatorHandle that we really received one byte, because the allocation handles use zero as an end-of-data signal.
Such signals will put the event loop to rest, which is wrong because we don't know at this point if there are more packets to process.
Use the absence of a sender-point as signal that no packets were read from recvmsg(2), and then continue to use -1 as the end-of-data signal to allocation handle.
Add a DatagramUnicastTest to verify that we can receive multiple empty datagrams in a row without the eventloop mistakenly going to sleep.
The JDK DatagramSocket and DatagramPacket do not currently support UNIX sockets, so the test catches those specific exceptions and bails out in those cases.

Result:
Robust handling of zero-sized datagrams in the epoll transport."
114762840b2d39018e2254883055c8d34e5846f6,"Add Blockhound exceptions for the PooledByteBufAllocator (#12653)

Motivation:
In #12622 we replaced a number of synchronised blocks with explicit locks.
It turns out that blockhound ignores synchronised blocks for some reason, and now complain about the explicit locks.

Modification:
Add exceptions and allow blocking calls in select methods in the PooledByteBufAllocator.
Also add a test that create races inside the pooled allocator in an attempt to get the thread blocked on the locks while blockhound is watching.

Result:
No more blockhound complaints."
731b7c6240ab1944710982217feca6ddc346e620,"Improve error message when ByteToMessageDecoder subclasses release their input buffers (#12662)

Motivation:
Releasing the buffer in the decode() method is a violation of the API, but this is not obvious without reading the javadocs carefully.
The error message people get, are difficult to act on and debug.

Modification:
Capture the precise class name of the ByteToMessageDecoder subclass that released the buffer, in the error message.
This will tell people what code to investigate, when they get this error.

Result:
It is now easier for people to debug issues that arise when they mess up the reference counting of buffers"
425b5b832151640e615803726c82bb03ddba1f1f,"Improve websocket masking, use long datatype for XOR operation. (#12651)

Motivation:

The performance of a websocket depends a lot on frame masking and unmasking, we can improve this by using a long data type for the XOR operation. 

Modification:

Use long datatype for XOR operation. This reduces the number of reads and writes required when masking a data buffer.
Provide benchmarks to check result.

Result:

Websocket performance is better."
940d12b08ad62ea70c04a7877cc1c6e919738df2,"Call RecvByteBufAllocator.Handle.readComplete() once read loop completes in Local transport implementation (#12681)

Motivation:

We need to call readComplete() once we are done reading.

Modifications:

- Add missing readComplete() calls
- Add unit test

Result:

Local*Channel uses Handle as expected"
a1d30767aae00a4dbc8415f6c78ad65e96a60eef,"Update tcnative to 2.0.54.Final (#12676)

Motivation:

A new version was released

Modifications:

Update to 2.0.54.Final

Result:

Use latest version"
d399f15f95602926587a29dd7794e39047c05fc3,"Fix unit test failure on macOS (#12686)

Motivation:

There needs to be special handling of any addresses as otherwise the test might fail with `NoRouteToHostException`.

```

java.net.NoRouteToHostException: No route to host

	at java.base/sun.nio.ch.DatagramChannelImpl.send0(Native Method)
	at java.base/sun.nio.ch.DatagramChannelImpl.sendFromNativeBuffer(DatagramChannelImpl.java:901)
	at java.base/sun.nio.ch.DatagramChannelImpl.send(DatagramChannelImpl.java:863)
	at java.base/sun.nio.ch.DatagramChannelImpl.send(DatagramChannelImpl.java:821)
	at java.base/sun.nio.ch.DatagramChannelImpl.blockingSend(DatagramChannelImpl.java:853)
	at java.base/sun.nio.ch.DatagramSocketAdaptor.send(DatagramSocketAdaptor.java:218)
	at java.base/java.net.DatagramSocket.send(DatagramSocket.java:669)
	at io.netty5.testsuite.transport.socket.DatagramUnicastTest.testReceiveEmptyDatagrams(DatagramUnicastTest.java:201)
	at io.netty5.testsuite.transport.socket.DatagramUnicastTest$1.run(DatagramUnicastTest.java:170)
	at io.netty5.testsuite.transport.socket.DatagramUnicastTest$1.run(DatagramUnicastTest.java:167)
	at io.netty5.testsuite.transport.AbstractComboTestsuiteTest.run(AbstractComboTestsuiteTest.java:54)
	at io.netty5.testsuite.transport.socket.DatagramUnicastTest.testReceiveEmptyDatagrams(DatagramUnicastTest.java:167)
        ...
```

Modifications:

Call sendToAddress(...)

Result:

No more test failures"
91f8ecc361deef82ce5a7fa0a2057e29805c2a99,"Support for pkcs1 (#12670)


Motivation:

Motivated by a stale [PR](https://github.com/netty/netty/pull/7451) that was closed. This change adds support for keys in the PKCS#1 format. Currently netty only supports PKCS#8 keys.

Modification:

This change introduces a class called `BouncyCastlePemReader` which is only used if BouncyCastle is available on the classpath and uses BouncyCastle's PEMParser to parse the private keys. See list of supported types [here](https://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/openssl/PEMParser.html). 

Tests are added in `SSLContextTest` including tests with PKCS#8 keys (encrypted + unencrypted) to show these working with BouncyCastle.

Result:

Fixes [#7323](https://github.com/netty/netty/issues/7323)

Signed-off-by: Craig Perkins <cwperx@amazon.com>"
839eda075531ec4bbdb247c6db2cf286e34a130b,"Handle content-type optional parameters other than charset (netty#12663) (#12664)

Motivation:

When receiving multipart/form-data where the form-data includes a file with optional parameter, in my case a codec parameter, the content-type was incorrectly set to the parameter value. Currently this only behaves correctly if the optional parameter is a character set parameter.

Modification:

When processing the content-type header contents, after splitting the header into the String[], check each item to see if it is a name=value pair, indicating it is an optional parameter. Add an attribute using the split name and value.

Result:

When processing the content-type header, the code now correctly sets the content-type and adds additional attributes for the optional parameters.

Fixes #12663"
b2f3ae20bcc776290919a412d1f2e73847493a83,"Update to netty-build 30 and so remove all junit4 dependencies (#12689)

Motivation:

netty-build versions < 30 did bring junit4 with it as transist dependency.

Modifications:

Update to netty-build 30 and fix junit 4 usage

Result:

No more dependency on junit 4 at all"
f21f644dde32a1eb9769ce3551c072e0ccd19904,"Update java versions used via docker (#12692)

Motivation:

There are newjava releases, let's update so we use these on the CI

Modifications:

- Update java 8, 11, 17 and 18 releases

Result:

Use latest versions"
23b78e86baa2653cc8ae9d0d9e6263d046804649,"Include any core dumps in the build failure archives (#12703)

Motivation:
We occasionally get JIT compiler crashes.
These produce core dumps, at least on Linux.
It's not clear where these dumps are placed, but if they are placed in our build directory, then it makes sense to include them in our failed build archives, so they have a chance to be debugged.

Modification:
Also include any `core` files produced in our build directory, in the failed build archive.

Result:
JIT and GC crashes now have a fighting chance of being debugged, when they occur."
a06f851d3d9d27544c469b2017a20d08bd13686a,"Bump Brotli4j from 1.7.1 to 1.8.0 (#12701)

Motivation:
Brotli4j 1.8.0 has been released with native support for the Apple Silicon M1 chip.

Modification:
Upgraded to 1.8.0

Result:
Latest Brotli4j version"
8dd357ced6c227f6809e571ffd1390c0441a154f,"Add replay_pid*.log to gitignore

Motivation:

Ensure we not commit JVM crash logs

Modifications:

Add replay_pid*.log to the gitignore file

Result:

Not possible to commit crash log by mistake"
0123e2445d9a8f3273e957380f9db354492fd700,"Enable Brotli tests on m1 (#12705)

Motivation:

a06f851d3d9d27544c469b2017a20d08bd13686a updated brotli4j version to one that supports m1. Let's enable tests.

Modifications:

Enable brotli4j tests on m1 as well

Result:

More testing"
b6b458433cb0361fe5b16e269e5115fff8344be4,"Add heap / thread dumps to .gitignore (#12711)

Motivation:

We should not commit heap / thread dumps by mistake.

Modifications:

Add dump related files to .gitignore

Result:

No commit dumps by mistake"
b7ecda0759087b970260e841bbd65aa7b85d7b66,"Skip revapi check for the microbench (#12718)

Motivation:
We should be able to evolve and change our benchmark code and infrastructure without worrying about compatibility.

Modification:
Skip revapi check for the microbench module and remove benchmarking specific configuration from the revapi plugin.

Result:
The microbench module is no longer subject to compatibility checks.

Co-authored-by: ahadadi <ahadadi@outbrain.com>"
42926695861c012ee6153e6bc8c4846bd4b923e9,"Replace stdlib write/read with send/recv (Fixes #12673) (#12679)

Motivation:

The performance Unix write/read paths is more involved (and slower) then the specialized socket send/rcv ones.

Modification:

Replace Unix write/read paths with send/recv

Result:

Better performance for single buffer send/recv"
57dbfb0aeb734164435d2b08e733ba52717e222c,"Use ubuntu-latest in workflows (#12728)

Motivation:

ubuntu-18.04 is deprecated. Let's just use ubuntu-latest

Modifications:

Use ubuntu-latest in workflows

Result:

Cleanup"
8957a2e36a0d0f794af7556e838dbbf194f58ad0,"Improve logging when MacOSDnsServerAddressStreamProvider cannot be found/loaded (#12732)


Motivation:

When `MacOSDnsServerAddressStreamProvider` cannot be found/loaded, a warning/error appears
in the logs, specifying that without this functionality the DNS resolution might be incorrect.
However there is no guidance how this can be fixed.

Modifications:

- Extend the log message with information for the dependency that is needed in order to resolve this issue.

Result:
Users will be informed for the missing dependency that will resolve the issue.
Related to #11020

Co-authored-by: wvl <nlwilliam@icloud.com>"
423a385b05d706ace67a60ba48fc82b87a587502,"HttpObjectEncoder scalability issue due to instanceof checks (Fixes #12708) (#12709)

Motivation:

Current http encoder logic cause contention over the klass field used by the JIT to speed up instanceof checks vs interfaces,
preventing scaling with multi-core machines.
See https://bugs.openjdk.org/browse/JDK-8180450 for more info.

Modifications:

Code duplication to reduce the arity of the morphism on the instanceof checks on the http encoder.
Removed using encoder inherited methods to take control of the arity of the
call-site  morphism while releasing ref counted http msg types.

Result:

Scalable HTTP encoding"
906bb37a9bd007277d9a32d1b266a9515a20a457,[maven-release-plugin] prepare release netty-4.1.80.Final
617415ae3eb5cce1b6a4198157ede01b05a5a891,[maven-release-plugin] prepare for next development iteration
f53a5ef79ed63e98b6359e81c280c56d930a302e,"Fix regression in SslContext private key loading (#12743)

Motivation:
The BouncyCastlePemReader checked that the bcprov dependency was available, but not the bcpkix dependency, which is also required to use the Bouncy Castle PEM reader.
This means SslContext could be tricked into using  Bouncy Castle for PEM reading, when the required classes were not actually available.

Modification:
Add another check for bcpkix, and avoid using Bouncy Castle for PEM reading if its PEMReader is not available.

Result:
We no longer get the following exception:

```
java.lang.NoClassDefFoundError: org/bouncycastle/openssl/PEMParser
	at io.netty.handler.ssl.BouncyCastlePemReader.newParser(BouncyCastlePemReader.java:203)
	at io.netty.handler.ssl.BouncyCastlePemReader.getPrivateKey(BouncyCastlePemReader.java:134)
	at io.netty.handler.ssl.SslContext.toPrivateKey(SslContext.java:1126)
```"
6c81a3fa025f31bc0308d7913f8ecbf540f99247,"Fix bug in SslContext private key reading fall-back path (#12746)

Motivation:
We first try to read private keys with BouncyCastle, and then fall back to our own code if that fails.
It could be the case, that BouncyCastle read some data before it failed, and in that case we need to make sure that our fallback code gets to read the key data from the original stream position - not whatever position caused a failure in BouncyCastle.

Modification:
Use the mark and reset methods of InputStream to reset the key stream position, if BouncyCastle cannot read a key.
If the provided input stream does not already support marking, then we wrap it in a BufferedInputStream which does.
We allow up to 1 MiB of data to be buffered for this purpose.
If the key is bigger than this, and BouncyCastle reads more than this before failing, then resetting will throw an exception so we don't get silent failures.

Result:
Fixed private key fallback code path.
Fixes #12745"
48c721c37178a8e982e37196ab9454ff870f4748,"Update test certificates (#12752)

Motivation:
The certificates used for testing has expired.

Modification:
I ran `generate-certificate.sh` to generate the new files.
Only existing changed files are committed.

Result:
Tests pass again."
fcef0e452754ca1652a2ea0f36329f075b7857b6,"Include autobahn reports in uploaded artifacts (#12758)

Motivation:
The autobahn test suite occasionally fails, and without the result files we have no way to debug them.

Modification:
Add a autobahntestsuite-reports folder to the uploaded artifacts.

Result:
Maybe we'll be able to debug these in the future."
05943f54e8166b1a283e4dade6bb91fc0e377752,"Fix buffer leak regression in HttpClientCodec (#12762)

Motivation:

#12709 changed HttpObjectEncoder to override the write method of MessageToMessageEncoder, with slightly changed semantics: The `msg` argument to `encode` is not released anymore. To accommodate this change, #12709 also update `HttpObjectEncoder.encode` to release the `msg`. However, `HttpClientCodec.Encoder` overrides `encode` and simply forwards the message if a HTTP upgrade has been completed. This code path was not updated to release the input message. This leads to a memory leak.

Modifications:

Changed the `encode` implementation to not retain the message that is forwarded. Added a test case to verify that the refCnt to the data passed through is unchanged.

Result:

The buffer retains its correct refCnt and will be released properly."
9f10a284712bbd7f4f8ded7711a50bfaff38f567,"HttpMessages implementing HttpContent types too aren't handled correctly (Fixes #12750) (#12751)


Motivation:

Changes due to #12709 have added a code path.

Modifications:

Restore the ""just http message"" case as separated by the http content ones

Result:

Same encoding as original code


Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
5256f3628c553081e674f7b27e93a97350141715,"Properly make MessageFormatter and FormattingTuple public (#12763)

Motivation:

_Taken from #12761_

Classes `io.netty.util.internal.logging.FormattingTuple` and `io.netty.util.internal.logging.MessageFormatter` are public classes, but the latters's format methods are package-private while the former's constructor is package-private making their use in custom in InternalLoggerFactory implementations impossible.

Modification:

Make necessary methods public

Result:

Fixes #12761."
90636afb030f74b8ea62b857b0896b7431cafe82,"Reject connection related headers in HTTP/2 frames (#12755)

Motivation:
In https://datatracker.ietf.org/doc/html/rfc7540#section-8.1.2.2 is says ""any message containing connection-specific header fields MUST be treated as malformed"".
We already filter these out in our HTTP/1 to HTTP/2 translation code, but if the HTTP/2 frames are originally sent to us with these headers, then we must reject them as malformed.

Modification:
Improve the header validation code used by the DefaultHttp2HeadersDecoder to check for, and reject, any connection related headers.

Result:
Frames with illegal headers are now correctly rejected, though only when header validation is turned on."
195a37062200ea8890aa8eebffc30865bfea02a7,"Make PoolSubpage more resilient to certain errors (#12776)

Motivation:
We occasionally see a strange `ArrayIndexOutOfBoundsException: Index 67108863 out of bounds for length 8` exception, which is caused by `getNextAvail()` returning `-1`, even though `numAvail` is positive.

Modification:
Improve the error message when this occurs, and include a few more details to verify the assumption that `bitmapIdx` really is `-1` even though `numAvail` is positive.
Also remove the PoolSubpage from the arena when this happens, as it likely means the subpage is in a broken state, and we should not use it anymore.

Result:
We have no fixed the root cause, but hopefully the system will be better able to recover, or at least we'll get slightly better diagnostics."
341e4f11418dc85c93ce64852ce80bbc83e7d1af,"Fix inconsistent synchronization of PoolSubpage.doNotDestroy (#12775)

Motivation:
This field is modified under lock, and thus should not be accessed (toString excepted) without locking.

Modification:
Move an assert check on PoolSubpage.doNotDestroy into a nearby critical region.

Also encapsulate the findSubpagePoolHead logic better; PoolArena now always use this method instead of that one place that was accessing the array directly.
This should not have any influence on the logic.

Result:
Assert in PoolChunk is no longer racy."
d221550e4e92bfca0bada21fe41052682db01961,"fix duplicate code in exampple module. (#12733)

Motivation:

I found some duplicated code  when reading the netty code.

Modification:

all the changes in the  netty-example module.

Result:

fix duplicate code in netty-example module."
9794a35c292966b049d4975d66afdb80f5845729,[maven-release-plugin] prepare release netty-4.1.81.Final
f9f153525224c308268a13354bbb1b1a08cfaf36,[maven-release-plugin] prepare for next development iteration
ef4a9dffeb3004a51b89e72330bd309a875f58e3,"Maven must run in batch mode when listing staged releases

Motivation:
We're grepping the output of the command, and terminal color codes get in the way of that.

Modification:
Ask maven to run in batch mode, to prevent colored output.

Result:
The list_staged_release.sh script no longer fails to find any staged releases in the maven output."
1440435865aa86a350094881b31005cb232424fc,"Fix bug in forEachByte on nested composite bytebuf with leak detection (#12790)

Motivation:
An NPE could occur when forEachByte was called on nested leak-aware composite byte buffers.

Modification:
WrappedCompositeByteBuf extends CompositeByteBuf but must delegate all calls to the wrapped instance.
Add delegation calls for forEachByteAsc0 and forEachByteDesc0.
Without delegation, those calls would, from an outer composite buffer, go to the composite structure of the wrapper buffer, which have no components.

Result:
No more NPE when calling forEachByte on nested composite leak-aware buffers.

Fixes #12787"
75982ea652eee022287c0af29ed629be4d0a1bfd,"DefaultLastHttpContent doesn't allow setting trailingHeaders while other default types do (#12796)

Motivation:

Setting trailingHeaders directly can help users to duplicate code to workaround it

Modifications:

Expose setting trailingHeaders but giving up on headers validation

Result:

Life easier for users"
570c5d75bd172fbb2f6f68685326d4acb3978482,"Avoid failing HTTP/2 requests with `upgrade-insecure-requests` (#12799)

Motivation:
This is a non-standard header that is not _explicitly_ called out as connection related, even though it can be argued that it is.
Regardless, Chrome and Firefox do actually send this header in their HTTP/2 requests, so rejecting these is quite troublesome.
Safari doesn't send this header.

Modification:
Remove the check for `upgrade-insecure-requests` in the header validation in HpackDecoder.
Also update tests to match.

Result:
HTTP/2 requests from Chrome and Firefox are no longer rejected by the header validation.

Fixes #12798"
93a7d4fff1b2b0f849f0d52576d75eb0d1aad4c0,"Respect jdk.tls.client.protocols and jdk.tls.server.protocols (#12797)

Motivation:

We should respect jdk.tls.client.protocols and jdk.tls.server.protocols system property to allow easily to enable / disable protocols

Modifications:

Respect the system properties

Result:

Be able to easily enable / disable TLS protocols in a consistent way"
47799635143d7a11b56c4a4e9a1e65ca221d28ca,[maven-release-plugin] prepare release netty-4.1.82.Final
6314381adfe2883d32de1cf083b32a67c7078761,[maven-release-plugin] prepare for next development iteration
141bb9c0bcfc2bf3f013f9e4825e3b96d0908c71,"Run HTTP/1 and HTTP/2 tests in parallel (#12803)

Motivation:
Running tests in parallel can speed up the build.
And while the http codec tests are not slow, they are also not too picky about running parallel, so this should not make the build more flaky.

Modification:
Configure JUnit to run tests in parallel in these two modules.
Also backport the LocalAddress changes from Netty 5 that allow each individual test case in the same test file, to get their own independent local addresses, and avoid test isolation failures.
Without this, the slowest handful of all the tests would still run one-by-one.

Result:
Faster build."
a29217c7bc85c12a58d3d94a12a3cfcd64e48750,"Upgrade JUnit version (#12805)

Motivation:
New is always better.

Modification:
Upgrade to the latest JUnit 5 version.

Result:
Tests run with the latest JUnit version."
d684f15cf8bcfc3da8c41eda5763fd5149170ef8,"Fix test isolation failure with DeleteFileOnExitHooks (#12809)

Motivation:
DiskAttributes add themselves to a static mutable map when their `deleteOnExit` is `true`.
The `DeleteOnExitHooksTest` manipulates this map and deletes the files in it, causing random test isolation failures.

Modification:
Make the `DeleteFileOnExitHookTest` isolated.
Also make the test use a new random temp directory every time.

Result:
No more tests in the http module randomly failing with ""file not found""."
46524db7d885b73a55c3a49622237cdd7d39fd0a,"Use local stored Unsafe instance (#12813)

Motivation:

We already store the Unsafe instance in a local variable. No need to retrieve it again

Modifications:

Use local stored Unsafe instance

Result:

Cleanup, fixes https://github.com/netty/netty/issues/12812"
c03cdd0f51211f8e212baa70145125ec6080b9ae,"expand SelectionKey array when we need it. (#12818)

Motivation:
we better allocate memory right before we need it.

Modifications:

invoke #increaseCapacity() right before we need it.

Result:

save some memory."
6f21c7f7d89f96140324c3b2af50a89fcf0769fd,"Upgrade to Maven 3.8.6 (#12822)

Motivation:
Maven 3.8.6 is available with various changes.

See: https://lists.apache.org/thread/44817jckpzy7gtrkds9xfrgybmrrbm1z

Modification:
Upgraded to Maven 3.8.6

Result:
The latest version of Maven"
1a74475465b9ba2408a9b96147f0458f13a59abb,"Update HttpChunkedInput javadoc #12821)

Motivation:

The javadoc did reference a non-existing type.

Modification:

Use correct type in javadoc

Result:

Cleanup"
32f032f0e1a5766fd4464b03f0d30181aeb98bd5,"Fix profile selection when running release via m1 (#12826)

Motivation:

We had a typo in the variable name so the wrong profile was selected for cross-compilation on m1

Modifications:

Fix variable name

Result:

Release works on m1 as well"
980f48a9089849adda1d5035eb3ac5ba567a3b23,"Reject HTTP/2 header values with invalid characters (#12760)

Motivation:
In https://datatracker.ietf.org/doc/html/rfc7540#section-10.3 it says that only certain characters are valid in a header value:

> Any request or response that contains a character not permitted
> in a header field value MUST be treated as malformed (Section 8.1.2.6).
> Valid characters are defined by the ""field-content"" ABNF rule in
> Section 3.2 of [RFC7230].

Modification:
Add a header value validation step to HpackDecoder.

Result:
Header values are now validated against the Section 10.3, etc. rules."
5327fae519e651ab7930c2af1d6ea2353006b590,"Automatically generate native-image conditional metadata for ChannelHandler implementations. (#12794)

Motivation:
Analogous to https://github.com/netty/netty/pull/12738, this PR introduces automatic conditional native-image metadata generation for different ChannelHandler implementations

Modification:
This PR is basically the same as https://github.com/netty/netty/pull/12738, but adapted to conform to the Java language level 6.
This PR also adds the metadata generation to more subprojects that contain ChannelHandler implementations.

Result:

Fixes https://github.com/netty/netty/issues/12725"
b31e7f294ba11ef4bca208f472e8f591f5ccb962,"Fix scalability issue due to checkcast on context's invoke operations (#12806)


Motivation:

ChannelDuplexHandler can implements both ChannelOutboundHandler and ChannelInboundHandler
causing a scalability issue due to checkcast due to https://bugs.openjdk.org/browse/JDK-8180450

Modifications:

Peeling-off invoke methods turning the checkcast vs interfaces into an instanceof
vs ChannelDuplexHandler, saving the scalability issue to happen.
Sadly, if users manually implements both ChannelOutboundHandler and ChannelInboundHandler
without extending ChannelDuplexHandler the fix won't be enough.

Result:

Scalable duplex channel handler operations."
2ed95c906a0c0a59e16683c234122bb52c6400f9,"Optimize HpackStaticTable by using a perfect hash function (#12713)

Motivation:

HpackStaticTable performance can be improved by using a perfect hash function.

Modifications:

Use 2 tables, one for mapping header name -> index and one for mapping header name + value -> index.
Choose the tables and the hash function in such a way that each entry maps to a single hash bucket.

Results:

Benchmark                                      (optimized)  Mode  Cnt   Score   Error  Units
HpackStaticTableBenchmark.lookupHttp                 false  avgt   10  15.998 ± 1.646  ns/op
HpackStaticTableBenchmark.lookupHttp                  true  avgt   10  10.457 ± 0.274  ns/op
HpackStaticTableBenchmark.lookupHttps                false  avgt   10  20.942 ± 1.365  ns/op
HpackStaticTableBenchmark.lookupHttps                 true  avgt   10  10.618 ± 0.138  ns/op
HpackStaticTableBenchmark.lookupNameOnlyMatch        false  avgt   10  13.710 ± 0.273  ns/op
HpackStaticTableBenchmark.lookupNameOnlyMatch         true  avgt   10   3.156 ± 0.052  ns/op
HpackStaticTableBenchmark.lookupNoNameMatch          false  avgt   10   3.528 ± 0.047  ns/op
HpackStaticTableBenchmark.lookupNoNameMatch           true  avgt   10   3.145 ± 0.031  ns/op

Caveats:

This implementation couples HpackStaticTable implementation to the implementation of AsciiString.hashCode, relying on the values it returns for the static table headers to yield a perfect hash function. If AsciiString.hashCode implementation changes, HpackStaticTable implementation will also need to change. Moreover, if AsciiString.hashCode can return different values on different platforms (maybe due to endianness) or in general in different jvm instances, then it invalidates the approach taken here (or at least makes its implementation much more complex).

Co-authored-by: ahadadi <ahadadi@outbrain.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
4b7546e5deeddf7b1f07e489dab44ec384633d6a,"Fix native library packaging when cross-compile on m1 for intel (#12865) (#12866)

Motivation:

We did have a few build configuration problems when cross-compile which resulted in un-usable native libraries.

Modifications:

- Fix native lib naming
- Fix OSGI config

Result:

Correctly generate native libs when cross-compile on m1"
937bb67360a5b4ea0a6e11bbe24c86c76a4d6620,"Allow BouncyCastlePemReader to correctly extract private keys from multi object pem files (#12864)

Motivation:

There are currently two ways in which netty can load certificates and keys for an ssl context.

1) When bouncy castle libs are in the class path use the bouncy castle pem reader.
2) When bc is not present or fails it falls back to the internal netty pem reader.

When a cert and a key are deployed in the same pem file the bc pem reader will only attempt to load the first object in the file. If a certificate chain is present before the key, the class will return a null value for the key. The finally statement in the `getPrivateKey` method will close the input stream. The `SslContext` will try to fall back to the internal netty processor, however when `.reset()` is called on `BufferedInputStream` it'll fail because the stream is closed. This exception will cause the ssl context to fail to initialize properly.

Modifications:

To fix this issues, I've added a loop to iterate over the objects returned from the `PEMParser`. For each object in the file, we'll check to see if the class is of the right type, if we do find a key we'll return it. If the object is not of the right type, we'll continue to read objects from the file, if the `PEMParse` returns `null`, we've reached the end of the file and we'll return `null`. This diff does NOT attempt to fix the problem with the closure of the `BufferedInputStream`.

Result:

After this change we will be able to be read combined pem files, where certs and keys are bundled when BC is in the class path."
175144039e466b9a8304172e8dc83d447a699ac5,"make 'cache = null' to help PoolThreadCache finalizer. (#12881)

Motivation:
PoolByteBuf deallocate doesn't set `cache = null` when deallocate PoolByteBuf, so the PollThreadCache is always reachable by GC root. It is reachable until the cache is overridden at the next init.

Modifications:
Set cache to null when `deallocate()` method is called.

Result:
More timely deallocation of `PoolThreadCache` possible."
e81dc9098cb6bd0b76539f8476de0375024e6c21,[maven-release-plugin] prepare release netty-4.1.83.Final
433f8ef8d50b4a5d793d5e879fc91561b23d8abb,[maven-release-plugin] prepare for next development iteration
889f4fa9dc709b9845048006d4d2e7be6eb780e1,[maven-release-plugin] prepare release netty-4.1.84.Final
7c05db4ce6ba5c832a6ee778808f4e5e95814281,[maven-release-plugin] prepare for next development iteration
7971075bbe9f5509c8b20c0e702ec2affb37d76e,"Fix FlowControlHandler's autoreading breakage. (#12467)

 
Motivation:

FlowControlHandler breaks auto-reading (i.e. the channel does not auto-read even though its config has auto-read set to true). This happens when auto-read is turned on when the queue is not empty. The reason is that FlowControlHandler.read() does not pass the call to the ChannelHandlerContext if at least one message has been dequeued. This is a problem when FlowControlHandler.read() has been called as a result of auto-read having been turned on (DefaultChannelConfig.setAutoRead() calling read() in case of autoRead && !oldAutoRead).
 
Modifications:

Always pass the call to read() down the pipeline.
 
Result:

Auto-reading works, regardless of the handler's queue state in the moment it is turned on.
Fixes #12445"
0df408ec45c2b36a8c75789cd34ec137aa64e41c,"Optimize Hpack encoding for headers with many values (#12665)

Motivation:
The current implementation of the hpack dynamic table hashes the header name, but not the header value, in order to assign a bucket to a header. When a header name is associated with many values, all the (name, value) combinations hash into the same bucket. This degrades the performance of searching in this hash bucket.

Changes:
Use 2 tables, one keyed by header name and the other by header name + value.
the table keyed by name + value hashes both the name and the value in order to assign a bucket to the header.
Also, to lower the table's load factor, the default number of buckets was increased from 16 to 64.
This was done since the default table size (4096) can easily result in more than 64 headers populating the table, which gives a load factor > 4 for 16 buckets, which is much higher than e.g. Java's HashMap default load factor of 0.75.

Results:
Faster encoding for the case of headers with many values, no significant regression for the case of header names not mapping to multiple values.

Co-authored-by: ahadadi <ahadadi@outbrain.com>"
85b63a00a67ffb2e41d4eae3ba0672417a3cff99,"Improve the performance of expireTimeouts() in HashedWheelTimer (#12888)

Motivation:

The original logic relies on a variable `remainingRounds` and in order to maintain it, all timeouts in the bucket have to be traversed in a tick.
In fact, the complete traversing of the linked list is not necessary.

Modification:

My idea is to introduce a new variable `currRound` which represent the current round of the timer, and execRound for the execution round of each timeout. `currRound` is added by 1 when the tick starts a new round. Then for each timeout, we compare `currRound` and `execRound` to determine if the task should be executed, and break the loop once `currRound` < `execRound`.

Result:

By this means, we can reduce the number of traversed nodes, and the performance would be especially improved when the node number is large."
46fdd0e6144bee3f4781fb7ef3f18f25a7d6e307,"Fix slightly incorrect code in test (#12896)

Motivation:

While the test works as expected at the moment it is still not 100 % correct in terms of how the API is used as it would fail if the backing array has an offset != 0.

Modifications:

Use ByteBuf.getBytes(...)

Result:

More correct API usage"
ec9845ba9422239162d096931493400f9ea0365f,"Add docs for methods:io.netty.util.internal.ObjectPool.ObjectCreator#newObject and io.netty.util.Recycler#newObject (#12901)

Motivation:

When constructing `ObjectPool` or `Recycler`, we need to pass the `handle` param, if it is `null`,
then executing the `recycle` method will cause `NullPointerException`.

Code example:

```
import io.netty.util.Recycler;

public class TestDemo {

    Recycler.Handle handle;

    TestDemo(Recycler.Handle handle) {
        this.handle = handle;
    }

    public static void main(String[] args) {
        Recycler<TestDemo> recycler = new Recycler() {
            @Override
            protected Object newObject(Recycler.Handle handle) {
                return new TestDemo(null);
            }
        };
        TestDemo obj = recycler.get();
        obj.handle.recycle(obj); // Throws NullPointerException.
    }
}
```
For compatibility, there seems not much we can do now, so just added some docs. 

IMHO, maybe we can create an `Recyclable`  interface in the next major release(netty5?), then let all the recyclable object class implement it, this can help to do the `handle` check and also let people easily see whether it is a recyclable object or not, also we can add some API like: `recycle(...)` to the `Recyclable` interface.

Modification:

Add docs for the `handle` param, indicates it can not be null.

Result:

Add docs for the `handle` param, indicates it can not be null."
d3b789009f36feb41287c1e03bc26aa81a3349f4,"Pool Thread Cache support memory leak check. (#12897)

Motivation:

We shouldn't return the buffer to the ThreadCache if it was already freed to reduce the risk of memory leaks. 

Modifications:

* Just return the buffer to the arena if the cache was already freed.
* Log warning for possible leaks

Result:

Fixes #12749

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
fc28cbbc8839feacfa1cb7cfbda209d9ab8bad3b,"Optimize method 'io.netty.util.Recycler.DefaultHandle.availableToClaim()' (#12890)

Motivation:

The method `io.netty.util.Recycler.DefaultHandle.availableToClaim()` is in the scope of `ThreadLocal`, seems there is no race condition, IMHO we can assign value to `state` directly, instead of using `STATE_UPDATER`.

Modification:

Assign value directly to `state`.

Result:

Assign value directly to `state`.

Co-authored-by: laosijikaichele <laosijikaichele>"
10febb298f94863e3769408c3beb1f73bfc6aaff,"Method optimize:io.netty.util.Recycler#threadLocalSize (#12902)

Motivation:

If we call method `Recycler.threadLocalSize()` after `FastThreadLocal.remove()` / `FastThreadLocal.removeAll()` , then the `threadLocal` will init again and create a new `pooledHandles` queue, which is not necessary.

Modification:

Firstly check the `threadLocal`'s value, return 0 if it is `null`.

Result:

When we call method `Recycler.threadLocalSize()`, avoid initializing `threadLocal`  while `threadLocal`'s value is `null`.


Co-authored-by: laosijikaichele <laosijikaichele>"
321afcebf2394ad9e8b122c0b44245846d098f48,"Remove deprecated/unused goal definitions which will break maven 4 (#12911)

Motivation:

The netty BOM includes a deprecated element in the POM which will be removed in Maven 4. This causes the following exception when trying to import it:
```
Caused by: org.apache.maven.model.building.ModelBuildingException: 1 problem was encountered while building the effective model for /Users/gnodet/work/git/camel/parent/pom.xml
[FATAL] Unrecognised tag: 'goals' (position: START_TAG seen ...</version>\n        <goals>... @77:16)  @ io.netty:netty-bom:4.1.84.Final, /Users/gnodet/.m2/repository/io/netty/netty-bom/4.1.84.Final/netty-bom-4.1.84.Final.pom, line 77, column 16

	at org.apache.maven.model.building.DefaultModelProblemCollector.newModelBuildingException(DefaultModelProblemCollector.java:197)
	at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:772)
	at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:460)
	at org.apache.maven.model.building.DefaultModelBuilder.build(DefaultModelBuilder.java:439)
	at org.codehaus.mojo.flatten.ModelBuilderThreadSafetyWorkaround.build(ModelBuilderThreadSafetyWorkaround.java:130)
	at org.codehaus.mojo.flatten.FlattenMojo.createEffectivePom(FlattenMojo.java:902)
	... 19 common frames omitted
```
The `build > plugins > plugin > goals` element has been deprecated since a long time and it not actually used by recent maven versions.

Modification:

Remove the undesired xml element.

Result:

BOM can be parsed with maven 4."
956c2331fa9d2c208861171e5458b15f16279ddd,"Add entry for creating temporary files for BlockHound configuration (#12913)

Motivation:

We sometimes need to create temporary files which might trigger BlockHound.

Modifications:

Add extra config to allow these calls

Result:

Fixes https://github.com/netty/netty/issues/12908"
4573c91220006a909bd4fd15b12b72eecff4940b,"Fix bug in method io.netty.util.internal.InternalThreadLocalMap.size() (#12906)

Motivation:

1. Seems there is a bug in method `InternalThreadLocalMap.size()`.  The code example below prints `-1`, which is not correct:
```
import io.netty.util.concurrent.FastThreadLocal;
import io.netty.util.internal.InternalThreadLocalMap;

public class TestFtlSize {
    public static void main(String[] args) {
        InternalThreadLocalMap.get();
        System.out.println(FastThreadLocal.size()); // Prints -1.
    }
}
```
2. Change the calculation logic from looping the `indexedVariables` array to rely on `IdentityHashMap.size()`, which will improve performance.

Modification:

Change the calculation logic in method `InternalThreadLocalMap.size()`.

Result:

Prints `0` in above code example.

Co-authored-by: laosijikaichele <laosijikaichele>"
cbd324c178135a82f23749bc218c2c6ee3a9b140,"Cleanup read flags consistently when input shutdown (#12930)

Motivation:
Transports have different behaviors regarding when rdhup and read
flags are cleared if the input is detected as shutdown.

Modifications:
- Make the behavior consistent across epoll, kqueue, and nio"
95c0295dce46116cd7c570d61e01bd08655b3a54,"Optimize method:io.netty.util.Recycler.LocalPool.release(...) (#12900)

Motivation:

1. There is a chance that `handle.toAvailable()` throws an exception, then there is no need to use the reference of `pooledHandles`, so it's better to move `handles = pooledHandles` after `handle.toAvailable()`.
2. The `pooledHandles` may becomes `null` after `handle.toAvailable()`, so move it after  `handle.toAvailable()` will lower the chance of executing `handles.relaxedOffer(handle)` which may leads to a synchronized `offer(e)` method.

Modification:

Move `handles = pooledHandles` after `handle.toAvailable()`.

Result:

Improve the performance in above cases."
72ec704a1a828058b64bcebb965713f48586b8d6,"Allow Buffer reuse in ByteToMessageDecoder.Cumulator (#12922)

Motivation:

In systems where data is streamed it is common to see partially received
data. In these cases it can be advantageous to use a receive buffer
allocator that re-uses the same buffer as long as it has space left to
read more data. This ensures higher utilization of buffers and lowers
buffer allocation pressure. In netty up until 4.1.44 this strategy was
supported by the Cumulators in ByteToMessageDecoder (although possibly
not by design). Since the cumulation buffer starts out as being the
input buffer, and only (re)allocated if more space is needed, such a
strategy of re-using buffers mean that the Cumulator will be passed the
very same buffer as both input and cumulation. In earlier versions this
would just work by virtue of both readerIndex and writerIndex being
updated when copying data from the input buffer to the cumulation
buffer. Although it would waste buffer space unnecessarily when doing
so. In more recent versions when the cumulation was changed to avoid
extra bounds checking on the expected-to-be-discarded input buffer, the
readerIndex was not updated until after copying all data, which results
in the data from the buffer (which is both input and cumulation) being
duplicated (either in the same buffer or in a newly allocated larger
cumulation buffer).

Modification:

This is solved by letting the Cumulator implementations explicitly
handle the case when the input buffer and the cumulation buffer are the
same."
dd671fc3e04d037dbfb9c9b3bf5577b4ce90d2a1,"Don't unnecessarily reorder http headers (#12921)

Motivation:

The guard against multiple Content-Length headers would unconditionally
replace the Content-Length header(s), this means that the Content-Length
header would always be placed last. Changing the order of headers can
have significant impact on code that for example does cryptographic
signing of the headers and should be avoided if possible.

Modification:

Before re-assigning the Content-Length header, check if the current
header is good enough and avoid the (re-)assigning in that case.

Result:

If there is only a single Content-Length header, it will remain in the
same order among the headers."
d11fc0bcb72bf57bd1cfc2a6d4a61556656cc8b9,"Initialize InternalLogger as last field in InternalThreadLocalMap to fix possible NPE (#12942)

Motivation:

InternalLogger implementations might use FastThreadLocal and so InternalThradLocalMap. Because of this its important that we init the field that holds the InternalLogger as last.

Modifications:

Ensure field is init as last

Result:

Fix possible NPE, see https://github.com/netty/netty/issues/12931"
2c56de3c171afc43e80dcce1f6d2339e997d6305,"Remove calls to ThreadGroup.destroy and isDestroyed (#12954)

Motivation:
These methods have been deprecated for removal since Java 16.

Modification:
We can trivially remove these calls from the one test that use them, because they are not important for what's being tested.

Result:
Test pass on Java 19, where these methods no longer work."
0cb52daf1cb000db7aa0c2e5ae172d39a9d98bfd,"Avoid long stacktrace when netty-resolver-dns-native-macos native library is missing (#12950)

Motivation:
When `netty-resolver-dns-native-macos` java classes are on the classpath but the native library is missing,
the long stacktrace below is printed in the logs. In the log message it is already recommended that
a missing dependency may cause the issue, adding this dependency in most cases should fix the issue.
This change proposes changes in the information that is provided for this issue depending on the log level:
- When on DEBUG log level the recommendation for checking the dependency and the full stacktrace can be seen
- Otherwise the recommendation for checking the dependency and the cause message can be seen

```
[Test worker] ERROR i.n.r.d.DnsServerAddressStreamProviders - Unable to load io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider, fallback to system defaults. This may result in incorrect DNS resolutions on MacOS. Check whether you have a dependency on 'io.netty:netty-resolver-dns-native-macos'
java.lang.reflect.InvocationTargetException: null
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at io.netty.resolver.dns.DnsServerAddressStreamProviders.<clinit>(DnsServerAddressStreamProviders.java:64)
        ...
Caused by: java.lang.UnsatisfiedLinkError: failed to load the required native library
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.ensureAvailability(MacOSDnsServerAddressStreamProvider.java:110)
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.<init>(MacOSDnsServerAddressStreamProvider.java:120)
	...
Caused by: java.lang.UnsatisfiedLinkError: could not load a native library: netty_resolver_dns_native_macos_x86_64
	at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:239)
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.loadNativeLibrary(MacOSDnsServerAddressStreamProvider.java:92)
	at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.<clinit>(MacOSDnsServerAddressStreamProvider.java:77)
	...
	Suppressed: java.lang.UnsatisfiedLinkError: could not load a native library: netty_resolver_dns_native_macos
		at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:239)
		at io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider.loadNativeLibrary(MacOSDnsServerAddressStreamProvider.java:95)
		...
	Caused by: java.io.FileNotFoundException: META-INF/native/libnetty_resolver_dns_native_macos.jnilib
		at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:181)
		...
		Suppressed: java.lang.UnsatisfiedLinkError: no netty_resolver_dns_native_macos in java.library.path
			at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1860)
			at java.lang.Runtime.loadLibrary0(Runtime.java:871)
			at java.lang.System.loadLibrary(System.java:1122)
			at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:38)
			at io.netty.util.internal.NativeLibraryLoader.loadLibrary(NativeLibraryLoader.java:391)
			at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:161)
			...
			Suppressed: java.lang.UnsatisfiedLinkError: no netty_resolver_dns_native_macos in java.library.path
				at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1860)
				at java.lang.Runtime.loadLibrary0(Runtime.java:871)
				at java.lang.System.loadLibrary(System.java:1122)
				at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:38)
				...
Caused by: java.io.FileNotFoundException: META-INF/native/libnetty_resolver_dns_native_macos_x86_64.jnilib
	at io.netty.util.internal.NativeLibraryLoader.load(NativeLibraryLoader.java:181)
	...
	Suppressed: java.lang.UnsatisfiedLinkError: no netty_resolver_dns_native_macos_x86_64 in java.library.path
		at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1860)
		at java.lang.Runtime.loadLibrary0(Runtime.java:871)
		at java.lang.System.loadLibrary(System.java:1122)
		at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:38)
		...
		Suppressed: java.lang.UnsatisfiedLinkError: no netty_resolver_dns_native_macos_x86_64 in java.library.path
			at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1860)
			at java.lang.Runtime.loadLibrary0(Runtime.java:871)
			at java.lang.System.loadLibrary(System.java:1122)
			at io.netty.util.internal.NativeLibraryUtil.loadLibrary(NativeLibraryUtil.java:38)
			...
```

Modification:
- When `DnsServerAddressStreamProviders` tries to load `MacOSDnsServerAddressStreamProvider` but
the needed native library is not available:
  - If the log level is DEBUG log level,  a recommendation for checking the dependency and the full stacktrace can be seen
  - Otherwise, a recommendation for checking the dependency and only the cause message can be seen

Result:
The log file is less verbose when on log level different than DEBUG, but when on DEBUG level, the full information will be available"
a45feed4ef1ceb9f560446db18e9d21cd1a7d1df,"Update java versions (#12949)

Motivation:

We used old java versions when compiling on the CI.

Modifications:

- Update all versions to latest release
- Replace Java18 with Java19 usage as its the latest LTS
- Fix a few cases where variadic methods and generic target typing were interacting poorly.

Result:

Use latest java versions on the CI

Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
fe0b5ce16c4508387f999e530a85f2d968e90a3c,"Use the recommended directory layout for native-image metadata. Simplify automatic handler metadata generator usage. (#12951)

Motivation:

The recommended directory layout for native-image metadata is `META-INF/native-image/<groupId>/<artifactId>/...`. Recent Native Build Tools versions will print a warning if a `native-image.properties` file is detected and it's path doesn't adhere to the above layout.

Modification:

This PR moves all native-image related metadata so that it conforms to the above layout.
This PR also ensures the above layout is used for the automatically generated handler metadata. The new layout of this metadata is `META-INF/native-image/<groupId>/<artifactId>/automatic/handlers`.

Result:

Fixes #12934"
cfcc5144578d3f998d353cc3c3b448fc56333e0d,"Avoid ignoring interrupts in SocketStartTlsTest and SocketSslEchoTest (#12946)

Motivation:
JUnit relies on interrupts to communicate test timeouts.
When we silently swallow interrupts, we break this mechanism.

Modification:
Make the loops in SocketStartTlsTest and SocketSslEchoTest throw their interrupts instead of silently swallowing them.

Result:
The tests now responds to timeouts."
e1437fb468c5647f7f02fcd49b405af1259d8716,"Avoid ignoring interrupts in testsuite (#12958)

Motivation:
JUnit relies on interrupts to communicate test timeouts.
When we silently swallow interrupts, we break this mechanism.

Modification:
Make the loops in the testsuite throw their interrupts instead of silently swallowing them.

Result:
The tests now responds to timeouts."
de8a7efd054d1eedc833303b1c2c8c76e519d5e1,"Implement Early hints response status, do not poll the encoding with HTTP 1xx codes (#12918)


Motivation:

Http 1xx codes should expect another response next

Modifications:

Replace code == 100 with code == 1xx

Result:

Fixes https://github.com/netty/netty/issues/12904"
a0bb7b4c7831d2a855206f9dc45367675ac60a7c,"fix typos in requireNonNull function (#12961)

Motivation:
fix typos to get correct error message

Modification:

fix typos

Result:

clean up"
a4c37bc06d16ba2267a3f8cac151f29bd9118aad,"Close EmbeddedChannel and release all buffers once test completes (#12962)

Motivation:

de8a7efd054d1eedc833303b1c2c8c76e519d5e1 added some new tests but missed to close the EmbeddedChannel and release the still buffered data once done. This results in a leak.

Modifications:

Call finishAndReleaseAll() once test completes

Result:

No more leaks"
ecf489fb75d25d0fd35992d53f2e9bc6d9861e47,"Subclasses of FastThreadLocalThread can selectively permit blocking calls (#12978)

Motivation:
People sometimes make use of FastThreadLocalThreads outside of event-loops, e.g. for task-offload, or to make ues of Netty's thread-locals.
Our Blockhound integration is currently preventing these threads from performing blocking calls, which is overly restrictive.

Modification:
Add an escape hatch for subclasses of FastThreadLocalThread to permit blocking calls.

Result:
It is now possible to use FastThreadLocalThreads outside of event-loops, make use of blocking calls, and not be flagged by Blockhound.

Fixes #12959"
7127e6074c2f4b965305738d7756d196729b493e,"Move validation of connection headers in HTTP/2 back to `HpackDecoder` (#12975)


Motivation:

#12755 added validation for presence of connection-related headers while
`HpackDecoder` decodes the incoming frame. Then #12760 moved this
validation from `HpackDecoder` to `DefaultHttp2Headers`. As the result,
existing use-case that could use `DefaultHttp2Headers` for HTTP/2 and
HTTP/1.X broke when users add  any of the mentioned prohibited headers.
The HTTP/1.X to HTTP/2 translation logic usually has sanitization
process that removes connection-related headers. It's enough to run this
validation only for incoming messages and we should preserve backward
compatibility for 4.1.

Modifications:

- Move `isConnectionHeader` and `te` validations from `DefaultHttp2Headers`
back to `HpackDecoder`;
- Add tests to verify `HpackDecoder` fails incoming headers as expected;
- Add tests to verify mentioned headers can be added to
`DefaultHttp2Headers`;

Result:

Backward compatibility is preserved, while validation for
connection-related headers is done in `HpackDecoder`."
75aac7c87d82fbc80b66e99ad5c8273e43aa56cd,"WebSocket frame encoding: avoid redundant allocations on frame masking (#12969)

Motivation:

When masking is enabled, redundant intermediate bytebuffer + array is created for each websocket message.

Modifications:

Remove intermediate bytebuffer used to hold frame mask, use int mask directly.

Result:

No redundant allocations on frame masking"
8a5b08dad5855c5ab202e9c51710b48509cc56fe,[maven-release-plugin] prepare release netty-4.1.85.Final
bb86eb096f3336cdb38c23906095033ea0205014,[maven-release-plugin] prepare for next development iteration
ae9b82388e49cdc904e0ef4e81439486105d9d30,"Fix generating the `Origin` header value for websocket handshake request (#12941)

Motivation:

We have the old erroneous behavior of generating the `Origin| Sec-WebSocket-Origin` for client websocket handshake request (https://github.com/netty/netty/issues/9673). In Netty5 this fixed and auto-generation has been deleted at all, only if the client passed the `Origin` header via custom headers. The same we can do for Netty4 but it could potentially break some clients (unlikely), or introduce an additional parameter to disable or enable this behavior.

Modification:

Introduce new `generateOriginHeader` parameter in client config and generate the `Origin|Sec-WebSocket-Origin` header value only if it enabled. Add additional check for webSocketURI if it contains host or passed through `customHeaders` to prevent NPE in `newHandshakeRequest()`.

Result:

Fixes https://github.com/netty/netty/issues/9673 https://github.com/netty/netty/issues/12933 


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
76296425f4ee199de6dc3e3e03c40173cc5aa7de,"Try to fix test timeout of CloseNotifyTest (#12987)

Motivation:
We sometimes observe the CloseNotifyTest fail with stack traces like this:

```
[ERROR] eventsOrder{SslProvider, String}[1]  Time elapsed: 0.01 s  <<< ERROR!
java.util.concurrent.TimeoutException: eventsOrder(io.netty5.handler.ssl.SslProvider, java.lang.String) timed out after 5000 milliseconds
	at org.junit.jupiter.engine.extension.TimeoutExceptionFactory.create(TimeoutExceptionFactory.java:29)
	at org.junit.jupiter.engine.extension.SameThreadTimeoutInvocation.proceed(SameThreadTimeoutInvocation.java:58)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
```

Because the attached stack trace is from the JUnit 5 `TimeoutExceptionFactory`, we can actually tell that the test timed out before the preemptible test thread even started running!
This means the CI instance is very overloaded and needs much more time to start threads.
It is not unusual for very busy virtual machines in the cloud to take several seconds to start a thread.

Modification:
Increase the test timeout from 5 seconds to 30.

Result:
This should reduce the likelyhood of the test timing out on busy CI machines; at least before they get to even begin running the test thread."
27bfdfb1cd99b0924dea80592ae6f52134be58a3,"Optimize methods: FastThreadLocal.remove() and FastThreadLocal.initialize(...) (#12910)

Motivation:
1. When call the method `FastThreadLocal.remove()`,  if the `FastThreadLocal` instance has not been `set/initialized` or has already been `removed`, then there is no need to call the `removeFromVariablesToRemove(...)` method, which will trigger a `hash-find` and hurt performance. 
Code example:
```
import io.netty.util.concurrent.FastThreadLocal;

public class TestFtlRemove {

    public static void main(String[] args) {
        
        // Assume we already created some FastThreadLocals:
        for (int i = 1 ; i<= 99; i++) {
            new FastThreadLocal<Integer>().set(1);
        }

        // then come to fst_100.
        FastThreadLocal<Integer> fst_100 = new FastThreadLocal<Integer>();

        // Now we execute fst_100.remove():
        fst_100.remove();
        // fst_100.remove() will trigger:
        // FastThreadLocal.removeFromVariablesToRemove(...) --> IdentityHashMap.remove(key) method,
        // which need to do hash-find to locate the key to remove,
        // this is not necessary for fst_100 and hurt performance.

    }
}
```
2. For method `FastThreadLocal.initialize(...)`, the return value of `initialValue()` should not be `InternalThreadLocalMap.UNSET`, which means the following code should not be allowed and need to rise an `Exception` when call `get()`:
```
FastThreadLocal<Object> fst = new FastThreadLocal<Object>(){
    @Override
    protected Object initialValue() throws Exception {
        return InternalThreadLocalMap.UNSET; // This should not be allowed.
    }
};
fst.get(); // Need to rise an Exception.
```

Modification:

1. Add checkpoint in method `removeFromVariablesToRemove(...)`, avoid call `FastThreadLocal.removeFromVariablesToRemove(...)` when the `FastThreadLocal` instance has not been `set/initialized` or has already been `removed`.
2. Add checkpoint in method `initialize(...)`, and rise an `Exception` if the check not passed.

Result:
Resolve problems described above.

Co-authored-by: laosijikaichele <laosijikaichele>"
4211ed674a6c0eab675e8d07c3429bd5a553f5cd,"Deprecate ObjectEncoder/ObjectDecoder (#12990)

Motivation:
Serialization has proven itself to be a security liability, and one that cannot easily be fixed: new gadgets are created and found regularly, as are filter-bypasses.

Modification:
Deprecate all of `io.netty.handler.codec.serialization` to discourage its use.

Result:
Use of object serialization is now discouraged.

Thank you to Oriya Yavnieli of the JFrog Security Research team for bringing this to our attention."
c52e5a1b9cd6c2d84fce7003c4dda1bad31c678f,"Don't write zeros to newly allocated array (#12992)

Motivation:
Java guarantees that primitive int arrays are initialized to zero, so writing zeros to a newly allocated array is pointless.

Modification:
Remove loop that writes zeros to a newly allocated array in PoolSubpage.

Result:
Less wasted work."
55e7f43d798ddfba668293c909b2d70f1ab40874,"Fix data race bug in UnorderedThreadPoolEventExecutorTest (#12986)

Motivation:
This test could sometimes (about 1 in 100.000) fail because addListener and promise completion could race to notify listeners, causing an extra task to be observed by the queue inspection, after the CountDownLatch had opened.

Modification:
Use an Exchanger to delay the completion of the first task until after we've attached a listener to the promise of the second task.
This way, the completion of the second task will no longer race with `addListener`.
This works because the UnorderedThreadPoolEventExecutor used by the test is single-threaded.

Result:
The UnorderedThreadPoolEventExecutorTest is no longer flaky."
ee9bb63aa5382bf9930eb0df4b690286173f126a,"HPACK dynamic table size update must happen at the beginning of the h… (#12988)


Motivation:

HpackDecoder accepts dynamic table size updates at any stage of a header block. Such modification should always happen before the table is modified as per RFC 7541.

Modifications:

Check the header block first for dynamic table size updates in a separate method. Then reject any table size update when processing unpacking the rest of the block. Dynamic table size update could have been done with the current switch/case but it requires to keep track of the modifications which is not hard but introduces complexity in the loop (a simple boolean that must be switched for any modification but the table size update). Instead a table size update is achieved first in a simpler loop and then any table size update is rejected.

Result:

Fixes #12981


Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
1ce52aa062d169410b1ab90aeda62a5764c672e2,"Use Stream Compression instead of Single-shot Compression (#12924)

Motivation:
As per the current implementation, `BrotliEncoder` compress a `ByteBuf` in a single operation. This approach is good when we have small data set to work with. However, In the case of stream, there are multiple `ByteBuf`, and compressing each `ByteBuf` using the Single-shot method is the wrong approach.

Modification:
Use streaming compression.

Result:
Fixes #12909."
09ac33766f6c30d445dcdfb4285f589aedf5d7fe,"Add OCSP validation for Server certificate (#12898)

Motivation:
Validating server certificate status is an integral part of building a secure application. To make this process fast and efficient, we should use OCSP. However, performing OCSP operations is complex. This PR aims to simplify that process by adding a handler in the pipeline.

```java
@Override
protected void initChannel(SocketChannel ch) {
    ChannelPipeline pipeline = ch.pipeline();
    pipeline.addLast(sslContext.newHandler(ch.alloc(), ""netty.io"", 443));
    pipeline.addLast(new OcspServerCertificateValidator(false)); // Adding OCSP validator handler
    pipeline.addLast(new HttpClientCodec());
    pipeline.addLast(new HttpObjectAggregator(1024));
    pipeline.addLast(new MyHandler());
}
```

Modification:
Create a new module `Netty/Handler/Ssl/Ocsp` which implements OCSP validation using HTTP/1.1.

Result:
Easier validation of server certificate status"
e9e8ee5087f30d63426cd7e066379cbd7b3f3832,"Fix parent version for handler-ssl-ocsp

Motivation:

09ac33766f6c30d445dcdfb4285f589aedf5d7fe introduced handler-ssl-ocsp but used the wrong version for the parent

Modifications:

Fix version

Result:

Project builds again"
6e935e073fe877a73ef55d5b2df0ba913d52de47,"Make Handler-Ssl-Ocsp releasable (#13004)

Motivation:
We should make Handler-Ssl-Ocsp releasable.

Modification:
Added handler-ssl-ocsp into `bom` and `all` modules.

Result:
Fixes #13003 ."
e8df52e442629214e0355528c00e873e213f0139,"WebSocket frame decoding: replace byte array[4] frame mask with int. (#12989)


Motivation:

Make implementation consistent with recent changes on WebSocket08FrameEncoder https://github.com/netty/netty/pull/12969.

Modifications:

WebSocket08FrameDecoder: replace frame mask byte array[4] with int.

Result:

Simpler implementation consistent with WebSocket08FrameEncoder."
798ca522e41422c2defa0412d182e4ef038b6f85,"Add `FUNDING.yml` (#13012)

We now have a registered non-profit entity in South Korea. We could start to accept donation from the community to cover the cost related with running the projects under @netty GitHub organization, such as (but not limited to):

- Build and dev infra, SaaS subscriptions and equipment
- Hosting and attending the community events
- Paying the core developers for their work; and
- Establishing a non-profit tax-deductible foundation.

We're currently a non-profit entity located in South Korea (this is where @trustin lives). Please note that the donation is not tax-deductible at the moment."
d24defcdd901a437fd482d9c86cc181f6f93c01b,"WebSocketClientHandshaker: add public accessors for parameters (#13009)

Motivation:

Websocket client & server handshakers may be extended with custom frame encoder / decoder,
however client handshaker parameters are private so cant be accessed by custom frame encoder / decoder.

Modifications:

WebSocketClientHandshaker: add public accessors for parameters.

Result:

Custom frame encoder / decoder may be provided with websocket client handshaker parameters"
3bff0bee692b5bcb67f8fe5f900d2e899a7fa1f8,"Replace LinkedList with ArrayList (#13016)

Motivation:

ArrayList is more efficient than LinkedList in the space cost.
ArrayList is almost as efficient as LinkedList in the time cost of tail insertion, which are the practical use cases of the two lists I modified.

Modification:

Replace LinkedList with ArrayList.

Result:

Less space cost.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
b64a6e22b2f410d3092f4a2e9f8edcf8c51262b2,"Revert#12888 for potential scheduling problems (#13021)

Motivation:

The code I commited in #12888 may cause unexpected task scheduling problems.


Modification:

Revert this commit.


Result:

Fixes #13018 ."
91527ff889384b436a21de4c2293ff3e915b0781,"Correctly handle unresolvable InetSocketAddress when using DatagramChannel (#13017)


Motivation:

We should consistent handle the case when a DatagramPacket was send to an unresolvable InetSocketAddress.

Modifications:

Consistently fail in the case of unresolvable InetSocketAddress

Result:

Fixes https://github.com/netty/netty/issues/13015"
1baf9ef2f1f9da2b6965fb76e0562f344f895d6e,"Enable SocketHalfClosedTest for epoll (#13025)


Motivation:
These tests were not being run for epoll because the classes did not have the Test suffix.
We also aren't regularly running these tests for kqueue because we don't have a MacOS CI build.
It turns out that all transports now behave consistently with regards to read-completes after input shutdown, so the tests don't need to change their assertions for epoll/kqueue vs. NIO.

Modification:
Enable the SocketHalfClosedTest for epoll, both edge and level triggered.
Remove test parameter adjustments for epoll and kqueue.

Result:
SocketHalfClosedTest tests now run, and pass, for epoll."
22d31519bc3fe34973a59b0fb43bbd580906388f,"Save promises type pollution due to interface type checks (#12980)


Motivation:

DefaultPromise performs interfaces type checks to distinguish single/multi listeners presence, hitting https://bugs.openjdk.org/browse/JDK-8180450

Modifications:

Using separate listener fields that won't require type checks to evaluate listeners arity

Result:
No type pollution for user-defined listeners types.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
7cc84285ea6f90f6af62fa465d1aafbbc497e889,"fixing some naming and typos that caused wrong value to be updated (#13031)

Motivation:

I accidentally find some typos in the transport-udt module, and two of them actually can affect the correctness of execution.

Modification:

Only changed some variable namings.
Variables in some setters in DefaultUdtChannelConfig.java and DefaultUdtServerChannelConfig.java are named incorrectly.

Result:

Now, DefaultUdtChannelConfig won't set SystemReceiveBufferSize and SystemSendBufferSize incorrectly."
cd91cf3c99123bd1e53fd6a1de0e3d1922f05bb2,"Merge pull request from GHSA-fx2c-96vj-985v

Motivation:

A StackOverflowError can be raised when parsing a malformed crafted message due to an
infinite recursion. We should bail out early

Modifications:

- Add a limit to the maximum nesting of TLV.
- Add unit test

Result:

Not possible anymore to trigger a StackOverflowError with a special crafted packet"
fe18adff1c2b333acb135ab779a3b9ba3295a1c4,"Merge pull request from GHSA-hh82-3pmq-7frp

Motivation:
The setObject methods that took arrays and iterators as arguments provided a way to bypass value validation.

Modification:
Add the missing value validation checks.

Result:
It is no longer possibel to bypass value validation in DefaultHeaders based implementations, including DefaultHttpHeaders."
cde0e2d0508013c57612f7241a6660010fa7116c,[maven-release-plugin] prepare release netty-4.1.86.Final
5c4209bb06909bab146cdd242cf249fe3dee6ddf,[maven-release-plugin] prepare for next development iteration
e9915934c02873c1ec120df85be733942d14bf11,"Remove invalid annotation usage which did break javadocs generation (#13049)

Motivation:

The `@Deprecated` annotation is not valid in a package-info.java file and so broke our javadoc generation during the release process

Modifications:

Remove annotation

Result:

Javadoc generation works again during release process"
f8a7316895a274cd0930aa7041e31a2280bf7783,"Fix EmbeddedChannel javadocs (#13046)

Motivation:

Some javadocs for the constructor of EmbeddedChannel were incorrect

Modifications:

Fix docs and some spelling

Result:

Correct docs"
33ff7bc660208560b383d75e1198b2547c4bb58b,"Remove duplicated entry in pom.xml (#13057)

Motivation:

We had some duplicated entry that did cause warnings.

Modifications:

Remove duplicated entry

Result:

No more warnings"
4d87b0b1a1cdc480d80774e3e9aa73c2d572f099,"Skip modules which are not part of the API when generating javadocs (#13056)

Motivation:

We should skip the modules which are not part of the public API when generating javadocs

Modifications:

Add configuration for skipping modules

Result:

Cleanup javadocs"
dcf123765f00b1a20b40992e396d55162f9a2e0c,"Extend DNS address supplier interface to provide feedback (#12991)

Motivation:

This change allows the start of building out a resolver that is more performant. Most standalone DNS resolvers have some mechanism to find and prioritize nameservers that are giving the best service (either lower error rate or faster response times)

E.g. https://unbound.docs.nlnetlabs.nl/en/latest/reference/history/info-timeout-server-selection.html

Modification:

Added a new interface that extends DnsServerAddressStream to provide a mechanism for DnsResolverContext to provide feedback back to the class that is providing DNS servers in the form of InetSocketAddress

Result:

The DnsServerAddressStream is now able to know the response times of queries for each InetSocketAddress that it returned, or that the InetSocketAddress had a failure when used

Co-authored-by: Ryan Watson <rfwatson@apple.com>"
350bd0f6c3e61cdc327d54bcc8fe765203d4b59f,"Cache NetworkInterfaces after retrieval to speedup initialization time (#13060)

Motivation:

We can justt cache the NetworkInterfaces once and so cut down on initialization time

Modifications:

- Cache once and expose via NetUtil
- Update code to use the new static method.

Result:

Fixes https://github.com/netty/netty/issues/13054"
0a6890780df4708e7280168a603135bd8389d8d8,"Make test more robust by binding the ServerSocket first (#13061)

Motivation:

Sometimes we saw failures due port already in use. Let's ensure we can bind to it before bootstrap the DnsServer

Modifications:

First bind the TCP socket

Result:

Hopefully less flaky test"
0bcc6c8a5d41535fe0f9f428dd53235b53c8d4e2,"Support handshake timeout in SniHandler. (#13041)


Motivation: 
The SslHandler has a configurable timeout that is triggered when the handshake is not completed within that limit. The SniHandler should also have a similar timeout, such timeout would be fired when the the client has not sent enough data to trigger the SNI completion and propagated to the SslHandler it creates.

Modifications:
Added a handshake timeout in the SniHandler that creates a timer task to fire a failed sni completion event, as well as setting the handshake timeout on the SslHandler when it creates it.

Result:
Consequently, SniHandler supports handshake timeouts.

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
d9d8722ff2a843595fbdf78c665821fe07b48aed,"Explicit disable TLSv1.3 in the OpenSSL options if not supported (#13066)

Motivation:

If TLSv1.3 is not supported we should set SSL_OP_NO_TLSv1_3 explicit to ensure we never ""advertise"" it.

Modifications:

Set SSL_OP_NO_TLSv1_3 if TLSv1.3 is not supported

Result:

Fixes https://github.com/netty/netty/issues/12968"
8da8f2709ed001882184d2367580739c0cc89ad4,"Fix caching of NetworkInterfaces when using Graal (#13067)

Motivation:

When using Graal we need to take special care for the cached NetworkInterfaces. This was missed while doing changes in 350bd0f6c3e61cdc327d54bcc8fe765203d4b59f

Modifications:

Add code to handle Graal

Result:

Build pass again when using Graal"
bc49c4b1464c8345bf87b3053b3adefa64f91530,"Allow to override fallback nameservers (#13065)


Motivation:

Sometimes netty might not be able to detect the default nameserver to use. In this case we did fallback to use the public google nameservers. We should allows people to specify the fallback nameserver by a property to ensure they have full-control over which informations are sent over the network.

Modifications:

Add system property that can be used to override the fallback nameservers

Result:

More control to the user"
d6c2c2391a04030070c8cc2961bc97adf943d403,"Correct variable names (#13087)

Motivation:
The `FileChannel` variable should be called `fileChannel` and `File` should be called `file` so it's easier to debug when `NullPointerException` is thrown by `ObjectUtils`.

Modification:
Updated variable names

Result:
Correct variable names"
2324566ba727c27f6ef80623b733a82ff77b15a9,"Upgrade Brotli4j to 1.9.0 (#13077)

Motivation:
Brotli4j 1.9.0 is released and we should upgrade to it.

Modification:
Upgraded Brotli4j from 1.8.0 to 1.9.0.

Result:
Latest version of Brotli4j"
f027fa2df77af7719aa9686659633ee0fc73ebf9,"Upgrade to latest version of JMH (#13080)

Motivation:

upgrade to latest version of JMH

JMH 1.36
https://mail.openjdk.org/pipermail/jmh-dev/2022-November/003553.html

Modification:

updated the jmh.version property


Result:

New JMH version 👍"
fdfbb0441d49f16068903fa85b623790cce889ff,"Remove Redundant bitwise operations (#13094)

Motivation:

inverseMask is redundant since we will rightShift it with exact same amount

Modifications:

removed redundant operations

Result:

clean up"
e530cd610d17cdaaca7f3adf5e7c8d224571e89c,"Return correct value from SSLSession.getPacketSize() when using native SSL implementation (#13095)


Motivation:

We didnt return the maximum size of SSL packet and tried to calculate it. This didnt work as SSL_max_seal_overhead(...) can only be used to calculate the maximum overhead for when encrypting ourself (and not the remote peer).
Because of this we sometimes returned a smaller number then what is possible. This had the affect that when users did use getPacketSize() to size the ByteBuffer we could end up in a situation that would never produce a bug enough ByteBuffer and so never finish the handshake.

This issue only accoured when users use the SSLEngine directly. When using our SslHandler we were not affected by this as we use a different approach there.

Modifications:

- Upgrade netty-tcnative to be able to reuse the the defined constant
- Add unit test that did loop forever before this change

Result:

Fixes https://github.com/netty/netty/issues/13073"
d03f3ed0157e857ebb0bb28d0ddb5439dc181b61,"Add recvmmsg & sendmmsg syscall number for loongarch64 (#13097)

Motivation:
Call correct recvmmsg and sendmmsg on loongarch64.

Modification:
Add #elif declarations to ensure we pick the correct syscall number for loongarch64.

Result:
Pick the correct syscall number depending on the system architecture."
e19860a3f626b07bfbc9dadb682072c685bf0688,"Create thread dumps for all running JVMs when the build gets cancelled (#13100)

Motivation:

When a GitHub Actions build job gets cancelled because of a timeout, it would be useful to have a thread dump for all running JVM processes so that it would be able to find the reason why the build job timed out.

Modification:

Add an inline composite action that uses bash, jps and jcmd to create thread dumps for all running Java processes. 
This is referenced in ci-pr.yml workflow's verify-pr job and gets run when the build job is cancelled.
This is an example of a thread dump that gets created: https://github.com/lhotari/netty/pull/1/checks#step:7:28 .

Result:

Easier to debug builds that did timeout."
05153ac9ff98f45b5dafe679ce8e2cce56803615,"Bump up os-maven-plugin to 1.7.1 (#13107)

Motivation:

os-maven-plugin 1.7.0 does not recognize LoongArch information, os-maven-plugin supports LoongArch since 1.7.1

Modification:

Update pom.xml and testsuite-shading/pom.xml

Result:

LoongArch cpu information can be correctly identified"
ba78f17b2b2fffd33f09c06f0af1c199e5a00d3a,"Fix NPE caused by old bundle plugin version (#13106)

Motivation:

We used some very old bundle plugin version in our commons module. This caused a NPE when using a more recent JDK.

Modifications:

- Update the plugin version in general
- Remove extra version declaration in common pom.xml

Result:

No more NPE during build"
b9a2e961a6ff2887ab6057d1eaf0d668d0e43ddf,"Use defined osmaven version everywhere (#13111)

Motivation:

We already have a property defined for os-maven-plugin, let's use it to make it easier to keep versions in sync.

Modifications:

Use property

Result:

Cleanup"
0097c2b72521c422d42bf8c45273db05a7ff068c,"Upgrade to latest netty-tcnative release which doesnt link libcrypt (#13112)

Motivation:

The latest netty-tcnative release doesnt link libcrypt which makes it compatible with newer linux distros without the need to install extra packages.

Modifications:

Upgrade to latest netty-tcnative release

Result:

Less manual steps needed to use netty-tcnative on newer linux distros"
53fa91f6f644f24bcd085fbeb64bfec01e8fb61e,[maven-release-plugin] prepare release netty-4.1.87.Final
b3b48b69a841c424131683069a89f988f457da95,[maven-release-plugin] prepare for next development iteration
1bb171fc2a9138a3764af6619c0ca900fe3bbb1b,"Replace 'size > 0' check with '!empty' (#13121)

Motivation:
We manually fetch the collection size and then check if the size is greater than zero or not to see if it's non-empty.

Modification:
We can use the inverted `Collection#isEmpty` method to do the exact same thing in a much clean way.

Result:
Cleaner code"
c769fd8c2c2865d5738c225a00c72535a996969d,"Modify changed CloseWebSocketFrame#statusCode() to change the fetch code to unsigned (#13114)

Motivation:

According to the websocket protocol description, change the get code method in the CloseWebSocketFrame to unsigned.

Modification:

Modify changed CloseWebSocketFrame#statusCode() to change the fetch code to unsigned

Result:

Fixes #13113. 

Co-authored-by: jinying.zhang <jinying.zhang@okg.com>"
891506d04b9451130d7ed0262e1d313a36388004,"Fix leaks in CloseWebSocketFrameTest (#13122)

Motivation:

We should release the CloseWebSocketFrame to prevent leaks

Modifications:

Add release() call

Result:

No more leaks in CloseWebSocketFrameTest"
df1657d0540d0b14ee39d9c10423484c72782079,"Update hawtjni plugin to 1.18 (#13128)

Motivation:
Older MSVC versions are not available anymore but the plugin version only supported very old Visual Studio versions.

Modification:

Update hawtjni plugin to 1.18

Result:

Support for newer MSVC verisions added.
Motivation:
Older MSVC versions are not available anymore but the plugin version only supported very old Visual Studio versions.

Modification:

Update hawtjni plugin to 1.18

Result:

Support for newer MSVC verisions added."
adeda8342c5098e7228615496cc843241aa729a1,"Replace assertTrue with assertThat#instanceOf (#13130)

Motivation:
We use `assertTrue(obj instanceOf Cat)` for asserting object instances. While this is correct and works, it becomes impossible to debug when the assertion fails because we have no clue at all which instance type made the assertion fail.

Modification:
To address this, we should use `assertThat#instanceOf` which will do the exact same thing but in a much cleaner way. Also, it will give us more information when it fails like why the assertion of instance check failed and what exactly we got in place of the expected one.

Result:
Cleaner and easier to debug test case failure"
a790a99b228333684fbae0a41dd566d9ec282b8d,"Use asserThat#instanceOf and assertThat#isNotInstanceOf (#13133)

Motivation:
We use `assertTrue(obj instanceOf Cat)` for asserting object instances. While this is correct and works, it becomes impossible to debug when the assertion fails because we have no clue at all which instance type made the assertion fail.

Modification:
To address this, we should use `assertThat#instanceOf` which will do the exact same thing but in a much cleaner way. Also, it will give us more information when it fails like why the assertion of instance check failed and what exactly we got in place of the expected one.

Result:
Cleaner and easier to debug test case failure

This PR migrates the entire buffer module completely to the new API.
Previous PR: #13130"
c0e7141d6fccb5848d80effc241cd693a0fc4f6d,"Use assertThat#instanceOf and assertThat#isNotInstanceOf (#13134)

Motivation:
We use `assertTrue(obj instanceOf Cat)` for asserting object instances. While this is correct and works, it becomes impossible to debug when the assertion fails because we have no clue at all which instance type made the assertion fail.

Modification:
To address this, we should use `assertThat#instanceOf` which will do the exact same thing but in a much cleaner way. Also, it will give us more information when it fails like why the assertion of instance check failed and what exactly we got in place of the expected one.

Result:
Cleaner and easier to debug test case failure

This PR migrates the entire Codec-HAProxy module completely to the new API."
10a94909677cc421a86f2338ab3bccd1842329b7,"Use `assertThat#instanceOf` and `assertThat#isNotInstanceOf` [Codec-HTTP] (#13135)

Motivation:
We use `assertTrue(obj instanceOf Cat)` for asserting object instances. While this is correct and works, it becomes impossible to debug when the assertion fails because we have no clue at all which instance type made the assertion fail.

Modification:
To address this, we should use `assertThat#instanceOf` which will do the exact same thing but in a much cleaner way. Also, it will give us more information when it fails like why the assertion of instance check failed and what exactly we got in place of the expected one.

Result:
Cleaner and easier to debug test case failure

This PR migrates the entire Codec-HTTP module completely to the new API."
dcfcae685dafd50e5b6ab8f9a681862c9455a6bb,"Optimize methiods in PoolChunk:usage(),freeBytes(),toString() (#13053)

Motivation:

When we call `PoolChunk`'s methods :`usage(),freeBytes(),toString()`:
1. If `poolChunk.unpooled == true`, then there is no need to acquire the lock `arena.lock()`.
2. The `arena.lock()` can be replaced by `runsAvailLock.lock()`, which will narrow the lock scope and reduce the lock contention.

Modification:

Optimize methods in PoolChunk:usage(),freeBytes(),toString().

Result:

Optimize methods in PoolChunk:usage(),freeBytes(),toString().

Co-authored-by: laosijikaichele <laosijikaichele>"
b6ba11a21f8f6add6aa862643a179436415b2d14,"Optimize method: PoolChunk#allocateRun(int) (#13136)

Motivation:

when removeAvailRun(queue, handle) is called within the allocateRun(int), the handle is already removed from queue. So, no need to iterate through entire queue to remove the handle.

Modification:

Moved the logic for removing the handle from the queue to a more appropriate location.

Result:

Removed unnecessary iteration."
9baf7ac8d219afe6aa896cc5083112fcac6f5207,"Check if CommandLineTools are installed before trying to execute install_name_tool (#13132)

Motivation:

We should check if CommandLineTools are installed before trying to execute install_name_tool as otherwise it might open a prompt to ask users to install it which is unexpected.

Modifications:

Check if the folder /Library/Developer/CommandLineTools exists before trying to execute install_name_tool

Result:

Better user experience. Related to https://github.com/netty/netty/issues/13125"
6ab749f1aed7e53a0338816992f013c3a8ef6512,"Update used java versions on CI (#13138)

Motivation:
Let's ensure we use the latest JDK releases on the CI

Modifications:

Update all used JDK versions to the latest release

Result:

Test with latest releases"
f3a854546d9fad4a3cae0fe751271af553b006c9,"add brotli4j aarch64 dependencies (#13143)

Motivation:

improve development experience on MacOS M1 laptops

Modification:

add brotli4j aarch64 dependencies to pom.xml files

Result:

BrotliEncoderTest passes on MacOS M1 laptop."
9541bc17e0c637ec77ccc3d6b67a19a0d024f925,"Allow to adjust the GlobalEventExecutor quietPeriod via a system property (#13141)


Motivation:

The GlobalEventExecutor will shutdown its ""internal thread"" after the used quietPeriod if there is no more work to do. This quietPeriod was hardcoded to 1 second which might not be long enough for some applications and so will cause a lot of threads be started and destroyed.

Modifications:

Add io.netty.globalEventExecutor.quietPeriodSeconds property which allows the user to configure the quietPeriod. Default is still 1 second

Result:

Be able to influence the quietPeriod of GlobalEventExecutor via a system property"
f8977fd8dbda1de76bce886c0042785e453eabed,"Add SslProvider.isOptionSupported(...) (#13145)

Motivation:

Sometimes it is useful to understand if an SslContextOption is supported or not by a given SslProvider.

Modifications:

Add new static method which allows to check if an option is supported or not

Result:

Easier to reason about if an option is supported or not"
52db529c9daf1017422e3c4a8810da09e66d14a6,"Add `StacklessSSLHandshakeException` for `ClosedChannelException` (#13099)

Motivation:
When a channel is closed during the SSL handshake then `java.nio.channels.ClosedChannelException` is thrown. This is correct when we see it from a low-level transport perspective but from a high-level, this error is not detailed enough to debug. And when we log `ClosedChannelException`, we get this line: `java.nio.channels.ClosedChannelException: null` in the stack trace. 

Modification:
To combat this, we should throw `StacklessSSLHandshakeException` with the message `""Connection closed while SSL/TLS handshake was in progress""` as suppressed with`ClosedChannelException`. This will explicitly declare that the handshake failed due to connection closure.

Result:
Fixes #12000

Co-authored-by: Idel Pivnitskiy <idel.pivnitskiy@apple.com>"
9bf02fe440ac0252ce0d6067f028b0f4a80f441b,"Include query id when a query failed (#13151)

Motivation:

We should also include the id of the query that failed to make it easier to debug why this was the case

Modifications:

Add query id to the exception message / logging

Result:

Easier to find the root cause of a query failure"
9b40d120e3ebab054516f6919d485a03ec2d8b65,"`DnsResolveContext`: include expected record types in exception message (#13152)

Motivation:

When resolver fails with `UnknownHostException` it tells what hostname
it failed to resolve but doesn't tell the record type.

Modifications:

- Include `expectedTypes` array in the exception message;

Result:

Users can see what record type was queried in the exception message."
cd6a935d993495bd1fb6702f6b95db8a0708cca1,"Only do extra CNAME query if we couldnt follow the whole CNAME chain in the response (#13150)


Motivation:

If we receive a response with a CNAME chain in it we should only do an extra query if we could follow the whole chain. Otherwise we will produce more queries if necessary and so might overload the remote DNS server.

Modifications:

- Only do extra CNAME query if we couldnt follow the whole chain.
- Add unit test

Result:

Produce less queries when handling CNAMEs"
315c738b6f2b4a0d69e5e4e6f6188fb6774878bc,"Ensure Http2StreamFrameToHttpObjectCodec#decode doesn't add transfer-encoding for 204/304 response (#13149)


Motivation:

There are servers that return  `204`/`304` response as `HEADERS` and `DATA`,
where the `DATA` has no content.

`INBOUND HEADERS: streamId=3 headers=DefaultHttp2Headers[:status: 204, date: Wed, 25 Jan 2023 07:46:07 GMT] padding=0 endStream=false`
and
`INBOUND DATA: streamId=3 padding=0 endStream=true length=0 bytes=`

For such responses `Http2StreamFrameToHttpObjectCodec#decode` should not
add `transfer-encoding: chunked`.

Modification:

- Ensure `Http2StreamFrameToHttpObjectCodec#decode` doesn't add `transfer-encoding: chunked`
for `204`/`304` response
- junit test is added

Result:
`204`/`304` response is correctly decoded."
fa15b8ea666c4478441d62e31773044528fd4672,"Add unit tests that ensure we correctly handle partial timeouts when doing DNS queries (#13154)

Motivation:

When we do an A and AAAA query and one is successful while the other times out we need to ensure we still not fail the promise. This was already the case but we didnt have tests for this.

Modifications:

Added unit test to validate correct behaviour

Result:

More testing around timeout handling"
6c40a21a2eb76064c1e195f4c08488609d6b52c0,"Optionally depend on bctls-jdk15on (#13156)

Motivation:

The fix for #13106 upgraded maven-bundle-plugin, which detects classes
passed to Class.forName(String) and generates Import-Package
requirements.

This means Netty-4.1.87.Final's io.netty.handler now requires
org.bouncycastle.jsse in OSGi environments.

Modifications:

Add an optional dependency on bctls-jdk15on.

Result:

MANIFEST.MF lists org.bouncycastle.jsse with ;resolution:=optional.

Signed-off-by: Robert Varga <robert.varga@pantheon.tech>"
ae93d8c544387077fa831101b0c1737922f244f8,"Fix FlowControlHandler's behaviour to pass read events when auto-reading is turned off (#13146)

Motivation:
Currently, in FlowControlHandler read events are passed onto the pipeline in every case regardless of the auto-reading configuration of the channel.

Modification:
The read method in FlowControlHandler has been adjusted accordingly.

Result:
Not passing read events onto the pipeline (calling ctx.read() which results in reading from the client socket) when the queue is not empty and auto-reading is turned off for the channel.

Fixes #13104. 

Co-authored-by: Angelov <ivan.angelov01@sap.com>"
0daaec3ac2715bf09dd385a0515b0031d5af486a,"Speed-up HTTP 1.1 header and line parsing (#12321)


Motivation:

Http content parsing is making use of bi-morphic inheritance and loop fusion to improve performance: both
are not working as expected.

Modifications:

Splitting (CR)LF parsing into SWAR + copy loops ie loop fission
and saving LineParser to inherit HeaderParser

Result:
Parsing speedup

Co-authored-by: Chris Vest <mr.chrisvest@gmail.com>"
dd343a5defdf88c81e7749f0d3091fd4eccafc05,"Move FUNDING.yml inside .github (#13155)

Motivation:
`FUNDING.yml` is a GitHub-specific file containing information about Netty's financial funding methods. Currently, the file is located in the root path of Netty Project.

The [best practice](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/displaying-a-sponsor-button-in-your-repository) is to move `FUNDING.yml` inside `.github`.

Modification:
Moved `FUNDING.yml` inside `.github`

Result:
Clean project structure"
6aa6b1382fd09fc856f3e540452902b8c30cd0e7,"enable brotli4j in example applications (#13131)

Motivation:

The [example] applications cannot return Brotli compressed
responses because brotli4j is not on the classpath.

Modification:

add brotli4j to [example] pom.xml

Result:

Brotli compression is enabled in the [example] applications."
ba804498ac1baf4da91275326eeba45552ab6ebf,"Remove LGTM annotations (#13157)

Motivation:
LGTM is [superseded](https://github.blog/2022-08-15-the-next-step-for-lgtm-com-github-code-scanning/) by GitHub CodeQL. So we should remove it and its components such as LGTM suppress comments.

Modification:
Removed LGTM and its components

Result:
Removed dead modules"
281c1ff3d41386264ba2deabaeb97946db128a11,"Search Domains and DNS Resolver on Windows (#13022)

Motivation:
On Windows with JDK 9+ the search domain and dns servers are missing.

Modification:

This PR uses JNI to fetch the DNS Servers from the operating system.

Result:

Fixes #12712 #11885. 

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
27b21ad6f363658a7cde7e819da5a9ad385c315d,"Revert ""Search Domains and DNS Resolver on Windows (#13022)""

This reverts commit 281c1ff3d41386264ba2deabaeb97946db128a11 as we need to do some cleanup first before merging"
46ffa7b763fa90db28a71d9e6caf42e8d3357868,"Update to latest maven version (#13162)

Motivation:

Let's update to maven 3.8.7

Modifications:

Update to latest version

Result:

Use latest maven version"
5cf0a8db102733384592357b3f86442f6ac11bd3,"Always respect completeOncePreferredResolved in DnsNameResolver (#13161)

Motivation:

We missed to respect completeOncePreferredResolved setting in DnsNameResolver in one case as we always used true as value no matter what was configured by the user.

Modifications:

Correctly use the passed parameter.

Result:

Response completeOncePreferredResolved in all cases"
0ee487edbccaf6c1c64d92b84dc60a3abb5ab6af,"Update multiple actions to v3 (#13164)

Motivation:
Actions such as `checkout`, `cache`, `download-artifact`, and `upload-artifact` have a major upgrade available which is v3. We should consider upgrading to them for extended functionalities and support.

Modification:
Upgraded all of those above-mentioned actions to v3.

Result:
Latest actions version"
79b347234af27f34344fecc2b5651295f3cd3e7c,"Add necessary native-image configuration files for epoll (#13158)

Motivation:

Epoll currently doesn't work out of the box on native-image without passing in additional flags and metadata.

Modification:

This PR adds the necessary metadata so that epoll works out of the box with native-image. The metadata is conditional - it should only be included in an image if epoll is actually used.

Result:

Fixes #10616"
1645c5ff360420dc0a30e9187dcc43fba36eda54,"Always respect completeOncePreferredResolved in DnsNameResolver (#13170)

Motivation:

5cf0a8db102733384592357b3f86442f6ac11bd3 only partial fixed the problem as we missed to also change the resolve(...) code path.

Modifications:

- Also respect completeOncePreferredResolved when using resolve(...)
- Fix unit test

Result:

Always respect completeOncePreferredResolved."
ad57f980c733dbfa783ad465da1a895d85f03ac2,"Add more tests for ndots and searchdomain handling (#13171)

Motivation:

We should add more testing to ensure we corrrectly handle ndots and search domain configurations

Modifications:

Add more tests

Result:

More complete testing"
9c35aa1e6eb1d6983c5ed7d819765f3f8d9a2465,"Create a deep-copy of the Throwable before returning it from the cache to prevent possible leaks (#13160)



Motivation:

As we dont know what exactly the user will do with the cached exception we should better ensure to return a copy every time the user tries to access it. The problem is that the exception might stay in the cache for a very long time while the user might call things like addSuppressed(...) on it. This could lead to the sitation that we hold up a lot of references and so ""leak"" memory until the entry expires.

Modifications:

- Do a deep copy of the cached Throwable before returning it to the user.
- Add unit tests

Result:

No possible to ""leak memory"""
5ee9da5820f79a9ce5fd1c20cf85f72694a080d8,"Allow PcapWriteHandler instances to write to the same OutputStream (#13118)

Motivation:
Currently, PcapWriteHandler expects a dedicated OutputStream, and cannot support multiple streams written to a single PCAP file. These modifications are intended to support sharing the OutputStream between multiple concurrent PcapWriteHandler instances.

Modification:
Added a ""shareOutputStream"" flag to PcapWriteHandler (and PcapWriter) to enable synchronization on the OutputStream in order to prevent interleaved writes. Also, provide a method to write the PCAP Global Header to the OutputStream.

Result:
Allows multiple channels to write to the same PCAP file.

This PR adds further improvement done in PR #12337 and supersedes it.
Original Author: @RoganDawes"
8a8337eceb34ef4ff18c37b73f8c4d2bb1eb85ef,"Make releasing objects back to Recycler faster (#13174)


Motivation:
The Recycler implementation was changed in https://github.com/netty/netty/pull/11858 to rely on an MPSC queue implementation for delivering released objects back to their originating thread local pool.
Typically, the release will often happen from the same thread that claimed the object, so the overhead of having a thread-safe release goes to waste.

Modification:
We add an unsynchronized ArrayDeque for batching claims out of the `pooledHandles`.
This amortises `claim` calls.

We then also re-introduce the concept of an owner thread (but by default only if said thread is a FastThreadLocalThread), and release directly into the claim `batch` if the release is from the owner thread.

Result:
The `RecyclerBenchmark.recyclerGetAndRecycle` benchmark sees a 27.4% improvement, and the `RecyclerBenchmark.producerConsumer` benchmark sees a 22.5% improvement.

Fixes https://github.com/netty/netty/issues/13153

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
f18d8f53277ba0d9aa3fedd845cae5a6c7d77392,"Correctly and consistent handle finish encoding for compression (#13173)

Motivation:

We never cancelled the schedule close operation which could lead to exceptions and extra work.

Modifications:

- Move the logic for scheduling the close to an extra static method and reuse
- Ensure cancellation is done if the close is not needed anymore

Result:

Correctly handle closing and cancellation when doing compression"
071075152b236da44eb61fa587490974c7975ea5,"add brotli4j native libs to [codec-http2] pom.xml (#13177)

Motivation:

the brotli4j native libraries are missing from the [codec-http2] module

Modification:

added brotli4j native libraries to codec-http2/pom.xml

Result:

DataCompressionHttp2Test all tests pass."
48adb2609c7210ff55bb2ae42772a579052d06e7,"Fix brotli compression during close (#13165)

Motivation:

Brotli compressed http responses are not properly encoded.

Modification:

- change BrotliEncoder behavior so that the ""finish"" operation is performed before the channel is closed
- add new Brotli unit tests

Result:

All brotli tests pass.



Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
355dd1b87394f0b58dc1f3bd011b07e7d00cce32,"`DnsQueryContext`: include query id and question info in exception message (#13194)

Motivation:

When resolver fails the query with timeout or any other error, it tells
what was the address of remote resolver but no info about what query
was sent.

Modifications:

- Include id of the query and question in the exception message;

Result:

Users can see what was the query id and question (address, record type)
that failed."
c82d5db02bb2d3102cf172bdf57670ab38cfbec7,Fix one java doc typo in ChannelHandler (#13183)
37203f5026176d619a025cee1766ea5e12352b25,"add test for HttpContentCompressor determineEncoding (#13188)

Motivation:

improve test coverage for HttpContentCompressor

Modification:

added unit test case for 'determineEncoding' method

Result:

all tests pass in HttpContentCompressorTest"
fd9694e1b3945056ab39704de5a06d521c7d5800,"Remove git checkout HEAD^2 from CodeQL GHA workflow (#13189)

Motivation:

The CodeQL workflow is reporting a warning

`""1 issue was detected with this workflow: git checkout HEAD^2 is no longer necessary. Please remove this step as Code Scanning recommends analyzing the merge commit for best results.""`

Modification:

Removed the unnecessary part following the instruction from [link](https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow#warning-git-checkout-head2-is-no-longer-necessary)

Result:

No more warnings."
f761ab5620335eb4bdf5c3fc15f7cd66e1fdd342,"Correctly keep track of validExtensions per request / response (#13180)


Motivation:

At the moment we not correctly reset state between different request / response pairs. This can lead to situations when invalid extensions are used.

Modifications:

- Use a Queue to keep track of extensions per request / response

Result:

Fixes https://github.com/netty/netty/issues/13176"
8caf89e4f709734ed3d4ef3d6617cb6c66ce038d,"Update GH actions version. (#13201)

Motivation:

GH workflow reporting warnings.
`Node.js 12 actions are deprecated. Please update the following actions to use Node.js 16: actions/setup-java@v1`

`Node.js 12 actions are deprecated. Please update the following actions to use Node.js 16: uraimo/run-on-arch-action@v2.0.9`

Modification:

Update the actions to use Node.js 16

Result:

Remove warnings."
c12e34afb7fee08b82956093930bdbb00d954fb8,"Fix flaky test (#13200)

Motivation:

CipherSuiteConverterTest is flaky. since the test is not thread-safe.

Modification:

Make the test class executed in `@Isolated`.

Result:

Fix flaky test. No more fails on CipherSuiteConverterTest."
6198dabada9fc615eb08eb0cd92da2a060e74d54,"Don't add results to finalResults once promise was notified (#13196)

Motivation:

We need to ensure we release the results if we dont end up transfering the ownership. In some cases we could have ended up to adding more results to the List without be sure that these will ever be released at all.

Modifications:

Only add results as long as we did not notify yet. Otherwise release these.

Result:

No more memory leak possible even if promise is already completed"
272d7493864a25a0b72f6a8cfbe0605ed21e9e27,"Add unit test that verifies cancelled entries in ChannelOutboundBuffer are correctly handled in removeBytes(...) (#13195)

Motivation:

There was no test that ensured that we correctly handle cancelled entries when calling removeBytes(...)

Modifications:

- Add unit test

Result:

Verify correct behaviour. Related to https://github.com/netty/netty/issues/13187"
06f70a4cf547039b9070ea2383f7949ceb2691e5,"AsciiStrings can be batch-encoded (#13197)

Motivation:

ISO/ASCII AsciiString buffer encoding are not making uses of AsciiString type to skip byte per byte encoding.

Modification:

Detecting CharSequence's type to short circuit to faster encoding methods.

Result:

Faster AsciiString ISO/ASCII encoding"
6c0e69ab70dfd592a6a4dc538f96f486f9536a66,"WebSocketServerProtocolHandler: make HandshakeComplete constructor public (#13202)

Motivation:

alternative websocket implementations may prefer to use netty's server handshake lifecycle events.

Modification:

make HandshakeComplete constructor public

Result:

alternative websocket implementations may use netty's server handshake lifecycle events."
d010e63bf5bf744f2ab6d0fc4386611efe7954e6,"Add handling of inflight lookups to reduce real queries when lookup same hostname (#13186)

Motivation:

To reduce the overhead we can shortcut queries for the same hostname until the first query comes back. This will reduce queries and so overhead

Modifications:

- Add new builder option that allows to shortcut queries to the same hostname (default this is disabled)

Result:

Be able to reduce queries"
828ea7ceeb72a9e0c943df8b5fe634ce1bd9537f,[maven-release-plugin] prepare release netty-4.1.88.Final
4475b5c5719e7e7f36f2f01e25c139bcb2b048d4,[maven-release-plugin] prepare for next development iteration
9993e07356ea39edf14008789d3377d2bb62ea92,"Revert ""Speed-up HTTP 1.1 header and line parsing (#12321)""

Motivation:

This commit introduced a regression while parsing headers that could lead to IndexOutOfBoundsException.

Modifications

Reverts commit 0daaec3ac2715bf09dd385a0515b0031d5af486a.

Result:

Fixes https://github.com/netty/netty/issues/13213"
a803e107614bc8aa0886b9b7ae742463c6a156c1,"Revert ""Revert ""Speed-up HTTP 1.1 header and line parsing (#12321)""""

This reverts commit 9993e07356ea39edf14008789d3377d2bb62ea92."
ed425fe281f7f20a9d946d9f8213be0a64f3a778,"Don't fail on HttpObjectDecoder's maxHeaderSize greater then (Integer.MAX_VALUE - 2) (Fixes #13213)

Motivation:

Integer's overflow while computing indexOf indexes

Modification:

Fix the overflow by using long values

Result:

Users can set maxHeaderSize greater then (Integer.MAX_VALUE - 2)"
263a745b93513b8f761daa007897af9ce57161ba,[maven-release-plugin] prepare release netty-4.1.89.Final
cd4c07e9380da347ba10c75b980a486e8fe53980,[maven-release-plugin] prepare for next development iteration
cfcdd93db5fd9af6254144caad68f4ed29a3dc64,"websocket handshake: move http method validation to WebSocketServerHandshaker (#13205)


Motivation:

headers of handshake request are validated in WebSocketServerHandshaker implementations. However, request method is validated in WebSocketServerProtocolHandshakeHandler, forcing users of WebSocketServerHandshaker without WebSocketServerProtocolHandler to have http method check in their own code.

Modification:

move http request method validation from WebSocketServerProtocolHandshakeHandler to
WebSocketServerHandshaker impls;

follow approach of WebSocketServerHandshaker headers validation for method validation -
this has effect of 400(Bad request) instead of 403(Forbidden) responses for unsupported methods, with description instead of empty body.

Result:

websocket requests are properly validated by WebSocketServerHandshaker only."
3acad41e942fe181f83c977eb7991f580aa6c018,"Fix HttpHeaders.names for non-String headers (#13219)

Motivation:

With #12321, the HttpHeaders object returned by the standard HTTP/1 pipeline now contains AsciiStrings, not Strings. This uncovered a bug where HttpHeaders.names() did not behave properly as a Set<String> when the backing HttpHeaders contained a CharSequence type other than String. This leads to .contains incorrectly returning false when the header is present.

Modification:

Replace CharSequenceDelegatingStringSet with a class that delegates directly to the Headers object, instead of Headers.names(), for the .contains call.

Result:

- The .contains call works properly even when the backing Headers aren't Strings.
- Mutation methods were removed. This is an improvement imo, names() previously returned a copy, so changes would not be reflected in the Headers anyway.
- .contains is now case-insensitive."
1cfe7103fbf7acdc5e21365419e9565955540703,"Adding header name of the header which failed validation. (#13208) (#13209)

Motivation:

Users should know which header failed the value validation.

Modification:

Catch IllegalArgumentException and wrap in other exception with the header name in the message.

Result:

Error message now has header name which failed validation."
4a74cdc1307bdcb58665ea1162b0449d0bea68b2,"Upgrade to netty-tcnative 2.0.59.Final (#13181)

Motivation:

There was a new netty-tcnative releae which upgraded boringssl

Modifications:

Update to the next version

Result:

Use latest boringssl / netty-tcnative"
ebb30dbe19a3d39be09195210f9acfd23803289b,"Fix ocsp server example bug (#13223)

Motivation:

io.netty.example.ocsp.OcspUtils#ocspUri always return null, because of the wrong class type.

Modification:

change DERTaggedObject class to DLTaggedObject class

Result:
fix the ocsp server bug, so the server now can successfuly get the url of the issuer.

Co-authored-by: mipengcheng <mipengcheng3@jd.com>"
9ec938c78faf75230d24c0a30c037a66f8ccee90,"Avoid slow type checks against promises on outbound buffer's progress (#13225)


Motivation:

ChannelOutboundBuffer's progress perform expensive type checks that can reduce scalability or just performing wasteful operations over common Netty types. This behaviour pop-up in few real-cases, but sadly it cannot be captured easily by java profilers due to https://github.com/jvm-profiling-tools/async-profiler/issues/673

Modification:

Prefer direct class checks for void promises and guarding Netty types by using concrete class type checks over interface type checks, that will be left to user-defined promises instead.

Result:

Faster type checks for Netty types and faster outbound buffer progress's performance."
3de03282d558d7b7e2c282b31db73335f0f498b1,"Save expensive volatile operations in the common hot http decoder path (#13224)

Motivation:

HttpObjectDecoder often perform costy atomic volatile instructions in the hot path (due to resetNow).

Modification:

Relax such atomic operations given that there's no constrain about being sequential consistent.

Result:

Faster http decoding

Result:

Error message now has header name which failed validation."
5ce448951c46972d58765b3be8684f589133b0a3,"unit test for headers.contains(CharSequence) (#13230)

Motivation:

increase test coverage for DefaultHttpHeaders and DefaultHttp2Headers

Modification:

add unit tests for the contains(CharSequence) method

Result:

All unit tests pass."
53b6dd4f6565dd07b4f378f54359f5645da48ab4,"implement NonStickyEventExecutorGroup.inEventLoop (#13233)

Motivation:

Current implementation of `NonStickyEventExecutor.inEventLoop()` always returns `false`, causing behavior changes when `DefaultEventExecutor` is replaced with `NonStickyEventExecutor`

Modification:

Thread , currently executing `NonStickyEventExecutor.run()` is stored in a volatile and used to check if in event loop.


Result:

Calls to `inEventLoop()` inside runnable executed by `NonStickyEventExecutor` return `true` and return `false` otherwise

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
dd71a339b2f53d3c26b6e4a914637710bcec2cfb,"MixedFileUpload should honor specified baseDir & deleteOnExit (#13218) (#13227)

Motivation:

If the DiskFileUpload is created in the MixedFileUpload constructor then
basedDire & deleteOnExit parameters are not taken into account and so created
using the default ones.

Modifications:

Forward specified baseDir & deleteOnExit when creating a DiskFileUpload into
MixedFileUpload constructor.

Result:

DiskFileUploads created by MixedFileUpload are always honoring the specified
baseDir & deleteOnExit parameters."
3d8a62adc37d4e3ba399471abe3054f9354a0c7e,"Fix the hint log to use the correct level (#13236)

Motivation:

Use the correct level as a hint when logging. 

Modifications:

Use `DISABLED`.

Result:

Hint for user is correct"
59aa6e635b9996cf21cd946e64353270679adc73,"Fix race in NonStickyOrderedEventExecutor that affects inEventLoop(...) (#13237)

Motivation:

53b6dd4f6565dd07b4f378f54359f5645da48ab4 added support for inEventLoop(...) but did have a bug related to when the saved executing Thread was set to null. This could lead to inEventLoop(...) returning the wrong value.

Modifications:

Replace volatile by AtomicReference to ensure we only set the saved executiong Thread to null when it was not updated by another Thread yet.

Result:

No more races"
5dafa1f8aa2831a017224a53707a58da6909229d,"Upgrade Brotli4j to 1.11.0 (#13247)

Motivation:
New Brotli4j version 1.11.0 is available and we should upgrade to it.

Modification:
Upgraded Brotli4j to 1.11.0

Result:
Latest version of Brotli4j"
eb3feb479826949090a9a55c782722ece9b42e50,"Correct group size calculation in SizeClasses to save memory (#13231)

Motivation:
In `SizeClasses` constructor, the `group` size calculation in `short[group * 4][7] sizeClasses` is wrong, which will create unnecessary array cells. For example:
If trunk size is `4 MiB (1 << 22)`, the `group` size was `19`, but it should be `17`.

Modification:

Correct `group` size calculation in `SizeClasses`.

Result:

Reduce `group` size in `sizeClasses` to save memory.

Co-authored-by: laosijikaichele <laosijikaichele>"
5d1f99655918c9c034ca090d51b64eced73f742f,"Increase errno cache and guard against IOOBE (#13254)

Motivation:

In the past we cached up to 512 errno values and used this cache to lookup the string representation without checking if the value if > 512. This value might be a bit low as more errno values are added over the time.

Modifications:

- Cache up to errno code 2048
- Use JNI call if errno code was not cached and so not throw an IOOBE.

Result:

No more exceptions on un-cached errno codes"
971aa8ad9c7288a6744d3bbe07ded785fa170d9d,"Use MacOS SDK 10.9 to prevent apple notarization failures (#13253)

Motivation:

When using an SDK older then 10.9 the notarization process fails and Apple sends the reason for the failure is that ""The binary uses an SDK older than the 10.9 SDK

Modifications:

Update to 10.9

Result:

No more problems with apple notarization."
99204e917f8d3f145da8dedcc6383aff5d45f558,"Skip revapi checks for testsuite modules (#13258)

Motivation:

We should skip revapi checks for testsuite modules as these are not expected to be public API

Modifications:

Add configuration for skipping

Result:

No API check for testsuites"
84cf7d6c94eed0aa100e3b9e3e5644fa7fc4e9b7,"Native image: add support for unix domain sockets (#13242)

Motivation:

unix domain sockets with graalvm native image require additional reflection configuration

Modification:

add unix domain sockets graalvm configuration in reflect-config.json

Result:

unix domain sockets with graalvm native image work out of the box"
c353f4fea52559d09b3811492c92a38aa1887501,"Faster Recycler's claim/release (Fixes #13153) (#13220)

Motivation:

Recycler's claim/release can be made faster by saving expensive volatile ops, when not needed. For claim, always, while for release, if the owner thread is performing release itself.

Modification:

Replacing expensive volatile ops with ordered ones.

Result:

Faster Recycler's claim/release"
8fac718b1f7246c6a8b9db6123750429b0a5b4ad,"Don't reset BCSSLParameters when setting application protocols (#13262)


Motivation:

We had a bug that lead to resetting the BCSSLParameters during setting the applications protocols.

Modifications:

Retrieve already configured BCSSLParameters and use these to set the application protocol

Result:

Fixes https://github.com/netty/netty/issues/13261"
ebfc79c85deb8ba6fda54b8cb7fa925573076b21,"WebSocketClientProtocolHandler: add option to disable UTF8 validation of text frames (#13265)

Motivation:

WebSocketClientProtocolHandler unconditionally adds UTF8 validation handler, even if one is not necessary (e.g. text frames are not used by application)

Modification:

add WebSocketClientProtocolConfig.withUTF8Validator option

WebSocketClientProtocolHandler uses .withUTF8Validator option when adding Utf8FrameValidator to channel pipeline

Result:

configurable UTF8 validation of text frames payload in WebSocketClientProtocolHandler"
ab5c411c9f917426c240fb6b97c118313f69dc4f,"Handle NullPointerException thrown from NetworkInterface.getNetworkInterfaces() on android. (#13278)

Motivation:

On earlier version of Android NetworkInterface.getNetworkInterfaces() might throw an NPE.

Modifications:

Catch NPE and only rethrow if not on Android.

Result:

Be able to use netty on earlier versions of Android. Fixes https://github.com/netty/netty/issues/13272"
0e8af543c51209d84162952fc0e607e4189e5c88,"Chunked HTTP length decoding should account for whitespaces/ctrl chars (Fixes #13273) (#13274)


Motivation:

#12321 introduces the assumption that whitespaces/ctrl chars are already stripped out hex chars of HTTP chunk length. It was a wrong assumption.

Modifications:

Correctly check for whitespace and ctrl chars and re-introduce whitespace (leading) trim

Result:

Fixes #13273

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
367d997a939181594873c4a846556263d4d9fe4e,[maven-release-plugin] prepare release netty-4.1.90.Final
6b45db71f25e7804ff145dc99769ea917a9abd0f,[maven-release-plugin] prepare for next development iteration
a7cdfc153c9980b7a781afa280d595efc870567c,"Allow setting null TrustManager (#13277)

Motivation:

I sometimes use a default (null) TrustManager, but want to set this using the same code as when I do use a TrustManager.

Modification:

Allow setting a null TrustManager. Same as how it is for KeyManager.

Result:

Allow setting null TrustManager"
dabbe44b95d18f15baf2ee6247383b11bdf77d49,"add reflect config for EpollDatagramChannel (#13279)

Motivation:

EpollDatagramChannel failed to reflect with graalvm native image. Spring data redis always require it when running in linux.


Modification:

add configuration for EpollDatagramChannel in reflect-config.json.

Result:

Fixes [spring-data-redis #2527](https://github.com/spring-projects/spring-data-redis/issues/2527)."
5aa672854cf745f9eef0ff0ed866dd0a0e6480f1,"Update maven to 3.9.0 (#13281)

Motivation:

Let's use the latest maven version to build

Modifications:

Upgrade to 3.9.0

Result:

Use latest maven release"
97f74014f648296a8b7e37abef82647f035087a5,"Illustrate the right way to send a GET request (#13282)

Motivation:
The way to sent a GET request in the HttpUploadClient is wrong,  because if just send a GET request without a following LastHttpContent, the pipeline will be blocked, and  we can't reuse the channel to send another http request. The Example works because the channel is closed. but the following post and multi request both sent a LastHttpContent, so the get request should do this too. 
This may mislead the user.

Modification:
Fix the problem described in the motivation.

Result:
Illustrate the right way to send a GET request

---------

Co-authored-by: mipengcheng <mipengcheng3@jd.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
20ea1b8ba85c546ce0f99dbd4b6ca2f72dcb1fa3,"Update maven to 3.9.1 (#13292)

Motivation:

Let's use the latest maven version to build

Modifications:

Upgrade to 3.9.1

Result:

Use latest maven release"
b75cdbdae8ee220764af2a9f6808156e89a56b51,"Fire a PrematureChannelClosureException when Channel is closed while aggregating is still in progress (#13290)

Motivation:

We should throw a PrematureChannelClosureException when the Channel is closed while aggregating is still in progress as otherwise the user will never know about this.

Modifications:

- Throw exception
- Add unit test

Result:

Fixes https://github.com/netty/netty/pull/13252"
44b7e5b12d8dff3d07dfb773680120cc20f7e203,"Build on JDK20 during PR verification (#13295)


Motivation:

JDK20 was released so we should try to build with it for PRs

Modifications:

- Replace CI job that uses JDK19 with JDK20
- Add profiles for JDK20
- Use reflection in OpenJdkSelfSignedCertGenerator to be able to build on JDK20 as well

Result:

Verify PRs with latest JDK"
34047463cf3a51fbbf071e8acd57c99cd4b333c4,"Connect without password if server returns NO_AUTH when using Socks5 (#13298)

Motivation:

When the server response with NO_AUTH we should just connect directly and not use a password at all in all cases

Modifications:

- Connect without password if the server tells jus to do so.
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/13287"
ea1af147cf41b33933f313678102ea5fd9d72e15,"NetUtil should be able to handle -Djava.net.preferIPv6Addresses=system without logging an error (#13301)

Motivation:

Since java11 its supported to use ""system"" as a value for -Djava.net.preferIPv6Addresses.

Modifications:

Just fallback to ""false"" if -Djava.net.preferIPv6Addresses is not ""true"" without logging an error

Result:

Fixes https://github.com/netty/netty/issues/13300"
cf5c467f4ead5ba5e1e36f5c4903af78bd49c35c,"Use optional resolution of sun.net.dns (#13303)

Motivation:

To be able to use our DNS resolver with OSGI we should use an optional resolution of sun.net.dns

Modifications:

Add config to pom.xml

Result:

Fixes https://github.com/netty/netty/issues/13297"
ccc5e01f0444301561f055b02cd7c1f3e875bca7,"chore: Set permissions for GitHub actions (#12462)

Motivation:

Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much.

Modifications:

- Included permissions for the action. 
  https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions
  https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs

Result:

Secure GitHub actions

Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>"
12e11694bbd4a4df1d2a5de40c2d851635ed174d,"Use the correct error when reset a stream (#13309)

Motivation:

At the moment we always used ""CANCEL"" when reseting a stream because of an error. This is not correct, we should use the error that caused the stream error.

Modifications:

- Use correct error when reset a stream.
- Add unit test

Result:

Correctly propagate stream errors via reset"
94ab6f3483117ffb75385c8bc1153882f67393f9,"Introduce Http2MultiplexActiveStreamsException that can be used to propagate an error to all active streams (#13306)

Motivation:

There might be a desire to fire an exception to all the active streams. This is currently harder to do then it should be as the user needs to keep track of the active streams.

Modifications:

- Add Http2MultiplexActiveStreamsException which can be used to wrap an exception which should be fired to all the active streams by Http2MultiplexHandler
- Add unit tests

Result:

Alternative solution for https://github.com/netty/netty/pull/12830. Thanks @yawkat"
ae10dc1fbe67ca61714ebcd10346d51ba4117839,"Don't unwrap multiple records until we notified the caller about the finished handshake (#13314)


Motiviation:

We should ensure we only unwrap data to the destination buffer once we did notify the user about the completion of the handshake.
Failing to do so might result in corrupted state machines.

Modifications:

Always use the jdkCompat mode until the handshake was complete

Result:

Correct state machine."
e1fad99ee2f7d8cf628d05f28ff8779254f11cc8,"`StacklessSSLHandshakeException`: add a short stack-trace (#13315)

Motivation:

Currently, `StacklessSSLHandshakeException` doesn't have any stack-trace
which makes it harder to understand where it comes from.

Modifications:

- Add one-line stack-trace using `ThrowableUtil.unknownStackTrace`
utility;

Result:

Similar to `StacklessClosedChannelException`,
`StacklessSSLHandshakeException` always has one-line stack-trace to
indicate where it was originated."
76d83fe21295dba4dea7b18aa0cc92681eeed232,"Handle EHOSTUNREACH errors in io.netty.channel.unix.Errors (#13317) (#13318)

Motivation:

    We should throw a NoRouteToHostException when a socket connection fails with EHOSTUNREACH in the same way as
    ENETUNREACH.

    Modifications:

    Add handling for EHOSTUNREACH

    Result:

    Correct exception is thrown."
cd540193b98e1ffb9cdaaf2629e4a6d28665a2c5,"Update: Add snappy support on HttpContentDecoder (#13312)


Motivation:
I want to allow logstash http input to be able to read snappy compressed
data.

Modifications:
To allow the HttpContentDecoder to support snappy it created a new
control flow to test for snappy content encoding.

If it is present, we are using a specific snappy decompressor to read
the data.

In order to make sure it was working I also included a e2e test on the
behaior of HttpContentDecoder.

Result:
We should be able to send snappy traffic to a server using
HttpContentDocder and be ale to uncompresse the traffic.

Co-authored-by: Aayush Atharva <hyperx.pro@outlook.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
d773f37e3422b8bc38429bbde94583173c3b7e4a,[maven-release-plugin] prepare release netty-4.1.91.Final
24a0ac36ea91d1aee647d738f879ac873892d829,[maven-release-plugin] prepare for next development iteration
1314ede822a4a94be2446042d4b112649ae9ddc7,"Pseudo-header with empty value results in RST_STREAM with PROTOCOL_ERROR reason (#13238)

Motivation:
According to RFC9113 https://datatracker.ietf.org/doc/html/rfc9113#section-8.3.1
Pseudo-header ':path' must not have empty value.

Modifications:
- Extend DefaultHttp2Headers#validateValue with validation for pseudo-header :path
- Add junit test

Result:
Pseudo-header :path with empty value results in RST_STREAM with PROTOCOL_ERROR reason.

Related to #13235"
de876d197a945e2b3a4a96b90a65c00611b77806,"Deprecates LazyRunnable (#13336)

Motivation:

Type check vs LazyRunnable receive an always-on performance hit for a common operation that users shouldn't pay if they won't use it.

Modifications:

Deprecates LazyRunnable providing a comment to help
existing users an alternative mechanism.

Result:

Fixes #13335

Co-authored-by: Chris Vest <mr.chrisvest@gmail.com>"
f67a55609d252e0eac9707df51997cc79ed22093,"Http types slow path checks (Fixes #13268)  (#13269)

Motivation:

Http encoders/decoders and websocket handlers perform slow type checks
i.e. O(N) search among all implemented interfaces for non-implemented interfaces.

Modifications:

Perform instance exact matches and/or class type check vs common used types, while exposing
unstable APIs to allow users to do the same, if necessary.

Result:

Better performance of Http pipeline with/without websocket handler.
Fixes #13261"
5258d00ecf07d27b2d1bcf636cbc354d23ace346,"Add missing dependency on jctools-core in microbench/pom.xml (#13325)

Motivation:

#13220  seems to have introduced a build/compile failure because of a missing Maven dependency on `jctools-core`. Adding this dependency to `microbench/pom.xml` fixes the compile failure of the `RecyclerBenchmark` class.

Modification:

Added the following depencency to `microbench/pom.xml`:

```xml
<dependency>
  <groupId>org.jctools</groupId>
  <artifactId>jctools-core</artifactId>
  <scope>compile</scope>
</dependency>
```

Result:

Build is successful."
79af2f2e1db8e89a386b0ca9eeeee8d6d181c5e6,"Add support for local and remote addresses on the server for child channels when UDS (#13323)

Motivation:
Local and remote addresses are not available on the server for child channels when
Unix Domain Sockets is used. There are use cases where one may need this information
in order to collect metrics per local or remote addresses.

Modifications:
- Add JNI code for obtaining local/remote address
- When creating a child channel initialise the local/remote addresses.
- Add junit tests

Result:
Local and remote addresses are now available on the server for child channels when
Unix Domain Sockets is used."
f2eca0f4e9bed48e6b139c30d626a9368249942f,"Release websocket handshake response if pipeline checks fail (#13338)

Motivation:
The WebSocketServerHandshaker require that either an HttpRequestDecoder or an HttpServerCodec exist in the pipeline.
If they do not, we can't send a websocket handshake response.
The handshake response is allocated prior to the pipeline checks.
Therefor, if the checks fail, we need to release the response before returning the failed future.

It might be possible to delay the allocation of the response until after the pipeline checks, but doing so breaks assumptions made by numerous tests.

Modification:
If the pipeline checks fail, release the handshake response before returning the failed promise.

Result:
We no longer leak a buffer in the handshake response if the pipeline checks fail."
c1f8cb0d3ed636a58a82ecde49d6fc05a4dbe26f,"Ensure we never read uninitialized memory when handling sockaddr (#13346)

Motivation:

We should init the struct to ensure we not end up reading uninitialized memory

Modifications:

Assign to 0

Result:

No more reading of uninit memory"
ba1ff7a3c6bad4bddb24da2a6ae6416906dc2e0f,"Guard against unbounded grow of suppressed exceptions storage (#13351)


Motivation:

We should guard against unbounded grows of suppressed exceptions in our SSLEngine implementation to prevent possible OOME

Modifications:

- Check if a suppressed exception was already added for a specific error code before adding it again
- Ensure we always null out pending exception field.

Result:

Fixes https://github.com/netty/netty/issues/13350"
97a7ed0a9f835b0f94939a8436d1b9b8da924776,"Make Recycler faster on OpenJ9 (#13357)


Motivation:
To avoid reference processing overhead while at the same time ensuring that we clear Recycler data structures that were used by now-terminated threads, we need to check if the LocalPool owner thread has terminated.

We used to do this by calling `Thread.getState`, but this turns out to be quite expensive on OpenJ9, because they need to halt the target thread before its state can be safely inspected.
See the `haltThreadForInspection` call in [`Java_java_lang_Thread_getStateImpl`](https://github.com/eclipse-openj9/openj9/blob/55b9267740559406b8471000cd3a3b6f681dc095/runtime/jcl/common/thread.cpp#L76-L102).

This turns out to be a scalability bottleneck in some deployments.

Modification:
We can get the same semantics as `Thread.getState() == Thread.State.TERMINATED` by checking `!Thread.isAlive()`.

The `isAlive` call is cheap on both [OpenJ9](https://github.com/eclipse-openj9/openj9/blob/03967d8cc24dc1f60168110c9d207d2dff57765a/jcl/src/java.base/share/classes/java/lang/Thread.java#L756-L761) and [OpenJDK](https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/lang/Thread.java#L1798-L1815).

Result:
We no longer see the scalability bottleneck observed in https://github.com/netty/netty/issues/13347#issuecomment-1518537895



Co-authored-by: Trustin Lee <t@motd.kr>"
b2afca46b7933323689536599380f61a324340d9,"Allow to change the limit for the maximum size of the certificate chain. (#13355)


Motivation:

Sometimes large certificate chains are used which might be larger then the default maximum size.

Modifications:

- Allow to configure the limit
- Add unit test

Result:

Be able to adjust limit"
acc352521ce3ef4200095404950f7d2b4808c4ef,[maven-release-plugin] prepare release netty-4.1.92.Final
573aad16be1dc8a2156c51fa475a029af2c055d3,[maven-release-plugin] prepare for next development iteration
fde50fd204c00f59dc8e234952b622eff20025c6,"use parentheses in javadocs (#13363)

Motivation:

we should use parentheses here

Modification:

Modify comments

Result:

Looks more comfortable


Co-authored-by: luozongle <luozongle@9linktech.com>"
6a18f8fb649ffc53bbf46640d486de2a4aa7985e,"OpenSSL MAX_CERTIFICATE_LIST_BYTES option supported (#13365)

Motivation:
isOptionSupported wasn't updated to reflect the newly added
MAX_CERTIFICATE_LIST_BYTES option.

Modifications:
- SslProvider.isOptionSupported to support MAX_CERTIFICATE_LIST_BYTES
if OpenSSL is used.

Result:

isOptionSupported works as expected"
8b34a81a08d29e579b17136a4ca16cfd88108208,"Fix OCSP verification assert bug (#13372)

Motivation:
In order to verify a certificate with OCSP, the certificate chain needs to contain _two or more_ certificates, not _two or fewer_.
We need at least the leaf certificate, and its issuer, and there may be other intermediary certificates.

Modification:
Change the assert to check that the chain has _at least two_ certificates, rather than checking the chain has _at most two_.

Result:
The OcspServerCertificateValidatorTest pass again.

Perhaps Let's Encrypt added intermediaries with the last certificate they issued."
96dcfc60d34f210e1b20ae08751d4752234bd41c,"Adapt to DirectByteBuffer constructor in Java 21 (#13366)

Motivation:

The signature changed between Java 20 and 21 for the DirectByteBuffer constructor.
See https://github.com/openjdk/jdk/commit/a56598f5a534cc9223367e7faa8433ea38661db9

Modification:

Simply add a check for `<init>(long, long)` on top of `<init>(long, int)`

Result:

It's able to compile and run on Java 21"
d90c59d44ff2a3225e9dab4c766ec24e0cb34840,"HTTP/2 encoder: allow HEADER_TABLE_SIZE greater than Integer.MAX_VALUE (#13368)

Motivation:

`HpackEncoder.setMaxHeaderTableSize(...)` supports any unsigned 32-bit
integer value, however `DefaultHttp2ConnectionEncoder` adjusts the
`SETTINGS_HEADER_TABLE_SIZE` value to 31-bit unsigned integer.
`DefaultHttp2ConnectionDecoder` doesn't adjust. We should keep them
consistent. Value range is validated by `Http2Settings` and
`HpackEncoder`.

Modifications:

- Remove adjustment for `SETTINGS_HEADER_TABLE_SIZE` in
`DefaultHttp2ConnectionEncoder.remoteSettings(...)`;

Result:

`DefaultHttp2ConnectionEncoder.remoteSettings(...)` is consistent with
`DefaultHttp2ConnectionDecoder.applyLocalSettings(...)`,
`SETTINGS_HEADER_TABLE_SIZE` value is not adjusted."
ce4e054318aa85831c9bf7f8bd636c10462ffee1,"`Http2Settings`: validate non-standard setting values (#13369)

Motivation:

RFC9113 Section 6.5.1 defines settings value as unsigned 32-bit.
We should validate that users don't pass a `long` value outside of this
range.

Modifications:

- `Http2Settings` throws `IllegalArgumentException` if a non-standard
setting has value outside unsigned 32-bit integer range;
- `Http2Settings.verifyStandardSetting` always includes expected range
when it throws `IllegalArgumentException`;
- Enhance `Http2SettingsTest` to validate valid and invalid values for
each setting;
- `Http2Settings.keyToString` encodes non-standard settings as hex
value;

Result:

Value range for non-standard settings is also validated.
Exceptions always include expected range in the message."
3535a2fbbadc05c10d9c6c5085ade9ebb7b282ef,"Updated Maven enforcer plugin version to the latest 3.3.0 (#13367)

Motivation:
To provide nice and succinct feedback from running enforcer rules plus bug fixes included in 3.3.0 version

Modification:

Modified plugin version property
<enforcer.plugin.version>3.3.0</enforcer.plugin.version>

Result:
Use latest version"
ac3acaa363684d1e40f6f9a4994340f26718f643,"Update SECURITY.md

Motivation:

Asking people to report a security issue to a mailing list is not the best
idea because:

- The mailing list is accessible to anyone who reported a security issue
  in the past, which means it's not private enough.
- It doesn't enforce the standard form for reporting a security issue,
  making the maintainers spend more time understanding it.

Modifications:

- Updated `SECURITY.md` file to redirect people to GitHub's security advisory
  page.

Result:

- Saner vulnerability reporting process"
fddf977611ac60dbf182dcd5a429658265c74f7d,"Update SECURITY.md

Added the 90-day rule"
3c5a1183433658a0aa39ada14754c8dd4de99f20,Delete SECURITY.md in favor of the one in .github metarepository
76c11adb31b55b2dea110e9870a67dc06cefe001,Delete FUNDING.yml in favor of the one in .github metarepository
9d28ad5403c5adf19f684726def911c3e260fb2a,"Upgrade to latest netty-tcnative to fix memory leak (#13375)

Motivation:

The last tcnative release contains a fix for a small memory leak.

Modifications:

Upgrade to latest version

Result:

No more small leak"
9fe796e10a433b6cd20ad78b2c39cd56b86ccd2e,"Add another fast-past for ChannelOutboundBuffer slow type checks (#13376)

Motivation:

https://github.com/netty/netty/pull/13376 has introduced a peeling-off
of call-site to avoid some slow-type check, but if non
ChannelProgressivePromise types hit it can still perform un-necessary
type checks

Modification:

Adding an additional common promise type that doesn't implement
ChannelProgressivePromise

Result:

Faster type checks for Netty types and faster outbound buffer progress's
performance."
01df21277a585b0c5bb93088dfc6f3da7ed67746,"A better way of switching http protocol to websocket protocol (#13353)

Motivation:

How the pipeline was setup is not optimal in terms of ordering of the handlers.

Modifications:

- Use a more logic ordering of handlers in the pipeline and remove handler when not needed anymore

Result:

Cleanup

Co-authored-by: mipengcheng <mipengcheng3@jd.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
af132ffc483f68d06eed746797fff2af652bcd35,"Update java version to latest patch release (#13382)

Motivation:

Let's use latest patch release of java versions

Modifications:

Update to latest versions

Result:

Use latest patch releases on CI"
0f96b091b0cd08275a0b53c28b8e0c3235fffd08,"Revert ""Updated Maven enforcer plugin version to the latest 3.3.0 (#1… (#13383)

…3367)""

Motivation:

Something seems to be wrong when trying to deploy on aarch64 with this
change.

Modifications:

This reverts commit 3535a2fbbadc05c10d9c6c5085ade9ebb7b282ef.

Result:

Snapshot deploys work again"
29bdca4ed4fdcb0d3693a9065de052664a00cb53,"Reset byte buffer in loop for AbstractDiskHttpData.setContent. (#13320)

Motivation:
When the number of bytes available from a single InputStream.read-call
varies between invocations (like can be the case for resources served
from within a jar), the first invocation of flip() sets the limit to
this smaller value. As InputStream.read(byte[]) is used, that call does
not see the new limit and might read more bytes causing the next call to
ByteBuffer.position() to fail.

Modification:

Resetting the limit in between resolves this issue.

Result:
Calling setContent() with an InputStream that has varying chunk-size now
succeeds and does not throw an IllegalArgumentException anymore."
91f484371b8db359bab06df691e2d3d0300a4670,"Do not throw exception when resolveCache and TTLs are both configured (#13386)

Motivation:
The configured `DnsNameResolverBuilder#TTLs` (`minTtl`, `maxTtl` and
`negativeTtl`) are used for creating default `resolveCache`,
`cnameCache` and `authoritativeDnsServerCache`. Configuring a custom
`resolveCache`(or `cnameCache`, or `authoritativeDnsServerCache`) does
not mean that `TTLs` are not needed anymore for the rest of the caches
that are not configured. With the current implementation there is no way
for the user to specify a custom `resolveCache`, but to leave `Netty` to
create `cnameCache` and `authoritativeDnsServerCache`.

Modifications:
- `DnsNameResolverBuilder` does not throw `IllegalStateException`, but
logs when a custom
`resolveCache`/`cnameCache`/`authoritativeDnsServerCache` and `TTLs` are
configured, indicating that for the custom
`resolveCache`/`cnameCache`/`authoritativeDnsServerCache`, the `TTLs`
will be ignored.
- junit tests are added

Result:
Fixes #13384"
439e9074b4022e96881d82c976dd6df7d4c3a701,"Set top level permission to remaining workflows (#13385)

Motivation:

Setting minimum permissions on workflow's top level is good practice.
Similar changes were previously discussed in
https://github.com/netty/netty/pull/12462. Since some workflows were
left out of the previous PR, this PR is a small update to restrict their
permissions.

Modification:

Set top level read only permission to `ci-deploy.yml`, `ci-pr.yml`,
`ci-release.yml` and `ci-release5.yml`

I wasn't able to test the workflows:

- `ci-release.yml` and `ci-release5.yml`: although I wasn't able to test
successfully, considering that they are basically using personalized
secrets and not the standard GITHUB_TOKEN (github.token), I've
considered that no write permission would be needed to it. To avoid
errors I've opted for `read-all` instead of `contents: read`.

- `ci-deploy.yml` also seems to not be working so I wasn't able to
provide a success example either.

- `ci-pr.yml` run example
https://github.com/joycebrum/netty/actions/runs/4994205584. Not sure why
it didn't run on my fork but the errors seems not to be related to any
permission. Anyway, I've changed the permission to read-all which
certainly will be enough since it runs on pull request (which will
always be no more than read-all to external PRs).

Result:

Similar change discussed at https://github.com/netty/netty/pull/12462:
since github workflow default behavior is to grant write all permission
to any workflow it is both a recommendation from [OpenSSF
Scorecard](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions)
and the
[Github](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions)
to always use credentials that are minimally scoped.

---------

Signed-off-by: Joyce <joycebrum@google.com>"
f76d6462412fa5c2f6baf82b216356196ebb10bd,"H2/H2C server stream channels deactivated while write still in progress (#13388)

Motivation:

In the context of Reactor-Netty, we experience an issue during HTTP2 (or
H2C) load tests.
We have an HTTP2 (or H2C, it does not matter) server which is using in
the pipeline an Http2FrameCodec, followed by a Http2MultiplexHandler,
and when the client sends a new request, then the Http2MultiplexHandler
will create a child `Http2MultiplexHandlerStreamChannel` that will
contain in its pipeline an Http2StreamFrameToHttpObjectCodec followed by
some other specific reactor-netty handlers.

Now, the issue is the following: when the client sends the last request
frame (with EOS flag=true), and when the server sends the last response
frame (also with EOS flag = true), then in the server the stream will be
closed, and the stream channel handlers will be called in
`channelInactive` (that is ok).
But sometimes, under high load, when the last server response can't be
flushed when the parent channel is non-writtable, then we see that the
server stream channel handlers may be called in`channelInactive` while
the server last response frame is still writing and is not yet flushed.
In other words, the `ChannelFuture` of the last server response sent to
the client is not ""success"", but is ""incomplete"" at the time the child
stream channel handlers are called in `channelInactive`.

Normally, if I'm correct, when a channel handler is called in
`channelInactive`, it means that it is now inactive and has reached its
end of lifetime. So when our handlers are called in `channelInactive`
while the response is not yet flushed (because parent channel was
non-writable), then then we are getting into troubles, because we are
then trying to cleanup resources, like the buffer of the last server
response, but a bit later, when the last response is now flushed, then
the buffer will be freed again, and we end up with many
IllegalReferenceCountExceptions. So, we think that `channelInactive`
should only be invoked after the last response is fully written and
released.

To reproduce the issue and investigate it with the debugger, you can
first run the
`Http2MultiplexTransportTest.streamHandlerInactivatedResponseFlushed`
from this PR, but without applying the patch. Only pay attention to the
""serverloop"" thread.

I tend to think that the problem may start from
`DefaultHttp2RemoteFlowController.FlowState.writeAllocatedBytes(int
allocated)`, line 368, where `frame.writeComplete()` is called: this
method will indirectly trigger
`AbstractHttp2StreamChannel.fireChannelInactiveAndDeregister(), line
742`, but without waiting for the frame promise to complete (the promise
is in `DefaultHttp2ConnectionEncoder.FlowControlledBase`).

Modification:


Added a reproducer test
in`Http2MultiplexTransportTest.streamHandlerInactivatedResponseFlushed`test.
This test simulates non-writable socket by configuring the SO_SNDBUF of
the server side connection to `1`. This will trigger the issue, because
when the server will respond, it will get many writability events and
the response won't be flushed immediately.

I have tried to apply the following simple patch which seems to resolve
the problem: In. `Http2ConnectionHandler.closeStream` method, ensures
that the stream is closed once the future is completed:

instead of doing:

```
    @Override
    public void closeStream(final Http2Stream stream, ChannelFuture future) {
        stream.close();

        if (future.isDone()) {
            checkCloseConnection(future);
        } else {
            future.addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture future) throws Exception {
                    checkCloseConnection(future);
                }
            });
        }
    }
```

the closing is then done in the future listener, like this:
```
Override
    public void closeStream(final Http2Stream stream, ChannelFuture future) {
        if (future.isDone()) {
            doCloseStream(stream, future);
        } else {
            future.addListener(f -> doCloseStream(stream, future));
        }
    }
    
    private void doCloseStream(final Http2Stream stream, ChannelFuture future) {
        stream.close();
        checkCloseConnection(future);
    }
```

This seems to resolve the issue, because the stream will be closed only
once the last response frame has been fully flushed.
The Http2ConnectionHandlerTest.canCloseStreamWithVoidPromise has also
been modified in order to set the promise to success before doing the
test:

```
    @Test
    public void canCloseStreamWithVoidPromise() throws Exception {
        handler = newHandler();
        handler.closeStream(stream, ctx.voidPromise().setSuccess());
        verify(stream, times(1)).close();
        verifyNoMoreInteractions(stream);
    }
```

Result:

Fixes https://github.com/reactor/reactor-netty/issues/2760"
0e8b0252fb595ccf7c4fdc7cce461264c68b4b1c,"Channel#bytesBefore[un]writable off by 1 (#13389)

Motivation:
Channel#bytesBefore[un]writable methods are described as returning the
number of bytes until writability state changes. The ChannelConfig
buffer high/low water marks are described as the thresholds must be
exceeded before writability changes. The implementation of
bytesBefore[un]writable methods return the number of bytes until the
threshold is meet but not exceeded. If implementations depend upon this
to drive readability they may hang.

Modifications:
- Channel#bytesBefore[un]writable implementations in http/2 and
ChannelOutboundBuffer increment the value by 1 to return how much is
required to cross the water mark therefore trigger a change in
writability.

Result:

No more stales when implementations use `bytesBeforeWritable` / `bytesBeforeUnwritable`"
92f67bf6da68e7944484564d9aac2d0e9bbacc65,"Fix possible NPE when calling PoolArena.toString() (#13393)

Motivation:

We did miss a null check and so risk a NPE during generating the String
representation of the PoolArena.

Modifications:

Add null checks

Result:

Fixes https://github.com/netty/netty/issues/13390."
2822dfdba3651cfda433dcb1842b98f5580b05d5,"fix instant RST/FIN after SYN/SYN-ACK/ACK (#12554)

Motivation:

If you close the connection before the backend connects, the backend
will keep connected until timeout. If you add logging, you will have sth
like that:
```
12:57:57.398 ProxyFrontendHandler channelActive
12:57:57.405 ProxyFrontendHandler channelInactive
12:57:57.431 ProxyBackendHandler channelActive
```
Ping between backend and frontend was about 50 ms, and the time
difference between connecting and disconnecting was about 1 ms.
Example code in Java to test frontend/backend:
```
        while (true) {
            System.out.println(""tick"");
            try {
                Socket socket = new Socket();
                socket.connect(new InetSocketAddress(""127.0.0.1"", 8443), 3000);
                socket.close();
                Thread.sleep(100);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
```


Modification:

Close backend connection if inbound is not active."
fc58d2dd1b9a155c55b56787fb5ae7719ffb83cf,"HTTP/2 should forward shutdown user events to active streams (#13394)

Motivation:

The following 4 user events mean that one of the sides of the parent
channel is shutdown. `Http2MultiplexHandler` and `Http2MultiplexCodec`
should propagate those events to all active streams to let them identify
if they still can complete or not. For example, streams that didn't
receive `endStream` flag can decide to close if they observe one of
these events. These events should still propagate forward through the
parent channel pipeline.

Modifications:
- Create `Http2FrameStreamVisitor`s for `ChannelInputShutdownEvent`,
`ChannelInputShutdownReadComplete`, `ChannelOutputShutdownEvent`,
`SslCloseCompletionEvent`;
- Propagate these events to all active streams of
`Http2MultiplexHandler` and `Http2MultiplexCodec`;
- Add a test to validate new behavior;

Result:

Active child streams can observe when the parent channel's input or
output is shutdown or if it received `close_notify`."
3d8ff07b4ad60aa19d9630e75833881298d201d7,"HTTP/2 should forward shutdown user events to active streams (#13394)

Motivation:

The following 4 user events mean that one of the sides of the parent
channel is shutdown. `Http2MultiplexHandler` and `Http2MultiplexCodec`
should propagate those events to all active streams to let them identify
if they still can complete or not. For example, streams that didn't
receive `endStream` flag can decide to close if they observe one of
these events. These events should still propagate forward through the
parent channel pipeline.

Modifications:
- Create `Http2FrameStreamVisitor`s for `ChannelInputShutdownEvent`,
`ChannelInputShutdownReadComplete`, `ChannelOutputShutdownEvent`,
`SslCloseCompletionEvent`;
- Propagate these events to all active streams of
`Http2MultiplexHandler` and `Http2MultiplexCodec`;
- Add a test to validate new behavior;

Result:

Active child streams can observe when the parent channel's input or
output is shutdown or if it received `close_notify`."
57d536c59e434e88c0d8374d6b03671edb02885f,"HTTP/2 don't propagate `ChannelInputShutdownEvent` to active streams (#13395)

Motivation:

Follow-up for #13394 to remove `ChannelInputShutdownEvent` propagation.
Discussed with @Scottmitch, `ChannelInputShutdownEvent` is a premature
event, most users should rely on `ChannelInputShutdownReadComplete`
instead. Let's propagate only the later one and if there is a use-case
for `ChannelInputShutdownEvent` we can add its propagation later.

Modifications:

- Remove `CHANNEL_INPUT_SHUTDOWN_EVENT_VISITOR` to stop propagation of
`ChannelInputShutdownEvent`;
- Adjust tests;

Result:

`ChannelInputShutdownEvent` is not propagated for now. We can add it
back when there is a use-case."
4eda913d998898d8489565904b2a5d133d081413,"Respect the number of bytes read per datagram when using recvmmsg (#13399)

Motivation:

We didnt correctly use the msg_len field after using recvmmsg. This
resulted in incorrectly slicing the buffer and so returning larger
datagrams then actually received.

Modifications:

- Correctly use the msg_len field after recvmmsg
- Adjust test to cover this defect.

Result:

Be able to use recvmmsg without the risk of generating invalid packets."
69270b102a6339ef3279e3f0755526db001850ef,[maven-release-plugin] prepare release netty-4.1.93.Final
d3ce32b95b52910ede366f3ce0194dd835f28363,[maven-release-plugin] prepare for next development iteration
65212b4090229baf4fcd3958f76285b805dacab4,Add alt-scv header name (#13412)
c1a6994455cea05c873502416cc34d7d9d9610ad,"Update Brotli4j to 1.12.0 (#13415)

Motivation:
Brotli4j v1.12.0 is available and we should upgrade to it.

Modification:
Upgraded Brotl4ij to v1.12.0

Result:
Latest Brotli4j"
d41189cc72a5c98b544bd76162542f356b5b079f,"Respect offset in io.netty.util.NetUtil#toAddressString(byte[], int, … (#13420)

…boolean)

Motivation:

We didnt correctly handle the offset and so did throw an
ArrayIndexOutOfBoundsException.

Modifications:

- Correctly respect the offset
- Add unit tests

Result:

Fixes https://github.com/netty/netty/issues/13403"
22ce6d17032c30307840744e5c4c38d7af189673,"Obtain the local address from the fd when the client connects only with remote address (UDS) (#13419)

Motivation:
Client can use only a remote address for connecting to the server.

Modifications:
- Obtain the local address from the fd when the client uses only a
remote address for connecting to the server.
- Add junit test

Result:

Fixes #13417"
71a0906a8b06d10a6ddff6559aefece445706e30,"Use `flush` method directly instead of reflections (#13416)

Motivation:
Brotli4j v1.12.0 has exposed `flush` methods to `public`. We use should
it instead of reflection.

Modification:
No more reflections

Result:
Cleaner code"
9412424091eb89f9d55372e38fedbcfcc285dd94,"Skip finalization for PoolThreadCache instances without small/normal caches (#13408)

Motivation:

PoolThreadCache doesn't need to be finalized if it doesn't contain
small/normal caches

Modifications:

Create a base class for PoolThreadCache that won't be registered for
finalization

Result:

Less GC activity and reduced footprint for short/medium living threads"
bc3035f51b8524e737f5f9b693957977a88258e9,"Enhance DNS logs and make them consistent (#13429)

Motivation:

Always include information that helps to correlate log events.

Modifications:

- Always include `Channel` at the beginning of every log, when channel
is available;
- Always include `[queryId: sender]` when available;
- `DnsQueryContext`: include expected values when logging at `WARN`
level;

Result:

Consistent logging, easier to correlate log events."
385b2880845520c6a50f8de5ed0653a2c7d75173,"Use network byte order when encoding ipv4 address and port for Socks codecs (#13427)

Motivation:

Socks codecs do not always use network byte ordering when
encoding/decoding socks messages resulting in connection issues

Modification:

Use BE methods to properly read/write socks messages

Result:

Fixes #13426"
0c33b09bfee0d216a44649622dfc656c6397d1e9,"`DnsNameResolver`: log statically initialized variables (#13431)

Motivation:

`DnsNameResolver` initializes some static variables based on the
environment. It's helpful if it prints out at debug level the result of
initialization.

Modifications:

- Log static variables of `DnsNameResolver` at debug level;

Result:

Users can see the result of `DnsNameResolver` initialization when debug
level logging is enabled."
bdb78730abc8b5ff04e4cdf5d8fec196585fec4a,"Call ReleaseByteArrayElements even when handling of socket_path fails… (#13435)

… to fix small mem leak

Motivation:

We need to ensure we always call ReleaseByteArrayElements otherwise we
leak memory.

Modifications:

Always call ReleaseByteArrayElements even when validation / handling of
socket_path fails

Result:

Fix possible small memory leak"
7d5fcf79d4ddb47f011a0e42575572ed63c8ab9b,"Always enable leak tracking for derived buffers if parent is tracked (#13436)

Motivation:

Currently, when leak tracking is set to SIMPLE or ADVANCED, and a
derived buffer is created, the buffer is selected for leak tracking if
the parent buffer is tracked and the derived buffer is also selected by
an independent roll of the dice. As a result, deeply derived buffers are
exponentially less likely to be selected for leak tracking. This makes
it difficult to find and diagnose leaks related to such buffers.

Modifications:

When a derived buffer is created, and the parent buffer has leak
tracking, the derived buffer now always has leak tracking applied.

Result:

Leaks of derived buffers are easier to find. Fixes #13414."
79c773c541ad351b3ee56b835e4ac25f37e3a437,"Release DnsRecords when failing to notify promise (#13437)

Motivation:

We need to release the DnsRecords if we didnt transfer ownership to
prevent leaks.

Modifications:

Release DnsRecords when trySuccess(...) returns false

Result:

Correctly release reference counted resources"
c59a11c6745f1cb49705c7a263850348a3e1e649,"Rewrite DnsQueryContextManager to simplify and make it easier to debug (#13440)

Motivation:

We are currently investigate an issue where it seems that we receive un
unexpected hostname in the response. To make it easier to debug let us
simplify the DnsQueryContextManager

Modifications:

- Move extra logic to internal class
- Add asserts

Result:

Cleanup"
22bf43b03999f40459c61b61c453e0989563cc98,"Adjust resolver code to make it easier to test in the future (#13445)

Motivation:

DnsQueryContext had a dependency on DnsNameResolver which made it hard
to write tests for things like DnsQueryContextManager and
DnsQueryContext in isolation.

Modifications:

- Remove dependecy on DnsNameResolver
- Cleanup code

Result:

Easier to write self-contained tests and cleanup"
bf8e77974c4e470be002415ea04ca567ded6d9b7,"Simplify DnsQueryContext usage again (#13450)

Motivation:

22bf43b03999f40459c61b61c453e0989563cc98 made some changes to simplify
DnsQueryContext but did introduce one change which might be a bit
error-prone.

Modifications:

Don't pass the nameserveraddress and the channel to the finish* and
writeQuery methods.

Result:

Always log / use the correct nameserveraddress / channel"
b87831421109536df204bde0023921163fba4696,"Delay possibility to reuse transaction id when query is failing becau… (#13446)

…se of timeout

Motivation:

We should try to make it as unlikely as possible that we will reuse a
transaction for a query while the remote peer still might send the
response for the previously timed out query. Failing to do so put us in
risk that we will not be able to map the response correctly.

This reduces the risk of the following scenario:

- Query is send to the remote nameeserver
- Query is failed as the remote nameserver did not respond in the
configured time
- New query is send which uses the same transaction id as the failed
one. While we use a random to generate these this can still happen as we
only have 16bits for the id
- nameserver sends back the response for the first query (that we
already failed as timed out)
- We lookup the query for the id and find the new one and try to
complete it with the response for the ""old query"".
- This fails as validation of hostname etc not matches.

Modifications:

If we fail a query because of a timeout or cancellation, delay the removal of the id from
the context map. This will make the id not-reusable until the removal
actually take place.

Result:

Much less likely to reuse an id while the remote nameserver might still
respond to the old query"
26a7df3e9a5a4945786a736ad28cb2db62015016,"Implement contains for SelectedSelectionKeySet (#13452)

Motivation:
The `contains` method may be called in the
`sub.nio.ch.SelectorImpl.processReadyEvents` method on macOS and
Windows, so we need to implement it correctly. Otherwise, we can lose
read-poll events.
See the investigation on the Hazelcast repo:
https://github.com/hazelcast/hazelcast/pull/24267

Modification:
Add a contains method that just does a linear scan for the selection
key. This preserves the performance characteristics of all the other
methods.

Result:
Fixes #13328"
dd2c2bbb723c9a10e3efc6d7bc2cc4a4720375e2,"Use Two-Way for finding the delimiter in DelimiterBasedFrameDecoder (#13451)

Motivation:
We were using the naive and inefficient O(nm) algorithm here.

Modification:
Remove the naive algorithm and instead call out to the optimised Two-Way
search we already have in ByteBufUtil.

Result:
The DelimiterBasedFrameDecoder now searches for delimiters using the
fastest algorithm available to us.

Fixes #13313"
1bb825b7cec563acbb5e1d257f9d48551bbc707d,"Reuse Bootstrap to create SocketChannel for DNS TCP (#13453)

Motivation:

There is no need to create a new Bootstrap each time we open a new
connection.

Modifications:

- Create the Bootstrap only once
- Tighten up some visibility

Result:

Produce less GC"
535da17e45201ae4278c0479e6162bb4127d4c32,"Merge pull request from GHSA-6mjq-h674-j845

Motivation:

In theory the ClientHello can span multiple records and so reach the length of 16MB. This can result in high memory usage, we should allow the user to define a maximum length.

Modifications:

Add new constructor which allows to limit the maximum length of a ClientHello message.

Result:

Be able to guard against high memory usage when parsing ClientHello messages"
da1a448d5bc4f36cc1744db93fcaf64e198db2bd,[maven-release-plugin] prepare release netty-4.1.94.Final
884e7dbbb1ab69d309926445cc8c28a48bed1cdd,[maven-release-plugin] prepare for next development iteration
13e143c2aeec7cc38fa54095189ed4bd762a2975,"Export EPollEventLoop methods for closing/opening native file descriptors as UnstableAPI (#13430)

Motivation:

This change intends to support an application using Netty with native
epoll (e.g. Quarkus app) to perform the Checkpoint and Restore on JVM
implementing this, specifically using OpenJDK CRaC or future versions of
mainline OpenJDK.

Modification:

The biggest risk factor here is that formerly final fields with file
descriptors can change; theoretically this could affect performance in
absence of checkpoint/restore process. However most likely a modern JVM
is smart enough to assume that the field does not change, and
optimistically consider it constant anyway.

Result:

There is no change in functionality.

Signed-off-by: Radim Vansa <rvansa@azul.com>"
a27d255fe07544f26c2ca6c9ca6a81ed2f523ce1,"Add resource leak listener (#13466)

Motivation:

When a leak is detected, the logger will print `LEAK: ....`.
This is very useful to find resource leak, but it is a little
inconvenient, because the log file need to be checked manually.

Another approach is to custom resource leak detector by configuration
`io.netty.customResourceLeakDetector` and implement
`ResourceLeakDetector` with a sub-class, but this is a heavy-weight
operation for users.

There should be an easy way for users to find resource leak.

Modification:

Add leak listener interface to `ResourceLeakDetector`.
Then users can set listener and do something when a leak is detected.
For example:
```
ByteBufUtil.setLeakListener((resType, record) -> {
    MyMonitor.reportAsync(""ByteBufLeak"", 1);  // user can then config email/message/call alarm on the monitor.
});
```

Result:

This new approach is very light-weight for users to find resource leak.

---------

Co-authored-by: xuesenliang <xuesenliang@tencent.com>"
4bd20067ace14b3dfd14e4a4bb9cbe480e97d3b0,"Reduce object allocations during SslHandler.flush(...) (#13472)

Motivation:

In SslHandler.flush(...) we called wrap(...) which used nioBuffer(...)
to obtain a ByteBuffer from a ByteBuf. This creates more objects then
needed. We can use internalNioBuffer(...) for these short living objects
which will often not need to allocate anything when using the
PooledByteBufAllocator.

Modifications:

Use internalNioBuffer(...) when possible

Result:

Fixes https://github.com/netty/netty/issues/13462"
868287b53dab70976fda87edd7c327ce115421a7,"Add VM sockets support  (#13468)

Motivation:

Netty lacks support for VM sockets (linux vsock) which enables guest -
host communication even without guest networking configured

Modification:

Add VM sockets support (address type & LinuxSocket API) on linux for
SOCK_STREAM case

Modify EPOLL channel related code so It can be extended by external
projects to use VM sockets addresses

Result:

Netty has VM sockets support on linux for SOCK_STREAM case

External projects are able to implement VM sockets channels for EPOLL IO"
66166defefff16b417d1d1df6ef7017ae05290b6,"Add `code` and `href` in `WiresharkSslMasterKeyHandler` (#13476)

Motivation:
`WiresharkSslMasterKeyHandler` JavaDoc can be improved by adding `code`
and `href` into it.

Modification:
Added `code` and `href`.

Result:
Better JavaDoc"
00f48a8dd4c263b3aaca7e26d5b8ce573c4f45fb,"Give explicit error on missing BouncyCastle PKIX library (#13475)

Motivation:
If the BounyCastle PKIX library is missing from the classpath, Netty
throws an exception like this: `Failed to generate a self-signed X.509
certificate using Bouncy Castle`. This is not really helpful as the user
has to go through Stacktrace to find out what went wrong. To combat
this, I added a util method that checks if
`org.bouncycastle.cert.X509v3CertificateBuilder` is available in the
classpath or not. Based on this, we can return explicit clear exceptions
which helps in debugging.

`org.bouncycastle.cert.X509v3CertificateBuilder` is part of the
BounyCastle PKIX library.

Modification:
Added `isBouncyCastleAvailable()` method to check for
`org.bouncycastle.cert.X509v3CertificateBuilder` availability in
classpath.

Result:
Clear explicit error on missing BouncyCastle PKIX library"
09c8f60cfd8aad266da66985291de7ef269fa093,"Fix Classloader memory leak via JNI global references (#13481)

Motivation:

We did forget to call NETTY_JNI_UTIL_UNLOAD_CLASS for one class which
caused a JNI global reference to not be deleted.

Modifications:

Add missing NETTY_JNI_UTIL_UNLOAD_CLASS call

Result:

Fixes https://github.com/netty/netty/issues/13480"
425aa8a84e6adde68ee122870a8ec6faeeb2813e,"Ensure ByteBuf.capacity(...) will never throw AssertionError (#13478)

Motivation:

Due of how we implemented PoolArena.reallocate(...) it was possible that
we triggered an AssertionError while trying to resize a buffer.

Modifications:

- Ensure some parts of reallocation for a ByteBuf are serialized
- Change method signature to remove not needed param
- Add unit test

Result:

Fixes https://github.com/netty/netty/issues/13461 and
https://github.com/netty/netty/issues/13467"
a881114ccd986760ad84cff1a29fd842f83ee114,"Remove redundant native call on epoll/kqueue channel instantiation. (#13483)

Motivation:

on channel instantiation, Epoll & KQueueSocketChannelConfig makes 2 same
native calls socket.getSendBufferSize() to calculate and set
MaxBytesPerGatheringWrite.

Modification:

call socket.getSendBufferSize() once, use obtained value to both
calculate and set MaxBytesPerGatheringWrite.

Result:

no redundant native calls when new Epoll or KQueue channel is
instantiated."
23da1180f42e36b9739ae5199b411d56a2d68650,"Move the invocation of `chunk.decrementPinnedMemory(int)` into `PoolArena.free(...)` method (#13484)

Motivation:

`chunk.decrementPinnedMemory(int)` is better to be invoked from
`PoolArena.free(...)` method, there are 3 reasons to make this change:
1. Reduce race overhead of invoking `chunk.decrementPinnedMemory(int)`
when calling `PooledByteBuf.capacity(int)` concurrently.
2. After PR [13478](https://github.com/netty/netty/pull/13478), this
change will make `chunk.decrementPinnedMemory(int)` not to be invoked
concurrently when calling `PooledByteBuf.capacity(int)` concurrently.
3. From 'method cohesive' perspective,
`chunk.decrementPinnedMemory(int)` is more appropriate to be invoked
from `PoolArena.free(...)` method.

Modification:
- Move invocation to the proper place

Result:

Cleanup 


Co-authored-by: laosijikaichele <laosijikaichele>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
f8d47d8489c64f7cacf7c28806103f69300d8b13,"Mark Close after PCapWriter is closed (#13487)

Motivation:
Right now, we mark `PcapWriteHandler` as closed even before closing
`PcapWriter`. When we call `PcapWriter#close`, it detects the state to
be closed and ignores closing `OutputStream`.

Modification:
To prevent this from happening, we should call `markClosed` only after
calling `PcapWriter#close`.

Also added `CloseDetectingByteBufOutputStream` to detect `close` call
and assert it in the test case.

Result:
Properly close `PcapWriter` and prevent memory leak of `OutputStream`."
85ddc978f5c5576374411ea8c36d69a880d5cf19,"Add a specific test for optional whitespace in HTTP headers (#13486)

Motivation:
Since we made header value validation more strict in 4.1.84, we've
gotten the occasional issue reported that whitespace isn't handled
correctly.

Modification:
Add a test that stresses the optional whitespace decoding of HTTP
headers, because I think we didn't have one already.
Also include a javadoc comment with relevant RFC references.

Result:
This proves that we handle optional whitespace correctly when we decode
HTTP headers.

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
ac34240ca35cc1160f937c2e10ccbaf4155909a2,"Added ""@Override"" to the methods initChannel() (#13490)

Motivation:

Overridden methods are not annotated with ""@ Override"".

Modification:

Added ""@ Override"" to the methods initChannel(): 
- io.netty.handler.codec.http2.Http2MultiplexTransportTest#asyncSettingsAck0
- io.netty.example.mqtt.heartBeat.MqttHeartBeatBroker#main
- io.netty.example.mqtt.heartBeat.MqttHeartBeatClient#main

Result:

The code looks more intuitive.

Co-authored-by: huangguo <hg654321>"
fa2c81f7cb9115d9417410ec23f023ae9ea34f8b,"Make transport.Bootstrap usable with no netty-resolver on classpath (#13488)

Motivation:
Since some address families (e.g. unix sockets) do not need name
resolver, It should be possible to exclude netty-resolver from
classpath.

Currently excluding name resolver leads to NoClassDefFoundError:
AddressResolverGroup during Bootstrap instantiation.

Modification:

Add disableResolver() method to Bootstrap.

Change BootstrapConfig.resolver() return null if
Bootstrap.disableResolver() is called.

Introduce ExternalAddressResolver class to hold AddressResolver related
references to avoid NoClassDefFoundError if Bootstrap.disableResolver()
called and no netty-resolver is on classpath.

Result:

Bootstrap is usable with no netty-resolver on classpath.

---------

Co-authored-by: Chris Vest <mr.chrisvest@gmail.com>"
1e0dab115caf0086ee7d141b558e81d0275f45da,"Correctly retain slice when calling ReplayingDecoderByteBuf.retainedS… (#13496)

…lice(...)

Motivation:

We need to retain the slice when calling retainedSlice(...). Due a bug
we did miss to do so.

Modifications:

- Delegate to the correct method.
- Add test-case

Result:

Fixes https://github.com/netty/netty/issues/13455"
4e1a0c3e2043fd3c0049c94468eff82072c81d2b,"Always increment Stream Id on createStream (#13485)

Motivation:

When the creation of a stream causes an error for whatever reason we
want to increment the next expected stream id.
ie: checkNewStreamAllowed raises an error which causes the headers frame
to get rejected subsequently a data frame arrives and it throws a
protocol error.

Modification:

Use a finally block so that we always increment the expected next stream
id

Result:

Fixes #12065

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
61d75db27778f98bb67384ab13f7dc7abfb4ddd2,"Fix BrotliEncoder bug that does not mark  ByteBuf it encodes as read (#13497)

Motivation:
 
The contract between HttpContentCompressor and compression encoders assumes that encoders will mark the encoded ByteBuf as read after they have been encoded, otherwise the HttpContentCompressor will send encoded chunk twice (one time decoded and one time encoded). The BrotliEncoder peeks the ByteBuf nio buffer and pass it to the BrotliChannelEncoder without marking the ByteBuf and does not respect the implicit contract with HttpContentCompressor.

Modifications:

The BrotliEncoder now will set skip bytes of encoded ByteBuf, in addition the test generic AbstractEncoderTest has been modified to ensure that the readable bytes of a ByteBuf is equals to 0 after it has been encoded.

Result:

This fixes the bug.

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
e4045cc2cd4e739f7e6c36fa60358a40fea8309f,"Upgrade to latest jni-util release (#13498)

Motivation:

We released a new version of jni-util

Modifications:

- Update to latest version

Result:

Use up-to-date version"
22378d800353025bbc83ce5a8564f2b0f44bae60,"Enhance CertificateException message when throw due hostname validation (#13381)

Motivation:

It is hard for end-user to understand why the hostname validation
failed. Let's try to help them by including the SubjectAlternativeNames
if there are any.

Modifications:

- Wrap the X509ExtendedTrustManager and so be able to catch the
CertificateException and add more details if needed
- Add unit test

Result:

Easier to debug hostname validation problems"
ae079d1aed12b4e02f18fc9d1b9a70ebd4e5cba2,"Use internalNioBuffer(...) when possible to reduce object creation (#13499)

Motivation:

We should try to use internalNioBuffer(...) if possible to reduce the
object creation.

Modifications:

Call internalNioBuffer which might be able to re-use the previous
created ByteBuffer

Result:

Less object creation during compression"
e5ca0b0f0b74fd2459c85afff35a507fd9077a2c,[maven-release-plugin] prepare release netty-4.1.95.Final
cbc995865ed1e082d5581744e9c90c6d119652b1,[maven-release-plugin] prepare for next development iteration
7b4cabc6695168e7c8e1b5a8d5748b99791659f7,"Optimize PoolSubpage (#13493)

Motivation:
 Optimize PoolSubpage


 Modification:
1. `PoolSubpage.lock` is used by head only, so it could be created for
head only.
 
2. `PoolSubpage.elemSize` is determined by
`SizeClasses.sizeIdx2sizeTab`, which minimum value is 16, so the
comparison between `elemSize` and `0` should be removed.

3. `PoolSubpage.bitmap` may waste memory. For example, when
`PooledByteBufAllocator.DEFAULT.directBuffer(800)` creates a
`PoolSubpage` object:
    * `runSize` is 57344 (i.e., 56KB),
    * `elemSize` is 896,
    * `maxNumElems = runSize/elemSize` is 64,
    * `bitmapLength` is 1 (i.e., 64 bits is enough for 64 elements)
* **but** `bitmap.length` is 56: (`runSize >>> 6 + LOG2_QUANTUM /*4*/ ==
56`), which could be 1.

 4. Make `bitmapLength` and `maxNumElems` final.

 Result:
PoolSubpage is more clear, and save some memory.

---------

Co-authored-by: xuesenliang <xuesenliang@tencent.com>"
830166292be28e64ec6b43170cff40a31a442ad4,"Fix incorrect statement in ChannelOutboundBuffer javadocs (#13502)

Motivation:

The javadocs of ChannelOutboundBuffer state that its fine to call
isEmpty() and size() from any thread. This is not correct, these methods
should only be called from within the EventLoop thread.

Modifications:

Fix docs

Result:

Correct javadocs. Fixes https://github.com/netty/netty/issues/13501"
8b803abf36a757911e77f747b338b55a02822022,"Replace empty array initialization with constants (#13508)

Motivation:
We should consider reducing memory footprint by reusing an empty array
instead of initializing an empty array for every operation.

Modification:
Re-used already declared Empty Array objects.

Result:
Reduced memory overhead"
c07dec11a90b82674db1529d0402af8e62d6589f,"Remove redundant casts (#13509)

Motivation:
We should remove unnecessary redundant type casing for primitive types
of byte, int and long.

Modification:
Removed unnecessary redundant type casing

Result:
No more redundant casting"
a81a40607420058dd2aba87b846decdabf6d5c83,"Use primitive integer instead of class wrapper (#13507)

Motivation:
As IDE complains, let's use a primitive integer instead of a wrapper
class unless needed.

Modification:
Converted wrapper Integer to int.

Result:
No more wrapper class overhead."
e2f71fe8cff9acab2286f4cc0a3e7c98ed6be10b,"Disable DNS query timeout with zero (#13505)

Motivation:

There is no explicit way to disable DNS query timeout. A positive number
schedules a timeout and the default timeout is used for non-positive
numbers.

Modifications:

- Use the default query timeout only when `queryTimeoutMillis` is a
negative number.
  - 0 is used to mean no query timeout.

Result:

Users can now disable a query timeout of `DnsNameResolver` with `0`."
dc16c5818a5cd0711f17e0a966783cdc84c9db01,"Move the PoolThreadCache finalizer to a separate object (#13510)

Motivation:
PoolThreadCache objects are created even when they are not meant to pool
anything.
In such a case, there is no point in giving them a finalizer() method.

Modification:
The finalizer method is moved to a separate object, which is
conditionally referenced from the PoolThreadCache.
Non-pooling PoolThreadCache objects will not create their FreeOnFinalize
objects.

This is an alternative implementation to #13408, which is also reverted
by this PR.

Additionally, #13408 added a condition to create non-caching
PoolThreadCache when the size of the small and normal caches were zero.
However, it turned out that even when these were requested to be zero, a
single-element cache would be created for them.
This PR also reverts the logic to the old behaviour with the
single-element cache for small and normal sizes.

Result:
We avoid creating finalizable objects when we don't pool."
1c7f0faac060313bfd313d0a50fdf83a2fd2c9c9,"Make initializer as `static` (#13506)

Motivation:
I went through native transport and found that we don't explicitly mark
class initializers as `static`. We should mark them as `static`.

Modification:
Made initializers as `static`

Result:
Clean code and no more IDE warning pings."
1b5a3e9bd8f7d8c644c3d5e8fd971db336d34ac2,"Upgrade java versions (#13513)

Motivation:

There are new releases of java.

Modifications:

Upgrade java versions to latest release

Result:

Use latest versions on the CI"
78cbf3a3de0f86aa7868bd22936e42a8f3f8e28d,"Reduce PoolChunk's metadata size: change LongPriorityQueue to IntPriorityQueue (#13504)

Motivation:

`LongPriorityQueue[]` is used by `PoolChunk` to store available run
information of all page classes.
This information (i.e., `handle`) contains page offset, page count,
isUsed, isSubpage, and bitmapIdx of subpage.

* Handle is inserted to `LongPriorityQueue` and `LongLongHashMap` when
some memory is freed back to the chunk.
* Handle is removed from `LongPriorityQueue` and `LongLongHashMap` when
some memory is allocated.
* One Handle can be split to two handles, and two continuous handles can
be collapsed to one handle.

All the `LongPriorityQueue` operations are only related to page offset
and page count. The low 32bit `bitmapIdx` is not used at all. So the
high 32bit of handle is enough.

Modification:

1) Change `LongPriorityQueue` to `IntPriorityQueue`
2) Store high 32bit handle in `IntPriorityQueue`

Result:

PoolChunk's metadata is smaller.

---------

Co-authored-by: xuesenliang <xuesenliang@tencent.com>"
1735b4230a4935cbecedb48fd687c67aba950068,"Fix `kevent(..) failed: Invalid argument` (#13503)

Motivation:

While I was investigating Armeria CI build failures on macOS, many
`kevent(..) failed: Invalid argument` error messages were produced on
the failed tests.

https://ge.armeria.dev/s/h2fz4h4th66we/tests/task/:core:shadedTest/details/com.linecorp.armeria.server.HttpServerNoKeepAliveTest/shouldDisconnectWhenConnectionCloseIsIncluded(SessionProtocol)%5B4%5D?focused-execution=1&top-execution=1#L7

After adding some debug messages, I figured out that the error raised
when a large number such as `Integer.MAX_VALUE` is set as a timeout.

https://github.com/netty/netty/blob/cbc995865ed1e082d5581744e9c90c6d119652b1/transport-classes-kqueue/src/main/java/io/netty/channel/kqueue/KQueueEventLoop.java#L169-L171
The long timeout is derived from a scheduled task whose timeout is
`Long.MAX_VALUE`. We set `Long.MAX_VALUE` to `DnsNameResolver` in order
to disable a query timeout for testing.

https://github.com/netty/netty/blob/cbc995865ed1e082d5581744e9c90c6d119652b1/resolver-dns/src/main/java/io/netty/resolver/dns/DnsQueryContext.java#L282-L293
https://github.com/line/armeria/blob/2bfe424b652a16f603e2ba1ca075bf992f80f24e/core/src/test/java/com/linecorp/armeria/internal/client/dns/DefaultDnsResolverTest.java#L91-L93

Failed to find a specification for the timeout value of `kevent()`.
However, there was a note on a man page that says the timeout value is
limited to 24 hours.

https://man.freebsd.org/cgi/man.cgi?query=kevent&apropos=0&sektion=0&manpath=FreeBSD+6.1-RELEASE&format=html#end

Modifications:

- Limit the maximum allowed timeout for `kevent()` to 24 hours.
- Skip scheduling a query timeout when the value is `Long.MAX_VALUE`

Result:

`kevent(..) failed: Invalid argument` no longer raises when a task is
scheduled with a large value."
013c38298f6d28ec14543d02ede9bb6a6472ca3f,"Revert ""Always increment Stream Id on createStream (#13485)"" to fix bug which caused sending multiple RST frames for the same id

Motivation:

This reverts commit 4e1a0c3e2043fd3c0049c94468eff82072c81d2b as it seems to cause a race in some situations. More investigation needs to be done but for now let's revert it.

Modification:

Revert commit 4e1a0c3e2043fd3c0049c94468eff82072c81d2b

Result:

No more race which cause multiple RST frames to be send for the same stream id."
3bd421cf9525d3b3f8de2a9f649dceb14c87eccf,[maven-release-plugin] prepare release netty-4.1.96.Final
9eb029d630b269e907aaa4a19bc86753d70e399c,[maven-release-plugin] prepare for next development iteration
26fe3d9a71342caebaf9c73324c27686123a22dc,"Optimize code in method PoolChunk.free(...) (#13524)

Motivation:

The `runSize` may not be used if `PoolSubpage` does not need to be
freed, so it's better to calculate `runSize` after the `if(...)` block.

Modification:

Calculate `runSize` after the `if(...)` block.

Result:

Avoid calculating`runSize` if `PoolSubpage` does not need to be freed.

Co-authored-by: laosijikaichele <laosijikaichele>"
836263d7766640692ffc01f047868f163c35972a,"Marks lazily-initialized 'codeClass' field as final to fix TSAN data race (#13537)

Motivation:

Besides the `codeClass` field, `HttpStatusClass` has only final fields, so it's safe to do an unsynchronized write to codeClass in the Java memory model.
However, TSAN complains about unsafe writes to the `codeClass` field.

Modifications:

Make the 'codeClass' field as `final` and no longer lazily-initialized.

Result:

All fields in `HttpResponseStatus` are now consistently `final`.
TSAN checks are happy."
6f1646fe3aaa5c53f1f1376e049c71e69030dc40,"HttpHeaderValidationUtil should reject chars past the 1 byte range (#13541)

Motivation:

When we use HttpHeaderValidationUtil to validate a non-AsciiString
CharSequence we check each byte but don't consider whether it is larger
than the max value of 0xFF of obs-text.

Modification:

Check is the value is larger than 0xFF.

Result:

We reject more illegal characters.

Relates to #13540."
433aa18b414f5d649925e063b44e36e5302bec0a,"Optimize class PoolSubpage: Remove some lock operations to reduce overhead (#13535)

Motivation:

1. The `lock` inside methods `PoolSubpage.elementSize()` and
`PoolSubpage.maxNumElements()` can be removed, because `elemSize` and
`maxNumElems` are both immutable `final int` fields, so it's safe to
read them without lock.

2. Based on the latest logic of methods `PoolSubpage.maxNumElements()`
and `PoolSubpage.toString()`, if `this` subpage is the 'head' subpage,
then `maxNumElems` is `0`, so we should initialize `maxNumElems = 0` in
the `PoolSubpage()` constructor, instead of `maxNumElems = -1`.

3. The `lock` scope can be shortened in method `PoolSubpage.toString()`,
and the code can be simplified.

4. Remove unnecessary local variables in methods
`PoolSubpage.findNextAvail()` and `PoolSubpage.findNextAvail0()`.

Modification:

See above.

Result:

Reduce overhead.

Co-authored-by: laosijikaichele <laosijikaichele>"
89f11983f93cfb1a0e0af548fa33aacb438381bb,"Fixing `AsciiString#lastIndexOf` To Respect The `offset` (#13527)

Motivation:
The current `AsciiString#lastIndexOf` implementation does not consider
the offset.

Modification:
Fix it to respect the `offset`.

Result:
`AsciiString#lastIndexOf` now accurately finds the index."
b19b979666e61231f3f401725a84da69f5bd51b8,"Revert ""Make initializer as `static` (#13506)"" (#13553)

Motivations:

By changing the code to use a static block we did remove the ability to
load the class at all. This is sort of a regression as it may break
existing code.

Modifications:

This reverts commit 1c7f0faac060313bfd313d0a50fdf83a2fd2c9c9.

Result:

It's possible again to at least load the class all the time as before."
aa07be47d9d2bbb09b1ca9897575ebc4de6056c0,"Sanitize all multibyte chars in HpackHuffmanEncoder (#13546)

Motivation:

To fix the following problem: during encoding, Huffman encoded headers
are sanitized differently compared to non-Huffman encoded headers in
`HpackEncoder`. As a result, characters with code point values higher
than 0xFF which could be decoded to an unexpected control chars instead
of `'?'`.

Modification:

Change how each character is sanitized in `HpackHuffmanEncoder`.
Specifically, use the new approach [1] to replace the old approach [2].

[1] `AsciiString.c2b(aChar) & 0xFF`
[2] `aChar & 0xFF`

Expected output is `0` if `aChar > 0xFF`. But with the old approach, if
`aChar == 0x4E01`, `0x4E01 & 0xFF == 1` which is incorrect.

Result:
All characters with code point values higher than 0xFF are decoded to
`?`s regardless of whether Huffman encoding was used during encoding.

Fixes #13540

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
602cdbe3cb56f4688df5683e0ae05d4eb7398007,"Add support for snappy http content encoding (#13529)

Motivation:

Since netty already supports the decompression of snappy's http content
encoding, it should also consider supporting snappy's http content
compression

Modification:

Add support for snappy http content encoding

Result:

Netty supports snappy http content encoding

---------

Signed-off-by: xingrufei <qhdxssm@qq.com>"
6fc60e04649ae3873f0f52ecb3a387245215dbad,Bump org.python:jython-standalone from 2.7.1 to 2.7.2 in /testsuite-autobahn (#13555)
5cb49747d206d440c81581572bd04054573c8d74,"Honor SslHandler.setWrapDataSize greater than SSL packet length (#13551)

Motivation:

When processing large responses, chunking them into many 16kb chunks
causes excessive load on PoolArena which slows down
AbstractUnsafe.flush0.

Modifications:

Allocate an outNetBuf based on setWrapDataSize. If setWrapDataSize is
larger than SSL packet length, iteratively slice the data buffer,
encrypting chunks into the one larger output buffer.

Reduce unnecessary composition in AbstractCoalescingBufferQueue when a
call to remove() only needs to process one buffer.

Result:

Eliminate contention in PoolArena relative to splitting large responses,
thus increasing overall throughput and reducing overall memory pressure.

Relates to #13549

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
ec9875d084bba34ccf53b5718b48207bb8245ad0,"Optimize method PoolChunk.allocate(...) to reduce overhead (#13528)

Motivation:

When goes into method `PoolChunk.allocate(...)`, we need to check
whether `head.next == head`, it has been checked before in method
`PoolArena.tcacheAllocateSmall(...)`, but `head.next` may have been
changed after that, so it needs to be checked again.

This can lower the chance to call `PoolChunk.allocateSubpage(...)` and
`PoolChunk.allocateRun(...)`, so will reduce overhead.

Modification:

Check whether `head.next == head` in method `PoolChunk.allocate(...)`.

Result:

Lower the chance of calling `PoolChunk.allocateSubpage(...)` and
`PoolChunk.allocateRun(...)` to reduce overhead.

Co-authored-by: laosijikaichele <laosijikaichele>"
64c898307de06a49f365093bb823bd4b7966c3d3,"Add support for snappy http2 content decompression (#13530)

Motivation:

Since netty already supports the decompression of snappy's http content
encoding, it should also consider supporting snappy's http2 content
decompression

Modification:

Add support for snappy http content decompression

Result:

Netty supports snappy http content decompression

---------

Signed-off-by: xingrufei <qhdxssm@qq.com>"
a02644415681e6efc233ff77540003a48908dbf4,"Add support for password-based encryption scheme 2 params (PBES2) (#13539)

Motivation:

Add support for password-based encryption scheme 2 params (PBES2)

Modification:

Describe the modifications you've done.

Result:

Fixes #13536 

Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Chris Vest <christianvest_hansen@apple.com>"
fbb0207d5ecce39f3d63450dfd59bad5510b8e8b,"Handle wildcard addresses in PcapWriteHandler (#13521)

Motivation:

If a UDP socket is bound to :: or 0.0.0.0, on some systems, it can still
send packets to addresses of the other address family. This leads to a
mismatch between the local and remote address families, that
PcapWriteHandler cannot handle.

Modification:

In this scenario, coerce the local wildcard address to the wildcard
address of the proper family.

Result:

Local wildcard address is handled properly and packets are logged as
expected."
711db30226a5d1f4c00c05702b9c6616b7b12c3c,[maven-release-plugin] prepare release netty-4.1.97.Final
2f68f214e4ae350869e29bd052b1809438e4c97e,[maven-release-plugin] prepare for next development iteration
215329f0f551b9a2c20e103328090c4d52a01c82,"Enable client side session cache when using native SSL by default (#13562)

Motivation:

When we introduced support for client side session caching for our
native SSL implementation we disabled it by default as some java
versions had a bug that could result in a NPE. This was fixed for all
java versions >= 8 for a while. Let's enable it by default so people
will receive the performance gains with the need to adjust properties.

Related JDK ticket:
https://bugs.openjdk.org/browse/JDK-8241248

Modifications:

Set io.netty.handler.ssl.openssl.sessionCacheClient to true by default

Result:

Enable client session caching by default."
5155482afc57907a1414994ef5aca79b61ac6999,"Remove useless import (#13567)

Motivation:
Remove useless import

Modification:
Remove useless import

Result:
Cleaner code

Signed-off-by: xingrufei <qhdxssm@qq.com>"
bcaad8a5f0654103a982904ad9545c1c7614c09d,"[codec-mqtt] Add reason codes inventory (#13558)

Motivation:

Despite all the Connect reason codes was inventoried into the
`MqttConnectReturnCode` the same wasn't done for the rest of MQTT
messages. This would simplify the consumption of the messages, having a
predetermined list of result codes as the one defined in the
specification.

Modification:

Introduces a class which contains all the enums to cover Disconnet,
PubSub etc reason codes.

Result:

Fixes #13557 .

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Aayush Atharva <hyperx.pro@outlook.com>"
08e66a938cfac7545f53be7e765d59467dae7718,"Update workflows to make things more robust when it comes to caching (#13571)

Motivation:

When caching fails during workflow execution we should still continue
the build as its just an optimization. Also we should use the new fork
for docker layer caching

Modifications:

- Update action that does the docker layer caching to the new fork
- Ignore errors during caching

Result:

More stable builds"
744a9f9a37da342688ae49bb86516cccbd9c1668,"Update the RSA PSS certificate (#13576)

Motivation:
The test certificates have expired, and tests are failing because of
this.

Modification:
Generate new keys and certificates.
Update the script to not require any inputs.
Add a note to the test about why they might be observed to fail in the
future.

Result:
Tests pass again."
efcd3ce942d6f68510c9e196215d1c9c3c24ff08,"SSLSession.getPeerCertificateChain() should throw UnsupportedOperatio… (#13564)

…nException if javax.security.cert.X509Certificate can bot be created

Motivation:

SSLSession.getPeerCertificateChain() is allowed to throw
UnsupportedOperationException if the implementation does not support it.
We should do exactly this if the JDK that is used can not create a cert
from a byte array. Otherwise we will produce an exception much later
which is confusing.

Modifications:

Check if we can create such a cert and so support it, if not throw an
UnuspportedOperationException as soon as the user tries to use the
method.

Result:

Fixes https://github.com/netty/netty/issues/13560"
a6f28f2734b5ab6d302e1b6812b820d7019b9bbe,"Only create SslClosedException if there are any writes left to fail. (#13580)

Motivation:

There is no need to create the SslClosedException if there is no write
to fail.

Modifications:

Check if there are any pending writes left and only then create the
SslClosedException

Result:

Fixes https://github.com/netty/netty/issues/13569"
7dee4e6f8d3fa41b97666e5ff36b148d498da4ab,"Implement packet coalescing in the local transport (#13570)

Motivation:
It is much more efficient to process data in batches, and this is true
as well for data passing through the local transport, i.e. LocalChannel.
Applications often write many small buffers to their channels, but
expect to process fewer, larger buffers when receiving data from the
network. In fact, when the SslHandler is in the pipeline, we can observe
an orders of magnitude difference in performance when coalescing packets
into bigger buffers before processing, compared to processing packets
individually. The real transports, like NIO and the native transports,
all operate like this.

Modification:
The LocalChannel will now inspect incoming messages, and
opportunistically coalesce small Buffers into bigger ones before sending
them down the pipeline.

Result:
The local transport now sees improved batch processing behaviour.

This is a back port of #13568"
c91d5a2608a8461377d004d5fe1bd2572533083d,"Run action that frees up diskspace during workflows (#13572)

Motivation:

We need quite some diskspace due our ue of docker, let's ensure we have
enough by free up what we dont need on the runner.

Modifications:

Use action that frees up diskspace

Result:

More stable build"
153686b1b8d4fb80e33d9114c974dd7aadc9fe8e,"Add tests for correctly producing handle close_notify (#13581)

Motivation:

We had no tests on how close_notify is produced / handled.

Modifications:

Add unit tests that verify that close_notify is handled correctly

Result:

Verify correct behaviour"
ea801cf19773a0eeb1d9d342c4a17e23762fdf2c,"Prevent classloader leak via JNI (#13584)

Motivation:

We should use weak references to hold global references to our own
classes as otherwise it will be not possible to unload the classloader.

Modifications:

Use weak references for the classes in JNI.

Result:
Fixes https://github.com/netty/netty/issues/13480

---------

Co-authored-by: Silvio Giebl <silvio.giebl@hivemq.com>"
27c7ce9dc4e602337ff31d53a60704676ad7c93d,"Make CipherSuiteConverter also cache failures (#13591)

Motivation:

When instantiation lots of SslContexts (load test simulating lots of
distinct user agents), CipherSuiteConverter performs lots of extra work
(regex) against all the Java cipher suites that can't be converted to
OpenSSL (BoringSSL in my case).

The reason is CipherSuiteConverter only caches successes and not
failures.

Modifications:

* Introduce `CachedValue` that lets store nullable values in a CHM
* always cache the result of `toOpenSslUncached`

Result:

Values that are known to not be convertible to OpenSSL are cached
instead of being tried over and over again."
f1fa227ddf675f055766d04900cce6804fd7f710,"Lazy tableSizeChangeOutput (#13589)

Motivation:

`tableSizeChangeOutput` is an unpooled ByteBuf which is eagerly
allocated for every `DefaultHttp2HeadersEncoder`.

We only need it when we get a SETTINGS frame that has this header, which
might never be the case depending on the application.

This result in excessive allocations when having to deal with short
lived HTTP/2 connections under load.

Modification:

Only allocate `tableSizeChangeOutput` if needed.

Result:

Less allocations"
d453175611c7866db51f75cb98de135d9b15ea5b,"Revert ""Run action that frees up diskspace during workflows (#13572)"" (#13617)

Motivation:

The used github action does not work anymore

Modifications:

This reverts commit c91d5a2608a8461377d004d5fe1bd2572533083d.

Build pass again"
6cb6d38b34fa351ecd5268fd65f799b3eb0b5c8c,"Clarify default TCP fallback behaviour (#13621)

Motivation:

We should make it more clear that TCP fallback is not configured by
default when building a DnsNameResolver.

Modifications:

Expand javadocs

Result:

Fixes https://github.com/netty/netty/issues/13616"
709137e8821e84e98646de7b5b5ac1fd84451041,"Revert ""HttpHeaderValidationUtil should reject chars past the 1 byte range"" (#13615)

Motivation:
[RFC 9110 Section
5.5-4](https://datatracker.ietf.org/doc/html/rfc9110#section-5.5-4) says
we _should_ constrain ourselves to only putting US-ASCII in header
values, _but_ encodings beyond that are technically allowed as long as
they are ASCII-compatible (e.g. ISO-8859-1 or UTF-8).
In such a case, some of their characters will fall into the ""obs-text""
clause.

One complication with our header validation is that we don't at that
point know if we're the recipient or the sender.
And we also don't at that point know what encoding is used.

The Netty header encoder clobbers non-ASCII characters, but people may
have custom header encoders that permit more characters.

Modification:
This reverts #13541, so we no longer enforce that `String` header values
only contain US-ASCII characters.

Result:
Restore the ""support"" for non-ASCII header encodings that we had
previously."
7317f566fddab0910b0405a1fb7f83483c0c4374,"Cleanup docker images (#13620)

Motivation:

Docker images can be quite large, lets try to cleanup things we not
need.

Modifications:

- Cleanup things during docker image creation
- Remove docker layer caching

Result:

Docker image needs less disk-space"
4e17ab6528d7b18236826b75cf55b0cf61b1a129,"Filter out unresolved addresses when parsing resolv.conf (#13614)

Motivation:

We need to filter out unresolved addresses when parsing resolv.conf as
otherwise we might throw an exception while initialize the default
address provider.

Modifications:

Only add address when its resolvable

Result:

Fixes https://github.com/netty/netty/issues/13612"
651d7783a7b24fe6da16736d1b1972f841eeee0f,"Upgrade to maven 3.9.4 (#13624)

Motivation:

There was a new maven release

Modifications:

Upgrade to 3.9.4

Result:

Use latest maven release via maven wrapper"
656dadf053b4426bc3a820d9a05f60ce33159ad1,[maven-release-plugin] prepare release netty-4.1.98.Final
4835afdf36e5076029a64f2fccfb98fac3b8769a,[maven-release-plugin] prepare for next development iteration
a258755f393f40903f6711805682097ff703ef55,"Upgrade maven-settings-action to latest version (#13629)

Motivation:

We should use the latest maven-settings-action to fix warnings

Modifications:

Update maven-settings-action to 2.8.0

Result:

No more warnings"
142027220ab762429c750c3089cfa31d7372dcd2,"Optimize method HttpStatusClass.valueOf(int) (#13543)

Motivation:

The method `HttpStatusClass.valueOf(int)` can be optimized by replacing
if-branches with array lookup.
The array lookup is faster, because dividing by a fixed constant of 100 well by the JIT.

Modification:

Replace if-branches with array lookup and optimized division.

Result:

Faster lookup of HTTP status code class.

---------

Co-authored-by: laosijikaichele <laosijikaichele>"
7685b7d50306495f53676e41a421921a47ff8388,"Add javadoc for `ProxyHandler` and its implementations (#13638)

Motivation:

Clarify purpose of `ProxyHandler`, `HttpProxyHandler`,
`Socks4ProxyHandler`, and `Socks5ProxyHandler`.

Modifications:

Add javadocs

Result:

Make it more clear when to use which handler."
039493085c4b95535f4e480d7579c7c943ce85c6,"`DefaultDnsCache`: apply `MAX_SUPPORTED_TTL_SECS` cap for `negativeTtl` (#13637)

Motivation:

`DefaultDnsCache` already applies `MAX_SUPPORTED_TTL_SECS` as a cap for
`minTtl`/`maxTtl`, but does not apply it for `negativeTtl` that may
suffer from the same problem of scheduling tasks with too big delay on
the `EventLoop`. See

https://github.com/netty/netty/commit/b47fb817991b42ec8808c7d26538f3f2464e1fa6

Modifications:

- Apply `MAX_SUPPORTED_TTL_SECS` cap for `negativeTtl` in ctor;

Result:

`negativeTtl` is capped by `MAX_SUPPORTED_TTL_SECS`."
2fcda074b9adf68ed25a550d8d9dd37d270b4f8f,"Do not try to delete a global handle with the local handles APIs (#13640)

Motivation:

The code introduced as part of
https://github.com/netty/netty/issues/13480 contained a bug which could
crash the JVM. This only manifested in JDK21+ as earlier versions did
not contain the related assert.

Modifications:

Remove left-over call that could crash the JVM

Result:

Correct code that also works on JDK21"
3fc6566f559207600249bf128d80474b3d06eb04,"Enable build with JDK21 (#13627)

Motivation:

Now that JDK21 is released we should also build with it on our CI

Modifications:

Add docker-compose config for JDK21 and use it in the PR workflow

Result:

Test with latest LTS release"
97276486599de0d72d16ceeac8802afa2c2249ef,"Use '-Xcheck:jni' during testsuite run to detect JNI bugs (#13642)

Motivation:

We should run our testsuite with '-Xcheck:jni' to ensure we catch bugs
in our JNI code which could later cause issues like crashes

Modifications:

- Add -Xcheck:jni

Result:

Testsuite will be able to catch more JNI bugs"
8e3fe284251d61543cfc37c6b061b63ce6946aaf,[maven-release-plugin] prepare release netty-4.1.99.Final
d7a8169f1b9bb4cf7708c066d26490da6be53cce,[maven-release-plugin] prepare for next development iteration
ce5c78cec192e935ff7191d94db06d6abdc27dae,"Update actions to the latest version (#13644)

Motivation:

We used some actions which didnt declare the latest versions

Modifications:

Update actions to latest version

Result:

Cleanup"
5db037beedca8aa5b6a486fa515cc6af013ced74,"Speedup max direct memory estimation via Unsafe (#13643)

Motivation:

PlatformDependent::estimateMaxDirectMemory reflectevly allocates MX
Beans to detect JVM's arg MaxDirectMemory (often failing to find any,
because unconfigured).

Modifications:

Allow unsafe to find Bits's max memory static field and use it as a fast
path to detect the same direct memory limits used by the JVM runtime

Result:

Faster and less memory hungry (in term of mallocs) startup"
275341f01cbc0e6230c5cc3b47cca3f24611c6da,"Fix issue with unrecognized JVM option while running with Java 11 (#13648)

Motivation:

While running with Java 11, hit the following issue
```
# Created at 2023-10-03T16:18:21.784
JVMJ9VM007E Command-line option unrecognised: -D

# Created at 2023-10-03T16:18:21.786
Error: Could not create the Java Virtual Machine.

# Created at 2023-10-03T16:18:21.786
Error: A fatal exception has occurred. Program will exit.
```

Modification:

Update pom.xml to change new JVM option to default to -D_

Result:

Runs now don't hit this issue on JDKs other than 21"
d97f2a5606aaccf7494ff29d7229be1349fe746a,Update checkout action to latest version (#13649)
caca5e5a1e19a26a3cff3560b79e7ade18398540,"When read PoolSubpage's variant fields, it should lock on PoolSubpage's head lock, instead of PoolArena's lock (#13626)

Motivation:

When we read `PoolSubpage`'s variant fields:`doNotDestroy` and
`numAvail`, we should lock on `PoolSubpage`'s head subpage, instead of
`PoolArena`'s lock.

Because the writing on `doNotDestroy` and `numAvail` is always under
`PoolSubpage`'s head subpage lock.

Modification:

1. Introduced a `int headIndex` field in `PoolSubpage` to locate the
head subpage, lock on `PoolSubpage`'s head subpage instead of
`PoolArena`'s lock.
2. This also help to locate head subpage when doing `bytebuf` release.
Fixed [13625](https://github.com/netty/netty/issues/13625).

Result:

See above.

---------

Co-authored-by: laosijikaichele <laosijikaichele>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
491144865ad683f43ef1db64256aed8fd84a50be,"Do not fail when compressing empty HttpContent (#13655)

Motivation:

HttpContentCompressor fails with an exception when trying to write an
empty HttpContent:

```
io.netty.handler.codec.EncoderException: MessageToMessageCodec$1 must produce at least one message.
	at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:99)
	at io.netty.handler.codec.MessageToMessageCodec.write(MessageToMessageCodec.java:116)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:879)
	at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:863)
	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:968)
	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:856)
	at io.netty.channel.ChannelDuplexHandler.write(ChannelDuplexHandler.java:115)
```

Modification:

If the compression has no output, write an empty dummy HttpContent. This
is not an ideal solution, but this should not happen often anyway.

Result:

HttpContentCompressor does not fail anymore.

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
58f75f665aa81a8cbcf6ffa74820042a285c5e61,"Merge pull request from GHSA-xpw8-rcwv-8f8p

Motivation:

It's possible for a remote peer to overload a remote system by issue a huge amount of RST frames. While this is completely valid in terms of the RFC we need to limit the amount to protect against DDOS attacks.

Modifications:

Add protection against RST floods which is enabled by default.

Result:

Protect against DDOS caused by RST floods (CVE-2023-44487)"
58df783eb4fc50f95a1061dc4274020d6804caf4,[maven-release-plugin] prepare release netty-4.1.100.Final
7aeb4c4b516eb313a75c9c4d5d43bbe060598563,[maven-release-plugin] prepare for next development iteration
33931652a82b16bb2f758bce86ee20eb0ffa566f,"Throwing a stackless exception if RST_FRAME rate is exceeded (#13657)

Motivation:

If channel pipeline doesn't handle this exception the
DefaultChannelInboundPipeline logs its as a WARN with the full
stacktrace which would flood the users logs. Also I don't see too much
benefit of having a stacktrace in this particular scenario.

Modification:

Throw a stackless exception instead.

Result:

Less overhead

Signed-off-by: Adwait Kumar Singh <adwsingh@amazon.com>"
a38f7eba437745a7130ae753525b7df0ffac29cd,"Automatically close `Http2StreamChannel` when `Http2FrameStreamExcept… (#13651)

…ion` reaches end of `ChannelPipeline`

Motivation:

Sometimes the end-user might want to do extra validation and so reset a
stream with a specific `Http2Error`.

Modifications:

Unwrap `Http2Error` and use it to close the `Http2StreamChannel` if it
reaches the end of the `ChannelPipeline`

Result:

More flexible handling for `Http2ResetFrame`s."
2657079302ef7a63a002feccc1492418c0e6934a,"Added check for pseudo-headers in trailers (#13603)

Motivation:
According to the RFC for HTTP2 on Section 8.1.2.1, 'Pseudo-header fields
MUST NOT appear in trailers. Endpoints MUST treat a request or response
that contains undefined or invalid pseudo-header fields as malformed
(Section 8.1.2.6).'

Modifications:
Updated Http2Decoder to check trailers for Pseudo-Headers and treat them
as invalid requests according to RFC 7540 Section 8.1.2.6

Result:
After this change, requests with Pseudo-Headers sent inside trailers
will be treated as malformed and a stream error is thrown.


Fixes: #13602

---------

Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Bryce Anderson <bryce_anderson@apple.com>"
32a025b4eb2c9fefb389ecd5c781f7cabc6ab139,"Support DTLS headers when parsing encrypted packet lengths #2 (#13656)

Motivation:

Supporting DTLS headers allows users to use a DTLS SSLContext to build a
SSLEngine for a SslHandler. There are probably more changes that need to
be added to handle edge cases in DTLS, but this appears to work and
starts the process of supporting DTLS.

Modifications:

Checks for the DTLS version after failing to find the TLS version. If
DTLS version is found, we read the length of each DTLS record until
there are no more records.

Result:

Users can create a SslHandler with a DTLS SSLContext and connect to a
simple server using DTLS.

---------

Co-authored-by: David Stocking <david.stocking@stryker.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>"
9b80d081ff3478c46152b012ae0e21f939467ac3,"Only enable the RST limit for servers by default (#13671)

Motivation:

We dont need to limit the number of RST frames per connection when we
are bulding a codec for the client side.

Modifications:

Dont limit the numbers of RST frames per connection when building a
codec for the client side.

Result:

Only add limit where needed"
60430c80e7f8718ecd07ac31e01297b42a176b87,"Add unit test to validate correct handling of DnsResponse (#13673)

Motivation:

While trying to reproduce a reported issue I did write a unit test which
did proof we are doing the right thing. Let's include it for our
testsuite.

Modifications:

Add testcase for handling response with CNAME and A record in it with
extra additional records

Result:

More tests"
7800070656daf4728a91ce3d527651334d0c7745,"Change default value of MAX_MESSAGES_PER_READ for DatagramChannel imp… (#13676)

…lementations

Motivation:

All our DatagramChannel implementations used a MAX_MESSAGES_PER_READ of
1 due the fact of how they used the ChannelMetaData constructor. This
makes no sense and hurts performance a lot as it will basically result
in have fireChannelRead(...) only called once and then direct
fireChannelReadComplete(...).

For example in a QUIC benchmark I did observe receiving a 1 GB file did
take 14 seconds. After chaning the default to 16 (which is also what
other Channels use) this dropped to 6 seconds for the specific
benchmark.

Modifications:

Use a default of 16 messages per read when using DatagramChannels

Result:

Better performance with default settings"
af9ba8d9ba78bb148802e3052eb0548b7caa4be2,"Also set MAX_MESSAGES_PER_READ to 16 by default in EpollDomainDatagra… (#13678)

…mChannel

Motivation:

7800070656daf4728a91ce3d527651334d0c7745 did changed the default
MAX_MESSAGES_PER_READ to 16 for various DatagramChannel implementations.
Unfortunally I missed EpollDomainDatagramChannel.

Modifications:

Also change EpollDomainDatagramChannel

Result:

Consistent default value"
5a982148ba06ea74ffbefde0f6e577c1fcd9aad2,"Change the default value of maxMessagePerRead to 16 in ChannelMetadata (#13680)

Motivation:

We used 1 as the default value for maxMessagesPerRead in ChannelMetadata
which is a very bad default for performance reasons. Because of this we
usually explicit use 16 when constructing it. To eliminate problems when
we forgot to do so let's use 16 as default.

Modifications:

Change default to 16

Result:

Better performance by default"
d2a72648ca2278abcc0099a9f740ec7f4d196e11,"Add service-loaded extension points for channel initialization (#13565)

**Motivation:**

Netty is used by many libraries and frameworks that (reasonably) hide
the fact that they use Netty under the covers. When Netty is hidden, it
is hard, or sometimes impossible, to modify the channel pipelines,
attributes, or options, from the outside. It might not even be clear if
a framework or library makes use of Netty at all. However, we sometimes
want to apply some changes, or make some checks, to most or all channels
that are initialized by Netty, regardless of the framework or library
that is using Netty in the given case.

Some examples of use-cases are:
- Web application firewalls.
- Server-side request forgery filters.
- Intrusion detection.
- Metrics gathering.

To address these use-cases in a way that don't require integrators to
somehow find every Netty usage in a process, we introduce a
service-loaded extension point that hooks into the channel
initialization process.

**Modification:**

A new abstract class, `ChannelInitializerExtension`, is added.
Implementations of this interface can be found and service-loaded at
runtime by `AbstractBootstrap`, with the help of the
`ChannelInitializerExtensions` utility class.

The `ChannelInitializerExtension` class offers three callback methods,
one for the initialization of each of the different ""kinds"" of channels:
- Server listener channels.
- Server child channels.
- Client channels.

The extensions are disabled by default for security reasons, and require
opt in by setting the `io.netty.bootstrap.extensions` system property to
`serviceload`.
To see what extensions are available, the system property can be set to
`log`, and we will load and log (at INFO level) what extensions are
available, but not actually run them.

**Result:**

We have extension points for use cases that are cutting-across different
Netty uses, and require low-level Netty access. This makes it relatively
easy to implement such use cases without requiring deep access to the
Netty internals of arbitrary libraries and frameworks, and without even
needing to know which libraries and frameworks are actually using Netty.
The only restriction to this, is the use of shading with
class-relocation, which in each case would require their own
`META-INF/services` file. Thankfully, most libraries and frameworks that
shade Netty, also offer non-shading versions."
2e3f54031f266a92c913e1d70f1cfb4592810263,"Allowlist ReferenceCountUpdater.retryRelease0 in Netty blockhound int… (#13677)

…egration

Motivation:

Running the Netty blockhound integration results in false positive
BlockingOperatorErrors on fireChannelUnregistered when using reference
counted SSL engine. I've attached a stack trace below indicating that
the `thread.yeild()` is called and marked as a blocking operator within
the `ReferenceCountUpdater` `retryRelease0` method. My guess is that
this is intentional and generally assumed to be ok, meaning we dont'
want to throw and cause a pipeline error.

Modifications:

Add `allowBlockingCallsInside` for the
`ReferenceCountUpdater.retryRelease0` in the blockhound integration

Result:

`BlockingOperationError` will no longer be thrown when
`fireChannelUnregistered` is called with a reference counted ssl engine.

Example Stack Trace:

```
[2023-10-27 15:03:36,117] [WARN] An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
(thread: thrift-eventloop-27)
(logger: io.netty.channel.DefaultChannelPipeline)
(err: reactor.blockhound.BlockingOperationError)
(errmsg: Blocking call! java.lang.Thread.yield)
(origin: java.base/java.lang.Thread.yield(Thread.java))
(fullstack:
io.netty.channel.ChannelPipelineException: io.netty.handler.ssl.SslHandler.handlerRemoved() has thrown an exception.
	at io.netty.channel.DefaultChannelPipeline.callHandlerRemoved0(DefaultChannelPipeline.java:640)
	at io.netty.channel.DefaultChannelPipeline.destroyDown(DefaultChannelPipeline.java:876)
	at io.netty.channel.DefaultChannelPipeline.destroyUp(DefaultChannelPipeline.java:844)
	at io.netty.channel.DefaultChannelPipeline.destroy(DefaultChannelPipeline.java:836)
	at io.netty.channel.DefaultChannelPipeline.access$700(DefaultChannelPipeline.java:46)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelUnregistered(DefaultChannelPipeline.java:1392)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelUnregistered(AbstractChannelHandlerContext.java:215)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelUnregistered(AbstractChannelHandlerContext.java:195)
	at io.netty.channel.DefaultChannelPipeline.fireChannelUnregistered(DefaultChannelPipeline.java:821)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$7.run(AbstractChannel.java:821)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.epoll.EpollEventLoop.run(Unknown Source)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: reactor.blockhound.BlockingOperationError: Blocking call! java.lang.Thread.yield
	at java.base/java.lang.Thread.yield(Thread.java)
	at io.netty.util.internal.ReferenceCountUpdater.retryRelease0(ReferenceCountUpdater.java:186)
	at io.netty.util.internal.ReferenceCountUpdater.nonFinalRelease0(ReferenceCountUpdater.java:168)
	at io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:148)
	at io.netty.util.AbstractReferenceCounted.release(AbstractReferenceCounted.java:76)
	at io.netty.handler.ssl.ReferenceCountedOpenSslContext.release(ReferenceCountedOpenSslContext.java:766)
	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine$1.deallocate(ReferenceCountedOpenSslEngine.java:182)
	at io.netty.util.AbstractReferenceCounted.handleRelease(AbstractReferenceCounted.java:86)
	at io.netty.util.AbstractReferenceCounted.release(AbstractReferenceCounted.java:76)
	at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.release(ReferenceCountedOpenSslEngine.java:517)
	at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:90)
	at io.netty.handler.ssl.SslHandler.handlerRemoved0(SslHandler.java:724)
	at io.netty.handler.codec.ByteToMessageDecoder.handlerRemoved(ByteToMessageDecoder.java:272)
	at io.netty.channel.AbstractChannelHandlerContext.callHandlerRemoved(AbstractChannelHandlerContext.java:1122)
	at io.netty.channel.DefaultChannelPipeline.callHandlerRemoved0(DefaultChannelPipeline.java:637)
	... 17 more

```"
9af0564c05daa10855401f3b7cb1ef05b816fd3e,"Upgrade to maven 3.9.5 (#13683)

Motivation:

A new maven release is out

Modifications:

Upgrade to 3.9.5

Result:

Use latest maven release"
41dcc5d572a9737784ae4243cc915621f499188c,"Upgrade java versions to latest patch release (#13684)

Motivation:

We didnt use the latest java releases on the CI

Modifications:

Update java releases

Result:

Use latest java releases on the CI"
7e18e8344819428a5560064ac15a2f035b4728fd,"Bump Brotli4j to v1.13.0 (#13685)

Motivation:

Brotli4j v1.13.0 is out and we should upgrade to it.

Modification:

Update latest Brotli4j

Result:

Latest Brotli4j version"
5cb2e4f19718464cde92cd78ea12b514cabc3bc8,"Descriptive message for errors related to unknown http2 streams (#13691)

Motivation:

When unknown http2 stream error occurs, It is hard to analyze root cause
since only streamId is provided in message.

Modification:

Add frame type, endOfStream flag (where applicable) to error message.

Result:

More descriptive error messages."
c6a6aadaface1b2b66d2608dcdc6e4c04c1648cc,[maven-release-plugin] prepare release netty-4.1.101.Final
285ba74f899866ddf3e23a6770c954e350245bd7,[maven-release-plugin] prepare for next development iteration
5a58f0431e286f2943de75738208b6403c22b722,"Faster setZero (Fixes #13692) (#13693)

Motivation:

Unsafe's buffer setZero always piggyback to the JDK's Unsafe::setMemory,
which is not optimized for small writes, given that's not an intrinsic
candidate
and requires handling thread-state transitions.

Modifications:

Handle small writes with a specialized code path which won't rely on
Unsafe::setMemory

Result:

Faster setZero(...) and writeZero(...)"
2241f829e223f1959e8d04f5c8c4c5612d4d0885,"Workaround for regex bug in Android SDK (#13695)

Motivation:

If Netty is started from an Android app and certificate/private key are
passed into the builder as input streams, an error occurs:
org.conscrypt.OpenSSLX509CertificateFactory:
org.conscrypt.OpenSSLX509CertificateFactory: java.lang.RuntimeException:
error:0c0000a2:ASN.1 encoding routines:OPENSSL_internal:NOT_ENOUGH_DATA

Due to a bug in the regex implementation in Android SDK, the certificate
is parsed from the input stream as BEGIN and further creating of the
X.509 certificate fails.

See https://issuetracker.google.com/issues/293206296 

Modifications:

The end position of the latest match is saved into a variable and used
as the start position for the next match as a workaround for the bug.

Result:

Fixes #13515

Netty starts on Android without an error."
7dba4fcf499425914e09993d1f2bd439794cb3d6,"Upgrade to maven-wrapper 3.2.0 (#13697)

Motivation:

A new maven-wrapper release is out

Modifications:

Upgrade to 3.2.0

Result:

Use latest maven-wrapper release

---------

Signed-off-by: Jorge Solórzano <jorsol@gmail.com>
Co-authored-by: Norman Maurer <norman_maurer@apple.com>
Co-authored-by: Aayush Atharva <hyperx.pro@outlook.com>"
84a13a92e1d757965438dc41a5611b19dd47ec44,"Deprecate disabling HTTP header validation (#13609)

Motivation:
HTTP request/response splitting is a serious vulnerability, which is
mitigated by enabling HTTP header validation. We already do header
validation by default, but we have many constructors in our HTTP codec
that permit turning it off. We should discourage all our down-stream
users from turning header validation off.

Modification:
- Deprecate all constructors in our HTTP codec, that allow header
validation to be turned off.
- Offer alternative constructors to all the newly deprecated ones, where
header validation is enabled.
- Trailer validation in `DefaultLastHttpContent` is now enabled by
default in the `DefaultLastHttpContent(ByteBuf, HttpHeaders)`
constructor (Behavioral change!)
- Add better constructors, and more guidance in the javadocs, for
`DefaultHttpHeaders` for those who want to use custom header validators.

Result:
We hopefully encourage integrators to validate headers. And we hopefully
get fewer issues reported about disabled header validation when people
run security scanners on their code."
f2dfae3d3715cfd3ece69594daa09f6a15b74323,"Remove native-image.properties from netty-transport (#13596)

Motivation:

See #13595

Modification:

Rename reflection-config.json to reflect-config.json and let
native-image detect it automatically.

Result:

Fixes #13595"
bd126894b4490a2c807b3b73be7a0d0704ee0a36,"Adds topicFilter method to MqttTopicSubscription and deprecate topicName (#13702)

Motivation:

MQTT specification when refers to subscriptions always speak about topic
filters. Topic filters are string (like topic names) but that could
contain wildcard characters to subscribe to multiple topic names.
Topic names are used only during the publish request.

Modification:

This PR deprecates the existing topicName and adds topicFilter because
it's more adherent to MQTT specification jargon.


Result:

Better method naming 

---------

Co-authored-by: Aayush Atharva <hyperx.pro@outlook.com>"
8b20d6bc9226d52bfcddb8a565879b0d5d28162e,"Use Http2Headers.size() instead of isEmpty() (#13717)

Motivation:

grpc-java prior to version 1.59.1 does not implement
`Http2Headers.isEmpty()` method (it throws
`UnsupportedOperationException`). While the fix was released in 1.59.1,
there is another issue with circular dependencies between `grpc-core`
and `grpc-util` modules. To unblock Netty users that also depend on
grpc-java, we can check the size.

Modifications:

- Use `Http2Headers.size()` instead of `Http2Headers.isEmpty()` in
`DefaultHttp2ConnectionDecoder`;

Result:

Users of older grpc-java versions can independently bump Netty version."
1e2b9557953587720243319a150218144d100327,"Bump ch.qos.logback:logback-classic from 1.2.3 to 1.2.13 (#13718)

Bumps
[ch.qos.logback:logback-classic](https://github.com/qos-ch/logback) from
1.2.3 to 1.2.13.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/qos-ch/logback/commit/2648b9e7fbb47426c89b9c93b411c07484e8f277""><code>2648b9e</code></a>
prepare release 1.2.13</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/bb095154be011267b64e37a1d401546e7cc2b7c3""><code>bb09515</code></a>
fix CVE-2023-6378</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/45732949bfb845df04cbe65292cf48aaa090cb1d""><code>4573294</code></a>
start work on 1.2.13-SNAPSHOT</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/a388193052c298ca87cc64192319df723288c6ab""><code>a388193</code></a>
Merge branch 'branch_1.2.x' of github.com:qos-ch/logback into
branch_1.2.x</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/de44dc422bc3da1d7808283851324d960b492d4d""><code>de44dc4</code></a>
prepare release 1.2.12</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/ca0cf172f680308938515b8a5d69348759ee947c""><code>ca0cf17</code></a>
Merge pull request <a
href=""https://redirect.github.com/qos-ch/logback/issues/532"">#532</a>
from joakime/fix-jetty-requestlog</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/e31609b1980b9ba986344aae3cab7275fa2b4935""><code>e31609b</code></a>
removed unused files</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/21e29efb284766f386781175b2ba18585b690154""><code>21e29ef</code></a>
Merge pull request <a
href=""https://redirect.github.com/qos-ch/logback/issues/567"">#567</a>
from spliffone/LOGBACK-1633</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/e869000e1d5901e6aa6f46cc6575ee2137f15b69""><code>e869000</code></a>
fix: published POM file contain the wrong scm URL</li>
<li><a
href=""https://github.com/qos-ch/logback/commit/009ea46cb81a015f2ca312bde6e823581b93b37a""><code>009ea46</code></a>
version for next dev cycle</li>
<li>Additional commits viewable in <a
href=""https://github.com/qos-ch/logback/compare/v_1.2.3...v_1.2.13"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ch.qos.logback:logback-classic&package-manager=maven&previous-version=1.2.3&new-version=1.2.13)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts page](https://github.com/netty/netty/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"
e2c706adad8fa3c5c5d5f15d1b6b2fb0a582a06d,"`ConnectTimeoutException`: include timeout value (#13719)

Motivation:

When transport throws `ConnectTimeoutException`, it's useful to know
what was the pre-configured value that triggered the timeout.

Modifications:

- Enhance exception message for all `ConnectTimeoutException` use-cases
to include `connectTimeoutMillis` value;

Result:

Users can understand what was a pre-configured value of
`connectTimeoutMillis` that triggered `ConnectTimeoutException`."
ade1223dd31d32e5ea0288b8a0f0fd148e231d0f,"Add support for RISC-V (#13670)

Motivation:

RISC-V is gaining traction across the industry and many projects rely on
Netty. To run these projects, Netty needs to support RISC-V.

Modifications:

Mostly build scripts and CI files. CentOS doesn't have packages with
recent-enough versions for autoconf, automake, libtool, and the GNU
compiler toolchain.

Result:

Fixes https://github.com/netty/netty/issues/13667

linux-riscv64 packages are created in a similar manner to linux-aarch64
packages."
f9e20ac0490d2877c81def47a7d4046e06d9f410,"Make SizeClasses as composition with PoolArena instead of inheritance to reduce memory usage (#13613)

Motivation:

For one `PooledByteBufAllocator` instance, the array
`PooledByteBufAllocator.heapArenas[]` only needs one `SizeClasses`
instance, so does the `PooledByteBufAllocator.directArenas[]`, this will
reduce memory usage.

Take the `PooledByteBufAllocator.DEFAULT` as an example, on my laptop,
after `PooledByteBufAllocator.DEFAULT` initialized, there are
`heapArenas[16]` and `directArenas[16]` arrays created, every element of
the arrays created following `int[]` array by `SizeClasses`'s
constructor:
```
int[] pageIdx2sizeTab; // Length is 32 on my laptop
int[] sizeIdx2sizeTab; // Length is 68 on my laptop
int[] size2idxTab; // Length is 256 on my laptop
```
After `PooledByteBufAllocator.DEFAULT` initialized, there are 32 `int[]
pageIdx2sizeTab`, 32 `int[] sizeIdx2sizeTab`, and 32 `int[] size2idxTab`
arrays created.

This is not necessary, because the `PooledByteBufAllocator.heapArenas[]`
can share one `SizeClasses` instance, so does the
`PooledByteBufAllocator.directArenas[]`.

After the PR change, the `PooledByteBufAllocator.DEFAULT` only needs 2
`int[] pageIdx2sizeTab`, 2 `int[] sizeIdx2sizeTab` and 2 `int[]
size2idxTab` arrays.

It reduced at least 42720 bytes memory usage when use
`PooledByteBufAllocator.DEFAULT`:
4 * (30 * 32 + 30 * 68 + 30 * 256) = 42720 bytes. 

So we make `SizeClasses` as composition with `PoolArena` instead of
inheritance.
And it still reserves the ability to create `SizeClasses` per
`PoolArena` for possible different implementation in the future.

Modification:

Make `SizeClasses` as composition with `PoolArena` instead of
inheritance.

Result:

Reduced memory footprint.

---------

Co-authored-by: laosijikaichele <laosijikaichele>"
0da2058cbf1b1d76b0cb00036daabe89c32aaa7b,[maven-release-plugin] prepare release netty-4.1.102.Final
b4dad390dffefb04a2b2d518ad1c3515b0f7fb47,[maven-release-plugin] prepare for next development iteration
3ac963f11c3ab978faf0fa8d4d5bb2a9b42d048e,Add check for JAVA8_HOME to release script (#13725)
a34f445516e191ca6c4646f46c280f302e9e3ca7,[maven-release-plugin] prepare release netty-4.1.103.Final
c29508672c7e9aa01bbe2a14f7438d82c5b25f91,[maven-release-plugin] prepare for next development iteration
257742648994569cadce5a6fac079bc8c041b141,[maven-release-plugin] prepare release netty-4.1.104.Final
3710cf1d19fb83cb6d09097db47be97b73248d44,[maven-release-plugin] prepare for next development iteration
356f2f0c892c4d572e60e15f24c33a7996703bb5,"Default value of MAX_MESSAGES_PER_READ not used for native DatagramCh… (#13736)

…annel

Motivation:

Due of how we did set up the RecvByteBufAllocator we did not set the
correct default value for the max message per read.

Modifications:

Pass the RecvByteBufAllocator in the constructor so its setup correctly.

Result:

Fix https://github.com/netty/netty/issues/13733"
427ace4cdd86cce84e467ec0a8a81ca022ed6f72,"Redo fix scalability issue due to checkcast on context's invoke operations (#13741)

Motivation:

ChannelDuplexHandler can implements both ChannelOutboundHandler and
ChannelInboundHandler causing a scalability issue due to checkcast due
to https://bugs.openjdk.org/browse/JDK-8180450
Not only: there are different classes eg Http2ConnectionHandler, which
implement them transitively, by using one of the 2 existing adapters
(ChannelInboundAdapter, ChanneOutboundAdapters). The existing change at
https://github.com/netty/netty/pull/12806 was fixing only the duplex
cases, but others like the above one was still affected.

Modifications:

Replace the duplex type checks with broader inbound adapter ones, given
that duplex is still based on it. Add outbound adapters type checks in
addition to duplex ones.

Result:

More scalable adapters-based channel handler operations."
fdfdf90656c4e0f509f08f594637d07a292da9ec,"Java 9 introduced Arrays:equals intrinsics (#13742)

Motivation:

AsciiStrings and others are heavy users of byte[] equality checks

Modifications:

Leverage existing Arrays::equals(byte[]) intrinsics

Result:

Faster equality matches on hit(s)"
53d67451642e4560708d870103e6f09268b2f7b6,"Also add Specification-* entries to MANIFEST.MF (#13756)

Motivation:

Some tools depend on the Specification-* entries in the MANIFEST.MF.
Unfortunaly we don't add these at the moment

Modifications:

Configure plugin to also add the Specification-* entries

Result:

MANIFEST.MF contains Specification-* entries"
f92e39acc7cf59d1b876f46e71b4592eb692ed4a,"Update to Brotli4j v1.14.0 (#13752)

Motivation:
Brotli4j v1.14.0 is available with Windows ARM support.

Modification:
Upgraded Brotli4j to v1.14.0 and added Windows ARM module and PPC64le
module.

Result:
Latest version of Brotli4j"
7700680138f2310a4d9df51cd0805853c8acdd38,"Speedup AbstractCoalescingBufferQueue::remove (#13746)

Motivation:

AbstractCoalescingBufferQueue::remove is performing slow-path type check
against ByteBuf's to check if it's of type ChannelFutureListener

Modifications:

Performing concrete type checks to speedup performing the right decision
on which type the element belong

Result:

Fixes one of the cases at #13745"
78639fa5ec1da3271dbe79eac28cbf02171c0b73,"Fix exception on HTTP chunk size overflow (#13735)

Motivation:

If there is an overflow in the chunk size calculation, it would throw an
exception on the pipeline instead of an invalid chunk like other number
format errors. In particular:

```
Caused by: java.lang.IllegalArgumentException: minimumReadableBytes : -1932735284 (expected: >= 0)
	at io.netty.util.internal.ObjectUtil.checkPositiveOrZero(ObjectUtil.java:144)
	at io.netty.buffer.AbstractByteBuf.checkReadableBytes(AbstractByteBuf.java:1428)
	at io.netty.buffer.AbstractByteBuf.readRetainedSlice(AbstractByteBuf.java:887)
	at io.netty.handler.codec.http.HttpObjectDecoder.decode(HttpObjectDecoder.java:480)
	at io.netty.handler.codec.http.HttpServerCodec$HttpServerRequestDecoder.decode(HttpServerCodec.java:167)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:529)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:468)
	... 134 common frames omitted
```

Modification:

Check for negative chunk size, and throw a NumberFormatException early.

Result:

This invalid input is treated like any other invalid chunk."
7ad4c4b0795b71f46577cb1bb4c6f4244e209a89,"Inline duplicate variable declaration (#13763)

Motivation:
I was going through the WebSocket code and found that a new
`HttpResponse` variable was declared referring to the same instance.

Modification:
Inlined duplicate variable declaration

Result:
Minor nit and comment cleanup"
